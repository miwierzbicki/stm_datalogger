
stm32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009258  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023fc  080093f8  080093f8  000193f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7f4  0800b7f4  00020744  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7f4  0800b7f4  0001b7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7fc  0800b7fc  00020744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7fc  0800b7fc  0001b7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b800  0800b800  0001b800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000744  20000000  0800b804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  20000744  0800bf48  00020744  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fb0  0800bf48  00020fb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020744  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020774  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a45  00000000  00000000  000207b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fe3  00000000  00000000  000361fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  000391e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ffd  00000000  00000000  0003a658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a8ee  00000000  00000000  0003b655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019570  00000000  00000000  00055f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1019  00000000  00000000  0006f4b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006810  00000000  00000000  001104cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00116cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000744 	.word	0x20000744
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080093e0 	.word	0x080093e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000748 	.word	0x20000748
 80001dc:	080093e0 	.word	0x080093e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <ds18_init>:
#include <stdbool.h>
#include "encoder.h"

TIM_HandleTypeDef *htim10_new;

void ds18_init(TIM_HandleTypeDef *htim10) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	htim10_new=htim10;
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <ds18_init+0x1c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000760 	.word	0x20000760

08000ed4 <delay_us>:

void delay_us(uint32_t us)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
//	uint32_t startTick = DWT->CYCCNT,
//	delayTicks = us * (SystemCoreClock/1000000);
//	while (DWT->CYCCNT - startTick < delayTicks);
	__HAL_TIM_SET_COUNTER(htim10_new, 0);
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <delay_us+0x30>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
	  while (__HAL_TIM_GET_COUNTER(htim10_new) < us) {}
 8000ee6:	bf00      	nop
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <delay_us+0x30>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d8f8      	bhi.n	8000ee8 <delay_us+0x14>
}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	20000760 	.word	0x20000760

08000f08 <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2102      	movs	r1, #2
 8000f12:	4811      	ldr	r0, [pc, #68]	; (8000f58 <wire_reset+0x50>)
 8000f14:	f002 fcec 	bl	80038f0 <HAL_GPIO_WritePin>
  delay_us(480);
 8000f18:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000f1c:	f7ff ffda 	bl	8000ed4 <delay_us>
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2102      	movs	r1, #2
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <wire_reset+0x50>)
 8000f26:	f002 fce3 	bl	80038f0 <HAL_GPIO_WritePin>
  delay_us(70);
 8000f2a:	2046      	movs	r0, #70	; 0x46
 8000f2c:	f7ff ffd2 	bl	8000ed4 <delay_us>
  rc = HAL_GPIO_ReadPin(DSO_DATA_GPIO_Port, DSO_DATA_Pin);
 8000f30:	2102      	movs	r1, #2
 8000f32:	4809      	ldr	r0, [pc, #36]	; (8000f58 <wire_reset+0x50>)
 8000f34:	f002 fcc4 	bl	80038c0 <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	607b      	str	r3, [r7, #4]
  delay_us(410);
 8000f3c:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000f40:	f7ff ffc8 	bl	8000ed4 <delay_us>

  if (rc == 0)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <wire_reset+0x46>
    return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <wire_reset+0x48>
  else
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40020400 	.word	0x40020400

08000f5c <write_bit>:

void write_bit(int value)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if (value) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d010      	beq.n	8000f8c <write_bit+0x30>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <write_bit+0x58>)
 8000f70:	f002 fcbe 	bl	80038f0 <HAL_GPIO_WritePin>
    delay_us(6);
 8000f74:	2006      	movs	r0, #6
 8000f76:	f7ff ffad 	bl	8000ed4 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <write_bit+0x58>)
 8000f80:	f002 fcb6 	bl	80038f0 <HAL_GPIO_WritePin>
    delay_us(64);
 8000f84:	2040      	movs	r0, #64	; 0x40
 8000f86:	f7ff ffa5 	bl	8000ed4 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 8000f8a:	e00f      	b.n	8000fac <write_bit+0x50>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2102      	movs	r1, #2
 8000f90:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <write_bit+0x58>)
 8000f92:	f002 fcad 	bl	80038f0 <HAL_GPIO_WritePin>
    delay_us(60);
 8000f96:	203c      	movs	r0, #60	; 0x3c
 8000f98:	f7ff ff9c 	bl	8000ed4 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <write_bit+0x58>)
 8000fa2:	f002 fca5 	bl	80038f0 <HAL_GPIO_WritePin>
    delay_us(10);
 8000fa6:	200a      	movs	r0, #10
 8000fa8:	f7ff ff94 	bl	8000ed4 <delay_us>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40020400 	.word	0x40020400

08000fb8 <read_bit>:


int read_bit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	480e      	ldr	r0, [pc, #56]	; (8000ffc <read_bit+0x44>)
 8000fc4:	f002 fc94 	bl	80038f0 <HAL_GPIO_WritePin>
  delay_us(6);
 8000fc8:	2006      	movs	r0, #6
 8000fca:	f7ff ff83 	bl	8000ed4 <delay_us>
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	480a      	ldr	r0, [pc, #40]	; (8000ffc <read_bit+0x44>)
 8000fd4:	f002 fc8c 	bl	80038f0 <HAL_GPIO_WritePin>
  delay_us(9);
 8000fd8:	2009      	movs	r0, #9
 8000fda:	f7ff ff7b 	bl	8000ed4 <delay_us>
  rc = HAL_GPIO_ReadPin(DSO_DATA_GPIO_Port, DSO_DATA_Pin);
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4806      	ldr	r0, [pc, #24]	; (8000ffc <read_bit+0x44>)
 8000fe2:	f002 fc6d 	bl	80038c0 <HAL_GPIO_ReadPin>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	607b      	str	r3, [r7, #4]
  delay_us(55);
 8000fea:	2037      	movs	r0, #55	; 0x37
 8000fec:	f7ff ff72 	bl	8000ed4 <delay_us>
  return rc;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40020400 	.word	0x40020400

08001000 <wire_write>:

void wire_write(uint8_t byte)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e00b      	b.n	8001028 <wire_write+0x28>
    write_bit(byte & 0x01);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ffa0 	bl	8000f5c <write_bit>
    byte >>= 1;
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3301      	adds	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b07      	cmp	r3, #7
 800102c:	ddf0      	ble.n	8001010 <wire_write+0x10>
  }
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <wire_read>:

uint8_t wire_read(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	e00e      	b.n	8001066 <wire_read+0x2e>
    value >>= 1;
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	085b      	lsrs	r3, r3, #1
 800104c:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 800104e:	f7ff ffb3 	bl	8000fb8 <read_bit>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <wire_read+0x28>
      value |= 0x80;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800105e:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	2b07      	cmp	r3, #7
 800106a:	dded      	ble.n	8001048 <wire_read+0x10>
  }
  return value;
 800106c:	79fb      	ldrb	r3, [r7, #7]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <encSetRange>:


TIM_HandleTypeDef *htim1_new;


void encSetRange(uint16_t min, uint16_t max) {
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	460a      	mov	r2, r1
 8001082:	80fb      	strh	r3, [r7, #6]
 8001084:	4613      	mov	r3, r2
 8001086:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(htim1_new, max);
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <encSetRange+0x30>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	88ba      	ldrh	r2, [r7, #4]
 8001090:	62da      	str	r2, [r3, #44]	; 0x2c
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <encSetRange+0x30>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	88ba      	ldrh	r2, [r7, #4]
 8001098:	60da      	str	r2, [r3, #12]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000764 	.word	0x20000764

080010ac <encSetPos>:

void encSetPos(uint16_t encPos) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim1_new, encPos);
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <encSetPos+0x20>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	88fa      	ldrh	r2, [r7, #6]
 80010be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	20000764 	.word	0x20000764

080010d0 <encoderGet>:

uint32_t encoderGet(void) {
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(htim1_new);
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <encoderGet+0x18>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000764 	.word	0x20000764

080010ec <encoderInit>:

void encoderInit(TIM_HandleTypeDef *htim1) {
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	htim1_new=htim1;
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <encoderInit+0x1c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000764 	.word	0x20000764

0800110c <entrySelected>:

bool entrySelected(int16_t id) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
    if (encoderGet() == id) {
 8001116:	f7ff ffdb 	bl	80010d0 <encoderGet>
 800111a:	4602      	mov	r2, r0
 800111c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001120:	429a      	cmp	r2, r3
 8001122:	d101      	bne.n	8001128 <entrySelected+0x1c>
        return true;
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <entrySelected+0x1e>
    }
    return false;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <entryClicked>:

bool entryClicked(int16_t id) {
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	80fb      	strh	r3, [r7, #6]
    if (encoderGet() == id && isClicked()) {
 800113c:	f7ff ffc8 	bl	80010d0 <encoderGet>
 8001140:	4602      	mov	r2, r0
 8001142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001146:	429a      	cmp	r2, r3
 8001148:	d106      	bne.n	8001158 <entryClicked+0x26>
 800114a:	f000 f8bd 	bl	80012c8 <isClicked>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <entryClicked+0x26>
        return true;
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <entryClicked+0x28>
    }
    return false;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_TIM_PeriodElapsedCallback>:
int8_t ch2przerwanie=0;
int8_t ch3przerwanie=0;
int8_t ch4przerwanie=0;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d10d      	bne.n	8001192 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_TIM_Base_Stop_IT(htim);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f003 fe34 	bl	8004de4 <HAL_TIM_Base_Stop_IT>
		if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)==GPIO_PIN_RESET) {
 800117c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001180:	4807      	ldr	r0, [pc, #28]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001182:	f002 fb9d 	bl	80038c0 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <HAL_TIM_PeriodElapsedCallback+0x2e>
			sendToUart=1;
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
			}
		}
	}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40014800 	.word	0x40014800
 80011a0:	40020400 	.word	0x40020400
 80011a4:	20000a14 	.word	0x20000a14

080011a8 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t pulse;
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7f1b      	ldrb	r3, [r3, #28]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d10e      	bne.n	80011d6 <HAL_TIM_OC_DelayElapsedCallback+0x2e>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80011b8:	2100      	movs	r1, #0
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f004 fb18 	bl	80057f0 <HAL_TIM_ReadCapturedValue>
 80011c0:	60f8      	str	r0, [r7, #12]
    ch1przerwanie=1;
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (pulse + 6659)); //to wartosc pulse dla kazdego timera
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 80011d2:	3303      	adds	r3, #3
 80011d4:	6353      	str	r3, [r2, #52]	; 0x34
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7f1b      	ldrb	r3, [r3, #28]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d10e      	bne.n	80011fc <HAL_TIM_OC_DelayElapsedCallback+0x54>
  pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80011de:	2104      	movs	r1, #4
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f004 fb05 	bl	80057f0 <HAL_TIM_ReadCapturedValue>
 80011e6:	60f8      	str	r0, [r7, #12]
  ch2przerwanie=1;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
  /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (pulse + 13500));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f503 5352 	add.w	r3, r3, #13440	; 0x3480
 80011f8:	333c      	adds	r3, #60	; 0x3c
 80011fa:	6393      	str	r3, [r2, #56]	; 0x38
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7f1b      	ldrb	r3, [r3, #28]
 8001200:	2b04      	cmp	r3, #4
 8001202:	d10e      	bne.n	8001222 <HAL_TIM_OC_DelayElapsedCallback+0x7a>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001204:	2108      	movs	r1, #8
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f004 faf2 	bl	80057f0 <HAL_TIM_ReadCapturedValue>
 800120c:	60f8      	str	r0, [r7, #12]
    ch3przerwanie=1;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, (pulse + 36000));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 800121e:	33a0      	adds	r3, #160	; 0xa0
 8001220:	63d3      	str	r3, [r2, #60]	; 0x3c
    }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7f1b      	ldrb	r3, [r3, #28]
 8001226:	2b08      	cmp	r3, #8
 8001228:	d10f      	bne.n	800124a <HAL_TIM_OC_DelayElapsedCallback+0xa2>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 800122a:	210c      	movs	r1, #12
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f004 fadf 	bl	80057f0 <HAL_TIM_ReadCapturedValue>
 8001232:	60f8      	str	r0, [r7, #12]
    ch4przerwanie=1;
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, (pulse + 67000));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001244:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
    }
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000a15 	.word	0x20000a15
 8001258:	20000a16 	.word	0x20000a16
 800125c:	20000a17 	.word	0x20000a17
 8001260:	20000a18 	.word	0x20000a18

08001264 <DWT_Init>:

void DWT_Init(void) //pożyczone z https://github.com/keatis/dwt_delay/blob/master/dwt_delay.c
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <DWT_Init+0x38>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10e      	bne.n	8001292 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <DWT_Init+0x38>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	4a08      	ldr	r2, [pc, #32]	; (800129c <DWT_Init+0x38>)
 800127a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800127e:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <DWT_Init+0x3c>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <DWT_Init+0x3c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <DWT_Init+0x3c>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6013      	str	r3, [r2, #0]
    }
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000edf0 	.word	0xe000edf0
 80012a0:	e0001000 	.word	0xe0001000

080012a4 <HAL_GPIO_EXTI_Callback>:

char charAr[50];


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	80fb      	strh	r3, [r7, #6]
	  if(GPIO_Pin == ENC_BTN_Pin) {
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012b4:	d102      	bne.n	80012bc <HAL_GPIO_EXTI_Callback+0x18>
		  HAL_TIM_Base_Start_IT(&htim11);
 80012b6:	4803      	ldr	r0, [pc, #12]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x20>)
 80012b8:	f003 fd32 	bl	8004d20 <HAL_TIM_Base_Start_IT>
	  }
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000988 	.word	0x20000988

080012c8 <isClicked>:


bool isClicked(void) {
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
	if(sendToUart==1) {
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <isClicked+0x24>)
 80012ce:	f993 3000 	ldrsb.w	r3, [r3]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d104      	bne.n	80012e0 <isClicked+0x18>
		sendToUart=0;
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <isClicked+0x24>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
		return true;
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <isClicked+0x1a>
	}
	else {
		return false;
 80012e0:	2300      	movs	r3, #0
	}
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	20000a14 	.word	0x20000a14

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f6:	f001 fbf9 	bl	8002aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fa:	f000 f8d5 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fe:	f000 fb95 	bl	8001a2c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001302:	f000 f939 	bl	8001578 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001306:	f000 f997 	bl	8001638 <MX_I2C1_Init>
  MX_I2C2_Init();
 800130a:	f000 f9c3 	bl	8001694 <MX_I2C2_Init>
  MX_SPI1_Init();
 800130e:	f000 f9ef 	bl	80016f0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001312:	f000 fa23 	bl	800175c <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8001316:	f000 fb5f 	bl	80019d8 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 800131a:	f000 fb15 	bl	8001948 <MX_TIM10_Init>
  MX_TIM11_Init();
 800131e:	f000 fb37 	bl	8001990 <MX_TIM11_Init>
  MX_TIM2_Init();
 8001322:	f000 fa71 	bl	8001808 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init();
 8001326:	f7ff ff9d 	bl	8001264 <DWT_Init>
  encoderInit(&htim1);
 800132a:	4850      	ldr	r0, [pc, #320]	; (800146c <main+0x17c>)
 800132c:	f7ff fede 	bl	80010ec <encoderInit>
  ds18_init(&htim10);
 8001330:	484f      	ldr	r0, [pc, #316]	; (8001470 <main+0x180>)
 8001332:	f7ff fdbf 	bl	8000eb4 <ds18_init>
  huart_ds_init(&huart6);
 8001336:	484f      	ldr	r0, [pc, #316]	; (8001474 <main+0x184>)
 8001338:	f000 fc34 	bl	8001ba4 <huart_ds_init>
  HAL_TIM_Base_Start(&htim10);
 800133c:	484c      	ldr	r0, [pc, #304]	; (8001470 <main+0x180>)
 800133e:	f003 fc95 	bl	8004c6c <HAL_TIM_Base_Start>
  displayInit();
 8001342:	f000 fded 	bl	8001f20 <displayInit>

  wire_reset();
 8001346:	f7ff fddf 	bl	8000f08 <wire_reset>

  bool debug=false;
 800134a:	2300      	movs	r3, #0
 800134c:	737b      	strb	r3, [r7, #13]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800134e:	213c      	movs	r1, #60	; 0x3c
 8001350:	4846      	ldr	r0, [pc, #280]	; (800146c <main+0x17c>)
 8001352:	f003 ff73 	bl	800523c <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001356:	2100      	movs	r1, #0
 8001358:	4847      	ldr	r0, [pc, #284]	; (8001478 <main+0x188>)
 800135a:	f003 fdcb 	bl	8004ef4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 800135e:	2104      	movs	r1, #4
 8001360:	4845      	ldr	r0, [pc, #276]	; (8001478 <main+0x188>)
 8001362:	f003 fdc7 	bl	8004ef4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001366:	2108      	movs	r1, #8
 8001368:	4843      	ldr	r0, [pc, #268]	; (8001478 <main+0x188>)
 800136a:	f003 fdc3 	bl	8004ef4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800136e:	210c      	movs	r1, #12
 8001370:	4841      	ldr	r0, [pc, #260]	; (8001478 <main+0x188>)
 8001372:	f003 fdbf 	bl	8004ef4 <HAL_TIM_OC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(debug) {
 8001376:	7b7b      	ldrb	r3, [r7, #13]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d03b      	beq.n	80013f4 <main+0x104>
		  if(ch1przerwanie==1) {
 800137c:	4b3f      	ldr	r3, [pc, #252]	; (800147c <main+0x18c>)
 800137e:	f993 3000 	ldrsb.w	r3, [r3]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d109      	bne.n	800139a <main+0xaa>
			  HAL_UART_Transmit(&huart6, (uint8_t *)"ch1 sie wykonal \n\r", strlen("ch1 sie wykonal \n\r"), HAL_MAX_DELAY);
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	2212      	movs	r2, #18
 800138c:	493c      	ldr	r1, [pc, #240]	; (8001480 <main+0x190>)
 800138e:	4839      	ldr	r0, [pc, #228]	; (8001474 <main+0x184>)
 8001390:	f004 fe2b 	bl	8005fea <HAL_UART_Transmit>
			  ch1przerwanie=0;
 8001394:	4b39      	ldr	r3, [pc, #228]	; (800147c <main+0x18c>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
		  }
		  if(ch2przerwanie==1) { //castowanie na uint8_t bo funkcja oczekuje wlasnie takiego typu
 800139a:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <main+0x194>)
 800139c:	f993 3000 	ldrsb.w	r3, [r3]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d109      	bne.n	80013b8 <main+0xc8>
			  HAL_UART_Transmit(&huart6, (uint8_t *)"ch2 sie wykonal \n\r", strlen("ch2 sie wykonal \n\r"), HAL_MAX_DELAY);
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
 80013a8:	2212      	movs	r2, #18
 80013aa:	4937      	ldr	r1, [pc, #220]	; (8001488 <main+0x198>)
 80013ac:	4831      	ldr	r0, [pc, #196]	; (8001474 <main+0x184>)
 80013ae:	f004 fe1c 	bl	8005fea <HAL_UART_Transmit>
			  ch2przerwanie=0;
 80013b2:	4b34      	ldr	r3, [pc, #208]	; (8001484 <main+0x194>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
		  }
		  if(ch3przerwanie==1) {
 80013b8:	4b34      	ldr	r3, [pc, #208]	; (800148c <main+0x19c>)
 80013ba:	f993 3000 	ldrsb.w	r3, [r3]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d109      	bne.n	80013d6 <main+0xe6>
			  HAL_UART_Transmit(&huart6, (uint8_t *)"ch3 sie wykonal \n\r", strlen("ch3 sie wykonal \n\r"), HAL_MAX_DELAY);
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	2212      	movs	r2, #18
 80013c8:	4931      	ldr	r1, [pc, #196]	; (8001490 <main+0x1a0>)
 80013ca:	482a      	ldr	r0, [pc, #168]	; (8001474 <main+0x184>)
 80013cc:	f004 fe0d 	bl	8005fea <HAL_UART_Transmit>
			  ch3przerwanie=0;
 80013d0:	4b2e      	ldr	r3, [pc, #184]	; (800148c <main+0x19c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
			  }
		  if(ch4przerwanie==1) {
 80013d6:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <main+0x1a4>)
 80013d8:	f993 3000 	ldrsb.w	r3, [r3]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d109      	bne.n	80013f4 <main+0x104>
			  HAL_UART_Transmit(&huart6, (uint8_t *)"ch4 sie wykonal \n\r", strlen("ch4 sie wykonal \n\r"), HAL_MAX_DELAY);
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	2212      	movs	r2, #18
 80013e6:	492c      	ldr	r1, [pc, #176]	; (8001498 <main+0x1a8>)
 80013e8:	4822      	ldr	r0, [pc, #136]	; (8001474 <main+0x184>)
 80013ea:	f004 fdfe 	bl	8005fea <HAL_UART_Transmit>
			  ch4przerwanie=0;
 80013ee:	4b29      	ldr	r3, [pc, #164]	; (8001494 <main+0x1a4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  uint32_t valueAdc[2];
	  HAL_ADC_Start(&hadc1);
 80013f4:	4829      	ldr	r0, [pc, #164]	; (800149c <main+0x1ac>)
 80013f6:	f001 fc53 	bl	8002ca0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80013fa:	f04f 31ff 	mov.w	r1, #4294967295
 80013fe:	4827      	ldr	r0, [pc, #156]	; (800149c <main+0x1ac>)
 8001400:	f001 fd02 	bl	8002e08 <HAL_ADC_PollForConversion>
	  valueAdc[0] = HAL_ADC_GetValue(&hadc1);
 8001404:	4825      	ldr	r0, [pc, #148]	; (800149c <main+0x1ac>)
 8001406:	f001 fd8a 	bl	8002f1e <HAL_ADC_GetValue>
 800140a:	4603      	mov	r3, r0
 800140c:	603b      	str	r3, [r7, #0]

	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800140e:	f04f 31ff 	mov.w	r1, #4294967295
 8001412:	4822      	ldr	r0, [pc, #136]	; (800149c <main+0x1ac>)
 8001414:	f001 fcf8 	bl	8002e08 <HAL_ADC_PollForConversion>
	  valueAdc[1] = HAL_ADC_GetValue(&hadc1);
 8001418:	4820      	ldr	r0, [pc, #128]	; (800149c <main+0x1ac>)
 800141a:	f001 fd80 	bl	8002f1e <HAL_ADC_GetValue>
 800141e:	4603      	mov	r3, r0
 8001420:	607b      	str	r3, [r7, #4]
	  //float voltage = 3.3f * valueAdc / 4096.0f;
	  int16_t prev_value;
	  int16_t value= __HAL_TIM_GET_COUNTER(&htim1);
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <main+0x17c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	817b      	strh	r3, [r7, #10]
	  if(value!=prev_value) {
 800142a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800142e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001432:	429a      	cmp	r2, r3
 8001434:	d016      	beq.n	8001464 <main+0x174>
	  sprintf(charAr, "%d, adc1: %lu, adc2: %lu \n\r", value, valueAdc[0], valueAdc[1]);
 8001436:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800143a:	6839      	ldr	r1, [r7, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	460b      	mov	r3, r1
 8001442:	4917      	ldr	r1, [pc, #92]	; (80014a0 <main+0x1b0>)
 8001444:	4817      	ldr	r0, [pc, #92]	; (80014a4 <main+0x1b4>)
 8001446:	f005 fe6d 	bl	8007124 <siprintf>
	  HAL_UART_Transmit(&huart6, (uint8_t *)charAr, strlen(charAr), HAL_MAX_DELAY);
 800144a:	4816      	ldr	r0, [pc, #88]	; (80014a4 <main+0x1b4>)
 800144c:	f7fe ff18 	bl	8000280 <strlen>
 8001450:	4603      	mov	r3, r0
 8001452:	b29a      	uxth	r2, r3
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
 8001458:	4912      	ldr	r1, [pc, #72]	; (80014a4 <main+0x1b4>)
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <main+0x184>)
 800145c:	f004 fdc5 	bl	8005fea <HAL_UART_Transmit>
	  prev_value=value;
 8001460:	897b      	ldrh	r3, [r7, #10]
 8001462:	81fb      	strh	r3, [r7, #14]
	  }
	displayMenu();
 8001464:	f000 fd36 	bl	8001ed4 <displayMenu>
  {
 8001468:	e785      	b.n	8001376 <main+0x86>
 800146a:	bf00      	nop
 800146c:	200008b0 	.word	0x200008b0
 8001470:	20000940 	.word	0x20000940
 8001474:	200009d0 	.word	0x200009d0
 8001478:	200008f8 	.word	0x200008f8
 800147c:	20000a15 	.word	0x20000a15
 8001480:	080093f8 	.word	0x080093f8
 8001484:	20000a16 	.word	0x20000a16
 8001488:	0800940c 	.word	0x0800940c
 800148c:	20000a17 	.word	0x20000a17
 8001490:	08009420 	.word	0x08009420
 8001494:	20000a18 	.word	0x20000a18
 8001498:	08009434 	.word	0x08009434
 800149c:	20000768 	.word	0x20000768
 80014a0:	08009448 	.word	0x08009448
 80014a4:	20000a1c 	.word	0x20000a1c

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b094      	sub	sp, #80	; 0x50
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	2230      	movs	r2, #48	; 0x30
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f005 feb1 	bl	800721e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <SystemClock_Config+0xc8>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <SystemClock_Config+0xc8>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <SystemClock_Config+0xc8>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <SystemClock_Config+0xcc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a20      	ldr	r2, [pc, #128]	; (8001574 <SystemClock_Config+0xcc>)
 80014f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <SystemClock_Config+0xcc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001504:	2302      	movs	r3, #2
 8001506:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001508:	2301      	movs	r3, #1
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800150c:	2310      	movs	r3, #16
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001510:	2302      	movs	r3, #2
 8001512:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001514:	2300      	movs	r3, #0
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001518:	2308      	movs	r3, #8
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800151c:	2350      	movs	r3, #80	; 0x50
 800151e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001520:	2302      	movs	r3, #2
 8001522:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001524:	2304      	movs	r3, #4
 8001526:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	4618      	mov	r0, r3
 800152e:	f002 fe6d 	bl	800420c <HAL_RCC_OscConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001538:	f000 fb2e 	bl	8001b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153c:	230f      	movs	r3, #15
 800153e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001540:	2302      	movs	r3, #2
 8001542:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	2102      	movs	r1, #2
 8001558:	4618      	mov	r0, r3
 800155a:	f003 f8cf 	bl	80046fc <HAL_RCC_ClockConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001564:	f000 fb18 	bl	8001b98 <Error_Handler>
  }
}
 8001568:	bf00      	nop
 800156a:	3750      	adds	r7, #80	; 0x50
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000

08001578 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800157e:	463b      	mov	r3, r7
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <MX_ADC1_Init+0xb4>)
 800158c:	4a28      	ldr	r2, [pc, #160]	; (8001630 <MX_ADC1_Init+0xb8>)
 800158e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001590:	4b26      	ldr	r3, [pc, #152]	; (800162c <MX_ADC1_Init+0xb4>)
 8001592:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001596:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <MX_ADC1_Init+0xb4>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <MX_ADC1_Init+0xb4>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015a4:	4b21      	ldr	r3, [pc, #132]	; (800162c <MX_ADC1_Init+0xb4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <MX_ADC1_Init+0xb4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <MX_ADC1_Init+0xb4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <MX_ADC1_Init+0xb4>)
 80015ba:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <MX_ADC1_Init+0xbc>)
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_ADC1_Init+0xb4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <MX_ADC1_Init+0xb4>)
 80015c6:	2202      	movs	r2, #2
 80015c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_ADC1_Init+0xb4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_ADC1_Init+0xb4>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015d8:	4814      	ldr	r0, [pc, #80]	; (800162c <MX_ADC1_Init+0xb4>)
 80015da:	f001 fb1d 	bl	8002c18 <HAL_ADC_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015e4:	f000 fad8 	bl	8001b98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80015f0:	2303      	movs	r3, #3
 80015f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f4:	463b      	mov	r3, r7
 80015f6:	4619      	mov	r1, r3
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <MX_ADC1_Init+0xb4>)
 80015fa:	f001 fc9d 	bl	8002f38 <HAL_ADC_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001604:	f000 fac8 	bl	8001b98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001608:	2301      	movs	r3, #1
 800160a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800160c:	2302      	movs	r3, #2
 800160e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_ADC1_Init+0xb4>)
 8001616:	f001 fc8f 	bl	8002f38 <HAL_ADC_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001620:	f000 faba 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000768 	.word	0x20000768
 8001630:	40012000 	.word	0x40012000
 8001634:	0f000001 	.word	0x0f000001

08001638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <MX_I2C1_Init+0x50>)
 800163e:	4a13      	ldr	r2, [pc, #76]	; (800168c <MX_I2C1_Init+0x54>)
 8001640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_I2C1_Init+0x50>)
 8001644:	4a12      	ldr	r2, [pc, #72]	; (8001690 <MX_I2C1_Init+0x58>)
 8001646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_I2C1_Init+0x50>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_I2C1_Init+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_I2C1_Init+0x50>)
 8001656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800165a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <MX_I2C1_Init+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_I2C1_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <MX_I2C1_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_I2C1_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <MX_I2C1_Init+0x50>)
 8001676:	f002 f96d 	bl	8003954 <HAL_I2C_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001680:	f000 fa8a 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200007b0 	.word	0x200007b0
 800168c:	40005400 	.word	0x40005400
 8001690:	000186a0 	.word	0x000186a0

08001694 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <MX_I2C2_Init+0x50>)
 800169a:	4a13      	ldr	r2, [pc, #76]	; (80016e8 <MX_I2C2_Init+0x54>)
 800169c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_I2C2_Init+0x50>)
 80016a0:	4a12      	ldr	r2, [pc, #72]	; (80016ec <MX_I2C2_Init+0x58>)
 80016a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_I2C2_Init+0x50>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_I2C2_Init+0x50>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_I2C2_Init+0x50>)
 80016b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <MX_I2C2_Init+0x50>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_I2C2_Init+0x50>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <MX_I2C2_Init+0x50>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_I2C2_Init+0x50>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <MX_I2C2_Init+0x50>)
 80016d2:	f002 f93f 	bl	8003954 <HAL_I2C_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016dc:	f000 fa5c 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000804 	.word	0x20000804
 80016e8:	40005800 	.word	0x40005800
 80016ec:	000186a0 	.word	0x000186a0

080016f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <MX_SPI1_Init+0x64>)
 80016f6:	4a18      	ldr	r2, [pc, #96]	; (8001758 <MX_SPI1_Init+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <MX_SPI1_Init+0x64>)
 80016fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001700:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_SPI1_Init+0x64>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <MX_SPI1_Init+0x64>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_SPI1_Init+0x64>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_SPI1_Init+0x64>)
 8001716:	2200      	movs	r2, #0
 8001718:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_SPI1_Init+0x64>)
 800171c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001720:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_SPI1_Init+0x64>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <MX_SPI1_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_SPI1_Init+0x64>)
 8001730:	2200      	movs	r2, #0
 8001732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <MX_SPI1_Init+0x64>)
 8001736:	2200      	movs	r2, #0
 8001738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_SPI1_Init+0x64>)
 800173c:	220a      	movs	r2, #10
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <MX_SPI1_Init+0x64>)
 8001742:	f003 f9bb 	bl	8004abc <HAL_SPI_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800174c:	f000 fa24 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000858 	.word	0x20000858
 8001758:	40013000 	.word	0x40013000

0800175c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	2224      	movs	r2, #36	; 0x24
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f005 fd57 	bl	800721e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <MX_TIM1_Init+0xa4>)
 800177a:	4a22      	ldr	r2, [pc, #136]	; (8001804 <MX_TIM1_Init+0xa8>)
 800177c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <MX_TIM1_Init+0xa4>)
 8001780:	2201      	movs	r2, #1
 8001782:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <MX_TIM1_Init+0xa4>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40;
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <MX_TIM1_Init+0xa4>)
 800178c:	2228      	movs	r2, #40	; 0x28
 800178e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <MX_TIM1_Init+0xa4>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_TIM1_Init+0xa4>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <MX_TIM1_Init+0xa4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017aa:	2301      	movs	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80017b2:	230f      	movs	r3, #15
 80017b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017ba:	2301      	movs	r3, #1
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80017c2:	230f      	movs	r3, #15
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	4619      	mov	r1, r3
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <MX_TIM1_Init+0xa4>)
 80017ce:	f003 fc8f 	bl	80050f0 <HAL_TIM_Encoder_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80017d8:	f000 f9de 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_TIM1_Init+0xa4>)
 80017ea:	f004 fb2f 	bl	8005e4c <HAL_TIMEx_MasterConfigSynchronization>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80017f4:	f000 f9d0 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	3730      	adds	r7, #48	; 0x30
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200008b0 	.word	0x200008b0
 8001804:	40010000 	.word	0x40010000

08001808 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08e      	sub	sp, #56	; 0x38
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181c:	f107 0320 	add.w	r3, r7, #32
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
 8001834:	615a      	str	r2, [r3, #20]
 8001836:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001838:	4b41      	ldr	r3, [pc, #260]	; (8001940 <MX_TIM2_Init+0x138>)
 800183a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800183e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12000;
 8001840:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <MX_TIM2_Init+0x138>)
 8001842:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001846:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <MX_TIM2_Init+0x138>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800184e:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <MX_TIM2_Init+0x138>)
 8001850:	f04f 32ff 	mov.w	r2, #4294967295
 8001854:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	4b3a      	ldr	r3, [pc, #232]	; (8001940 <MX_TIM2_Init+0x138>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185c:	4b38      	ldr	r3, [pc, #224]	; (8001940 <MX_TIM2_Init+0x138>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001862:	4837      	ldr	r0, [pc, #220]	; (8001940 <MX_TIM2_Init+0x138>)
 8001864:	f003 f9b3 	bl	8004bce <HAL_TIM_Base_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800186e:	f000 f993 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001878:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800187c:	4619      	mov	r1, r3
 800187e:	4830      	ldr	r0, [pc, #192]	; (8001940 <MX_TIM2_Init+0x138>)
 8001880:	f003 feee 	bl	8005660 <HAL_TIM_ConfigClockSource>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800188a:	f000 f985 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800188e:	482c      	ldr	r0, [pc, #176]	; (8001940 <MX_TIM2_Init+0x138>)
 8001890:	f003 fad7 	bl	8004e42 <HAL_TIM_OC_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800189a:	f000 f97d 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	4619      	mov	r1, r3
 80018ac:	4824      	ldr	r0, [pc, #144]	; (8001940 <MX_TIM2_Init+0x138>)
 80018ae:	f004 facd 	bl	8005e4c <HAL_TIMEx_MasterConfigSynchronization>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80018b8:	f000 f96e 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80018bc:	2330      	movs	r3, #48	; 0x30
 80018be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6659;
 80018c0:	f641 2303 	movw	r3, #6659	; 0x1a03
 80018c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	4619      	mov	r1, r3
 80018d4:	481a      	ldr	r0, [pc, #104]	; (8001940 <MX_TIM2_Init+0x138>)
 80018d6:	f003 fe67 	bl	80055a8 <HAL_TIM_OC_ConfigChannel>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80018e0:	f000 f95a 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.Pulse = 13500;
 80018e4:	f243 43bc 	movw	r3, #13500	; 0x34bc
 80018e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2204      	movs	r2, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4813      	ldr	r0, [pc, #76]	; (8001940 <MX_TIM2_Init+0x138>)
 80018f2:	f003 fe59 	bl	80055a8 <HAL_TIM_OC_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80018fc:	f000 f94c 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.Pulse = 36000;
 8001900:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 8001904:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2208      	movs	r2, #8
 800190a:	4619      	mov	r1, r3
 800190c:	480c      	ldr	r0, [pc, #48]	; (8001940 <MX_TIM2_Init+0x138>)
 800190e:	f003 fe4b 	bl	80055a8 <HAL_TIM_OC_ConfigChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 8001918:	f000 f93e 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.Pulse = 67000;
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_TIM2_Init+0x13c>)
 800191e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	220c      	movs	r2, #12
 8001924:	4619      	mov	r1, r3
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <MX_TIM2_Init+0x138>)
 8001928:	f003 fe3e 	bl	80055a8 <HAL_TIM_OC_ConfigChannel>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8001932:	f000 f931 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	3738      	adds	r7, #56	; 0x38
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200008f8 	.word	0x200008f8
 8001944:	000105b8 	.word	0x000105b8

08001948 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_TIM10_Init+0x40>)
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <MX_TIM10_Init+0x44>)
 8001950:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <MX_TIM10_Init+0x40>)
 8001954:	224f      	movs	r2, #79	; 0x4f
 8001956:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_TIM10_Init+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <MX_TIM10_Init+0x40>)
 8001960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001964:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_TIM10_Init+0x40>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_TIM10_Init+0x40>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_TIM10_Init+0x40>)
 8001974:	f003 f92b 	bl	8004bce <HAL_TIM_Base_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800197e:	f000 f90b 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000940 	.word	0x20000940
 800198c:	40014400 	.word	0x40014400

08001990 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_TIM11_Init+0x40>)
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <MX_TIM11_Init+0x44>)
 8001998:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10;
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <MX_TIM11_Init+0x40>)
 800199c:	220a      	movs	r2, #10
 800199e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_TIM11_Init+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <MX_TIM11_Init+0x40>)
 80019a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ac:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_TIM11_Init+0x40>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_TIM11_Init+0x40>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_TIM11_Init+0x40>)
 80019bc:	f003 f907 	bl	8004bce <HAL_TIM_Base_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80019c6:	f000 f8e7 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000988 	.word	0x20000988
 80019d4:	40014800 	.word	0x40014800

080019d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_USART6_UART_Init+0x4c>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <MX_USART6_UART_Init+0x50>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <MX_USART6_UART_Init+0x4c>)
 80019e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_USART6_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_USART6_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <MX_USART6_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_USART6_UART_Init+0x4c>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <MX_USART6_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_USART6_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_USART6_UART_Init+0x4c>)
 8001a10:	f004 fa9e 	bl	8005f50 <HAL_UART_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001a1a:	f000 f8bd 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200009d0 	.word	0x200009d0
 8001a28:	40011400 	.word	0x40011400

08001a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	4b50      	ldr	r3, [pc, #320]	; (8001b88 <MX_GPIO_Init+0x15c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a4f      	ldr	r2, [pc, #316]	; (8001b88 <MX_GPIO_Init+0x15c>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b4d      	ldr	r3, [pc, #308]	; (8001b88 <MX_GPIO_Init+0x15c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <MX_GPIO_Init+0x15c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a48      	ldr	r2, [pc, #288]	; (8001b88 <MX_GPIO_Init+0x15c>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <MX_GPIO_Init+0x15c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <MX_GPIO_Init+0x15c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a41      	ldr	r2, [pc, #260]	; (8001b88 <MX_GPIO_Init+0x15c>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <MX_GPIO_Init+0x15c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_SD_Pin|LED5_Pin, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	f248 0110 	movw	r1, #32784	; 0x8010
 8001a9c:	483b      	ldr	r0, [pc, #236]	; (8001b8c <MX_GPIO_Init+0x160>)
 8001a9e:	f001 ff27 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	483a      	ldr	r0, [pc, #232]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001aa8:	f001 ff22 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|LED4_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	f243 0118 	movw	r1, #12312	; 0x3018
 8001ab2:	4837      	ldr	r0, [pc, #220]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001ab4:	f001 ff1c 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ALERT_ADS_Pin */
  GPIO_InitStruct.Pin = ALERT_ADS_Pin;
 8001ab8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001abe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ALERT_ADS_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	4619      	mov	r1, r3
 8001ace:	4831      	ldr	r0, [pc, #196]	; (8001b94 <MX_GPIO_Init+0x168>)
 8001ad0:	f001 fd72 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_SD_Pin LED5_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin|LED5_Pin;
 8001ad4:	f248 0310 	movw	r3, #32784	; 0x8010
 8001ad8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	4619      	mov	r1, r3
 8001aec:	4827      	ldr	r0, [pc, #156]	; (8001b8c <MX_GPIO_Init+0x160>)
 8001aee:	f001 fd63 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSO_DATA_Pin */
  GPIO_InitStruct.Pin = DSO_DATA_Pin;
 8001af2:	2302      	movs	r3, #2
 8001af4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001af6:	2311      	movs	r3, #17
 8001af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DSO_DATA_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4619      	mov	r1, r3
 8001b08:	4821      	ldr	r0, [pc, #132]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001b0a:	f001 fd55 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DET_SD_Pin */
  GPIO_InitStruct.Pin = DET_SD_Pin;
 8001b0e:	2304      	movs	r3, #4
 8001b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DET_SD_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	4619      	mov	r1, r3
 8001b20:	481b      	ldr	r0, [pc, #108]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001b22:	f001 fd49 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED4_Pin|LED3_Pin;
 8001b26:	f243 0318 	movw	r3, #12312	; 0x3018
 8001b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4814      	ldr	r0, [pc, #80]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001b40:	f001 fd3a 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BTN_Pin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480d      	ldr	r0, [pc, #52]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001b5c:	f001 fd2c 	bl	80035b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2100      	movs	r1, #0
 8001b64:	2017      	movs	r0, #23
 8001b66:	f001 fcf0 	bl	800354a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b6a:	2017      	movs	r0, #23
 8001b6c:	f001 fd09 	bl	8003582 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2028      	movs	r0, #40	; 0x28
 8001b76:	f001 fce8 	bl	800354a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b7a:	2028      	movs	r0, #40	; 0x28
 8001b7c:	f001 fd01 	bl	8003582 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40020400 	.word	0x40020400
 8001b94:	40020800 	.word	0x40020800

08001b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9c:	b672      	cpsid	i
}
 8001b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <Error_Handler+0x8>
	...

08001ba4 <huart_ds_init>:
uint16_t encoderMax;
Screen screen = MAIN_MENU; //instancja enuma Screen, aktualny stan menu
int sensorAdcExt=0;
UART_HandleTypeDef *huart6_new;

void huart_ds_init(UART_HandleTypeDef *huart6) {
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	huart6_new=huart6;
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <huart_ds_init+0x1c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000a50 	.word	0x20000a50

08001bc4 <backButton>:

void backButton(uint8_t back_pos, uint8_t target_screen, uint16_t encoder_pos) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	71bb      	strb	r3, [r7, #6]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	80bb      	strh	r3, [r7, #4]
	ssd1306_SetCursor(0, 56);
 8001bd6:	2138      	movs	r1, #56	; 0x38
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f000 ff3d 	bl	8002a58 <ssd1306_SetCursor>
	ssd1306_WriteString("COFNIJ", Font_6x8, entrySelected(back_pos) ? Black : White);
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fa92 	bl	800110c <entrySelected>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f083 0301 	eor.w	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <backButton+0x5c>)
 8001bf2:	ca06      	ldmia	r2, {r1, r2}
 8001bf4:	480b      	ldr	r0, [pc, #44]	; (8001c24 <backButton+0x60>)
 8001bf6:	f000 ff09 	bl	8002a0c <ssd1306_WriteString>
	if(entryClicked(back_pos)) {
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fa97 	bl	8001132 <entryClicked>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <backButton+0x52>
		encSetPos(0);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff fa4e 	bl	80010ac <encSetPos>
		screen = target_screen;
 8001c10:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <backButton+0x64>)
 8001c12:	79bb      	ldrb	r3, [r7, #6]
 8001c14:	7013      	strb	r3, [r2, #0]
	}
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000055c 	.word	0x2000055c
 8001c24:	08009464 	.word	0x08009464
 8001c28:	20000a4e 	.word	0x20000a4e

08001c2c <listAllItemsFromMenu>:

void listAllItemsFromMenu(Menu *menu) {
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < menu->entry_count; ++i) { //-> bo entry_count na stercie cpu jest (heap)
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	e02e      	b.n	8001c98 <listAllItemsFromMenu+0x6c>
			ssd1306_SetCursor(0, i*8);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	4619      	mov	r1, r3
 8001c44:	2000      	movs	r0, #0
 8001c46:	f000 ff07 	bl	8002a58 <ssd1306_SetCursor>
			if(entryClicked(i)) {
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fa6f 	bl	8001132 <entryClicked>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d007      	beq.n	8001c6a <listAllItemsFromMenu+0x3e>
				screen = menu->entries[i].entry;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	3201      	adds	r2, #1
 8001c60:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <listAllItemsFromMenu+0x80>)
 8001c66:	701a      	strb	r2, [r3, #0]
				break;
 8001c68:	e01c      	b.n	8001ca4 <listAllItemsFromMenu+0x78>
			}
			ssd1306_WriteString(menu->entries[i].entry_string, Font_6x8, entrySelected(i) ? Black : White);
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4413      	add	r3, r2
 8001c74:	685c      	ldr	r4, [r3, #4]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fa46 	bl	800110c <entrySelected>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f083 0301 	eor.w	r3, r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <listAllItemsFromMenu+0x84>)
 8001c8a:	ca06      	ldmia	r2, {r1, r2}
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f000 febd 	bl	8002a0c <ssd1306_WriteString>
	for (int i = 0; i < menu->entry_count; ++i) { //-> bo entry_count na stercie cpu jest (heap)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3301      	adds	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbcb      	blt.n	8001c3a <listAllItemsFromMenu+0xe>
		  }
}
 8001ca2:	bf00      	nop
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd90      	pop	{r4, r7, pc}
 8001cac:	20000a4e 	.word	0x20000a4e
 8001cb0:	2000055c 	.word	0x2000055c

08001cb4 <drawMainMenu>:

void drawMainMenu(Menu *menu) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	encSetRange(0, 39);
 8001cbc:	2127      	movs	r1, #39	; 0x27
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f7ff f9da 	bl	8001078 <encSetRange>
	listAllItemsFromMenu(menu);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ffb1 	bl	8001c2c <listAllItemsFromMenu>
	uint32_t encVal = encoderGet();
 8001cca:	f7ff fa01 	bl	80010d0 <encoderGet>
 8001cce:	60f8      	str	r0, [r7, #12]
	char charArVal[4];
	sprintf(charArVal, "%lu", encVal);
 8001cd0:	f107 0308 	add.w	r3, r7, #8
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4909      	ldr	r1, [pc, #36]	; (8001cfc <drawMainMenu+0x48>)
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f005 fa23 	bl	8007124 <siprintf>
	ssd1306_SetCursor(0, 30);
 8001cde:	211e      	movs	r1, #30
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f000 feb9 	bl	8002a58 <ssd1306_SetCursor>
	ssd1306_WriteString(charArVal, Font_16x24, White);
 8001ce6:	4a06      	ldr	r2, [pc, #24]	; (8001d00 <drawMainMenu+0x4c>)
 8001ce8:	f107 0008 	add.w	r0, r7, #8
 8001cec:	2301      	movs	r3, #1
 8001cee:	ca06      	ldmia	r2, {r1, r2}
 8001cf0:	f000 fe8c 	bl	8002a0c <ssd1306_WriteString>

}
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	0800946c 	.word	0x0800946c
 8001d00:	2000056c 	.word	0x2000056c

08001d04 <drawSensorConfig>:

void drawSensorConfig(Menu *menu) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	encSetRange(0, 3);
 8001d0c:	2103      	movs	r1, #3
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7ff f9b2 	bl	8001078 <encSetRange>
	listAllItemsFromMenu(menu);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff89 	bl	8001c2c <listAllItemsFromMenu>
	backButton(3, MAIN_MENU, 1);
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2003      	movs	r0, #3
 8001d20:	f7ff ff50 	bl	8001bc4 <backButton>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <drawSdConfig>:

void drawSdConfig(Menu *menu) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	encSetRange(0, 1);
 8001d34:	2101      	movs	r1, #1
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff f99e 	bl	8001078 <encSetRange>

	listAllItemsFromMenu(menu);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff75 	bl	8001c2c <listAllItemsFromMenu>
	backButton(0, MAIN_MENU, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7ff ff3c 	bl	8001bc4 <backButton>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <drawOnoffMeasure>:

void drawOnoffMeasure(Menu *menu) {
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b091      	sub	sp, #68	; 0x44
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	//listAllItemsFromMenu(menu);
	encSetRange(0, 1);
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7ff f98a 	bl	8001078 <encSetRange>
	wire_reset();
 8001d64:	f7ff f8d0 	bl	8000f08 <wire_reset>
	wire_write(0xcc);
 8001d68:	20cc      	movs	r0, #204	; 0xcc
 8001d6a:	f7ff f949 	bl	8001000 <wire_write>
	wire_write(0x44);
 8001d6e:	2044      	movs	r0, #68	; 0x44
 8001d70:	f7ff f946 	bl	8001000 <wire_write>
	HAL_Delay(95);
 8001d74:	205f      	movs	r0, #95	; 0x5f
 8001d76:	f000 ff2b 	bl	8002bd0 <HAL_Delay>
	wire_reset();
 8001d7a:	f7ff f8c5 	bl	8000f08 <wire_reset>
	wire_write(0xcc);
 8001d7e:	20cc      	movs	r0, #204	; 0xcc
 8001d80:	f7ff f93e 	bl	8001000 <wire_write>
	wire_write(0xbe);
 8001d84:	20be      	movs	r0, #190	; 0xbe
 8001d86:	f7ff f93b 	bl	8001000 <wire_write>
	int i;
	uint8_t rom_code[9];
	for (i = 0; i < 9; i++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d8e:	e00c      	b.n	8001daa <drawOnoffMeasure+0x56>
	  rom_code[i] = wire_read();
 8001d90:	f7ff f952 	bl	8001038 <wire_read>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4619      	mov	r1, r3
 8001d98:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d9e:	4413      	add	r3, r2
 8001da0:	460a      	mov	r2, r1
 8001da2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 9; i++)
 8001da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da6:	3301      	adds	r3, #1
 8001da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	ddef      	ble.n	8001d90 <drawOnoffMeasure+0x3c>
	char znak[20];
	float temp= ((rom_code[1]<<8) | (rom_code[0]));
 8001db0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	ee07 3a90 	vmov	s15, r3
 8001dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	char tempStr[10];
	//memcpy(&temp, &rom_code[0], sizeof(temp));
	temp = temp/16.0f;
 8001dc8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001dcc:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001dd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	ssd1306_SetCursor(0, 0);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f000 fe3c 	bl	8002a58 <ssd1306_SetCursor>
	ssd1306_WriteString("ds18b20_1 value:", Font_7x10, White);
 8001de0:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <drawOnoffMeasure+0xf4>)
 8001de2:	2301      	movs	r3, #1
 8001de4:	ca06      	ldmia	r2, {r1, r2}
 8001de6:	4819      	ldr	r0, [pc, #100]	; (8001e4c <drawOnoffMeasure+0xf8>)
 8001de8:	f000 fe10 	bl	8002a0c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 12);
 8001dec:	210c      	movs	r1, #12
 8001dee:	2000      	movs	r0, #0
 8001df0:	f000 fe32 	bl	8002a58 <ssd1306_SetCursor>
	sprintf(tempStr, "%f\n\r", temp);
 8001df4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001df6:	f7fe fbaf 	bl	8000558 <__aeabi_f2d>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	f107 000c 	add.w	r0, r7, #12
 8001e02:	4913      	ldr	r1, [pc, #76]	; (8001e50 <drawOnoffMeasure+0xfc>)
 8001e04:	f005 f98e 	bl	8007124 <siprintf>
	ssd1306_WriteString(tempStr, Font_16x24, White);
 8001e08:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <drawOnoffMeasure+0x100>)
 8001e0a:	f107 000c 	add.w	r0, r7, #12
 8001e0e:	2301      	movs	r3, #1
 8001e10:	ca06      	ldmia	r2, {r1, r2}
 8001e12:	f000 fdfb 	bl	8002a0c <ssd1306_WriteString>
	HAL_UART_Transmit(huart6_new, tempStr, strlen(tempStr), HAL_MAX_DELAY);
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <drawOnoffMeasure+0x104>)
 8001e18:	681c      	ldr	r4, [r3, #0]
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fa2e 	bl	8000280 <strlen>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	f107 010c 	add.w	r1, r7, #12
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e30:	4620      	mov	r0, r4
 8001e32:	f004 f8da 	bl	8005fea <HAL_UART_Transmit>
	backButton(1, MAIN_MENU, 1);
 8001e36:	2201      	movs	r2, #1
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f7ff fec2 	bl	8001bc4 <backButton>
}
 8001e40:	bf00      	nop
 8001e42:	3744      	adds	r7, #68	; 0x44
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd90      	pop	{r4, r7, pc}
 8001e48:	20000564 	.word	0x20000564
 8001e4c:	08009470 	.word	0x08009470
 8001e50:	08009484 	.word	0x08009484
 8001e54:	2000056c 	.word	0x2000056c
 8001e58:	20000a50 	.word	0x20000a50

08001e5c <drawSensorConfigAdcExt>:


void drawSensorConfigAdcExt(Menu *menu) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	listAllItemsFromMenu(menu);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff fee1 	bl	8001c2c <listAllItemsFromMenu>
	//ustawienie wartosci enuma globalnego na nastepne menu czyli np SENSOR_CONFIG_ADC_EXT1 lub EXT2 itp.
//	if(enkoder==wcisniety) {
//		sensorAdcExt=wartosc z enkodera
//		screen = SENSOR_CONFIG_ADC_EXT1;
//	}
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <drawSensorConfigAdcInt>:
void drawSensorConfigAdcInt(Menu *menu) {
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
	listAllItemsFromMenu(menu);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fed6 	bl	8001c2c <listAllItemsFromMenu>
	backButton(1, MAIN_MENU, 1);
 8001e80:	2201      	movs	r2, #1
 8001e82:	2100      	movs	r1, #0
 8001e84:	2001      	movs	r0, #1
 8001e86:	f7ff fe9d 	bl	8001bc4 <backButton>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <drawSensorConfigDS18>:
void drawSensorConfigDS18(Menu *menu) {
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
	listAllItemsFromMenu(menu);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fec6 	bl	8001c2c <listAllItemsFromMenu>
	backButton(1, MAIN_MENU, 1);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f7ff fe8d 	bl	8001bc4 <backButton>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <drawSensorConfigGeneric>:

void drawSensorConfigGeneric(Menu *menu) {
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
	//tu wartosc z inta tego globalnego (wartosc z enkodera)
	//na jego podstawie wyprintowac tekst i ustawic jaki czujnik
	//displayWrite("Edit sensor: ");
	listAllItemsFromMenu(menu);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff feb6 	bl	8001c2c <listAllItemsFromMenu>
	backButton(1, MAIN_MENU, 1);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff fe7d 	bl	8001bc4 <backButton>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <displayMenu>:
	[SENSOR_CONFIG_DS18_3] = {drawSensorConfigGeneric,0,{}},
	[SD_CONFIG] = {drawSdConfig, 0, {}},
	[ONOFF_MEASURE] = {drawOnoffMeasure, 0, {}}
};

void displayMenu(void) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f000 fc6f 	bl	80027bc <ssd1306_Fill>

	menu[screen].function(&menu[screen]);
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <displayMenu+0x44>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <displayMenu+0x48>)
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <displayMenu+0x44>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	460b      	mov	r3, r1
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	440b      	add	r3, r1
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4906      	ldr	r1, [pc, #24]	; (8001f1c <displayMenu+0x48>)
 8001f02:	440b      	add	r3, r1
 8001f04:	4618      	mov	r0, r3
 8001f06:	4790      	blx	r2
	ssd1306_UpdateScreen();
 8001f08:	f000 fc7c 	bl	8002804 <ssd1306_UpdateScreen>
	//clearEncButton();
	HAL_Delay(1);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f000 fe5f 	bl	8002bd0 <HAL_Delay>

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000a4e 	.word	0x20000a4e
 8001f1c:	20000000 	.word	0x20000000

08001f20 <displayInit>:
#include "ssd1306_tests.h"
#include "ssd1306.h"



void displayInit(void) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8001f24:	f000 fbe0 	bl	80026e8 <ssd1306_Init>
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <HAL_ADC_MspInit+0x7c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d127      	bne.n	8001fee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_ADC_MspInit+0x80>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a15      	ldr	r2, [pc, #84]	; (8001ffc <HAL_ADC_MspInit+0x80>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_ADC_MspInit+0x80>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <HAL_ADC_MspInit+0x80>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <HAL_ADC_MspInit+0x80>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <HAL_ADC_MspInit+0x80>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN0_INT_Pin|ADC1_IN1_INT_Pin|ADC1_IN2_INT_Pin|ADC1_IN3_INT_Pin;
 8001fd6:	230f      	movs	r3, #15
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	; (8002000 <HAL_ADC_MspInit+0x84>)
 8001fea:	f001 fae5 	bl	80035b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fee:	bf00      	nop
 8001ff0:	3728      	adds	r7, #40	; 0x28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40012000 	.word	0x40012000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020000 	.word	0x40020000

08002004 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08c      	sub	sp, #48	; 0x30
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 031c 	add.w	r3, r7, #28
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a3b      	ldr	r2, [pc, #236]	; (8002110 <HAL_I2C_MspInit+0x10c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d12c      	bne.n	8002080 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	4b3a      	ldr	r3, [pc, #232]	; (8002114 <HAL_I2C_MspInit+0x110>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a39      	ldr	r2, [pc, #228]	; (8002114 <HAL_I2C_MspInit+0x110>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b37      	ldr	r3, [pc, #220]	; (8002114 <HAL_I2C_MspInit+0x110>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
 8002042:	23c0      	movs	r3, #192	; 0xc0
 8002044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002046:	2312      	movs	r3, #18
 8002048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204e:	2303      	movs	r3, #3
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002052:	2304      	movs	r3, #4
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002056:	f107 031c 	add.w	r3, r7, #28
 800205a:	4619      	mov	r1, r3
 800205c:	482e      	ldr	r0, [pc, #184]	; (8002118 <HAL_I2C_MspInit+0x114>)
 800205e:	f001 faab 	bl	80035b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_I2C_MspInit+0x110>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a2a      	ldr	r2, [pc, #168]	; (8002114 <HAL_I2C_MspInit+0x110>)
 800206c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b28      	ldr	r3, [pc, #160]	; (8002114 <HAL_I2C_MspInit+0x110>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800207e:	e042      	b.n	8002106 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a25      	ldr	r2, [pc, #148]	; (800211c <HAL_I2C_MspInit+0x118>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d13d      	bne.n	8002106 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_I2C_MspInit+0x110>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a20      	ldr	r2, [pc, #128]	; (8002114 <HAL_I2C_MspInit+0x110>)
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <HAL_I2C_MspInit+0x110>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SCL_ADS_Pin;
 80020a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ac:	2312      	movs	r3, #18
 80020ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020b8:	2304      	movs	r3, #4
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCL_ADS_GPIO_Port, &GPIO_InitStruct);
 80020bc:	f107 031c 	add.w	r3, r7, #28
 80020c0:	4619      	mov	r1, r3
 80020c2:	4815      	ldr	r0, [pc, #84]	; (8002118 <HAL_I2C_MspInit+0x114>)
 80020c4:	f001 fa78 	bl	80035b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDA_ADS_Pin;
 80020c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ce:	2312      	movs	r3, #18
 80020d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80020da:	2309      	movs	r3, #9
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDA_ADS_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <HAL_I2C_MspInit+0x114>)
 80020e6:	f001 fa67 	bl	80035b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_I2C_MspInit+0x110>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a08      	ldr	r2, [pc, #32]	; (8002114 <HAL_I2C_MspInit+0x110>)
 80020f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_I2C_MspInit+0x110>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
}
 8002106:	bf00      	nop
 8002108:	3730      	adds	r7, #48	; 0x30
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40005400 	.word	0x40005400
 8002114:	40023800 	.word	0x40023800
 8002118:	40020400 	.word	0x40020400
 800211c:	40005800 	.word	0x40005800

08002120 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <HAL_SPI_MspInit+0x84>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d12b      	bne.n	800219a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_SPI_MspInit+0x88>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	4a17      	ldr	r2, [pc, #92]	; (80021a8 <HAL_SPI_MspInit+0x88>)
 800214c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002150:	6453      	str	r3, [r2, #68]	; 0x44
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <HAL_SPI_MspInit+0x88>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_SPI_MspInit+0x88>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <HAL_SPI_MspInit+0x88>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_SPI_MspInit+0x88>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_SD_Pin|MISO_SD_Pin|MOSI_SD_Pin;
 800217a:	23e0      	movs	r3, #224	; 0xe0
 800217c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800218a:	2305      	movs	r3, #5
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	4619      	mov	r1, r3
 8002194:	4805      	ldr	r0, [pc, #20]	; (80021ac <HAL_SPI_MspInit+0x8c>)
 8002196:	f001 fa0f 	bl	80035b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	; 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40013000 	.word	0x40013000
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020000 	.word	0x40020000

080021b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a21      	ldr	r2, [pc, #132]	; (8002254 <HAL_TIM_Encoder_MspInit+0xa4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d13c      	bne.n	800224c <HAL_TIM_Encoder_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_TIM_Encoder_MspInit+0xa8>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4a1f      	ldr	r2, [pc, #124]	; (8002258 <HAL_TIM_Encoder_MspInit+0xa8>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HAL_TIM_Encoder_MspInit+0xa8>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_TIM_Encoder_MspInit+0xa8>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a18      	ldr	r2, [pc, #96]	; (8002258 <HAL_TIM_Encoder_MspInit+0xa8>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <HAL_TIM_Encoder_MspInit+0xa8>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 800220a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800220e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800221c:	2301      	movs	r3, #1
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	480d      	ldr	r0, [pc, #52]	; (800225c <HAL_TIM_Encoder_MspInit+0xac>)
 8002228:	f001 f9c6 	bl	80035b8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	2019      	movs	r0, #25
 8002232:	f001 f98a 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002236:	2019      	movs	r0, #25
 8002238:	f001 f9a3 	bl	8003582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	201a      	movs	r0, #26
 8002242:	f001 f982 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002246:	201a      	movs	r0, #26
 8002248:	f001 f99b 	bl	8003582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800224c:	bf00      	nop
 800224e:	3728      	adds	r7, #40	; 0x28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40010000 	.word	0x40010000
 8002258:	40023800 	.word	0x40023800
 800225c:	40020000 	.word	0x40020000

08002260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002270:	d116      	bne.n	80022a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	4b28      	ldr	r3, [pc, #160]	; (8002318 <HAL_TIM_Base_MspInit+0xb8>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a27      	ldr	r2, [pc, #156]	; (8002318 <HAL_TIM_Base_MspInit+0xb8>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b25      	ldr	r3, [pc, #148]	; (8002318 <HAL_TIM_Base_MspInit+0xb8>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	201c      	movs	r0, #28
 8002294:	f001 f959 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002298:	201c      	movs	r0, #28
 800229a:	f001 f972 	bl	8003582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800229e:	e036      	b.n	800230e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1d      	ldr	r2, [pc, #116]	; (800231c <HAL_TIM_Base_MspInit+0xbc>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d116      	bne.n	80022d8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_TIM_Base_MspInit+0xb8>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	4a19      	ldr	r2, [pc, #100]	; (8002318 <HAL_TIM_Base_MspInit+0xb8>)
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <HAL_TIM_Base_MspInit+0xb8>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	2019      	movs	r0, #25
 80022cc:	f001 f93d 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022d0:	2019      	movs	r0, #25
 80022d2:	f001 f956 	bl	8003582 <HAL_NVIC_EnableIRQ>
}
 80022d6:	e01a      	b.n	800230e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a10      	ldr	r2, [pc, #64]	; (8002320 <HAL_TIM_Base_MspInit+0xc0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d115      	bne.n	800230e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_TIM_Base_MspInit+0xb8>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <HAL_TIM_Base_MspInit+0xb8>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f0:	6453      	str	r3, [r2, #68]	; 0x44
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_TIM_Base_MspInit+0xb8>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	201a      	movs	r0, #26
 8002304:	f001 f921 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002308:	201a      	movs	r0, #26
 800230a:	f001 f93a 	bl	8003582 <HAL_NVIC_EnableIRQ>
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800
 800231c:	40014400 	.word	0x40014400
 8002320:	40014800 	.word	0x40014800

08002324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <HAL_UART_MspInit+0x84>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d12c      	bne.n	80023a0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	4b18      	ldr	r3, [pc, #96]	; (80023ac <HAL_UART_MspInit+0x88>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	4a17      	ldr	r2, [pc, #92]	; (80023ac <HAL_UART_MspInit+0x88>)
 8002350:	f043 0320 	orr.w	r3, r3, #32
 8002354:	6453      	str	r3, [r2, #68]	; 0x44
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <HAL_UART_MspInit+0x88>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_UART_MspInit+0x88>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a10      	ldr	r2, [pc, #64]	; (80023ac <HAL_UART_MspInit+0x88>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_UART_MspInit+0x88>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800237e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002390:	2308      	movs	r3, #8
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4619      	mov	r1, r3
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <HAL_UART_MspInit+0x8c>)
 800239c:	f001 f90c 	bl	80035b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80023a0:	bf00      	nop
 80023a2:	3728      	adds	r7, #40	; 0x28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40011400 	.word	0x40011400
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40020000 	.word	0x40020000

080023b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <NMI_Handler+0x4>

080023ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023be:	e7fe      	b.n	80023be <HardFault_Handler+0x4>

080023c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <MemManage_Handler+0x4>

080023c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ca:	e7fe      	b.n	80023ca <BusFault_Handler+0x4>

080023cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <UsageFault_Handler+0x4>

080023d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002400:	f000 fbc6 	bl	8002b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	bd80      	pop	{r7, pc}

08002408 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 800240c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002410:	f001 fa88 	bl	8003924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800241c:	4803      	ldr	r0, [pc, #12]	; (800242c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800241e:	f002 ffbb 	bl	8005398 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002422:	4803      	ldr	r0, [pc, #12]	; (8002430 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002424:	f002 ffb8 	bl	8005398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200008b0 	.word	0x200008b0
 8002430:	20000940 	.word	0x20000940

08002434 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002438:	4803      	ldr	r0, [pc, #12]	; (8002448 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800243a:	f002 ffad 	bl	8005398 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800243e:	4803      	ldr	r0, [pc, #12]	; (800244c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002440:	f002 ffaa 	bl	8005398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200008b0 	.word	0x200008b0
 800244c:	20000988 	.word	0x20000988

08002450 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <TIM2_IRQHandler+0x10>)
 8002456:	f002 ff9f 	bl	8005398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200008f8 	.word	0x200008f8

08002464 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALERT_ADS_Pin);
 8002468:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800246c:	f001 fa5a 	bl	8003924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}

08002474 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return 1;
 8002478:	2301      	movs	r3, #1
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_kill>:

int _kill(int pid, int sig)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800248e:	f004 ff19 	bl	80072c4 <__errno>
 8002492:	4603      	mov	r3, r0
 8002494:	2216      	movs	r2, #22
 8002496:	601a      	str	r2, [r3, #0]
  return -1;
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <_exit>:

void _exit (int status)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ffe7 	bl	8002484 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024b6:	e7fe      	b.n	80024b6 <_exit+0x12>

080024b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e00a      	b.n	80024e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ca:	f3af 8000 	nop.w
 80024ce:	4601      	mov	r1, r0
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	60ba      	str	r2, [r7, #8]
 80024d6:	b2ca      	uxtb	r2, r1
 80024d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	dbf0      	blt.n	80024ca <_read+0x12>
  }

  return len;
 80024e8:	687b      	ldr	r3, [r7, #4]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e009      	b.n	8002518 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	60ba      	str	r2, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	dbf1      	blt.n	8002504 <_write+0x12>
  }
  return len;
 8002520:	687b      	ldr	r3, [r7, #4]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_close>:

int _close(int file)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002552:	605a      	str	r2, [r3, #4]
  return 0;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <_isatty>:

int _isatty(int file)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800259c:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <_sbrk+0x5c>)
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <_sbrk+0x60>)
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <_sbrk+0x64>)
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <_sbrk+0x68>)
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d207      	bcs.n	80025d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c4:	f004 fe7e 	bl	80072c4 <__errno>
 80025c8:	4603      	mov	r3, r0
 80025ca:	220c      	movs	r2, #12
 80025cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
 80025d2:	e009      	b.n	80025e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <_sbrk+0x64>)
 80025e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20020000 	.word	0x20020000
 80025f4:	00000400 	.word	0x00000400
 80025f8:	20000a54 	.word	0x20000a54
 80025fc:	20000fb0 	.word	0x20000fb0

08002600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <SystemInit+0x20>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	4a05      	ldr	r2, [pc, #20]	; (8002620 <SystemInit+0x20>)
 800260c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800265c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002628:	480d      	ldr	r0, [pc, #52]	; (8002660 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800262a:	490e      	ldr	r1, [pc, #56]	; (8002664 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800262c:	4a0e      	ldr	r2, [pc, #56]	; (8002668 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002630:	e002      	b.n	8002638 <LoopCopyDataInit>

08002632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002636:	3304      	adds	r3, #4

08002638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800263c:	d3f9      	bcc.n	8002632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800263e:	4a0b      	ldr	r2, [pc, #44]	; (800266c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002640:	4c0b      	ldr	r4, [pc, #44]	; (8002670 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002644:	e001      	b.n	800264a <LoopFillZerobss>

08002646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002648:	3204      	adds	r2, #4

0800264a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800264c:	d3fb      	bcc.n	8002646 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800264e:	f7ff ffd7 	bl	8002600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002652:	f004 fe3d 	bl	80072d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002656:	f7fe fe4b 	bl	80012f0 <main>
  bx  lr    
 800265a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800265c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002664:	20000744 	.word	0x20000744
  ldr r2, =_sidata
 8002668:	0800b804 	.word	0x0800b804
  ldr r2, =_sbss
 800266c:	20000744 	.word	0x20000744
  ldr r4, =_ebss
 8002670:	20000fb0 	.word	0x20000fb0

08002674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002674:	e7fe      	b.n	8002674 <ADC_IRQHandler>

08002676 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af04      	add	r7, sp, #16
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	9302      	str	r3, [sp, #8]
 8002694:	2301      	movs	r3, #1
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	1dfb      	adds	r3, r7, #7
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2301      	movs	r3, #1
 800269e:	2200      	movs	r2, #0
 80026a0:	2178      	movs	r1, #120	; 0x78
 80026a2:	4803      	ldr	r0, [pc, #12]	; (80026b0 <ssd1306_WriteCommand+0x2c>)
 80026a4:	f001 fa9a 	bl	8003bdc <HAL_I2C_Mem_Write>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	200007b0 	.word	0x200007b0

080026b4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af04      	add	r7, sp, #16
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	f04f 32ff 	mov.w	r2, #4294967295
 80026c6:	9202      	str	r2, [sp, #8]
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	2301      	movs	r3, #1
 80026d0:	2240      	movs	r2, #64	; 0x40
 80026d2:	2178      	movs	r1, #120	; 0x78
 80026d4:	4803      	ldr	r0, [pc, #12]	; (80026e4 <ssd1306_WriteData+0x30>)
 80026d6:	f001 fa81 	bl	8003bdc <HAL_I2C_Mem_Write>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	200007b0 	.word	0x200007b0

080026e8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80026ec:	f7ff ffc3 	bl	8002676 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80026f0:	2064      	movs	r0, #100	; 0x64
 80026f2:	f000 fa6d 	bl	8002bd0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80026f6:	2000      	movs	r0, #0
 80026f8:	f000 f9da 	bl	8002ab0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80026fc:	2020      	movs	r0, #32
 80026fe:	f7ff ffc1 	bl	8002684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002702:	2000      	movs	r0, #0
 8002704:	f7ff ffbe 	bl	8002684 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002708:	20b0      	movs	r0, #176	; 0xb0
 800270a:	f7ff ffbb 	bl	8002684 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800270e:	20c8      	movs	r0, #200	; 0xc8
 8002710:	f7ff ffb8 	bl	8002684 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002714:	2000      	movs	r0, #0
 8002716:	f7ff ffb5 	bl	8002684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800271a:	2010      	movs	r0, #16
 800271c:	f7ff ffb2 	bl	8002684 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002720:	2040      	movs	r0, #64	; 0x40
 8002722:	f7ff ffaf 	bl	8002684 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002726:	20ff      	movs	r0, #255	; 0xff
 8002728:	f000 f9ae 	bl	8002a88 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800272c:	20a1      	movs	r0, #161	; 0xa1
 800272e:	f7ff ffa9 	bl	8002684 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002732:	20a6      	movs	r0, #166	; 0xa6
 8002734:	f7ff ffa6 	bl	8002684 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002738:	20a8      	movs	r0, #168	; 0xa8
 800273a:	f7ff ffa3 	bl	8002684 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800273e:	203f      	movs	r0, #63	; 0x3f
 8002740:	f7ff ffa0 	bl	8002684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002744:	20a4      	movs	r0, #164	; 0xa4
 8002746:	f7ff ff9d 	bl	8002684 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800274a:	20d3      	movs	r0, #211	; 0xd3
 800274c:	f7ff ff9a 	bl	8002684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002750:	2000      	movs	r0, #0
 8002752:	f7ff ff97 	bl	8002684 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002756:	20d5      	movs	r0, #213	; 0xd5
 8002758:	f7ff ff94 	bl	8002684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800275c:	20f0      	movs	r0, #240	; 0xf0
 800275e:	f7ff ff91 	bl	8002684 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002762:	20d9      	movs	r0, #217	; 0xd9
 8002764:	f7ff ff8e 	bl	8002684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002768:	2022      	movs	r0, #34	; 0x22
 800276a:	f7ff ff8b 	bl	8002684 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800276e:	20da      	movs	r0, #218	; 0xda
 8002770:	f7ff ff88 	bl	8002684 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002774:	2012      	movs	r0, #18
 8002776:	f7ff ff85 	bl	8002684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800277a:	20db      	movs	r0, #219	; 0xdb
 800277c:	f7ff ff82 	bl	8002684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002780:	2020      	movs	r0, #32
 8002782:	f7ff ff7f 	bl	8002684 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002786:	208d      	movs	r0, #141	; 0x8d
 8002788:	f7ff ff7c 	bl	8002684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800278c:	2014      	movs	r0, #20
 800278e:	f7ff ff79 	bl	8002684 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002792:	2001      	movs	r0, #1
 8002794:	f000 f98c 	bl	8002ab0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002798:	2000      	movs	r0, #0
 800279a:	f000 f80f 	bl	80027bc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800279e:	f000 f831 	bl	8002804 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <ssd1306_Init+0xd0>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <ssd1306_Init+0xd0>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80027ae:	4b02      	ldr	r3, [pc, #8]	; (80027b8 <ssd1306_Init+0xd0>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	711a      	strb	r2, [r3, #4]
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000e58 	.word	0x20000e58

080027bc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	e00d      	b.n	80027e8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <ssd1306_Fill+0x1a>
 80027d2:	2100      	movs	r1, #0
 80027d4:	e000      	b.n	80027d8 <ssd1306_Fill+0x1c>
 80027d6:	21ff      	movs	r1, #255	; 0xff
 80027d8:	4a09      	ldr	r2, [pc, #36]	; (8002800 <ssd1306_Fill+0x44>)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4413      	add	r3, r2
 80027de:	460a      	mov	r2, r1
 80027e0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3301      	adds	r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ee:	d3ed      	bcc.n	80027cc <ssd1306_Fill+0x10>
    }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000a58 	.word	0x20000a58

08002804 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800280a:	2300      	movs	r3, #0
 800280c:	71fb      	strb	r3, [r7, #7]
 800280e:	e016      	b.n	800283e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	3b50      	subs	r3, #80	; 0x50
 8002814:	b2db      	uxtb	r3, r3
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff ff34 	bl	8002684 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800281c:	2000      	movs	r0, #0
 800281e:	f7ff ff31 	bl	8002684 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002822:	2010      	movs	r0, #16
 8002824:	f7ff ff2e 	bl	8002684 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	01db      	lsls	r3, r3, #7
 800282c:	4a08      	ldr	r2, [pc, #32]	; (8002850 <ssd1306_UpdateScreen+0x4c>)
 800282e:	4413      	add	r3, r2
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff ff3e 	bl	80026b4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	3301      	adds	r3, #1
 800283c:	71fb      	strb	r3, [r7, #7]
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	2b07      	cmp	r3, #7
 8002842:	d9e5      	bls.n	8002810 <ssd1306_UpdateScreen+0xc>
    }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000a58 	.word	0x20000a58

08002854 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
 800285e:	460b      	mov	r3, r1
 8002860:	71bb      	strb	r3, [r7, #6]
 8002862:	4613      	mov	r3, r2
 8002864:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db3d      	blt.n	80028ea <ssd1306_DrawPixel+0x96>
 800286e:	79bb      	ldrb	r3, [r7, #6]
 8002870:	2b3f      	cmp	r3, #63	; 0x3f
 8002872:	d83a      	bhi.n	80028ea <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002874:	797b      	ldrb	r3, [r7, #5]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d11a      	bne.n	80028b0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800287a:	79fa      	ldrb	r2, [r7, #7]
 800287c:	79bb      	ldrb	r3, [r7, #6]
 800287e:	08db      	lsrs	r3, r3, #3
 8002880:	b2d8      	uxtb	r0, r3
 8002882:	4603      	mov	r3, r0
 8002884:	01db      	lsls	r3, r3, #7
 8002886:	4413      	add	r3, r2
 8002888:	4a1b      	ldr	r2, [pc, #108]	; (80028f8 <ssd1306_DrawPixel+0xa4>)
 800288a:	5cd3      	ldrb	r3, [r2, r3]
 800288c:	b25a      	sxtb	r2, r3
 800288e:	79bb      	ldrb	r3, [r7, #6]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	2101      	movs	r1, #1
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	b25b      	sxtb	r3, r3
 800289c:	4313      	orrs	r3, r2
 800289e:	b259      	sxtb	r1, r3
 80028a0:	79fa      	ldrb	r2, [r7, #7]
 80028a2:	4603      	mov	r3, r0
 80028a4:	01db      	lsls	r3, r3, #7
 80028a6:	4413      	add	r3, r2
 80028a8:	b2c9      	uxtb	r1, r1
 80028aa:	4a13      	ldr	r2, [pc, #76]	; (80028f8 <ssd1306_DrawPixel+0xa4>)
 80028ac:	54d1      	strb	r1, [r2, r3]
 80028ae:	e01d      	b.n	80028ec <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80028b0:	79fa      	ldrb	r2, [r7, #7]
 80028b2:	79bb      	ldrb	r3, [r7, #6]
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	b2d8      	uxtb	r0, r3
 80028b8:	4603      	mov	r3, r0
 80028ba:	01db      	lsls	r3, r3, #7
 80028bc:	4413      	add	r3, r2
 80028be:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <ssd1306_DrawPixel+0xa4>)
 80028c0:	5cd3      	ldrb	r3, [r2, r3]
 80028c2:	b25a      	sxtb	r2, r3
 80028c4:	79bb      	ldrb	r3, [r7, #6]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	2101      	movs	r1, #1
 80028cc:	fa01 f303 	lsl.w	r3, r1, r3
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	b25b      	sxtb	r3, r3
 80028d6:	4013      	ands	r3, r2
 80028d8:	b259      	sxtb	r1, r3
 80028da:	79fa      	ldrb	r2, [r7, #7]
 80028dc:	4603      	mov	r3, r0
 80028de:	01db      	lsls	r3, r3, #7
 80028e0:	4413      	add	r3, r2
 80028e2:	b2c9      	uxtb	r1, r1
 80028e4:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <ssd1306_DrawPixel+0xa4>)
 80028e6:	54d1      	strb	r1, [r2, r3]
 80028e8:	e000      	b.n	80028ec <ssd1306_DrawPixel+0x98>
        return;
 80028ea:	bf00      	nop
    }
}
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000a58 	.word	0x20000a58

080028fc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	4604      	mov	r4, r0
 8002904:	1d38      	adds	r0, r7, #4
 8002906:	e880 0006 	stmia.w	r0, {r1, r2}
 800290a:	461a      	mov	r2, r3
 800290c:	4623      	mov	r3, r4
 800290e:	73fb      	strb	r3, [r7, #15]
 8002910:	4613      	mov	r3, r2
 8002912:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	2b1f      	cmp	r3, #31
 8002918:	d902      	bls.n	8002920 <ssd1306_WriteChar+0x24>
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	2b7e      	cmp	r3, #126	; 0x7e
 800291e:	d901      	bls.n	8002924 <ssd1306_WriteChar+0x28>
        return 0;
 8002920:	2300      	movs	r3, #0
 8002922:	e06d      	b.n	8002a00 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002924:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <ssd1306_WriteChar+0x10c>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	793b      	ldrb	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	2b80      	cmp	r3, #128	; 0x80
 8002930:	dc06      	bgt.n	8002940 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002932:	4b35      	ldr	r3, [pc, #212]	; (8002a08 <ssd1306_WriteChar+0x10c>)
 8002934:	885b      	ldrh	r3, [r3, #2]
 8002936:	461a      	mov	r2, r3
 8002938:	797b      	ldrb	r3, [r7, #5]
 800293a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800293c:	2b40      	cmp	r3, #64	; 0x40
 800293e:	dd01      	ble.n	8002944 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002940:	2300      	movs	r3, #0
 8002942:	e05d      	b.n	8002a00 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	e04c      	b.n	80029e4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	3b20      	subs	r3, #32
 8002950:	7979      	ldrb	r1, [r7, #5]
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4619      	mov	r1, r3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	440b      	add	r3, r1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002964:	2300      	movs	r3, #0
 8002966:	61bb      	str	r3, [r7, #24]
 8002968:	e034      	b.n	80029d4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d012      	beq.n	80029a0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800297a:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <ssd1306_WriteChar+0x10c>)
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4413      	add	r3, r2
 8002986:	b2d8      	uxtb	r0, r3
 8002988:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <ssd1306_WriteChar+0x10c>)
 800298a:	885b      	ldrh	r3, [r3, #2]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	4413      	add	r3, r2
 8002994:	b2db      	uxtb	r3, r3
 8002996:	7bba      	ldrb	r2, [r7, #14]
 8002998:	4619      	mov	r1, r3
 800299a:	f7ff ff5b 	bl	8002854 <ssd1306_DrawPixel>
 800299e:	e016      	b.n	80029ce <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <ssd1306_WriteChar+0x10c>)
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	b2d8      	uxtb	r0, r3
 80029ae:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <ssd1306_WriteChar+0x10c>)
 80029b0:	885b      	ldrh	r3, [r3, #2]
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	b2d9      	uxtb	r1, r3
 80029bc:	7bbb      	ldrb	r3, [r7, #14]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bf0c      	ite	eq
 80029c2:	2301      	moveq	r3, #1
 80029c4:	2300      	movne	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	f7ff ff43 	bl	8002854 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	793b      	ldrb	r3, [r7, #4]
 80029d6:	461a      	mov	r2, r3
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	4293      	cmp	r3, r2
 80029dc:	d3c5      	bcc.n	800296a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3301      	adds	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	797b      	ldrb	r3, [r7, #5]
 80029e6:	461a      	mov	r2, r3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d3ad      	bcc.n	800294a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <ssd1306_WriteChar+0x10c>)
 80029f0:	881a      	ldrh	r2, [r3, #0]
 80029f2:	793b      	ldrb	r3, [r7, #4]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <ssd1306_WriteChar+0x10c>)
 80029fc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3724      	adds	r7, #36	; 0x24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd90      	pop	{r4, r7, pc}
 8002a08:	20000e58 	.word	0x20000e58

08002a0c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	1d38      	adds	r0, r7, #4
 8002a16:	e880 0006 	stmia.w	r0, {r1, r2}
 8002a1a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002a1c:	e012      	b.n	8002a44 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	7818      	ldrb	r0, [r3, #0]
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	1d3a      	adds	r2, r7, #4
 8002a26:	ca06      	ldmia	r2, {r1, r2}
 8002a28:	f7ff ff68 	bl	80028fc <ssd1306_WriteChar>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d002      	beq.n	8002a3e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	e008      	b.n	8002a50 <ssd1306_WriteString+0x44>
        }
        str++;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3301      	adds	r3, #1
 8002a42:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e8      	bne.n	8002a1e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	460a      	mov	r2, r1
 8002a62:	71fb      	strb	r3, [r7, #7]
 8002a64:	4613      	mov	r3, r2
 8002a66:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <ssd1306_SetCursor+0x2c>)
 8002a6e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002a70:	79bb      	ldrb	r3, [r7, #6]
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <ssd1306_SetCursor+0x2c>)
 8002a76:	805a      	strh	r2, [r3, #2]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	20000e58 	.word	0x20000e58

08002a88 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002a92:	2381      	movs	r3, #129	; 0x81
 8002a94:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fdf3 	bl	8002684 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fdef 	bl	8002684 <ssd1306_WriteCommand>
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002ac0:	23af      	movs	r3, #175	; 0xaf
 8002ac2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <ssd1306_SetDisplayOn+0x38>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	715a      	strb	r2, [r3, #5]
 8002aca:	e004      	b.n	8002ad6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002acc:	23ae      	movs	r3, #174	; 0xae
 8002ace:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <ssd1306_SetDisplayOn+0x38>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fdd3 	bl	8002684 <ssd1306_WriteCommand>
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000e58 	.word	0x20000e58

08002aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af0:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <HAL_Init+0x40>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0d      	ldr	r2, [pc, #52]	; (8002b2c <HAL_Init+0x40>)
 8002af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_Init+0x40>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <HAL_Init+0x40>)
 8002b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b08:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_Init+0x40>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <HAL_Init+0x40>)
 8002b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b14:	2003      	movs	r0, #3
 8002b16:	f000 fd0d 	bl	8003534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b1a:	200f      	movs	r0, #15
 8002b1c:	f000 f808 	bl	8002b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b20:	f7ff fa04 	bl	8001f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023c00 	.word	0x40023c00

08002b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_InitTick+0x54>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_InitTick+0x58>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	4619      	mov	r1, r3
 8002b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fd25 	bl	800359e <HAL_SYSTICK_Config>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e00e      	b.n	8002b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b0f      	cmp	r3, #15
 8002b62:	d80a      	bhi.n	8002b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b64:	2200      	movs	r2, #0
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	f04f 30ff 	mov.w	r0, #4294967295
 8002b6c:	f000 fced 	bl	800354a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b70:	4a06      	ldr	r2, [pc, #24]	; (8002b8c <HAL_InitTick+0x5c>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e000      	b.n	8002b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000558 	.word	0x20000558
 8002b88:	20000578 	.word	0x20000578
 8002b8c:	20000574 	.word	0x20000574

08002b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_IncTick+0x20>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_IncTick+0x24>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <HAL_IncTick+0x24>)
 8002ba2:	6013      	str	r3, [r2, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000578 	.word	0x20000578
 8002bb4:	20000e60 	.word	0x20000e60

08002bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return uwTick;
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <HAL_GetTick+0x14>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000e60 	.word	0x20000e60

08002bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bd8:	f7ff ffee 	bl	8002bb8 <HAL_GetTick>
 8002bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d005      	beq.n	8002bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bea:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <HAL_Delay+0x44>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bf6:	bf00      	nop
 8002bf8:	f7ff ffde 	bl	8002bb8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d8f7      	bhi.n	8002bf8 <HAL_Delay+0x28>
  {
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000578 	.word	0x20000578

08002c18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e033      	b.n	8002c96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff f9a0 	bl	8001f7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d118      	bne.n	8002c88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c5e:	f023 0302 	bic.w	r3, r3, #2
 8002c62:	f043 0202 	orr.w	r2, r3, #2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fa96 	bl	800319c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f023 0303 	bic.w	r3, r3, #3
 8002c7e:	f043 0201 	orr.w	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
 8002c86:	e001      	b.n	8002c8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_Start+0x1a>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e097      	b.n	8002dea <HAL_ADC_Start+0x14a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d018      	beq.n	8002d02 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce0:	4b45      	ldr	r3, [pc, #276]	; (8002df8 <HAL_ADC_Start+0x158>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a45      	ldr	r2, [pc, #276]	; (8002dfc <HAL_ADC_Start+0x15c>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	0c9a      	lsrs	r2, r3, #18
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002cf4:	e002      	b.n	8002cfc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f9      	bne.n	8002cf6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d15f      	bne.n	8002dd0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4e:	d106      	bne.n	8002d5e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	f023 0206 	bic.w	r2, r3, #6
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	645a      	str	r2, [r3, #68]	; 0x44
 8002d5c:	e002      	b.n	8002d64 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d6c:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <HAL_ADC_Start+0x160>)
 8002d6e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d78:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10f      	bne.n	8002da6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d129      	bne.n	8002de8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	e020      	b.n	8002de8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a16      	ldr	r2, [pc, #88]	; (8002e04 <HAL_ADC_Start+0x164>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d11b      	bne.n	8002de8 <HAL_ADC_Start+0x148>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d114      	bne.n	8002de8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	e00b      	b.n	8002de8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f043 0210 	orr.w	r2, r3, #16
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	f043 0201 	orr.w	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20000558 	.word	0x20000558
 8002dfc:	431bde83 	.word	0x431bde83
 8002e00:	40012300 	.word	0x40012300
 8002e04:	40012000 	.word	0x40012000

08002e08 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e24:	d113      	bne.n	8002e4e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e34:	d10b      	bne.n	8002e4e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f043 0220 	orr.w	r2, r3, #32
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e063      	b.n	8002f16 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002e4e:	f7ff feb3 	bl	8002bb8 <HAL_GetTick>
 8002e52:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e54:	e021      	b.n	8002e9a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d01d      	beq.n	8002e9a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d007      	beq.n	8002e74 <HAL_ADC_PollForConversion+0x6c>
 8002e64:	f7ff fea8 	bl	8002bb8 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d212      	bcs.n	8002e9a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d00b      	beq.n	8002e9a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f043 0204 	orr.w	r2, r3, #4
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e03d      	b.n	8002f16 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d1d6      	bne.n	8002e56 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0212 	mvn.w	r2, #18
 8002eb0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d123      	bne.n	8002f14 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d11f      	bne.n	8002f14 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d111      	bne.n	8002f14 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x1c>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e113      	b.n	800317c <HAL_ADC_ConfigChannel+0x244>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b09      	cmp	r3, #9
 8002f62:	d925      	bls.n	8002fb0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68d9      	ldr	r1, [r3, #12]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	3b1e      	subs	r3, #30
 8002f7a:	2207      	movs	r2, #7
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43da      	mvns	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	400a      	ands	r2, r1
 8002f88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68d9      	ldr	r1, [r3, #12]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4403      	add	r3, r0
 8002fa2:	3b1e      	subs	r3, #30
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	e022      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6919      	ldr	r1, [r3, #16]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	400a      	ands	r2, r1
 8002fd2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6919      	ldr	r1, [r3, #16]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4403      	add	r3, r0
 8002fec:	409a      	lsls	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d824      	bhi.n	8003048 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	3b05      	subs	r3, #5
 8003010:	221f      	movs	r2, #31
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	400a      	ands	r2, r1
 800301e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	b29b      	uxth	r3, r3
 800302c:	4618      	mov	r0, r3
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	3b05      	subs	r3, #5
 800303a:	fa00 f203 	lsl.w	r2, r0, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	635a      	str	r2, [r3, #52]	; 0x34
 8003046:	e04c      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b0c      	cmp	r3, #12
 800304e:	d824      	bhi.n	800309a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	3b23      	subs	r3, #35	; 0x23
 8003062:	221f      	movs	r2, #31
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43da      	mvns	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	400a      	ands	r2, r1
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	4618      	mov	r0, r3
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	3b23      	subs	r3, #35	; 0x23
 800308c:	fa00 f203 	lsl.w	r2, r0, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
 8003098:	e023      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	3b41      	subs	r3, #65	; 0x41
 80030ac:	221f      	movs	r2, #31
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43da      	mvns	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	400a      	ands	r2, r1
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	4618      	mov	r0, r3
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	3b41      	subs	r3, #65	; 0x41
 80030d6:	fa00 f203 	lsl.w	r2, r0, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030e2:	4b29      	ldr	r3, [pc, #164]	; (8003188 <HAL_ADC_ConfigChannel+0x250>)
 80030e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a28      	ldr	r2, [pc, #160]	; (800318c <HAL_ADC_ConfigChannel+0x254>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d10f      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x1d8>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b12      	cmp	r3, #18
 80030f6:	d10b      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1d      	ldr	r2, [pc, #116]	; (800318c <HAL_ADC_ConfigChannel+0x254>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d12b      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x23a>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <HAL_ADC_ConfigChannel+0x258>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d003      	beq.n	800312c <HAL_ADC_ConfigChannel+0x1f4>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b11      	cmp	r3, #17
 800312a:	d122      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a11      	ldr	r2, [pc, #68]	; (8003190 <HAL_ADC_ConfigChannel+0x258>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d111      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800314e:	4b11      	ldr	r3, [pc, #68]	; (8003194 <HAL_ADC_ConfigChannel+0x25c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a11      	ldr	r2, [pc, #68]	; (8003198 <HAL_ADC_ConfigChannel+0x260>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	0c9a      	lsrs	r2, r3, #18
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003164:	e002      	b.n	800316c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3b01      	subs	r3, #1
 800316a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f9      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	40012300 	.word	0x40012300
 800318c:	40012000 	.word	0x40012000
 8003190:	10000012 	.word	0x10000012
 8003194:	20000558 	.word	0x20000558
 8003198:	431bde83 	.word	0x431bde83

0800319c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031a4:	4b79      	ldr	r3, [pc, #484]	; (800338c <ADC_Init+0x1f0>)
 80031a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	431a      	orrs	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	021a      	lsls	r2, r3, #8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003216:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6899      	ldr	r1, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	4a58      	ldr	r2, [pc, #352]	; (8003390 <ADC_Init+0x1f4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003242:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6899      	ldr	r1, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003264:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6899      	ldr	r1, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	e00f      	b.n	800329a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003288:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003298:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0202 	bic.w	r2, r2, #2
 80032a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6899      	ldr	r1, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7e1b      	ldrb	r3, [r3, #24]
 80032b4:	005a      	lsls	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01b      	beq.n	8003300 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	3b01      	subs	r3, #1
 80032f4:	035a      	lsls	r2, r3, #13
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	e007      	b.n	8003310 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800330e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	3b01      	subs	r3, #1
 800332c:	051a      	lsls	r2, r3, #20
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6899      	ldr	r1, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003352:	025a      	lsls	r2, r3, #9
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800336a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6899      	ldr	r1, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	029a      	lsls	r2, r3, #10
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	40012300 	.word	0x40012300
 8003390:	0f000001 	.word	0x0f000001

08003394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b0:	4013      	ands	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c6:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	60d3      	str	r3, [r2, #12]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <__NVIC_GetPriorityGrouping+0x18>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	f003 0307 	and.w	r3, r3, #7
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	db0b      	blt.n	8003422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	4907      	ldr	r1, [pc, #28]	; (8003430 <__NVIC_EnableIRQ+0x38>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2001      	movs	r0, #1
 800341a:	fa00 f202 	lsl.w	r2, r0, r2
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000e100 	.word	0xe000e100

08003434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	2b00      	cmp	r3, #0
 8003446:	db0a      	blt.n	800345e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	490c      	ldr	r1, [pc, #48]	; (8003480 <__NVIC_SetPriority+0x4c>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	440b      	add	r3, r1
 8003458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800345c:	e00a      	b.n	8003474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4908      	ldr	r1, [pc, #32]	; (8003484 <__NVIC_SetPriority+0x50>)
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	3b04      	subs	r3, #4
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	440b      	add	r3, r1
 8003472:	761a      	strb	r2, [r3, #24]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000e100 	.word	0xe000e100
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	; 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f1c3 0307 	rsb	r3, r3, #7
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	bf28      	it	cs
 80034a6:	2304      	movcs	r3, #4
 80034a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d902      	bls.n	80034b8 <NVIC_EncodePriority+0x30>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3b03      	subs	r3, #3
 80034b6:	e000      	b.n	80034ba <NVIC_EncodePriority+0x32>
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	f04f 32ff 	mov.w	r2, #4294967295
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	401a      	ands	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d0:	f04f 31ff 	mov.w	r1, #4294967295
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43d9      	mvns	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	4313      	orrs	r3, r2
         );
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3724      	adds	r7, #36	; 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003500:	d301      	bcc.n	8003506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003502:	2301      	movs	r3, #1
 8003504:	e00f      	b.n	8003526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003506:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <SysTick_Config+0x40>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3b01      	subs	r3, #1
 800350c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800350e:	210f      	movs	r1, #15
 8003510:	f04f 30ff 	mov.w	r0, #4294967295
 8003514:	f7ff ff8e 	bl	8003434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <SysTick_Config+0x40>)
 800351a:	2200      	movs	r2, #0
 800351c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800351e:	4b04      	ldr	r3, [pc, #16]	; (8003530 <SysTick_Config+0x40>)
 8003520:	2207      	movs	r2, #7
 8003522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	e000e010 	.word	0xe000e010

08003534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ff29 	bl	8003394 <__NVIC_SetPriorityGrouping>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800354a:	b580      	push	{r7, lr}
 800354c:	b086      	sub	sp, #24
 800354e:	af00      	add	r7, sp, #0
 8003550:	4603      	mov	r3, r0
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800355c:	f7ff ff3e 	bl	80033dc <__NVIC_GetPriorityGrouping>
 8003560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	6978      	ldr	r0, [r7, #20]
 8003568:	f7ff ff8e 	bl	8003488 <NVIC_EncodePriority>
 800356c:	4602      	mov	r2, r0
 800356e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff5d 	bl	8003434 <__NVIC_SetPriority>
}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	4603      	mov	r3, r0
 800358a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800358c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ff31 	bl	80033f8 <__NVIC_EnableIRQ>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ffa2 	bl	80034f0 <SysTick_Config>
 80035ac:	4603      	mov	r3, r0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b089      	sub	sp, #36	; 0x24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
 80035d2:	e159      	b.n	8003888 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035d4:	2201      	movs	r2, #1
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4013      	ands	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	f040 8148 	bne.w	8003882 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d005      	beq.n	800360a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003606:	2b02      	cmp	r3, #2
 8003608:	d130      	bne.n	800366c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	2203      	movs	r2, #3
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003640:	2201      	movs	r2, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 0201 	and.w	r2, r3, #1
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	2b03      	cmp	r3, #3
 8003676:	d017      	beq.n	80036a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	2203      	movs	r2, #3
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d123      	bne.n	80036fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	08da      	lsrs	r2, r3, #3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3208      	adds	r2, #8
 80036bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	220f      	movs	r2, #15
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	08da      	lsrs	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3208      	adds	r2, #8
 80036f6:	69b9      	ldr	r1, [r7, #24]
 80036f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	2203      	movs	r2, #3
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0203 	and.w	r2, r3, #3
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4313      	orrs	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a2 	beq.w	8003882 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	4b57      	ldr	r3, [pc, #348]	; (80038a0 <HAL_GPIO_Init+0x2e8>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	4a56      	ldr	r2, [pc, #344]	; (80038a0 <HAL_GPIO_Init+0x2e8>)
 8003748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800374c:	6453      	str	r3, [r2, #68]	; 0x44
 800374e:	4b54      	ldr	r3, [pc, #336]	; (80038a0 <HAL_GPIO_Init+0x2e8>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800375a:	4a52      	ldr	r2, [pc, #328]	; (80038a4 <HAL_GPIO_Init+0x2ec>)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	089b      	lsrs	r3, r3, #2
 8003760:	3302      	adds	r3, #2
 8003762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	220f      	movs	r2, #15
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a49      	ldr	r2, [pc, #292]	; (80038a8 <HAL_GPIO_Init+0x2f0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d019      	beq.n	80037ba <HAL_GPIO_Init+0x202>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a48      	ldr	r2, [pc, #288]	; (80038ac <HAL_GPIO_Init+0x2f4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <HAL_GPIO_Init+0x1fe>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a47      	ldr	r2, [pc, #284]	; (80038b0 <HAL_GPIO_Init+0x2f8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00d      	beq.n	80037b2 <HAL_GPIO_Init+0x1fa>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a46      	ldr	r2, [pc, #280]	; (80038b4 <HAL_GPIO_Init+0x2fc>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d007      	beq.n	80037ae <HAL_GPIO_Init+0x1f6>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a45      	ldr	r2, [pc, #276]	; (80038b8 <HAL_GPIO_Init+0x300>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d101      	bne.n	80037aa <HAL_GPIO_Init+0x1f2>
 80037a6:	2304      	movs	r3, #4
 80037a8:	e008      	b.n	80037bc <HAL_GPIO_Init+0x204>
 80037aa:	2307      	movs	r3, #7
 80037ac:	e006      	b.n	80037bc <HAL_GPIO_Init+0x204>
 80037ae:	2303      	movs	r3, #3
 80037b0:	e004      	b.n	80037bc <HAL_GPIO_Init+0x204>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e002      	b.n	80037bc <HAL_GPIO_Init+0x204>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_GPIO_Init+0x204>
 80037ba:	2300      	movs	r3, #0
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	f002 0203 	and.w	r2, r2, #3
 80037c2:	0092      	lsls	r2, r2, #2
 80037c4:	4093      	lsls	r3, r2
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037cc:	4935      	ldr	r1, [pc, #212]	; (80038a4 <HAL_GPIO_Init+0x2ec>)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	089b      	lsrs	r3, r3, #2
 80037d2:	3302      	adds	r3, #2
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037da:	4b38      	ldr	r3, [pc, #224]	; (80038bc <HAL_GPIO_Init+0x304>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	43db      	mvns	r3, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4013      	ands	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037fe:	4a2f      	ldr	r2, [pc, #188]	; (80038bc <HAL_GPIO_Init+0x304>)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003804:	4b2d      	ldr	r3, [pc, #180]	; (80038bc <HAL_GPIO_Init+0x304>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003828:	4a24      	ldr	r2, [pc, #144]	; (80038bc <HAL_GPIO_Init+0x304>)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800382e:	4b23      	ldr	r3, [pc, #140]	; (80038bc <HAL_GPIO_Init+0x304>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	43db      	mvns	r3, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4013      	ands	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003852:	4a1a      	ldr	r2, [pc, #104]	; (80038bc <HAL_GPIO_Init+0x304>)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003858:	4b18      	ldr	r3, [pc, #96]	; (80038bc <HAL_GPIO_Init+0x304>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800387c:	4a0f      	ldr	r2, [pc, #60]	; (80038bc <HAL_GPIO_Init+0x304>)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3301      	adds	r3, #1
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b0f      	cmp	r3, #15
 800388c:	f67f aea2 	bls.w	80035d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3724      	adds	r7, #36	; 0x24
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40013800 	.word	0x40013800
 80038a8:	40020000 	.word	0x40020000
 80038ac:	40020400 	.word	0x40020400
 80038b0:	40020800 	.word	0x40020800
 80038b4:	40020c00 	.word	0x40020c00
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40013c00 	.word	0x40013c00

080038c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
 80038dc:	e001      	b.n	80038e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038de:	2300      	movs	r3, #0
 80038e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	807b      	strh	r3, [r7, #2]
 80038fc:	4613      	mov	r3, r2
 80038fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003900:	787b      	ldrb	r3, [r7, #1]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800390c:	e003      	b.n	8003916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800390e:	887b      	ldrh	r3, [r7, #2]
 8003910:	041a      	lsls	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	619a      	str	r2, [r3, #24]
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d006      	beq.n	8003948 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800393a:	4a05      	ldr	r2, [pc, #20]	; (8003950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd fcae 	bl	80012a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40013c00 	.word	0x40013c00

08003954 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e12b      	b.n	8003bbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fe fb42 	bl	8002004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2224      	movs	r2, #36	; 0x24
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0201 	bic.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039b8:	f001 f858 	bl	8004a6c <HAL_RCC_GetPCLK1Freq>
 80039bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4a81      	ldr	r2, [pc, #516]	; (8003bc8 <HAL_I2C_Init+0x274>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d807      	bhi.n	80039d8 <HAL_I2C_Init+0x84>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4a80      	ldr	r2, [pc, #512]	; (8003bcc <HAL_I2C_Init+0x278>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	bf94      	ite	ls
 80039d0:	2301      	movls	r3, #1
 80039d2:	2300      	movhi	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	e006      	b.n	80039e6 <HAL_I2C_Init+0x92>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4a7d      	ldr	r2, [pc, #500]	; (8003bd0 <HAL_I2C_Init+0x27c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	bf94      	ite	ls
 80039e0:	2301      	movls	r3, #1
 80039e2:	2300      	movhi	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e0e7      	b.n	8003bbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4a78      	ldr	r2, [pc, #480]	; (8003bd4 <HAL_I2C_Init+0x280>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	0c9b      	lsrs	r3, r3, #18
 80039f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	4a6a      	ldr	r2, [pc, #424]	; (8003bc8 <HAL_I2C_Init+0x274>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d802      	bhi.n	8003a28 <HAL_I2C_Init+0xd4>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3301      	adds	r3, #1
 8003a26:	e009      	b.n	8003a3c <HAL_I2C_Init+0xe8>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	4a69      	ldr	r2, [pc, #420]	; (8003bd8 <HAL_I2C_Init+0x284>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	099b      	lsrs	r3, r3, #6
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	495c      	ldr	r1, [pc, #368]	; (8003bc8 <HAL_I2C_Init+0x274>)
 8003a58:	428b      	cmp	r3, r1
 8003a5a:	d819      	bhi.n	8003a90 <HAL_I2C_Init+0x13c>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1e59      	subs	r1, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a6a:	1c59      	adds	r1, r3, #1
 8003a6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a70:	400b      	ands	r3, r1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_I2C_Init+0x138>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1e59      	subs	r1, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a84:	3301      	adds	r3, #1
 8003a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8a:	e051      	b.n	8003b30 <HAL_I2C_Init+0x1dc>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	e04f      	b.n	8003b30 <HAL_I2C_Init+0x1dc>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d111      	bne.n	8003abc <HAL_I2C_Init+0x168>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1e58      	subs	r0, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	440b      	add	r3, r1
 8003aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e012      	b.n	8003ae2 <HAL_I2C_Init+0x18e>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1e58      	subs	r0, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	0099      	lsls	r1, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Init+0x196>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e022      	b.n	8003b30 <HAL_I2C_Init+0x1dc>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10e      	bne.n	8003b10 <HAL_I2C_Init+0x1bc>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1e58      	subs	r0, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6859      	ldr	r1, [r3, #4]
 8003afa:	460b      	mov	r3, r1
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	440b      	add	r3, r1
 8003b00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b04:	3301      	adds	r3, #1
 8003b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b0e:	e00f      	b.n	8003b30 <HAL_I2C_Init+0x1dc>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1e58      	subs	r0, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	0099      	lsls	r1, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b26:	3301      	adds	r3, #1
 8003b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	6809      	ldr	r1, [r1, #0]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6911      	ldr	r1, [r2, #16]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68d2      	ldr	r2, [r2, #12]
 8003b6a:	4311      	orrs	r1, r2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	000186a0 	.word	0x000186a0
 8003bcc:	001e847f 	.word	0x001e847f
 8003bd0:	003d08ff 	.word	0x003d08ff
 8003bd4:	431bde83 	.word	0x431bde83
 8003bd8:	10624dd3 	.word	0x10624dd3

08003bdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	4608      	mov	r0, r1
 8003be6:	4611      	mov	r1, r2
 8003be8:	461a      	mov	r2, r3
 8003bea:	4603      	mov	r3, r0
 8003bec:	817b      	strh	r3, [r7, #10]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	813b      	strh	r3, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bf6:	f7fe ffdf 	bl	8002bb8 <HAL_GetTick>
 8003bfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	f040 80d9 	bne.w	8003dbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2319      	movs	r3, #25
 8003c10:	2201      	movs	r2, #1
 8003c12:	496d      	ldr	r1, [pc, #436]	; (8003dc8 <HAL_I2C_Mem_Write+0x1ec>)
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f971 	bl	8003efc <I2C_WaitOnFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
 8003c22:	e0cc      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2C_Mem_Write+0x56>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e0c5      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d007      	beq.n	8003c58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2221      	movs	r2, #33	; 0x21
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2240      	movs	r2, #64	; 0x40
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a3a      	ldr	r2, [r7, #32]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a4d      	ldr	r2, [pc, #308]	; (8003dcc <HAL_I2C_Mem_Write+0x1f0>)
 8003c98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c9a:	88f8      	ldrh	r0, [r7, #6]
 8003c9c:	893a      	ldrh	r2, [r7, #8]
 8003c9e:	8979      	ldrh	r1, [r7, #10]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	4603      	mov	r3, r0
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f890 	bl	8003dd0 <I2C_RequestMemoryWrite>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d052      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e081      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f9f2 	bl	80040a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d107      	bne.n	8003ce2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e06b      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d11b      	bne.n	8003d5c <HAL_I2C_Mem_Write+0x180>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d017      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	781a      	ldrb	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1aa      	bne.n	8003cba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f9de 	bl	800412a <I2C_WaitOnBTFFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00d      	beq.n	8003d90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d107      	bne.n	8003d8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e016      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	00100002 	.word	0x00100002
 8003dcc:	ffff0000 	.word	0xffff0000

08003dd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	4608      	mov	r0, r1
 8003dda:	4611      	mov	r1, r2
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4603      	mov	r3, r0
 8003de0:	817b      	strh	r3, [r7, #10]
 8003de2:	460b      	mov	r3, r1
 8003de4:	813b      	strh	r3, [r7, #8]
 8003de6:	4613      	mov	r3, r2
 8003de8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f878 	bl	8003efc <I2C_WaitOnFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00d      	beq.n	8003e2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e20:	d103      	bne.n	8003e2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e05f      	b.n	8003eee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e2e:	897b      	ldrh	r3, [r7, #10]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	6a3a      	ldr	r2, [r7, #32]
 8003e42:	492d      	ldr	r1, [pc, #180]	; (8003ef8 <I2C_RequestMemoryWrite+0x128>)
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f8b0 	bl	8003faa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e04c      	b.n	8003eee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6c:	6a39      	ldr	r1, [r7, #32]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f91a 	bl	80040a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00d      	beq.n	8003e96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d107      	bne.n	8003e92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e02b      	b.n	8003eee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d105      	bne.n	8003ea8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e9c:	893b      	ldrh	r3, [r7, #8]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	611a      	str	r2, [r3, #16]
 8003ea6:	e021      	b.n	8003eec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ea8:	893b      	ldrh	r3, [r7, #8]
 8003eaa:	0a1b      	lsrs	r3, r3, #8
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb8:	6a39      	ldr	r1, [r7, #32]
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 f8f4 	bl	80040a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d107      	bne.n	8003ede <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003edc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e005      	b.n	8003eee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ee2:	893b      	ldrh	r3, [r7, #8]
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	00010002 	.word	0x00010002

08003efc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f0c:	e025      	b.n	8003f5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d021      	beq.n	8003f5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f16:	f7fe fe4f 	bl	8002bb8 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d116      	bne.n	8003f5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f043 0220 	orr.w	r2, r3, #32
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e023      	b.n	8003fa2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d10d      	bne.n	8003f80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	43da      	mvns	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bf0c      	ite	eq
 8003f76:	2301      	moveq	r3, #1
 8003f78:	2300      	movne	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	e00c      	b.n	8003f9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	43da      	mvns	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bf0c      	ite	eq
 8003f92:	2301      	moveq	r3, #1
 8003f94:	2300      	movne	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d0b6      	beq.n	8003f0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fb8:	e051      	b.n	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc8:	d123      	bne.n	8004012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fe2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f043 0204 	orr.w	r2, r3, #4
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e046      	b.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d021      	beq.n	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401a:	f7fe fdcd 	bl	8002bb8 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	429a      	cmp	r2, r3
 8004028:	d302      	bcc.n	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d116      	bne.n	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f043 0220 	orr.w	r2, r3, #32
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e020      	b.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	0c1b      	lsrs	r3, r3, #16
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d10c      	bne.n	8004082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	43da      	mvns	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4013      	ands	r3, r2
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	bf14      	ite	ne
 800407a:	2301      	movne	r3, #1
 800407c:	2300      	moveq	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	e00b      	b.n	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	43da      	mvns	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4013      	ands	r3, r2
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d18d      	bne.n	8003fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040b4:	e02d      	b.n	8004112 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f878 	bl	80041ac <I2C_IsAcknowledgeFailed>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e02d      	b.n	8004122 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d021      	beq.n	8004112 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fe fd73 	bl	8002bb8 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d116      	bne.n	8004112 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e007      	b.n	8004122 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	2b80      	cmp	r3, #128	; 0x80
 800411e:	d1ca      	bne.n	80040b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004136:	e02d      	b.n	8004194 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f837 	bl	80041ac <I2C_IsAcknowledgeFailed>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e02d      	b.n	80041a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414e:	d021      	beq.n	8004194 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004150:	f7fe fd32 	bl	8002bb8 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	429a      	cmp	r2, r3
 800415e:	d302      	bcc.n	8004166 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d116      	bne.n	8004194 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	f043 0220 	orr.w	r2, r3, #32
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e007      	b.n	80041a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d1ca      	bne.n	8004138 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c2:	d11b      	bne.n	80041fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	f043 0204 	orr.w	r2, r3, #4
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
	...

0800420c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e267      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d075      	beq.n	8004316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800422a:	4b88      	ldr	r3, [pc, #544]	; (800444c <HAL_RCC_OscConfig+0x240>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b04      	cmp	r3, #4
 8004234:	d00c      	beq.n	8004250 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004236:	4b85      	ldr	r3, [pc, #532]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800423e:	2b08      	cmp	r3, #8
 8004240:	d112      	bne.n	8004268 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004242:	4b82      	ldr	r3, [pc, #520]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424e:	d10b      	bne.n	8004268 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	4b7e      	ldr	r3, [pc, #504]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d05b      	beq.n	8004314 <HAL_RCC_OscConfig+0x108>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d157      	bne.n	8004314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e242      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004270:	d106      	bne.n	8004280 <HAL_RCC_OscConfig+0x74>
 8004272:	4b76      	ldr	r3, [pc, #472]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a75      	ldr	r2, [pc, #468]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e01d      	b.n	80042bc <HAL_RCC_OscConfig+0xb0>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004288:	d10c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x98>
 800428a:	4b70      	ldr	r3, [pc, #448]	; (800444c <HAL_RCC_OscConfig+0x240>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a6f      	ldr	r2, [pc, #444]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4b6d      	ldr	r3, [pc, #436]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a6c      	ldr	r2, [pc, #432]	; (800444c <HAL_RCC_OscConfig+0x240>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e00b      	b.n	80042bc <HAL_RCC_OscConfig+0xb0>
 80042a4:	4b69      	ldr	r3, [pc, #420]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a68      	ldr	r2, [pc, #416]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80042aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	4b66      	ldr	r3, [pc, #408]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a65      	ldr	r2, [pc, #404]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80042b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d013      	beq.n	80042ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fe fc78 	bl	8002bb8 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042cc:	f7fe fc74 	bl	8002bb8 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e207      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	4b5b      	ldr	r3, [pc, #364]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0xc0>
 80042ea:	e014      	b.n	8004316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ec:	f7fe fc64 	bl	8002bb8 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fe fc60 	bl	8002bb8 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	; 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e1f3      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004306:	4b51      	ldr	r3, [pc, #324]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0xe8>
 8004312:	e000      	b.n	8004316 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d063      	beq.n	80043ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004322:	4b4a      	ldr	r3, [pc, #296]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432e:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004336:	2b08      	cmp	r3, #8
 8004338:	d11c      	bne.n	8004374 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800433a:	4b44      	ldr	r3, [pc, #272]	; (800444c <HAL_RCC_OscConfig+0x240>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d116      	bne.n	8004374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004346:	4b41      	ldr	r3, [pc, #260]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <HAL_RCC_OscConfig+0x152>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d001      	beq.n	800435e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e1c7      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435e:	4b3b      	ldr	r3, [pc, #236]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4937      	ldr	r1, [pc, #220]	; (800444c <HAL_RCC_OscConfig+0x240>)
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004372:	e03a      	b.n	80043ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d020      	beq.n	80043be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800437c:	4b34      	ldr	r3, [pc, #208]	; (8004450 <HAL_RCC_OscConfig+0x244>)
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004382:	f7fe fc19 	bl	8002bb8 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800438a:	f7fe fc15 	bl	8002bb8 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e1a8      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439c:	4b2b      	ldr	r3, [pc, #172]	; (800444c <HAL_RCC_OscConfig+0x240>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a8:	4b28      	ldr	r3, [pc, #160]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4925      	ldr	r1, [pc, #148]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	600b      	str	r3, [r1, #0]
 80043bc:	e015      	b.n	80043ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043be:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_RCC_OscConfig+0x244>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fe fbf8 	bl	8002bb8 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043cc:	f7fe fbf4 	bl	8002bb8 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e187      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043de:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d036      	beq.n	8004464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d016      	beq.n	800442c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <HAL_RCC_OscConfig+0x248>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004404:	f7fe fbd8 	bl	8002bb8 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800440c:	f7fe fbd4 	bl	8002bb8 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e167      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441e:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_OscConfig+0x240>)
 8004420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x200>
 800442a:	e01b      	b.n	8004464 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCC_OscConfig+0x248>)
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004432:	f7fe fbc1 	bl	8002bb8 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004438:	e00e      	b.n	8004458 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800443a:	f7fe fbbd 	bl	8002bb8 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d907      	bls.n	8004458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e150      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
 800444c:	40023800 	.word	0x40023800
 8004450:	42470000 	.word	0x42470000
 8004454:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004458:	4b88      	ldr	r3, [pc, #544]	; (800467c <HAL_RCC_OscConfig+0x470>)
 800445a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1ea      	bne.n	800443a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8097 	beq.w	80045a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004472:	2300      	movs	r3, #0
 8004474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004476:	4b81      	ldr	r3, [pc, #516]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10f      	bne.n	80044a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	4b7d      	ldr	r3, [pc, #500]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	4a7c      	ldr	r2, [pc, #496]	; (800467c <HAL_RCC_OscConfig+0x470>)
 800448c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004490:	6413      	str	r3, [r2, #64]	; 0x40
 8004492:	4b7a      	ldr	r3, [pc, #488]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449a:	60bb      	str	r3, [r7, #8]
 800449c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a2:	4b77      	ldr	r3, [pc, #476]	; (8004680 <HAL_RCC_OscConfig+0x474>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d118      	bne.n	80044e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ae:	4b74      	ldr	r3, [pc, #464]	; (8004680 <HAL_RCC_OscConfig+0x474>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a73      	ldr	r2, [pc, #460]	; (8004680 <HAL_RCC_OscConfig+0x474>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ba:	f7fe fb7d 	bl	8002bb8 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c2:	f7fe fb79 	bl	8002bb8 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e10c      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	4b6a      	ldr	r3, [pc, #424]	; (8004680 <HAL_RCC_OscConfig+0x474>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d106      	bne.n	80044f6 <HAL_RCC_OscConfig+0x2ea>
 80044e8:	4b64      	ldr	r3, [pc, #400]	; (800467c <HAL_RCC_OscConfig+0x470>)
 80044ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ec:	4a63      	ldr	r2, [pc, #396]	; (800467c <HAL_RCC_OscConfig+0x470>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6713      	str	r3, [r2, #112]	; 0x70
 80044f4:	e01c      	b.n	8004530 <HAL_RCC_OscConfig+0x324>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b05      	cmp	r3, #5
 80044fc:	d10c      	bne.n	8004518 <HAL_RCC_OscConfig+0x30c>
 80044fe:	4b5f      	ldr	r3, [pc, #380]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	4a5e      	ldr	r2, [pc, #376]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004504:	f043 0304 	orr.w	r3, r3, #4
 8004508:	6713      	str	r3, [r2, #112]	; 0x70
 800450a:	4b5c      	ldr	r3, [pc, #368]	; (800467c <HAL_RCC_OscConfig+0x470>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	4a5b      	ldr	r2, [pc, #364]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6713      	str	r3, [r2, #112]	; 0x70
 8004516:	e00b      	b.n	8004530 <HAL_RCC_OscConfig+0x324>
 8004518:	4b58      	ldr	r3, [pc, #352]	; (800467c <HAL_RCC_OscConfig+0x470>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	4a57      	ldr	r2, [pc, #348]	; (800467c <HAL_RCC_OscConfig+0x470>)
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	6713      	str	r3, [r2, #112]	; 0x70
 8004524:	4b55      	ldr	r3, [pc, #340]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	4a54      	ldr	r2, [pc, #336]	; (800467c <HAL_RCC_OscConfig+0x470>)
 800452a:	f023 0304 	bic.w	r3, r3, #4
 800452e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d015      	beq.n	8004564 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fe fb3e 	bl	8002bb8 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453e:	e00a      	b.n	8004556 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f7fe fb3a 	bl	8002bb8 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	; 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e0cb      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004556:	4b49      	ldr	r3, [pc, #292]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0ee      	beq.n	8004540 <HAL_RCC_OscConfig+0x334>
 8004562:	e014      	b.n	800458e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004564:	f7fe fb28 	bl	8002bb8 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800456a:	e00a      	b.n	8004582 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456c:	f7fe fb24 	bl	8002bb8 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	; 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e0b5      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004582:	4b3e      	ldr	r3, [pc, #248]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1ee      	bne.n	800456c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004594:	4b39      	ldr	r3, [pc, #228]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	4a38      	ldr	r2, [pc, #224]	; (800467c <HAL_RCC_OscConfig+0x470>)
 800459a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80a1 	beq.w	80046ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045aa:	4b34      	ldr	r3, [pc, #208]	; (800467c <HAL_RCC_OscConfig+0x470>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d05c      	beq.n	8004670 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d141      	bne.n	8004642 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045be:	4b31      	ldr	r3, [pc, #196]	; (8004684 <HAL_RCC_OscConfig+0x478>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c4:	f7fe faf8 	bl	8002bb8 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045cc:	f7fe faf4 	bl	8002bb8 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e087      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045de:	4b27      	ldr	r3, [pc, #156]	; (800467c <HAL_RCC_OscConfig+0x470>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69da      	ldr	r2, [r3, #28]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	019b      	lsls	r3, r3, #6
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	3b01      	subs	r3, #1
 8004604:	041b      	lsls	r3, r3, #16
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	061b      	lsls	r3, r3, #24
 800460e:	491b      	ldr	r1, [pc, #108]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004610:	4313      	orrs	r3, r2
 8004612:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004614:	4b1b      	ldr	r3, [pc, #108]	; (8004684 <HAL_RCC_OscConfig+0x478>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461a:	f7fe facd 	bl	8002bb8 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004622:	f7fe fac9 	bl	8002bb8 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e05c      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f0      	beq.n	8004622 <HAL_RCC_OscConfig+0x416>
 8004640:	e054      	b.n	80046ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004642:	4b10      	ldr	r3, [pc, #64]	; (8004684 <HAL_RCC_OscConfig+0x478>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f7fe fab6 	bl	8002bb8 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004650:	f7fe fab2 	bl	8002bb8 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e045      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004662:	4b06      	ldr	r3, [pc, #24]	; (800467c <HAL_RCC_OscConfig+0x470>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x444>
 800466e:	e03d      	b.n	80046ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d107      	bne.n	8004688 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e038      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
 800467c:	40023800 	.word	0x40023800
 8004680:	40007000 	.word	0x40007000
 8004684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004688:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <HAL_RCC_OscConfig+0x4ec>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d028      	beq.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d121      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d11a      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046b8:	4013      	ands	r3, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d111      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	085b      	lsrs	r3, r3, #1
 80046d0:	3b01      	subs	r3, #1
 80046d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d107      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d001      	beq.n	80046ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800

080046fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0cc      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004710:	4b68      	ldr	r3, [pc, #416]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d90c      	bls.n	8004738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471e:	4b65      	ldr	r3, [pc, #404]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b63      	ldr	r3, [pc, #396]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0b8      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d020      	beq.n	8004786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004750:	4b59      	ldr	r3, [pc, #356]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4a58      	ldr	r2, [pc, #352]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800475a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004768:	4b53      	ldr	r3, [pc, #332]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	4a52      	ldr	r2, [pc, #328]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004774:	4b50      	ldr	r3, [pc, #320]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	494d      	ldr	r1, [pc, #308]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	4313      	orrs	r3, r2
 8004784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d044      	beq.n	800481c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d107      	bne.n	80047aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	4b47      	ldr	r3, [pc, #284]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d119      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e07f      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d003      	beq.n	80047ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d107      	bne.n	80047ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ba:	4b3f      	ldr	r3, [pc, #252]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e06f      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ca:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e067      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047da:	4b37      	ldr	r3, [pc, #220]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 0203 	bic.w	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4934      	ldr	r1, [pc, #208]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ec:	f7fe f9e4 	bl	8002bb8 <HAL_GetTick>
 80047f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	e00a      	b.n	800480a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f4:	f7fe f9e0 	bl	8002bb8 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e04f      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480a:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 020c 	and.w	r2, r3, #12
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	429a      	cmp	r2, r3
 800481a:	d1eb      	bne.n	80047f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800481c:	4b25      	ldr	r3, [pc, #148]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d20c      	bcs.n	8004844 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b22      	ldr	r3, [pc, #136]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004832:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e032      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004850:	4b19      	ldr	r3, [pc, #100]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	4916      	ldr	r1, [pc, #88]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	4313      	orrs	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	490e      	ldr	r1, [pc, #56]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004882:	f000 f821 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8004886:	4602      	mov	r2, r0
 8004888:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	490a      	ldr	r1, [pc, #40]	; (80048bc <HAL_RCC_ClockConfig+0x1c0>)
 8004894:	5ccb      	ldrb	r3, [r1, r3]
 8004896:	fa22 f303 	lsr.w	r3, r2, r3
 800489a:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <HAL_RCC_ClockConfig+0x1c8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fe f944 	bl	8002b30 <HAL_InitTick>

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40023c00 	.word	0x40023c00
 80048b8:	40023800 	.word	0x40023800
 80048bc:	08009540 	.word	0x08009540
 80048c0:	20000558 	.word	0x20000558
 80048c4:	20000574 	.word	0x20000574

080048c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048cc:	b090      	sub	sp, #64	; 0x40
 80048ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	637b      	str	r3, [r7, #52]	; 0x34
 80048d4:	2300      	movs	r3, #0
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048d8:	2300      	movs	r3, #0
 80048da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e0:	4b59      	ldr	r3, [pc, #356]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x180>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 030c 	and.w	r3, r3, #12
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d00d      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0x40>
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	f200 80a1 	bhi.w	8004a34 <HAL_RCC_GetSysClockFreq+0x16c>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_RCC_GetSysClockFreq+0x34>
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d003      	beq.n	8004902 <HAL_RCC_GetSysClockFreq+0x3a>
 80048fa:	e09b      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048fc:	4b53      	ldr	r3, [pc, #332]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x184>)
 80048fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004900:	e09b      	b.n	8004a3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004902:	4b53      	ldr	r3, [pc, #332]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x188>)
 8004904:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004906:	e098      	b.n	8004a3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004908:	4b4f      	ldr	r3, [pc, #316]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x180>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004910:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004912:	4b4d      	ldr	r3, [pc, #308]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d028      	beq.n	8004970 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491e:	4b4a      	ldr	r3, [pc, #296]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	099b      	lsrs	r3, r3, #6
 8004924:	2200      	movs	r2, #0
 8004926:	623b      	str	r3, [r7, #32]
 8004928:	627a      	str	r2, [r7, #36]	; 0x24
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004930:	2100      	movs	r1, #0
 8004932:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x188>)
 8004934:	fb03 f201 	mul.w	r2, r3, r1
 8004938:	2300      	movs	r3, #0
 800493a:	fb00 f303 	mul.w	r3, r0, r3
 800493e:	4413      	add	r3, r2
 8004940:	4a43      	ldr	r2, [pc, #268]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x188>)
 8004942:	fba0 1202 	umull	r1, r2, r0, r2
 8004946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004948:	460a      	mov	r2, r1
 800494a:	62ba      	str	r2, [r7, #40]	; 0x28
 800494c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800494e:	4413      	add	r3, r2
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004954:	2200      	movs	r2, #0
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	61fa      	str	r2, [r7, #28]
 800495a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800495e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004962:	f7fc f929 	bl	8000bb8 <__aeabi_uldivmod>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4613      	mov	r3, r2
 800496c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800496e:	e053      	b.n	8004a18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004970:	4b35      	ldr	r3, [pc, #212]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	099b      	lsrs	r3, r3, #6
 8004976:	2200      	movs	r2, #0
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	617a      	str	r2, [r7, #20]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004982:	f04f 0b00 	mov.w	fp, #0
 8004986:	4652      	mov	r2, sl
 8004988:	465b      	mov	r3, fp
 800498a:	f04f 0000 	mov.w	r0, #0
 800498e:	f04f 0100 	mov.w	r1, #0
 8004992:	0159      	lsls	r1, r3, #5
 8004994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004998:	0150      	lsls	r0, r2, #5
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	ebb2 080a 	subs.w	r8, r2, sl
 80049a2:	eb63 090b 	sbc.w	r9, r3, fp
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80049b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80049b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80049ba:	ebb2 0408 	subs.w	r4, r2, r8
 80049be:	eb63 0509 	sbc.w	r5, r3, r9
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	00eb      	lsls	r3, r5, #3
 80049cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049d0:	00e2      	lsls	r2, r4, #3
 80049d2:	4614      	mov	r4, r2
 80049d4:	461d      	mov	r5, r3
 80049d6:	eb14 030a 	adds.w	r3, r4, sl
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	eb45 030b 	adc.w	r3, r5, fp
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ee:	4629      	mov	r1, r5
 80049f0:	028b      	lsls	r3, r1, #10
 80049f2:	4621      	mov	r1, r4
 80049f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049f8:	4621      	mov	r1, r4
 80049fa:	028a      	lsls	r2, r1, #10
 80049fc:	4610      	mov	r0, r2
 80049fe:	4619      	mov	r1, r3
 8004a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a02:	2200      	movs	r2, #0
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	60fa      	str	r2, [r7, #12]
 8004a08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a0c:	f7fc f8d4 	bl	8000bb8 <__aeabi_uldivmod>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4613      	mov	r3, r2
 8004a16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a18:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	0c1b      	lsrs	r3, r3, #16
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	3301      	adds	r3, #1
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004a28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a32:	e002      	b.n	8004a3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x184>)
 8004a36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3740      	adds	r7, #64	; 0x40
 8004a40:	46bd      	mov	sp, r7
 8004a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a46:	bf00      	nop
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	00f42400 	.word	0x00f42400
 8004a50:	017d7840 	.word	0x017d7840

08004a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a58:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	20000558 	.word	0x20000558

08004a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a70:	f7ff fff0 	bl	8004a54 <HAL_RCC_GetHCLKFreq>
 8004a74:	4602      	mov	r2, r0
 8004a76:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	0a9b      	lsrs	r3, r3, #10
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	4903      	ldr	r1, [pc, #12]	; (8004a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a82:	5ccb      	ldrb	r3, [r1, r3]
 8004a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	08009550 	.word	0x08009550

08004a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a98:	f7ff ffdc 	bl	8004a54 <HAL_RCC_GetHCLKFreq>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	0b5b      	lsrs	r3, r3, #13
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	4903      	ldr	r1, [pc, #12]	; (8004ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aaa:	5ccb      	ldrb	r3, [r1, r3]
 8004aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	08009550 	.word	0x08009550

08004abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e07b      	b.n	8004bc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d108      	bne.n	8004ae8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ade:	d009      	beq.n	8004af4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	61da      	str	r2, [r3, #28]
 8004ae6:	e005      	b.n	8004af4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fd fb06 	bl	8002120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b78:	ea42 0103 	orr.w	r1, r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	0c1b      	lsrs	r3, r3, #16
 8004b92:	f003 0104 	and.w	r1, r3, #4
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	f003 0210 	and.w	r2, r3, #16
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b082      	sub	sp, #8
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e041      	b.n	8004c64 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d106      	bne.n	8004bfa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7fd fb33 	bl	8002260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	f000 fe51 	bl	80058b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d001      	beq.n	8004c84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e03c      	b.n	8004cfe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1e      	ldr	r2, [pc, #120]	; (8004d0c <HAL_TIM_Base_Start+0xa0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d018      	beq.n	8004cc8 <HAL_TIM_Base_Start+0x5c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9e:	d013      	beq.n	8004cc8 <HAL_TIM_Base_Start+0x5c>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1a      	ldr	r2, [pc, #104]	; (8004d10 <HAL_TIM_Base_Start+0xa4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_TIM_Base_Start+0x5c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a19      	ldr	r2, [pc, #100]	; (8004d14 <HAL_TIM_Base_Start+0xa8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d009      	beq.n	8004cc8 <HAL_TIM_Base_Start+0x5c>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <HAL_TIM_Base_Start+0xac>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_TIM_Base_Start+0x5c>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a16      	ldr	r2, [pc, #88]	; (8004d1c <HAL_TIM_Base_Start+0xb0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d111      	bne.n	8004cec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b06      	cmp	r3, #6
 8004cd8:	d010      	beq.n	8004cfc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0201 	orr.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cea:	e007      	b.n	8004cfc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40010000 	.word	0x40010000
 8004d10:	40000400 	.word	0x40000400
 8004d14:	40000800 	.word	0x40000800
 8004d18:	40000c00 	.word	0x40000c00
 8004d1c:	40014000 	.word	0x40014000

08004d20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d001      	beq.n	8004d38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e044      	b.n	8004dc2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1e      	ldr	r2, [pc, #120]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d018      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x6c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d62:	d013      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x6c>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1a      	ldr	r2, [pc, #104]	; (8004dd4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00e      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x6c>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a19      	ldr	r2, [pc, #100]	; (8004dd8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d009      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x6c>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <HAL_TIM_Base_Start_IT+0xbc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x6c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a16      	ldr	r2, [pc, #88]	; (8004de0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d111      	bne.n	8004db0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b06      	cmp	r3, #6
 8004d9c:	d010      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0201 	orr.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dae:	e007      	b.n	8004dc0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800
 8004ddc:	40000c00 	.word	0x40000c00
 8004de0:	40014000 	.word	0x40014000

08004de4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6a1a      	ldr	r2, [r3, #32]
 8004e02:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10f      	bne.n	8004e2c <HAL_TIM_Base_Stop_IT+0x48>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6a1a      	ldr	r2, [r3, #32]
 8004e12:	f240 4344 	movw	r3, #1092	; 0x444
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d107      	bne.n	8004e2c <HAL_TIM_Base_Stop_IT+0x48>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0201 	bic.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b082      	sub	sp, #8
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e041      	b.n	8004ed8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f839 	bl	8004ee0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2202      	movs	r2, #2
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4610      	mov	r0, r2
 8004e82:	f000 fd17 	bl	80058b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d109      	bne.n	8004f1c <HAL_TIM_OC_Start_IT+0x28>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	bf14      	ite	ne
 8004f14:	2301      	movne	r3, #1
 8004f16:	2300      	moveq	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	e022      	b.n	8004f62 <HAL_TIM_OC_Start_IT+0x6e>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d109      	bne.n	8004f36 <HAL_TIM_OC_Start_IT+0x42>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	bf14      	ite	ne
 8004f2e:	2301      	movne	r3, #1
 8004f30:	2300      	moveq	r3, #0
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	e015      	b.n	8004f62 <HAL_TIM_OC_Start_IT+0x6e>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d109      	bne.n	8004f50 <HAL_TIM_OC_Start_IT+0x5c>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	bf14      	ite	ne
 8004f48:	2301      	movne	r3, #1
 8004f4a:	2300      	moveq	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	e008      	b.n	8004f62 <HAL_TIM_OC_Start_IT+0x6e>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e0b3      	b.n	80050d2 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d104      	bne.n	8004f7a <HAL_TIM_OC_Start_IT+0x86>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f78:	e013      	b.n	8004fa2 <HAL_TIM_OC_Start_IT+0xae>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_OC_Start_IT+0x96>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f88:	e00b      	b.n	8004fa2 <HAL_TIM_OC_Start_IT+0xae>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_OC_Start_IT+0xa6>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f98:	e003      	b.n	8004fa2 <HAL_TIM_OC_Start_IT+0xae>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b0c      	cmp	r3, #12
 8004fa6:	d841      	bhi.n	800502c <HAL_TIM_OC_Start_IT+0x138>
 8004fa8:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <HAL_TIM_OC_Start_IT+0xbc>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08004fe5 	.word	0x08004fe5
 8004fb4:	0800502d 	.word	0x0800502d
 8004fb8:	0800502d 	.word	0x0800502d
 8004fbc:	0800502d 	.word	0x0800502d
 8004fc0:	08004ff7 	.word	0x08004ff7
 8004fc4:	0800502d 	.word	0x0800502d
 8004fc8:	0800502d 	.word	0x0800502d
 8004fcc:	0800502d 	.word	0x0800502d
 8004fd0:	08005009 	.word	0x08005009
 8004fd4:	0800502d 	.word	0x0800502d
 8004fd8:	0800502d 	.word	0x0800502d
 8004fdc:	0800502d 	.word	0x0800502d
 8004fe0:	0800501b 	.word	0x0800501b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0202 	orr.w	r2, r2, #2
 8004ff2:	60da      	str	r2, [r3, #12]
      break;
 8004ff4:	e01d      	b.n	8005032 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0204 	orr.w	r2, r2, #4
 8005004:	60da      	str	r2, [r3, #12]
      break;
 8005006:	e014      	b.n	8005032 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0208 	orr.w	r2, r2, #8
 8005016:	60da      	str	r2, [r3, #12]
      break;
 8005018:	e00b      	b.n	8005032 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0210 	orr.w	r2, r2, #16
 8005028:	60da      	str	r2, [r3, #12]
      break;
 800502a:	e002      	b.n	8005032 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	73fb      	strb	r3, [r7, #15]
      break;
 8005030:	bf00      	nop
  }

  if (status == HAL_OK)
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d14b      	bne.n	80050d0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2201      	movs	r2, #1
 800503e:	6839      	ldr	r1, [r7, #0]
 8005040:	4618      	mov	r0, r3
 8005042:	f000 fedd 	bl	8005e00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a24      	ldr	r2, [pc, #144]	; (80050dc <HAL_TIM_OC_Start_IT+0x1e8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d107      	bne.n	8005060 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800505e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <HAL_TIM_OC_Start_IT+0x1e8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d018      	beq.n	800509c <HAL_TIM_OC_Start_IT+0x1a8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005072:	d013      	beq.n	800509c <HAL_TIM_OC_Start_IT+0x1a8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a19      	ldr	r2, [pc, #100]	; (80050e0 <HAL_TIM_OC_Start_IT+0x1ec>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00e      	beq.n	800509c <HAL_TIM_OC_Start_IT+0x1a8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d009      	beq.n	800509c <HAL_TIM_OC_Start_IT+0x1a8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a16      	ldr	r2, [pc, #88]	; (80050e8 <HAL_TIM_OC_Start_IT+0x1f4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_TIM_OC_Start_IT+0x1a8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a15      	ldr	r2, [pc, #84]	; (80050ec <HAL_TIM_OC_Start_IT+0x1f8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d111      	bne.n	80050c0 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b06      	cmp	r3, #6
 80050ac:	d010      	beq.n	80050d0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050be:	e007      	b.n	80050d0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40010000 	.word	0x40010000
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800
 80050e8:	40000c00 	.word	0x40000c00
 80050ec:	40014000 	.word	0x40014000

080050f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e097      	b.n	8005234 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d106      	bne.n	800511e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7fd f849 	bl	80021b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005134:	f023 0307 	bic.w	r3, r3, #7
 8005138:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3304      	adds	r3, #4
 8005142:	4619      	mov	r1, r3
 8005144:	4610      	mov	r0, r2
 8005146:	f000 fbb5 	bl	80058b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005172:	f023 0303 	bic.w	r3, r3, #3
 8005176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	4313      	orrs	r3, r2
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005190:	f023 030c 	bic.w	r3, r3, #12
 8005194:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800519c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	021b      	lsls	r3, r3, #8
 80051ac:	4313      	orrs	r3, r2
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	011a      	lsls	r2, r3, #4
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	031b      	lsls	r3, r3, #12
 80051c0:	4313      	orrs	r3, r2
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80051ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80051d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	4313      	orrs	r3, r2
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005254:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800525c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005264:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d110      	bne.n	800528e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d102      	bne.n	8005278 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005272:	7b7b      	ldrb	r3, [r7, #13]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d001      	beq.n	800527c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e089      	b.n	8005390 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800528c:	e031      	b.n	80052f2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d110      	bne.n	80052b6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005294:	7bbb      	ldrb	r3, [r7, #14]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d102      	bne.n	80052a0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800529a:	7b3b      	ldrb	r3, [r7, #12]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d001      	beq.n	80052a4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e075      	b.n	8005390 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052b4:	e01d      	b.n	80052f2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d108      	bne.n	80052ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052bc:	7bbb      	ldrb	r3, [r7, #14]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d105      	bne.n	80052ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052c2:	7b7b      	ldrb	r3, [r7, #13]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d102      	bne.n	80052ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052c8:	7b3b      	ldrb	r3, [r7, #12]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d001      	beq.n	80052d2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e05e      	b.n	8005390 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2202      	movs	r2, #2
 80052e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <HAL_TIM_Encoder_Start_IT+0xc4>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d010      	beq.n	8005320 <HAL_TIM_Encoder_Start_IT+0xe4>
 80052fe:	e01f      	b.n	8005340 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2201      	movs	r2, #1
 8005306:	2100      	movs	r1, #0
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fd79 	bl	8005e00 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0202 	orr.w	r2, r2, #2
 800531c:	60da      	str	r2, [r3, #12]
      break;
 800531e:	e02e      	b.n	800537e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2201      	movs	r2, #1
 8005326:	2104      	movs	r1, #4
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fd69 	bl	8005e00 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0204 	orr.w	r2, r2, #4
 800533c:	60da      	str	r2, [r3, #12]
      break;
 800533e:	e01e      	b.n	800537e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2201      	movs	r2, #1
 8005346:	2100      	movs	r1, #0
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fd59 	bl	8005e00 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2201      	movs	r2, #1
 8005354:	2104      	movs	r1, #4
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fd52 	bl	8005e00 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0202 	orr.w	r2, r2, #2
 800536a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0204 	orr.w	r2, r2, #4
 800537a:	60da      	str	r2, [r3, #12]
      break;
 800537c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f042 0201 	orr.w	r2, r2, #1
 800538c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d122      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d11b      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0202 	mvn.w	r2, #2
 80053c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fa4c 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 80053e0:	e005      	b.n	80053ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fb fee0 	bl	80011a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fa4f 	bl	800588c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0304 	and.w	r3, r3, #4
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d122      	bne.n	8005448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b04      	cmp	r3, #4
 800540e:	d11b      	bne.n	8005448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0204 	mvn.w	r2, #4
 8005418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa22 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 8005434:	e005      	b.n	8005442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fb feb6 	bl	80011a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fa25 	bl	800588c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b08      	cmp	r3, #8
 8005454:	d122      	bne.n	800549c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b08      	cmp	r3, #8
 8005462:	d11b      	bne.n	800549c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0208 	mvn.w	r2, #8
 800546c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2204      	movs	r2, #4
 8005472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f9f8 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 8005488:	e005      	b.n	8005496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fb fe8c 	bl	80011a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f9fb 	bl	800588c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d122      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d11b      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0210 	mvn.w	r2, #16
 80054c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2208      	movs	r2, #8
 80054c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f9ce 	bl	8005878 <HAL_TIM_IC_CaptureCallback>
 80054dc:	e005      	b.n	80054ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fb fe62 	bl	80011a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f9d1 	bl	800588c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d10e      	bne.n	800551c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b01      	cmp	r3, #1
 800550a:	d107      	bne.n	800551c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0201 	mvn.w	r2, #1
 8005514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fb fe24 	bl	8001164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	2b80      	cmp	r3, #128	; 0x80
 8005528:	d10e      	bne.n	8005548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005534:	2b80      	cmp	r3, #128	; 0x80
 8005536:	d107      	bne.n	8005548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fcfa 	bl	8005f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d10e      	bne.n	8005574 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	d107      	bne.n	8005574 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f996 	bl	80058a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b20      	cmp	r3, #32
 8005580:	d10e      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b20      	cmp	r3, #32
 800558e:	d107      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0220 	mvn.w	r2, #32
 8005598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fcc4 	bl	8005f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055a0:	bf00      	nop
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e048      	b.n	8005658 <HAL_TIM_OC_ConfigChannel+0xb0>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	d839      	bhi.n	8005648 <HAL_TIM_OC_ConfigChannel+0xa0>
 80055d4:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <HAL_TIM_OC_ConfigChannel+0x34>)
 80055d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055da:	bf00      	nop
 80055dc:	08005611 	.word	0x08005611
 80055e0:	08005649 	.word	0x08005649
 80055e4:	08005649 	.word	0x08005649
 80055e8:	08005649 	.word	0x08005649
 80055ec:	0800561f 	.word	0x0800561f
 80055f0:	08005649 	.word	0x08005649
 80055f4:	08005649 	.word	0x08005649
 80055f8:	08005649 	.word	0x08005649
 80055fc:	0800562d 	.word	0x0800562d
 8005600:	08005649 	.word	0x08005649
 8005604:	08005649 	.word	0x08005649
 8005608:	08005649 	.word	0x08005649
 800560c:	0800563b 	.word	0x0800563b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 f9cc 	bl	80059b4 <TIM_OC1_SetConfig>
      break;
 800561c:	e017      	b.n	800564e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fa2b 	bl	8005a80 <TIM_OC2_SetConfig>
      break;
 800562a:	e010      	b.n	800564e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68b9      	ldr	r1, [r7, #8]
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fa90 	bl	8005b58 <TIM_OC3_SetConfig>
      break;
 8005638:	e009      	b.n	800564e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68b9      	ldr	r1, [r7, #8]
 8005640:	4618      	mov	r0, r3
 8005642:	f000 faf3 	bl	8005c2c <TIM_OC4_SetConfig>
      break;
 8005646:	e002      	b.n	800564e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	75fb      	strb	r3, [r7, #23]
      break;
 800564c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005656:	7dfb      	ldrb	r3, [r7, #23]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_TIM_ConfigClockSource+0x1c>
 8005678:	2302      	movs	r3, #2
 800567a:	e0b4      	b.n	80057e6 <HAL_TIM_ConfigClockSource+0x186>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800569a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b4:	d03e      	beq.n	8005734 <HAL_TIM_ConfigClockSource+0xd4>
 80056b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ba:	f200 8087 	bhi.w	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c2:	f000 8086 	beq.w	80057d2 <HAL_TIM_ConfigClockSource+0x172>
 80056c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ca:	d87f      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056cc:	2b70      	cmp	r3, #112	; 0x70
 80056ce:	d01a      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0xa6>
 80056d0:	2b70      	cmp	r3, #112	; 0x70
 80056d2:	d87b      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056d4:	2b60      	cmp	r3, #96	; 0x60
 80056d6:	d050      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x11a>
 80056d8:	2b60      	cmp	r3, #96	; 0x60
 80056da:	d877      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056dc:	2b50      	cmp	r3, #80	; 0x50
 80056de:	d03c      	beq.n	800575a <HAL_TIM_ConfigClockSource+0xfa>
 80056e0:	2b50      	cmp	r3, #80	; 0x50
 80056e2:	d873      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056e4:	2b40      	cmp	r3, #64	; 0x40
 80056e6:	d058      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x13a>
 80056e8:	2b40      	cmp	r3, #64	; 0x40
 80056ea:	d86f      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056ec:	2b30      	cmp	r3, #48	; 0x30
 80056ee:	d064      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15a>
 80056f0:	2b30      	cmp	r3, #48	; 0x30
 80056f2:	d86b      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d060      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15a>
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d867      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d05c      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15a>
 8005700:	2b10      	cmp	r3, #16
 8005702:	d05a      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15a>
 8005704:	e062      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6899      	ldr	r1, [r3, #8]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f000 fb53 	bl	8005dc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005728:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	609a      	str	r2, [r3, #8]
      break;
 8005732:	e04f      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	6899      	ldr	r1, [r3, #8]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f000 fb3c 	bl	8005dc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005756:	609a      	str	r2, [r3, #8]
      break;
 8005758:	e03c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6859      	ldr	r1, [r3, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	461a      	mov	r2, r3
 8005768:	f000 fab0 	bl	8005ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2150      	movs	r1, #80	; 0x50
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fb09 	bl	8005d8a <TIM_ITRx_SetConfig>
      break;
 8005778:	e02c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6859      	ldr	r1, [r3, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	461a      	mov	r2, r3
 8005788:	f000 facf 	bl	8005d2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2160      	movs	r1, #96	; 0x60
 8005792:	4618      	mov	r0, r3
 8005794:	f000 faf9 	bl	8005d8a <TIM_ITRx_SetConfig>
      break;
 8005798:	e01c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6859      	ldr	r1, [r3, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f000 fa90 	bl	8005ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2140      	movs	r1, #64	; 0x40
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fae9 	bl	8005d8a <TIM_ITRx_SetConfig>
      break;
 80057b8:	e00c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4619      	mov	r1, r3
 80057c4:	4610      	mov	r0, r2
 80057c6:	f000 fae0 	bl	8005d8a <TIM_ITRx_SetConfig>
      break;
 80057ca:	e003      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
      break;
 80057d0:	e000      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b0c      	cmp	r3, #12
 8005802:	d831      	bhi.n	8005868 <HAL_TIM_ReadCapturedValue+0x78>
 8005804:	a201      	add	r2, pc, #4	; (adr r2, 800580c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	08005841 	.word	0x08005841
 8005810:	08005869 	.word	0x08005869
 8005814:	08005869 	.word	0x08005869
 8005818:	08005869 	.word	0x08005869
 800581c:	0800584b 	.word	0x0800584b
 8005820:	08005869 	.word	0x08005869
 8005824:	08005869 	.word	0x08005869
 8005828:	08005869 	.word	0x08005869
 800582c:	08005855 	.word	0x08005855
 8005830:	08005869 	.word	0x08005869
 8005834:	08005869 	.word	0x08005869
 8005838:	08005869 	.word	0x08005869
 800583c:	0800585f 	.word	0x0800585f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005846:	60fb      	str	r3, [r7, #12]

      break;
 8005848:	e00f      	b.n	800586a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	60fb      	str	r3, [r7, #12]

      break;
 8005852:	e00a      	b.n	800586a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585a:	60fb      	str	r3, [r7, #12]

      break;
 800585c:	e005      	b.n	800586a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	60fb      	str	r3, [r7, #12]

      break;
 8005866:	e000      	b.n	800586a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005868:	bf00      	nop
  }

  return tmpreg;
 800586a:	68fb      	ldr	r3, [r7, #12]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a34      	ldr	r2, [pc, #208]	; (8005998 <TIM_Base_SetConfig+0xe4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00f      	beq.n	80058ec <TIM_Base_SetConfig+0x38>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d2:	d00b      	beq.n	80058ec <TIM_Base_SetConfig+0x38>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a31      	ldr	r2, [pc, #196]	; (800599c <TIM_Base_SetConfig+0xe8>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d007      	beq.n	80058ec <TIM_Base_SetConfig+0x38>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a30      	ldr	r2, [pc, #192]	; (80059a0 <TIM_Base_SetConfig+0xec>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_Base_SetConfig+0x38>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a2f      	ldr	r2, [pc, #188]	; (80059a4 <TIM_Base_SetConfig+0xf0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d108      	bne.n	80058fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a25      	ldr	r2, [pc, #148]	; (8005998 <TIM_Base_SetConfig+0xe4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d01b      	beq.n	800593e <TIM_Base_SetConfig+0x8a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590c:	d017      	beq.n	800593e <TIM_Base_SetConfig+0x8a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a22      	ldr	r2, [pc, #136]	; (800599c <TIM_Base_SetConfig+0xe8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <TIM_Base_SetConfig+0x8a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a21      	ldr	r2, [pc, #132]	; (80059a0 <TIM_Base_SetConfig+0xec>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00f      	beq.n	800593e <TIM_Base_SetConfig+0x8a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a20      	ldr	r2, [pc, #128]	; (80059a4 <TIM_Base_SetConfig+0xf0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00b      	beq.n	800593e <TIM_Base_SetConfig+0x8a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a1f      	ldr	r2, [pc, #124]	; (80059a8 <TIM_Base_SetConfig+0xf4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d007      	beq.n	800593e <TIM_Base_SetConfig+0x8a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a1e      	ldr	r2, [pc, #120]	; (80059ac <TIM_Base_SetConfig+0xf8>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d003      	beq.n	800593e <TIM_Base_SetConfig+0x8a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a1d      	ldr	r2, [pc, #116]	; (80059b0 <TIM_Base_SetConfig+0xfc>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d108      	bne.n	8005950 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a08      	ldr	r2, [pc, #32]	; (8005998 <TIM_Base_SetConfig+0xe4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d103      	bne.n	8005984 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	615a      	str	r2, [r3, #20]
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40010000 	.word	0x40010000
 800599c:	40000400 	.word	0x40000400
 80059a0:	40000800 	.word	0x40000800
 80059a4:	40000c00 	.word	0x40000c00
 80059a8:	40014000 	.word	0x40014000
 80059ac:	40014400 	.word	0x40014400
 80059b0:	40014800 	.word	0x40014800

080059b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0303 	bic.w	r3, r3, #3
 80059ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f023 0302 	bic.w	r3, r3, #2
 80059fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a1c      	ldr	r2, [pc, #112]	; (8005a7c <TIM_OC1_SetConfig+0xc8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d10c      	bne.n	8005a2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f023 0308 	bic.w	r3, r3, #8
 8005a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f023 0304 	bic.w	r3, r3, #4
 8005a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a13      	ldr	r2, [pc, #76]	; (8005a7c <TIM_OC1_SetConfig+0xc8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d111      	bne.n	8005a56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	621a      	str	r2, [r3, #32]
}
 8005a70:	bf00      	nop
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	40010000 	.word	0x40010000

08005a80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f023 0210 	bic.w	r2, r3, #16
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f023 0320 	bic.w	r3, r3, #32
 8005aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a1e      	ldr	r2, [pc, #120]	; (8005b54 <TIM_OC2_SetConfig+0xd4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d10d      	bne.n	8005afc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005afa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <TIM_OC2_SetConfig+0xd4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d113      	bne.n	8005b2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40010000 	.word	0x40010000

08005b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a1d      	ldr	r2, [pc, #116]	; (8005c28 <TIM_OC3_SetConfig+0xd0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d10d      	bne.n	8005bd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a14      	ldr	r2, [pc, #80]	; (8005c28 <TIM_OC3_SetConfig+0xd0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d113      	bne.n	8005c02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	621a      	str	r2, [r3, #32]
}
 8005c1c:	bf00      	nop
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	40010000 	.word	0x40010000

08005c2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	031b      	lsls	r3, r3, #12
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a10      	ldr	r2, [pc, #64]	; (8005cc8 <TIM_OC4_SetConfig+0x9c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d109      	bne.n	8005ca0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	019b      	lsls	r3, r3, #6
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	621a      	str	r2, [r3, #32]
}
 8005cba:	bf00      	nop
 8005cbc:	371c      	adds	r7, #28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40010000 	.word	0x40010000

08005ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	f023 0201 	bic.w	r2, r3, #1
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f023 030a 	bic.w	r3, r3, #10
 8005d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b087      	sub	sp, #28
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f023 0210 	bic.w	r2, r3, #16
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	031b      	lsls	r3, r3, #12
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	621a      	str	r2, [r3, #32]
}
 8005d7e:	bf00      	nop
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f043 0307 	orr.w	r3, r3, #7
 8005dac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	609a      	str	r2, [r3, #8]
}
 8005db4:	bf00      	nop
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	021a      	lsls	r2, r3, #8
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	609a      	str	r2, [r3, #8]
}
 8005df4:	bf00      	nop
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f003 031f 	and.w	r3, r3, #31
 8005e12:	2201      	movs	r2, #1
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a1a      	ldr	r2, [r3, #32]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	43db      	mvns	r3, r3
 8005e22:	401a      	ands	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a1a      	ldr	r2, [r3, #32]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f003 031f 	and.w	r3, r3, #31
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	fa01 f303 	lsl.w	r3, r1, r3
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	621a      	str	r2, [r3, #32]
}
 8005e3e:	bf00      	nop
 8005e40:	371c      	adds	r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
	...

08005e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e050      	b.n	8005f06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1c      	ldr	r2, [pc, #112]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d018      	beq.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb0:	d013      	beq.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a18      	ldr	r2, [pc, #96]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00e      	beq.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a16      	ldr	r2, [pc, #88]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d009      	beq.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a15      	ldr	r2, [pc, #84]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d004      	beq.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a13      	ldr	r2, [pc, #76]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d10c      	bne.n	8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40000800 	.word	0x40000800
 8005f20:	40000c00 	.word	0x40000c00
 8005f24:	40014000 	.word	0x40014000

08005f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e03f      	b.n	8005fe2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fc f9d4 	bl	8002324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2224      	movs	r2, #36	; 0x24
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f929 	bl	80061ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695a      	ldr	r2, [r3, #20]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b08a      	sub	sp, #40	; 0x28
 8005fee:	af02      	add	r7, sp, #8
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	603b      	str	r3, [r7, #0]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b20      	cmp	r3, #32
 8006008:	d17c      	bne.n	8006104 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <HAL_UART_Transmit+0x2c>
 8006010:	88fb      	ldrh	r3, [r7, #6]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e075      	b.n	8006106 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_UART_Transmit+0x3e>
 8006024:	2302      	movs	r3, #2
 8006026:	e06e      	b.n	8006106 <HAL_UART_Transmit+0x11c>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2221      	movs	r2, #33	; 0x21
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800603e:	f7fc fdbb 	bl	8002bb8 <HAL_GetTick>
 8006042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	88fa      	ldrh	r2, [r7, #6]
 8006048:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	88fa      	ldrh	r2, [r7, #6]
 800604e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006058:	d108      	bne.n	800606c <HAL_UART_Transmit+0x82>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006062:	2300      	movs	r3, #0
 8006064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	61bb      	str	r3, [r7, #24]
 800606a:	e003      	b.n	8006074 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006070:	2300      	movs	r3, #0
 8006072:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800607c:	e02a      	b.n	80060d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2200      	movs	r2, #0
 8006086:	2180      	movs	r1, #128	; 0x80
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f840 	bl	800610e <UART_WaitOnFlagUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e036      	b.n	8006106 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10b      	bne.n	80060b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	3302      	adds	r3, #2
 80060b2:	61bb      	str	r3, [r7, #24]
 80060b4:	e007      	b.n	80060c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	781a      	ldrb	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	3301      	adds	r3, #1
 80060c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1cf      	bne.n	800607e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2200      	movs	r2, #0
 80060e6:	2140      	movs	r1, #64	; 0x40
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 f810 	bl	800610e <UART_WaitOnFlagUntilTimeout>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e006      	b.n	8006106 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	e000      	b.n	8006106 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006104:	2302      	movs	r3, #2
  }
}
 8006106:	4618      	mov	r0, r3
 8006108:	3720      	adds	r7, #32
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b090      	sub	sp, #64	; 0x40
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	603b      	str	r3, [r7, #0]
 800611a:	4613      	mov	r3, r2
 800611c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611e:	e050      	b.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006126:	d04c      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <UART_WaitOnFlagUntilTimeout+0x30>
 800612e:	f7fc fd43 	bl	8002bb8 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800613a:	429a      	cmp	r2, r3
 800613c:	d241      	bcs.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	330c      	adds	r3, #12
 8006144:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006154:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	330c      	adds	r3, #12
 800615c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800615e:	637a      	str	r2, [r7, #52]	; 0x34
 8006160:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e5      	bne.n	800613e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3314      	adds	r3, #20
 8006178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	613b      	str	r3, [r7, #16]
   return(result);
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	63bb      	str	r3, [r7, #56]	; 0x38
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3314      	adds	r3, #20
 8006190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006192:	623a      	str	r2, [r7, #32]
 8006194:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	69f9      	ldr	r1, [r7, #28]
 8006198:	6a3a      	ldr	r2, [r7, #32]
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	61bb      	str	r3, [r7, #24]
   return(result);
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e5      	bne.n	8006172 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e00f      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4013      	ands	r3, r2
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	bf0c      	ite	eq
 80061d2:	2301      	moveq	r3, #1
 80061d4:	2300      	movne	r3, #0
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d09f      	beq.n	8006120 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3740      	adds	r7, #64	; 0x40
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061f0:	b0c0      	sub	sp, #256	; 0x100
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006208:	68d9      	ldr	r1, [r3, #12]
 800620a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	ea40 0301 	orr.w	r3, r0, r1
 8006214:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	431a      	orrs	r2, r3
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	431a      	orrs	r2, r3
 800622c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	4313      	orrs	r3, r2
 8006234:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006244:	f021 010c 	bic.w	r1, r1, #12
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006252:	430b      	orrs	r3, r1
 8006254:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006266:	6999      	ldr	r1, [r3, #24]
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	ea40 0301 	orr.w	r3, r0, r1
 8006272:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	4b8f      	ldr	r3, [pc, #572]	; (80064b8 <UART_SetConfig+0x2cc>)
 800627c:	429a      	cmp	r2, r3
 800627e:	d005      	beq.n	800628c <UART_SetConfig+0xa0>
 8006280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	4b8d      	ldr	r3, [pc, #564]	; (80064bc <UART_SetConfig+0x2d0>)
 8006288:	429a      	cmp	r2, r3
 800628a:	d104      	bne.n	8006296 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800628c:	f7fe fc02 	bl	8004a94 <HAL_RCC_GetPCLK2Freq>
 8006290:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006294:	e003      	b.n	800629e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006296:	f7fe fbe9 	bl	8004a6c <HAL_RCC_GetPCLK1Freq>
 800629a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800629e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a8:	f040 810c 	bne.w	80064c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062b0:	2200      	movs	r2, #0
 80062b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062be:	4622      	mov	r2, r4
 80062c0:	462b      	mov	r3, r5
 80062c2:	1891      	adds	r1, r2, r2
 80062c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80062c6:	415b      	adcs	r3, r3
 80062c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062ce:	4621      	mov	r1, r4
 80062d0:	eb12 0801 	adds.w	r8, r2, r1
 80062d4:	4629      	mov	r1, r5
 80062d6:	eb43 0901 	adc.w	r9, r3, r1
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062ee:	4690      	mov	r8, r2
 80062f0:	4699      	mov	r9, r3
 80062f2:	4623      	mov	r3, r4
 80062f4:	eb18 0303 	adds.w	r3, r8, r3
 80062f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062fc:	462b      	mov	r3, r5
 80062fe:	eb49 0303 	adc.w	r3, r9, r3
 8006302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006312:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006316:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800631a:	460b      	mov	r3, r1
 800631c:	18db      	adds	r3, r3, r3
 800631e:	653b      	str	r3, [r7, #80]	; 0x50
 8006320:	4613      	mov	r3, r2
 8006322:	eb42 0303 	adc.w	r3, r2, r3
 8006326:	657b      	str	r3, [r7, #84]	; 0x54
 8006328:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800632c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006330:	f7fa fc42 	bl	8000bb8 <__aeabi_uldivmod>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4b61      	ldr	r3, [pc, #388]	; (80064c0 <UART_SetConfig+0x2d4>)
 800633a:	fba3 2302 	umull	r2, r3, r3, r2
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	011c      	lsls	r4, r3, #4
 8006342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006346:	2200      	movs	r2, #0
 8006348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800634c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006350:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006354:	4642      	mov	r2, r8
 8006356:	464b      	mov	r3, r9
 8006358:	1891      	adds	r1, r2, r2
 800635a:	64b9      	str	r1, [r7, #72]	; 0x48
 800635c:	415b      	adcs	r3, r3
 800635e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006360:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006364:	4641      	mov	r1, r8
 8006366:	eb12 0a01 	adds.w	sl, r2, r1
 800636a:	4649      	mov	r1, r9
 800636c:	eb43 0b01 	adc.w	fp, r3, r1
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 0300 	mov.w	r3, #0
 8006378:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800637c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006384:	4692      	mov	sl, r2
 8006386:	469b      	mov	fp, r3
 8006388:	4643      	mov	r3, r8
 800638a:	eb1a 0303 	adds.w	r3, sl, r3
 800638e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006392:	464b      	mov	r3, r9
 8006394:	eb4b 0303 	adc.w	r3, fp, r3
 8006398:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800639c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063b0:	460b      	mov	r3, r1
 80063b2:	18db      	adds	r3, r3, r3
 80063b4:	643b      	str	r3, [r7, #64]	; 0x40
 80063b6:	4613      	mov	r3, r2
 80063b8:	eb42 0303 	adc.w	r3, r2, r3
 80063bc:	647b      	str	r3, [r7, #68]	; 0x44
 80063be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063c6:	f7fa fbf7 	bl	8000bb8 <__aeabi_uldivmod>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4611      	mov	r1, r2
 80063d0:	4b3b      	ldr	r3, [pc, #236]	; (80064c0 <UART_SetConfig+0x2d4>)
 80063d2:	fba3 2301 	umull	r2, r3, r3, r1
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	2264      	movs	r2, #100	; 0x64
 80063da:	fb02 f303 	mul.w	r3, r2, r3
 80063de:	1acb      	subs	r3, r1, r3
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80063e6:	4b36      	ldr	r3, [pc, #216]	; (80064c0 <UART_SetConfig+0x2d4>)
 80063e8:	fba3 2302 	umull	r2, r3, r3, r2
 80063ec:	095b      	lsrs	r3, r3, #5
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063f4:	441c      	add	r4, r3
 80063f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006400:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006404:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006408:	4642      	mov	r2, r8
 800640a:	464b      	mov	r3, r9
 800640c:	1891      	adds	r1, r2, r2
 800640e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006410:	415b      	adcs	r3, r3
 8006412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006414:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006418:	4641      	mov	r1, r8
 800641a:	1851      	adds	r1, r2, r1
 800641c:	6339      	str	r1, [r7, #48]	; 0x30
 800641e:	4649      	mov	r1, r9
 8006420:	414b      	adcs	r3, r1
 8006422:	637b      	str	r3, [r7, #52]	; 0x34
 8006424:	f04f 0200 	mov.w	r2, #0
 8006428:	f04f 0300 	mov.w	r3, #0
 800642c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006430:	4659      	mov	r1, fp
 8006432:	00cb      	lsls	r3, r1, #3
 8006434:	4651      	mov	r1, sl
 8006436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800643a:	4651      	mov	r1, sl
 800643c:	00ca      	lsls	r2, r1, #3
 800643e:	4610      	mov	r0, r2
 8006440:	4619      	mov	r1, r3
 8006442:	4603      	mov	r3, r0
 8006444:	4642      	mov	r2, r8
 8006446:	189b      	adds	r3, r3, r2
 8006448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800644c:	464b      	mov	r3, r9
 800644e:	460a      	mov	r2, r1
 8006450:	eb42 0303 	adc.w	r3, r2, r3
 8006454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006464:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006468:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800646c:	460b      	mov	r3, r1
 800646e:	18db      	adds	r3, r3, r3
 8006470:	62bb      	str	r3, [r7, #40]	; 0x28
 8006472:	4613      	mov	r3, r2
 8006474:	eb42 0303 	adc.w	r3, r2, r3
 8006478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800647a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800647e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006482:	f7fa fb99 	bl	8000bb8 <__aeabi_uldivmod>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4b0d      	ldr	r3, [pc, #52]	; (80064c0 <UART_SetConfig+0x2d4>)
 800648c:	fba3 1302 	umull	r1, r3, r3, r2
 8006490:	095b      	lsrs	r3, r3, #5
 8006492:	2164      	movs	r1, #100	; 0x64
 8006494:	fb01 f303 	mul.w	r3, r1, r3
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	3332      	adds	r3, #50	; 0x32
 800649e:	4a08      	ldr	r2, [pc, #32]	; (80064c0 <UART_SetConfig+0x2d4>)
 80064a0:	fba2 2303 	umull	r2, r3, r2, r3
 80064a4:	095b      	lsrs	r3, r3, #5
 80064a6:	f003 0207 	and.w	r2, r3, #7
 80064aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4422      	add	r2, r4
 80064b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064b4:	e106      	b.n	80066c4 <UART_SetConfig+0x4d8>
 80064b6:	bf00      	nop
 80064b8:	40011000 	.word	0x40011000
 80064bc:	40011400 	.word	0x40011400
 80064c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064c8:	2200      	movs	r2, #0
 80064ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064d6:	4642      	mov	r2, r8
 80064d8:	464b      	mov	r3, r9
 80064da:	1891      	adds	r1, r2, r2
 80064dc:	6239      	str	r1, [r7, #32]
 80064de:	415b      	adcs	r3, r3
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
 80064e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064e6:	4641      	mov	r1, r8
 80064e8:	1854      	adds	r4, r2, r1
 80064ea:	4649      	mov	r1, r9
 80064ec:	eb43 0501 	adc.w	r5, r3, r1
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	00eb      	lsls	r3, r5, #3
 80064fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064fe:	00e2      	lsls	r2, r4, #3
 8006500:	4614      	mov	r4, r2
 8006502:	461d      	mov	r5, r3
 8006504:	4643      	mov	r3, r8
 8006506:	18e3      	adds	r3, r4, r3
 8006508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800650c:	464b      	mov	r3, r9
 800650e:	eb45 0303 	adc.w	r3, r5, r3
 8006512:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006522:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006526:	f04f 0200 	mov.w	r2, #0
 800652a:	f04f 0300 	mov.w	r3, #0
 800652e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006532:	4629      	mov	r1, r5
 8006534:	008b      	lsls	r3, r1, #2
 8006536:	4621      	mov	r1, r4
 8006538:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800653c:	4621      	mov	r1, r4
 800653e:	008a      	lsls	r2, r1, #2
 8006540:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006544:	f7fa fb38 	bl	8000bb8 <__aeabi_uldivmod>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4b60      	ldr	r3, [pc, #384]	; (80066d0 <UART_SetConfig+0x4e4>)
 800654e:	fba3 2302 	umull	r2, r3, r3, r2
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	011c      	lsls	r4, r3, #4
 8006556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800655a:	2200      	movs	r2, #0
 800655c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006560:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006564:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006568:	4642      	mov	r2, r8
 800656a:	464b      	mov	r3, r9
 800656c:	1891      	adds	r1, r2, r2
 800656e:	61b9      	str	r1, [r7, #24]
 8006570:	415b      	adcs	r3, r3
 8006572:	61fb      	str	r3, [r7, #28]
 8006574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006578:	4641      	mov	r1, r8
 800657a:	1851      	adds	r1, r2, r1
 800657c:	6139      	str	r1, [r7, #16]
 800657e:	4649      	mov	r1, r9
 8006580:	414b      	adcs	r3, r1
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 0300 	mov.w	r3, #0
 800658c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006590:	4659      	mov	r1, fp
 8006592:	00cb      	lsls	r3, r1, #3
 8006594:	4651      	mov	r1, sl
 8006596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800659a:	4651      	mov	r1, sl
 800659c:	00ca      	lsls	r2, r1, #3
 800659e:	4610      	mov	r0, r2
 80065a0:	4619      	mov	r1, r3
 80065a2:	4603      	mov	r3, r0
 80065a4:	4642      	mov	r2, r8
 80065a6:	189b      	adds	r3, r3, r2
 80065a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065ac:	464b      	mov	r3, r9
 80065ae:	460a      	mov	r2, r1
 80065b0:	eb42 0303 	adc.w	r3, r2, r3
 80065b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80065c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065d0:	4649      	mov	r1, r9
 80065d2:	008b      	lsls	r3, r1, #2
 80065d4:	4641      	mov	r1, r8
 80065d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065da:	4641      	mov	r1, r8
 80065dc:	008a      	lsls	r2, r1, #2
 80065de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80065e2:	f7fa fae9 	bl	8000bb8 <__aeabi_uldivmod>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4611      	mov	r1, r2
 80065ec:	4b38      	ldr	r3, [pc, #224]	; (80066d0 <UART_SetConfig+0x4e4>)
 80065ee:	fba3 2301 	umull	r2, r3, r3, r1
 80065f2:	095b      	lsrs	r3, r3, #5
 80065f4:	2264      	movs	r2, #100	; 0x64
 80065f6:	fb02 f303 	mul.w	r3, r2, r3
 80065fa:	1acb      	subs	r3, r1, r3
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	3332      	adds	r3, #50	; 0x32
 8006600:	4a33      	ldr	r2, [pc, #204]	; (80066d0 <UART_SetConfig+0x4e4>)
 8006602:	fba2 2303 	umull	r2, r3, r2, r3
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800660c:	441c      	add	r4, r3
 800660e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006612:	2200      	movs	r2, #0
 8006614:	673b      	str	r3, [r7, #112]	; 0x70
 8006616:	677a      	str	r2, [r7, #116]	; 0x74
 8006618:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800661c:	4642      	mov	r2, r8
 800661e:	464b      	mov	r3, r9
 8006620:	1891      	adds	r1, r2, r2
 8006622:	60b9      	str	r1, [r7, #8]
 8006624:	415b      	adcs	r3, r3
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800662c:	4641      	mov	r1, r8
 800662e:	1851      	adds	r1, r2, r1
 8006630:	6039      	str	r1, [r7, #0]
 8006632:	4649      	mov	r1, r9
 8006634:	414b      	adcs	r3, r1
 8006636:	607b      	str	r3, [r7, #4]
 8006638:	f04f 0200 	mov.w	r2, #0
 800663c:	f04f 0300 	mov.w	r3, #0
 8006640:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006644:	4659      	mov	r1, fp
 8006646:	00cb      	lsls	r3, r1, #3
 8006648:	4651      	mov	r1, sl
 800664a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800664e:	4651      	mov	r1, sl
 8006650:	00ca      	lsls	r2, r1, #3
 8006652:	4610      	mov	r0, r2
 8006654:	4619      	mov	r1, r3
 8006656:	4603      	mov	r3, r0
 8006658:	4642      	mov	r2, r8
 800665a:	189b      	adds	r3, r3, r2
 800665c:	66bb      	str	r3, [r7, #104]	; 0x68
 800665e:	464b      	mov	r3, r9
 8006660:	460a      	mov	r2, r1
 8006662:	eb42 0303 	adc.w	r3, r2, r3
 8006666:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	663b      	str	r3, [r7, #96]	; 0x60
 8006672:	667a      	str	r2, [r7, #100]	; 0x64
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006680:	4649      	mov	r1, r9
 8006682:	008b      	lsls	r3, r1, #2
 8006684:	4641      	mov	r1, r8
 8006686:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800668a:	4641      	mov	r1, r8
 800668c:	008a      	lsls	r2, r1, #2
 800668e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006692:	f7fa fa91 	bl	8000bb8 <__aeabi_uldivmod>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <UART_SetConfig+0x4e4>)
 800669c:	fba3 1302 	umull	r1, r3, r3, r2
 80066a0:	095b      	lsrs	r3, r3, #5
 80066a2:	2164      	movs	r1, #100	; 0x64
 80066a4:	fb01 f303 	mul.w	r3, r1, r3
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	3332      	adds	r3, #50	; 0x32
 80066ae:	4a08      	ldr	r2, [pc, #32]	; (80066d0 <UART_SetConfig+0x4e4>)
 80066b0:	fba2 2303 	umull	r2, r3, r2, r3
 80066b4:	095b      	lsrs	r3, r3, #5
 80066b6:	f003 020f 	and.w	r2, r3, #15
 80066ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4422      	add	r2, r4
 80066c2:	609a      	str	r2, [r3, #8]
}
 80066c4:	bf00      	nop
 80066c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066ca:	46bd      	mov	sp, r7
 80066cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066d0:	51eb851f 	.word	0x51eb851f

080066d4 <__cvt>:
 80066d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066d8:	ec55 4b10 	vmov	r4, r5, d0
 80066dc:	2d00      	cmp	r5, #0
 80066de:	460e      	mov	r6, r1
 80066e0:	4619      	mov	r1, r3
 80066e2:	462b      	mov	r3, r5
 80066e4:	bfbb      	ittet	lt
 80066e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80066ea:	461d      	movlt	r5, r3
 80066ec:	2300      	movge	r3, #0
 80066ee:	232d      	movlt	r3, #45	; 0x2d
 80066f0:	700b      	strb	r3, [r1, #0]
 80066f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80066f8:	4691      	mov	r9, r2
 80066fa:	f023 0820 	bic.w	r8, r3, #32
 80066fe:	bfbc      	itt	lt
 8006700:	4622      	movlt	r2, r4
 8006702:	4614      	movlt	r4, r2
 8006704:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006708:	d005      	beq.n	8006716 <__cvt+0x42>
 800670a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800670e:	d100      	bne.n	8006712 <__cvt+0x3e>
 8006710:	3601      	adds	r6, #1
 8006712:	2102      	movs	r1, #2
 8006714:	e000      	b.n	8006718 <__cvt+0x44>
 8006716:	2103      	movs	r1, #3
 8006718:	ab03      	add	r3, sp, #12
 800671a:	9301      	str	r3, [sp, #4]
 800671c:	ab02      	add	r3, sp, #8
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	ec45 4b10 	vmov	d0, r4, r5
 8006724:	4653      	mov	r3, sl
 8006726:	4632      	mov	r2, r6
 8006728:	f000 fe92 	bl	8007450 <_dtoa_r>
 800672c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006730:	4607      	mov	r7, r0
 8006732:	d102      	bne.n	800673a <__cvt+0x66>
 8006734:	f019 0f01 	tst.w	r9, #1
 8006738:	d022      	beq.n	8006780 <__cvt+0xac>
 800673a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800673e:	eb07 0906 	add.w	r9, r7, r6
 8006742:	d110      	bne.n	8006766 <__cvt+0x92>
 8006744:	783b      	ldrb	r3, [r7, #0]
 8006746:	2b30      	cmp	r3, #48	; 0x30
 8006748:	d10a      	bne.n	8006760 <__cvt+0x8c>
 800674a:	2200      	movs	r2, #0
 800674c:	2300      	movs	r3, #0
 800674e:	4620      	mov	r0, r4
 8006750:	4629      	mov	r1, r5
 8006752:	f7fa f9c1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006756:	b918      	cbnz	r0, 8006760 <__cvt+0x8c>
 8006758:	f1c6 0601 	rsb	r6, r6, #1
 800675c:	f8ca 6000 	str.w	r6, [sl]
 8006760:	f8da 3000 	ldr.w	r3, [sl]
 8006764:	4499      	add	r9, r3
 8006766:	2200      	movs	r2, #0
 8006768:	2300      	movs	r3, #0
 800676a:	4620      	mov	r0, r4
 800676c:	4629      	mov	r1, r5
 800676e:	f7fa f9b3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006772:	b108      	cbz	r0, 8006778 <__cvt+0xa4>
 8006774:	f8cd 900c 	str.w	r9, [sp, #12]
 8006778:	2230      	movs	r2, #48	; 0x30
 800677a:	9b03      	ldr	r3, [sp, #12]
 800677c:	454b      	cmp	r3, r9
 800677e:	d307      	bcc.n	8006790 <__cvt+0xbc>
 8006780:	9b03      	ldr	r3, [sp, #12]
 8006782:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006784:	1bdb      	subs	r3, r3, r7
 8006786:	4638      	mov	r0, r7
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	b004      	add	sp, #16
 800678c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006790:	1c59      	adds	r1, r3, #1
 8006792:	9103      	str	r1, [sp, #12]
 8006794:	701a      	strb	r2, [r3, #0]
 8006796:	e7f0      	b.n	800677a <__cvt+0xa6>

08006798 <__exponent>:
 8006798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800679a:	4603      	mov	r3, r0
 800679c:	2900      	cmp	r1, #0
 800679e:	bfb8      	it	lt
 80067a0:	4249      	neglt	r1, r1
 80067a2:	f803 2b02 	strb.w	r2, [r3], #2
 80067a6:	bfb4      	ite	lt
 80067a8:	222d      	movlt	r2, #45	; 0x2d
 80067aa:	222b      	movge	r2, #43	; 0x2b
 80067ac:	2909      	cmp	r1, #9
 80067ae:	7042      	strb	r2, [r0, #1]
 80067b0:	dd2a      	ble.n	8006808 <__exponent+0x70>
 80067b2:	f10d 0207 	add.w	r2, sp, #7
 80067b6:	4617      	mov	r7, r2
 80067b8:	260a      	movs	r6, #10
 80067ba:	4694      	mov	ip, r2
 80067bc:	fb91 f5f6 	sdiv	r5, r1, r6
 80067c0:	fb06 1415 	mls	r4, r6, r5, r1
 80067c4:	3430      	adds	r4, #48	; 0x30
 80067c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80067ca:	460c      	mov	r4, r1
 80067cc:	2c63      	cmp	r4, #99	; 0x63
 80067ce:	f102 32ff 	add.w	r2, r2, #4294967295
 80067d2:	4629      	mov	r1, r5
 80067d4:	dcf1      	bgt.n	80067ba <__exponent+0x22>
 80067d6:	3130      	adds	r1, #48	; 0x30
 80067d8:	f1ac 0402 	sub.w	r4, ip, #2
 80067dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80067e0:	1c41      	adds	r1, r0, #1
 80067e2:	4622      	mov	r2, r4
 80067e4:	42ba      	cmp	r2, r7
 80067e6:	d30a      	bcc.n	80067fe <__exponent+0x66>
 80067e8:	f10d 0209 	add.w	r2, sp, #9
 80067ec:	eba2 020c 	sub.w	r2, r2, ip
 80067f0:	42bc      	cmp	r4, r7
 80067f2:	bf88      	it	hi
 80067f4:	2200      	movhi	r2, #0
 80067f6:	4413      	add	r3, r2
 80067f8:	1a18      	subs	r0, r3, r0
 80067fa:	b003      	add	sp, #12
 80067fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006802:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006806:	e7ed      	b.n	80067e4 <__exponent+0x4c>
 8006808:	2330      	movs	r3, #48	; 0x30
 800680a:	3130      	adds	r1, #48	; 0x30
 800680c:	7083      	strb	r3, [r0, #2]
 800680e:	70c1      	strb	r1, [r0, #3]
 8006810:	1d03      	adds	r3, r0, #4
 8006812:	e7f1      	b.n	80067f8 <__exponent+0x60>

08006814 <_printf_float>:
 8006814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006818:	ed2d 8b02 	vpush	{d8}
 800681c:	b08d      	sub	sp, #52	; 0x34
 800681e:	460c      	mov	r4, r1
 8006820:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006824:	4616      	mov	r6, r2
 8006826:	461f      	mov	r7, r3
 8006828:	4605      	mov	r5, r0
 800682a:	f000 fd01 	bl	8007230 <_localeconv_r>
 800682e:	f8d0 a000 	ldr.w	sl, [r0]
 8006832:	4650      	mov	r0, sl
 8006834:	f7f9 fd24 	bl	8000280 <strlen>
 8006838:	2300      	movs	r3, #0
 800683a:	930a      	str	r3, [sp, #40]	; 0x28
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	9305      	str	r3, [sp, #20]
 8006840:	f8d8 3000 	ldr.w	r3, [r8]
 8006844:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006848:	3307      	adds	r3, #7
 800684a:	f023 0307 	bic.w	r3, r3, #7
 800684e:	f103 0208 	add.w	r2, r3, #8
 8006852:	f8c8 2000 	str.w	r2, [r8]
 8006856:	e9d3 8900 	ldrd	r8, r9, [r3]
 800685a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800685e:	9307      	str	r3, [sp, #28]
 8006860:	f8cd 8018 	str.w	r8, [sp, #24]
 8006864:	ee08 0a10 	vmov	s16, r0
 8006868:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800686c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006870:	4b9e      	ldr	r3, [pc, #632]	; (8006aec <_printf_float+0x2d8>)
 8006872:	f04f 32ff 	mov.w	r2, #4294967295
 8006876:	f7fa f961 	bl	8000b3c <__aeabi_dcmpun>
 800687a:	bb88      	cbnz	r0, 80068e0 <_printf_float+0xcc>
 800687c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006880:	4b9a      	ldr	r3, [pc, #616]	; (8006aec <_printf_float+0x2d8>)
 8006882:	f04f 32ff 	mov.w	r2, #4294967295
 8006886:	f7fa f93b 	bl	8000b00 <__aeabi_dcmple>
 800688a:	bb48      	cbnz	r0, 80068e0 <_printf_float+0xcc>
 800688c:	2200      	movs	r2, #0
 800688e:	2300      	movs	r3, #0
 8006890:	4640      	mov	r0, r8
 8006892:	4649      	mov	r1, r9
 8006894:	f7fa f92a 	bl	8000aec <__aeabi_dcmplt>
 8006898:	b110      	cbz	r0, 80068a0 <_printf_float+0x8c>
 800689a:	232d      	movs	r3, #45	; 0x2d
 800689c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068a0:	4a93      	ldr	r2, [pc, #588]	; (8006af0 <_printf_float+0x2dc>)
 80068a2:	4b94      	ldr	r3, [pc, #592]	; (8006af4 <_printf_float+0x2e0>)
 80068a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80068a8:	bf94      	ite	ls
 80068aa:	4690      	movls	r8, r2
 80068ac:	4698      	movhi	r8, r3
 80068ae:	2303      	movs	r3, #3
 80068b0:	6123      	str	r3, [r4, #16]
 80068b2:	9b05      	ldr	r3, [sp, #20]
 80068b4:	f023 0304 	bic.w	r3, r3, #4
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	f04f 0900 	mov.w	r9, #0
 80068be:	9700      	str	r7, [sp, #0]
 80068c0:	4633      	mov	r3, r6
 80068c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80068c4:	4621      	mov	r1, r4
 80068c6:	4628      	mov	r0, r5
 80068c8:	f000 f9da 	bl	8006c80 <_printf_common>
 80068cc:	3001      	adds	r0, #1
 80068ce:	f040 8090 	bne.w	80069f2 <_printf_float+0x1de>
 80068d2:	f04f 30ff 	mov.w	r0, #4294967295
 80068d6:	b00d      	add	sp, #52	; 0x34
 80068d8:	ecbd 8b02 	vpop	{d8}
 80068dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e0:	4642      	mov	r2, r8
 80068e2:	464b      	mov	r3, r9
 80068e4:	4640      	mov	r0, r8
 80068e6:	4649      	mov	r1, r9
 80068e8:	f7fa f928 	bl	8000b3c <__aeabi_dcmpun>
 80068ec:	b140      	cbz	r0, 8006900 <_printf_float+0xec>
 80068ee:	464b      	mov	r3, r9
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	bfbc      	itt	lt
 80068f4:	232d      	movlt	r3, #45	; 0x2d
 80068f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80068fa:	4a7f      	ldr	r2, [pc, #508]	; (8006af8 <_printf_float+0x2e4>)
 80068fc:	4b7f      	ldr	r3, [pc, #508]	; (8006afc <_printf_float+0x2e8>)
 80068fe:	e7d1      	b.n	80068a4 <_printf_float+0x90>
 8006900:	6863      	ldr	r3, [r4, #4]
 8006902:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006906:	9206      	str	r2, [sp, #24]
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	d13f      	bne.n	800698c <_printf_float+0x178>
 800690c:	2306      	movs	r3, #6
 800690e:	6063      	str	r3, [r4, #4]
 8006910:	9b05      	ldr	r3, [sp, #20]
 8006912:	6861      	ldr	r1, [r4, #4]
 8006914:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006918:	2300      	movs	r3, #0
 800691a:	9303      	str	r3, [sp, #12]
 800691c:	ab0a      	add	r3, sp, #40	; 0x28
 800691e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006922:	ab09      	add	r3, sp, #36	; 0x24
 8006924:	ec49 8b10 	vmov	d0, r8, r9
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	6022      	str	r2, [r4, #0]
 800692c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006930:	4628      	mov	r0, r5
 8006932:	f7ff fecf 	bl	80066d4 <__cvt>
 8006936:	9b06      	ldr	r3, [sp, #24]
 8006938:	9909      	ldr	r1, [sp, #36]	; 0x24
 800693a:	2b47      	cmp	r3, #71	; 0x47
 800693c:	4680      	mov	r8, r0
 800693e:	d108      	bne.n	8006952 <_printf_float+0x13e>
 8006940:	1cc8      	adds	r0, r1, #3
 8006942:	db02      	blt.n	800694a <_printf_float+0x136>
 8006944:	6863      	ldr	r3, [r4, #4]
 8006946:	4299      	cmp	r1, r3
 8006948:	dd41      	ble.n	80069ce <_printf_float+0x1ba>
 800694a:	f1ab 0302 	sub.w	r3, fp, #2
 800694e:	fa5f fb83 	uxtb.w	fp, r3
 8006952:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006956:	d820      	bhi.n	800699a <_printf_float+0x186>
 8006958:	3901      	subs	r1, #1
 800695a:	465a      	mov	r2, fp
 800695c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006960:	9109      	str	r1, [sp, #36]	; 0x24
 8006962:	f7ff ff19 	bl	8006798 <__exponent>
 8006966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006968:	1813      	adds	r3, r2, r0
 800696a:	2a01      	cmp	r2, #1
 800696c:	4681      	mov	r9, r0
 800696e:	6123      	str	r3, [r4, #16]
 8006970:	dc02      	bgt.n	8006978 <_printf_float+0x164>
 8006972:	6822      	ldr	r2, [r4, #0]
 8006974:	07d2      	lsls	r2, r2, #31
 8006976:	d501      	bpl.n	800697c <_printf_float+0x168>
 8006978:	3301      	adds	r3, #1
 800697a:	6123      	str	r3, [r4, #16]
 800697c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006980:	2b00      	cmp	r3, #0
 8006982:	d09c      	beq.n	80068be <_printf_float+0xaa>
 8006984:	232d      	movs	r3, #45	; 0x2d
 8006986:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800698a:	e798      	b.n	80068be <_printf_float+0xaa>
 800698c:	9a06      	ldr	r2, [sp, #24]
 800698e:	2a47      	cmp	r2, #71	; 0x47
 8006990:	d1be      	bne.n	8006910 <_printf_float+0xfc>
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1bc      	bne.n	8006910 <_printf_float+0xfc>
 8006996:	2301      	movs	r3, #1
 8006998:	e7b9      	b.n	800690e <_printf_float+0xfa>
 800699a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800699e:	d118      	bne.n	80069d2 <_printf_float+0x1be>
 80069a0:	2900      	cmp	r1, #0
 80069a2:	6863      	ldr	r3, [r4, #4]
 80069a4:	dd0b      	ble.n	80069be <_printf_float+0x1aa>
 80069a6:	6121      	str	r1, [r4, #16]
 80069a8:	b913      	cbnz	r3, 80069b0 <_printf_float+0x19c>
 80069aa:	6822      	ldr	r2, [r4, #0]
 80069ac:	07d0      	lsls	r0, r2, #31
 80069ae:	d502      	bpl.n	80069b6 <_printf_float+0x1a2>
 80069b0:	3301      	adds	r3, #1
 80069b2:	440b      	add	r3, r1
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80069b8:	f04f 0900 	mov.w	r9, #0
 80069bc:	e7de      	b.n	800697c <_printf_float+0x168>
 80069be:	b913      	cbnz	r3, 80069c6 <_printf_float+0x1b2>
 80069c0:	6822      	ldr	r2, [r4, #0]
 80069c2:	07d2      	lsls	r2, r2, #31
 80069c4:	d501      	bpl.n	80069ca <_printf_float+0x1b6>
 80069c6:	3302      	adds	r3, #2
 80069c8:	e7f4      	b.n	80069b4 <_printf_float+0x1a0>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e7f2      	b.n	80069b4 <_printf_float+0x1a0>
 80069ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80069d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d4:	4299      	cmp	r1, r3
 80069d6:	db05      	blt.n	80069e4 <_printf_float+0x1d0>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	6121      	str	r1, [r4, #16]
 80069dc:	07d8      	lsls	r0, r3, #31
 80069de:	d5ea      	bpl.n	80069b6 <_printf_float+0x1a2>
 80069e0:	1c4b      	adds	r3, r1, #1
 80069e2:	e7e7      	b.n	80069b4 <_printf_float+0x1a0>
 80069e4:	2900      	cmp	r1, #0
 80069e6:	bfd4      	ite	le
 80069e8:	f1c1 0202 	rsble	r2, r1, #2
 80069ec:	2201      	movgt	r2, #1
 80069ee:	4413      	add	r3, r2
 80069f0:	e7e0      	b.n	80069b4 <_printf_float+0x1a0>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	055a      	lsls	r2, r3, #21
 80069f6:	d407      	bmi.n	8006a08 <_printf_float+0x1f4>
 80069f8:	6923      	ldr	r3, [r4, #16]
 80069fa:	4642      	mov	r2, r8
 80069fc:	4631      	mov	r1, r6
 80069fe:	4628      	mov	r0, r5
 8006a00:	47b8      	blx	r7
 8006a02:	3001      	adds	r0, #1
 8006a04:	d12c      	bne.n	8006a60 <_printf_float+0x24c>
 8006a06:	e764      	b.n	80068d2 <_printf_float+0xbe>
 8006a08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a0c:	f240 80e0 	bls.w	8006bd0 <_printf_float+0x3bc>
 8006a10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a14:	2200      	movs	r2, #0
 8006a16:	2300      	movs	r3, #0
 8006a18:	f7fa f85e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d034      	beq.n	8006a8a <_printf_float+0x276>
 8006a20:	4a37      	ldr	r2, [pc, #220]	; (8006b00 <_printf_float+0x2ec>)
 8006a22:	2301      	movs	r3, #1
 8006a24:	4631      	mov	r1, r6
 8006a26:	4628      	mov	r0, r5
 8006a28:	47b8      	blx	r7
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	f43f af51 	beq.w	80068d2 <_printf_float+0xbe>
 8006a30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a34:	429a      	cmp	r2, r3
 8006a36:	db02      	blt.n	8006a3e <_printf_float+0x22a>
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	07d8      	lsls	r0, r3, #31
 8006a3c:	d510      	bpl.n	8006a60 <_printf_float+0x24c>
 8006a3e:	ee18 3a10 	vmov	r3, s16
 8006a42:	4652      	mov	r2, sl
 8006a44:	4631      	mov	r1, r6
 8006a46:	4628      	mov	r0, r5
 8006a48:	47b8      	blx	r7
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	f43f af41 	beq.w	80068d2 <_printf_float+0xbe>
 8006a50:	f04f 0800 	mov.w	r8, #0
 8006a54:	f104 091a 	add.w	r9, r4, #26
 8006a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	4543      	cmp	r3, r8
 8006a5e:	dc09      	bgt.n	8006a74 <_printf_float+0x260>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	079b      	lsls	r3, r3, #30
 8006a64:	f100 8107 	bmi.w	8006c76 <_printf_float+0x462>
 8006a68:	68e0      	ldr	r0, [r4, #12]
 8006a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a6c:	4298      	cmp	r0, r3
 8006a6e:	bfb8      	it	lt
 8006a70:	4618      	movlt	r0, r3
 8006a72:	e730      	b.n	80068d6 <_printf_float+0xc2>
 8006a74:	2301      	movs	r3, #1
 8006a76:	464a      	mov	r2, r9
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	47b8      	blx	r7
 8006a7e:	3001      	adds	r0, #1
 8006a80:	f43f af27 	beq.w	80068d2 <_printf_float+0xbe>
 8006a84:	f108 0801 	add.w	r8, r8, #1
 8006a88:	e7e6      	b.n	8006a58 <_printf_float+0x244>
 8006a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	dc39      	bgt.n	8006b04 <_printf_float+0x2f0>
 8006a90:	4a1b      	ldr	r2, [pc, #108]	; (8006b00 <_printf_float+0x2ec>)
 8006a92:	2301      	movs	r3, #1
 8006a94:	4631      	mov	r1, r6
 8006a96:	4628      	mov	r0, r5
 8006a98:	47b8      	blx	r7
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	f43f af19 	beq.w	80068d2 <_printf_float+0xbe>
 8006aa0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	d102      	bne.n	8006aae <_printf_float+0x29a>
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	07d9      	lsls	r1, r3, #31
 8006aac:	d5d8      	bpl.n	8006a60 <_printf_float+0x24c>
 8006aae:	ee18 3a10 	vmov	r3, s16
 8006ab2:	4652      	mov	r2, sl
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	47b8      	blx	r7
 8006aba:	3001      	adds	r0, #1
 8006abc:	f43f af09 	beq.w	80068d2 <_printf_float+0xbe>
 8006ac0:	f04f 0900 	mov.w	r9, #0
 8006ac4:	f104 0a1a 	add.w	sl, r4, #26
 8006ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aca:	425b      	negs	r3, r3
 8006acc:	454b      	cmp	r3, r9
 8006ace:	dc01      	bgt.n	8006ad4 <_printf_float+0x2c0>
 8006ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad2:	e792      	b.n	80069fa <_printf_float+0x1e6>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	4652      	mov	r2, sl
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4628      	mov	r0, r5
 8006adc:	47b8      	blx	r7
 8006ade:	3001      	adds	r0, #1
 8006ae0:	f43f aef7 	beq.w	80068d2 <_printf_float+0xbe>
 8006ae4:	f109 0901 	add.w	r9, r9, #1
 8006ae8:	e7ee      	b.n	8006ac8 <_printf_float+0x2b4>
 8006aea:	bf00      	nop
 8006aec:	7fefffff 	.word	0x7fefffff
 8006af0:	0800b484 	.word	0x0800b484
 8006af4:	0800b488 	.word	0x0800b488
 8006af8:	0800b48c 	.word	0x0800b48c
 8006afc:	0800b490 	.word	0x0800b490
 8006b00:	0800b494 	.word	0x0800b494
 8006b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	bfa8      	it	ge
 8006b0c:	461a      	movge	r2, r3
 8006b0e:	2a00      	cmp	r2, #0
 8006b10:	4691      	mov	r9, r2
 8006b12:	dc37      	bgt.n	8006b84 <_printf_float+0x370>
 8006b14:	f04f 0b00 	mov.w	fp, #0
 8006b18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b1c:	f104 021a 	add.w	r2, r4, #26
 8006b20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b22:	9305      	str	r3, [sp, #20]
 8006b24:	eba3 0309 	sub.w	r3, r3, r9
 8006b28:	455b      	cmp	r3, fp
 8006b2a:	dc33      	bgt.n	8006b94 <_printf_float+0x380>
 8006b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b30:	429a      	cmp	r2, r3
 8006b32:	db3b      	blt.n	8006bac <_printf_float+0x398>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	07da      	lsls	r2, r3, #31
 8006b38:	d438      	bmi.n	8006bac <_printf_float+0x398>
 8006b3a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006b3e:	eba2 0903 	sub.w	r9, r2, r3
 8006b42:	9b05      	ldr	r3, [sp, #20]
 8006b44:	1ad2      	subs	r2, r2, r3
 8006b46:	4591      	cmp	r9, r2
 8006b48:	bfa8      	it	ge
 8006b4a:	4691      	movge	r9, r2
 8006b4c:	f1b9 0f00 	cmp.w	r9, #0
 8006b50:	dc35      	bgt.n	8006bbe <_printf_float+0x3aa>
 8006b52:	f04f 0800 	mov.w	r8, #0
 8006b56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b5a:	f104 0a1a 	add.w	sl, r4, #26
 8006b5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b62:	1a9b      	subs	r3, r3, r2
 8006b64:	eba3 0309 	sub.w	r3, r3, r9
 8006b68:	4543      	cmp	r3, r8
 8006b6a:	f77f af79 	ble.w	8006a60 <_printf_float+0x24c>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	4652      	mov	r2, sl
 8006b72:	4631      	mov	r1, r6
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b8      	blx	r7
 8006b78:	3001      	adds	r0, #1
 8006b7a:	f43f aeaa 	beq.w	80068d2 <_printf_float+0xbe>
 8006b7e:	f108 0801 	add.w	r8, r8, #1
 8006b82:	e7ec      	b.n	8006b5e <_printf_float+0x34a>
 8006b84:	4613      	mov	r3, r2
 8006b86:	4631      	mov	r1, r6
 8006b88:	4642      	mov	r2, r8
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	47b8      	blx	r7
 8006b8e:	3001      	adds	r0, #1
 8006b90:	d1c0      	bne.n	8006b14 <_printf_float+0x300>
 8006b92:	e69e      	b.n	80068d2 <_printf_float+0xbe>
 8006b94:	2301      	movs	r3, #1
 8006b96:	4631      	mov	r1, r6
 8006b98:	4628      	mov	r0, r5
 8006b9a:	9205      	str	r2, [sp, #20]
 8006b9c:	47b8      	blx	r7
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	f43f ae97 	beq.w	80068d2 <_printf_float+0xbe>
 8006ba4:	9a05      	ldr	r2, [sp, #20]
 8006ba6:	f10b 0b01 	add.w	fp, fp, #1
 8006baa:	e7b9      	b.n	8006b20 <_printf_float+0x30c>
 8006bac:	ee18 3a10 	vmov	r3, s16
 8006bb0:	4652      	mov	r2, sl
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	47b8      	blx	r7
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d1be      	bne.n	8006b3a <_printf_float+0x326>
 8006bbc:	e689      	b.n	80068d2 <_printf_float+0xbe>
 8006bbe:	9a05      	ldr	r2, [sp, #20]
 8006bc0:	464b      	mov	r3, r9
 8006bc2:	4442      	add	r2, r8
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	47b8      	blx	r7
 8006bca:	3001      	adds	r0, #1
 8006bcc:	d1c1      	bne.n	8006b52 <_printf_float+0x33e>
 8006bce:	e680      	b.n	80068d2 <_printf_float+0xbe>
 8006bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bd2:	2a01      	cmp	r2, #1
 8006bd4:	dc01      	bgt.n	8006bda <_printf_float+0x3c6>
 8006bd6:	07db      	lsls	r3, r3, #31
 8006bd8:	d53a      	bpl.n	8006c50 <_printf_float+0x43c>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	4642      	mov	r2, r8
 8006bde:	4631      	mov	r1, r6
 8006be0:	4628      	mov	r0, r5
 8006be2:	47b8      	blx	r7
 8006be4:	3001      	adds	r0, #1
 8006be6:	f43f ae74 	beq.w	80068d2 <_printf_float+0xbe>
 8006bea:	ee18 3a10 	vmov	r3, s16
 8006bee:	4652      	mov	r2, sl
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	47b8      	blx	r7
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	f43f ae6b 	beq.w	80068d2 <_printf_float+0xbe>
 8006bfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c00:	2200      	movs	r2, #0
 8006c02:	2300      	movs	r3, #0
 8006c04:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006c08:	f7f9 ff66 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c0c:	b9d8      	cbnz	r0, 8006c46 <_printf_float+0x432>
 8006c0e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006c12:	f108 0201 	add.w	r2, r8, #1
 8006c16:	4631      	mov	r1, r6
 8006c18:	4628      	mov	r0, r5
 8006c1a:	47b8      	blx	r7
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	d10e      	bne.n	8006c3e <_printf_float+0x42a>
 8006c20:	e657      	b.n	80068d2 <_printf_float+0xbe>
 8006c22:	2301      	movs	r3, #1
 8006c24:	4652      	mov	r2, sl
 8006c26:	4631      	mov	r1, r6
 8006c28:	4628      	mov	r0, r5
 8006c2a:	47b8      	blx	r7
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	f43f ae50 	beq.w	80068d2 <_printf_float+0xbe>
 8006c32:	f108 0801 	add.w	r8, r8, #1
 8006c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	4543      	cmp	r3, r8
 8006c3c:	dcf1      	bgt.n	8006c22 <_printf_float+0x40e>
 8006c3e:	464b      	mov	r3, r9
 8006c40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c44:	e6da      	b.n	80069fc <_printf_float+0x1e8>
 8006c46:	f04f 0800 	mov.w	r8, #0
 8006c4a:	f104 0a1a 	add.w	sl, r4, #26
 8006c4e:	e7f2      	b.n	8006c36 <_printf_float+0x422>
 8006c50:	2301      	movs	r3, #1
 8006c52:	4642      	mov	r2, r8
 8006c54:	e7df      	b.n	8006c16 <_printf_float+0x402>
 8006c56:	2301      	movs	r3, #1
 8006c58:	464a      	mov	r2, r9
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b8      	blx	r7
 8006c60:	3001      	adds	r0, #1
 8006c62:	f43f ae36 	beq.w	80068d2 <_printf_float+0xbe>
 8006c66:	f108 0801 	add.w	r8, r8, #1
 8006c6a:	68e3      	ldr	r3, [r4, #12]
 8006c6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c6e:	1a5b      	subs	r3, r3, r1
 8006c70:	4543      	cmp	r3, r8
 8006c72:	dcf0      	bgt.n	8006c56 <_printf_float+0x442>
 8006c74:	e6f8      	b.n	8006a68 <_printf_float+0x254>
 8006c76:	f04f 0800 	mov.w	r8, #0
 8006c7a:	f104 0919 	add.w	r9, r4, #25
 8006c7e:	e7f4      	b.n	8006c6a <_printf_float+0x456>

08006c80 <_printf_common>:
 8006c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c84:	4616      	mov	r6, r2
 8006c86:	4699      	mov	r9, r3
 8006c88:	688a      	ldr	r2, [r1, #8]
 8006c8a:	690b      	ldr	r3, [r1, #16]
 8006c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c90:	4293      	cmp	r3, r2
 8006c92:	bfb8      	it	lt
 8006c94:	4613      	movlt	r3, r2
 8006c96:	6033      	str	r3, [r6, #0]
 8006c98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	b10a      	cbz	r2, 8006ca6 <_printf_common+0x26>
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	6033      	str	r3, [r6, #0]
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	0699      	lsls	r1, r3, #26
 8006caa:	bf42      	ittt	mi
 8006cac:	6833      	ldrmi	r3, [r6, #0]
 8006cae:	3302      	addmi	r3, #2
 8006cb0:	6033      	strmi	r3, [r6, #0]
 8006cb2:	6825      	ldr	r5, [r4, #0]
 8006cb4:	f015 0506 	ands.w	r5, r5, #6
 8006cb8:	d106      	bne.n	8006cc8 <_printf_common+0x48>
 8006cba:	f104 0a19 	add.w	sl, r4, #25
 8006cbe:	68e3      	ldr	r3, [r4, #12]
 8006cc0:	6832      	ldr	r2, [r6, #0]
 8006cc2:	1a9b      	subs	r3, r3, r2
 8006cc4:	42ab      	cmp	r3, r5
 8006cc6:	dc26      	bgt.n	8006d16 <_printf_common+0x96>
 8006cc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ccc:	1e13      	subs	r3, r2, #0
 8006cce:	6822      	ldr	r2, [r4, #0]
 8006cd0:	bf18      	it	ne
 8006cd2:	2301      	movne	r3, #1
 8006cd4:	0692      	lsls	r2, r2, #26
 8006cd6:	d42b      	bmi.n	8006d30 <_printf_common+0xb0>
 8006cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cdc:	4649      	mov	r1, r9
 8006cde:	4638      	mov	r0, r7
 8006ce0:	47c0      	blx	r8
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	d01e      	beq.n	8006d24 <_printf_common+0xa4>
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	6922      	ldr	r2, [r4, #16]
 8006cea:	f003 0306 	and.w	r3, r3, #6
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	bf02      	ittt	eq
 8006cf2:	68e5      	ldreq	r5, [r4, #12]
 8006cf4:	6833      	ldreq	r3, [r6, #0]
 8006cf6:	1aed      	subeq	r5, r5, r3
 8006cf8:	68a3      	ldr	r3, [r4, #8]
 8006cfa:	bf0c      	ite	eq
 8006cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d00:	2500      	movne	r5, #0
 8006d02:	4293      	cmp	r3, r2
 8006d04:	bfc4      	itt	gt
 8006d06:	1a9b      	subgt	r3, r3, r2
 8006d08:	18ed      	addgt	r5, r5, r3
 8006d0a:	2600      	movs	r6, #0
 8006d0c:	341a      	adds	r4, #26
 8006d0e:	42b5      	cmp	r5, r6
 8006d10:	d11a      	bne.n	8006d48 <_printf_common+0xc8>
 8006d12:	2000      	movs	r0, #0
 8006d14:	e008      	b.n	8006d28 <_printf_common+0xa8>
 8006d16:	2301      	movs	r3, #1
 8006d18:	4652      	mov	r2, sl
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	4638      	mov	r0, r7
 8006d1e:	47c0      	blx	r8
 8006d20:	3001      	adds	r0, #1
 8006d22:	d103      	bne.n	8006d2c <_printf_common+0xac>
 8006d24:	f04f 30ff 	mov.w	r0, #4294967295
 8006d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d2c:	3501      	adds	r5, #1
 8006d2e:	e7c6      	b.n	8006cbe <_printf_common+0x3e>
 8006d30:	18e1      	adds	r1, r4, r3
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	2030      	movs	r0, #48	; 0x30
 8006d36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d3a:	4422      	add	r2, r4
 8006d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d44:	3302      	adds	r3, #2
 8006d46:	e7c7      	b.n	8006cd8 <_printf_common+0x58>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	4622      	mov	r2, r4
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	4638      	mov	r0, r7
 8006d50:	47c0      	blx	r8
 8006d52:	3001      	adds	r0, #1
 8006d54:	d0e6      	beq.n	8006d24 <_printf_common+0xa4>
 8006d56:	3601      	adds	r6, #1
 8006d58:	e7d9      	b.n	8006d0e <_printf_common+0x8e>
	...

08006d5c <_printf_i>:
 8006d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d60:	7e0f      	ldrb	r7, [r1, #24]
 8006d62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d64:	2f78      	cmp	r7, #120	; 0x78
 8006d66:	4691      	mov	r9, r2
 8006d68:	4680      	mov	r8, r0
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	469a      	mov	sl, r3
 8006d6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d72:	d807      	bhi.n	8006d84 <_printf_i+0x28>
 8006d74:	2f62      	cmp	r7, #98	; 0x62
 8006d76:	d80a      	bhi.n	8006d8e <_printf_i+0x32>
 8006d78:	2f00      	cmp	r7, #0
 8006d7a:	f000 80d4 	beq.w	8006f26 <_printf_i+0x1ca>
 8006d7e:	2f58      	cmp	r7, #88	; 0x58
 8006d80:	f000 80c0 	beq.w	8006f04 <_printf_i+0x1a8>
 8006d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d8c:	e03a      	b.n	8006e04 <_printf_i+0xa8>
 8006d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d92:	2b15      	cmp	r3, #21
 8006d94:	d8f6      	bhi.n	8006d84 <_printf_i+0x28>
 8006d96:	a101      	add	r1, pc, #4	; (adr r1, 8006d9c <_printf_i+0x40>)
 8006d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d9c:	08006df5 	.word	0x08006df5
 8006da0:	08006e09 	.word	0x08006e09
 8006da4:	08006d85 	.word	0x08006d85
 8006da8:	08006d85 	.word	0x08006d85
 8006dac:	08006d85 	.word	0x08006d85
 8006db0:	08006d85 	.word	0x08006d85
 8006db4:	08006e09 	.word	0x08006e09
 8006db8:	08006d85 	.word	0x08006d85
 8006dbc:	08006d85 	.word	0x08006d85
 8006dc0:	08006d85 	.word	0x08006d85
 8006dc4:	08006d85 	.word	0x08006d85
 8006dc8:	08006f0d 	.word	0x08006f0d
 8006dcc:	08006e35 	.word	0x08006e35
 8006dd0:	08006ec7 	.word	0x08006ec7
 8006dd4:	08006d85 	.word	0x08006d85
 8006dd8:	08006d85 	.word	0x08006d85
 8006ddc:	08006f2f 	.word	0x08006f2f
 8006de0:	08006d85 	.word	0x08006d85
 8006de4:	08006e35 	.word	0x08006e35
 8006de8:	08006d85 	.word	0x08006d85
 8006dec:	08006d85 	.word	0x08006d85
 8006df0:	08006ecf 	.word	0x08006ecf
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	1d1a      	adds	r2, r3, #4
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	602a      	str	r2, [r5, #0]
 8006dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e04:	2301      	movs	r3, #1
 8006e06:	e09f      	b.n	8006f48 <_printf_i+0x1ec>
 8006e08:	6820      	ldr	r0, [r4, #0]
 8006e0a:	682b      	ldr	r3, [r5, #0]
 8006e0c:	0607      	lsls	r7, r0, #24
 8006e0e:	f103 0104 	add.w	r1, r3, #4
 8006e12:	6029      	str	r1, [r5, #0]
 8006e14:	d501      	bpl.n	8006e1a <_printf_i+0xbe>
 8006e16:	681e      	ldr	r6, [r3, #0]
 8006e18:	e003      	b.n	8006e22 <_printf_i+0xc6>
 8006e1a:	0646      	lsls	r6, r0, #25
 8006e1c:	d5fb      	bpl.n	8006e16 <_printf_i+0xba>
 8006e1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e22:	2e00      	cmp	r6, #0
 8006e24:	da03      	bge.n	8006e2e <_printf_i+0xd2>
 8006e26:	232d      	movs	r3, #45	; 0x2d
 8006e28:	4276      	negs	r6, r6
 8006e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e2e:	485a      	ldr	r0, [pc, #360]	; (8006f98 <_printf_i+0x23c>)
 8006e30:	230a      	movs	r3, #10
 8006e32:	e012      	b.n	8006e5a <_printf_i+0xfe>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	6820      	ldr	r0, [r4, #0]
 8006e38:	1d19      	adds	r1, r3, #4
 8006e3a:	6029      	str	r1, [r5, #0]
 8006e3c:	0605      	lsls	r5, r0, #24
 8006e3e:	d501      	bpl.n	8006e44 <_printf_i+0xe8>
 8006e40:	681e      	ldr	r6, [r3, #0]
 8006e42:	e002      	b.n	8006e4a <_printf_i+0xee>
 8006e44:	0641      	lsls	r1, r0, #25
 8006e46:	d5fb      	bpl.n	8006e40 <_printf_i+0xe4>
 8006e48:	881e      	ldrh	r6, [r3, #0]
 8006e4a:	4853      	ldr	r0, [pc, #332]	; (8006f98 <_printf_i+0x23c>)
 8006e4c:	2f6f      	cmp	r7, #111	; 0x6f
 8006e4e:	bf0c      	ite	eq
 8006e50:	2308      	moveq	r3, #8
 8006e52:	230a      	movne	r3, #10
 8006e54:	2100      	movs	r1, #0
 8006e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e5a:	6865      	ldr	r5, [r4, #4]
 8006e5c:	60a5      	str	r5, [r4, #8]
 8006e5e:	2d00      	cmp	r5, #0
 8006e60:	bfa2      	ittt	ge
 8006e62:	6821      	ldrge	r1, [r4, #0]
 8006e64:	f021 0104 	bicge.w	r1, r1, #4
 8006e68:	6021      	strge	r1, [r4, #0]
 8006e6a:	b90e      	cbnz	r6, 8006e70 <_printf_i+0x114>
 8006e6c:	2d00      	cmp	r5, #0
 8006e6e:	d04b      	beq.n	8006f08 <_printf_i+0x1ac>
 8006e70:	4615      	mov	r5, r2
 8006e72:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e76:	fb03 6711 	mls	r7, r3, r1, r6
 8006e7a:	5dc7      	ldrb	r7, [r0, r7]
 8006e7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e80:	4637      	mov	r7, r6
 8006e82:	42bb      	cmp	r3, r7
 8006e84:	460e      	mov	r6, r1
 8006e86:	d9f4      	bls.n	8006e72 <_printf_i+0x116>
 8006e88:	2b08      	cmp	r3, #8
 8006e8a:	d10b      	bne.n	8006ea4 <_printf_i+0x148>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	07de      	lsls	r6, r3, #31
 8006e90:	d508      	bpl.n	8006ea4 <_printf_i+0x148>
 8006e92:	6923      	ldr	r3, [r4, #16]
 8006e94:	6861      	ldr	r1, [r4, #4]
 8006e96:	4299      	cmp	r1, r3
 8006e98:	bfde      	ittt	le
 8006e9a:	2330      	movle	r3, #48	; 0x30
 8006e9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ea0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ea4:	1b52      	subs	r2, r2, r5
 8006ea6:	6122      	str	r2, [r4, #16]
 8006ea8:	f8cd a000 	str.w	sl, [sp]
 8006eac:	464b      	mov	r3, r9
 8006eae:	aa03      	add	r2, sp, #12
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	4640      	mov	r0, r8
 8006eb4:	f7ff fee4 	bl	8006c80 <_printf_common>
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d14a      	bne.n	8006f52 <_printf_i+0x1f6>
 8006ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec0:	b004      	add	sp, #16
 8006ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	f043 0320 	orr.w	r3, r3, #32
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	4833      	ldr	r0, [pc, #204]	; (8006f9c <_printf_i+0x240>)
 8006ed0:	2778      	movs	r7, #120	; 0x78
 8006ed2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	6829      	ldr	r1, [r5, #0]
 8006eda:	061f      	lsls	r7, r3, #24
 8006edc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ee0:	d402      	bmi.n	8006ee8 <_printf_i+0x18c>
 8006ee2:	065f      	lsls	r7, r3, #25
 8006ee4:	bf48      	it	mi
 8006ee6:	b2b6      	uxthmi	r6, r6
 8006ee8:	07df      	lsls	r7, r3, #31
 8006eea:	bf48      	it	mi
 8006eec:	f043 0320 	orrmi.w	r3, r3, #32
 8006ef0:	6029      	str	r1, [r5, #0]
 8006ef2:	bf48      	it	mi
 8006ef4:	6023      	strmi	r3, [r4, #0]
 8006ef6:	b91e      	cbnz	r6, 8006f00 <_printf_i+0x1a4>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	f023 0320 	bic.w	r3, r3, #32
 8006efe:	6023      	str	r3, [r4, #0]
 8006f00:	2310      	movs	r3, #16
 8006f02:	e7a7      	b.n	8006e54 <_printf_i+0xf8>
 8006f04:	4824      	ldr	r0, [pc, #144]	; (8006f98 <_printf_i+0x23c>)
 8006f06:	e7e4      	b.n	8006ed2 <_printf_i+0x176>
 8006f08:	4615      	mov	r5, r2
 8006f0a:	e7bd      	b.n	8006e88 <_printf_i+0x12c>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	6826      	ldr	r6, [r4, #0]
 8006f10:	6961      	ldr	r1, [r4, #20]
 8006f12:	1d18      	adds	r0, r3, #4
 8006f14:	6028      	str	r0, [r5, #0]
 8006f16:	0635      	lsls	r5, r6, #24
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	d501      	bpl.n	8006f20 <_printf_i+0x1c4>
 8006f1c:	6019      	str	r1, [r3, #0]
 8006f1e:	e002      	b.n	8006f26 <_printf_i+0x1ca>
 8006f20:	0670      	lsls	r0, r6, #25
 8006f22:	d5fb      	bpl.n	8006f1c <_printf_i+0x1c0>
 8006f24:	8019      	strh	r1, [r3, #0]
 8006f26:	2300      	movs	r3, #0
 8006f28:	6123      	str	r3, [r4, #16]
 8006f2a:	4615      	mov	r5, r2
 8006f2c:	e7bc      	b.n	8006ea8 <_printf_i+0x14c>
 8006f2e:	682b      	ldr	r3, [r5, #0]
 8006f30:	1d1a      	adds	r2, r3, #4
 8006f32:	602a      	str	r2, [r5, #0]
 8006f34:	681d      	ldr	r5, [r3, #0]
 8006f36:	6862      	ldr	r2, [r4, #4]
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f7f9 f950 	bl	80001e0 <memchr>
 8006f40:	b108      	cbz	r0, 8006f46 <_printf_i+0x1ea>
 8006f42:	1b40      	subs	r0, r0, r5
 8006f44:	6060      	str	r0, [r4, #4]
 8006f46:	6863      	ldr	r3, [r4, #4]
 8006f48:	6123      	str	r3, [r4, #16]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f50:	e7aa      	b.n	8006ea8 <_printf_i+0x14c>
 8006f52:	6923      	ldr	r3, [r4, #16]
 8006f54:	462a      	mov	r2, r5
 8006f56:	4649      	mov	r1, r9
 8006f58:	4640      	mov	r0, r8
 8006f5a:	47d0      	blx	sl
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	d0ad      	beq.n	8006ebc <_printf_i+0x160>
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	079b      	lsls	r3, r3, #30
 8006f64:	d413      	bmi.n	8006f8e <_printf_i+0x232>
 8006f66:	68e0      	ldr	r0, [r4, #12]
 8006f68:	9b03      	ldr	r3, [sp, #12]
 8006f6a:	4298      	cmp	r0, r3
 8006f6c:	bfb8      	it	lt
 8006f6e:	4618      	movlt	r0, r3
 8006f70:	e7a6      	b.n	8006ec0 <_printf_i+0x164>
 8006f72:	2301      	movs	r3, #1
 8006f74:	4632      	mov	r2, r6
 8006f76:	4649      	mov	r1, r9
 8006f78:	4640      	mov	r0, r8
 8006f7a:	47d0      	blx	sl
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d09d      	beq.n	8006ebc <_printf_i+0x160>
 8006f80:	3501      	adds	r5, #1
 8006f82:	68e3      	ldr	r3, [r4, #12]
 8006f84:	9903      	ldr	r1, [sp, #12]
 8006f86:	1a5b      	subs	r3, r3, r1
 8006f88:	42ab      	cmp	r3, r5
 8006f8a:	dcf2      	bgt.n	8006f72 <_printf_i+0x216>
 8006f8c:	e7eb      	b.n	8006f66 <_printf_i+0x20a>
 8006f8e:	2500      	movs	r5, #0
 8006f90:	f104 0619 	add.w	r6, r4, #25
 8006f94:	e7f5      	b.n	8006f82 <_printf_i+0x226>
 8006f96:	bf00      	nop
 8006f98:	0800b496 	.word	0x0800b496
 8006f9c:	0800b4a7 	.word	0x0800b4a7

08006fa0 <std>:
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	b510      	push	{r4, lr}
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	e9c0 3300 	strd	r3, r3, [r0]
 8006faa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fae:	6083      	str	r3, [r0, #8]
 8006fb0:	8181      	strh	r1, [r0, #12]
 8006fb2:	6643      	str	r3, [r0, #100]	; 0x64
 8006fb4:	81c2      	strh	r2, [r0, #14]
 8006fb6:	6183      	str	r3, [r0, #24]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	2208      	movs	r2, #8
 8006fbc:	305c      	adds	r0, #92	; 0x5c
 8006fbe:	f000 f92e 	bl	800721e <memset>
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	; (8006ff8 <std+0x58>)
 8006fc4:	6263      	str	r3, [r4, #36]	; 0x24
 8006fc6:	4b0d      	ldr	r3, [pc, #52]	; (8006ffc <std+0x5c>)
 8006fc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fca:	4b0d      	ldr	r3, [pc, #52]	; (8007000 <std+0x60>)
 8006fcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fce:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <std+0x64>)
 8006fd0:	6323      	str	r3, [r4, #48]	; 0x30
 8006fd2:	4b0d      	ldr	r3, [pc, #52]	; (8007008 <std+0x68>)
 8006fd4:	6224      	str	r4, [r4, #32]
 8006fd6:	429c      	cmp	r4, r3
 8006fd8:	d006      	beq.n	8006fe8 <std+0x48>
 8006fda:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006fde:	4294      	cmp	r4, r2
 8006fe0:	d002      	beq.n	8006fe8 <std+0x48>
 8006fe2:	33d0      	adds	r3, #208	; 0xd0
 8006fe4:	429c      	cmp	r4, r3
 8006fe6:	d105      	bne.n	8006ff4 <std+0x54>
 8006fe8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ff0:	f000 b992 	b.w	8007318 <__retarget_lock_init_recursive>
 8006ff4:	bd10      	pop	{r4, pc}
 8006ff6:	bf00      	nop
 8006ff8:	08007165 	.word	0x08007165
 8006ffc:	08007187 	.word	0x08007187
 8007000:	080071bf 	.word	0x080071bf
 8007004:	080071e3 	.word	0x080071e3
 8007008:	20000e64 	.word	0x20000e64

0800700c <stdio_exit_handler>:
 800700c:	4a02      	ldr	r2, [pc, #8]	; (8007018 <stdio_exit_handler+0xc>)
 800700e:	4903      	ldr	r1, [pc, #12]	; (800701c <stdio_exit_handler+0x10>)
 8007010:	4803      	ldr	r0, [pc, #12]	; (8007020 <stdio_exit_handler+0x14>)
 8007012:	f000 b869 	b.w	80070e8 <_fwalk_sglue>
 8007016:	bf00      	nop
 8007018:	2000057c 	.word	0x2000057c
 800701c:	08008ce9 	.word	0x08008ce9
 8007020:	20000588 	.word	0x20000588

08007024 <cleanup_stdio>:
 8007024:	6841      	ldr	r1, [r0, #4]
 8007026:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <cleanup_stdio+0x34>)
 8007028:	4299      	cmp	r1, r3
 800702a:	b510      	push	{r4, lr}
 800702c:	4604      	mov	r4, r0
 800702e:	d001      	beq.n	8007034 <cleanup_stdio+0x10>
 8007030:	f001 fe5a 	bl	8008ce8 <_fflush_r>
 8007034:	68a1      	ldr	r1, [r4, #8]
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <cleanup_stdio+0x38>)
 8007038:	4299      	cmp	r1, r3
 800703a:	d002      	beq.n	8007042 <cleanup_stdio+0x1e>
 800703c:	4620      	mov	r0, r4
 800703e:	f001 fe53 	bl	8008ce8 <_fflush_r>
 8007042:	68e1      	ldr	r1, [r4, #12]
 8007044:	4b06      	ldr	r3, [pc, #24]	; (8007060 <cleanup_stdio+0x3c>)
 8007046:	4299      	cmp	r1, r3
 8007048:	d004      	beq.n	8007054 <cleanup_stdio+0x30>
 800704a:	4620      	mov	r0, r4
 800704c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007050:	f001 be4a 	b.w	8008ce8 <_fflush_r>
 8007054:	bd10      	pop	{r4, pc}
 8007056:	bf00      	nop
 8007058:	20000e64 	.word	0x20000e64
 800705c:	20000ecc 	.word	0x20000ecc
 8007060:	20000f34 	.word	0x20000f34

08007064 <global_stdio_init.part.0>:
 8007064:	b510      	push	{r4, lr}
 8007066:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <global_stdio_init.part.0+0x30>)
 8007068:	4c0b      	ldr	r4, [pc, #44]	; (8007098 <global_stdio_init.part.0+0x34>)
 800706a:	4a0c      	ldr	r2, [pc, #48]	; (800709c <global_stdio_init.part.0+0x38>)
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	4620      	mov	r0, r4
 8007070:	2200      	movs	r2, #0
 8007072:	2104      	movs	r1, #4
 8007074:	f7ff ff94 	bl	8006fa0 <std>
 8007078:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800707c:	2201      	movs	r2, #1
 800707e:	2109      	movs	r1, #9
 8007080:	f7ff ff8e 	bl	8006fa0 <std>
 8007084:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007088:	2202      	movs	r2, #2
 800708a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800708e:	2112      	movs	r1, #18
 8007090:	f7ff bf86 	b.w	8006fa0 <std>
 8007094:	20000f9c 	.word	0x20000f9c
 8007098:	20000e64 	.word	0x20000e64
 800709c:	0800700d 	.word	0x0800700d

080070a0 <__sfp_lock_acquire>:
 80070a0:	4801      	ldr	r0, [pc, #4]	; (80070a8 <__sfp_lock_acquire+0x8>)
 80070a2:	f000 b93a 	b.w	800731a <__retarget_lock_acquire_recursive>
 80070a6:	bf00      	nop
 80070a8:	20000fa5 	.word	0x20000fa5

080070ac <__sfp_lock_release>:
 80070ac:	4801      	ldr	r0, [pc, #4]	; (80070b4 <__sfp_lock_release+0x8>)
 80070ae:	f000 b935 	b.w	800731c <__retarget_lock_release_recursive>
 80070b2:	bf00      	nop
 80070b4:	20000fa5 	.word	0x20000fa5

080070b8 <__sinit>:
 80070b8:	b510      	push	{r4, lr}
 80070ba:	4604      	mov	r4, r0
 80070bc:	f7ff fff0 	bl	80070a0 <__sfp_lock_acquire>
 80070c0:	6a23      	ldr	r3, [r4, #32]
 80070c2:	b11b      	cbz	r3, 80070cc <__sinit+0x14>
 80070c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c8:	f7ff bff0 	b.w	80070ac <__sfp_lock_release>
 80070cc:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <__sinit+0x28>)
 80070ce:	6223      	str	r3, [r4, #32]
 80070d0:	4b04      	ldr	r3, [pc, #16]	; (80070e4 <__sinit+0x2c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1f5      	bne.n	80070c4 <__sinit+0xc>
 80070d8:	f7ff ffc4 	bl	8007064 <global_stdio_init.part.0>
 80070dc:	e7f2      	b.n	80070c4 <__sinit+0xc>
 80070de:	bf00      	nop
 80070e0:	08007025 	.word	0x08007025
 80070e4:	20000f9c 	.word	0x20000f9c

080070e8 <_fwalk_sglue>:
 80070e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ec:	4607      	mov	r7, r0
 80070ee:	4688      	mov	r8, r1
 80070f0:	4614      	mov	r4, r2
 80070f2:	2600      	movs	r6, #0
 80070f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070f8:	f1b9 0901 	subs.w	r9, r9, #1
 80070fc:	d505      	bpl.n	800710a <_fwalk_sglue+0x22>
 80070fe:	6824      	ldr	r4, [r4, #0]
 8007100:	2c00      	cmp	r4, #0
 8007102:	d1f7      	bne.n	80070f4 <_fwalk_sglue+0xc>
 8007104:	4630      	mov	r0, r6
 8007106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710a:	89ab      	ldrh	r3, [r5, #12]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d907      	bls.n	8007120 <_fwalk_sglue+0x38>
 8007110:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007114:	3301      	adds	r3, #1
 8007116:	d003      	beq.n	8007120 <_fwalk_sglue+0x38>
 8007118:	4629      	mov	r1, r5
 800711a:	4638      	mov	r0, r7
 800711c:	47c0      	blx	r8
 800711e:	4306      	orrs	r6, r0
 8007120:	3568      	adds	r5, #104	; 0x68
 8007122:	e7e9      	b.n	80070f8 <_fwalk_sglue+0x10>

08007124 <siprintf>:
 8007124:	b40e      	push	{r1, r2, r3}
 8007126:	b500      	push	{lr}
 8007128:	b09c      	sub	sp, #112	; 0x70
 800712a:	ab1d      	add	r3, sp, #116	; 0x74
 800712c:	9002      	str	r0, [sp, #8]
 800712e:	9006      	str	r0, [sp, #24]
 8007130:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007134:	4809      	ldr	r0, [pc, #36]	; (800715c <siprintf+0x38>)
 8007136:	9107      	str	r1, [sp, #28]
 8007138:	9104      	str	r1, [sp, #16]
 800713a:	4909      	ldr	r1, [pc, #36]	; (8007160 <siprintf+0x3c>)
 800713c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007140:	9105      	str	r1, [sp, #20]
 8007142:	6800      	ldr	r0, [r0, #0]
 8007144:	9301      	str	r3, [sp, #4]
 8007146:	a902      	add	r1, sp, #8
 8007148:	f001 fc4a 	bl	80089e0 <_svfiprintf_r>
 800714c:	9b02      	ldr	r3, [sp, #8]
 800714e:	2200      	movs	r2, #0
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	b01c      	add	sp, #112	; 0x70
 8007154:	f85d eb04 	ldr.w	lr, [sp], #4
 8007158:	b003      	add	sp, #12
 800715a:	4770      	bx	lr
 800715c:	200005d4 	.word	0x200005d4
 8007160:	ffff0208 	.word	0xffff0208

08007164 <__sread>:
 8007164:	b510      	push	{r4, lr}
 8007166:	460c      	mov	r4, r1
 8007168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800716c:	f000 f886 	bl	800727c <_read_r>
 8007170:	2800      	cmp	r0, #0
 8007172:	bfab      	itete	ge
 8007174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007176:	89a3      	ldrhlt	r3, [r4, #12]
 8007178:	181b      	addge	r3, r3, r0
 800717a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800717e:	bfac      	ite	ge
 8007180:	6563      	strge	r3, [r4, #84]	; 0x54
 8007182:	81a3      	strhlt	r3, [r4, #12]
 8007184:	bd10      	pop	{r4, pc}

08007186 <__swrite>:
 8007186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800718a:	461f      	mov	r7, r3
 800718c:	898b      	ldrh	r3, [r1, #12]
 800718e:	05db      	lsls	r3, r3, #23
 8007190:	4605      	mov	r5, r0
 8007192:	460c      	mov	r4, r1
 8007194:	4616      	mov	r6, r2
 8007196:	d505      	bpl.n	80071a4 <__swrite+0x1e>
 8007198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719c:	2302      	movs	r3, #2
 800719e:	2200      	movs	r2, #0
 80071a0:	f000 f85a 	bl	8007258 <_lseek_r>
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ae:	81a3      	strh	r3, [r4, #12]
 80071b0:	4632      	mov	r2, r6
 80071b2:	463b      	mov	r3, r7
 80071b4:	4628      	mov	r0, r5
 80071b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ba:	f000 b871 	b.w	80072a0 <_write_r>

080071be <__sseek>:
 80071be:	b510      	push	{r4, lr}
 80071c0:	460c      	mov	r4, r1
 80071c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c6:	f000 f847 	bl	8007258 <_lseek_r>
 80071ca:	1c43      	adds	r3, r0, #1
 80071cc:	89a3      	ldrh	r3, [r4, #12]
 80071ce:	bf15      	itete	ne
 80071d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80071d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071da:	81a3      	strheq	r3, [r4, #12]
 80071dc:	bf18      	it	ne
 80071de:	81a3      	strhne	r3, [r4, #12]
 80071e0:	bd10      	pop	{r4, pc}

080071e2 <__sclose>:
 80071e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e6:	f000 b827 	b.w	8007238 <_close_r>

080071ea <memmove>:
 80071ea:	4288      	cmp	r0, r1
 80071ec:	b510      	push	{r4, lr}
 80071ee:	eb01 0402 	add.w	r4, r1, r2
 80071f2:	d902      	bls.n	80071fa <memmove+0x10>
 80071f4:	4284      	cmp	r4, r0
 80071f6:	4623      	mov	r3, r4
 80071f8:	d807      	bhi.n	800720a <memmove+0x20>
 80071fa:	1e43      	subs	r3, r0, #1
 80071fc:	42a1      	cmp	r1, r4
 80071fe:	d008      	beq.n	8007212 <memmove+0x28>
 8007200:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007204:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007208:	e7f8      	b.n	80071fc <memmove+0x12>
 800720a:	4402      	add	r2, r0
 800720c:	4601      	mov	r1, r0
 800720e:	428a      	cmp	r2, r1
 8007210:	d100      	bne.n	8007214 <memmove+0x2a>
 8007212:	bd10      	pop	{r4, pc}
 8007214:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007218:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800721c:	e7f7      	b.n	800720e <memmove+0x24>

0800721e <memset>:
 800721e:	4402      	add	r2, r0
 8007220:	4603      	mov	r3, r0
 8007222:	4293      	cmp	r3, r2
 8007224:	d100      	bne.n	8007228 <memset+0xa>
 8007226:	4770      	bx	lr
 8007228:	f803 1b01 	strb.w	r1, [r3], #1
 800722c:	e7f9      	b.n	8007222 <memset+0x4>
	...

08007230 <_localeconv_r>:
 8007230:	4800      	ldr	r0, [pc, #0]	; (8007234 <_localeconv_r+0x4>)
 8007232:	4770      	bx	lr
 8007234:	200006c8 	.word	0x200006c8

08007238 <_close_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4d06      	ldr	r5, [pc, #24]	; (8007254 <_close_r+0x1c>)
 800723c:	2300      	movs	r3, #0
 800723e:	4604      	mov	r4, r0
 8007240:	4608      	mov	r0, r1
 8007242:	602b      	str	r3, [r5, #0]
 8007244:	f7fb f971 	bl	800252a <_close>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d102      	bne.n	8007252 <_close_r+0x1a>
 800724c:	682b      	ldr	r3, [r5, #0]
 800724e:	b103      	cbz	r3, 8007252 <_close_r+0x1a>
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	20000fa0 	.word	0x20000fa0

08007258 <_lseek_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	4d07      	ldr	r5, [pc, #28]	; (8007278 <_lseek_r+0x20>)
 800725c:	4604      	mov	r4, r0
 800725e:	4608      	mov	r0, r1
 8007260:	4611      	mov	r1, r2
 8007262:	2200      	movs	r2, #0
 8007264:	602a      	str	r2, [r5, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	f7fb f986 	bl	8002578 <_lseek>
 800726c:	1c43      	adds	r3, r0, #1
 800726e:	d102      	bne.n	8007276 <_lseek_r+0x1e>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	b103      	cbz	r3, 8007276 <_lseek_r+0x1e>
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	bd38      	pop	{r3, r4, r5, pc}
 8007278:	20000fa0 	.word	0x20000fa0

0800727c <_read_r>:
 800727c:	b538      	push	{r3, r4, r5, lr}
 800727e:	4d07      	ldr	r5, [pc, #28]	; (800729c <_read_r+0x20>)
 8007280:	4604      	mov	r4, r0
 8007282:	4608      	mov	r0, r1
 8007284:	4611      	mov	r1, r2
 8007286:	2200      	movs	r2, #0
 8007288:	602a      	str	r2, [r5, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	f7fb f914 	bl	80024b8 <_read>
 8007290:	1c43      	adds	r3, r0, #1
 8007292:	d102      	bne.n	800729a <_read_r+0x1e>
 8007294:	682b      	ldr	r3, [r5, #0]
 8007296:	b103      	cbz	r3, 800729a <_read_r+0x1e>
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	bd38      	pop	{r3, r4, r5, pc}
 800729c:	20000fa0 	.word	0x20000fa0

080072a0 <_write_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4d07      	ldr	r5, [pc, #28]	; (80072c0 <_write_r+0x20>)
 80072a4:	4604      	mov	r4, r0
 80072a6:	4608      	mov	r0, r1
 80072a8:	4611      	mov	r1, r2
 80072aa:	2200      	movs	r2, #0
 80072ac:	602a      	str	r2, [r5, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	f7fb f91f 	bl	80024f2 <_write>
 80072b4:	1c43      	adds	r3, r0, #1
 80072b6:	d102      	bne.n	80072be <_write_r+0x1e>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	b103      	cbz	r3, 80072be <_write_r+0x1e>
 80072bc:	6023      	str	r3, [r4, #0]
 80072be:	bd38      	pop	{r3, r4, r5, pc}
 80072c0:	20000fa0 	.word	0x20000fa0

080072c4 <__errno>:
 80072c4:	4b01      	ldr	r3, [pc, #4]	; (80072cc <__errno+0x8>)
 80072c6:	6818      	ldr	r0, [r3, #0]
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	200005d4 	.word	0x200005d4

080072d0 <__libc_init_array>:
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	4d0d      	ldr	r5, [pc, #52]	; (8007308 <__libc_init_array+0x38>)
 80072d4:	4c0d      	ldr	r4, [pc, #52]	; (800730c <__libc_init_array+0x3c>)
 80072d6:	1b64      	subs	r4, r4, r5
 80072d8:	10a4      	asrs	r4, r4, #2
 80072da:	2600      	movs	r6, #0
 80072dc:	42a6      	cmp	r6, r4
 80072de:	d109      	bne.n	80072f4 <__libc_init_array+0x24>
 80072e0:	4d0b      	ldr	r5, [pc, #44]	; (8007310 <__libc_init_array+0x40>)
 80072e2:	4c0c      	ldr	r4, [pc, #48]	; (8007314 <__libc_init_array+0x44>)
 80072e4:	f002 f87c 	bl	80093e0 <_init>
 80072e8:	1b64      	subs	r4, r4, r5
 80072ea:	10a4      	asrs	r4, r4, #2
 80072ec:	2600      	movs	r6, #0
 80072ee:	42a6      	cmp	r6, r4
 80072f0:	d105      	bne.n	80072fe <__libc_init_array+0x2e>
 80072f2:	bd70      	pop	{r4, r5, r6, pc}
 80072f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f8:	4798      	blx	r3
 80072fa:	3601      	adds	r6, #1
 80072fc:	e7ee      	b.n	80072dc <__libc_init_array+0xc>
 80072fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007302:	4798      	blx	r3
 8007304:	3601      	adds	r6, #1
 8007306:	e7f2      	b.n	80072ee <__libc_init_array+0x1e>
 8007308:	0800b7fc 	.word	0x0800b7fc
 800730c:	0800b7fc 	.word	0x0800b7fc
 8007310:	0800b7fc 	.word	0x0800b7fc
 8007314:	0800b800 	.word	0x0800b800

08007318 <__retarget_lock_init_recursive>:
 8007318:	4770      	bx	lr

0800731a <__retarget_lock_acquire_recursive>:
 800731a:	4770      	bx	lr

0800731c <__retarget_lock_release_recursive>:
 800731c:	4770      	bx	lr

0800731e <memcpy>:
 800731e:	440a      	add	r2, r1
 8007320:	4291      	cmp	r1, r2
 8007322:	f100 33ff 	add.w	r3, r0, #4294967295
 8007326:	d100      	bne.n	800732a <memcpy+0xc>
 8007328:	4770      	bx	lr
 800732a:	b510      	push	{r4, lr}
 800732c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007330:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007334:	4291      	cmp	r1, r2
 8007336:	d1f9      	bne.n	800732c <memcpy+0xe>
 8007338:	bd10      	pop	{r4, pc}

0800733a <quorem>:
 800733a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733e:	6903      	ldr	r3, [r0, #16]
 8007340:	690c      	ldr	r4, [r1, #16]
 8007342:	42a3      	cmp	r3, r4
 8007344:	4607      	mov	r7, r0
 8007346:	db7e      	blt.n	8007446 <quorem+0x10c>
 8007348:	3c01      	subs	r4, #1
 800734a:	f101 0814 	add.w	r8, r1, #20
 800734e:	f100 0514 	add.w	r5, r0, #20
 8007352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800735c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007360:	3301      	adds	r3, #1
 8007362:	429a      	cmp	r2, r3
 8007364:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007368:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800736c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007370:	d331      	bcc.n	80073d6 <quorem+0x9c>
 8007372:	f04f 0e00 	mov.w	lr, #0
 8007376:	4640      	mov	r0, r8
 8007378:	46ac      	mov	ip, r5
 800737a:	46f2      	mov	sl, lr
 800737c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007380:	b293      	uxth	r3, r2
 8007382:	fb06 e303 	mla	r3, r6, r3, lr
 8007386:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800738a:	0c1a      	lsrs	r2, r3, #16
 800738c:	b29b      	uxth	r3, r3
 800738e:	ebaa 0303 	sub.w	r3, sl, r3
 8007392:	f8dc a000 	ldr.w	sl, [ip]
 8007396:	fa13 f38a 	uxtah	r3, r3, sl
 800739a:	fb06 220e 	mla	r2, r6, lr, r2
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	9b00      	ldr	r3, [sp, #0]
 80073a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073a6:	b292      	uxth	r2, r2
 80073a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80073ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80073b4:	4581      	cmp	r9, r0
 80073b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ba:	f84c 3b04 	str.w	r3, [ip], #4
 80073be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073c2:	d2db      	bcs.n	800737c <quorem+0x42>
 80073c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80073c8:	b92b      	cbnz	r3, 80073d6 <quorem+0x9c>
 80073ca:	9b01      	ldr	r3, [sp, #4]
 80073cc:	3b04      	subs	r3, #4
 80073ce:	429d      	cmp	r5, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	d32c      	bcc.n	800742e <quorem+0xf4>
 80073d4:	613c      	str	r4, [r7, #16]
 80073d6:	4638      	mov	r0, r7
 80073d8:	f001 f9a8 	bl	800872c <__mcmp>
 80073dc:	2800      	cmp	r0, #0
 80073de:	db22      	blt.n	8007426 <quorem+0xec>
 80073e0:	3601      	adds	r6, #1
 80073e2:	4629      	mov	r1, r5
 80073e4:	2000      	movs	r0, #0
 80073e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80073ea:	f8d1 c000 	ldr.w	ip, [r1]
 80073ee:	b293      	uxth	r3, r2
 80073f0:	1ac3      	subs	r3, r0, r3
 80073f2:	0c12      	lsrs	r2, r2, #16
 80073f4:	fa13 f38c 	uxtah	r3, r3, ip
 80073f8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80073fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007400:	b29b      	uxth	r3, r3
 8007402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007406:	45c1      	cmp	r9, r8
 8007408:	f841 3b04 	str.w	r3, [r1], #4
 800740c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007410:	d2e9      	bcs.n	80073e6 <quorem+0xac>
 8007412:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007416:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800741a:	b922      	cbnz	r2, 8007426 <quorem+0xec>
 800741c:	3b04      	subs	r3, #4
 800741e:	429d      	cmp	r5, r3
 8007420:	461a      	mov	r2, r3
 8007422:	d30a      	bcc.n	800743a <quorem+0x100>
 8007424:	613c      	str	r4, [r7, #16]
 8007426:	4630      	mov	r0, r6
 8007428:	b003      	add	sp, #12
 800742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800742e:	6812      	ldr	r2, [r2, #0]
 8007430:	3b04      	subs	r3, #4
 8007432:	2a00      	cmp	r2, #0
 8007434:	d1ce      	bne.n	80073d4 <quorem+0x9a>
 8007436:	3c01      	subs	r4, #1
 8007438:	e7c9      	b.n	80073ce <quorem+0x94>
 800743a:	6812      	ldr	r2, [r2, #0]
 800743c:	3b04      	subs	r3, #4
 800743e:	2a00      	cmp	r2, #0
 8007440:	d1f0      	bne.n	8007424 <quorem+0xea>
 8007442:	3c01      	subs	r4, #1
 8007444:	e7eb      	b.n	800741e <quorem+0xe4>
 8007446:	2000      	movs	r0, #0
 8007448:	e7ee      	b.n	8007428 <quorem+0xee>
 800744a:	0000      	movs	r0, r0
 800744c:	0000      	movs	r0, r0
	...

08007450 <_dtoa_r>:
 8007450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	ed2d 8b04 	vpush	{d8-d9}
 8007458:	69c5      	ldr	r5, [r0, #28]
 800745a:	b093      	sub	sp, #76	; 0x4c
 800745c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007460:	ec57 6b10 	vmov	r6, r7, d0
 8007464:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007468:	9107      	str	r1, [sp, #28]
 800746a:	4604      	mov	r4, r0
 800746c:	920a      	str	r2, [sp, #40]	; 0x28
 800746e:	930d      	str	r3, [sp, #52]	; 0x34
 8007470:	b975      	cbnz	r5, 8007490 <_dtoa_r+0x40>
 8007472:	2010      	movs	r0, #16
 8007474:	f000 fe2a 	bl	80080cc <malloc>
 8007478:	4602      	mov	r2, r0
 800747a:	61e0      	str	r0, [r4, #28]
 800747c:	b920      	cbnz	r0, 8007488 <_dtoa_r+0x38>
 800747e:	4bae      	ldr	r3, [pc, #696]	; (8007738 <_dtoa_r+0x2e8>)
 8007480:	21ef      	movs	r1, #239	; 0xef
 8007482:	48ae      	ldr	r0, [pc, #696]	; (800773c <_dtoa_r+0x2ec>)
 8007484:	f001 fc68 	bl	8008d58 <__assert_func>
 8007488:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800748c:	6005      	str	r5, [r0, #0]
 800748e:	60c5      	str	r5, [r0, #12]
 8007490:	69e3      	ldr	r3, [r4, #28]
 8007492:	6819      	ldr	r1, [r3, #0]
 8007494:	b151      	cbz	r1, 80074ac <_dtoa_r+0x5c>
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	604a      	str	r2, [r1, #4]
 800749a:	2301      	movs	r3, #1
 800749c:	4093      	lsls	r3, r2
 800749e:	608b      	str	r3, [r1, #8]
 80074a0:	4620      	mov	r0, r4
 80074a2:	f000 ff07 	bl	80082b4 <_Bfree>
 80074a6:	69e3      	ldr	r3, [r4, #28]
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	1e3b      	subs	r3, r7, #0
 80074ae:	bfbb      	ittet	lt
 80074b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80074b4:	9303      	strlt	r3, [sp, #12]
 80074b6:	2300      	movge	r3, #0
 80074b8:	2201      	movlt	r2, #1
 80074ba:	bfac      	ite	ge
 80074bc:	f8c8 3000 	strge.w	r3, [r8]
 80074c0:	f8c8 2000 	strlt.w	r2, [r8]
 80074c4:	4b9e      	ldr	r3, [pc, #632]	; (8007740 <_dtoa_r+0x2f0>)
 80074c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80074ca:	ea33 0308 	bics.w	r3, r3, r8
 80074ce:	d11b      	bne.n	8007508 <_dtoa_r+0xb8>
 80074d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80074dc:	4333      	orrs	r3, r6
 80074de:	f000 8593 	beq.w	8008008 <_dtoa_r+0xbb8>
 80074e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074e4:	b963      	cbnz	r3, 8007500 <_dtoa_r+0xb0>
 80074e6:	4b97      	ldr	r3, [pc, #604]	; (8007744 <_dtoa_r+0x2f4>)
 80074e8:	e027      	b.n	800753a <_dtoa_r+0xea>
 80074ea:	4b97      	ldr	r3, [pc, #604]	; (8007748 <_dtoa_r+0x2f8>)
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	3308      	adds	r3, #8
 80074f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	9800      	ldr	r0, [sp, #0]
 80074f6:	b013      	add	sp, #76	; 0x4c
 80074f8:	ecbd 8b04 	vpop	{d8-d9}
 80074fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007500:	4b90      	ldr	r3, [pc, #576]	; (8007744 <_dtoa_r+0x2f4>)
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	3303      	adds	r3, #3
 8007506:	e7f3      	b.n	80074f0 <_dtoa_r+0xa0>
 8007508:	ed9d 7b02 	vldr	d7, [sp, #8]
 800750c:	2200      	movs	r2, #0
 800750e:	ec51 0b17 	vmov	r0, r1, d7
 8007512:	eeb0 8a47 	vmov.f32	s16, s14
 8007516:	eef0 8a67 	vmov.f32	s17, s15
 800751a:	2300      	movs	r3, #0
 800751c:	f7f9 fadc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007520:	4681      	mov	r9, r0
 8007522:	b160      	cbz	r0, 800753e <_dtoa_r+0xee>
 8007524:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007526:	2301      	movs	r3, #1
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 8568 	beq.w	8008002 <_dtoa_r+0xbb2>
 8007532:	4b86      	ldr	r3, [pc, #536]	; (800774c <_dtoa_r+0x2fc>)
 8007534:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	3b01      	subs	r3, #1
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	e7da      	b.n	80074f4 <_dtoa_r+0xa4>
 800753e:	aa10      	add	r2, sp, #64	; 0x40
 8007540:	a911      	add	r1, sp, #68	; 0x44
 8007542:	4620      	mov	r0, r4
 8007544:	eeb0 0a48 	vmov.f32	s0, s16
 8007548:	eef0 0a68 	vmov.f32	s1, s17
 800754c:	f001 f994 	bl	8008878 <__d2b>
 8007550:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007554:	4682      	mov	sl, r0
 8007556:	2d00      	cmp	r5, #0
 8007558:	d07f      	beq.n	800765a <_dtoa_r+0x20a>
 800755a:	ee18 3a90 	vmov	r3, s17
 800755e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007562:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007566:	ec51 0b18 	vmov	r0, r1, d8
 800756a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800756e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007572:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007576:	4619      	mov	r1, r3
 8007578:	2200      	movs	r2, #0
 800757a:	4b75      	ldr	r3, [pc, #468]	; (8007750 <_dtoa_r+0x300>)
 800757c:	f7f8 fe8c 	bl	8000298 <__aeabi_dsub>
 8007580:	a367      	add	r3, pc, #412	; (adr r3, 8007720 <_dtoa_r+0x2d0>)
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f7f9 f83f 	bl	8000608 <__aeabi_dmul>
 800758a:	a367      	add	r3, pc, #412	; (adr r3, 8007728 <_dtoa_r+0x2d8>)
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	f7f8 fe84 	bl	800029c <__adddf3>
 8007594:	4606      	mov	r6, r0
 8007596:	4628      	mov	r0, r5
 8007598:	460f      	mov	r7, r1
 800759a:	f7f8 ffcb 	bl	8000534 <__aeabi_i2d>
 800759e:	a364      	add	r3, pc, #400	; (adr r3, 8007730 <_dtoa_r+0x2e0>)
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f7f9 f830 	bl	8000608 <__aeabi_dmul>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4630      	mov	r0, r6
 80075ae:	4639      	mov	r1, r7
 80075b0:	f7f8 fe74 	bl	800029c <__adddf3>
 80075b4:	4606      	mov	r6, r0
 80075b6:	460f      	mov	r7, r1
 80075b8:	f7f9 fad6 	bl	8000b68 <__aeabi_d2iz>
 80075bc:	2200      	movs	r2, #0
 80075be:	4683      	mov	fp, r0
 80075c0:	2300      	movs	r3, #0
 80075c2:	4630      	mov	r0, r6
 80075c4:	4639      	mov	r1, r7
 80075c6:	f7f9 fa91 	bl	8000aec <__aeabi_dcmplt>
 80075ca:	b148      	cbz	r0, 80075e0 <_dtoa_r+0x190>
 80075cc:	4658      	mov	r0, fp
 80075ce:	f7f8 ffb1 	bl	8000534 <__aeabi_i2d>
 80075d2:	4632      	mov	r2, r6
 80075d4:	463b      	mov	r3, r7
 80075d6:	f7f9 fa7f 	bl	8000ad8 <__aeabi_dcmpeq>
 80075da:	b908      	cbnz	r0, 80075e0 <_dtoa_r+0x190>
 80075dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075e0:	f1bb 0f16 	cmp.w	fp, #22
 80075e4:	d857      	bhi.n	8007696 <_dtoa_r+0x246>
 80075e6:	4b5b      	ldr	r3, [pc, #364]	; (8007754 <_dtoa_r+0x304>)
 80075e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	ec51 0b18 	vmov	r0, r1, d8
 80075f4:	f7f9 fa7a 	bl	8000aec <__aeabi_dcmplt>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d04e      	beq.n	800769a <_dtoa_r+0x24a>
 80075fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007600:	2300      	movs	r3, #0
 8007602:	930c      	str	r3, [sp, #48]	; 0x30
 8007604:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007606:	1b5b      	subs	r3, r3, r5
 8007608:	1e5a      	subs	r2, r3, #1
 800760a:	bf45      	ittet	mi
 800760c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007610:	9305      	strmi	r3, [sp, #20]
 8007612:	2300      	movpl	r3, #0
 8007614:	2300      	movmi	r3, #0
 8007616:	9206      	str	r2, [sp, #24]
 8007618:	bf54      	ite	pl
 800761a:	9305      	strpl	r3, [sp, #20]
 800761c:	9306      	strmi	r3, [sp, #24]
 800761e:	f1bb 0f00 	cmp.w	fp, #0
 8007622:	db3c      	blt.n	800769e <_dtoa_r+0x24e>
 8007624:	9b06      	ldr	r3, [sp, #24]
 8007626:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800762a:	445b      	add	r3, fp
 800762c:	9306      	str	r3, [sp, #24]
 800762e:	2300      	movs	r3, #0
 8007630:	9308      	str	r3, [sp, #32]
 8007632:	9b07      	ldr	r3, [sp, #28]
 8007634:	2b09      	cmp	r3, #9
 8007636:	d868      	bhi.n	800770a <_dtoa_r+0x2ba>
 8007638:	2b05      	cmp	r3, #5
 800763a:	bfc4      	itt	gt
 800763c:	3b04      	subgt	r3, #4
 800763e:	9307      	strgt	r3, [sp, #28]
 8007640:	9b07      	ldr	r3, [sp, #28]
 8007642:	f1a3 0302 	sub.w	r3, r3, #2
 8007646:	bfcc      	ite	gt
 8007648:	2500      	movgt	r5, #0
 800764a:	2501      	movle	r5, #1
 800764c:	2b03      	cmp	r3, #3
 800764e:	f200 8085 	bhi.w	800775c <_dtoa_r+0x30c>
 8007652:	e8df f003 	tbb	[pc, r3]
 8007656:	3b2e      	.short	0x3b2e
 8007658:	5839      	.short	0x5839
 800765a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800765e:	441d      	add	r5, r3
 8007660:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007664:	2b20      	cmp	r3, #32
 8007666:	bfc1      	itttt	gt
 8007668:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800766c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007670:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007674:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007678:	bfd6      	itet	le
 800767a:	f1c3 0320 	rsble	r3, r3, #32
 800767e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007682:	fa06 f003 	lslle.w	r0, r6, r3
 8007686:	f7f8 ff45 	bl	8000514 <__aeabi_ui2d>
 800768a:	2201      	movs	r2, #1
 800768c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007690:	3d01      	subs	r5, #1
 8007692:	920e      	str	r2, [sp, #56]	; 0x38
 8007694:	e76f      	b.n	8007576 <_dtoa_r+0x126>
 8007696:	2301      	movs	r3, #1
 8007698:	e7b3      	b.n	8007602 <_dtoa_r+0x1b2>
 800769a:	900c      	str	r0, [sp, #48]	; 0x30
 800769c:	e7b2      	b.n	8007604 <_dtoa_r+0x1b4>
 800769e:	9b05      	ldr	r3, [sp, #20]
 80076a0:	eba3 030b 	sub.w	r3, r3, fp
 80076a4:	9305      	str	r3, [sp, #20]
 80076a6:	f1cb 0300 	rsb	r3, fp, #0
 80076aa:	9308      	str	r3, [sp, #32]
 80076ac:	2300      	movs	r3, #0
 80076ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80076b0:	e7bf      	b.n	8007632 <_dtoa_r+0x1e2>
 80076b2:	2300      	movs	r3, #0
 80076b4:	9309      	str	r3, [sp, #36]	; 0x24
 80076b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	dc52      	bgt.n	8007762 <_dtoa_r+0x312>
 80076bc:	2301      	movs	r3, #1
 80076be:	9301      	str	r3, [sp, #4]
 80076c0:	9304      	str	r3, [sp, #16]
 80076c2:	461a      	mov	r2, r3
 80076c4:	920a      	str	r2, [sp, #40]	; 0x28
 80076c6:	e00b      	b.n	80076e0 <_dtoa_r+0x290>
 80076c8:	2301      	movs	r3, #1
 80076ca:	e7f3      	b.n	80076b4 <_dtoa_r+0x264>
 80076cc:	2300      	movs	r3, #0
 80076ce:	9309      	str	r3, [sp, #36]	; 0x24
 80076d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d2:	445b      	add	r3, fp
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	3301      	adds	r3, #1
 80076d8:	2b01      	cmp	r3, #1
 80076da:	9304      	str	r3, [sp, #16]
 80076dc:	bfb8      	it	lt
 80076de:	2301      	movlt	r3, #1
 80076e0:	69e0      	ldr	r0, [r4, #28]
 80076e2:	2100      	movs	r1, #0
 80076e4:	2204      	movs	r2, #4
 80076e6:	f102 0614 	add.w	r6, r2, #20
 80076ea:	429e      	cmp	r6, r3
 80076ec:	d93d      	bls.n	800776a <_dtoa_r+0x31a>
 80076ee:	6041      	str	r1, [r0, #4]
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 fd9f 	bl	8008234 <_Balloc>
 80076f6:	9000      	str	r0, [sp, #0]
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d139      	bne.n	8007770 <_dtoa_r+0x320>
 80076fc:	4b16      	ldr	r3, [pc, #88]	; (8007758 <_dtoa_r+0x308>)
 80076fe:	4602      	mov	r2, r0
 8007700:	f240 11af 	movw	r1, #431	; 0x1af
 8007704:	e6bd      	b.n	8007482 <_dtoa_r+0x32>
 8007706:	2301      	movs	r3, #1
 8007708:	e7e1      	b.n	80076ce <_dtoa_r+0x27e>
 800770a:	2501      	movs	r5, #1
 800770c:	2300      	movs	r3, #0
 800770e:	9307      	str	r3, [sp, #28]
 8007710:	9509      	str	r5, [sp, #36]	; 0x24
 8007712:	f04f 33ff 	mov.w	r3, #4294967295
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	9304      	str	r3, [sp, #16]
 800771a:	2200      	movs	r2, #0
 800771c:	2312      	movs	r3, #18
 800771e:	e7d1      	b.n	80076c4 <_dtoa_r+0x274>
 8007720:	636f4361 	.word	0x636f4361
 8007724:	3fd287a7 	.word	0x3fd287a7
 8007728:	8b60c8b3 	.word	0x8b60c8b3
 800772c:	3fc68a28 	.word	0x3fc68a28
 8007730:	509f79fb 	.word	0x509f79fb
 8007734:	3fd34413 	.word	0x3fd34413
 8007738:	0800b4c5 	.word	0x0800b4c5
 800773c:	0800b4dc 	.word	0x0800b4dc
 8007740:	7ff00000 	.word	0x7ff00000
 8007744:	0800b4c1 	.word	0x0800b4c1
 8007748:	0800b4b8 	.word	0x0800b4b8
 800774c:	0800b495 	.word	0x0800b495
 8007750:	3ff80000 	.word	0x3ff80000
 8007754:	0800b5c8 	.word	0x0800b5c8
 8007758:	0800b534 	.word	0x0800b534
 800775c:	2301      	movs	r3, #1
 800775e:	9309      	str	r3, [sp, #36]	; 0x24
 8007760:	e7d7      	b.n	8007712 <_dtoa_r+0x2c2>
 8007762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	9304      	str	r3, [sp, #16]
 8007768:	e7ba      	b.n	80076e0 <_dtoa_r+0x290>
 800776a:	3101      	adds	r1, #1
 800776c:	0052      	lsls	r2, r2, #1
 800776e:	e7ba      	b.n	80076e6 <_dtoa_r+0x296>
 8007770:	69e3      	ldr	r3, [r4, #28]
 8007772:	9a00      	ldr	r2, [sp, #0]
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	9b04      	ldr	r3, [sp, #16]
 8007778:	2b0e      	cmp	r3, #14
 800777a:	f200 80a8 	bhi.w	80078ce <_dtoa_r+0x47e>
 800777e:	2d00      	cmp	r5, #0
 8007780:	f000 80a5 	beq.w	80078ce <_dtoa_r+0x47e>
 8007784:	f1bb 0f00 	cmp.w	fp, #0
 8007788:	dd38      	ble.n	80077fc <_dtoa_r+0x3ac>
 800778a:	4bc0      	ldr	r3, [pc, #768]	; (8007a8c <_dtoa_r+0x63c>)
 800778c:	f00b 020f 	and.w	r2, fp, #15
 8007790:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007794:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007798:	e9d3 6700 	ldrd	r6, r7, [r3]
 800779c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80077a0:	d019      	beq.n	80077d6 <_dtoa_r+0x386>
 80077a2:	4bbb      	ldr	r3, [pc, #748]	; (8007a90 <_dtoa_r+0x640>)
 80077a4:	ec51 0b18 	vmov	r0, r1, d8
 80077a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077ac:	f7f9 f856 	bl	800085c <__aeabi_ddiv>
 80077b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b4:	f008 080f 	and.w	r8, r8, #15
 80077b8:	2503      	movs	r5, #3
 80077ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007a90 <_dtoa_r+0x640>
 80077be:	f1b8 0f00 	cmp.w	r8, #0
 80077c2:	d10a      	bne.n	80077da <_dtoa_r+0x38a>
 80077c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077c8:	4632      	mov	r2, r6
 80077ca:	463b      	mov	r3, r7
 80077cc:	f7f9 f846 	bl	800085c <__aeabi_ddiv>
 80077d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077d4:	e02b      	b.n	800782e <_dtoa_r+0x3de>
 80077d6:	2502      	movs	r5, #2
 80077d8:	e7ef      	b.n	80077ba <_dtoa_r+0x36a>
 80077da:	f018 0f01 	tst.w	r8, #1
 80077de:	d008      	beq.n	80077f2 <_dtoa_r+0x3a2>
 80077e0:	4630      	mov	r0, r6
 80077e2:	4639      	mov	r1, r7
 80077e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80077e8:	f7f8 ff0e 	bl	8000608 <__aeabi_dmul>
 80077ec:	3501      	adds	r5, #1
 80077ee:	4606      	mov	r6, r0
 80077f0:	460f      	mov	r7, r1
 80077f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80077f6:	f109 0908 	add.w	r9, r9, #8
 80077fa:	e7e0      	b.n	80077be <_dtoa_r+0x36e>
 80077fc:	f000 809f 	beq.w	800793e <_dtoa_r+0x4ee>
 8007800:	f1cb 0600 	rsb	r6, fp, #0
 8007804:	4ba1      	ldr	r3, [pc, #644]	; (8007a8c <_dtoa_r+0x63c>)
 8007806:	4fa2      	ldr	r7, [pc, #648]	; (8007a90 <_dtoa_r+0x640>)
 8007808:	f006 020f 	and.w	r2, r6, #15
 800780c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	ec51 0b18 	vmov	r0, r1, d8
 8007818:	f7f8 fef6 	bl	8000608 <__aeabi_dmul>
 800781c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007820:	1136      	asrs	r6, r6, #4
 8007822:	2300      	movs	r3, #0
 8007824:	2502      	movs	r5, #2
 8007826:	2e00      	cmp	r6, #0
 8007828:	d17e      	bne.n	8007928 <_dtoa_r+0x4d8>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1d0      	bne.n	80077d0 <_dtoa_r+0x380>
 800782e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007830:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 8084 	beq.w	8007942 <_dtoa_r+0x4f2>
 800783a:	4b96      	ldr	r3, [pc, #600]	; (8007a94 <_dtoa_r+0x644>)
 800783c:	2200      	movs	r2, #0
 800783e:	4640      	mov	r0, r8
 8007840:	4649      	mov	r1, r9
 8007842:	f7f9 f953 	bl	8000aec <__aeabi_dcmplt>
 8007846:	2800      	cmp	r0, #0
 8007848:	d07b      	beq.n	8007942 <_dtoa_r+0x4f2>
 800784a:	9b04      	ldr	r3, [sp, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d078      	beq.n	8007942 <_dtoa_r+0x4f2>
 8007850:	9b01      	ldr	r3, [sp, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	dd39      	ble.n	80078ca <_dtoa_r+0x47a>
 8007856:	4b90      	ldr	r3, [pc, #576]	; (8007a98 <_dtoa_r+0x648>)
 8007858:	2200      	movs	r2, #0
 800785a:	4640      	mov	r0, r8
 800785c:	4649      	mov	r1, r9
 800785e:	f7f8 fed3 	bl	8000608 <__aeabi_dmul>
 8007862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007866:	9e01      	ldr	r6, [sp, #4]
 8007868:	f10b 37ff 	add.w	r7, fp, #4294967295
 800786c:	3501      	adds	r5, #1
 800786e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007872:	4628      	mov	r0, r5
 8007874:	f7f8 fe5e 	bl	8000534 <__aeabi_i2d>
 8007878:	4642      	mov	r2, r8
 800787a:	464b      	mov	r3, r9
 800787c:	f7f8 fec4 	bl	8000608 <__aeabi_dmul>
 8007880:	4b86      	ldr	r3, [pc, #536]	; (8007a9c <_dtoa_r+0x64c>)
 8007882:	2200      	movs	r2, #0
 8007884:	f7f8 fd0a 	bl	800029c <__adddf3>
 8007888:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800788c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007890:	9303      	str	r3, [sp, #12]
 8007892:	2e00      	cmp	r6, #0
 8007894:	d158      	bne.n	8007948 <_dtoa_r+0x4f8>
 8007896:	4b82      	ldr	r3, [pc, #520]	; (8007aa0 <_dtoa_r+0x650>)
 8007898:	2200      	movs	r2, #0
 800789a:	4640      	mov	r0, r8
 800789c:	4649      	mov	r1, r9
 800789e:	f7f8 fcfb 	bl	8000298 <__aeabi_dsub>
 80078a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078a6:	4680      	mov	r8, r0
 80078a8:	4689      	mov	r9, r1
 80078aa:	f7f9 f93d 	bl	8000b28 <__aeabi_dcmpgt>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f040 8296 	bne.w	8007de0 <_dtoa_r+0x990>
 80078b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80078b8:	4640      	mov	r0, r8
 80078ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078be:	4649      	mov	r1, r9
 80078c0:	f7f9 f914 	bl	8000aec <__aeabi_dcmplt>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	f040 8289 	bne.w	8007ddc <_dtoa_r+0x98c>
 80078ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80078ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f2c0 814e 	blt.w	8007b72 <_dtoa_r+0x722>
 80078d6:	f1bb 0f0e 	cmp.w	fp, #14
 80078da:	f300 814a 	bgt.w	8007b72 <_dtoa_r+0x722>
 80078de:	4b6b      	ldr	r3, [pc, #428]	; (8007a8c <_dtoa_r+0x63c>)
 80078e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f280 80dc 	bge.w	8007aa8 <_dtoa_r+0x658>
 80078f0:	9b04      	ldr	r3, [sp, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f300 80d8 	bgt.w	8007aa8 <_dtoa_r+0x658>
 80078f8:	f040 826f 	bne.w	8007dda <_dtoa_r+0x98a>
 80078fc:	4b68      	ldr	r3, [pc, #416]	; (8007aa0 <_dtoa_r+0x650>)
 80078fe:	2200      	movs	r2, #0
 8007900:	4640      	mov	r0, r8
 8007902:	4649      	mov	r1, r9
 8007904:	f7f8 fe80 	bl	8000608 <__aeabi_dmul>
 8007908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800790c:	f7f9 f902 	bl	8000b14 <__aeabi_dcmpge>
 8007910:	9e04      	ldr	r6, [sp, #16]
 8007912:	4637      	mov	r7, r6
 8007914:	2800      	cmp	r0, #0
 8007916:	f040 8245 	bne.w	8007da4 <_dtoa_r+0x954>
 800791a:	9d00      	ldr	r5, [sp, #0]
 800791c:	2331      	movs	r3, #49	; 0x31
 800791e:	f805 3b01 	strb.w	r3, [r5], #1
 8007922:	f10b 0b01 	add.w	fp, fp, #1
 8007926:	e241      	b.n	8007dac <_dtoa_r+0x95c>
 8007928:	07f2      	lsls	r2, r6, #31
 800792a:	d505      	bpl.n	8007938 <_dtoa_r+0x4e8>
 800792c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007930:	f7f8 fe6a 	bl	8000608 <__aeabi_dmul>
 8007934:	3501      	adds	r5, #1
 8007936:	2301      	movs	r3, #1
 8007938:	1076      	asrs	r6, r6, #1
 800793a:	3708      	adds	r7, #8
 800793c:	e773      	b.n	8007826 <_dtoa_r+0x3d6>
 800793e:	2502      	movs	r5, #2
 8007940:	e775      	b.n	800782e <_dtoa_r+0x3de>
 8007942:	9e04      	ldr	r6, [sp, #16]
 8007944:	465f      	mov	r7, fp
 8007946:	e792      	b.n	800786e <_dtoa_r+0x41e>
 8007948:	9900      	ldr	r1, [sp, #0]
 800794a:	4b50      	ldr	r3, [pc, #320]	; (8007a8c <_dtoa_r+0x63c>)
 800794c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007950:	4431      	add	r1, r6
 8007952:	9102      	str	r1, [sp, #8]
 8007954:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007956:	eeb0 9a47 	vmov.f32	s18, s14
 800795a:	eef0 9a67 	vmov.f32	s19, s15
 800795e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007962:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007966:	2900      	cmp	r1, #0
 8007968:	d044      	beq.n	80079f4 <_dtoa_r+0x5a4>
 800796a:	494e      	ldr	r1, [pc, #312]	; (8007aa4 <_dtoa_r+0x654>)
 800796c:	2000      	movs	r0, #0
 800796e:	f7f8 ff75 	bl	800085c <__aeabi_ddiv>
 8007972:	ec53 2b19 	vmov	r2, r3, d9
 8007976:	f7f8 fc8f 	bl	8000298 <__aeabi_dsub>
 800797a:	9d00      	ldr	r5, [sp, #0]
 800797c:	ec41 0b19 	vmov	d9, r0, r1
 8007980:	4649      	mov	r1, r9
 8007982:	4640      	mov	r0, r8
 8007984:	f7f9 f8f0 	bl	8000b68 <__aeabi_d2iz>
 8007988:	4606      	mov	r6, r0
 800798a:	f7f8 fdd3 	bl	8000534 <__aeabi_i2d>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4640      	mov	r0, r8
 8007994:	4649      	mov	r1, r9
 8007996:	f7f8 fc7f 	bl	8000298 <__aeabi_dsub>
 800799a:	3630      	adds	r6, #48	; 0x30
 800799c:	f805 6b01 	strb.w	r6, [r5], #1
 80079a0:	ec53 2b19 	vmov	r2, r3, d9
 80079a4:	4680      	mov	r8, r0
 80079a6:	4689      	mov	r9, r1
 80079a8:	f7f9 f8a0 	bl	8000aec <__aeabi_dcmplt>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	d164      	bne.n	8007a7a <_dtoa_r+0x62a>
 80079b0:	4642      	mov	r2, r8
 80079b2:	464b      	mov	r3, r9
 80079b4:	4937      	ldr	r1, [pc, #220]	; (8007a94 <_dtoa_r+0x644>)
 80079b6:	2000      	movs	r0, #0
 80079b8:	f7f8 fc6e 	bl	8000298 <__aeabi_dsub>
 80079bc:	ec53 2b19 	vmov	r2, r3, d9
 80079c0:	f7f9 f894 	bl	8000aec <__aeabi_dcmplt>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	f040 80b6 	bne.w	8007b36 <_dtoa_r+0x6e6>
 80079ca:	9b02      	ldr	r3, [sp, #8]
 80079cc:	429d      	cmp	r5, r3
 80079ce:	f43f af7c 	beq.w	80078ca <_dtoa_r+0x47a>
 80079d2:	4b31      	ldr	r3, [pc, #196]	; (8007a98 <_dtoa_r+0x648>)
 80079d4:	ec51 0b19 	vmov	r0, r1, d9
 80079d8:	2200      	movs	r2, #0
 80079da:	f7f8 fe15 	bl	8000608 <__aeabi_dmul>
 80079de:	4b2e      	ldr	r3, [pc, #184]	; (8007a98 <_dtoa_r+0x648>)
 80079e0:	ec41 0b19 	vmov	d9, r0, r1
 80079e4:	2200      	movs	r2, #0
 80079e6:	4640      	mov	r0, r8
 80079e8:	4649      	mov	r1, r9
 80079ea:	f7f8 fe0d 	bl	8000608 <__aeabi_dmul>
 80079ee:	4680      	mov	r8, r0
 80079f0:	4689      	mov	r9, r1
 80079f2:	e7c5      	b.n	8007980 <_dtoa_r+0x530>
 80079f4:	ec51 0b17 	vmov	r0, r1, d7
 80079f8:	f7f8 fe06 	bl	8000608 <__aeabi_dmul>
 80079fc:	9b02      	ldr	r3, [sp, #8]
 80079fe:	9d00      	ldr	r5, [sp, #0]
 8007a00:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a02:	ec41 0b19 	vmov	d9, r0, r1
 8007a06:	4649      	mov	r1, r9
 8007a08:	4640      	mov	r0, r8
 8007a0a:	f7f9 f8ad 	bl	8000b68 <__aeabi_d2iz>
 8007a0e:	4606      	mov	r6, r0
 8007a10:	f7f8 fd90 	bl	8000534 <__aeabi_i2d>
 8007a14:	3630      	adds	r6, #48	; 0x30
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4640      	mov	r0, r8
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	f7f8 fc3b 	bl	8000298 <__aeabi_dsub>
 8007a22:	f805 6b01 	strb.w	r6, [r5], #1
 8007a26:	9b02      	ldr	r3, [sp, #8]
 8007a28:	429d      	cmp	r5, r3
 8007a2a:	4680      	mov	r8, r0
 8007a2c:	4689      	mov	r9, r1
 8007a2e:	f04f 0200 	mov.w	r2, #0
 8007a32:	d124      	bne.n	8007a7e <_dtoa_r+0x62e>
 8007a34:	4b1b      	ldr	r3, [pc, #108]	; (8007aa4 <_dtoa_r+0x654>)
 8007a36:	ec51 0b19 	vmov	r0, r1, d9
 8007a3a:	f7f8 fc2f 	bl	800029c <__adddf3>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4640      	mov	r0, r8
 8007a44:	4649      	mov	r1, r9
 8007a46:	f7f9 f86f 	bl	8000b28 <__aeabi_dcmpgt>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	d173      	bne.n	8007b36 <_dtoa_r+0x6e6>
 8007a4e:	ec53 2b19 	vmov	r2, r3, d9
 8007a52:	4914      	ldr	r1, [pc, #80]	; (8007aa4 <_dtoa_r+0x654>)
 8007a54:	2000      	movs	r0, #0
 8007a56:	f7f8 fc1f 	bl	8000298 <__aeabi_dsub>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4640      	mov	r0, r8
 8007a60:	4649      	mov	r1, r9
 8007a62:	f7f9 f843 	bl	8000aec <__aeabi_dcmplt>
 8007a66:	2800      	cmp	r0, #0
 8007a68:	f43f af2f 	beq.w	80078ca <_dtoa_r+0x47a>
 8007a6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a6e:	1e6b      	subs	r3, r5, #1
 8007a70:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a76:	2b30      	cmp	r3, #48	; 0x30
 8007a78:	d0f8      	beq.n	8007a6c <_dtoa_r+0x61c>
 8007a7a:	46bb      	mov	fp, r7
 8007a7c:	e04a      	b.n	8007b14 <_dtoa_r+0x6c4>
 8007a7e:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <_dtoa_r+0x648>)
 8007a80:	f7f8 fdc2 	bl	8000608 <__aeabi_dmul>
 8007a84:	4680      	mov	r8, r0
 8007a86:	4689      	mov	r9, r1
 8007a88:	e7bd      	b.n	8007a06 <_dtoa_r+0x5b6>
 8007a8a:	bf00      	nop
 8007a8c:	0800b5c8 	.word	0x0800b5c8
 8007a90:	0800b5a0 	.word	0x0800b5a0
 8007a94:	3ff00000 	.word	0x3ff00000
 8007a98:	40240000 	.word	0x40240000
 8007a9c:	401c0000 	.word	0x401c0000
 8007aa0:	40140000 	.word	0x40140000
 8007aa4:	3fe00000 	.word	0x3fe00000
 8007aa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007aac:	9d00      	ldr	r5, [sp, #0]
 8007aae:	4642      	mov	r2, r8
 8007ab0:	464b      	mov	r3, r9
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	4639      	mov	r1, r7
 8007ab6:	f7f8 fed1 	bl	800085c <__aeabi_ddiv>
 8007aba:	f7f9 f855 	bl	8000b68 <__aeabi_d2iz>
 8007abe:	9001      	str	r0, [sp, #4]
 8007ac0:	f7f8 fd38 	bl	8000534 <__aeabi_i2d>
 8007ac4:	4642      	mov	r2, r8
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	f7f8 fd9e 	bl	8000608 <__aeabi_dmul>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	4639      	mov	r1, r7
 8007ad4:	f7f8 fbe0 	bl	8000298 <__aeabi_dsub>
 8007ad8:	9e01      	ldr	r6, [sp, #4]
 8007ada:	9f04      	ldr	r7, [sp, #16]
 8007adc:	3630      	adds	r6, #48	; 0x30
 8007ade:	f805 6b01 	strb.w	r6, [r5], #1
 8007ae2:	9e00      	ldr	r6, [sp, #0]
 8007ae4:	1bae      	subs	r6, r5, r6
 8007ae6:	42b7      	cmp	r7, r6
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	d134      	bne.n	8007b58 <_dtoa_r+0x708>
 8007aee:	f7f8 fbd5 	bl	800029c <__adddf3>
 8007af2:	4642      	mov	r2, r8
 8007af4:	464b      	mov	r3, r9
 8007af6:	4606      	mov	r6, r0
 8007af8:	460f      	mov	r7, r1
 8007afa:	f7f9 f815 	bl	8000b28 <__aeabi_dcmpgt>
 8007afe:	b9c8      	cbnz	r0, 8007b34 <_dtoa_r+0x6e4>
 8007b00:	4642      	mov	r2, r8
 8007b02:	464b      	mov	r3, r9
 8007b04:	4630      	mov	r0, r6
 8007b06:	4639      	mov	r1, r7
 8007b08:	f7f8 ffe6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b0c:	b110      	cbz	r0, 8007b14 <_dtoa_r+0x6c4>
 8007b0e:	9b01      	ldr	r3, [sp, #4]
 8007b10:	07db      	lsls	r3, r3, #31
 8007b12:	d40f      	bmi.n	8007b34 <_dtoa_r+0x6e4>
 8007b14:	4651      	mov	r1, sl
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 fbcc 	bl	80082b4 <_Bfree>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b20:	702b      	strb	r3, [r5, #0]
 8007b22:	f10b 0301 	add.w	r3, fp, #1
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f43f ace2 	beq.w	80074f4 <_dtoa_r+0xa4>
 8007b30:	601d      	str	r5, [r3, #0]
 8007b32:	e4df      	b.n	80074f4 <_dtoa_r+0xa4>
 8007b34:	465f      	mov	r7, fp
 8007b36:	462b      	mov	r3, r5
 8007b38:	461d      	mov	r5, r3
 8007b3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b3e:	2a39      	cmp	r2, #57	; 0x39
 8007b40:	d106      	bne.n	8007b50 <_dtoa_r+0x700>
 8007b42:	9a00      	ldr	r2, [sp, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d1f7      	bne.n	8007b38 <_dtoa_r+0x6e8>
 8007b48:	9900      	ldr	r1, [sp, #0]
 8007b4a:	2230      	movs	r2, #48	; 0x30
 8007b4c:	3701      	adds	r7, #1
 8007b4e:	700a      	strb	r2, [r1, #0]
 8007b50:	781a      	ldrb	r2, [r3, #0]
 8007b52:	3201      	adds	r2, #1
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	e790      	b.n	8007a7a <_dtoa_r+0x62a>
 8007b58:	4ba3      	ldr	r3, [pc, #652]	; (8007de8 <_dtoa_r+0x998>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f7f8 fd54 	bl	8000608 <__aeabi_dmul>
 8007b60:	2200      	movs	r2, #0
 8007b62:	2300      	movs	r3, #0
 8007b64:	4606      	mov	r6, r0
 8007b66:	460f      	mov	r7, r1
 8007b68:	f7f8 ffb6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	d09e      	beq.n	8007aae <_dtoa_r+0x65e>
 8007b70:	e7d0      	b.n	8007b14 <_dtoa_r+0x6c4>
 8007b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b74:	2a00      	cmp	r2, #0
 8007b76:	f000 80ca 	beq.w	8007d0e <_dtoa_r+0x8be>
 8007b7a:	9a07      	ldr	r2, [sp, #28]
 8007b7c:	2a01      	cmp	r2, #1
 8007b7e:	f300 80ad 	bgt.w	8007cdc <_dtoa_r+0x88c>
 8007b82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b84:	2a00      	cmp	r2, #0
 8007b86:	f000 80a5 	beq.w	8007cd4 <_dtoa_r+0x884>
 8007b8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b8e:	9e08      	ldr	r6, [sp, #32]
 8007b90:	9d05      	ldr	r5, [sp, #20]
 8007b92:	9a05      	ldr	r2, [sp, #20]
 8007b94:	441a      	add	r2, r3
 8007b96:	9205      	str	r2, [sp, #20]
 8007b98:	9a06      	ldr	r2, [sp, #24]
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	441a      	add	r2, r3
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	9206      	str	r2, [sp, #24]
 8007ba2:	f000 fc3d 	bl	8008420 <__i2b>
 8007ba6:	4607      	mov	r7, r0
 8007ba8:	b165      	cbz	r5, 8007bc4 <_dtoa_r+0x774>
 8007baa:	9b06      	ldr	r3, [sp, #24]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dd09      	ble.n	8007bc4 <_dtoa_r+0x774>
 8007bb0:	42ab      	cmp	r3, r5
 8007bb2:	9a05      	ldr	r2, [sp, #20]
 8007bb4:	bfa8      	it	ge
 8007bb6:	462b      	movge	r3, r5
 8007bb8:	1ad2      	subs	r2, r2, r3
 8007bba:	9205      	str	r2, [sp, #20]
 8007bbc:	9a06      	ldr	r2, [sp, #24]
 8007bbe:	1aed      	subs	r5, r5, r3
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	9306      	str	r3, [sp, #24]
 8007bc4:	9b08      	ldr	r3, [sp, #32]
 8007bc6:	b1f3      	cbz	r3, 8007c06 <_dtoa_r+0x7b6>
 8007bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 80a3 	beq.w	8007d16 <_dtoa_r+0x8c6>
 8007bd0:	2e00      	cmp	r6, #0
 8007bd2:	dd10      	ble.n	8007bf6 <_dtoa_r+0x7a6>
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	4632      	mov	r2, r6
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 fce1 	bl	80085a0 <__pow5mult>
 8007bde:	4652      	mov	r2, sl
 8007be0:	4601      	mov	r1, r0
 8007be2:	4607      	mov	r7, r0
 8007be4:	4620      	mov	r0, r4
 8007be6:	f000 fc31 	bl	800844c <__multiply>
 8007bea:	4651      	mov	r1, sl
 8007bec:	4680      	mov	r8, r0
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f000 fb60 	bl	80082b4 <_Bfree>
 8007bf4:	46c2      	mov	sl, r8
 8007bf6:	9b08      	ldr	r3, [sp, #32]
 8007bf8:	1b9a      	subs	r2, r3, r6
 8007bfa:	d004      	beq.n	8007c06 <_dtoa_r+0x7b6>
 8007bfc:	4651      	mov	r1, sl
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f000 fcce 	bl	80085a0 <__pow5mult>
 8007c04:	4682      	mov	sl, r0
 8007c06:	2101      	movs	r1, #1
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f000 fc09 	bl	8008420 <__i2b>
 8007c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	4606      	mov	r6, r0
 8007c14:	f340 8081 	ble.w	8007d1a <_dtoa_r+0x8ca>
 8007c18:	461a      	mov	r2, r3
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 fcbf 	bl	80085a0 <__pow5mult>
 8007c22:	9b07      	ldr	r3, [sp, #28]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	4606      	mov	r6, r0
 8007c28:	dd7a      	ble.n	8007d20 <_dtoa_r+0x8d0>
 8007c2a:	f04f 0800 	mov.w	r8, #0
 8007c2e:	6933      	ldr	r3, [r6, #16]
 8007c30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c34:	6918      	ldr	r0, [r3, #16]
 8007c36:	f000 fba5 	bl	8008384 <__hi0bits>
 8007c3a:	f1c0 0020 	rsb	r0, r0, #32
 8007c3e:	9b06      	ldr	r3, [sp, #24]
 8007c40:	4418      	add	r0, r3
 8007c42:	f010 001f 	ands.w	r0, r0, #31
 8007c46:	f000 8094 	beq.w	8007d72 <_dtoa_r+0x922>
 8007c4a:	f1c0 0320 	rsb	r3, r0, #32
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	f340 8085 	ble.w	8007d5e <_dtoa_r+0x90e>
 8007c54:	9b05      	ldr	r3, [sp, #20]
 8007c56:	f1c0 001c 	rsb	r0, r0, #28
 8007c5a:	4403      	add	r3, r0
 8007c5c:	9305      	str	r3, [sp, #20]
 8007c5e:	9b06      	ldr	r3, [sp, #24]
 8007c60:	4403      	add	r3, r0
 8007c62:	4405      	add	r5, r0
 8007c64:	9306      	str	r3, [sp, #24]
 8007c66:	9b05      	ldr	r3, [sp, #20]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	dd05      	ble.n	8007c78 <_dtoa_r+0x828>
 8007c6c:	4651      	mov	r1, sl
 8007c6e:	461a      	mov	r2, r3
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 fcef 	bl	8008654 <__lshift>
 8007c76:	4682      	mov	sl, r0
 8007c78:	9b06      	ldr	r3, [sp, #24]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	dd05      	ble.n	8007c8a <_dtoa_r+0x83a>
 8007c7e:	4631      	mov	r1, r6
 8007c80:	461a      	mov	r2, r3
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 fce6 	bl	8008654 <__lshift>
 8007c88:	4606      	mov	r6, r0
 8007c8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d072      	beq.n	8007d76 <_dtoa_r+0x926>
 8007c90:	4631      	mov	r1, r6
 8007c92:	4650      	mov	r0, sl
 8007c94:	f000 fd4a 	bl	800872c <__mcmp>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	da6c      	bge.n	8007d76 <_dtoa_r+0x926>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	4651      	mov	r1, sl
 8007ca0:	220a      	movs	r2, #10
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 fb28 	bl	80082f8 <__multadd>
 8007ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007caa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cae:	4682      	mov	sl, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 81b0 	beq.w	8008016 <_dtoa_r+0xbc6>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4639      	mov	r1, r7
 8007cba:	220a      	movs	r2, #10
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f000 fb1b 	bl	80082f8 <__multadd>
 8007cc2:	9b01      	ldr	r3, [sp, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	4607      	mov	r7, r0
 8007cc8:	f300 8096 	bgt.w	8007df8 <_dtoa_r+0x9a8>
 8007ccc:	9b07      	ldr	r3, [sp, #28]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	dc59      	bgt.n	8007d86 <_dtoa_r+0x936>
 8007cd2:	e091      	b.n	8007df8 <_dtoa_r+0x9a8>
 8007cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cda:	e758      	b.n	8007b8e <_dtoa_r+0x73e>
 8007cdc:	9b04      	ldr	r3, [sp, #16]
 8007cde:	1e5e      	subs	r6, r3, #1
 8007ce0:	9b08      	ldr	r3, [sp, #32]
 8007ce2:	42b3      	cmp	r3, r6
 8007ce4:	bfbf      	itttt	lt
 8007ce6:	9b08      	ldrlt	r3, [sp, #32]
 8007ce8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007cea:	9608      	strlt	r6, [sp, #32]
 8007cec:	1af3      	sublt	r3, r6, r3
 8007cee:	bfb4      	ite	lt
 8007cf0:	18d2      	addlt	r2, r2, r3
 8007cf2:	1b9e      	subge	r6, r3, r6
 8007cf4:	9b04      	ldr	r3, [sp, #16]
 8007cf6:	bfbc      	itt	lt
 8007cf8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007cfa:	2600      	movlt	r6, #0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	bfb7      	itett	lt
 8007d00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007d04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007d08:	1a9d      	sublt	r5, r3, r2
 8007d0a:	2300      	movlt	r3, #0
 8007d0c:	e741      	b.n	8007b92 <_dtoa_r+0x742>
 8007d0e:	9e08      	ldr	r6, [sp, #32]
 8007d10:	9d05      	ldr	r5, [sp, #20]
 8007d12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d14:	e748      	b.n	8007ba8 <_dtoa_r+0x758>
 8007d16:	9a08      	ldr	r2, [sp, #32]
 8007d18:	e770      	b.n	8007bfc <_dtoa_r+0x7ac>
 8007d1a:	9b07      	ldr	r3, [sp, #28]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	dc19      	bgt.n	8007d54 <_dtoa_r+0x904>
 8007d20:	9b02      	ldr	r3, [sp, #8]
 8007d22:	b9bb      	cbnz	r3, 8007d54 <_dtoa_r+0x904>
 8007d24:	9b03      	ldr	r3, [sp, #12]
 8007d26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d2a:	b99b      	cbnz	r3, 8007d54 <_dtoa_r+0x904>
 8007d2c:	9b03      	ldr	r3, [sp, #12]
 8007d2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d32:	0d1b      	lsrs	r3, r3, #20
 8007d34:	051b      	lsls	r3, r3, #20
 8007d36:	b183      	cbz	r3, 8007d5a <_dtoa_r+0x90a>
 8007d38:	9b05      	ldr	r3, [sp, #20]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	9305      	str	r3, [sp, #20]
 8007d3e:	9b06      	ldr	r3, [sp, #24]
 8007d40:	3301      	adds	r3, #1
 8007d42:	9306      	str	r3, [sp, #24]
 8007d44:	f04f 0801 	mov.w	r8, #1
 8007d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f47f af6f 	bne.w	8007c2e <_dtoa_r+0x7de>
 8007d50:	2001      	movs	r0, #1
 8007d52:	e774      	b.n	8007c3e <_dtoa_r+0x7ee>
 8007d54:	f04f 0800 	mov.w	r8, #0
 8007d58:	e7f6      	b.n	8007d48 <_dtoa_r+0x8f8>
 8007d5a:	4698      	mov	r8, r3
 8007d5c:	e7f4      	b.n	8007d48 <_dtoa_r+0x8f8>
 8007d5e:	d082      	beq.n	8007c66 <_dtoa_r+0x816>
 8007d60:	9a05      	ldr	r2, [sp, #20]
 8007d62:	331c      	adds	r3, #28
 8007d64:	441a      	add	r2, r3
 8007d66:	9205      	str	r2, [sp, #20]
 8007d68:	9a06      	ldr	r2, [sp, #24]
 8007d6a:	441a      	add	r2, r3
 8007d6c:	441d      	add	r5, r3
 8007d6e:	9206      	str	r2, [sp, #24]
 8007d70:	e779      	b.n	8007c66 <_dtoa_r+0x816>
 8007d72:	4603      	mov	r3, r0
 8007d74:	e7f4      	b.n	8007d60 <_dtoa_r+0x910>
 8007d76:	9b04      	ldr	r3, [sp, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	dc37      	bgt.n	8007dec <_dtoa_r+0x99c>
 8007d7c:	9b07      	ldr	r3, [sp, #28]
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	dd34      	ble.n	8007dec <_dtoa_r+0x99c>
 8007d82:	9b04      	ldr	r3, [sp, #16]
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	b963      	cbnz	r3, 8007da4 <_dtoa_r+0x954>
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	2205      	movs	r2, #5
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 fab2 	bl	80082f8 <__multadd>
 8007d94:	4601      	mov	r1, r0
 8007d96:	4606      	mov	r6, r0
 8007d98:	4650      	mov	r0, sl
 8007d9a:	f000 fcc7 	bl	800872c <__mcmp>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	f73f adbb 	bgt.w	800791a <_dtoa_r+0x4ca>
 8007da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da6:	9d00      	ldr	r5, [sp, #0]
 8007da8:	ea6f 0b03 	mvn.w	fp, r3
 8007dac:	f04f 0800 	mov.w	r8, #0
 8007db0:	4631      	mov	r1, r6
 8007db2:	4620      	mov	r0, r4
 8007db4:	f000 fa7e 	bl	80082b4 <_Bfree>
 8007db8:	2f00      	cmp	r7, #0
 8007dba:	f43f aeab 	beq.w	8007b14 <_dtoa_r+0x6c4>
 8007dbe:	f1b8 0f00 	cmp.w	r8, #0
 8007dc2:	d005      	beq.n	8007dd0 <_dtoa_r+0x980>
 8007dc4:	45b8      	cmp	r8, r7
 8007dc6:	d003      	beq.n	8007dd0 <_dtoa_r+0x980>
 8007dc8:	4641      	mov	r1, r8
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 fa72 	bl	80082b4 <_Bfree>
 8007dd0:	4639      	mov	r1, r7
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 fa6e 	bl	80082b4 <_Bfree>
 8007dd8:	e69c      	b.n	8007b14 <_dtoa_r+0x6c4>
 8007dda:	2600      	movs	r6, #0
 8007ddc:	4637      	mov	r7, r6
 8007dde:	e7e1      	b.n	8007da4 <_dtoa_r+0x954>
 8007de0:	46bb      	mov	fp, r7
 8007de2:	4637      	mov	r7, r6
 8007de4:	e599      	b.n	800791a <_dtoa_r+0x4ca>
 8007de6:	bf00      	nop
 8007de8:	40240000 	.word	0x40240000
 8007dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 80c8 	beq.w	8007f84 <_dtoa_r+0xb34>
 8007df4:	9b04      	ldr	r3, [sp, #16]
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	2d00      	cmp	r5, #0
 8007dfa:	dd05      	ble.n	8007e08 <_dtoa_r+0x9b8>
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	462a      	mov	r2, r5
 8007e00:	4620      	mov	r0, r4
 8007e02:	f000 fc27 	bl	8008654 <__lshift>
 8007e06:	4607      	mov	r7, r0
 8007e08:	f1b8 0f00 	cmp.w	r8, #0
 8007e0c:	d05b      	beq.n	8007ec6 <_dtoa_r+0xa76>
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 fa0f 	bl	8008234 <_Balloc>
 8007e16:	4605      	mov	r5, r0
 8007e18:	b928      	cbnz	r0, 8007e26 <_dtoa_r+0x9d6>
 8007e1a:	4b83      	ldr	r3, [pc, #524]	; (8008028 <_dtoa_r+0xbd8>)
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007e22:	f7ff bb2e 	b.w	8007482 <_dtoa_r+0x32>
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	3202      	adds	r2, #2
 8007e2a:	0092      	lsls	r2, r2, #2
 8007e2c:	f107 010c 	add.w	r1, r7, #12
 8007e30:	300c      	adds	r0, #12
 8007e32:	f7ff fa74 	bl	800731e <memcpy>
 8007e36:	2201      	movs	r2, #1
 8007e38:	4629      	mov	r1, r5
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 fc0a 	bl	8008654 <__lshift>
 8007e40:	9b00      	ldr	r3, [sp, #0]
 8007e42:	3301      	adds	r3, #1
 8007e44:	9304      	str	r3, [sp, #16]
 8007e46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	9308      	str	r3, [sp, #32]
 8007e4e:	9b02      	ldr	r3, [sp, #8]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	46b8      	mov	r8, r7
 8007e56:	9306      	str	r3, [sp, #24]
 8007e58:	4607      	mov	r7, r0
 8007e5a:	9b04      	ldr	r3, [sp, #16]
 8007e5c:	4631      	mov	r1, r6
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	4650      	mov	r0, sl
 8007e62:	9301      	str	r3, [sp, #4]
 8007e64:	f7ff fa69 	bl	800733a <quorem>
 8007e68:	4641      	mov	r1, r8
 8007e6a:	9002      	str	r0, [sp, #8]
 8007e6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e70:	4650      	mov	r0, sl
 8007e72:	f000 fc5b 	bl	800872c <__mcmp>
 8007e76:	463a      	mov	r2, r7
 8007e78:	9005      	str	r0, [sp, #20]
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f000 fc71 	bl	8008764 <__mdiff>
 8007e82:	68c2      	ldr	r2, [r0, #12]
 8007e84:	4605      	mov	r5, r0
 8007e86:	bb02      	cbnz	r2, 8007eca <_dtoa_r+0xa7a>
 8007e88:	4601      	mov	r1, r0
 8007e8a:	4650      	mov	r0, sl
 8007e8c:	f000 fc4e 	bl	800872c <__mcmp>
 8007e90:	4602      	mov	r2, r0
 8007e92:	4629      	mov	r1, r5
 8007e94:	4620      	mov	r0, r4
 8007e96:	9209      	str	r2, [sp, #36]	; 0x24
 8007e98:	f000 fa0c 	bl	80082b4 <_Bfree>
 8007e9c:	9b07      	ldr	r3, [sp, #28]
 8007e9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ea0:	9d04      	ldr	r5, [sp, #16]
 8007ea2:	ea43 0102 	orr.w	r1, r3, r2
 8007ea6:	9b06      	ldr	r3, [sp, #24]
 8007ea8:	4319      	orrs	r1, r3
 8007eaa:	d110      	bne.n	8007ece <_dtoa_r+0xa7e>
 8007eac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007eb0:	d029      	beq.n	8007f06 <_dtoa_r+0xab6>
 8007eb2:	9b05      	ldr	r3, [sp, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	dd02      	ble.n	8007ebe <_dtoa_r+0xa6e>
 8007eb8:	9b02      	ldr	r3, [sp, #8]
 8007eba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007ebe:	9b01      	ldr	r3, [sp, #4]
 8007ec0:	f883 9000 	strb.w	r9, [r3]
 8007ec4:	e774      	b.n	8007db0 <_dtoa_r+0x960>
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	e7ba      	b.n	8007e40 <_dtoa_r+0x9f0>
 8007eca:	2201      	movs	r2, #1
 8007ecc:	e7e1      	b.n	8007e92 <_dtoa_r+0xa42>
 8007ece:	9b05      	ldr	r3, [sp, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	db04      	blt.n	8007ede <_dtoa_r+0xa8e>
 8007ed4:	9907      	ldr	r1, [sp, #28]
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	9906      	ldr	r1, [sp, #24]
 8007eda:	430b      	orrs	r3, r1
 8007edc:	d120      	bne.n	8007f20 <_dtoa_r+0xad0>
 8007ede:	2a00      	cmp	r2, #0
 8007ee0:	dded      	ble.n	8007ebe <_dtoa_r+0xa6e>
 8007ee2:	4651      	mov	r1, sl
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 fbb4 	bl	8008654 <__lshift>
 8007eec:	4631      	mov	r1, r6
 8007eee:	4682      	mov	sl, r0
 8007ef0:	f000 fc1c 	bl	800872c <__mcmp>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	dc03      	bgt.n	8007f00 <_dtoa_r+0xab0>
 8007ef8:	d1e1      	bne.n	8007ebe <_dtoa_r+0xa6e>
 8007efa:	f019 0f01 	tst.w	r9, #1
 8007efe:	d0de      	beq.n	8007ebe <_dtoa_r+0xa6e>
 8007f00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f04:	d1d8      	bne.n	8007eb8 <_dtoa_r+0xa68>
 8007f06:	9a01      	ldr	r2, [sp, #4]
 8007f08:	2339      	movs	r3, #57	; 0x39
 8007f0a:	7013      	strb	r3, [r2, #0]
 8007f0c:	462b      	mov	r3, r5
 8007f0e:	461d      	mov	r5, r3
 8007f10:	3b01      	subs	r3, #1
 8007f12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f16:	2a39      	cmp	r2, #57	; 0x39
 8007f18:	d06c      	beq.n	8007ff4 <_dtoa_r+0xba4>
 8007f1a:	3201      	adds	r2, #1
 8007f1c:	701a      	strb	r2, [r3, #0]
 8007f1e:	e747      	b.n	8007db0 <_dtoa_r+0x960>
 8007f20:	2a00      	cmp	r2, #0
 8007f22:	dd07      	ble.n	8007f34 <_dtoa_r+0xae4>
 8007f24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f28:	d0ed      	beq.n	8007f06 <_dtoa_r+0xab6>
 8007f2a:	9a01      	ldr	r2, [sp, #4]
 8007f2c:	f109 0301 	add.w	r3, r9, #1
 8007f30:	7013      	strb	r3, [r2, #0]
 8007f32:	e73d      	b.n	8007db0 <_dtoa_r+0x960>
 8007f34:	9b04      	ldr	r3, [sp, #16]
 8007f36:	9a08      	ldr	r2, [sp, #32]
 8007f38:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d043      	beq.n	8007fc8 <_dtoa_r+0xb78>
 8007f40:	4651      	mov	r1, sl
 8007f42:	2300      	movs	r3, #0
 8007f44:	220a      	movs	r2, #10
 8007f46:	4620      	mov	r0, r4
 8007f48:	f000 f9d6 	bl	80082f8 <__multadd>
 8007f4c:	45b8      	cmp	r8, r7
 8007f4e:	4682      	mov	sl, r0
 8007f50:	f04f 0300 	mov.w	r3, #0
 8007f54:	f04f 020a 	mov.w	r2, #10
 8007f58:	4641      	mov	r1, r8
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	d107      	bne.n	8007f6e <_dtoa_r+0xb1e>
 8007f5e:	f000 f9cb 	bl	80082f8 <__multadd>
 8007f62:	4680      	mov	r8, r0
 8007f64:	4607      	mov	r7, r0
 8007f66:	9b04      	ldr	r3, [sp, #16]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	9304      	str	r3, [sp, #16]
 8007f6c:	e775      	b.n	8007e5a <_dtoa_r+0xa0a>
 8007f6e:	f000 f9c3 	bl	80082f8 <__multadd>
 8007f72:	4639      	mov	r1, r7
 8007f74:	4680      	mov	r8, r0
 8007f76:	2300      	movs	r3, #0
 8007f78:	220a      	movs	r2, #10
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 f9bc 	bl	80082f8 <__multadd>
 8007f80:	4607      	mov	r7, r0
 8007f82:	e7f0      	b.n	8007f66 <_dtoa_r+0xb16>
 8007f84:	9b04      	ldr	r3, [sp, #16]
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	9d00      	ldr	r5, [sp, #0]
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	4650      	mov	r0, sl
 8007f8e:	f7ff f9d4 	bl	800733a <quorem>
 8007f92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f96:	9b00      	ldr	r3, [sp, #0]
 8007f98:	f805 9b01 	strb.w	r9, [r5], #1
 8007f9c:	1aea      	subs	r2, r5, r3
 8007f9e:	9b01      	ldr	r3, [sp, #4]
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	dd07      	ble.n	8007fb4 <_dtoa_r+0xb64>
 8007fa4:	4651      	mov	r1, sl
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	220a      	movs	r2, #10
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 f9a4 	bl	80082f8 <__multadd>
 8007fb0:	4682      	mov	sl, r0
 8007fb2:	e7ea      	b.n	8007f8a <_dtoa_r+0xb3a>
 8007fb4:	9b01      	ldr	r3, [sp, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bfc8      	it	gt
 8007fba:	461d      	movgt	r5, r3
 8007fbc:	9b00      	ldr	r3, [sp, #0]
 8007fbe:	bfd8      	it	le
 8007fc0:	2501      	movle	r5, #1
 8007fc2:	441d      	add	r5, r3
 8007fc4:	f04f 0800 	mov.w	r8, #0
 8007fc8:	4651      	mov	r1, sl
 8007fca:	2201      	movs	r2, #1
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 fb41 	bl	8008654 <__lshift>
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4682      	mov	sl, r0
 8007fd6:	f000 fba9 	bl	800872c <__mcmp>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	dc96      	bgt.n	8007f0c <_dtoa_r+0xabc>
 8007fde:	d102      	bne.n	8007fe6 <_dtoa_r+0xb96>
 8007fe0:	f019 0f01 	tst.w	r9, #1
 8007fe4:	d192      	bne.n	8007f0c <_dtoa_r+0xabc>
 8007fe6:	462b      	mov	r3, r5
 8007fe8:	461d      	mov	r5, r3
 8007fea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fee:	2a30      	cmp	r2, #48	; 0x30
 8007ff0:	d0fa      	beq.n	8007fe8 <_dtoa_r+0xb98>
 8007ff2:	e6dd      	b.n	8007db0 <_dtoa_r+0x960>
 8007ff4:	9a00      	ldr	r2, [sp, #0]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d189      	bne.n	8007f0e <_dtoa_r+0xabe>
 8007ffa:	f10b 0b01 	add.w	fp, fp, #1
 8007ffe:	2331      	movs	r3, #49	; 0x31
 8008000:	e796      	b.n	8007f30 <_dtoa_r+0xae0>
 8008002:	4b0a      	ldr	r3, [pc, #40]	; (800802c <_dtoa_r+0xbdc>)
 8008004:	f7ff ba99 	b.w	800753a <_dtoa_r+0xea>
 8008008:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800800a:	2b00      	cmp	r3, #0
 800800c:	f47f aa6d 	bne.w	80074ea <_dtoa_r+0x9a>
 8008010:	4b07      	ldr	r3, [pc, #28]	; (8008030 <_dtoa_r+0xbe0>)
 8008012:	f7ff ba92 	b.w	800753a <_dtoa_r+0xea>
 8008016:	9b01      	ldr	r3, [sp, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	dcb5      	bgt.n	8007f88 <_dtoa_r+0xb38>
 800801c:	9b07      	ldr	r3, [sp, #28]
 800801e:	2b02      	cmp	r3, #2
 8008020:	f73f aeb1 	bgt.w	8007d86 <_dtoa_r+0x936>
 8008024:	e7b0      	b.n	8007f88 <_dtoa_r+0xb38>
 8008026:	bf00      	nop
 8008028:	0800b534 	.word	0x0800b534
 800802c:	0800b494 	.word	0x0800b494
 8008030:	0800b4b8 	.word	0x0800b4b8

08008034 <_free_r>:
 8008034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008036:	2900      	cmp	r1, #0
 8008038:	d044      	beq.n	80080c4 <_free_r+0x90>
 800803a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800803e:	9001      	str	r0, [sp, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f1a1 0404 	sub.w	r4, r1, #4
 8008046:	bfb8      	it	lt
 8008048:	18e4      	addlt	r4, r4, r3
 800804a:	f000 f8e7 	bl	800821c <__malloc_lock>
 800804e:	4a1e      	ldr	r2, [pc, #120]	; (80080c8 <_free_r+0x94>)
 8008050:	9801      	ldr	r0, [sp, #4]
 8008052:	6813      	ldr	r3, [r2, #0]
 8008054:	b933      	cbnz	r3, 8008064 <_free_r+0x30>
 8008056:	6063      	str	r3, [r4, #4]
 8008058:	6014      	str	r4, [r2, #0]
 800805a:	b003      	add	sp, #12
 800805c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008060:	f000 b8e2 	b.w	8008228 <__malloc_unlock>
 8008064:	42a3      	cmp	r3, r4
 8008066:	d908      	bls.n	800807a <_free_r+0x46>
 8008068:	6825      	ldr	r5, [r4, #0]
 800806a:	1961      	adds	r1, r4, r5
 800806c:	428b      	cmp	r3, r1
 800806e:	bf01      	itttt	eq
 8008070:	6819      	ldreq	r1, [r3, #0]
 8008072:	685b      	ldreq	r3, [r3, #4]
 8008074:	1949      	addeq	r1, r1, r5
 8008076:	6021      	streq	r1, [r4, #0]
 8008078:	e7ed      	b.n	8008056 <_free_r+0x22>
 800807a:	461a      	mov	r2, r3
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	b10b      	cbz	r3, 8008084 <_free_r+0x50>
 8008080:	42a3      	cmp	r3, r4
 8008082:	d9fa      	bls.n	800807a <_free_r+0x46>
 8008084:	6811      	ldr	r1, [r2, #0]
 8008086:	1855      	adds	r5, r2, r1
 8008088:	42a5      	cmp	r5, r4
 800808a:	d10b      	bne.n	80080a4 <_free_r+0x70>
 800808c:	6824      	ldr	r4, [r4, #0]
 800808e:	4421      	add	r1, r4
 8008090:	1854      	adds	r4, r2, r1
 8008092:	42a3      	cmp	r3, r4
 8008094:	6011      	str	r1, [r2, #0]
 8008096:	d1e0      	bne.n	800805a <_free_r+0x26>
 8008098:	681c      	ldr	r4, [r3, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	6053      	str	r3, [r2, #4]
 800809e:	440c      	add	r4, r1
 80080a0:	6014      	str	r4, [r2, #0]
 80080a2:	e7da      	b.n	800805a <_free_r+0x26>
 80080a4:	d902      	bls.n	80080ac <_free_r+0x78>
 80080a6:	230c      	movs	r3, #12
 80080a8:	6003      	str	r3, [r0, #0]
 80080aa:	e7d6      	b.n	800805a <_free_r+0x26>
 80080ac:	6825      	ldr	r5, [r4, #0]
 80080ae:	1961      	adds	r1, r4, r5
 80080b0:	428b      	cmp	r3, r1
 80080b2:	bf04      	itt	eq
 80080b4:	6819      	ldreq	r1, [r3, #0]
 80080b6:	685b      	ldreq	r3, [r3, #4]
 80080b8:	6063      	str	r3, [r4, #4]
 80080ba:	bf04      	itt	eq
 80080bc:	1949      	addeq	r1, r1, r5
 80080be:	6021      	streq	r1, [r4, #0]
 80080c0:	6054      	str	r4, [r2, #4]
 80080c2:	e7ca      	b.n	800805a <_free_r+0x26>
 80080c4:	b003      	add	sp, #12
 80080c6:	bd30      	pop	{r4, r5, pc}
 80080c8:	20000fa8 	.word	0x20000fa8

080080cc <malloc>:
 80080cc:	4b02      	ldr	r3, [pc, #8]	; (80080d8 <malloc+0xc>)
 80080ce:	4601      	mov	r1, r0
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	f000 b823 	b.w	800811c <_malloc_r>
 80080d6:	bf00      	nop
 80080d8:	200005d4 	.word	0x200005d4

080080dc <sbrk_aligned>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	4e0e      	ldr	r6, [pc, #56]	; (8008118 <sbrk_aligned+0x3c>)
 80080e0:	460c      	mov	r4, r1
 80080e2:	6831      	ldr	r1, [r6, #0]
 80080e4:	4605      	mov	r5, r0
 80080e6:	b911      	cbnz	r1, 80080ee <sbrk_aligned+0x12>
 80080e8:	f000 fe26 	bl	8008d38 <_sbrk_r>
 80080ec:	6030      	str	r0, [r6, #0]
 80080ee:	4621      	mov	r1, r4
 80080f0:	4628      	mov	r0, r5
 80080f2:	f000 fe21 	bl	8008d38 <_sbrk_r>
 80080f6:	1c43      	adds	r3, r0, #1
 80080f8:	d00a      	beq.n	8008110 <sbrk_aligned+0x34>
 80080fa:	1cc4      	adds	r4, r0, #3
 80080fc:	f024 0403 	bic.w	r4, r4, #3
 8008100:	42a0      	cmp	r0, r4
 8008102:	d007      	beq.n	8008114 <sbrk_aligned+0x38>
 8008104:	1a21      	subs	r1, r4, r0
 8008106:	4628      	mov	r0, r5
 8008108:	f000 fe16 	bl	8008d38 <_sbrk_r>
 800810c:	3001      	adds	r0, #1
 800810e:	d101      	bne.n	8008114 <sbrk_aligned+0x38>
 8008110:	f04f 34ff 	mov.w	r4, #4294967295
 8008114:	4620      	mov	r0, r4
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	20000fac 	.word	0x20000fac

0800811c <_malloc_r>:
 800811c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008120:	1ccd      	adds	r5, r1, #3
 8008122:	f025 0503 	bic.w	r5, r5, #3
 8008126:	3508      	adds	r5, #8
 8008128:	2d0c      	cmp	r5, #12
 800812a:	bf38      	it	cc
 800812c:	250c      	movcc	r5, #12
 800812e:	2d00      	cmp	r5, #0
 8008130:	4607      	mov	r7, r0
 8008132:	db01      	blt.n	8008138 <_malloc_r+0x1c>
 8008134:	42a9      	cmp	r1, r5
 8008136:	d905      	bls.n	8008144 <_malloc_r+0x28>
 8008138:	230c      	movs	r3, #12
 800813a:	603b      	str	r3, [r7, #0]
 800813c:	2600      	movs	r6, #0
 800813e:	4630      	mov	r0, r6
 8008140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008144:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008218 <_malloc_r+0xfc>
 8008148:	f000 f868 	bl	800821c <__malloc_lock>
 800814c:	f8d8 3000 	ldr.w	r3, [r8]
 8008150:	461c      	mov	r4, r3
 8008152:	bb5c      	cbnz	r4, 80081ac <_malloc_r+0x90>
 8008154:	4629      	mov	r1, r5
 8008156:	4638      	mov	r0, r7
 8008158:	f7ff ffc0 	bl	80080dc <sbrk_aligned>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	4604      	mov	r4, r0
 8008160:	d155      	bne.n	800820e <_malloc_r+0xf2>
 8008162:	f8d8 4000 	ldr.w	r4, [r8]
 8008166:	4626      	mov	r6, r4
 8008168:	2e00      	cmp	r6, #0
 800816a:	d145      	bne.n	80081f8 <_malloc_r+0xdc>
 800816c:	2c00      	cmp	r4, #0
 800816e:	d048      	beq.n	8008202 <_malloc_r+0xe6>
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	4631      	mov	r1, r6
 8008174:	4638      	mov	r0, r7
 8008176:	eb04 0903 	add.w	r9, r4, r3
 800817a:	f000 fddd 	bl	8008d38 <_sbrk_r>
 800817e:	4581      	cmp	r9, r0
 8008180:	d13f      	bne.n	8008202 <_malloc_r+0xe6>
 8008182:	6821      	ldr	r1, [r4, #0]
 8008184:	1a6d      	subs	r5, r5, r1
 8008186:	4629      	mov	r1, r5
 8008188:	4638      	mov	r0, r7
 800818a:	f7ff ffa7 	bl	80080dc <sbrk_aligned>
 800818e:	3001      	adds	r0, #1
 8008190:	d037      	beq.n	8008202 <_malloc_r+0xe6>
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	442b      	add	r3, r5
 8008196:	6023      	str	r3, [r4, #0]
 8008198:	f8d8 3000 	ldr.w	r3, [r8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d038      	beq.n	8008212 <_malloc_r+0xf6>
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	42a2      	cmp	r2, r4
 80081a4:	d12b      	bne.n	80081fe <_malloc_r+0xe2>
 80081a6:	2200      	movs	r2, #0
 80081a8:	605a      	str	r2, [r3, #4]
 80081aa:	e00f      	b.n	80081cc <_malloc_r+0xb0>
 80081ac:	6822      	ldr	r2, [r4, #0]
 80081ae:	1b52      	subs	r2, r2, r5
 80081b0:	d41f      	bmi.n	80081f2 <_malloc_r+0xd6>
 80081b2:	2a0b      	cmp	r2, #11
 80081b4:	d917      	bls.n	80081e6 <_malloc_r+0xca>
 80081b6:	1961      	adds	r1, r4, r5
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	6025      	str	r5, [r4, #0]
 80081bc:	bf18      	it	ne
 80081be:	6059      	strne	r1, [r3, #4]
 80081c0:	6863      	ldr	r3, [r4, #4]
 80081c2:	bf08      	it	eq
 80081c4:	f8c8 1000 	streq.w	r1, [r8]
 80081c8:	5162      	str	r2, [r4, r5]
 80081ca:	604b      	str	r3, [r1, #4]
 80081cc:	4638      	mov	r0, r7
 80081ce:	f104 060b 	add.w	r6, r4, #11
 80081d2:	f000 f829 	bl	8008228 <__malloc_unlock>
 80081d6:	f026 0607 	bic.w	r6, r6, #7
 80081da:	1d23      	adds	r3, r4, #4
 80081dc:	1af2      	subs	r2, r6, r3
 80081de:	d0ae      	beq.n	800813e <_malloc_r+0x22>
 80081e0:	1b9b      	subs	r3, r3, r6
 80081e2:	50a3      	str	r3, [r4, r2]
 80081e4:	e7ab      	b.n	800813e <_malloc_r+0x22>
 80081e6:	42a3      	cmp	r3, r4
 80081e8:	6862      	ldr	r2, [r4, #4]
 80081ea:	d1dd      	bne.n	80081a8 <_malloc_r+0x8c>
 80081ec:	f8c8 2000 	str.w	r2, [r8]
 80081f0:	e7ec      	b.n	80081cc <_malloc_r+0xb0>
 80081f2:	4623      	mov	r3, r4
 80081f4:	6864      	ldr	r4, [r4, #4]
 80081f6:	e7ac      	b.n	8008152 <_malloc_r+0x36>
 80081f8:	4634      	mov	r4, r6
 80081fa:	6876      	ldr	r6, [r6, #4]
 80081fc:	e7b4      	b.n	8008168 <_malloc_r+0x4c>
 80081fe:	4613      	mov	r3, r2
 8008200:	e7cc      	b.n	800819c <_malloc_r+0x80>
 8008202:	230c      	movs	r3, #12
 8008204:	603b      	str	r3, [r7, #0]
 8008206:	4638      	mov	r0, r7
 8008208:	f000 f80e 	bl	8008228 <__malloc_unlock>
 800820c:	e797      	b.n	800813e <_malloc_r+0x22>
 800820e:	6025      	str	r5, [r4, #0]
 8008210:	e7dc      	b.n	80081cc <_malloc_r+0xb0>
 8008212:	605b      	str	r3, [r3, #4]
 8008214:	deff      	udf	#255	; 0xff
 8008216:	bf00      	nop
 8008218:	20000fa8 	.word	0x20000fa8

0800821c <__malloc_lock>:
 800821c:	4801      	ldr	r0, [pc, #4]	; (8008224 <__malloc_lock+0x8>)
 800821e:	f7ff b87c 	b.w	800731a <__retarget_lock_acquire_recursive>
 8008222:	bf00      	nop
 8008224:	20000fa4 	.word	0x20000fa4

08008228 <__malloc_unlock>:
 8008228:	4801      	ldr	r0, [pc, #4]	; (8008230 <__malloc_unlock+0x8>)
 800822a:	f7ff b877 	b.w	800731c <__retarget_lock_release_recursive>
 800822e:	bf00      	nop
 8008230:	20000fa4 	.word	0x20000fa4

08008234 <_Balloc>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	69c6      	ldr	r6, [r0, #28]
 8008238:	4604      	mov	r4, r0
 800823a:	460d      	mov	r5, r1
 800823c:	b976      	cbnz	r6, 800825c <_Balloc+0x28>
 800823e:	2010      	movs	r0, #16
 8008240:	f7ff ff44 	bl	80080cc <malloc>
 8008244:	4602      	mov	r2, r0
 8008246:	61e0      	str	r0, [r4, #28]
 8008248:	b920      	cbnz	r0, 8008254 <_Balloc+0x20>
 800824a:	4b18      	ldr	r3, [pc, #96]	; (80082ac <_Balloc+0x78>)
 800824c:	4818      	ldr	r0, [pc, #96]	; (80082b0 <_Balloc+0x7c>)
 800824e:	216b      	movs	r1, #107	; 0x6b
 8008250:	f000 fd82 	bl	8008d58 <__assert_func>
 8008254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008258:	6006      	str	r6, [r0, #0]
 800825a:	60c6      	str	r6, [r0, #12]
 800825c:	69e6      	ldr	r6, [r4, #28]
 800825e:	68f3      	ldr	r3, [r6, #12]
 8008260:	b183      	cbz	r3, 8008284 <_Balloc+0x50>
 8008262:	69e3      	ldr	r3, [r4, #28]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800826a:	b9b8      	cbnz	r0, 800829c <_Balloc+0x68>
 800826c:	2101      	movs	r1, #1
 800826e:	fa01 f605 	lsl.w	r6, r1, r5
 8008272:	1d72      	adds	r2, r6, #5
 8008274:	0092      	lsls	r2, r2, #2
 8008276:	4620      	mov	r0, r4
 8008278:	f000 fd8c 	bl	8008d94 <_calloc_r>
 800827c:	b160      	cbz	r0, 8008298 <_Balloc+0x64>
 800827e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008282:	e00e      	b.n	80082a2 <_Balloc+0x6e>
 8008284:	2221      	movs	r2, #33	; 0x21
 8008286:	2104      	movs	r1, #4
 8008288:	4620      	mov	r0, r4
 800828a:	f000 fd83 	bl	8008d94 <_calloc_r>
 800828e:	69e3      	ldr	r3, [r4, #28]
 8008290:	60f0      	str	r0, [r6, #12]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1e4      	bne.n	8008262 <_Balloc+0x2e>
 8008298:	2000      	movs	r0, #0
 800829a:	bd70      	pop	{r4, r5, r6, pc}
 800829c:	6802      	ldr	r2, [r0, #0]
 800829e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082a2:	2300      	movs	r3, #0
 80082a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082a8:	e7f7      	b.n	800829a <_Balloc+0x66>
 80082aa:	bf00      	nop
 80082ac:	0800b4c5 	.word	0x0800b4c5
 80082b0:	0800b545 	.word	0x0800b545

080082b4 <_Bfree>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	69c6      	ldr	r6, [r0, #28]
 80082b8:	4605      	mov	r5, r0
 80082ba:	460c      	mov	r4, r1
 80082bc:	b976      	cbnz	r6, 80082dc <_Bfree+0x28>
 80082be:	2010      	movs	r0, #16
 80082c0:	f7ff ff04 	bl	80080cc <malloc>
 80082c4:	4602      	mov	r2, r0
 80082c6:	61e8      	str	r0, [r5, #28]
 80082c8:	b920      	cbnz	r0, 80082d4 <_Bfree+0x20>
 80082ca:	4b09      	ldr	r3, [pc, #36]	; (80082f0 <_Bfree+0x3c>)
 80082cc:	4809      	ldr	r0, [pc, #36]	; (80082f4 <_Bfree+0x40>)
 80082ce:	218f      	movs	r1, #143	; 0x8f
 80082d0:	f000 fd42 	bl	8008d58 <__assert_func>
 80082d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082d8:	6006      	str	r6, [r0, #0]
 80082da:	60c6      	str	r6, [r0, #12]
 80082dc:	b13c      	cbz	r4, 80082ee <_Bfree+0x3a>
 80082de:	69eb      	ldr	r3, [r5, #28]
 80082e0:	6862      	ldr	r2, [r4, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082e8:	6021      	str	r1, [r4, #0]
 80082ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082ee:	bd70      	pop	{r4, r5, r6, pc}
 80082f0:	0800b4c5 	.word	0x0800b4c5
 80082f4:	0800b545 	.word	0x0800b545

080082f8 <__multadd>:
 80082f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082fc:	690d      	ldr	r5, [r1, #16]
 80082fe:	4607      	mov	r7, r0
 8008300:	460c      	mov	r4, r1
 8008302:	461e      	mov	r6, r3
 8008304:	f101 0c14 	add.w	ip, r1, #20
 8008308:	2000      	movs	r0, #0
 800830a:	f8dc 3000 	ldr.w	r3, [ip]
 800830e:	b299      	uxth	r1, r3
 8008310:	fb02 6101 	mla	r1, r2, r1, r6
 8008314:	0c1e      	lsrs	r6, r3, #16
 8008316:	0c0b      	lsrs	r3, r1, #16
 8008318:	fb02 3306 	mla	r3, r2, r6, r3
 800831c:	b289      	uxth	r1, r1
 800831e:	3001      	adds	r0, #1
 8008320:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008324:	4285      	cmp	r5, r0
 8008326:	f84c 1b04 	str.w	r1, [ip], #4
 800832a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800832e:	dcec      	bgt.n	800830a <__multadd+0x12>
 8008330:	b30e      	cbz	r6, 8008376 <__multadd+0x7e>
 8008332:	68a3      	ldr	r3, [r4, #8]
 8008334:	42ab      	cmp	r3, r5
 8008336:	dc19      	bgt.n	800836c <__multadd+0x74>
 8008338:	6861      	ldr	r1, [r4, #4]
 800833a:	4638      	mov	r0, r7
 800833c:	3101      	adds	r1, #1
 800833e:	f7ff ff79 	bl	8008234 <_Balloc>
 8008342:	4680      	mov	r8, r0
 8008344:	b928      	cbnz	r0, 8008352 <__multadd+0x5a>
 8008346:	4602      	mov	r2, r0
 8008348:	4b0c      	ldr	r3, [pc, #48]	; (800837c <__multadd+0x84>)
 800834a:	480d      	ldr	r0, [pc, #52]	; (8008380 <__multadd+0x88>)
 800834c:	21ba      	movs	r1, #186	; 0xba
 800834e:	f000 fd03 	bl	8008d58 <__assert_func>
 8008352:	6922      	ldr	r2, [r4, #16]
 8008354:	3202      	adds	r2, #2
 8008356:	f104 010c 	add.w	r1, r4, #12
 800835a:	0092      	lsls	r2, r2, #2
 800835c:	300c      	adds	r0, #12
 800835e:	f7fe ffde 	bl	800731e <memcpy>
 8008362:	4621      	mov	r1, r4
 8008364:	4638      	mov	r0, r7
 8008366:	f7ff ffa5 	bl	80082b4 <_Bfree>
 800836a:	4644      	mov	r4, r8
 800836c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008370:	3501      	adds	r5, #1
 8008372:	615e      	str	r6, [r3, #20]
 8008374:	6125      	str	r5, [r4, #16]
 8008376:	4620      	mov	r0, r4
 8008378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800837c:	0800b534 	.word	0x0800b534
 8008380:	0800b545 	.word	0x0800b545

08008384 <__hi0bits>:
 8008384:	0c03      	lsrs	r3, r0, #16
 8008386:	041b      	lsls	r3, r3, #16
 8008388:	b9d3      	cbnz	r3, 80083c0 <__hi0bits+0x3c>
 800838a:	0400      	lsls	r0, r0, #16
 800838c:	2310      	movs	r3, #16
 800838e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008392:	bf04      	itt	eq
 8008394:	0200      	lsleq	r0, r0, #8
 8008396:	3308      	addeq	r3, #8
 8008398:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800839c:	bf04      	itt	eq
 800839e:	0100      	lsleq	r0, r0, #4
 80083a0:	3304      	addeq	r3, #4
 80083a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80083a6:	bf04      	itt	eq
 80083a8:	0080      	lsleq	r0, r0, #2
 80083aa:	3302      	addeq	r3, #2
 80083ac:	2800      	cmp	r0, #0
 80083ae:	db05      	blt.n	80083bc <__hi0bits+0x38>
 80083b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80083b4:	f103 0301 	add.w	r3, r3, #1
 80083b8:	bf08      	it	eq
 80083ba:	2320      	moveq	r3, #32
 80083bc:	4618      	mov	r0, r3
 80083be:	4770      	bx	lr
 80083c0:	2300      	movs	r3, #0
 80083c2:	e7e4      	b.n	800838e <__hi0bits+0xa>

080083c4 <__lo0bits>:
 80083c4:	6803      	ldr	r3, [r0, #0]
 80083c6:	f013 0207 	ands.w	r2, r3, #7
 80083ca:	d00c      	beq.n	80083e6 <__lo0bits+0x22>
 80083cc:	07d9      	lsls	r1, r3, #31
 80083ce:	d422      	bmi.n	8008416 <__lo0bits+0x52>
 80083d0:	079a      	lsls	r2, r3, #30
 80083d2:	bf49      	itett	mi
 80083d4:	085b      	lsrmi	r3, r3, #1
 80083d6:	089b      	lsrpl	r3, r3, #2
 80083d8:	6003      	strmi	r3, [r0, #0]
 80083da:	2201      	movmi	r2, #1
 80083dc:	bf5c      	itt	pl
 80083de:	6003      	strpl	r3, [r0, #0]
 80083e0:	2202      	movpl	r2, #2
 80083e2:	4610      	mov	r0, r2
 80083e4:	4770      	bx	lr
 80083e6:	b299      	uxth	r1, r3
 80083e8:	b909      	cbnz	r1, 80083ee <__lo0bits+0x2a>
 80083ea:	0c1b      	lsrs	r3, r3, #16
 80083ec:	2210      	movs	r2, #16
 80083ee:	b2d9      	uxtb	r1, r3
 80083f0:	b909      	cbnz	r1, 80083f6 <__lo0bits+0x32>
 80083f2:	3208      	adds	r2, #8
 80083f4:	0a1b      	lsrs	r3, r3, #8
 80083f6:	0719      	lsls	r1, r3, #28
 80083f8:	bf04      	itt	eq
 80083fa:	091b      	lsreq	r3, r3, #4
 80083fc:	3204      	addeq	r2, #4
 80083fe:	0799      	lsls	r1, r3, #30
 8008400:	bf04      	itt	eq
 8008402:	089b      	lsreq	r3, r3, #2
 8008404:	3202      	addeq	r2, #2
 8008406:	07d9      	lsls	r1, r3, #31
 8008408:	d403      	bmi.n	8008412 <__lo0bits+0x4e>
 800840a:	085b      	lsrs	r3, r3, #1
 800840c:	f102 0201 	add.w	r2, r2, #1
 8008410:	d003      	beq.n	800841a <__lo0bits+0x56>
 8008412:	6003      	str	r3, [r0, #0]
 8008414:	e7e5      	b.n	80083e2 <__lo0bits+0x1e>
 8008416:	2200      	movs	r2, #0
 8008418:	e7e3      	b.n	80083e2 <__lo0bits+0x1e>
 800841a:	2220      	movs	r2, #32
 800841c:	e7e1      	b.n	80083e2 <__lo0bits+0x1e>
	...

08008420 <__i2b>:
 8008420:	b510      	push	{r4, lr}
 8008422:	460c      	mov	r4, r1
 8008424:	2101      	movs	r1, #1
 8008426:	f7ff ff05 	bl	8008234 <_Balloc>
 800842a:	4602      	mov	r2, r0
 800842c:	b928      	cbnz	r0, 800843a <__i2b+0x1a>
 800842e:	4b05      	ldr	r3, [pc, #20]	; (8008444 <__i2b+0x24>)
 8008430:	4805      	ldr	r0, [pc, #20]	; (8008448 <__i2b+0x28>)
 8008432:	f240 1145 	movw	r1, #325	; 0x145
 8008436:	f000 fc8f 	bl	8008d58 <__assert_func>
 800843a:	2301      	movs	r3, #1
 800843c:	6144      	str	r4, [r0, #20]
 800843e:	6103      	str	r3, [r0, #16]
 8008440:	bd10      	pop	{r4, pc}
 8008442:	bf00      	nop
 8008444:	0800b534 	.word	0x0800b534
 8008448:	0800b545 	.word	0x0800b545

0800844c <__multiply>:
 800844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008450:	4691      	mov	r9, r2
 8008452:	690a      	ldr	r2, [r1, #16]
 8008454:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008458:	429a      	cmp	r2, r3
 800845a:	bfb8      	it	lt
 800845c:	460b      	movlt	r3, r1
 800845e:	460c      	mov	r4, r1
 8008460:	bfbc      	itt	lt
 8008462:	464c      	movlt	r4, r9
 8008464:	4699      	movlt	r9, r3
 8008466:	6927      	ldr	r7, [r4, #16]
 8008468:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800846c:	68a3      	ldr	r3, [r4, #8]
 800846e:	6861      	ldr	r1, [r4, #4]
 8008470:	eb07 060a 	add.w	r6, r7, sl
 8008474:	42b3      	cmp	r3, r6
 8008476:	b085      	sub	sp, #20
 8008478:	bfb8      	it	lt
 800847a:	3101      	addlt	r1, #1
 800847c:	f7ff feda 	bl	8008234 <_Balloc>
 8008480:	b930      	cbnz	r0, 8008490 <__multiply+0x44>
 8008482:	4602      	mov	r2, r0
 8008484:	4b44      	ldr	r3, [pc, #272]	; (8008598 <__multiply+0x14c>)
 8008486:	4845      	ldr	r0, [pc, #276]	; (800859c <__multiply+0x150>)
 8008488:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800848c:	f000 fc64 	bl	8008d58 <__assert_func>
 8008490:	f100 0514 	add.w	r5, r0, #20
 8008494:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008498:	462b      	mov	r3, r5
 800849a:	2200      	movs	r2, #0
 800849c:	4543      	cmp	r3, r8
 800849e:	d321      	bcc.n	80084e4 <__multiply+0x98>
 80084a0:	f104 0314 	add.w	r3, r4, #20
 80084a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80084a8:	f109 0314 	add.w	r3, r9, #20
 80084ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80084b0:	9202      	str	r2, [sp, #8]
 80084b2:	1b3a      	subs	r2, r7, r4
 80084b4:	3a15      	subs	r2, #21
 80084b6:	f022 0203 	bic.w	r2, r2, #3
 80084ba:	3204      	adds	r2, #4
 80084bc:	f104 0115 	add.w	r1, r4, #21
 80084c0:	428f      	cmp	r7, r1
 80084c2:	bf38      	it	cc
 80084c4:	2204      	movcc	r2, #4
 80084c6:	9201      	str	r2, [sp, #4]
 80084c8:	9a02      	ldr	r2, [sp, #8]
 80084ca:	9303      	str	r3, [sp, #12]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d80c      	bhi.n	80084ea <__multiply+0x9e>
 80084d0:	2e00      	cmp	r6, #0
 80084d2:	dd03      	ble.n	80084dc <__multiply+0x90>
 80084d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d05b      	beq.n	8008594 <__multiply+0x148>
 80084dc:	6106      	str	r6, [r0, #16]
 80084de:	b005      	add	sp, #20
 80084e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e4:	f843 2b04 	str.w	r2, [r3], #4
 80084e8:	e7d8      	b.n	800849c <__multiply+0x50>
 80084ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80084ee:	f1ba 0f00 	cmp.w	sl, #0
 80084f2:	d024      	beq.n	800853e <__multiply+0xf2>
 80084f4:	f104 0e14 	add.w	lr, r4, #20
 80084f8:	46a9      	mov	r9, r5
 80084fa:	f04f 0c00 	mov.w	ip, #0
 80084fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008502:	f8d9 1000 	ldr.w	r1, [r9]
 8008506:	fa1f fb82 	uxth.w	fp, r2
 800850a:	b289      	uxth	r1, r1
 800850c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008510:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008514:	f8d9 2000 	ldr.w	r2, [r9]
 8008518:	4461      	add	r1, ip
 800851a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800851e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008522:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008526:	b289      	uxth	r1, r1
 8008528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800852c:	4577      	cmp	r7, lr
 800852e:	f849 1b04 	str.w	r1, [r9], #4
 8008532:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008536:	d8e2      	bhi.n	80084fe <__multiply+0xb2>
 8008538:	9a01      	ldr	r2, [sp, #4]
 800853a:	f845 c002 	str.w	ip, [r5, r2]
 800853e:	9a03      	ldr	r2, [sp, #12]
 8008540:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008544:	3304      	adds	r3, #4
 8008546:	f1b9 0f00 	cmp.w	r9, #0
 800854a:	d021      	beq.n	8008590 <__multiply+0x144>
 800854c:	6829      	ldr	r1, [r5, #0]
 800854e:	f104 0c14 	add.w	ip, r4, #20
 8008552:	46ae      	mov	lr, r5
 8008554:	f04f 0a00 	mov.w	sl, #0
 8008558:	f8bc b000 	ldrh.w	fp, [ip]
 800855c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008560:	fb09 220b 	mla	r2, r9, fp, r2
 8008564:	4452      	add	r2, sl
 8008566:	b289      	uxth	r1, r1
 8008568:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800856c:	f84e 1b04 	str.w	r1, [lr], #4
 8008570:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008574:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008578:	f8be 1000 	ldrh.w	r1, [lr]
 800857c:	fb09 110a 	mla	r1, r9, sl, r1
 8008580:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008584:	4567      	cmp	r7, ip
 8008586:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800858a:	d8e5      	bhi.n	8008558 <__multiply+0x10c>
 800858c:	9a01      	ldr	r2, [sp, #4]
 800858e:	50a9      	str	r1, [r5, r2]
 8008590:	3504      	adds	r5, #4
 8008592:	e799      	b.n	80084c8 <__multiply+0x7c>
 8008594:	3e01      	subs	r6, #1
 8008596:	e79b      	b.n	80084d0 <__multiply+0x84>
 8008598:	0800b534 	.word	0x0800b534
 800859c:	0800b545 	.word	0x0800b545

080085a0 <__pow5mult>:
 80085a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085a4:	4615      	mov	r5, r2
 80085a6:	f012 0203 	ands.w	r2, r2, #3
 80085aa:	4606      	mov	r6, r0
 80085ac:	460f      	mov	r7, r1
 80085ae:	d007      	beq.n	80085c0 <__pow5mult+0x20>
 80085b0:	4c25      	ldr	r4, [pc, #148]	; (8008648 <__pow5mult+0xa8>)
 80085b2:	3a01      	subs	r2, #1
 80085b4:	2300      	movs	r3, #0
 80085b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085ba:	f7ff fe9d 	bl	80082f8 <__multadd>
 80085be:	4607      	mov	r7, r0
 80085c0:	10ad      	asrs	r5, r5, #2
 80085c2:	d03d      	beq.n	8008640 <__pow5mult+0xa0>
 80085c4:	69f4      	ldr	r4, [r6, #28]
 80085c6:	b97c      	cbnz	r4, 80085e8 <__pow5mult+0x48>
 80085c8:	2010      	movs	r0, #16
 80085ca:	f7ff fd7f 	bl	80080cc <malloc>
 80085ce:	4602      	mov	r2, r0
 80085d0:	61f0      	str	r0, [r6, #28]
 80085d2:	b928      	cbnz	r0, 80085e0 <__pow5mult+0x40>
 80085d4:	4b1d      	ldr	r3, [pc, #116]	; (800864c <__pow5mult+0xac>)
 80085d6:	481e      	ldr	r0, [pc, #120]	; (8008650 <__pow5mult+0xb0>)
 80085d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80085dc:	f000 fbbc 	bl	8008d58 <__assert_func>
 80085e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085e4:	6004      	str	r4, [r0, #0]
 80085e6:	60c4      	str	r4, [r0, #12]
 80085e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80085ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085f0:	b94c      	cbnz	r4, 8008606 <__pow5mult+0x66>
 80085f2:	f240 2171 	movw	r1, #625	; 0x271
 80085f6:	4630      	mov	r0, r6
 80085f8:	f7ff ff12 	bl	8008420 <__i2b>
 80085fc:	2300      	movs	r3, #0
 80085fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008602:	4604      	mov	r4, r0
 8008604:	6003      	str	r3, [r0, #0]
 8008606:	f04f 0900 	mov.w	r9, #0
 800860a:	07eb      	lsls	r3, r5, #31
 800860c:	d50a      	bpl.n	8008624 <__pow5mult+0x84>
 800860e:	4639      	mov	r1, r7
 8008610:	4622      	mov	r2, r4
 8008612:	4630      	mov	r0, r6
 8008614:	f7ff ff1a 	bl	800844c <__multiply>
 8008618:	4639      	mov	r1, r7
 800861a:	4680      	mov	r8, r0
 800861c:	4630      	mov	r0, r6
 800861e:	f7ff fe49 	bl	80082b4 <_Bfree>
 8008622:	4647      	mov	r7, r8
 8008624:	106d      	asrs	r5, r5, #1
 8008626:	d00b      	beq.n	8008640 <__pow5mult+0xa0>
 8008628:	6820      	ldr	r0, [r4, #0]
 800862a:	b938      	cbnz	r0, 800863c <__pow5mult+0x9c>
 800862c:	4622      	mov	r2, r4
 800862e:	4621      	mov	r1, r4
 8008630:	4630      	mov	r0, r6
 8008632:	f7ff ff0b 	bl	800844c <__multiply>
 8008636:	6020      	str	r0, [r4, #0]
 8008638:	f8c0 9000 	str.w	r9, [r0]
 800863c:	4604      	mov	r4, r0
 800863e:	e7e4      	b.n	800860a <__pow5mult+0x6a>
 8008640:	4638      	mov	r0, r7
 8008642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008646:	bf00      	nop
 8008648:	0800b690 	.word	0x0800b690
 800864c:	0800b4c5 	.word	0x0800b4c5
 8008650:	0800b545 	.word	0x0800b545

08008654 <__lshift>:
 8008654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008658:	460c      	mov	r4, r1
 800865a:	6849      	ldr	r1, [r1, #4]
 800865c:	6923      	ldr	r3, [r4, #16]
 800865e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008662:	68a3      	ldr	r3, [r4, #8]
 8008664:	4607      	mov	r7, r0
 8008666:	4691      	mov	r9, r2
 8008668:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800866c:	f108 0601 	add.w	r6, r8, #1
 8008670:	42b3      	cmp	r3, r6
 8008672:	db0b      	blt.n	800868c <__lshift+0x38>
 8008674:	4638      	mov	r0, r7
 8008676:	f7ff fddd 	bl	8008234 <_Balloc>
 800867a:	4605      	mov	r5, r0
 800867c:	b948      	cbnz	r0, 8008692 <__lshift+0x3e>
 800867e:	4602      	mov	r2, r0
 8008680:	4b28      	ldr	r3, [pc, #160]	; (8008724 <__lshift+0xd0>)
 8008682:	4829      	ldr	r0, [pc, #164]	; (8008728 <__lshift+0xd4>)
 8008684:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008688:	f000 fb66 	bl	8008d58 <__assert_func>
 800868c:	3101      	adds	r1, #1
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	e7ee      	b.n	8008670 <__lshift+0x1c>
 8008692:	2300      	movs	r3, #0
 8008694:	f100 0114 	add.w	r1, r0, #20
 8008698:	f100 0210 	add.w	r2, r0, #16
 800869c:	4618      	mov	r0, r3
 800869e:	4553      	cmp	r3, sl
 80086a0:	db33      	blt.n	800870a <__lshift+0xb6>
 80086a2:	6920      	ldr	r0, [r4, #16]
 80086a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086a8:	f104 0314 	add.w	r3, r4, #20
 80086ac:	f019 091f 	ands.w	r9, r9, #31
 80086b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086b8:	d02b      	beq.n	8008712 <__lshift+0xbe>
 80086ba:	f1c9 0e20 	rsb	lr, r9, #32
 80086be:	468a      	mov	sl, r1
 80086c0:	2200      	movs	r2, #0
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	fa00 f009 	lsl.w	r0, r0, r9
 80086c8:	4310      	orrs	r0, r2
 80086ca:	f84a 0b04 	str.w	r0, [sl], #4
 80086ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80086d2:	459c      	cmp	ip, r3
 80086d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80086d8:	d8f3      	bhi.n	80086c2 <__lshift+0x6e>
 80086da:	ebac 0304 	sub.w	r3, ip, r4
 80086de:	3b15      	subs	r3, #21
 80086e0:	f023 0303 	bic.w	r3, r3, #3
 80086e4:	3304      	adds	r3, #4
 80086e6:	f104 0015 	add.w	r0, r4, #21
 80086ea:	4584      	cmp	ip, r0
 80086ec:	bf38      	it	cc
 80086ee:	2304      	movcc	r3, #4
 80086f0:	50ca      	str	r2, [r1, r3]
 80086f2:	b10a      	cbz	r2, 80086f8 <__lshift+0xa4>
 80086f4:	f108 0602 	add.w	r6, r8, #2
 80086f8:	3e01      	subs	r6, #1
 80086fa:	4638      	mov	r0, r7
 80086fc:	612e      	str	r6, [r5, #16]
 80086fe:	4621      	mov	r1, r4
 8008700:	f7ff fdd8 	bl	80082b4 <_Bfree>
 8008704:	4628      	mov	r0, r5
 8008706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870a:	f842 0f04 	str.w	r0, [r2, #4]!
 800870e:	3301      	adds	r3, #1
 8008710:	e7c5      	b.n	800869e <__lshift+0x4a>
 8008712:	3904      	subs	r1, #4
 8008714:	f853 2b04 	ldr.w	r2, [r3], #4
 8008718:	f841 2f04 	str.w	r2, [r1, #4]!
 800871c:	459c      	cmp	ip, r3
 800871e:	d8f9      	bhi.n	8008714 <__lshift+0xc0>
 8008720:	e7ea      	b.n	80086f8 <__lshift+0xa4>
 8008722:	bf00      	nop
 8008724:	0800b534 	.word	0x0800b534
 8008728:	0800b545 	.word	0x0800b545

0800872c <__mcmp>:
 800872c:	b530      	push	{r4, r5, lr}
 800872e:	6902      	ldr	r2, [r0, #16]
 8008730:	690c      	ldr	r4, [r1, #16]
 8008732:	1b12      	subs	r2, r2, r4
 8008734:	d10e      	bne.n	8008754 <__mcmp+0x28>
 8008736:	f100 0314 	add.w	r3, r0, #20
 800873a:	3114      	adds	r1, #20
 800873c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008740:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008744:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008748:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800874c:	42a5      	cmp	r5, r4
 800874e:	d003      	beq.n	8008758 <__mcmp+0x2c>
 8008750:	d305      	bcc.n	800875e <__mcmp+0x32>
 8008752:	2201      	movs	r2, #1
 8008754:	4610      	mov	r0, r2
 8008756:	bd30      	pop	{r4, r5, pc}
 8008758:	4283      	cmp	r3, r0
 800875a:	d3f3      	bcc.n	8008744 <__mcmp+0x18>
 800875c:	e7fa      	b.n	8008754 <__mcmp+0x28>
 800875e:	f04f 32ff 	mov.w	r2, #4294967295
 8008762:	e7f7      	b.n	8008754 <__mcmp+0x28>

08008764 <__mdiff>:
 8008764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008768:	460c      	mov	r4, r1
 800876a:	4606      	mov	r6, r0
 800876c:	4611      	mov	r1, r2
 800876e:	4620      	mov	r0, r4
 8008770:	4690      	mov	r8, r2
 8008772:	f7ff ffdb 	bl	800872c <__mcmp>
 8008776:	1e05      	subs	r5, r0, #0
 8008778:	d110      	bne.n	800879c <__mdiff+0x38>
 800877a:	4629      	mov	r1, r5
 800877c:	4630      	mov	r0, r6
 800877e:	f7ff fd59 	bl	8008234 <_Balloc>
 8008782:	b930      	cbnz	r0, 8008792 <__mdiff+0x2e>
 8008784:	4b3a      	ldr	r3, [pc, #232]	; (8008870 <__mdiff+0x10c>)
 8008786:	4602      	mov	r2, r0
 8008788:	f240 2137 	movw	r1, #567	; 0x237
 800878c:	4839      	ldr	r0, [pc, #228]	; (8008874 <__mdiff+0x110>)
 800878e:	f000 fae3 	bl	8008d58 <__assert_func>
 8008792:	2301      	movs	r3, #1
 8008794:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879c:	bfa4      	itt	ge
 800879e:	4643      	movge	r3, r8
 80087a0:	46a0      	movge	r8, r4
 80087a2:	4630      	mov	r0, r6
 80087a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80087a8:	bfa6      	itte	ge
 80087aa:	461c      	movge	r4, r3
 80087ac:	2500      	movge	r5, #0
 80087ae:	2501      	movlt	r5, #1
 80087b0:	f7ff fd40 	bl	8008234 <_Balloc>
 80087b4:	b920      	cbnz	r0, 80087c0 <__mdiff+0x5c>
 80087b6:	4b2e      	ldr	r3, [pc, #184]	; (8008870 <__mdiff+0x10c>)
 80087b8:	4602      	mov	r2, r0
 80087ba:	f240 2145 	movw	r1, #581	; 0x245
 80087be:	e7e5      	b.n	800878c <__mdiff+0x28>
 80087c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80087c4:	6926      	ldr	r6, [r4, #16]
 80087c6:	60c5      	str	r5, [r0, #12]
 80087c8:	f104 0914 	add.w	r9, r4, #20
 80087cc:	f108 0514 	add.w	r5, r8, #20
 80087d0:	f100 0e14 	add.w	lr, r0, #20
 80087d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80087d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80087dc:	f108 0210 	add.w	r2, r8, #16
 80087e0:	46f2      	mov	sl, lr
 80087e2:	2100      	movs	r1, #0
 80087e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80087e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80087ec:	fa11 f88b 	uxtah	r8, r1, fp
 80087f0:	b299      	uxth	r1, r3
 80087f2:	0c1b      	lsrs	r3, r3, #16
 80087f4:	eba8 0801 	sub.w	r8, r8, r1
 80087f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80087fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008800:	fa1f f888 	uxth.w	r8, r8
 8008804:	1419      	asrs	r1, r3, #16
 8008806:	454e      	cmp	r6, r9
 8008808:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800880c:	f84a 3b04 	str.w	r3, [sl], #4
 8008810:	d8e8      	bhi.n	80087e4 <__mdiff+0x80>
 8008812:	1b33      	subs	r3, r6, r4
 8008814:	3b15      	subs	r3, #21
 8008816:	f023 0303 	bic.w	r3, r3, #3
 800881a:	3304      	adds	r3, #4
 800881c:	3415      	adds	r4, #21
 800881e:	42a6      	cmp	r6, r4
 8008820:	bf38      	it	cc
 8008822:	2304      	movcc	r3, #4
 8008824:	441d      	add	r5, r3
 8008826:	4473      	add	r3, lr
 8008828:	469e      	mov	lr, r3
 800882a:	462e      	mov	r6, r5
 800882c:	4566      	cmp	r6, ip
 800882e:	d30e      	bcc.n	800884e <__mdiff+0xea>
 8008830:	f10c 0203 	add.w	r2, ip, #3
 8008834:	1b52      	subs	r2, r2, r5
 8008836:	f022 0203 	bic.w	r2, r2, #3
 800883a:	3d03      	subs	r5, #3
 800883c:	45ac      	cmp	ip, r5
 800883e:	bf38      	it	cc
 8008840:	2200      	movcc	r2, #0
 8008842:	4413      	add	r3, r2
 8008844:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008848:	b17a      	cbz	r2, 800886a <__mdiff+0x106>
 800884a:	6107      	str	r7, [r0, #16]
 800884c:	e7a4      	b.n	8008798 <__mdiff+0x34>
 800884e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008852:	fa11 f288 	uxtah	r2, r1, r8
 8008856:	1414      	asrs	r4, r2, #16
 8008858:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800885c:	b292      	uxth	r2, r2
 800885e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008862:	f84e 2b04 	str.w	r2, [lr], #4
 8008866:	1421      	asrs	r1, r4, #16
 8008868:	e7e0      	b.n	800882c <__mdiff+0xc8>
 800886a:	3f01      	subs	r7, #1
 800886c:	e7ea      	b.n	8008844 <__mdiff+0xe0>
 800886e:	bf00      	nop
 8008870:	0800b534 	.word	0x0800b534
 8008874:	0800b545 	.word	0x0800b545

08008878 <__d2b>:
 8008878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800887c:	460f      	mov	r7, r1
 800887e:	2101      	movs	r1, #1
 8008880:	ec59 8b10 	vmov	r8, r9, d0
 8008884:	4616      	mov	r6, r2
 8008886:	f7ff fcd5 	bl	8008234 <_Balloc>
 800888a:	4604      	mov	r4, r0
 800888c:	b930      	cbnz	r0, 800889c <__d2b+0x24>
 800888e:	4602      	mov	r2, r0
 8008890:	4b24      	ldr	r3, [pc, #144]	; (8008924 <__d2b+0xac>)
 8008892:	4825      	ldr	r0, [pc, #148]	; (8008928 <__d2b+0xb0>)
 8008894:	f240 310f 	movw	r1, #783	; 0x30f
 8008898:	f000 fa5e 	bl	8008d58 <__assert_func>
 800889c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80088a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088a4:	bb2d      	cbnz	r5, 80088f2 <__d2b+0x7a>
 80088a6:	9301      	str	r3, [sp, #4]
 80088a8:	f1b8 0300 	subs.w	r3, r8, #0
 80088ac:	d026      	beq.n	80088fc <__d2b+0x84>
 80088ae:	4668      	mov	r0, sp
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	f7ff fd87 	bl	80083c4 <__lo0bits>
 80088b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80088ba:	b1e8      	cbz	r0, 80088f8 <__d2b+0x80>
 80088bc:	f1c0 0320 	rsb	r3, r0, #32
 80088c0:	fa02 f303 	lsl.w	r3, r2, r3
 80088c4:	430b      	orrs	r3, r1
 80088c6:	40c2      	lsrs	r2, r0
 80088c8:	6163      	str	r3, [r4, #20]
 80088ca:	9201      	str	r2, [sp, #4]
 80088cc:	9b01      	ldr	r3, [sp, #4]
 80088ce:	61a3      	str	r3, [r4, #24]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	bf14      	ite	ne
 80088d4:	2202      	movne	r2, #2
 80088d6:	2201      	moveq	r2, #1
 80088d8:	6122      	str	r2, [r4, #16]
 80088da:	b1bd      	cbz	r5, 800890c <__d2b+0x94>
 80088dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088e0:	4405      	add	r5, r0
 80088e2:	603d      	str	r5, [r7, #0]
 80088e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088e8:	6030      	str	r0, [r6, #0]
 80088ea:	4620      	mov	r0, r4
 80088ec:	b003      	add	sp, #12
 80088ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088f6:	e7d6      	b.n	80088a6 <__d2b+0x2e>
 80088f8:	6161      	str	r1, [r4, #20]
 80088fa:	e7e7      	b.n	80088cc <__d2b+0x54>
 80088fc:	a801      	add	r0, sp, #4
 80088fe:	f7ff fd61 	bl	80083c4 <__lo0bits>
 8008902:	9b01      	ldr	r3, [sp, #4]
 8008904:	6163      	str	r3, [r4, #20]
 8008906:	3020      	adds	r0, #32
 8008908:	2201      	movs	r2, #1
 800890a:	e7e5      	b.n	80088d8 <__d2b+0x60>
 800890c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008910:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008914:	6038      	str	r0, [r7, #0]
 8008916:	6918      	ldr	r0, [r3, #16]
 8008918:	f7ff fd34 	bl	8008384 <__hi0bits>
 800891c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008920:	e7e2      	b.n	80088e8 <__d2b+0x70>
 8008922:	bf00      	nop
 8008924:	0800b534 	.word	0x0800b534
 8008928:	0800b545 	.word	0x0800b545

0800892c <__ssputs_r>:
 800892c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008930:	688e      	ldr	r6, [r1, #8]
 8008932:	461f      	mov	r7, r3
 8008934:	42be      	cmp	r6, r7
 8008936:	680b      	ldr	r3, [r1, #0]
 8008938:	4682      	mov	sl, r0
 800893a:	460c      	mov	r4, r1
 800893c:	4690      	mov	r8, r2
 800893e:	d82c      	bhi.n	800899a <__ssputs_r+0x6e>
 8008940:	898a      	ldrh	r2, [r1, #12]
 8008942:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008946:	d026      	beq.n	8008996 <__ssputs_r+0x6a>
 8008948:	6965      	ldr	r5, [r4, #20]
 800894a:	6909      	ldr	r1, [r1, #16]
 800894c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008950:	eba3 0901 	sub.w	r9, r3, r1
 8008954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008958:	1c7b      	adds	r3, r7, #1
 800895a:	444b      	add	r3, r9
 800895c:	106d      	asrs	r5, r5, #1
 800895e:	429d      	cmp	r5, r3
 8008960:	bf38      	it	cc
 8008962:	461d      	movcc	r5, r3
 8008964:	0553      	lsls	r3, r2, #21
 8008966:	d527      	bpl.n	80089b8 <__ssputs_r+0x8c>
 8008968:	4629      	mov	r1, r5
 800896a:	f7ff fbd7 	bl	800811c <_malloc_r>
 800896e:	4606      	mov	r6, r0
 8008970:	b360      	cbz	r0, 80089cc <__ssputs_r+0xa0>
 8008972:	6921      	ldr	r1, [r4, #16]
 8008974:	464a      	mov	r2, r9
 8008976:	f7fe fcd2 	bl	800731e <memcpy>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	6126      	str	r6, [r4, #16]
 8008988:	6165      	str	r5, [r4, #20]
 800898a:	444e      	add	r6, r9
 800898c:	eba5 0509 	sub.w	r5, r5, r9
 8008990:	6026      	str	r6, [r4, #0]
 8008992:	60a5      	str	r5, [r4, #8]
 8008994:	463e      	mov	r6, r7
 8008996:	42be      	cmp	r6, r7
 8008998:	d900      	bls.n	800899c <__ssputs_r+0x70>
 800899a:	463e      	mov	r6, r7
 800899c:	6820      	ldr	r0, [r4, #0]
 800899e:	4632      	mov	r2, r6
 80089a0:	4641      	mov	r1, r8
 80089a2:	f7fe fc22 	bl	80071ea <memmove>
 80089a6:	68a3      	ldr	r3, [r4, #8]
 80089a8:	1b9b      	subs	r3, r3, r6
 80089aa:	60a3      	str	r3, [r4, #8]
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	4433      	add	r3, r6
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	2000      	movs	r0, #0
 80089b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b8:	462a      	mov	r2, r5
 80089ba:	f000 fa13 	bl	8008de4 <_realloc_r>
 80089be:	4606      	mov	r6, r0
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d1e0      	bne.n	8008986 <__ssputs_r+0x5a>
 80089c4:	6921      	ldr	r1, [r4, #16]
 80089c6:	4650      	mov	r0, sl
 80089c8:	f7ff fb34 	bl	8008034 <_free_r>
 80089cc:	230c      	movs	r3, #12
 80089ce:	f8ca 3000 	str.w	r3, [sl]
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089d8:	81a3      	strh	r3, [r4, #12]
 80089da:	f04f 30ff 	mov.w	r0, #4294967295
 80089de:	e7e9      	b.n	80089b4 <__ssputs_r+0x88>

080089e0 <_svfiprintf_r>:
 80089e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e4:	4698      	mov	r8, r3
 80089e6:	898b      	ldrh	r3, [r1, #12]
 80089e8:	061b      	lsls	r3, r3, #24
 80089ea:	b09d      	sub	sp, #116	; 0x74
 80089ec:	4607      	mov	r7, r0
 80089ee:	460d      	mov	r5, r1
 80089f0:	4614      	mov	r4, r2
 80089f2:	d50e      	bpl.n	8008a12 <_svfiprintf_r+0x32>
 80089f4:	690b      	ldr	r3, [r1, #16]
 80089f6:	b963      	cbnz	r3, 8008a12 <_svfiprintf_r+0x32>
 80089f8:	2140      	movs	r1, #64	; 0x40
 80089fa:	f7ff fb8f 	bl	800811c <_malloc_r>
 80089fe:	6028      	str	r0, [r5, #0]
 8008a00:	6128      	str	r0, [r5, #16]
 8008a02:	b920      	cbnz	r0, 8008a0e <_svfiprintf_r+0x2e>
 8008a04:	230c      	movs	r3, #12
 8008a06:	603b      	str	r3, [r7, #0]
 8008a08:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0c:	e0d0      	b.n	8008bb0 <_svfiprintf_r+0x1d0>
 8008a0e:	2340      	movs	r3, #64	; 0x40
 8008a10:	616b      	str	r3, [r5, #20]
 8008a12:	2300      	movs	r3, #0
 8008a14:	9309      	str	r3, [sp, #36]	; 0x24
 8008a16:	2320      	movs	r3, #32
 8008a18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a20:	2330      	movs	r3, #48	; 0x30
 8008a22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008bc8 <_svfiprintf_r+0x1e8>
 8008a26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a2a:	f04f 0901 	mov.w	r9, #1
 8008a2e:	4623      	mov	r3, r4
 8008a30:	469a      	mov	sl, r3
 8008a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a36:	b10a      	cbz	r2, 8008a3c <_svfiprintf_r+0x5c>
 8008a38:	2a25      	cmp	r2, #37	; 0x25
 8008a3a:	d1f9      	bne.n	8008a30 <_svfiprintf_r+0x50>
 8008a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8008a40:	d00b      	beq.n	8008a5a <_svfiprintf_r+0x7a>
 8008a42:	465b      	mov	r3, fp
 8008a44:	4622      	mov	r2, r4
 8008a46:	4629      	mov	r1, r5
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f7ff ff6f 	bl	800892c <__ssputs_r>
 8008a4e:	3001      	adds	r0, #1
 8008a50:	f000 80a9 	beq.w	8008ba6 <_svfiprintf_r+0x1c6>
 8008a54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a56:	445a      	add	r2, fp
 8008a58:	9209      	str	r2, [sp, #36]	; 0x24
 8008a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 80a1 	beq.w	8008ba6 <_svfiprintf_r+0x1c6>
 8008a64:	2300      	movs	r3, #0
 8008a66:	f04f 32ff 	mov.w	r2, #4294967295
 8008a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a6e:	f10a 0a01 	add.w	sl, sl, #1
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	9307      	str	r3, [sp, #28]
 8008a76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a7a:	931a      	str	r3, [sp, #104]	; 0x68
 8008a7c:	4654      	mov	r4, sl
 8008a7e:	2205      	movs	r2, #5
 8008a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a84:	4850      	ldr	r0, [pc, #320]	; (8008bc8 <_svfiprintf_r+0x1e8>)
 8008a86:	f7f7 fbab 	bl	80001e0 <memchr>
 8008a8a:	9a04      	ldr	r2, [sp, #16]
 8008a8c:	b9d8      	cbnz	r0, 8008ac6 <_svfiprintf_r+0xe6>
 8008a8e:	06d0      	lsls	r0, r2, #27
 8008a90:	bf44      	itt	mi
 8008a92:	2320      	movmi	r3, #32
 8008a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a98:	0711      	lsls	r1, r2, #28
 8008a9a:	bf44      	itt	mi
 8008a9c:	232b      	movmi	r3, #43	; 0x2b
 8008a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8008aa8:	d015      	beq.n	8008ad6 <_svfiprintf_r+0xf6>
 8008aaa:	9a07      	ldr	r2, [sp, #28]
 8008aac:	4654      	mov	r4, sl
 8008aae:	2000      	movs	r0, #0
 8008ab0:	f04f 0c0a 	mov.w	ip, #10
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aba:	3b30      	subs	r3, #48	; 0x30
 8008abc:	2b09      	cmp	r3, #9
 8008abe:	d94d      	bls.n	8008b5c <_svfiprintf_r+0x17c>
 8008ac0:	b1b0      	cbz	r0, 8008af0 <_svfiprintf_r+0x110>
 8008ac2:	9207      	str	r2, [sp, #28]
 8008ac4:	e014      	b.n	8008af0 <_svfiprintf_r+0x110>
 8008ac6:	eba0 0308 	sub.w	r3, r0, r8
 8008aca:	fa09 f303 	lsl.w	r3, r9, r3
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	46a2      	mov	sl, r4
 8008ad4:	e7d2      	b.n	8008a7c <_svfiprintf_r+0x9c>
 8008ad6:	9b03      	ldr	r3, [sp, #12]
 8008ad8:	1d19      	adds	r1, r3, #4
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	9103      	str	r1, [sp, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	bfbb      	ittet	lt
 8008ae2:	425b      	neglt	r3, r3
 8008ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ae8:	9307      	strge	r3, [sp, #28]
 8008aea:	9307      	strlt	r3, [sp, #28]
 8008aec:	bfb8      	it	lt
 8008aee:	9204      	strlt	r2, [sp, #16]
 8008af0:	7823      	ldrb	r3, [r4, #0]
 8008af2:	2b2e      	cmp	r3, #46	; 0x2e
 8008af4:	d10c      	bne.n	8008b10 <_svfiprintf_r+0x130>
 8008af6:	7863      	ldrb	r3, [r4, #1]
 8008af8:	2b2a      	cmp	r3, #42	; 0x2a
 8008afa:	d134      	bne.n	8008b66 <_svfiprintf_r+0x186>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	1d1a      	adds	r2, r3, #4
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	9203      	str	r2, [sp, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	bfb8      	it	lt
 8008b08:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b0c:	3402      	adds	r4, #2
 8008b0e:	9305      	str	r3, [sp, #20]
 8008b10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008bd8 <_svfiprintf_r+0x1f8>
 8008b14:	7821      	ldrb	r1, [r4, #0]
 8008b16:	2203      	movs	r2, #3
 8008b18:	4650      	mov	r0, sl
 8008b1a:	f7f7 fb61 	bl	80001e0 <memchr>
 8008b1e:	b138      	cbz	r0, 8008b30 <_svfiprintf_r+0x150>
 8008b20:	9b04      	ldr	r3, [sp, #16]
 8008b22:	eba0 000a 	sub.w	r0, r0, sl
 8008b26:	2240      	movs	r2, #64	; 0x40
 8008b28:	4082      	lsls	r2, r0
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	3401      	adds	r4, #1
 8008b2e:	9304      	str	r3, [sp, #16]
 8008b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b34:	4825      	ldr	r0, [pc, #148]	; (8008bcc <_svfiprintf_r+0x1ec>)
 8008b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b3a:	2206      	movs	r2, #6
 8008b3c:	f7f7 fb50 	bl	80001e0 <memchr>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d038      	beq.n	8008bb6 <_svfiprintf_r+0x1d6>
 8008b44:	4b22      	ldr	r3, [pc, #136]	; (8008bd0 <_svfiprintf_r+0x1f0>)
 8008b46:	bb1b      	cbnz	r3, 8008b90 <_svfiprintf_r+0x1b0>
 8008b48:	9b03      	ldr	r3, [sp, #12]
 8008b4a:	3307      	adds	r3, #7
 8008b4c:	f023 0307 	bic.w	r3, r3, #7
 8008b50:	3308      	adds	r3, #8
 8008b52:	9303      	str	r3, [sp, #12]
 8008b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b56:	4433      	add	r3, r6
 8008b58:	9309      	str	r3, [sp, #36]	; 0x24
 8008b5a:	e768      	b.n	8008a2e <_svfiprintf_r+0x4e>
 8008b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b60:	460c      	mov	r4, r1
 8008b62:	2001      	movs	r0, #1
 8008b64:	e7a6      	b.n	8008ab4 <_svfiprintf_r+0xd4>
 8008b66:	2300      	movs	r3, #0
 8008b68:	3401      	adds	r4, #1
 8008b6a:	9305      	str	r3, [sp, #20]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	f04f 0c0a 	mov.w	ip, #10
 8008b72:	4620      	mov	r0, r4
 8008b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b78:	3a30      	subs	r2, #48	; 0x30
 8008b7a:	2a09      	cmp	r2, #9
 8008b7c:	d903      	bls.n	8008b86 <_svfiprintf_r+0x1a6>
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0c6      	beq.n	8008b10 <_svfiprintf_r+0x130>
 8008b82:	9105      	str	r1, [sp, #20]
 8008b84:	e7c4      	b.n	8008b10 <_svfiprintf_r+0x130>
 8008b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e7f0      	b.n	8008b72 <_svfiprintf_r+0x192>
 8008b90:	ab03      	add	r3, sp, #12
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	462a      	mov	r2, r5
 8008b96:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <_svfiprintf_r+0x1f4>)
 8008b98:	a904      	add	r1, sp, #16
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	f7fd fe3a 	bl	8006814 <_printf_float>
 8008ba0:	1c42      	adds	r2, r0, #1
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	d1d6      	bne.n	8008b54 <_svfiprintf_r+0x174>
 8008ba6:	89ab      	ldrh	r3, [r5, #12]
 8008ba8:	065b      	lsls	r3, r3, #25
 8008baa:	f53f af2d 	bmi.w	8008a08 <_svfiprintf_r+0x28>
 8008bae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bb0:	b01d      	add	sp, #116	; 0x74
 8008bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb6:	ab03      	add	r3, sp, #12
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	462a      	mov	r2, r5
 8008bbc:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <_svfiprintf_r+0x1f4>)
 8008bbe:	a904      	add	r1, sp, #16
 8008bc0:	4638      	mov	r0, r7
 8008bc2:	f7fe f8cb 	bl	8006d5c <_printf_i>
 8008bc6:	e7eb      	b.n	8008ba0 <_svfiprintf_r+0x1c0>
 8008bc8:	0800b69c 	.word	0x0800b69c
 8008bcc:	0800b6a6 	.word	0x0800b6a6
 8008bd0:	08006815 	.word	0x08006815
 8008bd4:	0800892d 	.word	0x0800892d
 8008bd8:	0800b6a2 	.word	0x0800b6a2

08008bdc <__sflush_r>:
 8008bdc:	898a      	ldrh	r2, [r1, #12]
 8008bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be2:	4605      	mov	r5, r0
 8008be4:	0710      	lsls	r0, r2, #28
 8008be6:	460c      	mov	r4, r1
 8008be8:	d458      	bmi.n	8008c9c <__sflush_r+0xc0>
 8008bea:	684b      	ldr	r3, [r1, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	dc05      	bgt.n	8008bfc <__sflush_r+0x20>
 8008bf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	dc02      	bgt.n	8008bfc <__sflush_r+0x20>
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bfe:	2e00      	cmp	r6, #0
 8008c00:	d0f9      	beq.n	8008bf6 <__sflush_r+0x1a>
 8008c02:	2300      	movs	r3, #0
 8008c04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c08:	682f      	ldr	r7, [r5, #0]
 8008c0a:	6a21      	ldr	r1, [r4, #32]
 8008c0c:	602b      	str	r3, [r5, #0]
 8008c0e:	d032      	beq.n	8008c76 <__sflush_r+0x9a>
 8008c10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c12:	89a3      	ldrh	r3, [r4, #12]
 8008c14:	075a      	lsls	r2, r3, #29
 8008c16:	d505      	bpl.n	8008c24 <__sflush_r+0x48>
 8008c18:	6863      	ldr	r3, [r4, #4]
 8008c1a:	1ac0      	subs	r0, r0, r3
 8008c1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c1e:	b10b      	cbz	r3, 8008c24 <__sflush_r+0x48>
 8008c20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c22:	1ac0      	subs	r0, r0, r3
 8008c24:	2300      	movs	r3, #0
 8008c26:	4602      	mov	r2, r0
 8008c28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c2a:	6a21      	ldr	r1, [r4, #32]
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	47b0      	blx	r6
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	d106      	bne.n	8008c44 <__sflush_r+0x68>
 8008c36:	6829      	ldr	r1, [r5, #0]
 8008c38:	291d      	cmp	r1, #29
 8008c3a:	d82b      	bhi.n	8008c94 <__sflush_r+0xb8>
 8008c3c:	4a29      	ldr	r2, [pc, #164]	; (8008ce4 <__sflush_r+0x108>)
 8008c3e:	410a      	asrs	r2, r1
 8008c40:	07d6      	lsls	r6, r2, #31
 8008c42:	d427      	bmi.n	8008c94 <__sflush_r+0xb8>
 8008c44:	2200      	movs	r2, #0
 8008c46:	6062      	str	r2, [r4, #4]
 8008c48:	04d9      	lsls	r1, r3, #19
 8008c4a:	6922      	ldr	r2, [r4, #16]
 8008c4c:	6022      	str	r2, [r4, #0]
 8008c4e:	d504      	bpl.n	8008c5a <__sflush_r+0x7e>
 8008c50:	1c42      	adds	r2, r0, #1
 8008c52:	d101      	bne.n	8008c58 <__sflush_r+0x7c>
 8008c54:	682b      	ldr	r3, [r5, #0]
 8008c56:	b903      	cbnz	r3, 8008c5a <__sflush_r+0x7e>
 8008c58:	6560      	str	r0, [r4, #84]	; 0x54
 8008c5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c5c:	602f      	str	r7, [r5, #0]
 8008c5e:	2900      	cmp	r1, #0
 8008c60:	d0c9      	beq.n	8008bf6 <__sflush_r+0x1a>
 8008c62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c66:	4299      	cmp	r1, r3
 8008c68:	d002      	beq.n	8008c70 <__sflush_r+0x94>
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f7ff f9e2 	bl	8008034 <_free_r>
 8008c70:	2000      	movs	r0, #0
 8008c72:	6360      	str	r0, [r4, #52]	; 0x34
 8008c74:	e7c0      	b.n	8008bf8 <__sflush_r+0x1c>
 8008c76:	2301      	movs	r3, #1
 8008c78:	4628      	mov	r0, r5
 8008c7a:	47b0      	blx	r6
 8008c7c:	1c41      	adds	r1, r0, #1
 8008c7e:	d1c8      	bne.n	8008c12 <__sflush_r+0x36>
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0c5      	beq.n	8008c12 <__sflush_r+0x36>
 8008c86:	2b1d      	cmp	r3, #29
 8008c88:	d001      	beq.n	8008c8e <__sflush_r+0xb2>
 8008c8a:	2b16      	cmp	r3, #22
 8008c8c:	d101      	bne.n	8008c92 <__sflush_r+0xb6>
 8008c8e:	602f      	str	r7, [r5, #0]
 8008c90:	e7b1      	b.n	8008bf6 <__sflush_r+0x1a>
 8008c92:	89a3      	ldrh	r3, [r4, #12]
 8008c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c98:	81a3      	strh	r3, [r4, #12]
 8008c9a:	e7ad      	b.n	8008bf8 <__sflush_r+0x1c>
 8008c9c:	690f      	ldr	r7, [r1, #16]
 8008c9e:	2f00      	cmp	r7, #0
 8008ca0:	d0a9      	beq.n	8008bf6 <__sflush_r+0x1a>
 8008ca2:	0793      	lsls	r3, r2, #30
 8008ca4:	680e      	ldr	r6, [r1, #0]
 8008ca6:	bf08      	it	eq
 8008ca8:	694b      	ldreq	r3, [r1, #20]
 8008caa:	600f      	str	r7, [r1, #0]
 8008cac:	bf18      	it	ne
 8008cae:	2300      	movne	r3, #0
 8008cb0:	eba6 0807 	sub.w	r8, r6, r7
 8008cb4:	608b      	str	r3, [r1, #8]
 8008cb6:	f1b8 0f00 	cmp.w	r8, #0
 8008cba:	dd9c      	ble.n	8008bf6 <__sflush_r+0x1a>
 8008cbc:	6a21      	ldr	r1, [r4, #32]
 8008cbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008cc0:	4643      	mov	r3, r8
 8008cc2:	463a      	mov	r2, r7
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	47b0      	blx	r6
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	dc06      	bgt.n	8008cda <__sflush_r+0xfe>
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cd2:	81a3      	strh	r3, [r4, #12]
 8008cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd8:	e78e      	b.n	8008bf8 <__sflush_r+0x1c>
 8008cda:	4407      	add	r7, r0
 8008cdc:	eba8 0800 	sub.w	r8, r8, r0
 8008ce0:	e7e9      	b.n	8008cb6 <__sflush_r+0xda>
 8008ce2:	bf00      	nop
 8008ce4:	dfbffffe 	.word	0xdfbffffe

08008ce8 <_fflush_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	690b      	ldr	r3, [r1, #16]
 8008cec:	4605      	mov	r5, r0
 8008cee:	460c      	mov	r4, r1
 8008cf0:	b913      	cbnz	r3, 8008cf8 <_fflush_r+0x10>
 8008cf2:	2500      	movs	r5, #0
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	bd38      	pop	{r3, r4, r5, pc}
 8008cf8:	b118      	cbz	r0, 8008d02 <_fflush_r+0x1a>
 8008cfa:	6a03      	ldr	r3, [r0, #32]
 8008cfc:	b90b      	cbnz	r3, 8008d02 <_fflush_r+0x1a>
 8008cfe:	f7fe f9db 	bl	80070b8 <__sinit>
 8008d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0f3      	beq.n	8008cf2 <_fflush_r+0xa>
 8008d0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d0c:	07d0      	lsls	r0, r2, #31
 8008d0e:	d404      	bmi.n	8008d1a <_fflush_r+0x32>
 8008d10:	0599      	lsls	r1, r3, #22
 8008d12:	d402      	bmi.n	8008d1a <_fflush_r+0x32>
 8008d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d16:	f7fe fb00 	bl	800731a <__retarget_lock_acquire_recursive>
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	f7ff ff5d 	bl	8008bdc <__sflush_r>
 8008d22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d24:	07da      	lsls	r2, r3, #31
 8008d26:	4605      	mov	r5, r0
 8008d28:	d4e4      	bmi.n	8008cf4 <_fflush_r+0xc>
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	059b      	lsls	r3, r3, #22
 8008d2e:	d4e1      	bmi.n	8008cf4 <_fflush_r+0xc>
 8008d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d32:	f7fe faf3 	bl	800731c <__retarget_lock_release_recursive>
 8008d36:	e7dd      	b.n	8008cf4 <_fflush_r+0xc>

08008d38 <_sbrk_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4d06      	ldr	r5, [pc, #24]	; (8008d54 <_sbrk_r+0x1c>)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4604      	mov	r4, r0
 8008d40:	4608      	mov	r0, r1
 8008d42:	602b      	str	r3, [r5, #0]
 8008d44:	f7f9 fc26 	bl	8002594 <_sbrk>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_sbrk_r+0x1a>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_sbrk_r+0x1a>
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	20000fa0 	.word	0x20000fa0

08008d58 <__assert_func>:
 8008d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d5a:	4614      	mov	r4, r2
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	4b09      	ldr	r3, [pc, #36]	; (8008d84 <__assert_func+0x2c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4605      	mov	r5, r0
 8008d64:	68d8      	ldr	r0, [r3, #12]
 8008d66:	b14c      	cbz	r4, 8008d7c <__assert_func+0x24>
 8008d68:	4b07      	ldr	r3, [pc, #28]	; (8008d88 <__assert_func+0x30>)
 8008d6a:	9100      	str	r1, [sp, #0]
 8008d6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d70:	4906      	ldr	r1, [pc, #24]	; (8008d8c <__assert_func+0x34>)
 8008d72:	462b      	mov	r3, r5
 8008d74:	f000 f872 	bl	8008e5c <fiprintf>
 8008d78:	f000 f882 	bl	8008e80 <abort>
 8008d7c:	4b04      	ldr	r3, [pc, #16]	; (8008d90 <__assert_func+0x38>)
 8008d7e:	461c      	mov	r4, r3
 8008d80:	e7f3      	b.n	8008d6a <__assert_func+0x12>
 8008d82:	bf00      	nop
 8008d84:	200005d4 	.word	0x200005d4
 8008d88:	0800b6b7 	.word	0x0800b6b7
 8008d8c:	0800b6c4 	.word	0x0800b6c4
 8008d90:	0800b6f2 	.word	0x0800b6f2

08008d94 <_calloc_r>:
 8008d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d96:	fba1 2402 	umull	r2, r4, r1, r2
 8008d9a:	b94c      	cbnz	r4, 8008db0 <_calloc_r+0x1c>
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	9201      	str	r2, [sp, #4]
 8008da0:	f7ff f9bc 	bl	800811c <_malloc_r>
 8008da4:	9a01      	ldr	r2, [sp, #4]
 8008da6:	4605      	mov	r5, r0
 8008da8:	b930      	cbnz	r0, 8008db8 <_calloc_r+0x24>
 8008daa:	4628      	mov	r0, r5
 8008dac:	b003      	add	sp, #12
 8008dae:	bd30      	pop	{r4, r5, pc}
 8008db0:	220c      	movs	r2, #12
 8008db2:	6002      	str	r2, [r0, #0]
 8008db4:	2500      	movs	r5, #0
 8008db6:	e7f8      	b.n	8008daa <_calloc_r+0x16>
 8008db8:	4621      	mov	r1, r4
 8008dba:	f7fe fa30 	bl	800721e <memset>
 8008dbe:	e7f4      	b.n	8008daa <_calloc_r+0x16>

08008dc0 <__ascii_mbtowc>:
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	b901      	cbnz	r1, 8008dc6 <__ascii_mbtowc+0x6>
 8008dc4:	a901      	add	r1, sp, #4
 8008dc6:	b142      	cbz	r2, 8008dda <__ascii_mbtowc+0x1a>
 8008dc8:	b14b      	cbz	r3, 8008dde <__ascii_mbtowc+0x1e>
 8008dca:	7813      	ldrb	r3, [r2, #0]
 8008dcc:	600b      	str	r3, [r1, #0]
 8008dce:	7812      	ldrb	r2, [r2, #0]
 8008dd0:	1e10      	subs	r0, r2, #0
 8008dd2:	bf18      	it	ne
 8008dd4:	2001      	movne	r0, #1
 8008dd6:	b002      	add	sp, #8
 8008dd8:	4770      	bx	lr
 8008dda:	4610      	mov	r0, r2
 8008ddc:	e7fb      	b.n	8008dd6 <__ascii_mbtowc+0x16>
 8008dde:	f06f 0001 	mvn.w	r0, #1
 8008de2:	e7f8      	b.n	8008dd6 <__ascii_mbtowc+0x16>

08008de4 <_realloc_r>:
 8008de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de8:	4680      	mov	r8, r0
 8008dea:	4614      	mov	r4, r2
 8008dec:	460e      	mov	r6, r1
 8008dee:	b921      	cbnz	r1, 8008dfa <_realloc_r+0x16>
 8008df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008df4:	4611      	mov	r1, r2
 8008df6:	f7ff b991 	b.w	800811c <_malloc_r>
 8008dfa:	b92a      	cbnz	r2, 8008e08 <_realloc_r+0x24>
 8008dfc:	f7ff f91a 	bl	8008034 <_free_r>
 8008e00:	4625      	mov	r5, r4
 8008e02:	4628      	mov	r0, r5
 8008e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e08:	f000 f841 	bl	8008e8e <_malloc_usable_size_r>
 8008e0c:	4284      	cmp	r4, r0
 8008e0e:	4607      	mov	r7, r0
 8008e10:	d802      	bhi.n	8008e18 <_realloc_r+0x34>
 8008e12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e16:	d812      	bhi.n	8008e3e <_realloc_r+0x5a>
 8008e18:	4621      	mov	r1, r4
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	f7ff f97e 	bl	800811c <_malloc_r>
 8008e20:	4605      	mov	r5, r0
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d0ed      	beq.n	8008e02 <_realloc_r+0x1e>
 8008e26:	42bc      	cmp	r4, r7
 8008e28:	4622      	mov	r2, r4
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	bf28      	it	cs
 8008e2e:	463a      	movcs	r2, r7
 8008e30:	f7fe fa75 	bl	800731e <memcpy>
 8008e34:	4631      	mov	r1, r6
 8008e36:	4640      	mov	r0, r8
 8008e38:	f7ff f8fc 	bl	8008034 <_free_r>
 8008e3c:	e7e1      	b.n	8008e02 <_realloc_r+0x1e>
 8008e3e:	4635      	mov	r5, r6
 8008e40:	e7df      	b.n	8008e02 <_realloc_r+0x1e>

08008e42 <__ascii_wctomb>:
 8008e42:	b149      	cbz	r1, 8008e58 <__ascii_wctomb+0x16>
 8008e44:	2aff      	cmp	r2, #255	; 0xff
 8008e46:	bf85      	ittet	hi
 8008e48:	238a      	movhi	r3, #138	; 0x8a
 8008e4a:	6003      	strhi	r3, [r0, #0]
 8008e4c:	700a      	strbls	r2, [r1, #0]
 8008e4e:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e52:	bf98      	it	ls
 8008e54:	2001      	movls	r0, #1
 8008e56:	4770      	bx	lr
 8008e58:	4608      	mov	r0, r1
 8008e5a:	4770      	bx	lr

08008e5c <fiprintf>:
 8008e5c:	b40e      	push	{r1, r2, r3}
 8008e5e:	b503      	push	{r0, r1, lr}
 8008e60:	4601      	mov	r1, r0
 8008e62:	ab03      	add	r3, sp, #12
 8008e64:	4805      	ldr	r0, [pc, #20]	; (8008e7c <fiprintf+0x20>)
 8008e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e6a:	6800      	ldr	r0, [r0, #0]
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	f000 f83f 	bl	8008ef0 <_vfiprintf_r>
 8008e72:	b002      	add	sp, #8
 8008e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e78:	b003      	add	sp, #12
 8008e7a:	4770      	bx	lr
 8008e7c:	200005d4 	.word	0x200005d4

08008e80 <abort>:
 8008e80:	b508      	push	{r3, lr}
 8008e82:	2006      	movs	r0, #6
 8008e84:	f000 fa0c 	bl	80092a0 <raise>
 8008e88:	2001      	movs	r0, #1
 8008e8a:	f7f9 fb0b 	bl	80024a4 <_exit>

08008e8e <_malloc_usable_size_r>:
 8008e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e92:	1f18      	subs	r0, r3, #4
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	bfbc      	itt	lt
 8008e98:	580b      	ldrlt	r3, [r1, r0]
 8008e9a:	18c0      	addlt	r0, r0, r3
 8008e9c:	4770      	bx	lr

08008e9e <__sfputc_r>:
 8008e9e:	6893      	ldr	r3, [r2, #8]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	b410      	push	{r4}
 8008ea6:	6093      	str	r3, [r2, #8]
 8008ea8:	da08      	bge.n	8008ebc <__sfputc_r+0x1e>
 8008eaa:	6994      	ldr	r4, [r2, #24]
 8008eac:	42a3      	cmp	r3, r4
 8008eae:	db01      	blt.n	8008eb4 <__sfputc_r+0x16>
 8008eb0:	290a      	cmp	r1, #10
 8008eb2:	d103      	bne.n	8008ebc <__sfputc_r+0x1e>
 8008eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eb8:	f000 b934 	b.w	8009124 <__swbuf_r>
 8008ebc:	6813      	ldr	r3, [r2, #0]
 8008ebe:	1c58      	adds	r0, r3, #1
 8008ec0:	6010      	str	r0, [r2, #0]
 8008ec2:	7019      	strb	r1, [r3, #0]
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <__sfputs_r>:
 8008ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ece:	4606      	mov	r6, r0
 8008ed0:	460f      	mov	r7, r1
 8008ed2:	4614      	mov	r4, r2
 8008ed4:	18d5      	adds	r5, r2, r3
 8008ed6:	42ac      	cmp	r4, r5
 8008ed8:	d101      	bne.n	8008ede <__sfputs_r+0x12>
 8008eda:	2000      	movs	r0, #0
 8008edc:	e007      	b.n	8008eee <__sfputs_r+0x22>
 8008ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee2:	463a      	mov	r2, r7
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7ff ffda 	bl	8008e9e <__sfputc_r>
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	d1f3      	bne.n	8008ed6 <__sfputs_r+0xa>
 8008eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ef0 <_vfiprintf_r>:
 8008ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef4:	460d      	mov	r5, r1
 8008ef6:	b09d      	sub	sp, #116	; 0x74
 8008ef8:	4614      	mov	r4, r2
 8008efa:	4698      	mov	r8, r3
 8008efc:	4606      	mov	r6, r0
 8008efe:	b118      	cbz	r0, 8008f08 <_vfiprintf_r+0x18>
 8008f00:	6a03      	ldr	r3, [r0, #32]
 8008f02:	b90b      	cbnz	r3, 8008f08 <_vfiprintf_r+0x18>
 8008f04:	f7fe f8d8 	bl	80070b8 <__sinit>
 8008f08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f0a:	07d9      	lsls	r1, r3, #31
 8008f0c:	d405      	bmi.n	8008f1a <_vfiprintf_r+0x2a>
 8008f0e:	89ab      	ldrh	r3, [r5, #12]
 8008f10:	059a      	lsls	r2, r3, #22
 8008f12:	d402      	bmi.n	8008f1a <_vfiprintf_r+0x2a>
 8008f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f16:	f7fe fa00 	bl	800731a <__retarget_lock_acquire_recursive>
 8008f1a:	89ab      	ldrh	r3, [r5, #12]
 8008f1c:	071b      	lsls	r3, r3, #28
 8008f1e:	d501      	bpl.n	8008f24 <_vfiprintf_r+0x34>
 8008f20:	692b      	ldr	r3, [r5, #16]
 8008f22:	b99b      	cbnz	r3, 8008f4c <_vfiprintf_r+0x5c>
 8008f24:	4629      	mov	r1, r5
 8008f26:	4630      	mov	r0, r6
 8008f28:	f000 f93a 	bl	80091a0 <__swsetup_r>
 8008f2c:	b170      	cbz	r0, 8008f4c <_vfiprintf_r+0x5c>
 8008f2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f30:	07dc      	lsls	r4, r3, #31
 8008f32:	d504      	bpl.n	8008f3e <_vfiprintf_r+0x4e>
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295
 8008f38:	b01d      	add	sp, #116	; 0x74
 8008f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3e:	89ab      	ldrh	r3, [r5, #12]
 8008f40:	0598      	lsls	r0, r3, #22
 8008f42:	d4f7      	bmi.n	8008f34 <_vfiprintf_r+0x44>
 8008f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f46:	f7fe f9e9 	bl	800731c <__retarget_lock_release_recursive>
 8008f4a:	e7f3      	b.n	8008f34 <_vfiprintf_r+0x44>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f50:	2320      	movs	r3, #32
 8008f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f5a:	2330      	movs	r3, #48	; 0x30
 8008f5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009110 <_vfiprintf_r+0x220>
 8008f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f64:	f04f 0901 	mov.w	r9, #1
 8008f68:	4623      	mov	r3, r4
 8008f6a:	469a      	mov	sl, r3
 8008f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f70:	b10a      	cbz	r2, 8008f76 <_vfiprintf_r+0x86>
 8008f72:	2a25      	cmp	r2, #37	; 0x25
 8008f74:	d1f9      	bne.n	8008f6a <_vfiprintf_r+0x7a>
 8008f76:	ebba 0b04 	subs.w	fp, sl, r4
 8008f7a:	d00b      	beq.n	8008f94 <_vfiprintf_r+0xa4>
 8008f7c:	465b      	mov	r3, fp
 8008f7e:	4622      	mov	r2, r4
 8008f80:	4629      	mov	r1, r5
 8008f82:	4630      	mov	r0, r6
 8008f84:	f7ff ffa2 	bl	8008ecc <__sfputs_r>
 8008f88:	3001      	adds	r0, #1
 8008f8a:	f000 80a9 	beq.w	80090e0 <_vfiprintf_r+0x1f0>
 8008f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f90:	445a      	add	r2, fp
 8008f92:	9209      	str	r2, [sp, #36]	; 0x24
 8008f94:	f89a 3000 	ldrb.w	r3, [sl]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 80a1 	beq.w	80090e0 <_vfiprintf_r+0x1f0>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fa8:	f10a 0a01 	add.w	sl, sl, #1
 8008fac:	9304      	str	r3, [sp, #16]
 8008fae:	9307      	str	r3, [sp, #28]
 8008fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8008fb6:	4654      	mov	r4, sl
 8008fb8:	2205      	movs	r2, #5
 8008fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fbe:	4854      	ldr	r0, [pc, #336]	; (8009110 <_vfiprintf_r+0x220>)
 8008fc0:	f7f7 f90e 	bl	80001e0 <memchr>
 8008fc4:	9a04      	ldr	r2, [sp, #16]
 8008fc6:	b9d8      	cbnz	r0, 8009000 <_vfiprintf_r+0x110>
 8008fc8:	06d1      	lsls	r1, r2, #27
 8008fca:	bf44      	itt	mi
 8008fcc:	2320      	movmi	r3, #32
 8008fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fd2:	0713      	lsls	r3, r2, #28
 8008fd4:	bf44      	itt	mi
 8008fd6:	232b      	movmi	r3, #43	; 0x2b
 8008fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fe2:	d015      	beq.n	8009010 <_vfiprintf_r+0x120>
 8008fe4:	9a07      	ldr	r2, [sp, #28]
 8008fe6:	4654      	mov	r4, sl
 8008fe8:	2000      	movs	r0, #0
 8008fea:	f04f 0c0a 	mov.w	ip, #10
 8008fee:	4621      	mov	r1, r4
 8008ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ff4:	3b30      	subs	r3, #48	; 0x30
 8008ff6:	2b09      	cmp	r3, #9
 8008ff8:	d94d      	bls.n	8009096 <_vfiprintf_r+0x1a6>
 8008ffa:	b1b0      	cbz	r0, 800902a <_vfiprintf_r+0x13a>
 8008ffc:	9207      	str	r2, [sp, #28]
 8008ffe:	e014      	b.n	800902a <_vfiprintf_r+0x13a>
 8009000:	eba0 0308 	sub.w	r3, r0, r8
 8009004:	fa09 f303 	lsl.w	r3, r9, r3
 8009008:	4313      	orrs	r3, r2
 800900a:	9304      	str	r3, [sp, #16]
 800900c:	46a2      	mov	sl, r4
 800900e:	e7d2      	b.n	8008fb6 <_vfiprintf_r+0xc6>
 8009010:	9b03      	ldr	r3, [sp, #12]
 8009012:	1d19      	adds	r1, r3, #4
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	9103      	str	r1, [sp, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	bfbb      	ittet	lt
 800901c:	425b      	neglt	r3, r3
 800901e:	f042 0202 	orrlt.w	r2, r2, #2
 8009022:	9307      	strge	r3, [sp, #28]
 8009024:	9307      	strlt	r3, [sp, #28]
 8009026:	bfb8      	it	lt
 8009028:	9204      	strlt	r2, [sp, #16]
 800902a:	7823      	ldrb	r3, [r4, #0]
 800902c:	2b2e      	cmp	r3, #46	; 0x2e
 800902e:	d10c      	bne.n	800904a <_vfiprintf_r+0x15a>
 8009030:	7863      	ldrb	r3, [r4, #1]
 8009032:	2b2a      	cmp	r3, #42	; 0x2a
 8009034:	d134      	bne.n	80090a0 <_vfiprintf_r+0x1b0>
 8009036:	9b03      	ldr	r3, [sp, #12]
 8009038:	1d1a      	adds	r2, r3, #4
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	9203      	str	r2, [sp, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	bfb8      	it	lt
 8009042:	f04f 33ff 	movlt.w	r3, #4294967295
 8009046:	3402      	adds	r4, #2
 8009048:	9305      	str	r3, [sp, #20]
 800904a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009120 <_vfiprintf_r+0x230>
 800904e:	7821      	ldrb	r1, [r4, #0]
 8009050:	2203      	movs	r2, #3
 8009052:	4650      	mov	r0, sl
 8009054:	f7f7 f8c4 	bl	80001e0 <memchr>
 8009058:	b138      	cbz	r0, 800906a <_vfiprintf_r+0x17a>
 800905a:	9b04      	ldr	r3, [sp, #16]
 800905c:	eba0 000a 	sub.w	r0, r0, sl
 8009060:	2240      	movs	r2, #64	; 0x40
 8009062:	4082      	lsls	r2, r0
 8009064:	4313      	orrs	r3, r2
 8009066:	3401      	adds	r4, #1
 8009068:	9304      	str	r3, [sp, #16]
 800906a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800906e:	4829      	ldr	r0, [pc, #164]	; (8009114 <_vfiprintf_r+0x224>)
 8009070:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009074:	2206      	movs	r2, #6
 8009076:	f7f7 f8b3 	bl	80001e0 <memchr>
 800907a:	2800      	cmp	r0, #0
 800907c:	d03f      	beq.n	80090fe <_vfiprintf_r+0x20e>
 800907e:	4b26      	ldr	r3, [pc, #152]	; (8009118 <_vfiprintf_r+0x228>)
 8009080:	bb1b      	cbnz	r3, 80090ca <_vfiprintf_r+0x1da>
 8009082:	9b03      	ldr	r3, [sp, #12]
 8009084:	3307      	adds	r3, #7
 8009086:	f023 0307 	bic.w	r3, r3, #7
 800908a:	3308      	adds	r3, #8
 800908c:	9303      	str	r3, [sp, #12]
 800908e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009090:	443b      	add	r3, r7
 8009092:	9309      	str	r3, [sp, #36]	; 0x24
 8009094:	e768      	b.n	8008f68 <_vfiprintf_r+0x78>
 8009096:	fb0c 3202 	mla	r2, ip, r2, r3
 800909a:	460c      	mov	r4, r1
 800909c:	2001      	movs	r0, #1
 800909e:	e7a6      	b.n	8008fee <_vfiprintf_r+0xfe>
 80090a0:	2300      	movs	r3, #0
 80090a2:	3401      	adds	r4, #1
 80090a4:	9305      	str	r3, [sp, #20]
 80090a6:	4619      	mov	r1, r3
 80090a8:	f04f 0c0a 	mov.w	ip, #10
 80090ac:	4620      	mov	r0, r4
 80090ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090b2:	3a30      	subs	r2, #48	; 0x30
 80090b4:	2a09      	cmp	r2, #9
 80090b6:	d903      	bls.n	80090c0 <_vfiprintf_r+0x1d0>
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d0c6      	beq.n	800904a <_vfiprintf_r+0x15a>
 80090bc:	9105      	str	r1, [sp, #20]
 80090be:	e7c4      	b.n	800904a <_vfiprintf_r+0x15a>
 80090c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80090c4:	4604      	mov	r4, r0
 80090c6:	2301      	movs	r3, #1
 80090c8:	e7f0      	b.n	80090ac <_vfiprintf_r+0x1bc>
 80090ca:	ab03      	add	r3, sp, #12
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	462a      	mov	r2, r5
 80090d0:	4b12      	ldr	r3, [pc, #72]	; (800911c <_vfiprintf_r+0x22c>)
 80090d2:	a904      	add	r1, sp, #16
 80090d4:	4630      	mov	r0, r6
 80090d6:	f7fd fb9d 	bl	8006814 <_printf_float>
 80090da:	4607      	mov	r7, r0
 80090dc:	1c78      	adds	r0, r7, #1
 80090de:	d1d6      	bne.n	800908e <_vfiprintf_r+0x19e>
 80090e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090e2:	07d9      	lsls	r1, r3, #31
 80090e4:	d405      	bmi.n	80090f2 <_vfiprintf_r+0x202>
 80090e6:	89ab      	ldrh	r3, [r5, #12]
 80090e8:	059a      	lsls	r2, r3, #22
 80090ea:	d402      	bmi.n	80090f2 <_vfiprintf_r+0x202>
 80090ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090ee:	f7fe f915 	bl	800731c <__retarget_lock_release_recursive>
 80090f2:	89ab      	ldrh	r3, [r5, #12]
 80090f4:	065b      	lsls	r3, r3, #25
 80090f6:	f53f af1d 	bmi.w	8008f34 <_vfiprintf_r+0x44>
 80090fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090fc:	e71c      	b.n	8008f38 <_vfiprintf_r+0x48>
 80090fe:	ab03      	add	r3, sp, #12
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	462a      	mov	r2, r5
 8009104:	4b05      	ldr	r3, [pc, #20]	; (800911c <_vfiprintf_r+0x22c>)
 8009106:	a904      	add	r1, sp, #16
 8009108:	4630      	mov	r0, r6
 800910a:	f7fd fe27 	bl	8006d5c <_printf_i>
 800910e:	e7e4      	b.n	80090da <_vfiprintf_r+0x1ea>
 8009110:	0800b69c 	.word	0x0800b69c
 8009114:	0800b6a6 	.word	0x0800b6a6
 8009118:	08006815 	.word	0x08006815
 800911c:	08008ecd 	.word	0x08008ecd
 8009120:	0800b6a2 	.word	0x0800b6a2

08009124 <__swbuf_r>:
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009126:	460e      	mov	r6, r1
 8009128:	4614      	mov	r4, r2
 800912a:	4605      	mov	r5, r0
 800912c:	b118      	cbz	r0, 8009136 <__swbuf_r+0x12>
 800912e:	6a03      	ldr	r3, [r0, #32]
 8009130:	b90b      	cbnz	r3, 8009136 <__swbuf_r+0x12>
 8009132:	f7fd ffc1 	bl	80070b8 <__sinit>
 8009136:	69a3      	ldr	r3, [r4, #24]
 8009138:	60a3      	str	r3, [r4, #8]
 800913a:	89a3      	ldrh	r3, [r4, #12]
 800913c:	071a      	lsls	r2, r3, #28
 800913e:	d525      	bpl.n	800918c <__swbuf_r+0x68>
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	b31b      	cbz	r3, 800918c <__swbuf_r+0x68>
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	6922      	ldr	r2, [r4, #16]
 8009148:	1a98      	subs	r0, r3, r2
 800914a:	6963      	ldr	r3, [r4, #20]
 800914c:	b2f6      	uxtb	r6, r6
 800914e:	4283      	cmp	r3, r0
 8009150:	4637      	mov	r7, r6
 8009152:	dc04      	bgt.n	800915e <__swbuf_r+0x3a>
 8009154:	4621      	mov	r1, r4
 8009156:	4628      	mov	r0, r5
 8009158:	f7ff fdc6 	bl	8008ce8 <_fflush_r>
 800915c:	b9e0      	cbnz	r0, 8009198 <__swbuf_r+0x74>
 800915e:	68a3      	ldr	r3, [r4, #8]
 8009160:	3b01      	subs	r3, #1
 8009162:	60a3      	str	r3, [r4, #8]
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	6022      	str	r2, [r4, #0]
 800916a:	701e      	strb	r6, [r3, #0]
 800916c:	6962      	ldr	r2, [r4, #20]
 800916e:	1c43      	adds	r3, r0, #1
 8009170:	429a      	cmp	r2, r3
 8009172:	d004      	beq.n	800917e <__swbuf_r+0x5a>
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	07db      	lsls	r3, r3, #31
 8009178:	d506      	bpl.n	8009188 <__swbuf_r+0x64>
 800917a:	2e0a      	cmp	r6, #10
 800917c:	d104      	bne.n	8009188 <__swbuf_r+0x64>
 800917e:	4621      	mov	r1, r4
 8009180:	4628      	mov	r0, r5
 8009182:	f7ff fdb1 	bl	8008ce8 <_fflush_r>
 8009186:	b938      	cbnz	r0, 8009198 <__swbuf_r+0x74>
 8009188:	4638      	mov	r0, r7
 800918a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918c:	4621      	mov	r1, r4
 800918e:	4628      	mov	r0, r5
 8009190:	f000 f806 	bl	80091a0 <__swsetup_r>
 8009194:	2800      	cmp	r0, #0
 8009196:	d0d5      	beq.n	8009144 <__swbuf_r+0x20>
 8009198:	f04f 37ff 	mov.w	r7, #4294967295
 800919c:	e7f4      	b.n	8009188 <__swbuf_r+0x64>
	...

080091a0 <__swsetup_r>:
 80091a0:	b538      	push	{r3, r4, r5, lr}
 80091a2:	4b2a      	ldr	r3, [pc, #168]	; (800924c <__swsetup_r+0xac>)
 80091a4:	4605      	mov	r5, r0
 80091a6:	6818      	ldr	r0, [r3, #0]
 80091a8:	460c      	mov	r4, r1
 80091aa:	b118      	cbz	r0, 80091b4 <__swsetup_r+0x14>
 80091ac:	6a03      	ldr	r3, [r0, #32]
 80091ae:	b90b      	cbnz	r3, 80091b4 <__swsetup_r+0x14>
 80091b0:	f7fd ff82 	bl	80070b8 <__sinit>
 80091b4:	89a3      	ldrh	r3, [r4, #12]
 80091b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091ba:	0718      	lsls	r0, r3, #28
 80091bc:	d422      	bmi.n	8009204 <__swsetup_r+0x64>
 80091be:	06d9      	lsls	r1, r3, #27
 80091c0:	d407      	bmi.n	80091d2 <__swsetup_r+0x32>
 80091c2:	2309      	movs	r3, #9
 80091c4:	602b      	str	r3, [r5, #0]
 80091c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091ca:	81a3      	strh	r3, [r4, #12]
 80091cc:	f04f 30ff 	mov.w	r0, #4294967295
 80091d0:	e034      	b.n	800923c <__swsetup_r+0x9c>
 80091d2:	0758      	lsls	r0, r3, #29
 80091d4:	d512      	bpl.n	80091fc <__swsetup_r+0x5c>
 80091d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091d8:	b141      	cbz	r1, 80091ec <__swsetup_r+0x4c>
 80091da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091de:	4299      	cmp	r1, r3
 80091e0:	d002      	beq.n	80091e8 <__swsetup_r+0x48>
 80091e2:	4628      	mov	r0, r5
 80091e4:	f7fe ff26 	bl	8008034 <_free_r>
 80091e8:	2300      	movs	r3, #0
 80091ea:	6363      	str	r3, [r4, #52]	; 0x34
 80091ec:	89a3      	ldrh	r3, [r4, #12]
 80091ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091f2:	81a3      	strh	r3, [r4, #12]
 80091f4:	2300      	movs	r3, #0
 80091f6:	6063      	str	r3, [r4, #4]
 80091f8:	6923      	ldr	r3, [r4, #16]
 80091fa:	6023      	str	r3, [r4, #0]
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	f043 0308 	orr.w	r3, r3, #8
 8009202:	81a3      	strh	r3, [r4, #12]
 8009204:	6923      	ldr	r3, [r4, #16]
 8009206:	b94b      	cbnz	r3, 800921c <__swsetup_r+0x7c>
 8009208:	89a3      	ldrh	r3, [r4, #12]
 800920a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800920e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009212:	d003      	beq.n	800921c <__swsetup_r+0x7c>
 8009214:	4621      	mov	r1, r4
 8009216:	4628      	mov	r0, r5
 8009218:	f000 f884 	bl	8009324 <__smakebuf_r>
 800921c:	89a0      	ldrh	r0, [r4, #12]
 800921e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009222:	f010 0301 	ands.w	r3, r0, #1
 8009226:	d00a      	beq.n	800923e <__swsetup_r+0x9e>
 8009228:	2300      	movs	r3, #0
 800922a:	60a3      	str	r3, [r4, #8]
 800922c:	6963      	ldr	r3, [r4, #20]
 800922e:	425b      	negs	r3, r3
 8009230:	61a3      	str	r3, [r4, #24]
 8009232:	6923      	ldr	r3, [r4, #16]
 8009234:	b943      	cbnz	r3, 8009248 <__swsetup_r+0xa8>
 8009236:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800923a:	d1c4      	bne.n	80091c6 <__swsetup_r+0x26>
 800923c:	bd38      	pop	{r3, r4, r5, pc}
 800923e:	0781      	lsls	r1, r0, #30
 8009240:	bf58      	it	pl
 8009242:	6963      	ldrpl	r3, [r4, #20]
 8009244:	60a3      	str	r3, [r4, #8]
 8009246:	e7f4      	b.n	8009232 <__swsetup_r+0x92>
 8009248:	2000      	movs	r0, #0
 800924a:	e7f7      	b.n	800923c <__swsetup_r+0x9c>
 800924c:	200005d4 	.word	0x200005d4

08009250 <_raise_r>:
 8009250:	291f      	cmp	r1, #31
 8009252:	b538      	push	{r3, r4, r5, lr}
 8009254:	4604      	mov	r4, r0
 8009256:	460d      	mov	r5, r1
 8009258:	d904      	bls.n	8009264 <_raise_r+0x14>
 800925a:	2316      	movs	r3, #22
 800925c:	6003      	str	r3, [r0, #0]
 800925e:	f04f 30ff 	mov.w	r0, #4294967295
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009266:	b112      	cbz	r2, 800926e <_raise_r+0x1e>
 8009268:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800926c:	b94b      	cbnz	r3, 8009282 <_raise_r+0x32>
 800926e:	4620      	mov	r0, r4
 8009270:	f000 f830 	bl	80092d4 <_getpid_r>
 8009274:	462a      	mov	r2, r5
 8009276:	4601      	mov	r1, r0
 8009278:	4620      	mov	r0, r4
 800927a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800927e:	f000 b817 	b.w	80092b0 <_kill_r>
 8009282:	2b01      	cmp	r3, #1
 8009284:	d00a      	beq.n	800929c <_raise_r+0x4c>
 8009286:	1c59      	adds	r1, r3, #1
 8009288:	d103      	bne.n	8009292 <_raise_r+0x42>
 800928a:	2316      	movs	r3, #22
 800928c:	6003      	str	r3, [r0, #0]
 800928e:	2001      	movs	r0, #1
 8009290:	e7e7      	b.n	8009262 <_raise_r+0x12>
 8009292:	2400      	movs	r4, #0
 8009294:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009298:	4628      	mov	r0, r5
 800929a:	4798      	blx	r3
 800929c:	2000      	movs	r0, #0
 800929e:	e7e0      	b.n	8009262 <_raise_r+0x12>

080092a0 <raise>:
 80092a0:	4b02      	ldr	r3, [pc, #8]	; (80092ac <raise+0xc>)
 80092a2:	4601      	mov	r1, r0
 80092a4:	6818      	ldr	r0, [r3, #0]
 80092a6:	f7ff bfd3 	b.w	8009250 <_raise_r>
 80092aa:	bf00      	nop
 80092ac:	200005d4 	.word	0x200005d4

080092b0 <_kill_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4d07      	ldr	r5, [pc, #28]	; (80092d0 <_kill_r+0x20>)
 80092b4:	2300      	movs	r3, #0
 80092b6:	4604      	mov	r4, r0
 80092b8:	4608      	mov	r0, r1
 80092ba:	4611      	mov	r1, r2
 80092bc:	602b      	str	r3, [r5, #0]
 80092be:	f7f9 f8e1 	bl	8002484 <_kill>
 80092c2:	1c43      	adds	r3, r0, #1
 80092c4:	d102      	bne.n	80092cc <_kill_r+0x1c>
 80092c6:	682b      	ldr	r3, [r5, #0]
 80092c8:	b103      	cbz	r3, 80092cc <_kill_r+0x1c>
 80092ca:	6023      	str	r3, [r4, #0]
 80092cc:	bd38      	pop	{r3, r4, r5, pc}
 80092ce:	bf00      	nop
 80092d0:	20000fa0 	.word	0x20000fa0

080092d4 <_getpid_r>:
 80092d4:	f7f9 b8ce 	b.w	8002474 <_getpid>

080092d8 <__swhatbuf_r>:
 80092d8:	b570      	push	{r4, r5, r6, lr}
 80092da:	460c      	mov	r4, r1
 80092dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092e0:	2900      	cmp	r1, #0
 80092e2:	b096      	sub	sp, #88	; 0x58
 80092e4:	4615      	mov	r5, r2
 80092e6:	461e      	mov	r6, r3
 80092e8:	da0d      	bge.n	8009306 <__swhatbuf_r+0x2e>
 80092ea:	89a3      	ldrh	r3, [r4, #12]
 80092ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092f0:	f04f 0100 	mov.w	r1, #0
 80092f4:	bf0c      	ite	eq
 80092f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80092fa:	2340      	movne	r3, #64	; 0x40
 80092fc:	2000      	movs	r0, #0
 80092fe:	6031      	str	r1, [r6, #0]
 8009300:	602b      	str	r3, [r5, #0]
 8009302:	b016      	add	sp, #88	; 0x58
 8009304:	bd70      	pop	{r4, r5, r6, pc}
 8009306:	466a      	mov	r2, sp
 8009308:	f000 f848 	bl	800939c <_fstat_r>
 800930c:	2800      	cmp	r0, #0
 800930e:	dbec      	blt.n	80092ea <__swhatbuf_r+0x12>
 8009310:	9901      	ldr	r1, [sp, #4]
 8009312:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009316:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800931a:	4259      	negs	r1, r3
 800931c:	4159      	adcs	r1, r3
 800931e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009322:	e7eb      	b.n	80092fc <__swhatbuf_r+0x24>

08009324 <__smakebuf_r>:
 8009324:	898b      	ldrh	r3, [r1, #12]
 8009326:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009328:	079d      	lsls	r5, r3, #30
 800932a:	4606      	mov	r6, r0
 800932c:	460c      	mov	r4, r1
 800932e:	d507      	bpl.n	8009340 <__smakebuf_r+0x1c>
 8009330:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	6123      	str	r3, [r4, #16]
 8009338:	2301      	movs	r3, #1
 800933a:	6163      	str	r3, [r4, #20]
 800933c:	b002      	add	sp, #8
 800933e:	bd70      	pop	{r4, r5, r6, pc}
 8009340:	ab01      	add	r3, sp, #4
 8009342:	466a      	mov	r2, sp
 8009344:	f7ff ffc8 	bl	80092d8 <__swhatbuf_r>
 8009348:	9900      	ldr	r1, [sp, #0]
 800934a:	4605      	mov	r5, r0
 800934c:	4630      	mov	r0, r6
 800934e:	f7fe fee5 	bl	800811c <_malloc_r>
 8009352:	b948      	cbnz	r0, 8009368 <__smakebuf_r+0x44>
 8009354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009358:	059a      	lsls	r2, r3, #22
 800935a:	d4ef      	bmi.n	800933c <__smakebuf_r+0x18>
 800935c:	f023 0303 	bic.w	r3, r3, #3
 8009360:	f043 0302 	orr.w	r3, r3, #2
 8009364:	81a3      	strh	r3, [r4, #12]
 8009366:	e7e3      	b.n	8009330 <__smakebuf_r+0xc>
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	6020      	str	r0, [r4, #0]
 800936c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009370:	81a3      	strh	r3, [r4, #12]
 8009372:	9b00      	ldr	r3, [sp, #0]
 8009374:	6163      	str	r3, [r4, #20]
 8009376:	9b01      	ldr	r3, [sp, #4]
 8009378:	6120      	str	r0, [r4, #16]
 800937a:	b15b      	cbz	r3, 8009394 <__smakebuf_r+0x70>
 800937c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009380:	4630      	mov	r0, r6
 8009382:	f000 f81d 	bl	80093c0 <_isatty_r>
 8009386:	b128      	cbz	r0, 8009394 <__smakebuf_r+0x70>
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	f023 0303 	bic.w	r3, r3, #3
 800938e:	f043 0301 	orr.w	r3, r3, #1
 8009392:	81a3      	strh	r3, [r4, #12]
 8009394:	89a3      	ldrh	r3, [r4, #12]
 8009396:	431d      	orrs	r5, r3
 8009398:	81a5      	strh	r5, [r4, #12]
 800939a:	e7cf      	b.n	800933c <__smakebuf_r+0x18>

0800939c <_fstat_r>:
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	4d07      	ldr	r5, [pc, #28]	; (80093bc <_fstat_r+0x20>)
 80093a0:	2300      	movs	r3, #0
 80093a2:	4604      	mov	r4, r0
 80093a4:	4608      	mov	r0, r1
 80093a6:	4611      	mov	r1, r2
 80093a8:	602b      	str	r3, [r5, #0]
 80093aa:	f7f9 f8ca 	bl	8002542 <_fstat>
 80093ae:	1c43      	adds	r3, r0, #1
 80093b0:	d102      	bne.n	80093b8 <_fstat_r+0x1c>
 80093b2:	682b      	ldr	r3, [r5, #0]
 80093b4:	b103      	cbz	r3, 80093b8 <_fstat_r+0x1c>
 80093b6:	6023      	str	r3, [r4, #0]
 80093b8:	bd38      	pop	{r3, r4, r5, pc}
 80093ba:	bf00      	nop
 80093bc:	20000fa0 	.word	0x20000fa0

080093c0 <_isatty_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4d06      	ldr	r5, [pc, #24]	; (80093dc <_isatty_r+0x1c>)
 80093c4:	2300      	movs	r3, #0
 80093c6:	4604      	mov	r4, r0
 80093c8:	4608      	mov	r0, r1
 80093ca:	602b      	str	r3, [r5, #0]
 80093cc:	f7f9 f8c9 	bl	8002562 <_isatty>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_isatty_r+0x1a>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	b103      	cbz	r3, 80093da <_isatty_r+0x1a>
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	20000fa0 	.word	0x20000fa0

080093e0 <_init>:
 80093e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e2:	bf00      	nop
 80093e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093e6:	bc08      	pop	{r3}
 80093e8:	469e      	mov	lr, r3
 80093ea:	4770      	bx	lr

080093ec <_fini>:
 80093ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ee:	bf00      	nop
 80093f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093f2:	bc08      	pop	{r3}
 80093f4:	469e      	mov	lr, r3
 80093f6:	4770      	bx	lr


stm32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c704  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020dc  0800c8a8  0800c8a8  0001c8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e984  0800e984  00020980  2**0
                  CONTENTS
  4 .ARM          00000008  0800e984  0800e984  0001e984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e98c  0800e98c  00020980  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e98c  0800e98c  0001e98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e990  0800e990  0001e990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000980  20000000  0800e994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003298  20000980  0800f314  00020980  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c18  0800f314  00023c18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020980  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000209b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cc11  00000000  00000000  000209f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004524  00000000  00000000  0003d604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab0  00000000  00000000  00041b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014b3  00000000  00000000  000435d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e77b  00000000  00000000  00044a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002553f  00000000  00000000  00063206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8fe9  00000000  00000000  00088745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000818c  00000000  00000000  00131730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001398bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000980 	.word	0x20000980
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c88c 	.word	0x0800c88c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000984 	.word	0x20000984
 80001dc:	0800c88c 	.word	0x0800c88c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b970 	b.w	8000f10 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9e08      	ldr	r6, [sp, #32]
 8000c4e:	460d      	mov	r5, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	460f      	mov	r7, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4694      	mov	ip, r2
 8000c5c:	d965      	bls.n	8000d2a <__udivmoddi4+0xe2>
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	b143      	cbz	r3, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c68:	f1c3 0220 	rsb	r2, r3, #32
 8000c6c:	409f      	lsls	r7, r3
 8000c6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c72:	4317      	orrs	r7, r2
 8000c74:	409c      	lsls	r4, r3
 8000c76:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7a:	fa1f f58c 	uxth.w	r5, ip
 8000c7e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c82:	0c22      	lsrs	r2, r4, #16
 8000c84:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c8c:	fb01 f005 	mul.w	r0, r1, r5
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c9c:	f080 811c 	bcs.w	8000ed8 <__udivmoddi4+0x290>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f240 8119 	bls.w	8000ed8 <__udivmoddi4+0x290>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4462      	add	r2, ip
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cba:	fb00 f505 	mul.w	r5, r0, r5
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d90a      	bls.n	8000cd8 <__udivmoddi4+0x90>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x294>
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x294>
 8000cd4:	4464      	add	r4, ip
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11e      	cbz	r6, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40dc      	lsrs	r4, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0xbc>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f000 80ed 	beq.w	8000ed2 <__udivmoddi4+0x28a>
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	fab3 f183 	clz	r1, r3
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	d149      	bne.n	8000da0 <__udivmoddi4+0x158>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	d302      	bcc.n	8000d16 <__udivmoddi4+0xce>
 8000d10:	4282      	cmp	r2, r0
 8000d12:	f200 80f8 	bhi.w	8000f06 <__udivmoddi4+0x2be>
 8000d16:	1a84      	subs	r4, r0, r2
 8000d18:	eb65 0203 	sbc.w	r2, r5, r3
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	4617      	mov	r7, r2
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d0e2      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	e9c6 4700 	strd	r4, r7, [r6]
 8000d28:	e7df      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d2a:	b902      	cbnz	r2, 8000d2e <__udivmoddi4+0xe6>
 8000d2c:	deff      	udf	#255	; 0xff
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8090 	bne.w	8000e58 <__udivmoddi4+0x210>
 8000d38:	1a8a      	subs	r2, r1, r2
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2101      	movs	r1, #1
 8000d44:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d48:	fb07 2015 	mls	r0, r7, r5, r2
 8000d4c:	0c22      	lsrs	r2, r4, #16
 8000d4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d52:	fb0e f005 	mul.w	r0, lr, r5
 8000d56:	4290      	cmp	r0, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x124>
 8000d5a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d5e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x122>
 8000d64:	4290      	cmp	r0, r2
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2b8>
 8000d6a:	4645      	mov	r5, r8
 8000d6c:	1a12      	subs	r2, r2, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d74:	fb07 2210 	mls	r2, r7, r0, r2
 8000d78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x14e>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x14c>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2c2>
 8000d94:	4610      	mov	r0, r2
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d9e:	e79f      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000da0:	f1c1 0720 	rsb	r7, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa05 f401 	lsl.w	r4, r5, r1
 8000db2:	fa20 f307 	lsr.w	r3, r0, r7
 8000db6:	40fd      	lsrs	r5, r7
 8000db8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dca:	0c1c      	lsrs	r4, r3, #16
 8000dcc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dd4:	42a5      	cmp	r5, r4
 8000dd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dda:	fa00 f001 	lsl.w	r0, r0, r1
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b0>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2b4>
 8000dec:	42a5      	cmp	r5, r4
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2b4>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4464      	add	r4, ip
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	b29d      	uxth	r5, r3
 8000dfc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e00:	fb09 4413 	mls	r4, r9, r3, r4
 8000e04:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e08:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1da>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e26:	fba3 9502 	umull	r9, r5, r3, r2
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46ae      	mov	lr, r5
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x29c>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x298>
 8000e38:	b156      	cbz	r6, 8000e50 <__udivmoddi4+0x208>
 8000e3a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e3e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e42:	fa04 f707 	lsl.w	r7, r4, r7
 8000e46:	40ca      	lsrs	r2, r1
 8000e48:	40cc      	lsrs	r4, r1
 8000e4a:	4317      	orrs	r7, r2
 8000e4c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e58:	f1c3 0120 	rsb	r1, r3, #32
 8000e5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e60:	fa20 f201 	lsr.w	r2, r0, r1
 8000e64:	fa25 f101 	lsr.w	r1, r5, r1
 8000e68:	409d      	lsls	r5, r3
 8000e6a:	432a      	orrs	r2, r5
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1510 	mls	r5, r7, r0, r1
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e82:	fb00 f50e 	mul.w	r5, r0, lr
 8000e86:	428d      	cmp	r5, r1
 8000e88:	fa04 f403 	lsl.w	r4, r4, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x258>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e98:	428d      	cmp	r5, r1
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1b49      	subs	r1, r1, r5
 8000ea2:	b292      	uxth	r2, r2
 8000ea4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ea8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	fb05 f10e 	mul.w	r1, r5, lr
 8000eb4:	4291      	cmp	r1, r2
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x282>
 8000eb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ebc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec6:	3d02      	subs	r5, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	1a52      	subs	r2, r2, r1
 8000ecc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0xfc>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xa2>
 8000ed8:	4639      	mov	r1, r7
 8000eda:	e6e6      	b.n	8000caa <__udivmoddi4+0x62>
 8000edc:	4610      	mov	r0, r2
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x90>
 8000ee0:	4548      	cmp	r0, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f0>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eec:	3b01      	subs	r3, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f0>
 8000ef0:	4645      	mov	r5, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x282>
 8000ef4:	462b      	mov	r3, r5
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1da>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x258>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b0>
 8000f00:	3d02      	subs	r5, #2
 8000f02:	4462      	add	r2, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x124>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e70a      	b.n	8000d20 <__udivmoddi4+0xd8>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x14e>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <adc_int_init>:
#include <stdbool.h>
#include "encoder.h"

ADC_HandleTypeDef *hadc1_new;

void adc_int_init(ADC_HandleTypeDef *hadc1) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	hadc1_new=hadc1;
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <adc_int_init+0x1c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	2000099c 	.word	0x2000099c

08000f34 <adc_select_ch>:

void adc_select_ch(uint32_t channel) { //trzeba wywolywac za kazdym razem przed konwersją adc bo inaczej będzie tylko ch0!!!!!!!!
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	//wartości channel = ADC_CHANNEL_0, 1, 2, 3
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc1_new, &sConfig) != HAL_OK)
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <adc_select_ch+0x44>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f107 0208 	add.w	r2, r7, #8
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f003 fbc3 	bl	80046ec <HAL_ADC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <adc_select_ch+0x3c>
	{
	Error_Handler();
 8000f6c:	f001 f8f6 	bl	800215c <Error_Handler>
	}
}
 8000f70:	bf00      	nop
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	2000099c 	.word	0x2000099c

08000f7c <getValAdc>:

void getValAdc(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b0b6      	sub	sp, #216	; 0xd8
 8000f80:	af02      	add	r7, sp, #8
	uint32_t value;
	adc_select_ch(ADC_CHANNEL_1);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff ffd6 	bl	8000f34 <adc_select_ch>
  HAL_ADC_Start(hadc1_new);
 8000f88:	4b38      	ldr	r3, [pc, #224]	; (800106c <getValAdc+0xf0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f003 fa61 	bl	8004454 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc1_new, HAL_MAX_DELAY);
 8000f92:	4b36      	ldr	r3, [pc, #216]	; (800106c <getValAdc+0xf0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f003 fb0e 	bl	80045bc <HAL_ADC_PollForConversion>
  value = HAL_ADC_GetValue(hadc1_new);
 8000fa0:	4b32      	ldr	r3, [pc, #200]	; (800106c <getValAdc+0xf0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 fb94 	bl	80046d2 <HAL_ADC_GetValue>
 8000faa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  float voltage = 3.3f * value / 4096.0f;
 8000fae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fba:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001070 <getValAdc+0xf4>
 8000fbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fc2:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001074 <getValAdc+0xf8>
 8000fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fca:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
//
//  HAL_ADC_PollForConversion(hadc1_new, HAL_MAX_DELAY);
//  value[3] = HAL_ADC_GetValue(hadc1_new);
//  HAL_ADC_Stop(hadc1_new);
  char adcStr[200];
  sprintf(adcStr, "a0=%lu (%.3f V)\n\r", value, voltage);
 8000fce:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8000fd2:	f7ff fad1 	bl	8000578 <__aeabi_f2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4638      	mov	r0, r7
 8000fdc:	e9cd 2300 	strd	r2, r3, [sp]
 8000fe0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000fe4:	4924      	ldr	r1, [pc, #144]	; (8001078 <getValAdc+0xfc>)
 8000fe6:	f009 fae3 	bl	800a5b0 <siprintf>
  send_uart(adcStr);
 8000fea:	463b      	mov	r3, r7
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 faf3 	bl	80015d8 <send_uart>

  adc_select_ch(ADC_CHANNEL_3);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f7ff ff9e 	bl	8000f34 <adc_select_ch>
    HAL_ADC_Start(hadc1_new);
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <getValAdc+0xf0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f003 fa29 	bl	8004454 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc1_new, HAL_MAX_DELAY);
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <getValAdc+0xf0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f04f 31ff 	mov.w	r1, #4294967295
 800100a:	4618      	mov	r0, r3
 800100c:	f003 fad6 	bl	80045bc <HAL_ADC_PollForConversion>
    value = HAL_ADC_GetValue(hadc1_new);
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <getValAdc+0xf0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f003 fb5c 	bl	80046d2 <HAL_ADC_GetValue>
 800101a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    voltage = 3.3f * value / 4096.0f;
 800101e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800102a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001070 <getValAdc+0xf4>
 800102e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001032:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001074 <getValAdc+0xf8>
 8001036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103a:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
    sprintf(adcStr, "a3=%lu (%.3f V)\n\r", value, voltage);
 800103e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001042:	f7ff fa99 	bl	8000578 <__aeabi_f2d>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4638      	mov	r0, r7
 800104c:	e9cd 2300 	strd	r2, r3, [sp]
 8001050:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001054:	4909      	ldr	r1, [pc, #36]	; (800107c <getValAdc+0x100>)
 8001056:	f009 faab 	bl	800a5b0 <siprintf>
      send_uart(adcStr);
 800105a:	463b      	mov	r3, r7
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fabb 	bl	80015d8 <send_uart>
}
 8001062:	bf00      	nop
 8001064:	37d0      	adds	r7, #208	; 0xd0
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000099c 	.word	0x2000099c
 8001070:	40533333 	.word	0x40533333
 8001074:	45800000 	.word	0x45800000
 8001078:	0800c8a8 	.word	0x0800c8a8
 800107c:	0800c8bc 	.word	0x0800c8bc

08001080 <getValueAdcExtCh0>:

float getValueAdcExtCh0(void) {
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

}
 8001084:	bf00      	nop
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <getValueAdcExtCh1>:
float getValueAdcExtCh1(void) {
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

}
 8001096:	bf00      	nop
 8001098:	eeb0 0a67 	vmov.f32	s0, s15
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <getValueAdcExtCh2>:
float getValueAdcExtCh2(void) {
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

}
 80010a8:	bf00      	nop
 80010aa:	eeb0 0a67 	vmov.f32	s0, s15
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <getValueAdcExtCh3>:
float getValueAdcExtCh3(void) {
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

}
 80010ba:	bf00      	nop
 80010bc:	eeb0 0a67 	vmov.f32	s0, s15
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <getValueAdcIntCh0>:
float getValueAdcIntCh0(void) {
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

}
 80010cc:	bf00      	nop
 80010ce:	eeb0 0a67 	vmov.f32	s0, s15
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <getValueAdcIntCh1>:
float getValueAdcIntCh1(void) {
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

}
 80010de:	bf00      	nop
 80010e0:	eeb0 0a67 	vmov.f32	s0, s15
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <getValueAdcIntCh2>:
float getValueAdcIntCh2(void) {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

}
 80010f0:	bf00      	nop
 80010f2:	eeb0 0a67 	vmov.f32	s0, s15
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <getValueAdcIntCh3>:
float getValueAdcIntCh3(void) {
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

}
 8001102:	bf00      	nop
 8001104:	eeb0 0a67 	vmov.f32	s0, s15
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <getValueDs1>:

TIM_HandleTypeDef *htim10_new;



float getValueDs1(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
	wire_reset();
 8001116:	f000 f931 	bl	800137c <wire_reset>
		wire_write(0xcc);
 800111a:	20cc      	movs	r0, #204	; 0xcc
 800111c:	f000 f9aa 	bl	8001474 <wire_write>
		wire_write(0x44);
 8001120:	2044      	movs	r0, #68	; 0x44
 8001122:	f000 f9a7 	bl	8001474 <wire_write>
		HAL_Delay(95);
 8001126:	205f      	movs	r0, #95	; 0x5f
 8001128:	f003 f92c 	bl	8004384 <HAL_Delay>
		wire_reset();
 800112c:	f000 f926 	bl	800137c <wire_reset>
		wire_write(0xcc);
 8001130:	20cc      	movs	r0, #204	; 0xcc
 8001132:	f000 f99f 	bl	8001474 <wire_write>
		wire_write(0xbe);
 8001136:	20be      	movs	r0, #190	; 0xbe
 8001138:	f000 f99c 	bl	8001474 <wire_write>
		int i;
		uint8_t rom_code[9];
		for (i = 0; i < 9; i++)
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	e00b      	b.n	800115a <getValueDs1+0x4a>
		  rom_code[i] = wire_read();
 8001142:	f000 f9b3 	bl	80014ac <wire_read>
 8001146:	4603      	mov	r3, r0
 8001148:	4619      	mov	r1, r3
 800114a:	1d3a      	adds	r2, r7, #4
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	4413      	add	r3, r2
 8001150:	460a      	mov	r2, r1
 8001152:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 9; i++)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2b08      	cmp	r3, #8
 800115e:	ddf0      	ble.n	8001142 <getValueDs1+0x32>
		float temp= ((rom_code[1]<<8) | (rom_code[0]));
 8001160:	797b      	ldrb	r3, [r7, #5]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	793a      	ldrb	r2, [r7, #4]
 8001166:	4313      	orrs	r3, r2
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001170:	edc7 7a04 	vstr	s15, [r7, #16]

		send_uart_float(temp);
 8001174:	ed97 0a04 	vldr	s0, [r7, #16]
 8001178:	f000 fb0e 	bl	8001798 <send_uart_float>
		return temp = temp/16.0f;
 800117c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001180:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001188:	edc7 7a04 	vstr	s15, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	ee07 3a90 	vmov	s15, r3
}
 8001192:	eeb0 0a67 	vmov.f32	s0, s15
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <getValueDs2>:

float getValueDs2(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
	wire_reset();
 80011a2:	f000 f8eb 	bl	800137c <wire_reset>
		wire_write(0xcc);
 80011a6:	20cc      	movs	r0, #204	; 0xcc
 80011a8:	f000 f964 	bl	8001474 <wire_write>
		wire_write(0x44);
 80011ac:	2044      	movs	r0, #68	; 0x44
 80011ae:	f000 f961 	bl	8001474 <wire_write>
		HAL_Delay(95);
 80011b2:	205f      	movs	r0, #95	; 0x5f
 80011b4:	f003 f8e6 	bl	8004384 <HAL_Delay>
		wire_reset();
 80011b8:	f000 f8e0 	bl	800137c <wire_reset>
		wire_write(0xcc);
 80011bc:	20cc      	movs	r0, #204	; 0xcc
 80011be:	f000 f959 	bl	8001474 <wire_write>
		wire_write(0xbe);
 80011c2:	20be      	movs	r0, #190	; 0xbe
 80011c4:	f000 f956 	bl	8001474 <wire_write>
		int i;
		uint8_t rom_code[9];
		for (i = 0; i < 9; i++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e00b      	b.n	80011e6 <getValueDs2+0x4a>
		  rom_code[i] = wire_read();
 80011ce:	f000 f96d 	bl	80014ac <wire_read>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4619      	mov	r1, r3
 80011d6:	1d3a      	adds	r2, r7, #4
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	4413      	add	r3, r2
 80011dc:	460a      	mov	r2, r1
 80011de:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 9; i++)
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	ddf0      	ble.n	80011ce <getValueDs2+0x32>
		float temp= ((rom_code[1]<<8) | (rom_code[0]));
 80011ec:	797b      	ldrb	r3, [r7, #5]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	793a      	ldrb	r2, [r7, #4]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011fc:	edc7 7a04 	vstr	s15, [r7, #16]


		return temp = temp/16.0f;
 8001200:	ed97 7a04 	vldr	s14, [r7, #16]
 8001204:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120c:	edc7 7a04 	vstr	s15, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	ee07 3a90 	vmov	s15, r3

}
 8001216:	eeb0 0a67 	vmov.f32	s0, s15
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <getValueDs3>:

float getValueDs3(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
	wire_reset();
 8001226:	f000 f8a9 	bl	800137c <wire_reset>
		wire_write(0xcc);
 800122a:	20cc      	movs	r0, #204	; 0xcc
 800122c:	f000 f922 	bl	8001474 <wire_write>
		wire_write(0x44);
 8001230:	2044      	movs	r0, #68	; 0x44
 8001232:	f000 f91f 	bl	8001474 <wire_write>
		HAL_Delay(95);
 8001236:	205f      	movs	r0, #95	; 0x5f
 8001238:	f003 f8a4 	bl	8004384 <HAL_Delay>
		wire_reset();
 800123c:	f000 f89e 	bl	800137c <wire_reset>
		wire_write(0xcc);
 8001240:	20cc      	movs	r0, #204	; 0xcc
 8001242:	f000 f917 	bl	8001474 <wire_write>
		wire_write(0xbe);
 8001246:	20be      	movs	r0, #190	; 0xbe
 8001248:	f000 f914 	bl	8001474 <wire_write>
		int i;
		uint8_t rom_code[9];
		for (i = 0; i < 9; i++)
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	e00b      	b.n	800126a <getValueDs3+0x4a>
		  rom_code[i] = wire_read();
 8001252:	f000 f92b 	bl	80014ac <wire_read>
 8001256:	4603      	mov	r3, r0
 8001258:	4619      	mov	r1, r3
 800125a:	1d3a      	adds	r2, r7, #4
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	4413      	add	r3, r2
 8001260:	460a      	mov	r2, r1
 8001262:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 9; i++)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	3301      	adds	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2b08      	cmp	r3, #8
 800126e:	ddf0      	ble.n	8001252 <getValueDs3+0x32>
		float temp= ((rom_code[1]<<8) | (rom_code[0]));
 8001270:	797b      	ldrb	r3, [r7, #5]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	793a      	ldrb	r2, [r7, #4]
 8001276:	4313      	orrs	r3, r2
 8001278:	ee07 3a90 	vmov	s15, r3
 800127c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001280:	edc7 7a04 	vstr	s15, [r7, #16]


		return temp = temp/16.0f;
 8001284:	ed97 7a04 	vldr	s14, [r7, #16]
 8001288:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800128c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001290:	edc7 7a04 	vstr	s15, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	ee07 3a90 	vmov	s15, r3
}
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <ds18_init>:


void ds18_init(TIM_HandleTypeDef *htim10) {
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	htim10_new=htim10;
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <ds18_init+0x1c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	200009a0 	.word	0x200009a0

080012c4 <ds18_get_temp>:



float ds18_get_temp(void) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
	wire_reset();
 80012ca:	f000 f857 	bl	800137c <wire_reset>
	wire_write(0xcc);
 80012ce:	20cc      	movs	r0, #204	; 0xcc
 80012d0:	f000 f8d0 	bl	8001474 <wire_write>
	wire_write(0x44);
 80012d4:	2044      	movs	r0, #68	; 0x44
 80012d6:	f000 f8cd 	bl	8001474 <wire_write>
	HAL_Delay(95);
 80012da:	205f      	movs	r0, #95	; 0x5f
 80012dc:	f003 f852 	bl	8004384 <HAL_Delay>
	wire_reset();
 80012e0:	f000 f84c 	bl	800137c <wire_reset>
	wire_write(0xcc);
 80012e4:	20cc      	movs	r0, #204	; 0xcc
 80012e6:	f000 f8c5 	bl	8001474 <wire_write>
	wire_write(0xbe);
 80012ea:	20be      	movs	r0, #190	; 0xbe
 80012ec:	f000 f8c2 	bl	8001474 <wire_write>
	int i;
	uint8_t rom_code[9];
	for (i = 0; i < 9; i++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	e00b      	b.n	800130e <ds18_get_temp+0x4a>
	  rom_code[i] = wire_read();
 80012f6:	f000 f8d9 	bl	80014ac <wire_read>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4619      	mov	r1, r3
 80012fe:	1d3a      	adds	r2, r7, #4
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	4413      	add	r3, r2
 8001304:	460a      	mov	r2, r1
 8001306:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 9; i++)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3301      	adds	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2b08      	cmp	r3, #8
 8001312:	ddf0      	ble.n	80012f6 <ds18_get_temp+0x32>
	float temp= ((rom_code[1]<<8) | (rom_code[0]));
 8001314:	797b      	ldrb	r3, [r7, #5]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	793a      	ldrb	r2, [r7, #4]
 800131a:	4313      	orrs	r3, r2
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001324:	edc7 7a04 	vstr	s15, [r7, #16]


	return temp = temp/16.0f;
 8001328:	ed97 7a04 	vldr	s14, [r7, #16]
 800132c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001334:	edc7 7a04 	vstr	s15, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	ee07 3a90 	vmov	s15, r3
}
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <delay_us>:

void delay_us(uint32_t us)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim10_new, 0);
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <delay_us+0x30>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
	  while (__HAL_TIM_GET_COUNTER(htim10_new) < us) {}
 800135a:	bf00      	nop
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <delay_us+0x30>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	429a      	cmp	r2, r3
 8001368:	d8f8      	bhi.n	800135c <delay_us+0x14>
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	200009a0 	.word	0x200009a0

0800137c <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2102      	movs	r1, #2
 8001386:	4811      	ldr	r0, [pc, #68]	; (80013cc <wire_reset+0x50>)
 8001388:	f003 fe8c 	bl	80050a4 <HAL_GPIO_WritePin>
  delay_us(480);
 800138c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001390:	f7ff ffda 	bl	8001348 <delay_us>
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2102      	movs	r1, #2
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <wire_reset+0x50>)
 800139a:	f003 fe83 	bl	80050a4 <HAL_GPIO_WritePin>
  delay_us(70);
 800139e:	2046      	movs	r0, #70	; 0x46
 80013a0:	f7ff ffd2 	bl	8001348 <delay_us>
  rc = HAL_GPIO_ReadPin(DSO_DATA_GPIO_Port, DSO_DATA_Pin);
 80013a4:	2102      	movs	r1, #2
 80013a6:	4809      	ldr	r0, [pc, #36]	; (80013cc <wire_reset+0x50>)
 80013a8:	f003 fe64 	bl	8005074 <HAL_GPIO_ReadPin>
 80013ac:	4603      	mov	r3, r0
 80013ae:	607b      	str	r3, [r7, #4]
  delay_us(410);
 80013b0:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80013b4:	f7ff ffc8 	bl	8001348 <delay_us>

  if (rc == 0)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <wire_reset+0x46>
    return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <wire_reset+0x48>
  else
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40020400 	.word	0x40020400

080013d0 <write_bit>:

void write_bit(int value)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if (value) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d010      	beq.n	8001400 <write_bit+0x30>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2102      	movs	r1, #2
 80013e2:	4811      	ldr	r0, [pc, #68]	; (8001428 <write_bit+0x58>)
 80013e4:	f003 fe5e 	bl	80050a4 <HAL_GPIO_WritePin>
    delay_us(6);
 80013e8:	2006      	movs	r0, #6
 80013ea:	f7ff ffad 	bl	8001348 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	2102      	movs	r1, #2
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <write_bit+0x58>)
 80013f4:	f003 fe56 	bl	80050a4 <HAL_GPIO_WritePin>
    delay_us(64);
 80013f8:	2040      	movs	r0, #64	; 0x40
 80013fa:	f7ff ffa5 	bl	8001348 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 80013fe:	e00f      	b.n	8001420 <write_bit+0x50>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	2102      	movs	r1, #2
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <write_bit+0x58>)
 8001406:	f003 fe4d 	bl	80050a4 <HAL_GPIO_WritePin>
    delay_us(60);
 800140a:	203c      	movs	r0, #60	; 0x3c
 800140c:	f7ff ff9c 	bl	8001348 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	2102      	movs	r1, #2
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <write_bit+0x58>)
 8001416:	f003 fe45 	bl	80050a4 <HAL_GPIO_WritePin>
    delay_us(10);
 800141a:	200a      	movs	r0, #10
 800141c:	f7ff ff94 	bl	8001348 <delay_us>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40020400 	.word	0x40020400

0800142c <read_bit>:


int read_bit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2102      	movs	r1, #2
 8001436:	480e      	ldr	r0, [pc, #56]	; (8001470 <read_bit+0x44>)
 8001438:	f003 fe34 	bl	80050a4 <HAL_GPIO_WritePin>
  delay_us(6);
 800143c:	2006      	movs	r0, #6
 800143e:	f7ff ff83 	bl	8001348 <delay_us>
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2102      	movs	r1, #2
 8001446:	480a      	ldr	r0, [pc, #40]	; (8001470 <read_bit+0x44>)
 8001448:	f003 fe2c 	bl	80050a4 <HAL_GPIO_WritePin>
  delay_us(9);
 800144c:	2009      	movs	r0, #9
 800144e:	f7ff ff7b 	bl	8001348 <delay_us>
  rc = HAL_GPIO_ReadPin(DSO_DATA_GPIO_Port, DSO_DATA_Pin);
 8001452:	2102      	movs	r1, #2
 8001454:	4806      	ldr	r0, [pc, #24]	; (8001470 <read_bit+0x44>)
 8001456:	f003 fe0d 	bl	8005074 <HAL_GPIO_ReadPin>
 800145a:	4603      	mov	r3, r0
 800145c:	607b      	str	r3, [r7, #4]
  delay_us(55);
 800145e:	2037      	movs	r0, #55	; 0x37
 8001460:	f7ff ff72 	bl	8001348 <delay_us>
  return rc;
 8001464:	687b      	ldr	r3, [r7, #4]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40020400 	.word	0x40020400

08001474 <wire_write>:

void wire_write(uint8_t byte)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	e00b      	b.n	800149c <wire_write+0x28>
    write_bit(byte & 0x01);
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ffa0 	bl	80013d0 <write_bit>
    byte >>= 1;
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3301      	adds	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b07      	cmp	r3, #7
 80014a0:	ddf0      	ble.n	8001484 <wire_write+0x10>
  }
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <wire_read>:

uint8_t wire_read(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	e00e      	b.n	80014da <wire_read+0x2e>
    value >>= 1;
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	085b      	lsrs	r3, r3, #1
 80014c0:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 80014c2:	f7ff ffb3 	bl	800142c <read_bit>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <wire_read+0x28>
      value |= 0x80;
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014d2:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b07      	cmp	r3, #7
 80014de:	dded      	ble.n	80014bc <wire_read+0x10>
  }
  return value;
 80014e0:	79fb      	ldrb	r3, [r7, #7]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <encSetRange>:


TIM_HandleTypeDef *htim1_new;


void encSetRange(uint16_t min, uint16_t max) {
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	460a      	mov	r2, r1
 80014f6:	80fb      	strh	r3, [r7, #6]
 80014f8:	4613      	mov	r3, r2
 80014fa:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(htim1_new, max);
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <encSetRange+0x30>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	88ba      	ldrh	r2, [r7, #4]
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <encSetRange+0x30>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	88ba      	ldrh	r2, [r7, #4]
 800150c:	60da      	str	r2, [r3, #12]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	200009a4 	.word	0x200009a4

08001520 <encSetPos>:

void encSetPos(uint16_t encPos) {
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim1_new, encPos);
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <encSetPos+0x20>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	88fa      	ldrh	r2, [r7, #6]
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	200009a4 	.word	0x200009a4

08001544 <encoderGet>:

uint32_t encoderGet(void) {
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(htim1_new);
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <encoderGet+0x18>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	200009a4 	.word	0x200009a4

08001560 <encoderInit>:

void encoderInit(TIM_HandleTypeDef *htim1) {
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	htim1_new=htim1;
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <encoderInit+0x1c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	200009a4 	.word	0x200009a4

08001580 <entrySelected>:

bool entrySelected(int16_t id) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	80fb      	strh	r3, [r7, #6]
    if (encoderGet() == id) {
 800158a:	f7ff ffdb 	bl	8001544 <encoderGet>
 800158e:	4602      	mov	r2, r0
 8001590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001594:	429a      	cmp	r2, r3
 8001596:	d101      	bne.n	800159c <entrySelected+0x1c>
        return true;
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <entrySelected+0x1e>
    }
    return false;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <entryClicked>:

bool entryClicked(int16_t id) {
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	80fb      	strh	r3, [r7, #6]
    if (encoderGet() == id && isClicked()) {
 80015b0:	f7ff ffc8 	bl	8001544 <encoderGet>
 80015b4:	4602      	mov	r2, r0
 80015b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d106      	bne.n	80015cc <entryClicked+0x26>
 80015be:	f000 f8b5 	bl	800172c <isClicked>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <entryClicked+0x26>
        return true;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <entryClicked+0x28>
    }
    return false;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <send_uart>:
int8_t ch2przerwanie=0;
int8_t ch3przerwanie=0;
int8_t ch4przerwanie=0;


void send_uart(char *string) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7fe fe5d 	bl	80002a0 <strlen>
 80015e6:	4603      	mov	r3, r0
 80015e8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart6, (uint8_t *)string, len, HAL_MAX_DELAY);
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4803      	ldr	r0, [pc, #12]	; (8001604 <send_uart+0x2c>)
 80015f6:	f007 f86a 	bl	80086ce <HAL_UART_Transmit>
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000c30 	.word	0x20000c30

08001608 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d10d      	bne.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_TIM_Base_Stop_IT(htim);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f005 ff54 	bl	80074c8 <HAL_TIM_Base_Stop_IT>
		if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)==GPIO_PIN_RESET) {
 8001620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001626:	f003 fd25 	bl	8005074 <HAL_GPIO_ReadPin>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x2e>
			sendToUart=1;
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]

			}
		}
	}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40014800 	.word	0x40014800
 8001644:	40020400 	.word	0x40020400
 8001648:	20000c74 	.word	0x20000c74

0800164c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t pulse;
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7f1b      	ldrb	r3, [r3, #28]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d10e      	bne.n	800167a <HAL_TIM_OC_DelayElapsedCallback+0x2e>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800165c:	2100      	movs	r1, #0
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f006 fc38 	bl	8007ed4 <HAL_TIM_ReadCapturedValue>
 8001664:	60f8      	str	r0, [r7, #12]
    ch1przerwanie=1;
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (pulse + 6659)); //to wartosc pulse dla kazdego timera
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8001676:	3303      	adds	r3, #3
 8001678:	6353      	str	r3, [r2, #52]	; 0x34
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7f1b      	ldrb	r3, [r3, #28]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d10e      	bne.n	80016a0 <HAL_TIM_OC_DelayElapsedCallback+0x54>
  pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001682:	2104      	movs	r1, #4
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f006 fc25 	bl	8007ed4 <HAL_TIM_ReadCapturedValue>
 800168a:	60f8      	str	r0, [r7, #12]
  ch2przerwanie=1;
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
  /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (pulse + 13500));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f503 5352 	add.w	r3, r3, #13440	; 0x3480
 800169c:	333c      	adds	r3, #60	; 0x3c
 800169e:	6393      	str	r3, [r2, #56]	; 0x38
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7f1b      	ldrb	r3, [r3, #28]
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d10e      	bne.n	80016c6 <HAL_TIM_OC_DelayElapsedCallback+0x7a>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80016a8:	2108      	movs	r1, #8
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f006 fc12 	bl	8007ed4 <HAL_TIM_ReadCapturedValue>
 80016b0:	60f8      	str	r0, [r7, #12]
    ch3przerwanie=1;
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, (pulse + 36000));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80016c2:	33a0      	adds	r3, #160	; 0xa0
 80016c4:	63d3      	str	r3, [r2, #60]	; 0x3c
    }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7f1b      	ldrb	r3, [r3, #28]
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d10f      	bne.n	80016ee <HAL_TIM_OC_DelayElapsedCallback+0xa2>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80016ce:	210c      	movs	r1, #12
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f006 fbff 	bl	8007ed4 <HAL_TIM_ReadCapturedValue>
 80016d6:	60f8      	str	r0, [r7, #12]
    ch4przerwanie=1;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, (pulse + 67000));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 80016e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000c75 	.word	0x20000c75
 80016fc:	20000c76 	.word	0x20000c76
 8001700:	20000c77 	.word	0x20000c77
 8001704:	20000c78 	.word	0x20000c78

08001708 <HAL_GPIO_EXTI_Callback>:


char charAr[50];


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
	  if(GPIO_Pin == ENC_BTN_Pin) {
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001718:	d102      	bne.n	8001720 <HAL_GPIO_EXTI_Callback+0x18>
		  HAL_TIM_Base_Start_IT(&htim11);
 800171a:	4803      	ldr	r0, [pc, #12]	; (8001728 <HAL_GPIO_EXTI_Callback+0x20>)
 800171c:	f005 fe72 	bl	8007404 <HAL_TIM_Base_Start_IT>
	  }
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000be8 	.word	0x20000be8

0800172c <isClicked>:


bool isClicked(void) {
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
	if(sendToUart==1) {
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <isClicked+0x24>)
 8001732:	f993 3000 	ldrsb.w	r3, [r3]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d104      	bne.n	8001744 <isClicked+0x18>
		sendToUart=0;
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <isClicked+0x24>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
		return true;
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <isClicked+0x1a>
	}
	else {
		return false;
 8001744:	2300      	movs	r3, #0
	}
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	20000c74 	.word	0x20000c74

08001754 <send_uart_uint32>:

void send_uart_uint32(uint32_t value) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
    char buffer[20];
    snprintf(buffer, sizeof(buffer), "%lu \n\r", value);
 800175c:	f107 000c 	add.w	r0, r7, #12
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <send_uart_uint32+0x3c>)
 8001764:	2114      	movs	r1, #20
 8001766:	f008 feef 	bl	800a548 <sniprintf>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fd96 	bl	80002a0 <strlen>
 8001774:	4603      	mov	r3, r0
 8001776:	b29a      	uxth	r2, r3
 8001778:	f107 010c 	add.w	r1, r7, #12
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <send_uart_uint32+0x40>)
 8001782:	f006 ffa4 	bl	80086ce <HAL_UART_Transmit>
}
 8001786:	bf00      	nop
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	0800c8d0 	.word	0x0800c8d0
 8001794:	20000c30 	.word	0x20000c30

08001798 <send_uart_float>:

void send_uart_float(float value) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af02      	add	r7, sp, #8
 800179e:	ed87 0a01 	vstr	s0, [r7, #4]
    char buffer[20];
    snprintf(buffer, sizeof(buffer), "%0.2f \n\r", value); // Formatuje wartość zmiennoprzecinkową z dwoma miejscami po przecinku
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7fe fee8 	bl	8000578 <__aeabi_f2d>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	f107 000c 	add.w	r0, r7, #12
 80017b0:	e9cd 2300 	strd	r2, r3, [sp]
 80017b4:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <send_uart_float+0x48>)
 80017b6:	2114      	movs	r1, #20
 80017b8:	f008 fec6 	bl	800a548 <sniprintf>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fd6d 	bl	80002a0 <strlen>
 80017c6:	4603      	mov	r3, r0
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	f107 010c 	add.w	r1, r7, #12
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	4804      	ldr	r0, [pc, #16]	; (80017e4 <send_uart_float+0x4c>)
 80017d4:	f006 ff7b 	bl	80086ce <HAL_UART_Transmit>
}
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	0800c8d8 	.word	0x0800c8d8
 80017e4:	20000c30 	.word	0x20000c30

080017e8 <getRtcString>:
RTC_TimeTypeDef time;
RTC_DateTypeDef date;
char* getRtcString(void)  {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b09c      	sub	sp, #112	; 0x70
 80017ec:	af02      	add	r7, sp, #8
	static char dateTime[100];
	char rtcTimeStr[50];
	char rtcDateStr[50];
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80017ee:	2200      	movs	r2, #0
 80017f0:	4918      	ldr	r1, [pc, #96]	; (8001854 <getRtcString+0x6c>)
 80017f2:	4819      	ldr	r0, [pc, #100]	; (8001858 <getRtcString+0x70>)
 80017f4:	f004 ff3c 	bl	8006670 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80017f8:	2200      	movs	r2, #0
 80017fa:	4918      	ldr	r1, [pc, #96]	; (800185c <getRtcString+0x74>)
 80017fc:	4816      	ldr	r0, [pc, #88]	; (8001858 <getRtcString+0x70>)
 80017fe:	f005 f819 	bl	8006834 <HAL_RTC_GetDate>
	sprintf(rtcTimeStr, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <getRtcString+0x6c>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <getRtcString+0x6c>)
 800180a:	785b      	ldrb	r3, [r3, #1]
 800180c:	4619      	mov	r1, r3
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <getRtcString+0x6c>)
 8001810:	789b      	ldrb	r3, [r3, #2]
 8001812:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	460b      	mov	r3, r1
 800181a:	4911      	ldr	r1, [pc, #68]	; (8001860 <getRtcString+0x78>)
 800181c:	f008 fec8 	bl	800a5b0 <siprintf>
	sprintf(rtcDateStr, "%02d/%02d/%02d", date.Date, date.Month, date.Year);
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <getRtcString+0x74>)
 8001822:	789b      	ldrb	r3, [r3, #2]
 8001824:	461a      	mov	r2, r3
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <getRtcString+0x74>)
 8001828:	785b      	ldrb	r3, [r3, #1]
 800182a:	4619      	mov	r1, r3
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <getRtcString+0x74>)
 800182e:	78db      	ldrb	r3, [r3, #3]
 8001830:	4638      	mov	r0, r7
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	460b      	mov	r3, r1
 8001836:	490b      	ldr	r1, [pc, #44]	; (8001864 <getRtcString+0x7c>)
 8001838:	f008 feba 	bl	800a5b0 <siprintf>
	sprintf(dateTime, "%s %s", rtcTimeStr, rtcDateStr);
 800183c:	463b      	mov	r3, r7
 800183e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001842:	4909      	ldr	r1, [pc, #36]	; (8001868 <getRtcString+0x80>)
 8001844:	4809      	ldr	r0, [pc, #36]	; (800186c <getRtcString+0x84>)
 8001846:	f008 feb3 	bl	800a5b0 <siprintf>

	return dateTime;
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <getRtcString+0x84>)
}
 800184c:	4618      	mov	r0, r3
 800184e:	3768      	adds	r7, #104	; 0x68
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000c7c 	.word	0x20000c7c
 8001858:	20000a98 	.word	0x20000a98
 800185c:	20000c90 	.word	0x20000c90
 8001860:	0800c8e4 	.word	0x0800c8e4
 8001864:	0800c8f4 	.word	0x0800c8f4
 8001868:	0800c904 	.word	0x0800c904
 800186c:	20000c94 	.word	0x20000c94

08001870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001876:	f002 fd13 	bl	80042a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800187a:	f000 f8b3 	bl	80019e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187e:	f000 fbc1 	bl	8002004 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001882:	f000 f919 	bl	8001ab8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001886:	f000 f969 	bl	8001b5c <MX_I2C1_Init>
  MX_I2C2_Init();
 800188a:	f000 f995 	bl	8001bb8 <MX_I2C2_Init>
  MX_SPI1_Init();
 800188e:	f000 fa1b 	bl	8001cc8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001892:	f000 fa4f 	bl	8001d34 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8001896:	f000 fb8b 	bl	8001fb0 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 800189a:	f000 fb41 	bl	8001f20 <MX_TIM10_Init>
  MX_TIM11_Init();
 800189e:	f000 fb63 	bl	8001f68 <MX_TIM11_Init>
  MX_TIM2_Init();
 80018a2:	f000 fa9d 	bl	8001de0 <MX_TIM2_Init>
  MX_FATFS_Init();
 80018a6:	f007 fa87 	bl	8008db8 <MX_FATFS_Init>
  MX_RTC_Init();
 80018aa:	f000 f9b3 	bl	8001c14 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  encoderInit(&htim1);
 80018ae:	483f      	ldr	r0, [pc, #252]	; (80019ac <main+0x13c>)
 80018b0:	f7ff fe56 	bl	8001560 <encoderInit>

  ds18_init(&htim10);
 80018b4:	483e      	ldr	r0, [pc, #248]	; (80019b0 <main+0x140>)
 80018b6:	f7ff fcf5 	bl	80012a4 <ds18_init>
  adc_int_init(&hadc1);
 80018ba:	483e      	ldr	r0, [pc, #248]	; (80019b4 <main+0x144>)
 80018bc:	f7ff fb2a 	bl	8000f14 <adc_int_init>
  huart_ds_init(&huart6);
 80018c0:	483d      	ldr	r0, [pc, #244]	; (80019b8 <main+0x148>)
 80018c2:	f000 fc55 	bl	8002170 <huart_ds_init>
  sendRtcHandler(&hrtc);
 80018c6:	483d      	ldr	r0, [pc, #244]	; (80019bc <main+0x14c>)
 80018c8:	f000 fc62 	bl	8002190 <sendRtcHandler>
  HAL_TIM_Base_Start(&htim10);
 80018cc:	4838      	ldr	r0, [pc, #224]	; (80019b0 <main+0x140>)
 80018ce:	f005 fd3f 	bl	8007350 <HAL_TIM_Base_Start>
  displayInit();
 80018d2:	f001 f8c9 	bl	8002a68 <displayInit>
  wire_reset();
 80018d6:	f7ff fd51 	bl	800137c <wire_reset>

  CircularBuffer_Init(&cb);
 80018da:	4839      	ldr	r0, [pc, #228]	; (80019c0 <main+0x150>)
 80018dc:	f001 f8ca 	bl	8002a74 <CircularBuffer_Init>
  sd_init();
 80018e0:	f001 f930 	bl	8002b44 <sd_init>
  send_uart("total: ");
 80018e4:	4837      	ldr	r0, [pc, #220]	; (80019c4 <main+0x154>)
 80018e6:	f7ff fe77 	bl	80015d8 <send_uart>
  send_uart_uint32(sd_totalspace());
 80018ea:	f001 f98b 	bl	8002c04 <sd_totalspace>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff2f 	bl	8001754 <send_uart_uint32>
  send_uart("\n\rfree: ");
 80018f6:	4834      	ldr	r0, [pc, #208]	; (80019c8 <main+0x158>)
 80018f8:	f7ff fe6e 	bl	80015d8 <send_uart>
  send_uart_uint32(sd_freespace());
 80018fc:	f001 f94c 	bl	8002b98 <sd_freespace>
 8001900:	4603      	mov	r3, r0
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff26 	bl	8001754 <send_uart_uint32>
  send_uart("\n\r");
 8001908:	4830      	ldr	r0, [pc, #192]	; (80019cc <main+0x15c>)
 800190a:	f7ff fe65 	bl	80015d8 <send_uart>
//  sd_writefile();
//  sd_closefile();
//  sd_readfile();
//  sd_closefile();
//  sd_demount();
  bool debug=true;
 800190e:	2301      	movs	r3, #1
 8001910:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001912:	213c      	movs	r1, #60	; 0x3c
 8001914:	4825      	ldr	r0, [pc, #148]	; (80019ac <main+0x13c>)
 8001916:	f006 f803 	bl	8007920 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800191a:	2100      	movs	r1, #0
 800191c:	482c      	ldr	r0, [pc, #176]	; (80019d0 <main+0x160>)
 800191e:	f005 fe5b 	bl	80075d8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001922:	2104      	movs	r1, #4
 8001924:	482a      	ldr	r0, [pc, #168]	; (80019d0 <main+0x160>)
 8001926:	f005 fe57 	bl	80075d8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 800192a:	2108      	movs	r1, #8
 800192c:	4828      	ldr	r0, [pc, #160]	; (80019d0 <main+0x160>)
 800192e:	f005 fe53 	bl	80075d8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001932:	210c      	movs	r1, #12
 8001934:	4826      	ldr	r0, [pc, #152]	; (80019d0 <main+0x160>)
 8001936:	f005 fe4f 	bl	80075d8 <HAL_TIM_OC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(debug) {
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d031      	beq.n	80019a4 <main+0x134>
		  bool needToWrite=false;
 8001940:	2300      	movs	r3, #0
 8001942:	71bb      	strb	r3, [r7, #6]
		  if(ch1przerwanie==1) {
 8001944:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <main+0x164>)
 8001946:	f993 3000 	ldrsb.w	r3, [r3]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d106      	bne.n	800195c <main+0xec>
			  //HAL_UART_Transmit(&huart6, (uint8_t *)"ch1 sie wykonal \n\r", strlen("ch1 sie wykonal \n\r"), HAL_MAX_DELAY);
			  ch1Enable();
 800194e:	f000 feab 	bl	80026a8 <ch1Enable>
			  ch1przerwanie=0;
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <main+0x164>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
			  needToWrite=true;
 8001958:	2301      	movs	r3, #1
 800195a:	71bb      	strb	r3, [r7, #6]
		  }
		  if(ch2przerwanie==1) { //castowanie na uint8_t bo funkcja oczekuje wlasnie takiego typu
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <main+0x168>)
 800195e:	f993 3000 	ldrsb.w	r3, [r3]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d106      	bne.n	8001974 <main+0x104>
			  //HAL_UART_Transmit(&huart6, (uint8_t *)"ch2 sie wykonal \n\r", strlen("ch2 sie wykonal \n\r"), HAL_MAX_DELAY);
			  ch2Enable();
 8001966:	f000 fef7 	bl	8002758 <ch2Enable>

			  ch2przerwanie=0;
 800196a:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <main+0x168>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
			  needToWrite=true;
 8001970:	2301      	movs	r3, #1
 8001972:	71bb      	strb	r3, [r7, #6]
		  }
		  if(ch3przerwanie==1) {
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <main+0x16c>)
 8001976:	f993 3000 	ldrsb.w	r3, [r3]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d106      	bne.n	800198c <main+0x11c>
			  //HAL_UART_Transmit(&huart6, (uint8_t *)"ch3 sie wykonal \n\r", strlen("ch3 sie wykonal \n\r"), HAL_MAX_DELAY);
			  ch3Enable();
 800197e:	f000 ff1b 	bl	80027b8 <ch3Enable>
			  ch3przerwanie=0;
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <main+0x16c>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
			  needToWrite=true;
 8001988:	2301      	movs	r3, #1
 800198a:	71bb      	strb	r3, [r7, #6]
			  }
		  if(ch4przerwanie==1) {
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <main+0x170>)
 800198e:	f993 3000 	ldrsb.w	r3, [r3]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d106      	bne.n	80019a4 <main+0x134>
			  //HAL_UART_Transmit(&huart6, (uint8_t *)"ch4 sie wykonal \n\r", strlen("ch4 sie wykonal \n\r"), HAL_MAX_DELAY);
			  ch4Enable();
 8001996:	f000 ff3d 	bl	8002814 <ch4Enable>
			  ch4przerwanie=0;
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <main+0x170>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
			  needToWrite=true;
 80019a0:	2301      	movs	r3, #1
 80019a2:	71bb      	strb	r3, [r7, #6]
//	  HAL_UART_Transmit(&huart6, (uint8_t *)charAr, strlen(charAr), HAL_MAX_DELAY);
//	  prev_value=value;
//	  }


	displayMenu();
 80019a4:	f001 f838 	bl	8002a18 <displayMenu>
	  if(debug) {
 80019a8:	e7c7      	b.n	800193a <main+0xca>
 80019aa:	bf00      	nop
 80019ac:	20000b10 	.word	0x20000b10
 80019b0:	20000ba0 	.word	0x20000ba0
 80019b4:	200009a8 	.word	0x200009a8
 80019b8:	20000c30 	.word	0x20000c30
 80019bc:	20000a98 	.word	0x20000a98
 80019c0:	20000d14 	.word	0x20000d14
 80019c4:	0800c90c 	.word	0x0800c90c
 80019c8:	0800c914 	.word	0x0800c914
 80019cc:	0800c920 	.word	0x0800c920
 80019d0:	20000b58 	.word	0x20000b58
 80019d4:	20000c75 	.word	0x20000c75
 80019d8:	20000c76 	.word	0x20000c76
 80019dc:	20000c77 	.word	0x20000c77
 80019e0:	20000c78 	.word	0x20000c78

080019e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b094      	sub	sp, #80	; 0x50
 80019e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ea:	f107 0320 	add.w	r3, r7, #32
 80019ee:	2230      	movs	r2, #48	; 0x30
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f008 feee 	bl	800a7d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <SystemClock_Config+0xcc>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <SystemClock_Config+0xcc>)
 8001a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a16:	6413      	str	r3, [r2, #64]	; 0x40
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <SystemClock_Config+0xcc>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a24:	2300      	movs	r3, #0
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <SystemClock_Config+0xd0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a21      	ldr	r2, [pc, #132]	; (8001ab4 <SystemClock_Config+0xd0>)
 8001a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <SystemClock_Config+0xd0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001a40:	2306      	movs	r3, #6
 8001a42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a44:	2301      	movs	r3, #1
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a50:	2302      	movs	r3, #2
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a54:	2300      	movs	r3, #0
 8001a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001a5c:	2350      	movs	r3, #80	; 0x50
 8001a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a60:	2302      	movs	r3, #2
 8001a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a64:	2304      	movs	r3, #4
 8001a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 ffa7 	bl	80059c0 <HAL_RCC_OscConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a78:	f000 fb70 	bl	800215c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7c:	230f      	movs	r3, #15
 8001a7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a80:	2302      	movs	r3, #2
 8001a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	2102      	movs	r1, #2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f004 fa09 	bl	8005eb0 <HAL_RCC_ClockConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001aa4:	f000 fb5a 	bl	800215c <Error_Handler>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3750      	adds	r7, #80	; 0x50
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40007000 	.word	0x40007000

08001ab8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001abe:	463b      	mov	r3, r7
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <MX_ADC1_Init+0x98>)
 8001acc:	4a21      	ldr	r2, [pc, #132]	; (8001b54 <MX_ADC1_Init+0x9c>)
 8001ace:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <MX_ADC1_Init+0x98>)
 8001ad2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ad6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <MX_ADC1_Init+0x98>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <MX_ADC1_Init+0x98>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_ADC1_Init+0x98>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <MX_ADC1_Init+0x98>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <MX_ADC1_Init+0x98>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <MX_ADC1_Init+0x98>)
 8001afa:	4a17      	ldr	r2, [pc, #92]	; (8001b58 <MX_ADC1_Init+0xa0>)
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MX_ADC1_Init+0x98>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <MX_ADC1_Init+0x98>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <MX_ADC1_Init+0x98>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <MX_ADC1_Init+0x98>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b18:	480d      	ldr	r0, [pc, #52]	; (8001b50 <MX_ADC1_Init+0x98>)
 8001b1a:	f002 fc57 	bl	80043cc <HAL_ADC_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b24:	f000 fb1a 	bl	800215c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b34:	463b      	mov	r3, r7
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_ADC1_Init+0x98>)
 8001b3a:	f002 fdd7 	bl	80046ec <HAL_ADC_ConfigChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b44:	f000 fb0a 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200009a8 	.word	0x200009a8
 8001b54:	40012000 	.word	0x40012000
 8001b58:	0f000001 	.word	0x0f000001

08001b5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b62:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <MX_I2C1_Init+0x54>)
 8001b64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b68:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <MX_I2C1_Init+0x58>)
 8001b6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b9a:	f003 fab5 	bl	8005108 <HAL_I2C_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ba4:	f000 fada 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200009f0 	.word	0x200009f0
 8001bb0:	40005400 	.word	0x40005400
 8001bb4:	000186a0 	.word	0x000186a0

08001bb8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_I2C2_Init+0x50>)
 8001bbe:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <MX_I2C2_Init+0x54>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_I2C2_Init+0x50>)
 8001bc4:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <MX_I2C2_Init+0x58>)
 8001bc6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_I2C2_Init+0x50>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_I2C2_Init+0x50>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_I2C2_Init+0x50>)
 8001bd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bda:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <MX_I2C2_Init+0x50>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_I2C2_Init+0x50>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <MX_I2C2_Init+0x50>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_I2C2_Init+0x50>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bf4:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_I2C2_Init+0x50>)
 8001bf6:	f003 fa87 	bl	8005108 <HAL_I2C_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c00:	f000 faac 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000a44 	.word	0x20000a44
 8001c0c:	40005800 	.word	0x40005800
 8001c10:	000186a0 	.word	0x000186a0

08001c14 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c28:	2300      	movs	r3, #0
 8001c2a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <MX_RTC_Init+0xac>)
 8001c2e:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <MX_RTC_Init+0xb0>)
 8001c30:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <MX_RTC_Init+0xac>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c38:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <MX_RTC_Init+0xac>)
 8001c3a:	227f      	movs	r2, #127	; 0x7f
 8001c3c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <MX_RTC_Init+0xac>)
 8001c40:	22ff      	movs	r2, #255	; 0xff
 8001c42:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c44:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <MX_RTC_Init+0xac>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <MX_RTC_Init+0xac>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <MX_RTC_Init+0xac>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c56:	481a      	ldr	r0, [pc, #104]	; (8001cc0 <MX_RTC_Init+0xac>)
 8001c58:	f004 fbfa 	bl	8006450 <HAL_RTC_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001c62:	f000 fa7b 	bl	800215c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8001c66:	2301      	movs	r3, #1
 8001c68:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480f      	ldr	r0, [pc, #60]	; (8001cc0 <MX_RTC_Init+0xac>)
 8001c82:	f004 fc5b 	bl	800653c <HAL_RTC_SetTime>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001c8c:	f000 fa66 	bl	800215c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001c90:	2303      	movs	r3, #3
 8001c92:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8001c94:	2312      	movs	r3, #18
 8001c96:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 8001c98:	2306      	movs	r3, #6
 8001c9a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001c9c:	2323      	movs	r3, #35	; 0x23
 8001c9e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <MX_RTC_Init+0xac>)
 8001ca8:	f004 fd40 	bl	800672c <HAL_RTC_SetDate>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001cb2:	f000 fa53 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000a98 	.word	0x20000a98
 8001cc4:	40002800 	.word	0x40002800

08001cc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001cce:	4a18      	ldr	r2, [pc, #96]	; (8001d30 <MX_SPI1_Init+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001cd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001d14:	220a      	movs	r2, #10
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <MX_SPI1_Init+0x64>)
 8001d1a:	f004 fe97 	bl	8006a4c <HAL_SPI_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d24:	f000 fa1a 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000ab8 	.word	0x20000ab8
 8001d30:	40013000 	.word	0x40013000

08001d34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	; 0x30
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	2224      	movs	r2, #36	; 0x24
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f008 fd46 	bl	800a7d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <MX_TIM1_Init+0xa4>)
 8001d52:	4a22      	ldr	r2, [pc, #136]	; (8001ddc <MX_TIM1_Init+0xa8>)
 8001d54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <MX_TIM1_Init+0xa4>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <MX_TIM1_Init+0xa4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40;
 8001d62:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <MX_TIM1_Init+0xa4>)
 8001d64:	2228      	movs	r2, #40	; 0x28
 8001d66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <MX_TIM1_Init+0xa4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <MX_TIM1_Init+0xa4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <MX_TIM1_Init+0xa4>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d82:	2301      	movs	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001d8a:	230f      	movs	r3, #15
 8001d8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d92:	2301      	movs	r3, #1
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001d9a:	230f      	movs	r3, #15
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001d9e:	f107 030c 	add.w	r3, r7, #12
 8001da2:	4619      	mov	r1, r3
 8001da4:	480c      	ldr	r0, [pc, #48]	; (8001dd8 <MX_TIM1_Init+0xa4>)
 8001da6:	f005 fd15 	bl	80077d4 <HAL_TIM_Encoder_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001db0:	f000 f9d4 	bl	800215c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db4:	2300      	movs	r3, #0
 8001db6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_TIM1_Init+0xa4>)
 8001dc2:	f006 fbb5 	bl	8008530 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001dcc:	f000 f9c6 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dd0:	bf00      	nop
 8001dd2:	3730      	adds	r7, #48	; 0x30
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000b10 	.word	0x20000b10
 8001ddc:	40010000 	.word	0x40010000

08001de0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08e      	sub	sp, #56	; 0x38
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df4:	f107 0320 	add.w	r3, r7, #32
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
 8001e0c:	615a      	str	r2, [r3, #20]
 8001e0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e10:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <MX_TIM2_Init+0x138>)
 8001e12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12000;
 8001e18:	4b3f      	ldr	r3, [pc, #252]	; (8001f18 <MX_TIM2_Init+0x138>)
 8001e1a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001e1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <MX_TIM2_Init+0x138>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e26:	4b3c      	ldr	r3, [pc, #240]	; (8001f18 <MX_TIM2_Init+0x138>)
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2e:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <MX_TIM2_Init+0x138>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e34:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <MX_TIM2_Init+0x138>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e3a:	4837      	ldr	r0, [pc, #220]	; (8001f18 <MX_TIM2_Init+0x138>)
 8001e3c:	f005 fa38 	bl	80072b0 <HAL_TIM_Base_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e46:	f000 f989 	bl	800215c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e54:	4619      	mov	r1, r3
 8001e56:	4830      	ldr	r0, [pc, #192]	; (8001f18 <MX_TIM2_Init+0x138>)
 8001e58:	f005 ff74 	bl	8007d44 <HAL_TIM_ConfigClockSource>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001e62:	f000 f97b 	bl	800215c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001e66:	482c      	ldr	r0, [pc, #176]	; (8001f18 <MX_TIM2_Init+0x138>)
 8001e68:	f005 fb5d 	bl	8007526 <HAL_TIM_OC_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001e72:	f000 f973 	bl	800215c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	4619      	mov	r1, r3
 8001e84:	4824      	ldr	r0, [pc, #144]	; (8001f18 <MX_TIM2_Init+0x138>)
 8001e86:	f006 fb53 	bl	8008530 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e90:	f000 f964 	bl	800215c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001e94:	2330      	movs	r3, #48	; 0x30
 8001e96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6659;
 8001e98:	f641 2303 	movw	r3, #6659	; 0x1a03
 8001e9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	4619      	mov	r1, r3
 8001eac:	481a      	ldr	r0, [pc, #104]	; (8001f18 <MX_TIM2_Init+0x138>)
 8001eae:	f005 feed 	bl	8007c8c <HAL_TIM_OC_ConfigChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001eb8:	f000 f950 	bl	800215c <Error_Handler>
  }
  sConfigOC.Pulse = 13500;
 8001ebc:	f243 43bc 	movw	r3, #13500	; 0x34bc
 8001ec0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4813      	ldr	r0, [pc, #76]	; (8001f18 <MX_TIM2_Init+0x138>)
 8001eca:	f005 fedf 	bl	8007c8c <HAL_TIM_OC_ConfigChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8001ed4:	f000 f942 	bl	800215c <Error_Handler>
  }
  sConfigOC.Pulse = 36000;
 8001ed8:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 8001edc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	480c      	ldr	r0, [pc, #48]	; (8001f18 <MX_TIM2_Init+0x138>)
 8001ee6:	f005 fed1 	bl	8007c8c <HAL_TIM_OC_ConfigChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 8001ef0:	f000 f934 	bl	800215c <Error_Handler>
  }
  sConfigOC.Pulse = 67000;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <MX_TIM2_Init+0x13c>)
 8001ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	220c      	movs	r2, #12
 8001efc:	4619      	mov	r1, r3
 8001efe:	4806      	ldr	r0, [pc, #24]	; (8001f18 <MX_TIM2_Init+0x138>)
 8001f00:	f005 fec4 	bl	8007c8c <HAL_TIM_OC_ConfigChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8001f0a:	f000 f927 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	3738      	adds	r7, #56	; 0x38
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000b58 	.word	0x20000b58
 8001f1c:	000105b8 	.word	0x000105b8

08001f20 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <MX_TIM10_Init+0x40>)
 8001f26:	4a0f      	ldr	r2, [pc, #60]	; (8001f64 <MX_TIM10_Init+0x44>)
 8001f28:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <MX_TIM10_Init+0x40>)
 8001f2c:	224f      	movs	r2, #79	; 0x4f
 8001f2e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <MX_TIM10_Init+0x40>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <MX_TIM10_Init+0x40>)
 8001f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <MX_TIM10_Init+0x40>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_TIM10_Init+0x40>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <MX_TIM10_Init+0x40>)
 8001f4c:	f005 f9b0 	bl	80072b0 <HAL_TIM_Base_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001f56:	f000 f901 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000ba0 	.word	0x20000ba0
 8001f64:	40014400 	.word	0x40014400

08001f68 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <MX_TIM11_Init+0x40>)
 8001f6e:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <MX_TIM11_Init+0x44>)
 8001f70:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10;
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <MX_TIM11_Init+0x40>)
 8001f74:	220a      	movs	r2, #10
 8001f76:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <MX_TIM11_Init+0x40>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <MX_TIM11_Init+0x40>)
 8001f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f84:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <MX_TIM11_Init+0x40>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <MX_TIM11_Init+0x40>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <MX_TIM11_Init+0x40>)
 8001f94:	f005 f98c 	bl	80072b0 <HAL_TIM_Base_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001f9e:	f000 f8dd 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000be8 	.word	0x20000be8
 8001fac:	40014800 	.word	0x40014800

08001fb0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <MX_USART6_UART_Init+0x50>)
 8001fb8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_USART6_UART_Init+0x4c>)
 8001fe8:	f006 fb24 	bl	8008634 <HAL_UART_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001ff2:	f000 f8b3 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000c30 	.word	0x20000c30
 8002000:	40011400 	.word	0x40011400

08002004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <MX_GPIO_Init+0x14c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a4b      	ldr	r2, [pc, #300]	; (8002150 <MX_GPIO_Init+0x14c>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b49      	ldr	r3, [pc, #292]	; (8002150 <MX_GPIO_Init+0x14c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b45      	ldr	r3, [pc, #276]	; (8002150 <MX_GPIO_Init+0x14c>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a44      	ldr	r2, [pc, #272]	; (8002150 <MX_GPIO_Init+0x14c>)
 8002040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b42      	ldr	r3, [pc, #264]	; (8002150 <MX_GPIO_Init+0x14c>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	4b3e      	ldr	r3, [pc, #248]	; (8002150 <MX_GPIO_Init+0x14c>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a3d      	ldr	r2, [pc, #244]	; (8002150 <MX_GPIO_Init+0x14c>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b3b      	ldr	r3, [pc, #236]	; (8002150 <MX_GPIO_Init+0x14c>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	4b37      	ldr	r3, [pc, #220]	; (8002150 <MX_GPIO_Init+0x14c>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a36      	ldr	r2, [pc, #216]	; (8002150 <MX_GPIO_Init+0x14c>)
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b34      	ldr	r3, [pc, #208]	; (8002150 <MX_GPIO_Init+0x14c>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_SD_Pin|LED5_Pin, GPIO_PIN_RESET);
 800208a:	2200      	movs	r2, #0
 800208c:	f248 0110 	movw	r1, #32784	; 0x8010
 8002090:	4830      	ldr	r0, [pc, #192]	; (8002154 <MX_GPIO_Init+0x150>)
 8002092:	f003 f807 	bl	80050a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8002096:	2201      	movs	r2, #1
 8002098:	2102      	movs	r1, #2
 800209a:	482f      	ldr	r0, [pc, #188]	; (8002158 <MX_GPIO_Init+0x154>)
 800209c:	f003 f802 	bl	80050a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|LED4_Pin|LED3_Pin, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	f243 0118 	movw	r1, #12312	; 0x3018
 80020a6:	482c      	ldr	r0, [pc, #176]	; (8002158 <MX_GPIO_Init+0x154>)
 80020a8:	f002 fffc 	bl	80050a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_SD_Pin LED5_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin|LED5_Pin;
 80020ac:	f248 0310 	movw	r3, #32784	; 0x8010
 80020b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b2:	2301      	movs	r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020be:	f107 0314 	add.w	r3, r7, #20
 80020c2:	4619      	mov	r1, r3
 80020c4:	4823      	ldr	r0, [pc, #140]	; (8002154 <MX_GPIO_Init+0x150>)
 80020c6:	f002 fe51 	bl	8004d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : DSO_DATA_Pin */
  GPIO_InitStruct.Pin = DSO_DATA_Pin;
 80020ca:	2302      	movs	r3, #2
 80020cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80020ce:	2311      	movs	r3, #17
 80020d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d2:	2301      	movs	r3, #1
 80020d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DSO_DATA_GPIO_Port, &GPIO_InitStruct);
 80020da:	f107 0314 	add.w	r3, r7, #20
 80020de:	4619      	mov	r1, r3
 80020e0:	481d      	ldr	r0, [pc, #116]	; (8002158 <MX_GPIO_Init+0x154>)
 80020e2:	f002 fe43 	bl	8004d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : DET_SD_Pin */
  GPIO_InitStruct.Pin = DET_SD_Pin;
 80020e6:	2304      	movs	r3, #4
 80020e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DET_SD_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	4817      	ldr	r0, [pc, #92]	; (8002158 <MX_GPIO_Init+0x154>)
 80020fa:	f002 fe37 	bl	8004d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED4_Pin|LED3_Pin;
 80020fe:	f243 0318 	movw	r3, #12312	; 0x3018
 8002102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002104:	2301      	movs	r3, #1
 8002106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4619      	mov	r1, r3
 8002116:	4810      	ldr	r0, [pc, #64]	; (8002158 <MX_GPIO_Init+0x154>)
 8002118:	f002 fe28 	bl	8004d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BTN_Pin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 800211c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002122:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4619      	mov	r1, r3
 8002132:	4809      	ldr	r0, [pc, #36]	; (8002158 <MX_GPIO_Init+0x154>)
 8002134:	f002 fe1a 	bl	8004d6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002138:	2200      	movs	r2, #0
 800213a:	2100      	movs	r1, #0
 800213c:	2017      	movs	r0, #23
 800213e:	f002 fdde 	bl	8004cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002142:	2017      	movs	r0, #23
 8002144:	f002 fdf7 	bl	8004d36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002148:	bf00      	nop
 800214a:	3728      	adds	r7, #40	; 0x28
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800
 8002154:	40020000 	.word	0x40020000
 8002158:	40020400 	.word	0x40020400

0800215c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002160:	b672      	cpsid	i
}
 8002162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  send_uart("error handler loop");
 8002164:	4801      	ldr	r0, [pc, #4]	; (800216c <Error_Handler+0x10>)
 8002166:	f7ff fa37 	bl	80015d8 <send_uart>
 800216a:	e7fb      	b.n	8002164 <Error_Handler+0x8>
 800216c:	0800c924 	.word	0x0800c924

08002170 <huart_ds_init>:
volatile Screen screen = MAIN_MENU; //instancja enuma Screen, aktualny stan menu
int sensorAdcExt=0;
UART_HandleTypeDef *huart6_new;
RTC_HandleTypeDef *hrtc_new;

void huart_ds_init(UART_HandleTypeDef *huart6) {
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	huart6_new=huart6;
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <huart_ds_init+0x1c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000cfc 	.word	0x20000cfc

08002190 <sendRtcHandler>:

void sendRtcHandler(RTC_HandleTypeDef *hrtc) {
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	hrtc_new=hrtc;
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <sendRtcHandler+0x1c>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6013      	str	r3, [r2, #0]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000d00 	.word	0x20000d00

080021b0 <backButton>:

void backButton(uint8_t back_pos, uint8_t target_screen, uint16_t encoder_pos) { //usunac encoder_pos bo nieuzywane
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
 80021ba:	460b      	mov	r3, r1
 80021bc:	71bb      	strb	r3, [r7, #6]
 80021be:	4613      	mov	r3, r2
 80021c0:	80bb      	strh	r3, [r7, #4]
	ssd1306_SetCursor(0, 56);
 80021c2:	2138      	movs	r1, #56	; 0x38
 80021c4:	2000      	movs	r0, #0
 80021c6:	f002 f821 	bl	800420c <ssd1306_SetCursor>
	ssd1306_WriteString("COFNIJ", Font_6x8, entrySelected(back_pos) ? Black : White);
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f9d6 	bl	8001580 <entrySelected>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f083 0301 	eor.w	r3, r3, #1
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	4a0b      	ldr	r2, [pc, #44]	; (800220c <backButton+0x5c>)
 80021de:	ca06      	ldmia	r2, {r1, r2}
 80021e0:	480b      	ldr	r0, [pc, #44]	; (8002210 <backButton+0x60>)
 80021e2:	f001 ffed 	bl	80041c0 <ssd1306_WriteString>
	if(entryClicked(back_pos)) {
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f9db 	bl	80015a6 <entryClicked>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <backButton+0x52>
		encSetPos(0);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7ff f992 	bl	8001520 <encSetPos>
		//confirm=true;
		screen = target_screen;
 80021fc:	4a05      	ldr	r2, [pc, #20]	; (8002214 <backButton+0x64>)
 80021fe:	79bb      	ldrb	r3, [r7, #6]
 8002200:	7013      	strb	r3, [r2, #0]
	}
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000784 	.word	0x20000784
 8002210:	0800c938 	.word	0x0800c938
 8002214:	20000cf8 	.word	0x20000cf8

08002218 <listAllItemsFromMenu>:

void listAllItemsFromMenu(Menu *menu) {
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < menu->entry_count; ++i) { //-> bo entry_count na stercie cpu jest (heap)
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e031      	b.n	800228a <listAllItemsFromMenu+0x72>
			ssd1306_SetCursor(0, i*10);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	0092      	lsls	r2, r2, #2
 800222e:	4413      	add	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	b2db      	uxtb	r3, r3
 8002234:	4619      	mov	r1, r3
 8002236:	2000      	movs	r0, #0
 8002238:	f001 ffe8 	bl	800420c <ssd1306_SetCursor>
			if(entryClicked(i)) {
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	b21b      	sxth	r3, r3
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff f9b0 	bl	80015a6 <entryClicked>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <listAllItemsFromMenu+0x44>
				screen = menu->entries[i].entry;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	3201      	adds	r2, #1
 8002252:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <listAllItemsFromMenu+0x88>)
 8002258:	701a      	strb	r2, [r3, #0]
				break;
 800225a:	e01c      	b.n	8002296 <listAllItemsFromMenu+0x7e>
			}
			ssd1306_WriteString(menu->entries[i].entry_string, Font_7x10, entrySelected(i) ? Black : White);
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3301      	adds	r3, #1
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	685c      	ldr	r4, [r3, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	b21b      	sxth	r3, r3
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff f987 	bl	8001580 <entrySelected>
 8002272:	4603      	mov	r3, r0
 8002274:	f083 0301 	eor.w	r3, r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <listAllItemsFromMenu+0x8c>)
 800227c:	ca06      	ldmia	r2, {r1, r2}
 800227e:	4620      	mov	r0, r4
 8002280:	f001 ff9e 	bl	80041c0 <ssd1306_WriteString>
	for (int i = 0; i < menu->entry_count; ++i) { //-> bo entry_count na stercie cpu jest (heap)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	3301      	adds	r3, #1
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	dbc8      	blt.n	8002226 <listAllItemsFromMenu+0xe>
		  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bd90      	pop	{r4, r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000cf8 	.word	0x20000cf8
 80022a4:	2000078c 	.word	0x2000078c

080022a8 <drawMainMenu>:

void drawMainMenu(Menu *menu) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	encSetRange(0, 2);
 80022b0:	2102      	movs	r1, #2
 80022b2:	2000      	movs	r0, #0
 80022b4:	f7ff f91a 	bl	80014ec <encSetRange>
	listAllItemsFromMenu(menu);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ffad 	bl	8002218 <listAllItemsFromMenu>
	uint32_t encVal = encoderGet();
 80022be:	f7ff f941 	bl	8001544 <encoderGet>
 80022c2:	60f8      	str	r0, [r7, #12]
	char charArVal[4];
	sprintf(charArVal, "%lu", encVal);
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	490f      	ldr	r1, [pc, #60]	; (8002308 <drawMainMenu+0x60>)
 80022cc:	4618      	mov	r0, r3
 80022ce:	f008 f96f 	bl	800a5b0 <siprintf>
	ssd1306_SetCursor(0, 44);
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	2000      	movs	r0, #0
 80022d6:	f001 ff99 	bl	800420c <ssd1306_SetCursor>
	ssd1306_WriteString(charArVal, Font_7x10, White);
 80022da:	4a0c      	ldr	r2, [pc, #48]	; (800230c <drawMainMenu+0x64>)
 80022dc:	f107 0008 	add.w	r0, r7, #8
 80022e0:	2301      	movs	r3, #1
 80022e2:	ca06      	ldmia	r2, {r1, r2}
 80022e4:	f001 ff6c 	bl	80041c0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 54);
 80022e8:	2136      	movs	r1, #54	; 0x36
 80022ea:	2000      	movs	r0, #0
 80022ec:	f001 ff8e 	bl	800420c <ssd1306_SetCursor>
	ssd1306_WriteString(getRtcString(), Font_7x10, White);
 80022f0:	f7ff fa7a 	bl	80017e8 <getRtcString>
 80022f4:	4a05      	ldr	r2, [pc, #20]	; (800230c <drawMainMenu+0x64>)
 80022f6:	2301      	movs	r3, #1
 80022f8:	ca06      	ldmia	r2, {r1, r2}
 80022fa:	f001 ff61 	bl	80041c0 <ssd1306_WriteString>

}
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	0800c940 	.word	0x0800c940
 800230c:	2000078c 	.word	0x2000078c

08002310 <drawSensorConfig>:

void drawSensorConfig(Menu *menu) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	encSetRange(0, 3);
 8002318:	2103      	movs	r1, #3
 800231a:	2000      	movs	r0, #0
 800231c:	f7ff f8e6 	bl	80014ec <encSetRange>
	listAllItemsFromMenu(menu);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ff79 	bl	8002218 <listAllItemsFromMenu>
	backButton(3, MAIN_MENU, 1);
 8002326:	2201      	movs	r2, #1
 8002328:	2100      	movs	r1, #0
 800232a:	2003      	movs	r0, #3
 800232c:	f7ff ff40 	bl	80021b0 <backButton>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <drawSdConfig>:

volatile bool dataOverwrite=false;
char strDataOverwrite[6];
void drawSdConfig(Menu *menu) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	encSetRange(0, 1);
 8002340:	2101      	movs	r1, #1
 8002342:	2000      	movs	r0, #0
 8002344:	f7ff f8d2 	bl	80014ec <encSetRange>
	ssd1306_SetCursor(0, 0);
 8002348:	2100      	movs	r1, #0
 800234a:	2000      	movs	r0, #0
 800234c:	f001 ff5e 	bl	800420c <ssd1306_SetCursor>
	ssd1306_WriteString("SD status:", Font_7x10, White);
 8002350:	4a34      	ldr	r2, [pc, #208]	; (8002424 <drawSdConfig+0xec>)
 8002352:	2301      	movs	r3, #1
 8002354:	ca06      	ldmia	r2, {r1, r2}
 8002356:	4834      	ldr	r0, [pc, #208]	; (8002428 <drawSdConfig+0xf0>)
 8002358:	f001 ff32 	bl	80041c0 <ssd1306_WriteString>
	ssd1306_SetCursor(70, 0);
 800235c:	2100      	movs	r1, #0
 800235e:	2046      	movs	r0, #70	; 0x46
 8002360:	f001 ff54 	bl	800420c <ssd1306_SetCursor>
	if(!sdReady) {
 8002364:	4b31      	ldr	r3, [pc, #196]	; (800242c <drawSdConfig+0xf4>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	f083 0301 	eor.w	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <drawSdConfig+0x48>
		ssd1306_WriteString(" error", Font_7x10, White);
 8002372:	4a2c      	ldr	r2, [pc, #176]	; (8002424 <drawSdConfig+0xec>)
 8002374:	2301      	movs	r3, #1
 8002376:	ca06      	ldmia	r2, {r1, r2}
 8002378:	482d      	ldr	r0, [pc, #180]	; (8002430 <drawSdConfig+0xf8>)
 800237a:	f001 ff21 	bl	80041c0 <ssd1306_WriteString>
 800237e:	e005      	b.n	800238c <drawSdConfig+0x54>
	}
	else {
		ssd1306_WriteString(" OK", Font_7x10, White);
 8002380:	4a28      	ldr	r2, [pc, #160]	; (8002424 <drawSdConfig+0xec>)
 8002382:	2301      	movs	r3, #1
 8002384:	ca06      	ldmia	r2, {r1, r2}
 8002386:	482b      	ldr	r0, [pc, #172]	; (8002434 <drawSdConfig+0xfc>)
 8002388:	f001 ff1a 	bl	80041c0 <ssd1306_WriteString>
	}
	ssd1306_SetCursor(0, 10);
 800238c:	210a      	movs	r1, #10
 800238e:	2000      	movs	r0, #0
 8002390:	f001 ff3c 	bl	800420c <ssd1306_SetCursor>
	ssd1306_WriteString("Overwrite: ", Font_7x10, White);
 8002394:	4a23      	ldr	r2, [pc, #140]	; (8002424 <drawSdConfig+0xec>)
 8002396:	2301      	movs	r3, #1
 8002398:	ca06      	ldmia	r2, {r1, r2}
 800239a:	4827      	ldr	r0, [pc, #156]	; (8002438 <drawSdConfig+0x100>)
 800239c:	f001 ff10 	bl	80041c0 <ssd1306_WriteString>
	if(entrySelected(0) && entryClicked(0)) {
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7ff f8ed 	bl	8001580 <entrySelected>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d014      	beq.n	80023d6 <drawSdConfig+0x9e>
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff f8fa 	bl	80015a6 <entryClicked>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00e      	beq.n	80023d6 <drawSdConfig+0x9e>
				if(dataOverwrite==false) {
 80023b8:	4b20      	ldr	r3, [pc, #128]	; (800243c <drawSdConfig+0x104>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <drawSdConfig+0x98>
					dataOverwrite=true;
 80023c8:	4b1c      	ldr	r3, [pc, #112]	; (800243c <drawSdConfig+0x104>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	e002      	b.n	80023d6 <drawSdConfig+0x9e>
				}
				else {
					dataOverwrite=false;
 80023d0:	4b1a      	ldr	r3, [pc, #104]	; (800243c <drawSdConfig+0x104>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
				}
	}
	ssd1306_SetCursor(75, 10);
 80023d6:	210a      	movs	r1, #10
 80023d8:	204b      	movs	r0, #75	; 0x4b
 80023da:	f001 ff17 	bl	800420c <ssd1306_SetCursor>
	sprintf(strDataOverwrite, "%s", dataOverwrite ? "true" : "false");
 80023de:	4b17      	ldr	r3, [pc, #92]	; (800243c <drawSdConfig+0x104>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <drawSdConfig+0xb4>
 80023e8:	4b15      	ldr	r3, [pc, #84]	; (8002440 <drawSdConfig+0x108>)
 80023ea:	e000      	b.n	80023ee <drawSdConfig+0xb6>
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <drawSdConfig+0x10c>)
 80023ee:	461a      	mov	r2, r3
 80023f0:	4915      	ldr	r1, [pc, #84]	; (8002448 <drawSdConfig+0x110>)
 80023f2:	4816      	ldr	r0, [pc, #88]	; (800244c <drawSdConfig+0x114>)
 80023f4:	f008 f8dc 	bl	800a5b0 <siprintf>
	ssd1306_WriteString(strDataOverwrite, Font_7x10, entrySelected(0) ? Black : White);
 80023f8:	2000      	movs	r0, #0
 80023fa:	f7ff f8c1 	bl	8001580 <entrySelected>
 80023fe:	4603      	mov	r3, r0
 8002400:	f083 0301 	eor.w	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4a07      	ldr	r2, [pc, #28]	; (8002424 <drawSdConfig+0xec>)
 8002408:	ca06      	ldmia	r2, {r1, r2}
 800240a:	4810      	ldr	r0, [pc, #64]	; (800244c <drawSdConfig+0x114>)
 800240c:	f001 fed8 	bl	80041c0 <ssd1306_WriteString>
	backButton(1, MAIN_MENU, 0);
 8002410:	2200      	movs	r2, #0
 8002412:	2100      	movs	r1, #0
 8002414:	2001      	movs	r0, #1
 8002416:	f7ff fecb 	bl	80021b0 <backButton>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	2000078c 	.word	0x2000078c
 8002428:	0800c944 	.word	0x0800c944
 800242c:	20003670 	.word	0x20003670
 8002430:	0800c950 	.word	0x0800c950
 8002434:	0800c958 	.word	0x0800c958
 8002438:	0800c95c 	.word	0x0800c95c
 800243c:	20000d04 	.word	0x20000d04
 8002440:	0800c968 	.word	0x0800c968
 8002444:	0800c970 	.word	0x0800c970
 8002448:	0800c978 	.word	0x0800c978
 800244c:	20000d08 	.word	0x20000d08

08002450 <drawSensorConfigAdcExt>:




void drawSensorConfigAdcExt(Menu *menu) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	encSetRange(0, 4);
 8002458:	2104      	movs	r1, #4
 800245a:	2000      	movs	r0, #0
 800245c:	f7ff f846 	bl	80014ec <encSetRange>
	listAllItemsFromMenu(menu);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff fed9 	bl	8002218 <listAllItemsFromMenu>
	backButton(4, MAIN_MENU, 4);
 8002466:	2204      	movs	r2, #4
 8002468:	2100      	movs	r1, #0
 800246a:	2004      	movs	r0, #4
 800246c:	f7ff fea0 	bl	80021b0 <backButton>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <drawSensorConfigAdcInt>:
void drawSensorConfigAdcInt(Menu *menu) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	encSetRange(0, 4);
 8002480:	2104      	movs	r1, #4
 8002482:	2000      	movs	r0, #0
 8002484:	f7ff f832 	bl	80014ec <encSetRange>
	listAllItemsFromMenu(menu);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff fec5 	bl	8002218 <listAllItemsFromMenu>
	backButton(4, MAIN_MENU, 4);
 800248e:	2204      	movs	r2, #4
 8002490:	2100      	movs	r1, #0
 8002492:	2004      	movs	r0, #4
 8002494:	f7ff fe8c 	bl	80021b0 <backButton>
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <drawSensorConfigDS18>:
void drawSensorConfigDS18(Menu *menu) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	encSetRange(0, 1);
 80024a8:	2101      	movs	r1, #1
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7ff f81e 	bl	80014ec <encSetRange>
	listAllItemsFromMenu(menu);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff feb1 	bl	8002218 <listAllItemsFromMenu>
	backButton(3, MAIN_MENU, 3);
 80024b6:	2203      	movs	r2, #3
 80024b8:	2100      	movs	r1, #0
 80024ba:	2003      	movs	r0, #3
 80024bc:	f7ff fe78 	bl	80021b0 <backButton>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <drawSensorOptions>:
uint16_t samplingRates[] = {10,50,100,500};
volatile uint8_t  samplingIndex = 0;
volatile int counter=0;
char sampl1str[10]="???";

void drawSensorOptions(uint8_t index) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
	ssd1306_WriteString(sensors[index].name, Font_11x18, White);
 80024d2:	79fa      	ldrb	r2, [r7, #7]
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4a57      	ldr	r2, [pc, #348]	; (800263c <drawSensorOptions+0x174>)
 80024de:	1898      	adds	r0, r3, r2
 80024e0:	4a57      	ldr	r2, [pc, #348]	; (8002640 <drawSensorOptions+0x178>)
 80024e2:	2301      	movs	r3, #1
 80024e4:	ca06      	ldmia	r2, {r1, r2}
 80024e6:	f001 fe6b 	bl	80041c0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 80024ea:	2112      	movs	r1, #18
 80024ec:	2000      	movs	r0, #0
 80024ee:	f001 fe8d 	bl	800420c <ssd1306_SetCursor>
	char isEnabledStr[20];
	if(entrySelected(0) && entryClicked(0)) {
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7ff f844 	bl	8001580 <entrySelected>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d028      	beq.n	8002550 <drawSensorOptions+0x88>
 80024fe:	2000      	movs	r0, #0
 8002500:	f7ff f851 	bl	80015a6 <entryClicked>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d022      	beq.n	8002550 <drawSensorOptions+0x88>
		if(sensors[index].isEnabled==false) {
 800250a:	79fa      	ldrb	r2, [r7, #7]
 800250c:	494b      	ldr	r1, [pc, #300]	; (800263c <drawSensorOptions+0x174>)
 800250e:	4613      	mov	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	440b      	add	r3, r1
 8002518:	3314      	adds	r3, #20
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	f083 0301 	eor.w	r3, r3, #1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <drawSensorOptions+0x74>
			sensors[index].isEnabled=true;
 8002526:	79fa      	ldrb	r2, [r7, #7]
 8002528:	4944      	ldr	r1, [pc, #272]	; (800263c <drawSensorOptions+0x174>)
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	3314      	adds	r3, #20
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e009      	b.n	8002550 <drawSensorOptions+0x88>
		}
		else {
			sensors[index].isEnabled=false;
 800253c:	79fa      	ldrb	r2, [r7, #7]
 800253e:	493f      	ldr	r1, [pc, #252]	; (800263c <drawSensorOptions+0x174>)
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	440b      	add	r3, r1
 800254a:	3314      	adds	r3, #20
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
		}
	}
	sprintf(isEnabledStr, "enabled: %s", sensors[index].isEnabled ? "true" : "false");
 8002550:	79fa      	ldrb	r2, [r7, #7]
 8002552:	493a      	ldr	r1, [pc, #232]	; (800263c <drawSensorOptions+0x174>)
 8002554:	4613      	mov	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	3314      	adds	r3, #20
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <drawSensorOptions+0xa2>
 8002566:	4a37      	ldr	r2, [pc, #220]	; (8002644 <drawSensorOptions+0x17c>)
 8002568:	e000      	b.n	800256c <drawSensorOptions+0xa4>
 800256a:	4a37      	ldr	r2, [pc, #220]	; (8002648 <drawSensorOptions+0x180>)
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	4936      	ldr	r1, [pc, #216]	; (800264c <drawSensorOptions+0x184>)
 8002572:	4618      	mov	r0, r3
 8002574:	f008 f81c 	bl	800a5b0 <siprintf>
	ssd1306_WriteString(isEnabledStr, Font_7x10, entrySelected(0) ? Black : White);
 8002578:	2000      	movs	r0, #0
 800257a:	f7ff f801 	bl	8001580 <entrySelected>
 800257e:	4603      	mov	r3, r0
 8002580:	f083 0301 	eor.w	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4a32      	ldr	r2, [pc, #200]	; (8002650 <drawSensorOptions+0x188>)
 8002588:	f107 000c 	add.w	r0, r7, #12
 800258c:	ca06      	ldmia	r2, {r1, r2}
 800258e:	f001 fe17 	bl	80041c0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 28);
 8002592:	211c      	movs	r1, #28
 8002594:	2000      	movs	r0, #0
 8002596:	f001 fe39 	bl	800420c <ssd1306_SetCursor>
	ssd1306_WriteString("period [ms]: ", Font_7x10, White);
 800259a:	4a2d      	ldr	r2, [pc, #180]	; (8002650 <drawSensorOptions+0x188>)
 800259c:	2301      	movs	r3, #1
 800259e:	ca06      	ldmia	r2, {r1, r2}
 80025a0:	482c      	ldr	r0, [pc, #176]	; (8002654 <drawSensorOptions+0x18c>)
 80025a2:	f001 fe0d 	bl	80041c0 <ssd1306_WriteString>
	ssd1306_SetCursor(90, 28);
 80025a6:	211c      	movs	r1, #28
 80025a8:	205a      	movs	r0, #90	; 0x5a
 80025aa:	f001 fe2f 	bl	800420c <ssd1306_SetCursor>
	sprintf(sampl1str, "%d\n\r", sensors[index].samplingRate);
 80025ae:	79fa      	ldrb	r2, [r7, #7]
 80025b0:	4922      	ldr	r1, [pc, #136]	; (800263c <drawSensorOptions+0x174>)
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	440b      	add	r3, r1
 80025bc:	3316      	adds	r3, #22
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4925      	ldr	r1, [pc, #148]	; (8002658 <drawSensorOptions+0x190>)
 80025c4:	4825      	ldr	r0, [pc, #148]	; (800265c <drawSensorOptions+0x194>)
 80025c6:	f007 fff3 	bl	800a5b0 <siprintf>
	ssd1306_WriteString(sampl1str, Font_7x10, entrySelected(1) ? Black : White);
 80025ca:	2001      	movs	r0, #1
 80025cc:	f7fe ffd8 	bl	8001580 <entrySelected>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f083 0301 	eor.w	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <drawSensorOptions+0x188>)
 80025da:	ca06      	ldmia	r2, {r1, r2}
 80025dc:	481f      	ldr	r0, [pc, #124]	; (800265c <drawSensorOptions+0x194>)
 80025de:	f001 fdef 	bl	80041c0 <ssd1306_WriteString>
	if(entrySelected(1) && entryClicked(1)) { //tu sie dzieje cos dziwnego
 80025e2:	2001      	movs	r0, #1
 80025e4:	f7fe ffcc 	bl	8001580 <entrySelected>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d021      	beq.n	8002632 <drawSensorOptions+0x16a>
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7fe ffd9 	bl	80015a6 <entryClicked>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01b      	beq.n	8002632 <drawSensorOptions+0x16a>
		//send_uart("klikniete\n\r");
		counter++;
 80025fa:	4b19      	ldr	r3, [pc, #100]	; (8002660 <drawSensorOptions+0x198>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	4a17      	ldr	r2, [pc, #92]	; (8002660 <drawSensorOptions+0x198>)
 8002602:	6013      	str	r3, [r2, #0]
		if(counter>4) {
 8002604:	4b16      	ldr	r3, [pc, #88]	; (8002660 <drawSensorOptions+0x198>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b04      	cmp	r3, #4
 800260a:	dd02      	ble.n	8002612 <drawSensorOptions+0x14a>
			counter=1;
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <drawSensorOptions+0x198>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]
		}
		sensors[index].samplingRate = samplingRates[counter-1];
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <drawSensorOptions+0x198>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3b01      	subs	r3, #1
 8002618:	79fa      	ldrb	r2, [r7, #7]
 800261a:	4912      	ldr	r1, [pc, #72]	; (8002664 <drawSensorOptions+0x19c>)
 800261c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8002620:	4906      	ldr	r1, [pc, #24]	; (800263c <drawSensorOptions+0x174>)
 8002622:	4613      	mov	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	440b      	add	r3, r1
 800262c:	3316      	adds	r3, #22
 800262e:	4602      	mov	r2, r0
 8002630:	801a      	strh	r2, [r3, #0]
	}

}
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000000 	.word	0x20000000
 8002640:	20000794 	.word	0x20000794
 8002644:	0800c968 	.word	0x0800c968
 8002648:	0800c970 	.word	0x0800c970
 800264c:	0800c97c 	.word	0x0800c97c
 8002650:	2000078c 	.word	0x2000078c
 8002654:	0800c988 	.word	0x0800c988
 8002658:	0800c998 	.word	0x0800c998
 800265c:	20000218 	.word	0x20000218
 8002660:	20000d10 	.word	0x20000d10
 8002664:	20000210 	.word	0x20000210

08002668 <drawSensorConfigGeneric>:


void drawSensorConfigGeneric(Menu *menu) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	encSetRange(0, 2);
 8002670:	2102      	movs	r1, #2
 8002672:	2000      	movs	r0, #0
 8002674:	f7fe ff3a 	bl	80014ec <encSetRange>
	ssd1306_SetCursor(0, 0);
 8002678:	2100      	movs	r1, #0
 800267a:	2000      	movs	r0, #0
 800267c:	f001 fdc6 	bl	800420c <ssd1306_SetCursor>
	drawSensorOptions(screen-SENSOR_CONFIG_ADC_EXT0);
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <drawSensorConfigGeneric+0x3c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	3b08      	subs	r3, #8
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff1c 	bl	80024c8 <drawSensorOptions>
	backButton(2, MAIN_MENU, 2);
 8002690:	2202      	movs	r2, #2
 8002692:	2100      	movs	r1, #0
 8002694:	2002      	movs	r0, #2
 8002696:	f7ff fd8b 	bl	80021b0 <backButton>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000cf8 	.word	0x20000cf8

080026a8 <ch1Enable>:


void ch1Enable(void) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
	for(int i=0; i<10; i++) {
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	e042      	b.n	800273a <ch1Enable+0x92>
		if(sensors[i].samplingRate==10 && sensors[i].isEnabled) {
 80026b4:	4925      	ldr	r1, [pc, #148]	; (800274c <ch1Enable+0xa4>)
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	3316      	adds	r3, #22
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	2b0a      	cmp	r3, #10
 80026c8:	d134      	bne.n	8002734 <ch1Enable+0x8c>
 80026ca:	4920      	ldr	r1, [pc, #128]	; (800274c <ch1Enable+0xa4>)
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	3314      	adds	r3, #20
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d029      	beq.n	8002734 <ch1Enable+0x8c>
			for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 80026e0:	2300      	movs	r3, #0
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	e020      	b.n	8002728 <ch1Enable+0x80>
				if(strcmp(sensors[i].name, mapSensors[j].sensorName)==0) {
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4a16      	ldr	r2, [pc, #88]	; (800274c <ch1Enable+0xa4>)
 80026f2:	1898      	adds	r0, r3, r2
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4a14      	ldr	r2, [pc, #80]	; (8002750 <ch1Enable+0xa8>)
 8002700:	4413      	add	r3, r2
 8002702:	4619      	mov	r1, r3
 8002704:	f7fd fd6c 	bl	80001e0 <strcmp>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <ch1Enable+0x7a>
					mapSensors[j].function();
 800270e:	4910      	ldr	r1, [pc, #64]	; (8002750 <ch1Enable+0xa8>)
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	3314      	adds	r3, #20
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4798      	blx	r3
			for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b0a      	cmp	r3, #10
 800272c:	d9db      	bls.n	80026e6 <ch1Enable+0x3e>
				}
			}
		  send_uart("10ms\n\r");
 800272e:	4809      	ldr	r0, [pc, #36]	; (8002754 <ch1Enable+0xac>)
 8002730:	f7fe ff52 	bl	80015d8 <send_uart>
	for(int i=0; i<10; i++) {
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3301      	adds	r3, #1
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b09      	cmp	r3, #9
 800273e:	ddb9      	ble.n	80026b4 <ch1Enable+0xc>
		}
	}
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000000 	.word	0x20000000
 8002750:	20000108 	.word	0x20000108
 8002754:	0800c9a0 	.word	0x0800c9a0

08002758 <ch2Enable>:

void ch2Enable(void) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
	for(int i=0; i<10; i++) {
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	e01e      	b.n	80027a2 <ch2Enable+0x4a>
		if(sensors[i].samplingRate==50 && sensors[i].isEnabled) {
 8002764:	4913      	ldr	r1, [pc, #76]	; (80027b4 <ch2Enable+0x5c>)
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	440b      	add	r3, r1
 8002772:	3316      	adds	r3, #22
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	2b32      	cmp	r3, #50	; 0x32
 8002778:	d110      	bne.n	800279c <ch2Enable+0x44>
 800277a:	490e      	ldr	r1, [pc, #56]	; (80027b4 <ch2Enable+0x5c>)
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	3314      	adds	r3, #20
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <ch2Enable+0x44>
			send_uart(getRtcString());
 8002790:	f7ff f82a 	bl	80017e8 <getRtcString>
 8002794:	4603      	mov	r3, r0
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe ff1e 	bl	80015d8 <send_uart>
	for(int i=0; i<10; i++) {
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3301      	adds	r3, #1
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	dddd      	ble.n	8002764 <ch2Enable+0xc>
			//

		}
	}
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000000 	.word	0x20000000

080027b8 <ch3Enable>:

void ch3Enable(void) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
	for(int i=0; i<10; i++) {
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	e01b      	b.n	80027fc <ch3Enable+0x44>
		if(sensors[i].samplingRate==100 && sensors[i].isEnabled) {
 80027c4:	4911      	ldr	r1, [pc, #68]	; (800280c <ch3Enable+0x54>)
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	3316      	adds	r3, #22
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	2b64      	cmp	r3, #100	; 0x64
 80027d8:	d10d      	bne.n	80027f6 <ch3Enable+0x3e>
 80027da:	490c      	ldr	r1, [pc, #48]	; (800280c <ch3Enable+0x54>)
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	440b      	add	r3, r1
 80027e8:	3314      	adds	r3, #20
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <ch3Enable+0x3e>
		  send_uart("100ms\n\r");
 80027f0:	4807      	ldr	r0, [pc, #28]	; (8002810 <ch3Enable+0x58>)
 80027f2:	f7fe fef1 	bl	80015d8 <send_uart>
	for(int i=0; i<10; i++) {
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3301      	adds	r3, #1
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b09      	cmp	r3, #9
 8002800:	dde0      	ble.n	80027c4 <ch3Enable+0xc>
		}
	}
}
 8002802:	bf00      	nop
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000000 	.word	0x20000000
 8002810:	0800c9a8 	.word	0x0800c9a8

08002814 <ch4Enable>:

void ch4Enable(void) {
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
	for(int i=0; i<10; i++) {
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
 800281e:	e01c      	b.n	800285a <ch4Enable+0x46>
		if(sensors[i].samplingRate==500 && sensors[i].isEnabled) {
 8002820:	4912      	ldr	r1, [pc, #72]	; (800286c <ch4Enable+0x58>)
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	3316      	adds	r3, #22
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002836:	d10d      	bne.n	8002854 <ch4Enable+0x40>
 8002838:	490c      	ldr	r1, [pc, #48]	; (800286c <ch4Enable+0x58>)
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	440b      	add	r3, r1
 8002846:	3314      	adds	r3, #20
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <ch4Enable+0x40>
		  send_uart("500ms\n\r");
 800284e:	4808      	ldr	r0, [pc, #32]	; (8002870 <ch4Enable+0x5c>)
 8002850:	f7fe fec2 	bl	80015d8 <send_uart>
	for(int i=0; i<10; i++) {
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3301      	adds	r3, #1
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b09      	cmp	r3, #9
 800285e:	dddf      	ble.n	8002820 <ch4Enable+0xc>
		}
	}
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000000 	.word	0x20000000
 8002870:	0800c9b0 	.word	0x0800c9b0

08002874 <drawOnoffMeasure>:





void drawOnoffMeasure(Menu *menu) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b092      	sub	sp, #72	; 0x48
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
//	ssd1306_SetCursor(0, 12);
//	sprintf(tempStr, "%.2f \n\r", temp);
//	ssd1306_WriteString(tempStr, Font_16x24, White);
//	HAL_UART_Transmit(huart6_new, tempStr, strlen(tempStr), HAL_MAX_DELAY);
	uint8_t currPos;
	if(!sdReady) {
 800287c:	4b5c      	ldr	r3, [pc, #368]	; (80029f0 <drawOnoffMeasure+0x17c>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	f083 0301 	eor.w	r3, r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d011      	beq.n	80028ae <drawOnoffMeasure+0x3a>
		ssd1306_SetCursor(0, 0);
 800288a:	2100      	movs	r1, #0
 800288c:	2000      	movs	r0, #0
 800288e:	f001 fcbd 	bl	800420c <ssd1306_SetCursor>
		ssd1306_WriteString("SD NOT READY!", Font_6x8, White);
 8002892:	4a58      	ldr	r2, [pc, #352]	; (80029f4 <drawOnoffMeasure+0x180>)
 8002894:	2301      	movs	r3, #1
 8002896:	ca06      	ldmia	r2, {r1, r2}
 8002898:	4857      	ldr	r0, [pc, #348]	; (80029f8 <drawOnoffMeasure+0x184>)
 800289a:	f001 fc91 	bl	80041c0 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 8);
 800289e:	2108      	movs	r1, #8
 80028a0:	2000      	movs	r0, #0
 80028a2:	f001 fcb3 	bl	800420c <ssd1306_SetCursor>
		currPos=0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80028ac:	e006      	b.n	80028bc <drawOnoffMeasure+0x48>
	}
	else {
		ssd1306_SetCursor(0, 0);
 80028ae:	2100      	movs	r1, #0
 80028b0:	2000      	movs	r0, #0
 80028b2:	f001 fcab 	bl	800420c <ssd1306_SetCursor>
		currPos=-8;
 80028b6:	23f8      	movs	r3, #248	; 0xf8
 80028b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	char sensorDetailsStr[30];
	encSetRange(0,2);
 80028bc:	2102      	movs	r1, #2
 80028be:	2000      	movs	r0, #0
 80028c0:	f7fe fe14 	bl	80014ec <encSetRange>
	for(int i=0; i<11; i++) {
 80028c4:	2300      	movs	r3, #0
 80028c6:	643b      	str	r3, [r7, #64]	; 0x40
 80028c8:	e037      	b.n	800293a <drawOnoffMeasure+0xc6>
		if(sensors[i].isEnabled) {
 80028ca:	494c      	ldr	r1, [pc, #304]	; (80029fc <drawOnoffMeasure+0x188>)
 80028cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	440b      	add	r3, r1
 80028d8:	3314      	adds	r3, #20
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d029      	beq.n	8002934 <drawOnoffMeasure+0xc0>
			sprintf(sensorDetailsStr, "%s: %d\n\r", sensors[i].name, sensors[i].samplingRate);
 80028e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4a44      	ldr	r2, [pc, #272]	; (80029fc <drawOnoffMeasure+0x188>)
 80028ec:	1899      	adds	r1, r3, r2
 80028ee:	4843      	ldr	r0, [pc, #268]	; (80029fc <drawOnoffMeasure+0x188>)
 80028f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4403      	add	r3, r0
 80028fc:	3316      	adds	r3, #22
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	f107 001c 	add.w	r0, r7, #28
 8002904:	460a      	mov	r2, r1
 8002906:	493e      	ldr	r1, [pc, #248]	; (8002a00 <drawOnoffMeasure+0x18c>)
 8002908:	f007 fe52 	bl	800a5b0 <siprintf>
			ssd1306_SetCursor(0, currPos+8);
 800290c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002910:	3308      	adds	r3, #8
 8002912:	b2db      	uxtb	r3, r3
 8002914:	4619      	mov	r1, r3
 8002916:	2000      	movs	r0, #0
 8002918:	f001 fc78 	bl	800420c <ssd1306_SetCursor>
			currPos=currPos+8;
 800291c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002920:	3308      	adds	r3, #8
 8002922:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			ssd1306_WriteString(sensorDetailsStr, Font_6x8, White); //za mało miejsca na ekranie -> (???)
 8002926:	4a33      	ldr	r2, [pc, #204]	; (80029f4 <drawOnoffMeasure+0x180>)
 8002928:	f107 001c 	add.w	r0, r7, #28
 800292c:	2301      	movs	r3, #1
 800292e:	ca06      	ldmia	r2, {r1, r2}
 8002930:	f001 fc46 	bl	80041c0 <ssd1306_WriteString>
	for(int i=0; i<11; i++) {
 8002934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002936:	3301      	adds	r3, #1
 8002938:	643b      	str	r3, [r7, #64]	; 0x40
 800293a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293c:	2b0a      	cmp	r3, #10
 800293e:	ddc4      	ble.n	80028ca <drawOnoffMeasure+0x56>
		}
	}


	ssd1306_SetCursor(0, 16);
 8002940:	2110      	movs	r1, #16
 8002942:	2000      	movs	r0, #0
 8002944:	f001 fc62 	bl	800420c <ssd1306_SetCursor>
	ssd1306_WriteString("WRITE buff", Font_7x10, entrySelected(0) ? Black : White);
 8002948:	2000      	movs	r0, #0
 800294a:	f7fe fe19 	bl	8001580 <entrySelected>
 800294e:	4603      	mov	r3, r0
 8002950:	f083 0301 	eor.w	r3, r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4a2b      	ldr	r2, [pc, #172]	; (8002a04 <drawOnoffMeasure+0x190>)
 8002958:	ca06      	ldmia	r2, {r1, r2}
 800295a:	482b      	ldr	r0, [pc, #172]	; (8002a08 <drawOnoffMeasure+0x194>)
 800295c:	f001 fc30 	bl	80041c0 <ssd1306_WriteString>
	extern CircularBuffer cb;
	if(entrySelected(0) && entryClicked(0)) {
 8002960:	2000      	movs	r0, #0
 8002962:	f7fe fe0d 	bl	8001580 <entrySelected>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d019      	beq.n	80029a0 <drawOnoffMeasure+0x12c>
 800296c:	2000      	movs	r0, #0
 800296e:	f7fe fe1a 	bl	80015a6 <entryClicked>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d013      	beq.n	80029a0 <drawOnoffMeasure+0x12c>
		float val=ds18_get_temp();
 8002978:	f7fe fca4 	bl	80012c4 <ds18_get_temp>
 800297c:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		char str[20];
		sprintf(str, "%f\n\r", val);
 8002980:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002982:	f7fd fdf9 	bl	8000578 <__aeabi_f2d>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	f107 0008 	add.w	r0, r7, #8
 800298e:	491f      	ldr	r1, [pc, #124]	; (8002a0c <drawOnoffMeasure+0x198>)
 8002990:	f007 fe0e 	bl	800a5b0 <siprintf>

		CircularBuffer_Add(&cb, str);
 8002994:	f107 0308 	add.w	r3, r7, #8
 8002998:	4619      	mov	r1, r3
 800299a:	481d      	ldr	r0, [pc, #116]	; (8002a10 <drawOnoffMeasure+0x19c>)
 800299c:	f000 f882 	bl	8002aa4 <CircularBuffer_Add>
//		sd_writefile("test;test;123;123.4;0.0 ");
//		sd_closefile();
	}
	//ssd1306_WriteString(rtcTimeStr, Font_7x10, White);
	ssd1306_SetCursor(0, 26);
 80029a0:	211a      	movs	r1, #26
 80029a2:	2000      	movs	r0, #0
 80029a4:	f001 fc32 	bl	800420c <ssd1306_SetCursor>
	ssd1306_WriteString("adc/READ buff", Font_7x10, entrySelected(1) ? Black : White);
 80029a8:	2001      	movs	r0, #1
 80029aa:	f7fe fde9 	bl	8001580 <entrySelected>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f083 0301 	eor.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <drawOnoffMeasure+0x190>)
 80029b8:	ca06      	ldmia	r2, {r1, r2}
 80029ba:	4816      	ldr	r0, [pc, #88]	; (8002a14 <drawOnoffMeasure+0x1a0>)
 80029bc:	f001 fc00 	bl	80041c0 <ssd1306_WriteString>
	if(entrySelected(1) && entryClicked(1)) {
 80029c0:	2001      	movs	r0, #1
 80029c2:	f7fe fddd 	bl	8001580 <entrySelected>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <drawOnoffMeasure+0x168>
 80029cc:	2001      	movs	r0, #1
 80029ce:	f7fe fdea 	bl	80015a6 <entryClicked>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <drawOnoffMeasure+0x168>
//			send_uart("Bufor jest pusty\n\r");
//		}
//		else {
//			send_uart(dataFromBuff);
//		}
		getValAdc();
 80029d8:	f7fe fad0 	bl	8000f7c <getValAdc>
//		sd_readfile();
//		sd_closefile();
	}
	//ssd1306_WriteString(rtcDateStr, Font_7x10, White);

	backButton(2, MAIN_MENU, 2);
 80029dc:	2202      	movs	r2, #2
 80029de:	2100      	movs	r1, #0
 80029e0:	2002      	movs	r0, #2
 80029e2:	f7ff fbe5 	bl	80021b0 <backButton>

}
 80029e6:	bf00      	nop
 80029e8:	3748      	adds	r7, #72	; 0x48
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20003670 	.word	0x20003670
 80029f4:	20000784 	.word	0x20000784
 80029f8:	0800c9b8 	.word	0x0800c9b8
 80029fc:	20000000 	.word	0x20000000
 8002a00:	0800c9c8 	.word	0x0800c9c8
 8002a04:	2000078c 	.word	0x2000078c
 8002a08:	0800c9d4 	.word	0x0800c9d4
 8002a0c:	0800c9e0 	.word	0x0800c9e0
 8002a10:	20000d14 	.word	0x20000d14
 8002a14:	0800c9e8 	.word	0x0800c9e8

08002a18 <displayMenu>:
	[SENSOR_CONFIG_DS18_3] = {drawSensorConfigGeneric,0,{}},
	[SD_CONFIG] = {drawSdConfig, 0, {}},
	[ONOFF_MEASURE] = {drawOnoffMeasure, 0, {}}
};

void displayMenu(void) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f001 faa7 	bl	8003f70 <ssd1306_Fill>

	menu[screen].function(&menu[screen]);
 8002a22:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <displayMenu+0x48>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <displayMenu+0x4c>)
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <displayMenu+0x48>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4619      	mov	r1, r3
 8002a40:	460b      	mov	r3, r1
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4906      	ldr	r1, [pc, #24]	; (8002a64 <displayMenu+0x4c>)
 8002a4a:	440b      	add	r3, r1
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	4790      	blx	r2
	ssd1306_UpdateScreen();
 8002a50:	f001 fab2 	bl	8003fb8 <ssd1306_UpdateScreen>
	//clearEncButton();
	HAL_Delay(1);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f001 fc95 	bl	8004384 <HAL_Delay>

}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000cf8 	.word	0x20000cf8
 8002a64:	20000224 	.word	0x20000224

08002a68 <displayInit>:
#include "ssd1306_tests.h"
#include "ssd1306.h"



void displayInit(void) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8002a6c:	f001 fa16 	bl	8003e9c <ssd1306_Init>
}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <CircularBuffer_Init>:
    int tail;
} CircularBuffer;



void CircularBuffer_Init(CircularBuffer* cb) {
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
    cb->head = 0;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002a82:	461a      	mov	r2, r3
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
    cb->tail = 0;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002a90:	461a      	mov	r2, r3
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c2 3714 	str.w	r3, [r2, #1812]	; 0x714
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <CircularBuffer_Add>:

volatile CircularBuffer cb;

void CircularBuffer_Add(CircularBuffer* cb, char* str) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
    strncpy(cb->data[cb->head], str, STR_SIZE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002ab4:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 8002ab8:	2264      	movs	r2, #100	; 0x64
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	2264      	movs	r2, #100	; 0x64
 8002ac4:	6839      	ldr	r1, [r7, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f007 fe8c 	bl	800a7e4 <strncpy>
    cb->head = (cb->head + 1) % BUF_SIZE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002ad2:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <CircularBuffer_Add+0x9c>)
 8002ada:	fb83 1302 	smull	r1, r3, r3, r2
 8002ade:	1159      	asrs	r1, r3, #5
 8002ae0:	17d3      	asrs	r3, r2, #31
 8002ae2:	1acb      	subs	r3, r1, r3
 8002ae4:	2164      	movs	r1, #100	; 0x64
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002af2:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
    if (cb->head == cb->tail) {
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002afc:	f8d3 2710 	ldr.w	r2, [r3, #1808]	; 0x710
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b06:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d114      	bne.n	8002b38 <CircularBuffer_Add+0x94>
        cb->tail = (cb->tail + 1) % BUF_SIZE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b14:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <CircularBuffer_Add+0x9c>)
 8002b1c:	fb83 1302 	smull	r1, r3, r3, r2
 8002b20:	1159      	asrs	r1, r3, #5
 8002b22:	17d3      	asrs	r3, r2, #31
 8002b24:	1acb      	subs	r3, r1, r3
 8002b26:	2164      	movs	r1, #100	; 0x64
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002b34:	f8c2 3714 	str.w	r3, [r2, #1812]	; 0x714
    }
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	51eb851f 	.word	0x51eb851f

08002b44 <sd_init>:
// functions
void sd_demount() {
	f_mount(NULL, "", 0);
}

void sd_init() {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 8002b48:	2201      	movs	r2, #1
 8002b4a:	490d      	ldr	r1, [pc, #52]	; (8002b80 <sd_init+0x3c>)
 8002b4c:	480d      	ldr	r0, [pc, #52]	; (8002b84 <sd_init+0x40>)
 8002b4e:	f006 fe7b 	bl	8009848 <f_mount>
 8002b52:	4603      	mov	r3, r0
 8002b54:	461a      	mov	r2, r3
 8002b56:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <sd_init+0x44>)
 8002b58:	701a      	strb	r2, [r3, #0]

	if(fresult==FR_OK) {
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <sd_init+0x44>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <sd_init+0x2c>
		sdReady = true;
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <sd_init+0x48>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]
		send_uart("sd status: FR_OK\n\r");
 8002b68:	4809      	ldr	r0, [pc, #36]	; (8002b90 <sd_init+0x4c>)
 8002b6a:	f7fe fd35 	bl	80015d8 <send_uart>
	}
	else {
		sdReady = false;
		send_uart("sd status: SD ERR\n\r");
	}
}
 8002b6e:	e005      	b.n	8002b7c <sd_init+0x38>
		sdReady = false;
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <sd_init+0x48>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
		send_uart("sd status: SD ERR\n\r");
 8002b76:	4807      	ldr	r0, [pc, #28]	; (8002b94 <sd_init+0x50>)
 8002b78:	f7fe fd2e 	bl	80015d8 <send_uart>
}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	0800cab8 	.word	0x0800cab8
 8002b84:	2000342c 	.word	0x2000342c
 8002b88:	2000365c 	.word	0x2000365c
 8002b8c:	20003670 	.word	0x20003670
 8002b90:	0800cabc 	.word	0x0800cabc
 8002b94:	0800cad0 	.word	0x0800cad0

08002b98 <sd_freespace>:

uint32_t sd_freespace() {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
	if(sdReady) {
 8002b9c:	4b13      	ldr	r3, [pc, #76]	; (8002bec <sd_freespace+0x54>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <sd_freespace+0x4e>
		f_getfree("", &fre_clust, &pfs);
 8002ba4:	4a12      	ldr	r2, [pc, #72]	; (8002bf0 <sd_freespace+0x58>)
 8002ba6:	4913      	ldr	r1, [pc, #76]	; (8002bf4 <sd_freespace+0x5c>)
 8002ba8:	4813      	ldr	r0, [pc, #76]	; (8002bf8 <sd_freespace+0x60>)
 8002baa:	f006 fe93 	bl	80098d4 <f_getfree>
		return free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <sd_freespace+0x58>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	895b      	ldrh	r3, [r3, #10]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <sd_freespace+0x5c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fcb8 	bl	8000534 <__aeabi_ui2d>
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <sd_freespace+0x64>)
 8002bca:	f7fd fd2d 	bl	8000628 <__aeabi_dmul>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f7fd ffff 	bl	8000bd8 <__aeabi_d2uiz>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <sd_freespace+0x68>)
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <sd_freespace+0x68>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	e000      	b.n	8002be8 <sd_freespace+0x50>
	}
	else {
		return 0;
 8002be6:	2300      	movs	r3, #0
	}

}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20003670 	.word	0x20003670
 8002bf0:	20003660 	.word	0x20003660
 8002bf4:	20003664 	.word	0x20003664
 8002bf8:	0800cab4 	.word	0x0800cab4
 8002bfc:	3fe00000 	.word	0x3fe00000
 8002c00:	2000366c 	.word	0x2000366c

08002c04 <sd_totalspace>:

uint32_t sd_totalspace() {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
	if(sdReady) {
 8002c08:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <sd_totalspace+0x58>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d021      	beq.n	8002c54 <sd_totalspace+0x50>
		f_getfree("", &fre_clust, &pfs);
 8002c10:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <sd_totalspace+0x5c>)
 8002c12:	4914      	ldr	r1, [pc, #80]	; (8002c64 <sd_totalspace+0x60>)
 8002c14:	4814      	ldr	r0, [pc, #80]	; (8002c68 <sd_totalspace+0x64>)
 8002c16:	f006 fe5d 	bl	80098d4 <f_getfree>
		return total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002c1a:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <sd_totalspace+0x5c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	3b02      	subs	r3, #2
 8002c22:	4a0f      	ldr	r2, [pc, #60]	; (8002c60 <sd_totalspace+0x5c>)
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	8952      	ldrh	r2, [r2, #10]
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fc81 	bl	8000534 <__aeabi_ui2d>
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <sd_totalspace+0x68>)
 8002c38:	f7fd fcf6 	bl	8000628 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	f7fd ffc8 	bl	8000bd8 <__aeabi_d2uiz>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <sd_totalspace+0x6c>)
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <sd_totalspace+0x6c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	e000      	b.n	8002c56 <sd_totalspace+0x52>
	}
	else {
		return 0;
 8002c54:	2300      	movs	r3, #0
	}

}
 8002c56:	4618      	mov	r0, r3
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20003670 	.word	0x20003670
 8002c60:	20003660 	.word	0x20003660
 8002c64:	20003664 	.word	0x20003664
 8002c68:	0800cab4 	.word	0x0800cab4
 8002c6c:	3fe00000 	.word	0x3fe00000
 8002c70:	20003668 	.word	0x20003668

08002c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c88:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c92:	607b      	str	r3, [r7, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_MspInit+0x4c>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800

08002cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <HAL_ADC_MspInit+0x7c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d127      	bne.n	8002d36 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <HAL_ADC_MspInit+0x80>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <HAL_ADC_MspInit+0x80>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <HAL_ADC_MspInit+0x80>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <HAL_ADC_MspInit+0x80>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <HAL_ADC_MspInit+0x80>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <HAL_ADC_MspInit+0x80>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN0_INT_Pin|ADC1_IN1_INT_Pin|ADC1_IN2_INT_Pin|ADC1_IN3_INT_Pin;
 8002d1e:	230f      	movs	r3, #15
 8002d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d22:	2303      	movs	r3, #3
 8002d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4805      	ldr	r0, [pc, #20]	; (8002d48 <HAL_ADC_MspInit+0x84>)
 8002d32:	f002 f81b 	bl	8004d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d36:	bf00      	nop
 8002d38:	3728      	adds	r7, #40	; 0x28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40012000 	.word	0x40012000
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020000 	.word	0x40020000

08002d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08c      	sub	sp, #48	; 0x30
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	f107 031c 	add.w	r3, r7, #28
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a3b      	ldr	r2, [pc, #236]	; (8002e58 <HAL_I2C_MspInit+0x10c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d12c      	bne.n	8002dc8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	4b3a      	ldr	r3, [pc, #232]	; (8002e5c <HAL_I2C_MspInit+0x110>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a39      	ldr	r2, [pc, #228]	; (8002e5c <HAL_I2C_MspInit+0x110>)
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <HAL_I2C_MspInit+0x110>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
 8002d8a:	23c0      	movs	r3, #192	; 0xc0
 8002d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d8e:	2312      	movs	r3, #18
 8002d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d96:	2303      	movs	r3, #3
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9e:	f107 031c 	add.w	r3, r7, #28
 8002da2:	4619      	mov	r1, r3
 8002da4:	482e      	ldr	r0, [pc, #184]	; (8002e60 <HAL_I2C_MspInit+0x114>)
 8002da6:	f001 ffe1 	bl	8004d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <HAL_I2C_MspInit+0x110>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	4a2a      	ldr	r2, [pc, #168]	; (8002e5c <HAL_I2C_MspInit+0x110>)
 8002db4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002db8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dba:	4b28      	ldr	r3, [pc, #160]	; (8002e5c <HAL_I2C_MspInit+0x110>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002dc6:	e042      	b.n	8002e4e <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a25      	ldr	r2, [pc, #148]	; (8002e64 <HAL_I2C_MspInit+0x118>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d13d      	bne.n	8002e4e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <HAL_I2C_MspInit+0x110>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a20      	ldr	r2, [pc, #128]	; (8002e5c <HAL_I2C_MspInit+0x110>)
 8002ddc:	f043 0302 	orr.w	r3, r3, #2
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <HAL_I2C_MspInit+0x110>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SCL_ADS_Pin;
 8002dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002df4:	2312      	movs	r3, #18
 8002df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e00:	2304      	movs	r3, #4
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCL_ADS_GPIO_Port, &GPIO_InitStruct);
 8002e04:	f107 031c 	add.w	r3, r7, #28
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4815      	ldr	r0, [pc, #84]	; (8002e60 <HAL_I2C_MspInit+0x114>)
 8002e0c:	f001 ffae 	bl	8004d6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDA_ADS_Pin;
 8002e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e16:	2312      	movs	r3, #18
 8002e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002e22:	2309      	movs	r3, #9
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDA_ADS_GPIO_Port, &GPIO_InitStruct);
 8002e26:	f107 031c 	add.w	r3, r7, #28
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	480c      	ldr	r0, [pc, #48]	; (8002e60 <HAL_I2C_MspInit+0x114>)
 8002e2e:	f001 ff9d 	bl	8004d6c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <HAL_I2C_MspInit+0x110>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	4a08      	ldr	r2, [pc, #32]	; (8002e5c <HAL_I2C_MspInit+0x110>)
 8002e3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e40:	6413      	str	r3, [r2, #64]	; 0x40
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_I2C_MspInit+0x110>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
}
 8002e4e:	bf00      	nop
 8002e50:	3730      	adds	r7, #48	; 0x30
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40005400 	.word	0x40005400
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40020400 	.word	0x40020400
 8002e64:	40005800 	.word	0x40005800

08002e68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e70:	f107 0308 	add.w	r3, r7, #8
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
 8002e80:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a0c      	ldr	r2, [pc, #48]	; (8002eb8 <HAL_RTC_MspInit+0x50>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d111      	bne.n	8002eb0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e94:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e96:	f107 0308 	add.w	r3, r7, #8
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 f9e8 	bl	8006270 <HAL_RCCEx_PeriphCLKConfig>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002ea6:	f7ff f959 	bl	800215c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <HAL_RTC_MspInit+0x54>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002eb0:	bf00      	nop
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40002800 	.word	0x40002800
 8002ebc:	42470e3c 	.word	0x42470e3c

08002ec0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a19      	ldr	r2, [pc, #100]	; (8002f44 <HAL_SPI_MspInit+0x84>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d12b      	bne.n	8002f3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <HAL_SPI_MspInit+0x88>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <HAL_SPI_MspInit+0x88>)
 8002eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <HAL_SPI_MspInit+0x88>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_SPI_MspInit+0x88>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <HAL_SPI_MspInit+0x88>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <HAL_SPI_MspInit+0x88>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_SD_Pin|MISO_SD_Pin|MOSI_SD_Pin;
 8002f1a:	23e0      	movs	r3, #224	; 0xe0
 8002f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f26:	2303      	movs	r3, #3
 8002f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f2a:	2305      	movs	r3, #5
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2e:	f107 0314 	add.w	r3, r7, #20
 8002f32:	4619      	mov	r1, r3
 8002f34:	4805      	ldr	r0, [pc, #20]	; (8002f4c <HAL_SPI_MspInit+0x8c>)
 8002f36:	f001 ff19 	bl	8004d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f3a:	bf00      	nop
 8002f3c:	3728      	adds	r7, #40	; 0x28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40013000 	.word	0x40013000
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40020000 	.word	0x40020000

08002f50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a21      	ldr	r2, [pc, #132]	; (8002ff4 <HAL_TIM_Encoder_MspInit+0xa4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d13c      	bne.n	8002fec <HAL_TIM_Encoder_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <HAL_TIM_Encoder_MspInit+0xa8>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	4a1f      	ldr	r2, [pc, #124]	; (8002ff8 <HAL_TIM_Encoder_MspInit+0xa8>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6453      	str	r3, [r2, #68]	; 0x44
 8002f82:	4b1d      	ldr	r3, [pc, #116]	; (8002ff8 <HAL_TIM_Encoder_MspInit+0xa8>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_TIM_Encoder_MspInit+0xa8>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_TIM_Encoder_MspInit+0xa8>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9e:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <HAL_TIM_Encoder_MspInit+0xa8>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8002faa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	480d      	ldr	r0, [pc, #52]	; (8002ffc <HAL_TIM_Encoder_MspInit+0xac>)
 8002fc8:	f001 fed0 	bl	8004d6c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2100      	movs	r1, #0
 8002fd0:	2019      	movs	r0, #25
 8002fd2:	f001 fe94 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002fd6:	2019      	movs	r0, #25
 8002fd8:	f001 fead 	bl	8004d36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2100      	movs	r1, #0
 8002fe0:	201a      	movs	r0, #26
 8002fe2:	f001 fe8c 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002fe6:	201a      	movs	r0, #26
 8002fe8:	f001 fea5 	bl	8004d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002fec:	bf00      	nop
 8002fee:	3728      	adds	r7, #40	; 0x28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40010000 	.word	0x40010000
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40020000 	.word	0x40020000

08003000 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003010:	d116      	bne.n	8003040 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_TIM_Base_MspInit+0xb8>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	4a27      	ldr	r2, [pc, #156]	; (80030b8 <HAL_TIM_Base_MspInit+0xb8>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6413      	str	r3, [r2, #64]	; 0x40
 8003022:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <HAL_TIM_Base_MspInit+0xb8>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	2100      	movs	r1, #0
 8003032:	201c      	movs	r0, #28
 8003034:	f001 fe63 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003038:	201c      	movs	r0, #28
 800303a:	f001 fe7c 	bl	8004d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800303e:	e036      	b.n	80030ae <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1d      	ldr	r2, [pc, #116]	; (80030bc <HAL_TIM_Base_MspInit+0xbc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d116      	bne.n	8003078 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <HAL_TIM_Base_MspInit+0xb8>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_TIM_Base_MspInit+0xb8>)
 8003054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003058:	6453      	str	r3, [r2, #68]	; 0x44
 800305a:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <HAL_TIM_Base_MspInit+0xb8>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003066:	2200      	movs	r2, #0
 8003068:	2100      	movs	r1, #0
 800306a:	2019      	movs	r0, #25
 800306c:	f001 fe47 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003070:	2019      	movs	r0, #25
 8003072:	f001 fe60 	bl	8004d36 <HAL_NVIC_EnableIRQ>
}
 8003076:	e01a      	b.n	80030ae <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a10      	ldr	r2, [pc, #64]	; (80030c0 <HAL_TIM_Base_MspInit+0xc0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d115      	bne.n	80030ae <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_TIM_Base_MspInit+0xb8>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	4a0b      	ldr	r2, [pc, #44]	; (80030b8 <HAL_TIM_Base_MspInit+0xb8>)
 800308c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003090:	6453      	str	r3, [r2, #68]	; 0x44
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <HAL_TIM_Base_MspInit+0xb8>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800309e:	2200      	movs	r2, #0
 80030a0:	2100      	movs	r1, #0
 80030a2:	201a      	movs	r0, #26
 80030a4:	f001 fe2b 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80030a8:	201a      	movs	r0, #26
 80030aa:	f001 fe44 	bl	8004d36 <HAL_NVIC_EnableIRQ>
}
 80030ae:	bf00      	nop
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40014400 	.word	0x40014400
 80030c0:	40014800 	.word	0x40014800

080030c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	; 0x28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a19      	ldr	r2, [pc, #100]	; (8003148 <HAL_UART_MspInit+0x84>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d12c      	bne.n	8003140 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <HAL_UART_MspInit+0x88>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	4a17      	ldr	r2, [pc, #92]	; (800314c <HAL_UART_MspInit+0x88>)
 80030f0:	f043 0320 	orr.w	r3, r3, #32
 80030f4:	6453      	str	r3, [r2, #68]	; 0x44
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_UART_MspInit+0x88>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_UART_MspInit+0x88>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a10      	ldr	r2, [pc, #64]	; (800314c <HAL_UART_MspInit+0x88>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_UART_MspInit+0x88>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800311e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312c:	2303      	movs	r3, #3
 800312e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003130:	2308      	movs	r3, #8
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	4619      	mov	r1, r3
 800313a:	4805      	ldr	r0, [pc, #20]	; (8003150 <HAL_UART_MspInit+0x8c>)
 800313c:	f001 fe16 	bl	8004d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003140:	bf00      	nop
 8003142:	3728      	adds	r7, #40	; 0x28
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40011400 	.word	0x40011400
 800314c:	40023800 	.word	0x40023800
 8003150:	40020000 	.word	0x40020000

08003154 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003158:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <SDTimer_Handler+0x40>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d006      	beq.n	8003170 <SDTimer_Handler+0x1c>
    Timer1--;
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <SDTimer_Handler+0x40>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b2da      	uxtb	r2, r3
 800316c:	4b09      	ldr	r3, [pc, #36]	; (8003194 <SDTimer_Handler+0x40>)
 800316e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003170:	4b09      	ldr	r3, [pc, #36]	; (8003198 <SDTimer_Handler+0x44>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d006      	beq.n	8003188 <SDTimer_Handler+0x34>
    Timer2--;
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <SDTimer_Handler+0x44>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b2da      	uxtb	r2, r3
 8003184:	4b04      	ldr	r3, [pc, #16]	; (8003198 <SDTimer_Handler+0x44>)
 8003186:	701a      	strb	r2, [r3, #0]
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20003672 	.word	0x20003672
 8003198:	20003673 	.word	0x20003673

0800319c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031a0:	e7fe      	b.n	80031a0 <NMI_Handler+0x4>

080031a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031a2:	b480      	push	{r7}
 80031a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031a6:	e7fe      	b.n	80031a6 <HardFault_Handler+0x4>

080031a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031ac:	e7fe      	b.n	80031ac <MemManage_Handler+0x4>

080031ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ae:	b480      	push	{r7}
 80031b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031b2:	e7fe      	b.n	80031b2 <BusFault_Handler+0x4>

080031b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031b8:	e7fe      	b.n	80031b8 <UsageFault_Handler+0x4>

080031ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031be:	bf00      	nop
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <SysTick_Handler+0x30>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	3301      	adds	r3, #1
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <SysTick_Handler+0x30>)
 80031f4:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80031f6:	4b07      	ldr	r3, [pc, #28]	; (8003214 <SysTick_Handler+0x30>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b09      	cmp	r3, #9
 80031fe:	d904      	bls.n	800320a <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <SysTick_Handler+0x30>)
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8003206:	f7ff ffa5 	bl	8003154 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800320a:	f001 f89b 	bl	8004344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20003671 	.word	0x20003671

08003218 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 800321c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003220:	f001 ff5a 	bl	80050d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003224:	bf00      	nop
 8003226:	bd80      	pop	{r7, pc}

08003228 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800322c:	4803      	ldr	r0, [pc, #12]	; (800323c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800322e:	f004 fc25 	bl	8007a7c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003232:	4803      	ldr	r0, [pc, #12]	; (8003240 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003234:	f004 fc22 	bl	8007a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003238:	bf00      	nop
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000b10 	.word	0x20000b10
 8003240:	20000ba0 	.word	0x20000ba0

08003244 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003248:	4803      	ldr	r0, [pc, #12]	; (8003258 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800324a:	f004 fc17 	bl	8007a7c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800324e:	4803      	ldr	r0, [pc, #12]	; (800325c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003250:	f004 fc14 	bl	8007a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000b10 	.word	0x20000b10
 800325c:	20000be8 	.word	0x20000be8

08003260 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003264:	4802      	ldr	r0, [pc, #8]	; (8003270 <TIM2_IRQHandler+0x10>)
 8003266:	f004 fc09 	bl	8007a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000b58 	.word	0x20000b58

08003274 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return 1;
 8003278:	2301      	movs	r3, #1
}
 800327a:	4618      	mov	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <_kill>:

int _kill(int pid, int sig)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800328e:	f007 fb07 	bl	800a8a0 <__errno>
 8003292:	4603      	mov	r3, r0
 8003294:	2216      	movs	r2, #22
 8003296:	601a      	str	r2, [r3, #0]
  return -1;
 8003298:	f04f 33ff 	mov.w	r3, #4294967295
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <_exit>:

void _exit (int status)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032ac:	f04f 31ff 	mov.w	r1, #4294967295
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ffe7 	bl	8003284 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032b6:	e7fe      	b.n	80032b6 <_exit+0x12>

080032b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	e00a      	b.n	80032e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032ca:	f3af 8000 	nop.w
 80032ce:	4601      	mov	r1, r0
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	60ba      	str	r2, [r7, #8]
 80032d6:	b2ca      	uxtb	r2, r1
 80032d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	3301      	adds	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	dbf0      	blt.n	80032ca <_read+0x12>
  }

  return len;
 80032e8:	687b      	ldr	r3, [r7, #4]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b086      	sub	sp, #24
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	e009      	b.n	8003318 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	60ba      	str	r2, [r7, #8]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	3301      	adds	r3, #1
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	429a      	cmp	r2, r3
 800331e:	dbf1      	blt.n	8003304 <_write+0x12>
  }
  return len;
 8003320:	687b      	ldr	r3, [r7, #4]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <_close>:

int _close(int file)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003352:	605a      	str	r2, [r3, #4]
  return 0;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <_isatty>:

int _isatty(int file)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800336a:	2301      	movs	r3, #1
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800339c:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <_sbrk+0x5c>)
 800339e:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <_sbrk+0x60>)
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <_sbrk+0x64>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <_sbrk+0x64>)
 80033b2:	4a12      	ldr	r2, [pc, #72]	; (80033fc <_sbrk+0x68>)
 80033b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033b6:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <_sbrk+0x64>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d207      	bcs.n	80033d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033c4:	f007 fa6c 	bl	800a8a0 <__errno>
 80033c8:	4603      	mov	r3, r0
 80033ca:	220c      	movs	r2, #12
 80033cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295
 80033d2:	e009      	b.n	80033e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033d4:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <_sbrk+0x64>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033da:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <_sbrk+0x64>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4413      	add	r3, r2
 80033e2:	4a05      	ldr	r2, [pc, #20]	; (80033f8 <_sbrk+0x64>)
 80033e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033e6:	68fb      	ldr	r3, [r7, #12]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20020000 	.word	0x20020000
 80033f4:	00000400 	.word	0x00000400
 80033f8:	20003674 	.word	0x20003674
 80033fc:	20003c18 	.word	0x20003c18

08003400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <SystemInit+0x20>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	4a05      	ldr	r2, [pc, #20]	; (8003420 <SystemInit+0x20>)
 800340c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800342c:	f000 ff9e 	bl	800436c <HAL_GetTick>
 8003430:	4603      	mov	r3, r0
 8003432:	4a04      	ldr	r2, [pc, #16]	; (8003444 <SPI_Timer_On+0x20>)
 8003434:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003436:	4a04      	ldr	r2, [pc, #16]	; (8003448 <SPI_Timer_On+0x24>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6013      	str	r3, [r2, #0]
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	2000367c 	.word	0x2000367c
 8003448:	20003680 	.word	0x20003680

0800344c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003450:	f000 ff8c 	bl	800436c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <SPI_Timer_Status+0x24>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	1ad2      	subs	r2, r2, r3
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <SPI_Timer_Status+0x28>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	bf34      	ite	cc
 8003464:	2301      	movcc	r3, #1
 8003466:	2300      	movcs	r3, #0
 8003468:	b2db      	uxtb	r3, r3
}
 800346a:	4618      	mov	r0, r3
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	2000367c 	.word	0x2000367c
 8003474:	20003680 	.word	0x20003680

08003478 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af02      	add	r7, sp, #8
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003482:	f107 020f 	add.w	r2, r7, #15
 8003486:	1df9      	adds	r1, r7, #7
 8003488:	2332      	movs	r3, #50	; 0x32
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	2301      	movs	r3, #1
 800348e:	4804      	ldr	r0, [pc, #16]	; (80034a0 <xchg_spi+0x28>)
 8003490:	f003 fca1 	bl	8006dd6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8003494:	7bfb      	ldrb	r3, [r7, #15]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000ab8 	.word	0x20000ab8

080034a4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e00a      	b.n	80034ca <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	18d4      	adds	r4, r2, r3
 80034ba:	20ff      	movs	r0, #255	; 0xff
 80034bc:	f7ff ffdc 	bl	8003478 <xchg_spi>
 80034c0:	4603      	mov	r3, r0
 80034c2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3301      	adds	r3, #1
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d3f0      	bcc.n	80034b4 <rcvr_spi_multi+0x10>
	}
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd90      	pop	{r4, r7, pc}

080034dc <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4803      	ldr	r0, [pc, #12]	; (8003500 <xmit_spi_multi+0x24>)
 80034f2:	f003 fb34 	bl	8006b5e <HAL_SPI_Transmit>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000ab8 	.word	0x20000ab8

08003504 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800350c:	f000 ff2e 	bl	800436c <HAL_GetTick>
 8003510:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003516:	20ff      	movs	r0, #255	; 0xff
 8003518:	f7ff ffae 	bl	8003478 <xchg_spi>
 800351c:	4603      	mov	r3, r0
 800351e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2bff      	cmp	r3, #255	; 0xff
 8003524:	d007      	beq.n	8003536 <wait_ready+0x32>
 8003526:	f000 ff21 	bl	800436c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	429a      	cmp	r2, r3
 8003534:	d8ef      	bhi.n	8003516 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2bff      	cmp	r3, #255	; 0xff
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003550:	2201      	movs	r2, #1
 8003552:	2110      	movs	r1, #16
 8003554:	4803      	ldr	r0, [pc, #12]	; (8003564 <despiselect+0x18>)
 8003556:	f001 fda5 	bl	80050a4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800355a:	20ff      	movs	r0, #255	; 0xff
 800355c:	f7ff ff8c 	bl	8003478 <xchg_spi>

}
 8003560:	bf00      	nop
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40020000 	.word	0x40020000

08003568 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800356c:	2200      	movs	r2, #0
 800356e:	2110      	movs	r1, #16
 8003570:	4809      	ldr	r0, [pc, #36]	; (8003598 <spiselect+0x30>)
 8003572:	f001 fd97 	bl	80050a4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003576:	20ff      	movs	r0, #255	; 0xff
 8003578:	f7ff ff7e 	bl	8003478 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800357c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003580:	f7ff ffc0 	bl	8003504 <wait_ready>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <spiselect+0x26>
 800358a:	2301      	movs	r3, #1
 800358c:	e002      	b.n	8003594 <spiselect+0x2c>

	despiselect();
 800358e:	f7ff ffdd 	bl	800354c <despiselect>
	return 0;	/* Timeout */
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40020000 	.word	0x40020000

0800359c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80035a6:	20c8      	movs	r0, #200	; 0xc8
 80035a8:	f7ff ff3c 	bl	8003424 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80035ac:	20ff      	movs	r0, #255	; 0xff
 80035ae:	f7ff ff63 	bl	8003478 <xchg_spi>
 80035b2:	4603      	mov	r3, r0
 80035b4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	2bff      	cmp	r3, #255	; 0xff
 80035ba:	d104      	bne.n	80035c6 <rcvr_datablock+0x2a>
 80035bc:	f7ff ff46 	bl	800344c <SPI_Timer_Status>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f2      	bne.n	80035ac <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	2bfe      	cmp	r3, #254	; 0xfe
 80035ca:	d001      	beq.n	80035d0 <rcvr_datablock+0x34>
 80035cc:	2300      	movs	r3, #0
 80035ce:	e00a      	b.n	80035e6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80035d0:	6839      	ldr	r1, [r7, #0]
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ff66 	bl	80034a4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80035d8:	20ff      	movs	r0, #255	; 0xff
 80035da:	f7ff ff4d 	bl	8003478 <xchg_spi>
 80035de:	20ff      	movs	r0, #255	; 0xff
 80035e0:	f7ff ff4a 	bl	8003478 <xchg_spi>

	return 1;						/* Function succeeded */
 80035e4:	2301      	movs	r3, #1
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80035fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035fe:	f7ff ff81 	bl	8003504 <wait_ready>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <xmit_datablock+0x1e>
 8003608:	2300      	movs	r3, #0
 800360a:	e01e      	b.n	800364a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff ff32 	bl	8003478 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	2bfd      	cmp	r3, #253	; 0xfd
 8003618:	d016      	beq.n	8003648 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800361a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff ff5c 	bl	80034dc <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003624:	20ff      	movs	r0, #255	; 0xff
 8003626:	f7ff ff27 	bl	8003478 <xchg_spi>
 800362a:	20ff      	movs	r0, #255	; 0xff
 800362c:	f7ff ff24 	bl	8003478 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003630:	20ff      	movs	r0, #255	; 0xff
 8003632:	f7ff ff21 	bl	8003478 <xchg_spi>
 8003636:	4603      	mov	r3, r0
 8003638:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	2b05      	cmp	r3, #5
 8003642:	d001      	beq.n	8003648 <xmit_datablock+0x5a>
 8003644:	2300      	movs	r3, #0
 8003646:	e000      	b.n	800364a <xmit_datablock+0x5c>
	}
	return 1;
 8003648:	2301      	movs	r3, #1
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	4603      	mov	r3, r0
 800365a:	6039      	str	r1, [r7, #0]
 800365c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	2b00      	cmp	r3, #0
 8003664:	da0e      	bge.n	8003684 <send_cmd+0x32>
		cmd &= 0x7F;
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800366c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800366e:	2100      	movs	r1, #0
 8003670:	2037      	movs	r0, #55	; 0x37
 8003672:	f7ff ffee 	bl	8003652 <send_cmd>
 8003676:	4603      	mov	r3, r0
 8003678:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800367a:	7bbb      	ldrb	r3, [r7, #14]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d901      	bls.n	8003684 <send_cmd+0x32>
 8003680:	7bbb      	ldrb	r3, [r7, #14]
 8003682:	e051      	b.n	8003728 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d008      	beq.n	800369c <send_cmd+0x4a>
		despiselect();
 800368a:	f7ff ff5f 	bl	800354c <despiselect>
		if (!spiselect()) return 0xFF;
 800368e:	f7ff ff6b 	bl	8003568 <spiselect>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <send_cmd+0x4a>
 8003698:	23ff      	movs	r3, #255	; 0xff
 800369a:	e045      	b.n	8003728 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fee7 	bl	8003478 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	0e1b      	lsrs	r3, r3, #24
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fee1 	bl	8003478 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	0c1b      	lsrs	r3, r3, #16
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fedb 	bl	8003478 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	0a1b      	lsrs	r3, r3, #8
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fed5 	bl	8003478 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff fed0 	bl	8003478 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <send_cmd+0x94>
 80036e2:	2395      	movs	r3, #149	; 0x95
 80036e4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d101      	bne.n	80036f0 <send_cmd+0x9e>
 80036ec:	2387      	movs	r3, #135	; 0x87
 80036ee:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fec0 	bl	8003478 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d102      	bne.n	8003704 <send_cmd+0xb2>
 80036fe:	20ff      	movs	r0, #255	; 0xff
 8003700:	f7ff feba 	bl	8003478 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003704:	230a      	movs	r3, #10
 8003706:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003708:	20ff      	movs	r0, #255	; 0xff
 800370a:	f7ff feb5 	bl	8003478 <xchg_spi>
 800370e:	4603      	mov	r3, r0
 8003710:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003712:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003716:	2b00      	cmp	r3, #0
 8003718:	da05      	bge.n	8003726 <send_cmd+0xd4>
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	3b01      	subs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003726:	7bbb      	ldrb	r3, [r7, #14]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <USER_SPI_initialize+0x14>
 8003740:	2301      	movs	r3, #1
 8003742:	e0d6      	b.n	80038f2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003744:	4b6d      	ldr	r3, [pc, #436]	; (80038fc <USER_SPI_initialize+0x1cc>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <USER_SPI_initialize+0x2a>
 8003752:	4b6a      	ldr	r3, [pc, #424]	; (80038fc <USER_SPI_initialize+0x1cc>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	e0cb      	b.n	80038f2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800375a:	4b69      	ldr	r3, [pc, #420]	; (8003900 <USER_SPI_initialize+0x1d0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003764:	4b66      	ldr	r3, [pc, #408]	; (8003900 <USER_SPI_initialize+0x1d0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800376c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800376e:	230a      	movs	r3, #10
 8003770:	73fb      	strb	r3, [r7, #15]
 8003772:	e005      	b.n	8003780 <USER_SPI_initialize+0x50>
 8003774:	20ff      	movs	r0, #255	; 0xff
 8003776:	f7ff fe7f 	bl	8003478 <xchg_spi>
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	3b01      	subs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f6      	bne.n	8003774 <USER_SPI_initialize+0x44>

	ty = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800378a:	2100      	movs	r1, #0
 800378c:	2000      	movs	r0, #0
 800378e:	f7ff ff60 	bl	8003652 <send_cmd>
 8003792:	4603      	mov	r3, r0
 8003794:	2b01      	cmp	r3, #1
 8003796:	f040 808b 	bne.w	80038b0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800379a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800379e:	f7ff fe41 	bl	8003424 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80037a2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80037a6:	2008      	movs	r0, #8
 80037a8:	f7ff ff53 	bl	8003652 <send_cmd>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d151      	bne.n	8003856 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80037b2:	2300      	movs	r3, #0
 80037b4:	73fb      	strb	r3, [r7, #15]
 80037b6:	e00d      	b.n	80037d4 <USER_SPI_initialize+0xa4>
 80037b8:	7bfc      	ldrb	r4, [r7, #15]
 80037ba:	20ff      	movs	r0, #255	; 0xff
 80037bc:	f7ff fe5c 	bl	8003478 <xchg_spi>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	f104 0310 	add.w	r3, r4, #16
 80037c8:	443b      	add	r3, r7
 80037ca:	f803 2c08 	strb.w	r2, [r3, #-8]
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	3301      	adds	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d9ee      	bls.n	80037b8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80037da:	7abb      	ldrb	r3, [r7, #10]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d167      	bne.n	80038b0 <USER_SPI_initialize+0x180>
 80037e0:	7afb      	ldrb	r3, [r7, #11]
 80037e2:	2baa      	cmp	r3, #170	; 0xaa
 80037e4:	d164      	bne.n	80038b0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80037e6:	bf00      	nop
 80037e8:	f7ff fe30 	bl	800344c <SPI_Timer_Status>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <USER_SPI_initialize+0xd2>
 80037f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80037f6:	20a9      	movs	r0, #169	; 0xa9
 80037f8:	f7ff ff2b 	bl	8003652 <send_cmd>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f2      	bne.n	80037e8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003802:	f7ff fe23 	bl	800344c <SPI_Timer_Status>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d051      	beq.n	80038b0 <USER_SPI_initialize+0x180>
 800380c:	2100      	movs	r1, #0
 800380e:	203a      	movs	r0, #58	; 0x3a
 8003810:	f7ff ff1f 	bl	8003652 <send_cmd>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d14a      	bne.n	80038b0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	e00d      	b.n	800383c <USER_SPI_initialize+0x10c>
 8003820:	7bfc      	ldrb	r4, [r7, #15]
 8003822:	20ff      	movs	r0, #255	; 0xff
 8003824:	f7ff fe28 	bl	8003478 <xchg_spi>
 8003828:	4603      	mov	r3, r0
 800382a:	461a      	mov	r2, r3
 800382c:	f104 0310 	add.w	r3, r4, #16
 8003830:	443b      	add	r3, r7
 8003832:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	3301      	adds	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d9ee      	bls.n	8003820 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003842:	7a3b      	ldrb	r3, [r7, #8]
 8003844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <USER_SPI_initialize+0x120>
 800384c:	230c      	movs	r3, #12
 800384e:	e000      	b.n	8003852 <USER_SPI_initialize+0x122>
 8003850:	2304      	movs	r3, #4
 8003852:	737b      	strb	r3, [r7, #13]
 8003854:	e02c      	b.n	80038b0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003856:	2100      	movs	r1, #0
 8003858:	20a9      	movs	r0, #169	; 0xa9
 800385a:	f7ff fefa 	bl	8003652 <send_cmd>
 800385e:	4603      	mov	r3, r0
 8003860:	2b01      	cmp	r3, #1
 8003862:	d804      	bhi.n	800386e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003864:	2302      	movs	r3, #2
 8003866:	737b      	strb	r3, [r7, #13]
 8003868:	23a9      	movs	r3, #169	; 0xa9
 800386a:	73bb      	strb	r3, [r7, #14]
 800386c:	e003      	b.n	8003876 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800386e:	2301      	movs	r3, #1
 8003870:	737b      	strb	r3, [r7, #13]
 8003872:	2301      	movs	r3, #1
 8003874:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003876:	bf00      	nop
 8003878:	f7ff fde8 	bl	800344c <SPI_Timer_Status>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <USER_SPI_initialize+0x162>
 8003882:	7bbb      	ldrb	r3, [r7, #14]
 8003884:	2100      	movs	r1, #0
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fee3 	bl	8003652 <send_cmd>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f2      	bne.n	8003878 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003892:	f7ff fddb 	bl	800344c <SPI_Timer_Status>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d007      	beq.n	80038ac <USER_SPI_initialize+0x17c>
 800389c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038a0:	2010      	movs	r0, #16
 80038a2:	f7ff fed6 	bl	8003652 <send_cmd>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <USER_SPI_initialize+0x180>
				ty = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80038b0:	4a14      	ldr	r2, [pc, #80]	; (8003904 <USER_SPI_initialize+0x1d4>)
 80038b2:	7b7b      	ldrb	r3, [r7, #13]
 80038b4:	7013      	strb	r3, [r2, #0]
	despiselect();
 80038b6:	f7ff fe49 	bl	800354c <despiselect>

	if (ty) {			/* OK */
 80038ba:	7b7b      	ldrb	r3, [r7, #13]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d012      	beq.n	80038e6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <USER_SPI_initialize+0x1d0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <USER_SPI_initialize+0x1d0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0210 	orr.w	r2, r2, #16
 80038d2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80038d4:	4b09      	ldr	r3, [pc, #36]	; (80038fc <USER_SPI_initialize+0x1cc>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <USER_SPI_initialize+0x1cc>)
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	e002      	b.n	80038ec <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <USER_SPI_initialize+0x1cc>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <USER_SPI_initialize+0x1cc>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	b2db      	uxtb	r3, r3
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000780 	.word	0x20000780
 8003900:	20000ab8 	.word	0x20000ab8
 8003904:	20003678 	.word	0x20003678

08003908 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <USER_SPI_status+0x14>
 8003918:	2301      	movs	r3, #1
 800391a:	e002      	b.n	8003922 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <USER_SPI_status+0x28>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	b2db      	uxtb	r3, r3
}
 8003922:	4618      	mov	r0, r3
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20000780 	.word	0x20000780

08003934 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	4603      	mov	r3, r0
 8003942:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <USER_SPI_read+0x1c>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <USER_SPI_read+0x20>
 8003950:	2304      	movs	r3, #4
 8003952:	e04d      	b.n	80039f0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003954:	4b28      	ldr	r3, [pc, #160]	; (80039f8 <USER_SPI_read+0xc4>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <USER_SPI_read+0x32>
 8003962:	2303      	movs	r3, #3
 8003964:	e044      	b.n	80039f0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003966:	4b25      	ldr	r3, [pc, #148]	; (80039fc <USER_SPI_read+0xc8>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <USER_SPI_read+0x44>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	025b      	lsls	r3, r3, #9
 8003976:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d111      	bne.n	80039a2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	2011      	movs	r0, #17
 8003982:	f7ff fe66 	bl	8003652 <send_cmd>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d129      	bne.n	80039e0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800398c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003990:	68b8      	ldr	r0, [r7, #8]
 8003992:	f7ff fe03 	bl	800359c <rcvr_datablock>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d021      	beq.n	80039e0 <USER_SPI_read+0xac>
			count = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	e01e      	b.n	80039e0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	2012      	movs	r0, #18
 80039a6:	f7ff fe54 	bl	8003652 <send_cmd>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d117      	bne.n	80039e0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80039b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039b4:	68b8      	ldr	r0, [r7, #8]
 80039b6:	f7ff fdf1 	bl	800359c <rcvr_datablock>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <USER_SPI_read+0xa2>
				buff += 512;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80039c6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1ed      	bne.n	80039b0 <USER_SPI_read+0x7c>
 80039d4:	e000      	b.n	80039d8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80039d6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80039d8:	2100      	movs	r1, #0
 80039da:	200c      	movs	r0, #12
 80039dc:	f7ff fe39 	bl	8003652 <send_cmd>
		}
	}
	despiselect();
 80039e0:	f7ff fdb4 	bl	800354c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bf14      	ite	ne
 80039ea:	2301      	movne	r3, #1
 80039ec:	2300      	moveq	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000780 	.word	0x20000780
 80039fc:	20003678 	.word	0x20003678

08003a00 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d102      	bne.n	8003a1c <USER_SPI_write+0x1c>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <USER_SPI_write+0x20>
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	e063      	b.n	8003ae8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003a20:	4b33      	ldr	r3, [pc, #204]	; (8003af0 <USER_SPI_write+0xf0>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <USER_SPI_write+0x32>
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e05a      	b.n	8003ae8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003a32:	4b2f      	ldr	r3, [pc, #188]	; (8003af0 <USER_SPI_write+0xf0>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <USER_SPI_write+0x44>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e051      	b.n	8003ae8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003a44:	4b2b      	ldr	r3, [pc, #172]	; (8003af4 <USER_SPI_write+0xf4>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <USER_SPI_write+0x56>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	025b      	lsls	r3, r3, #9
 8003a54:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d110      	bne.n	8003a7e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	2018      	movs	r0, #24
 8003a60:	f7ff fdf7 	bl	8003652 <send_cmd>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d136      	bne.n	8003ad8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003a6a:	21fe      	movs	r1, #254	; 0xfe
 8003a6c:	68b8      	ldr	r0, [r7, #8]
 8003a6e:	f7ff fdbe 	bl	80035ee <xmit_datablock>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d02f      	beq.n	8003ad8 <USER_SPI_write+0xd8>
			count = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	e02c      	b.n	8003ad8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003a7e:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <USER_SPI_write+0xf4>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	f003 0306 	and.w	r3, r3, #6
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <USER_SPI_write+0x92>
 8003a8a:	6839      	ldr	r1, [r7, #0]
 8003a8c:	2097      	movs	r0, #151	; 0x97
 8003a8e:	f7ff fde0 	bl	8003652 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	2019      	movs	r0, #25
 8003a96:	f7ff fddc 	bl	8003652 <send_cmd>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d11b      	bne.n	8003ad8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003aa0:	21fc      	movs	r1, #252	; 0xfc
 8003aa2:	68b8      	ldr	r0, [r7, #8]
 8003aa4:	f7ff fda3 	bl	80035ee <xmit_datablock>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <USER_SPI_write+0xc4>
				buff += 512;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003ab4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1ee      	bne.n	8003aa0 <USER_SPI_write+0xa0>
 8003ac2:	e000      	b.n	8003ac6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003ac4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003ac6:	21fd      	movs	r1, #253	; 0xfd
 8003ac8:	2000      	movs	r0, #0
 8003aca:	f7ff fd90 	bl	80035ee <xmit_datablock>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <USER_SPI_write+0xd8>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003ad8:	f7ff fd38 	bl	800354c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bf14      	ite	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	2300      	moveq	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000780 	.word	0x20000780
 8003af4:	20003678 	.word	0x20003678

08003af8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08c      	sub	sp, #48	; 0x30
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	603a      	str	r2, [r7, #0]
 8003b02:	71fb      	strb	r3, [r7, #7]
 8003b04:	460b      	mov	r3, r1
 8003b06:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <USER_SPI_ioctl+0x1a>
 8003b0e:	2304      	movs	r3, #4
 8003b10:	e15a      	b.n	8003dc8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003b12:	4baf      	ldr	r3, [pc, #700]	; (8003dd0 <USER_SPI_ioctl+0x2d8>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <USER_SPI_ioctl+0x2c>
 8003b20:	2303      	movs	r3, #3
 8003b22:	e151      	b.n	8003dc8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003b2a:	79bb      	ldrb	r3, [r7, #6]
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	f200 8136 	bhi.w	8003d9e <USER_SPI_ioctl+0x2a6>
 8003b32:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <USER_SPI_ioctl+0x40>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003b4d 	.word	0x08003b4d
 8003b3c:	08003b61 	.word	0x08003b61
 8003b40:	08003d9f 	.word	0x08003d9f
 8003b44:	08003c0d 	.word	0x08003c0d
 8003b48:	08003d03 	.word	0x08003d03
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003b4c:	f7ff fd0c 	bl	8003568 <spiselect>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8127 	beq.w	8003da6 <USER_SPI_ioctl+0x2ae>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003b5e:	e122      	b.n	8003da6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003b60:	2100      	movs	r1, #0
 8003b62:	2009      	movs	r0, #9
 8003b64:	f7ff fd75 	bl	8003652 <send_cmd>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 811d 	bne.w	8003daa <USER_SPI_ioctl+0x2b2>
 8003b70:	f107 030c 	add.w	r3, r7, #12
 8003b74:	2110      	movs	r1, #16
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fd10 	bl	800359c <rcvr_datablock>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8113 	beq.w	8003daa <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003b84:	7b3b      	ldrb	r3, [r7, #12]
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d111      	bne.n	8003bb2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003b8e:	7d7b      	ldrb	r3, [r7, #21]
 8003b90:	461a      	mov	r2, r3
 8003b92:	7d3b      	ldrb	r3, [r7, #20]
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	4413      	add	r3, r2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	7cfb      	ldrb	r3, [r7, #19]
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	029a      	lsls	r2, r3, #10
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	e028      	b.n	8003c04 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003bb2:	7c7b      	ldrb	r3, [r7, #17]
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	7dbb      	ldrb	r3, [r7, #22]
 8003bbc:	09db      	lsrs	r3, r3, #7
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	7d7b      	ldrb	r3, [r7, #21]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f003 0306 	and.w	r3, r3, #6
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003bda:	7d3b      	ldrb	r3, [r7, #20]
 8003bdc:	099b      	lsrs	r3, r3, #6
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	7cfb      	ldrb	r3, [r7, #19]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	441a      	add	r2, r3
 8003be8:	7cbb      	ldrb	r3, [r7, #18]
 8003bea:	029b      	lsls	r3, r3, #10
 8003bec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bf0:	4413      	add	r3, r2
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003bf6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003bfa:	3b09      	subs	r3, #9
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003c0a:	e0ce      	b.n	8003daa <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003c0c:	4b71      	ldr	r3, [pc, #452]	; (8003dd4 <USER_SPI_ioctl+0x2dc>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d031      	beq.n	8003c7c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003c18:	2100      	movs	r1, #0
 8003c1a:	208d      	movs	r0, #141	; 0x8d
 8003c1c:	f7ff fd19 	bl	8003652 <send_cmd>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 80c3 	bne.w	8003dae <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003c28:	20ff      	movs	r0, #255	; 0xff
 8003c2a:	f7ff fc25 	bl	8003478 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003c2e:	f107 030c 	add.w	r3, r7, #12
 8003c32:	2110      	movs	r1, #16
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fcb1 	bl	800359c <rcvr_datablock>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80b6 	beq.w	8003dae <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003c42:	2330      	movs	r3, #48	; 0x30
 8003c44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003c48:	e007      	b.n	8003c5a <USER_SPI_ioctl+0x162>
 8003c4a:	20ff      	movs	r0, #255	; 0xff
 8003c4c:	f7ff fc14 	bl	8003478 <xchg_spi>
 8003c50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c54:	3b01      	subs	r3, #1
 8003c56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003c5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f3      	bne.n	8003c4a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003c62:	7dbb      	ldrb	r3, [r7, #22]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2310      	movs	r3, #16
 8003c6c:	fa03 f202 	lsl.w	r2, r3, r2
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003c7a:	e098      	b.n	8003dae <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	2009      	movs	r0, #9
 8003c80:	f7ff fce7 	bl	8003652 <send_cmd>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f040 8091 	bne.w	8003dae <USER_SPI_ioctl+0x2b6>
 8003c8c:	f107 030c 	add.w	r3, r7, #12
 8003c90:	2110      	movs	r1, #16
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fc82 	bl	800359c <rcvr_datablock>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8087 	beq.w	8003dae <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003ca0:	4b4c      	ldr	r3, [pc, #304]	; (8003dd4 <USER_SPI_ioctl+0x2dc>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d012      	beq.n	8003cd2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003cac:	7dbb      	ldrb	r3, [r7, #22]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003cb4:	7dfa      	ldrb	r2, [r7, #23]
 8003cb6:	09d2      	lsrs	r2, r2, #7
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	4413      	add	r3, r2
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	7e7b      	ldrb	r3, [r7, #25]
 8003cc0:	099b      	lsrs	r3, r3, #6
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	e013      	b.n	8003cfa <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003cd2:	7dbb      	ldrb	r3, [r7, #22]
 8003cd4:	109b      	asrs	r3, r3, #2
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	3301      	adds	r3, #1
 8003cde:	7dfa      	ldrb	r2, [r7, #23]
 8003ce0:	00d2      	lsls	r2, r2, #3
 8003ce2:	f002 0218 	and.w	r2, r2, #24
 8003ce6:	7df9      	ldrb	r1, [r7, #23]
 8003ce8:	0949      	lsrs	r1, r1, #5
 8003cea:	b2c9      	uxtb	r1, r1
 8003cec:	440a      	add	r2, r1
 8003cee:	3201      	adds	r2, #1
 8003cf0:	fb02 f303 	mul.w	r3, r2, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003d00:	e055      	b.n	8003dae <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003d02:	4b34      	ldr	r3, [pc, #208]	; (8003dd4 <USER_SPI_ioctl+0x2dc>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	f003 0306 	and.w	r3, r3, #6
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d051      	beq.n	8003db2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003d0e:	f107 020c 	add.w	r2, r7, #12
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	210b      	movs	r1, #11
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff feee 	bl	8003af8 <USER_SPI_ioctl>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d149      	bne.n	8003db6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003d22:	7b3b      	ldrb	r3, [r7, #12]
 8003d24:	099b      	lsrs	r3, r3, #6
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d104      	bne.n	8003d36 <USER_SPI_ioctl+0x23e>
 8003d2c:	7dbb      	ldrb	r3, [r7, #22]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d041      	beq.n	8003dba <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	623b      	str	r3, [r7, #32]
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8003d46:	4b23      	ldr	r3, [pc, #140]	; (8003dd4 <USER_SPI_ioctl+0x2dc>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d105      	bne.n	8003d5e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	025b      	lsls	r3, r3, #9
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	025b      	lsls	r3, r3, #9
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003d5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d60:	2020      	movs	r0, #32
 8003d62:	f7ff fc76 	bl	8003652 <send_cmd>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d128      	bne.n	8003dbe <USER_SPI_ioctl+0x2c6>
 8003d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d6e:	2021      	movs	r0, #33	; 0x21
 8003d70:	f7ff fc6f 	bl	8003652 <send_cmd>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d121      	bne.n	8003dbe <USER_SPI_ioctl+0x2c6>
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	2026      	movs	r0, #38	; 0x26
 8003d7e:	f7ff fc68 	bl	8003652 <send_cmd>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d11a      	bne.n	8003dbe <USER_SPI_ioctl+0x2c6>
 8003d88:	f247 5030 	movw	r0, #30000	; 0x7530
 8003d8c:	f7ff fbba 	bl	8003504 <wait_ready>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d013      	beq.n	8003dbe <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003d96:	2300      	movs	r3, #0
 8003d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003d9c:	e00f      	b.n	8003dbe <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003d9e:	2304      	movs	r3, #4
 8003da0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003da4:	e00c      	b.n	8003dc0 <USER_SPI_ioctl+0x2c8>
		break;
 8003da6:	bf00      	nop
 8003da8:	e00a      	b.n	8003dc0 <USER_SPI_ioctl+0x2c8>
		break;
 8003daa:	bf00      	nop
 8003dac:	e008      	b.n	8003dc0 <USER_SPI_ioctl+0x2c8>
		break;
 8003dae:	bf00      	nop
 8003db0:	e006      	b.n	8003dc0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003db2:	bf00      	nop
 8003db4:	e004      	b.n	8003dc0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003db6:	bf00      	nop
 8003db8:	e002      	b.n	8003dc0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003dba:	bf00      	nop
 8003dbc:	e000      	b.n	8003dc0 <USER_SPI_ioctl+0x2c8>
		break;
 8003dbe:	bf00      	nop
	}

	despiselect();
 8003dc0:	f7ff fbc4 	bl	800354c <despiselect>

	return res;
 8003dc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3730      	adds	r7, #48	; 0x30
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000780 	.word	0x20000780
 8003dd4:	20003678 	.word	0x20003678

08003dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ddc:	480d      	ldr	r0, [pc, #52]	; (8003e14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003dde:	490e      	ldr	r1, [pc, #56]	; (8003e18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003de0:	4a0e      	ldr	r2, [pc, #56]	; (8003e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003de4:	e002      	b.n	8003dec <LoopCopyDataInit>

08003de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dea:	3304      	adds	r3, #4

08003dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003df0:	d3f9      	bcc.n	8003de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003df2:	4a0b      	ldr	r2, [pc, #44]	; (8003e20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003df4:	4c0b      	ldr	r4, [pc, #44]	; (8003e24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003df8:	e001      	b.n	8003dfe <LoopFillZerobss>

08003dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dfc:	3204      	adds	r2, #4

08003dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e00:	d3fb      	bcc.n	8003dfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e02:	f7ff fafd 	bl	8003400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e06:	f006 fd51 	bl	800a8ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e0a:	f7fd fd31 	bl	8001870 <main>
  bx  lr    
 8003e0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e18:	20000980 	.word	0x20000980
  ldr r2, =_sidata
 8003e1c:	0800e994 	.word	0x0800e994
  ldr r2, =_sbss
 8003e20:	20000980 	.word	0x20000980
  ldr r4, =_ebss
 8003e24:	20003c18 	.word	0x20003c18

08003e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e28:	e7fe      	b.n	8003e28 <ADC_IRQHandler>

08003e2a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af04      	add	r7, sp, #16
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003e42:	f04f 33ff 	mov.w	r3, #4294967295
 8003e46:	9302      	str	r3, [sp, #8]
 8003e48:	2301      	movs	r3, #1
 8003e4a:	9301      	str	r3, [sp, #4]
 8003e4c:	1dfb      	adds	r3, r7, #7
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	2301      	movs	r3, #1
 8003e52:	2200      	movs	r2, #0
 8003e54:	2178      	movs	r1, #120	; 0x78
 8003e56:	4803      	ldr	r0, [pc, #12]	; (8003e64 <ssd1306_WriteCommand+0x2c>)
 8003e58:	f001 fa9a 	bl	8005390 <HAL_I2C_Mem_Write>
}
 8003e5c:	bf00      	nop
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	200009f0 	.word	0x200009f0

08003e68 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af04      	add	r7, sp, #16
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7a:	9202      	str	r2, [sp, #8]
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2301      	movs	r3, #1
 8003e84:	2240      	movs	r2, #64	; 0x40
 8003e86:	2178      	movs	r1, #120	; 0x78
 8003e88:	4803      	ldr	r0, [pc, #12]	; (8003e98 <ssd1306_WriteData+0x30>)
 8003e8a:	f001 fa81 	bl	8005390 <HAL_I2C_Mem_Write>
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	200009f0 	.word	0x200009f0

08003e9c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003ea0:	f7ff ffc3 	bl	8003e2a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003ea4:	2064      	movs	r0, #100	; 0x64
 8003ea6:	f000 fa6d 	bl	8004384 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003eaa:	2000      	movs	r0, #0
 8003eac:	f000 f9da 	bl	8004264 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003eb0:	2020      	movs	r0, #32
 8003eb2:	f7ff ffc1 	bl	8003e38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	f7ff ffbe 	bl	8003e38 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003ebc:	20b0      	movs	r0, #176	; 0xb0
 8003ebe:	f7ff ffbb 	bl	8003e38 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003ec2:	20c8      	movs	r0, #200	; 0xc8
 8003ec4:	f7ff ffb8 	bl	8003e38 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f7ff ffb5 	bl	8003e38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003ece:	2010      	movs	r0, #16
 8003ed0:	f7ff ffb2 	bl	8003e38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003ed4:	2040      	movs	r0, #64	; 0x40
 8003ed6:	f7ff ffaf 	bl	8003e38 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003eda:	20ff      	movs	r0, #255	; 0xff
 8003edc:	f000 f9ae 	bl	800423c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003ee0:	20a1      	movs	r0, #161	; 0xa1
 8003ee2:	f7ff ffa9 	bl	8003e38 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003ee6:	20a6      	movs	r0, #166	; 0xa6
 8003ee8:	f7ff ffa6 	bl	8003e38 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003eec:	20a8      	movs	r0, #168	; 0xa8
 8003eee:	f7ff ffa3 	bl	8003e38 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003ef2:	203f      	movs	r0, #63	; 0x3f
 8003ef4:	f7ff ffa0 	bl	8003e38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003ef8:	20a4      	movs	r0, #164	; 0xa4
 8003efa:	f7ff ff9d 	bl	8003e38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003efe:	20d3      	movs	r0, #211	; 0xd3
 8003f00:	f7ff ff9a 	bl	8003e38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003f04:	2000      	movs	r0, #0
 8003f06:	f7ff ff97 	bl	8003e38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003f0a:	20d5      	movs	r0, #213	; 0xd5
 8003f0c:	f7ff ff94 	bl	8003e38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003f10:	20f0      	movs	r0, #240	; 0xf0
 8003f12:	f7ff ff91 	bl	8003e38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003f16:	20d9      	movs	r0, #217	; 0xd9
 8003f18:	f7ff ff8e 	bl	8003e38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003f1c:	2022      	movs	r0, #34	; 0x22
 8003f1e:	f7ff ff8b 	bl	8003e38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003f22:	20da      	movs	r0, #218	; 0xda
 8003f24:	f7ff ff88 	bl	8003e38 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003f28:	2012      	movs	r0, #18
 8003f2a:	f7ff ff85 	bl	8003e38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003f2e:	20db      	movs	r0, #219	; 0xdb
 8003f30:	f7ff ff82 	bl	8003e38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003f34:	2020      	movs	r0, #32
 8003f36:	f7ff ff7f 	bl	8003e38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003f3a:	208d      	movs	r0, #141	; 0x8d
 8003f3c:	f7ff ff7c 	bl	8003e38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003f40:	2014      	movs	r0, #20
 8003f42:	f7ff ff79 	bl	8003e38 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003f46:	2001      	movs	r0, #1
 8003f48:	f000 f98c 	bl	8004264 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f000 f80f 	bl	8003f70 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003f52:	f000 f831 	bl	8003fb8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <ssd1306_Init+0xd0>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003f5c:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <ssd1306_Init+0xd0>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003f62:	4b02      	ldr	r3, [pc, #8]	; (8003f6c <ssd1306_Init+0xd0>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	711a      	strb	r2, [r3, #4]
}
 8003f68:	bf00      	nop
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20003a84 	.word	0x20003a84

08003f70 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e00d      	b.n	8003f9c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <ssd1306_Fill+0x1a>
 8003f86:	2100      	movs	r1, #0
 8003f88:	e000      	b.n	8003f8c <ssd1306_Fill+0x1c>
 8003f8a:	21ff      	movs	r1, #255	; 0xff
 8003f8c:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <ssd1306_Fill+0x44>)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4413      	add	r3, r2
 8003f92:	460a      	mov	r2, r1
 8003f94:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa2:	d3ed      	bcc.n	8003f80 <ssd1306_Fill+0x10>
    }
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20003684 	.word	0x20003684

08003fb8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	71fb      	strb	r3, [r7, #7]
 8003fc2:	e016      	b.n	8003ff2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	3b50      	subs	r3, #80	; 0x50
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff ff34 	bl	8003e38 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f7ff ff31 	bl	8003e38 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003fd6:	2010      	movs	r0, #16
 8003fd8:	f7ff ff2e 	bl	8003e38 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	01db      	lsls	r3, r3, #7
 8003fe0:	4a08      	ldr	r2, [pc, #32]	; (8004004 <ssd1306_UpdateScreen+0x4c>)
 8003fe2:	4413      	add	r3, r2
 8003fe4:	2180      	movs	r1, #128	; 0x80
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff ff3e 	bl	8003e68 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	71fb      	strb	r3, [r7, #7]
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	2b07      	cmp	r3, #7
 8003ff6:	d9e5      	bls.n	8003fc4 <ssd1306_UpdateScreen+0xc>
    }
}
 8003ff8:	bf00      	nop
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20003684 	.word	0x20003684

08004008 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
 8004012:	460b      	mov	r3, r1
 8004014:	71bb      	strb	r3, [r7, #6]
 8004016:	4613      	mov	r3, r2
 8004018:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800401a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401e:	2b00      	cmp	r3, #0
 8004020:	db3d      	blt.n	800409e <ssd1306_DrawPixel+0x96>
 8004022:	79bb      	ldrb	r3, [r7, #6]
 8004024:	2b3f      	cmp	r3, #63	; 0x3f
 8004026:	d83a      	bhi.n	800409e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004028:	797b      	ldrb	r3, [r7, #5]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d11a      	bne.n	8004064 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800402e:	79fa      	ldrb	r2, [r7, #7]
 8004030:	79bb      	ldrb	r3, [r7, #6]
 8004032:	08db      	lsrs	r3, r3, #3
 8004034:	b2d8      	uxtb	r0, r3
 8004036:	4603      	mov	r3, r0
 8004038:	01db      	lsls	r3, r3, #7
 800403a:	4413      	add	r3, r2
 800403c:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <ssd1306_DrawPixel+0xa4>)
 800403e:	5cd3      	ldrb	r3, [r2, r3]
 8004040:	b25a      	sxtb	r2, r3
 8004042:	79bb      	ldrb	r3, [r7, #6]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	2101      	movs	r1, #1
 800404a:	fa01 f303 	lsl.w	r3, r1, r3
 800404e:	b25b      	sxtb	r3, r3
 8004050:	4313      	orrs	r3, r2
 8004052:	b259      	sxtb	r1, r3
 8004054:	79fa      	ldrb	r2, [r7, #7]
 8004056:	4603      	mov	r3, r0
 8004058:	01db      	lsls	r3, r3, #7
 800405a:	4413      	add	r3, r2
 800405c:	b2c9      	uxtb	r1, r1
 800405e:	4a13      	ldr	r2, [pc, #76]	; (80040ac <ssd1306_DrawPixel+0xa4>)
 8004060:	54d1      	strb	r1, [r2, r3]
 8004062:	e01d      	b.n	80040a0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004064:	79fa      	ldrb	r2, [r7, #7]
 8004066:	79bb      	ldrb	r3, [r7, #6]
 8004068:	08db      	lsrs	r3, r3, #3
 800406a:	b2d8      	uxtb	r0, r3
 800406c:	4603      	mov	r3, r0
 800406e:	01db      	lsls	r3, r3, #7
 8004070:	4413      	add	r3, r2
 8004072:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <ssd1306_DrawPixel+0xa4>)
 8004074:	5cd3      	ldrb	r3, [r2, r3]
 8004076:	b25a      	sxtb	r2, r3
 8004078:	79bb      	ldrb	r3, [r7, #6]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	2101      	movs	r1, #1
 8004080:	fa01 f303 	lsl.w	r3, r1, r3
 8004084:	b25b      	sxtb	r3, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	b25b      	sxtb	r3, r3
 800408a:	4013      	ands	r3, r2
 800408c:	b259      	sxtb	r1, r3
 800408e:	79fa      	ldrb	r2, [r7, #7]
 8004090:	4603      	mov	r3, r0
 8004092:	01db      	lsls	r3, r3, #7
 8004094:	4413      	add	r3, r2
 8004096:	b2c9      	uxtb	r1, r1
 8004098:	4a04      	ldr	r2, [pc, #16]	; (80040ac <ssd1306_DrawPixel+0xa4>)
 800409a:	54d1      	strb	r1, [r2, r3]
 800409c:	e000      	b.n	80040a0 <ssd1306_DrawPixel+0x98>
        return;
 800409e:	bf00      	nop
    }
}
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	20003684 	.word	0x20003684

080040b0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	b089      	sub	sp, #36	; 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4604      	mov	r4, r0
 80040b8:	1d38      	adds	r0, r7, #4
 80040ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80040be:	461a      	mov	r2, r3
 80040c0:	4623      	mov	r3, r4
 80040c2:	73fb      	strb	r3, [r7, #15]
 80040c4:	4613      	mov	r3, r2
 80040c6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b1f      	cmp	r3, #31
 80040cc:	d902      	bls.n	80040d4 <ssd1306_WriteChar+0x24>
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	2b7e      	cmp	r3, #126	; 0x7e
 80040d2:	d901      	bls.n	80040d8 <ssd1306_WriteChar+0x28>
        return 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e06d      	b.n	80041b4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80040d8:	4b38      	ldr	r3, [pc, #224]	; (80041bc <ssd1306_WriteChar+0x10c>)
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	793b      	ldrb	r3, [r7, #4]
 80040e0:	4413      	add	r3, r2
 80040e2:	2b80      	cmp	r3, #128	; 0x80
 80040e4:	dc06      	bgt.n	80040f4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80040e6:	4b35      	ldr	r3, [pc, #212]	; (80041bc <ssd1306_WriteChar+0x10c>)
 80040e8:	885b      	ldrh	r3, [r3, #2]
 80040ea:	461a      	mov	r2, r3
 80040ec:	797b      	ldrb	r3, [r7, #5]
 80040ee:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80040f0:	2b40      	cmp	r3, #64	; 0x40
 80040f2:	dd01      	ble.n	80040f8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e05d      	b.n	80041b4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80040f8:	2300      	movs	r3, #0
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	e04c      	b.n	8004198 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	3b20      	subs	r3, #32
 8004104:	7979      	ldrb	r1, [r7, #5]
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	4619      	mov	r1, r3
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	440b      	add	r3, r1
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	4413      	add	r3, r2
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	e034      	b.n	8004188 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d012      	beq.n	8004154 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800412e:	4b23      	ldr	r3, [pc, #140]	; (80041bc <ssd1306_WriteChar+0x10c>)
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b2da      	uxtb	r2, r3
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	4413      	add	r3, r2
 800413a:	b2d8      	uxtb	r0, r3
 800413c:	4b1f      	ldr	r3, [pc, #124]	; (80041bc <ssd1306_WriteChar+0x10c>)
 800413e:	885b      	ldrh	r3, [r3, #2]
 8004140:	b2da      	uxtb	r2, r3
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	4413      	add	r3, r2
 8004148:	b2db      	uxtb	r3, r3
 800414a:	7bba      	ldrb	r2, [r7, #14]
 800414c:	4619      	mov	r1, r3
 800414e:	f7ff ff5b 	bl	8004008 <ssd1306_DrawPixel>
 8004152:	e016      	b.n	8004182 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004154:	4b19      	ldr	r3, [pc, #100]	; (80041bc <ssd1306_WriteChar+0x10c>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	b2da      	uxtb	r2, r3
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	4413      	add	r3, r2
 8004160:	b2d8      	uxtb	r0, r3
 8004162:	4b16      	ldr	r3, [pc, #88]	; (80041bc <ssd1306_WriteChar+0x10c>)
 8004164:	885b      	ldrh	r3, [r3, #2]
 8004166:	b2da      	uxtb	r2, r3
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	4413      	add	r3, r2
 800416e:	b2d9      	uxtb	r1, r3
 8004170:	7bbb      	ldrb	r3, [r7, #14]
 8004172:	2b00      	cmp	r3, #0
 8004174:	bf0c      	ite	eq
 8004176:	2301      	moveq	r3, #1
 8004178:	2300      	movne	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	f7ff ff43 	bl	8004008 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	3301      	adds	r3, #1
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	793b      	ldrb	r3, [r7, #4]
 800418a:	461a      	mov	r2, r3
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	4293      	cmp	r3, r2
 8004190:	d3c5      	bcc.n	800411e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	3301      	adds	r3, #1
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	797b      	ldrb	r3, [r7, #5]
 800419a:	461a      	mov	r2, r3
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4293      	cmp	r3, r2
 80041a0:	d3ad      	bcc.n	80040fe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <ssd1306_WriteChar+0x10c>)
 80041a4:	881a      	ldrh	r2, [r3, #0]
 80041a6:	793b      	ldrb	r3, [r7, #4]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	4413      	add	r3, r2
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	4b03      	ldr	r3, [pc, #12]	; (80041bc <ssd1306_WriteChar+0x10c>)
 80041b0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3724      	adds	r7, #36	; 0x24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd90      	pop	{r4, r7, pc}
 80041bc:	20003a84 	.word	0x20003a84

080041c0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	1d38      	adds	r0, r7, #4
 80041ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80041ce:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80041d0:	e012      	b.n	80041f8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	7818      	ldrb	r0, [r3, #0]
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	1d3a      	adds	r2, r7, #4
 80041da:	ca06      	ldmia	r2, {r1, r2}
 80041dc:	f7ff ff68 	bl	80040b0 <ssd1306_WriteChar>
 80041e0:	4603      	mov	r3, r0
 80041e2:	461a      	mov	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d002      	beq.n	80041f2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	e008      	b.n	8004204 <ssd1306_WriteString+0x44>
        }
        str++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3301      	adds	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e8      	bne.n	80041d2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	781b      	ldrb	r3, [r3, #0]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	460a      	mov	r2, r1
 8004216:	71fb      	strb	r3, [r7, #7]
 8004218:	4613      	mov	r3, r2
 800421a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	b29a      	uxth	r2, r3
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <ssd1306_SetCursor+0x2c>)
 8004222:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004224:	79bb      	ldrb	r3, [r7, #6]
 8004226:	b29a      	uxth	r2, r3
 8004228:	4b03      	ldr	r3, [pc, #12]	; (8004238 <ssd1306_SetCursor+0x2c>)
 800422a:	805a      	strh	r2, [r3, #2]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	20003a84 	.word	0x20003a84

0800423c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004246:	2381      	movs	r3, #129	; 0x81
 8004248:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fdf3 	bl	8003e38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fdef 	bl	8003e38 <ssd1306_WriteCommand>
}
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004274:	23af      	movs	r3, #175	; 0xaf
 8004276:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004278:	4b08      	ldr	r3, [pc, #32]	; (800429c <ssd1306_SetDisplayOn+0x38>)
 800427a:	2201      	movs	r2, #1
 800427c:	715a      	strb	r2, [r3, #5]
 800427e:	e004      	b.n	800428a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004280:	23ae      	movs	r3, #174	; 0xae
 8004282:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <ssd1306_SetDisplayOn+0x38>)
 8004286:	2200      	movs	r2, #0
 8004288:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fdd3 	bl	8003e38 <ssd1306_WriteCommand>
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20003a84 	.word	0x20003a84

080042a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <HAL_Init+0x40>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a0d      	ldr	r2, [pc, #52]	; (80042e0 <HAL_Init+0x40>)
 80042aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_Init+0x40>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <HAL_Init+0x40>)
 80042b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <HAL_Init+0x40>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <HAL_Init+0x40>)
 80042c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042c8:	2003      	movs	r0, #3
 80042ca:	f000 fd0d 	bl	8004ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042ce:	200f      	movs	r0, #15
 80042d0:	f000 f808 	bl	80042e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042d4:	f7fe fcce 	bl	8002c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40023c00 	.word	0x40023c00

080042e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042ec:	4b12      	ldr	r3, [pc, #72]	; (8004338 <HAL_InitTick+0x54>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	4b12      	ldr	r3, [pc, #72]	; (800433c <HAL_InitTick+0x58>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	4619      	mov	r1, r3
 80042f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80042fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fd25 	bl	8004d52 <HAL_SYSTICK_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e00e      	b.n	8004330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b0f      	cmp	r3, #15
 8004316:	d80a      	bhi.n	800432e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004318:	2200      	movs	r2, #0
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	f000 fced 	bl	8004cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004324:	4a06      	ldr	r2, [pc, #24]	; (8004340 <HAL_InitTick+0x5c>)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e000      	b.n	8004330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	2000077c 	.word	0x2000077c
 800433c:	200007a0 	.word	0x200007a0
 8004340:	2000079c 	.word	0x2000079c

08004344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004348:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_IncTick+0x20>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_IncTick+0x24>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4413      	add	r3, r2
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <HAL_IncTick+0x24>)
 8004356:	6013      	str	r3, [r2, #0]
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	200007a0 	.word	0x200007a0
 8004368:	20003a8c 	.word	0x20003a8c

0800436c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return uwTick;
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <HAL_GetTick+0x14>)
 8004372:	681b      	ldr	r3, [r3, #0]
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20003a8c 	.word	0x20003a8c

08004384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800438c:	f7ff ffee 	bl	800436c <HAL_GetTick>
 8004390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439c:	d005      	beq.n	80043aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800439e:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <HAL_Delay+0x44>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043aa:	bf00      	nop
 80043ac:	f7ff ffde 	bl	800436c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d8f7      	bhi.n	80043ac <HAL_Delay+0x28>
  {
  }
}
 80043bc:	bf00      	nop
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	200007a0 	.word	0x200007a0

080043cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e033      	b.n	800444a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fe fc6a 	bl	8002cc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b00      	cmp	r3, #0
 8004408:	d118      	bne.n	800443c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004412:	f023 0302 	bic.w	r3, r3, #2
 8004416:	f043 0202 	orr.w	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fa96 	bl	8004950 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f023 0303 	bic.w	r3, r3, #3
 8004432:	f043 0201 	orr.w	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	641a      	str	r2, [r3, #64]	; 0x40
 800443a:	e001      	b.n	8004440 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_ADC_Start+0x1a>
 800446a:	2302      	movs	r3, #2
 800446c:	e097      	b.n	800459e <HAL_ADC_Start+0x14a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b01      	cmp	r3, #1
 8004482:	d018      	beq.n	80044b6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004494:	4b45      	ldr	r3, [pc, #276]	; (80045ac <HAL_ADC_Start+0x158>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a45      	ldr	r2, [pc, #276]	; (80045b0 <HAL_ADC_Start+0x15c>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	0c9a      	lsrs	r2, r3, #18
 80044a0:	4613      	mov	r3, r2
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	4413      	add	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80044a8:	e002      	b.n	80044b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f9      	bne.n	80044aa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d15f      	bne.n	8004584 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044cc:	f023 0301 	bic.w	r3, r3, #1
 80044d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d007      	beq.n	80044f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004502:	d106      	bne.n	8004512 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004508:	f023 0206 	bic.w	r2, r3, #6
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	645a      	str	r2, [r3, #68]	; 0x44
 8004510:	e002      	b.n	8004518 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004520:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <HAL_ADC_Start+0x160>)
 8004522:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800452c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10f      	bne.n	800455a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d129      	bne.n	800459c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004556:	609a      	str	r2, [r3, #8]
 8004558:	e020      	b.n	800459c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a16      	ldr	r2, [pc, #88]	; (80045b8 <HAL_ADC_Start+0x164>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d11b      	bne.n	800459c <HAL_ADC_Start+0x148>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d114      	bne.n	800459c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004580:	609a      	str	r2, [r3, #8]
 8004582:	e00b      	b.n	800459c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f043 0210 	orr.w	r2, r3, #16
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	f043 0201 	orr.w	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	2000077c 	.word	0x2000077c
 80045b0:	431bde83 	.word	0x431bde83
 80045b4:	40012300 	.word	0x40012300
 80045b8:	40012000 	.word	0x40012000

080045bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d8:	d113      	bne.n	8004602 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80045e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e8:	d10b      	bne.n	8004602 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f043 0220 	orr.w	r2, r3, #32
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e063      	b.n	80046ca <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004602:	f7ff feb3 	bl	800436c <HAL_GetTick>
 8004606:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004608:	e021      	b.n	800464e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d01d      	beq.n	800464e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <HAL_ADC_PollForConversion+0x6c>
 8004618:	f7ff fea8 	bl	800436c <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d212      	bcs.n	800464e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d00b      	beq.n	800464e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f043 0204 	orr.w	r2, r3, #4
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e03d      	b.n	80046ca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b02      	cmp	r3, #2
 800465a:	d1d6      	bne.n	800460a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0212 	mvn.w	r2, #18
 8004664:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d123      	bne.n	80046c8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004684:	2b00      	cmp	r3, #0
 8004686:	d11f      	bne.n	80046c8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004692:	2b00      	cmp	r3, #0
 8004694:	d006      	beq.n	80046a4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d111      	bne.n	80046c8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	f043 0201 	orr.w	r2, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x1c>
 8004704:	2302      	movs	r3, #2
 8004706:	e113      	b.n	8004930 <HAL_ADC_ConfigChannel+0x244>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b09      	cmp	r3, #9
 8004716:	d925      	bls.n	8004764 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68d9      	ldr	r1, [r3, #12]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	4613      	mov	r3, r2
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	4413      	add	r3, r2
 800472c:	3b1e      	subs	r3, #30
 800472e:	2207      	movs	r2, #7
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	43da      	mvns	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	400a      	ands	r2, r1
 800473c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68d9      	ldr	r1, [r3, #12]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	4618      	mov	r0, r3
 8004750:	4603      	mov	r3, r0
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	4403      	add	r3, r0
 8004756:	3b1e      	subs	r3, #30
 8004758:	409a      	lsls	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	60da      	str	r2, [r3, #12]
 8004762:	e022      	b.n	80047aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6919      	ldr	r1, [r3, #16]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	b29b      	uxth	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	4613      	mov	r3, r2
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	4413      	add	r3, r2
 8004778:	2207      	movs	r2, #7
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43da      	mvns	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	400a      	ands	r2, r1
 8004786:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6919      	ldr	r1, [r3, #16]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	4618      	mov	r0, r3
 800479a:	4603      	mov	r3, r0
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	4403      	add	r3, r0
 80047a0:	409a      	lsls	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b06      	cmp	r3, #6
 80047b0:	d824      	bhi.n	80047fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	3b05      	subs	r3, #5
 80047c4:	221f      	movs	r2, #31
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43da      	mvns	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	400a      	ands	r2, r1
 80047d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	4618      	mov	r0, r3
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	3b05      	subs	r3, #5
 80047ee:	fa00 f203 	lsl.w	r2, r0, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	635a      	str	r2, [r3, #52]	; 0x34
 80047fa:	e04c      	b.n	8004896 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b0c      	cmp	r3, #12
 8004802:	d824      	bhi.n	800484e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	3b23      	subs	r3, #35	; 0x23
 8004816:	221f      	movs	r2, #31
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43da      	mvns	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	400a      	ands	r2, r1
 8004824:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	4618      	mov	r0, r3
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	3b23      	subs	r3, #35	; 0x23
 8004840:	fa00 f203 	lsl.w	r2, r0, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
 800484c:	e023      	b.n	8004896 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	3b41      	subs	r3, #65	; 0x41
 8004860:	221f      	movs	r2, #31
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43da      	mvns	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	400a      	ands	r2, r1
 800486e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	4618      	mov	r0, r3
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	3b41      	subs	r3, #65	; 0x41
 800488a:	fa00 f203 	lsl.w	r2, r0, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004896:	4b29      	ldr	r3, [pc, #164]	; (800493c <HAL_ADC_ConfigChannel+0x250>)
 8004898:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a28      	ldr	r2, [pc, #160]	; (8004940 <HAL_ADC_ConfigChannel+0x254>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d10f      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x1d8>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b12      	cmp	r3, #18
 80048aa:	d10b      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a1d      	ldr	r2, [pc, #116]	; (8004940 <HAL_ADC_ConfigChannel+0x254>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d12b      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x23a>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1c      	ldr	r2, [pc, #112]	; (8004944 <HAL_ADC_ConfigChannel+0x258>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <HAL_ADC_ConfigChannel+0x1f4>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b11      	cmp	r3, #17
 80048de:	d122      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a11      	ldr	r2, [pc, #68]	; (8004944 <HAL_ADC_ConfigChannel+0x258>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d111      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004902:	4b11      	ldr	r3, [pc, #68]	; (8004948 <HAL_ADC_ConfigChannel+0x25c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a11      	ldr	r2, [pc, #68]	; (800494c <HAL_ADC_ConfigChannel+0x260>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	0c9a      	lsrs	r2, r3, #18
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004918:	e002      	b.n	8004920 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	3b01      	subs	r3, #1
 800491e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f9      	bne.n	800491a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	40012300 	.word	0x40012300
 8004940:	40012000 	.word	0x40012000
 8004944:	10000012 	.word	0x10000012
 8004948:	2000077c 	.word	0x2000077c
 800494c:	431bde83 	.word	0x431bde83

08004950 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004958:	4b79      	ldr	r3, [pc, #484]	; (8004b40 <ADC_Init+0x1f0>)
 800495a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	431a      	orrs	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004984:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6859      	ldr	r1, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	021a      	lsls	r2, r3, #8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80049a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6859      	ldr	r1, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6899      	ldr	r1, [r3, #8]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	4a58      	ldr	r2, [pc, #352]	; (8004b44 <ADC_Init+0x1f4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d022      	beq.n	8004a2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6899      	ldr	r1, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6899      	ldr	r1, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]
 8004a2c:	e00f      	b.n	8004a4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0202 	bic.w	r2, r2, #2
 8004a5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6899      	ldr	r1, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	7e1b      	ldrb	r3, [r3, #24]
 8004a68:	005a      	lsls	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01b      	beq.n	8004ab4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6859      	ldr	r1, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	035a      	lsls	r2, r3, #13
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
 8004ab2:	e007      	b.n	8004ac4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ac2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	051a      	lsls	r2, r3, #20
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004af8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6899      	ldr	r1, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b06:	025a      	lsls	r2, r3, #9
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6899      	ldr	r1, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	029a      	lsls	r2, r3, #10
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	609a      	str	r2, [r3, #8]
}
 8004b34:	bf00      	nop
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	40012300 	.word	0x40012300
 8004b44:	0f000001 	.word	0x0f000001

08004b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <__NVIC_SetPriorityGrouping+0x44>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b64:	4013      	ands	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b7a:	4a04      	ldr	r2, [pc, #16]	; (8004b8c <__NVIC_SetPriorityGrouping+0x44>)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	60d3      	str	r3, [r2, #12]
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	e000ed00 	.word	0xe000ed00

08004b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b94:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	0a1b      	lsrs	r3, r3, #8
 8004b9a:	f003 0307 	and.w	r3, r3, #7
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	e000ed00 	.word	0xe000ed00

08004bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	db0b      	blt.n	8004bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	f003 021f 	and.w	r2, r3, #31
 8004bc4:	4907      	ldr	r1, [pc, #28]	; (8004be4 <__NVIC_EnableIRQ+0x38>)
 8004bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	2001      	movs	r0, #1
 8004bce:	fa00 f202 	lsl.w	r2, r0, r2
 8004bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	e000e100 	.word	0xe000e100

08004be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	6039      	str	r1, [r7, #0]
 8004bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	db0a      	blt.n	8004c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	490c      	ldr	r1, [pc, #48]	; (8004c34 <__NVIC_SetPriority+0x4c>)
 8004c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c06:	0112      	lsls	r2, r2, #4
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c10:	e00a      	b.n	8004c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	4908      	ldr	r1, [pc, #32]	; (8004c38 <__NVIC_SetPriority+0x50>)
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	3b04      	subs	r3, #4
 8004c20:	0112      	lsls	r2, r2, #4
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	440b      	add	r3, r1
 8004c26:	761a      	strb	r2, [r3, #24]
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	e000e100 	.word	0xe000e100
 8004c38:	e000ed00 	.word	0xe000ed00

08004c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b089      	sub	sp, #36	; 0x24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f1c3 0307 	rsb	r3, r3, #7
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	bf28      	it	cs
 8004c5a:	2304      	movcs	r3, #4
 8004c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3304      	adds	r3, #4
 8004c62:	2b06      	cmp	r3, #6
 8004c64:	d902      	bls.n	8004c6c <NVIC_EncodePriority+0x30>
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	3b03      	subs	r3, #3
 8004c6a:	e000      	b.n	8004c6e <NVIC_EncodePriority+0x32>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c70:	f04f 32ff 	mov.w	r2, #4294967295
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	43da      	mvns	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	401a      	ands	r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c84:	f04f 31ff 	mov.w	r1, #4294967295
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8e:	43d9      	mvns	r1, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c94:	4313      	orrs	r3, r2
         );
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3724      	adds	r7, #36	; 0x24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cb4:	d301      	bcc.n	8004cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e00f      	b.n	8004cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cba:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <SysTick_Config+0x40>)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cc2:	210f      	movs	r1, #15
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	f7ff ff8e 	bl	8004be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <SysTick_Config+0x40>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cd2:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <SysTick_Config+0x40>)
 8004cd4:	2207      	movs	r2, #7
 8004cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	e000e010 	.word	0xe000e010

08004ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff ff29 	bl	8004b48 <__NVIC_SetPriorityGrouping>
}
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b086      	sub	sp, #24
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	4603      	mov	r3, r0
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
 8004d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d10:	f7ff ff3e 	bl	8004b90 <__NVIC_GetPriorityGrouping>
 8004d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	6978      	ldr	r0, [r7, #20]
 8004d1c:	f7ff ff8e 	bl	8004c3c <NVIC_EncodePriority>
 8004d20:	4602      	mov	r2, r0
 8004d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d26:	4611      	mov	r1, r2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff ff5d 	bl	8004be8 <__NVIC_SetPriority>
}
 8004d2e:	bf00      	nop
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff ff31 	bl	8004bac <__NVIC_EnableIRQ>
}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7ff ffa2 	bl	8004ca4 <SysTick_Config>
 8004d60:	4603      	mov	r3, r0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b089      	sub	sp, #36	; 0x24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	e159      	b.n	800503c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d88:	2201      	movs	r2, #1
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	f040 8148 	bne.w	8005036 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d005      	beq.n	8004dbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d130      	bne.n	8004e20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	2203      	movs	r2, #3
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004df4:	2201      	movs	r2, #1
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	091b      	lsrs	r3, r3, #4
 8004e0a:	f003 0201 	and.w	r2, r3, #1
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d017      	beq.n	8004e5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	2203      	movs	r2, #3
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4013      	ands	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d123      	bne.n	8004eb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	08da      	lsrs	r2, r3, #3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3208      	adds	r2, #8
 8004e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	220f      	movs	r2, #15
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	43db      	mvns	r3, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	08da      	lsrs	r2, r3, #3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3208      	adds	r2, #8
 8004eaa:	69b9      	ldr	r1, [r7, #24]
 8004eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	2203      	movs	r2, #3
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f003 0203 	and.w	r2, r3, #3
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80a2 	beq.w	8005036 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	4b57      	ldr	r3, [pc, #348]	; (8005054 <HAL_GPIO_Init+0x2e8>)
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efa:	4a56      	ldr	r2, [pc, #344]	; (8005054 <HAL_GPIO_Init+0x2e8>)
 8004efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f00:	6453      	str	r3, [r2, #68]	; 0x44
 8004f02:	4b54      	ldr	r3, [pc, #336]	; (8005054 <HAL_GPIO_Init+0x2e8>)
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f0e:	4a52      	ldr	r2, [pc, #328]	; (8005058 <HAL_GPIO_Init+0x2ec>)
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	089b      	lsrs	r3, r3, #2
 8004f14:	3302      	adds	r3, #2
 8004f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	220f      	movs	r2, #15
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a49      	ldr	r2, [pc, #292]	; (800505c <HAL_GPIO_Init+0x2f0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d019      	beq.n	8004f6e <HAL_GPIO_Init+0x202>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a48      	ldr	r2, [pc, #288]	; (8005060 <HAL_GPIO_Init+0x2f4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d013      	beq.n	8004f6a <HAL_GPIO_Init+0x1fe>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a47      	ldr	r2, [pc, #284]	; (8005064 <HAL_GPIO_Init+0x2f8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00d      	beq.n	8004f66 <HAL_GPIO_Init+0x1fa>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a46      	ldr	r2, [pc, #280]	; (8005068 <HAL_GPIO_Init+0x2fc>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d007      	beq.n	8004f62 <HAL_GPIO_Init+0x1f6>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a45      	ldr	r2, [pc, #276]	; (800506c <HAL_GPIO_Init+0x300>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d101      	bne.n	8004f5e <HAL_GPIO_Init+0x1f2>
 8004f5a:	2304      	movs	r3, #4
 8004f5c:	e008      	b.n	8004f70 <HAL_GPIO_Init+0x204>
 8004f5e:	2307      	movs	r3, #7
 8004f60:	e006      	b.n	8004f70 <HAL_GPIO_Init+0x204>
 8004f62:	2303      	movs	r3, #3
 8004f64:	e004      	b.n	8004f70 <HAL_GPIO_Init+0x204>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e002      	b.n	8004f70 <HAL_GPIO_Init+0x204>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <HAL_GPIO_Init+0x204>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	f002 0203 	and.w	r2, r2, #3
 8004f76:	0092      	lsls	r2, r2, #2
 8004f78:	4093      	lsls	r3, r2
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f80:	4935      	ldr	r1, [pc, #212]	; (8005058 <HAL_GPIO_Init+0x2ec>)
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	089b      	lsrs	r3, r3, #2
 8004f86:	3302      	adds	r3, #2
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f8e:	4b38      	ldr	r3, [pc, #224]	; (8005070 <HAL_GPIO_Init+0x304>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	43db      	mvns	r3, r3
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fb2:	4a2f      	ldr	r2, [pc, #188]	; (8005070 <HAL_GPIO_Init+0x304>)
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fb8:	4b2d      	ldr	r3, [pc, #180]	; (8005070 <HAL_GPIO_Init+0x304>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fdc:	4a24      	ldr	r2, [pc, #144]	; (8005070 <HAL_GPIO_Init+0x304>)
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fe2:	4b23      	ldr	r3, [pc, #140]	; (8005070 <HAL_GPIO_Init+0x304>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	43db      	mvns	r3, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005006:	4a1a      	ldr	r2, [pc, #104]	; (8005070 <HAL_GPIO_Init+0x304>)
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800500c:	4b18      	ldr	r3, [pc, #96]	; (8005070 <HAL_GPIO_Init+0x304>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	43db      	mvns	r3, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4013      	ands	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005030:	4a0f      	ldr	r2, [pc, #60]	; (8005070 <HAL_GPIO_Init+0x304>)
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	3301      	adds	r3, #1
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	2b0f      	cmp	r3, #15
 8005040:	f67f aea2 	bls.w	8004d88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop
 8005048:	3724      	adds	r7, #36	; 0x24
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40023800 	.word	0x40023800
 8005058:	40013800 	.word	0x40013800
 800505c:	40020000 	.word	0x40020000
 8005060:	40020400 	.word	0x40020400
 8005064:	40020800 	.word	0x40020800
 8005068:	40020c00 	.word	0x40020c00
 800506c:	40021000 	.word	0x40021000
 8005070:	40013c00 	.word	0x40013c00

08005074 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	887b      	ldrh	r3, [r7, #2]
 8005086:	4013      	ands	r3, r2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
 8005090:	e001      	b.n	8005096 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005092:	2300      	movs	r3, #0
 8005094:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005096:	7bfb      	ldrb	r3, [r7, #15]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	807b      	strh	r3, [r7, #2]
 80050b0:	4613      	mov	r3, r2
 80050b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050b4:	787b      	ldrb	r3, [r7, #1]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050ba:	887a      	ldrh	r2, [r7, #2]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050c0:	e003      	b.n	80050ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050c2:	887b      	ldrh	r3, [r7, #2]
 80050c4:	041a      	lsls	r2, r3, #16
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	619a      	str	r2, [r3, #24]
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050e2:	4b08      	ldr	r3, [pc, #32]	; (8005104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050e4:	695a      	ldr	r2, [r3, #20]
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d006      	beq.n	80050fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050ee:	4a05      	ldr	r2, [pc, #20]	; (8005104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fc fb06 	bl	8001708 <HAL_GPIO_EXTI_Callback>
  }
}
 80050fc:	bf00      	nop
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40013c00 	.word	0x40013c00

08005108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e12b      	b.n	8005372 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fd fe0c 	bl	8002d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2224      	movs	r2, #36	; 0x24
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0201 	bic.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800515a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800516a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800516c:	f001 f858 	bl	8006220 <HAL_RCC_GetPCLK1Freq>
 8005170:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	4a81      	ldr	r2, [pc, #516]	; (800537c <HAL_I2C_Init+0x274>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d807      	bhi.n	800518c <HAL_I2C_Init+0x84>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4a80      	ldr	r2, [pc, #512]	; (8005380 <HAL_I2C_Init+0x278>)
 8005180:	4293      	cmp	r3, r2
 8005182:	bf94      	ite	ls
 8005184:	2301      	movls	r3, #1
 8005186:	2300      	movhi	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	e006      	b.n	800519a <HAL_I2C_Init+0x92>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a7d      	ldr	r2, [pc, #500]	; (8005384 <HAL_I2C_Init+0x27c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	bf94      	ite	ls
 8005194:	2301      	movls	r3, #1
 8005196:	2300      	movhi	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e0e7      	b.n	8005372 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a78      	ldr	r2, [pc, #480]	; (8005388 <HAL_I2C_Init+0x280>)
 80051a6:	fba2 2303 	umull	r2, r3, r2, r3
 80051aa:	0c9b      	lsrs	r3, r3, #18
 80051ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4a6a      	ldr	r2, [pc, #424]	; (800537c <HAL_I2C_Init+0x274>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d802      	bhi.n	80051dc <HAL_I2C_Init+0xd4>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	3301      	adds	r3, #1
 80051da:	e009      	b.n	80051f0 <HAL_I2C_Init+0xe8>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	4a69      	ldr	r2, [pc, #420]	; (800538c <HAL_I2C_Init+0x284>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	099b      	lsrs	r3, r3, #6
 80051ee:	3301      	adds	r3, #1
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6812      	ldr	r2, [r2, #0]
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005202:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	495c      	ldr	r1, [pc, #368]	; (800537c <HAL_I2C_Init+0x274>)
 800520c:	428b      	cmp	r3, r1
 800520e:	d819      	bhi.n	8005244 <HAL_I2C_Init+0x13c>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	1e59      	subs	r1, r3, #1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	fbb1 f3f3 	udiv	r3, r1, r3
 800521e:	1c59      	adds	r1, r3, #1
 8005220:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005224:	400b      	ands	r3, r1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <HAL_I2C_Init+0x138>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1e59      	subs	r1, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	fbb1 f3f3 	udiv	r3, r1, r3
 8005238:	3301      	adds	r3, #1
 800523a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800523e:	e051      	b.n	80052e4 <HAL_I2C_Init+0x1dc>
 8005240:	2304      	movs	r3, #4
 8005242:	e04f      	b.n	80052e4 <HAL_I2C_Init+0x1dc>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d111      	bne.n	8005270 <HAL_I2C_Init+0x168>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	1e58      	subs	r0, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6859      	ldr	r1, [r3, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	440b      	add	r3, r1
 800525a:	fbb0 f3f3 	udiv	r3, r0, r3
 800525e:	3301      	adds	r3, #1
 8005260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005264:	2b00      	cmp	r3, #0
 8005266:	bf0c      	ite	eq
 8005268:	2301      	moveq	r3, #1
 800526a:	2300      	movne	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	e012      	b.n	8005296 <HAL_I2C_Init+0x18e>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	1e58      	subs	r0, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6859      	ldr	r1, [r3, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	0099      	lsls	r1, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	fbb0 f3f3 	udiv	r3, r0, r3
 8005286:	3301      	adds	r3, #1
 8005288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800528c:	2b00      	cmp	r3, #0
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_I2C_Init+0x196>
 800529a:	2301      	movs	r3, #1
 800529c:	e022      	b.n	80052e4 <HAL_I2C_Init+0x1dc>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10e      	bne.n	80052c4 <HAL_I2C_Init+0x1bc>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	1e58      	subs	r0, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6859      	ldr	r1, [r3, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	440b      	add	r3, r1
 80052b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80052b8:	3301      	adds	r3, #1
 80052ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c2:	e00f      	b.n	80052e4 <HAL_I2C_Init+0x1dc>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1e58      	subs	r0, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6859      	ldr	r1, [r3, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	0099      	lsls	r1, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052da:	3301      	adds	r3, #1
 80052dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	6809      	ldr	r1, [r1, #0]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005312:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6911      	ldr	r1, [r2, #16]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68d2      	ldr	r2, [r2, #12]
 800531e:	4311      	orrs	r1, r2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	430b      	orrs	r3, r1
 8005326:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695a      	ldr	r2, [r3, #20]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	000186a0 	.word	0x000186a0
 8005380:	001e847f 	.word	0x001e847f
 8005384:	003d08ff 	.word	0x003d08ff
 8005388:	431bde83 	.word	0x431bde83
 800538c:	10624dd3 	.word	0x10624dd3

08005390 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	4608      	mov	r0, r1
 800539a:	4611      	mov	r1, r2
 800539c:	461a      	mov	r2, r3
 800539e:	4603      	mov	r3, r0
 80053a0:	817b      	strh	r3, [r7, #10]
 80053a2:	460b      	mov	r3, r1
 80053a4:	813b      	strh	r3, [r7, #8]
 80053a6:	4613      	mov	r3, r2
 80053a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053aa:	f7fe ffdf 	bl	800436c <HAL_GetTick>
 80053ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	f040 80d9 	bne.w	8005570 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	2319      	movs	r3, #25
 80053c4:	2201      	movs	r2, #1
 80053c6:	496d      	ldr	r1, [pc, #436]	; (800557c <HAL_I2C_Mem_Write+0x1ec>)
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f971 	bl	80056b0 <I2C_WaitOnFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053d4:	2302      	movs	r3, #2
 80053d6:	e0cc      	b.n	8005572 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_I2C_Mem_Write+0x56>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e0c5      	b.n	8005572 <HAL_I2C_Mem_Write+0x1e2>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d007      	beq.n	800540c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800541a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2221      	movs	r2, #33	; 0x21
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2240      	movs	r2, #64	; 0x40
 8005428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a3a      	ldr	r2, [r7, #32]
 8005436:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800543c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4a4d      	ldr	r2, [pc, #308]	; (8005580 <HAL_I2C_Mem_Write+0x1f0>)
 800544c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800544e:	88f8      	ldrh	r0, [r7, #6]
 8005450:	893a      	ldrh	r2, [r7, #8]
 8005452:	8979      	ldrh	r1, [r7, #10]
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	4603      	mov	r3, r0
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f890 	bl	8005584 <I2C_RequestMemoryWrite>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d052      	beq.n	8005510 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e081      	b.n	8005572 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 f9f2 	bl	800585c <I2C_WaitOnTXEFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00d      	beq.n	800549a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	2b04      	cmp	r3, #4
 8005484:	d107      	bne.n	8005496 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005494:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e06b      	b.n	8005572 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	781a      	ldrb	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d11b      	bne.n	8005510 <HAL_I2C_Mem_Write+0x180>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d017      	beq.n	8005510 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	781a      	ldrb	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005506:	b29b      	uxth	r3, r3
 8005508:	3b01      	subs	r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1aa      	bne.n	800546e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f9de 	bl	80058de <I2C_WaitOnBTFFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00d      	beq.n	8005544 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	2b04      	cmp	r3, #4
 800552e:	d107      	bne.n	8005540 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e016      	b.n	8005572 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	e000      	b.n	8005572 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005570:	2302      	movs	r3, #2
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	00100002 	.word	0x00100002
 8005580:	ffff0000 	.word	0xffff0000

08005584 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af02      	add	r7, sp, #8
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	4608      	mov	r0, r1
 800558e:	4611      	mov	r1, r2
 8005590:	461a      	mov	r2, r3
 8005592:	4603      	mov	r3, r0
 8005594:	817b      	strh	r3, [r7, #10]
 8005596:	460b      	mov	r3, r1
 8005598:	813b      	strh	r3, [r7, #8]
 800559a:	4613      	mov	r3, r2
 800559c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f878 	bl	80056b0 <I2C_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00d      	beq.n	80055e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d4:	d103      	bne.n	80055de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e05f      	b.n	80056a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055e2:	897b      	ldrh	r3, [r7, #10]
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	6a3a      	ldr	r2, [r7, #32]
 80055f6:	492d      	ldr	r1, [pc, #180]	; (80056ac <I2C_RequestMemoryWrite+0x128>)
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f8b0 	bl	800575e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e04c      	b.n	80056a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005608:	2300      	movs	r3, #0
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800561e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005620:	6a39      	ldr	r1, [r7, #32]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 f91a 	bl	800585c <I2C_WaitOnTXEFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00d      	beq.n	800564a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	2b04      	cmp	r3, #4
 8005634:	d107      	bne.n	8005646 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e02b      	b.n	80056a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d105      	bne.n	800565c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005650:	893b      	ldrh	r3, [r7, #8]
 8005652:	b2da      	uxtb	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	611a      	str	r2, [r3, #16]
 800565a:	e021      	b.n	80056a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800565c:	893b      	ldrh	r3, [r7, #8]
 800565e:	0a1b      	lsrs	r3, r3, #8
 8005660:	b29b      	uxth	r3, r3
 8005662:	b2da      	uxtb	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800566a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566c:	6a39      	ldr	r1, [r7, #32]
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f8f4 	bl	800585c <I2C_WaitOnTXEFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00d      	beq.n	8005696 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	2b04      	cmp	r3, #4
 8005680:	d107      	bne.n	8005692 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e005      	b.n	80056a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005696:	893b      	ldrh	r3, [r7, #8]
 8005698:	b2da      	uxtb	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	00010002 	.word	0x00010002

080056b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	4613      	mov	r3, r2
 80056be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056c0:	e025      	b.n	800570e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d021      	beq.n	800570e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ca:	f7fe fe4f 	bl	800436c <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d302      	bcc.n	80056e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d116      	bne.n	800570e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f043 0220 	orr.w	r2, r3, #32
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e023      	b.n	8005756 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	0c1b      	lsrs	r3, r3, #16
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b01      	cmp	r3, #1
 8005716:	d10d      	bne.n	8005734 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	43da      	mvns	r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4013      	ands	r3, r2
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	bf0c      	ite	eq
 800572a:	2301      	moveq	r3, #1
 800572c:	2300      	movne	r3, #0
 800572e:	b2db      	uxtb	r3, r3
 8005730:	461a      	mov	r2, r3
 8005732:	e00c      	b.n	800574e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	43da      	mvns	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4013      	ands	r3, r2
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	bf0c      	ite	eq
 8005746:	2301      	moveq	r3, #1
 8005748:	2300      	movne	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	429a      	cmp	r2, r3
 8005752:	d0b6      	beq.n	80056c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800576c:	e051      	b.n	8005812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800577c:	d123      	bne.n	80057c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800578c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005796:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f043 0204 	orr.w	r2, r3, #4
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e046      	b.n	8005854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d021      	beq.n	8005812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ce:	f7fe fdcd 	bl	800436c <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d302      	bcc.n	80057e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d116      	bne.n	8005812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f043 0220 	orr.w	r2, r3, #32
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e020      	b.n	8005854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	0c1b      	lsrs	r3, r3, #16
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b01      	cmp	r3, #1
 800581a:	d10c      	bne.n	8005836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	43da      	mvns	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4013      	ands	r3, r2
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	bf14      	ite	ne
 800582e:	2301      	movne	r3, #1
 8005830:	2300      	moveq	r3, #0
 8005832:	b2db      	uxtb	r3, r3
 8005834:	e00b      	b.n	800584e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	43da      	mvns	r2, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4013      	ands	r3, r2
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	bf14      	ite	ne
 8005848:	2301      	movne	r3, #1
 800584a:	2300      	moveq	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d18d      	bne.n	800576e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005868:	e02d      	b.n	80058c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 f878 	bl	8005960 <I2C_IsAcknowledgeFailed>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e02d      	b.n	80058d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005880:	d021      	beq.n	80058c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005882:	f7fe fd73 	bl	800436c <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	429a      	cmp	r2, r3
 8005890:	d302      	bcc.n	8005898 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d116      	bne.n	80058c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	f043 0220 	orr.w	r2, r3, #32
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e007      	b.n	80058d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d0:	2b80      	cmp	r3, #128	; 0x80
 80058d2:	d1ca      	bne.n	800586a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058ea:	e02d      	b.n	8005948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f837 	bl	8005960 <I2C_IsAcknowledgeFailed>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e02d      	b.n	8005958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d021      	beq.n	8005948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005904:	f7fe fd32 	bl	800436c <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	429a      	cmp	r2, r3
 8005912:	d302      	bcc.n	800591a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d116      	bne.n	8005948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	f043 0220 	orr.w	r2, r3, #32
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e007      	b.n	8005958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f003 0304 	and.w	r3, r3, #4
 8005952:	2b04      	cmp	r3, #4
 8005954:	d1ca      	bne.n	80058ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005976:	d11b      	bne.n	80059b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005980:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	f043 0204 	orr.w	r2, r3, #4
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
	...

080059c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e267      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d075      	beq.n	8005aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059de:	4b88      	ldr	r3, [pc, #544]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d00c      	beq.n	8005a04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ea:	4b85      	ldr	r3, [pc, #532]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059f2:	2b08      	cmp	r3, #8
 80059f4:	d112      	bne.n	8005a1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059f6:	4b82      	ldr	r3, [pc, #520]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a02:	d10b      	bne.n	8005a1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a04:	4b7e      	ldr	r3, [pc, #504]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d05b      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x108>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d157      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e242      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a24:	d106      	bne.n	8005a34 <HAL_RCC_OscConfig+0x74>
 8005a26:	4b76      	ldr	r3, [pc, #472]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a75      	ldr	r2, [pc, #468]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	e01d      	b.n	8005a70 <HAL_RCC_OscConfig+0xb0>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a3c:	d10c      	bne.n	8005a58 <HAL_RCC_OscConfig+0x98>
 8005a3e:	4b70      	ldr	r3, [pc, #448]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a6f      	ldr	r2, [pc, #444]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	4b6d      	ldr	r3, [pc, #436]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a6c      	ldr	r2, [pc, #432]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	e00b      	b.n	8005a70 <HAL_RCC_OscConfig+0xb0>
 8005a58:	4b69      	ldr	r3, [pc, #420]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a68      	ldr	r2, [pc, #416]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	4b66      	ldr	r3, [pc, #408]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a65      	ldr	r2, [pc, #404]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d013      	beq.n	8005aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a78:	f7fe fc78 	bl	800436c <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a80:	f7fe fc74 	bl	800436c <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b64      	cmp	r3, #100	; 0x64
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e207      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a92:	4b5b      	ldr	r3, [pc, #364]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0f0      	beq.n	8005a80 <HAL_RCC_OscConfig+0xc0>
 8005a9e:	e014      	b.n	8005aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa0:	f7fe fc64 	bl	800436c <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aa8:	f7fe fc60 	bl	800436c <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b64      	cmp	r3, #100	; 0x64
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e1f3      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aba:	4b51      	ldr	r3, [pc, #324]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <HAL_RCC_OscConfig+0xe8>
 8005ac6:	e000      	b.n	8005aca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d063      	beq.n	8005b9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ad6:	4b4a      	ldr	r3, [pc, #296]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 030c 	and.w	r3, r3, #12
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00b      	beq.n	8005afa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ae2:	4b47      	ldr	r3, [pc, #284]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d11c      	bne.n	8005b28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aee:	4b44      	ldr	r3, [pc, #272]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d116      	bne.n	8005b28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005afa:	4b41      	ldr	r3, [pc, #260]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d005      	beq.n	8005b12 <HAL_RCC_OscConfig+0x152>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d001      	beq.n	8005b12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e1c7      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b12:	4b3b      	ldr	r3, [pc, #236]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	4937      	ldr	r1, [pc, #220]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b26:	e03a      	b.n	8005b9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d020      	beq.n	8005b72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b30:	4b34      	ldr	r3, [pc, #208]	; (8005c04 <HAL_RCC_OscConfig+0x244>)
 8005b32:	2201      	movs	r2, #1
 8005b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b36:	f7fe fc19 	bl	800436c <HAL_GetTick>
 8005b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b3c:	e008      	b.n	8005b50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b3e:	f7fe fc15 	bl	800436c <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e1a8      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b50:	4b2b      	ldr	r3, [pc, #172]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0f0      	beq.n	8005b3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b5c:	4b28      	ldr	r3, [pc, #160]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	4925      	ldr	r1, [pc, #148]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	600b      	str	r3, [r1, #0]
 8005b70:	e015      	b.n	8005b9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b72:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <HAL_RCC_OscConfig+0x244>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b78:	f7fe fbf8 	bl	800436c <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b80:	f7fe fbf4 	bl	800436c <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e187      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b92:	4b1b      	ldr	r3, [pc, #108]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f0      	bne.n	8005b80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d036      	beq.n	8005c18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d016      	beq.n	8005be0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bb2:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <HAL_RCC_OscConfig+0x248>)
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb8:	f7fe fbd8 	bl	800436c <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bc0:	f7fe fbd4 	bl	800436c <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e167      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bd2:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <HAL_RCC_OscConfig+0x240>)
 8005bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f0      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x200>
 8005bde:	e01b      	b.n	8005c18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <HAL_RCC_OscConfig+0x248>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005be6:	f7fe fbc1 	bl	800436c <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bec:	e00e      	b.n	8005c0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bee:	f7fe fbbd 	bl	800436c <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d907      	bls.n	8005c0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e150      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
 8005c00:	40023800 	.word	0x40023800
 8005c04:	42470000 	.word	0x42470000
 8005c08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c0c:	4b88      	ldr	r3, [pc, #544]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1ea      	bne.n	8005bee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 8097 	beq.w	8005d54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c26:	2300      	movs	r3, #0
 8005c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c2a:	4b81      	ldr	r3, [pc, #516]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10f      	bne.n	8005c56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c36:	2300      	movs	r3, #0
 8005c38:	60bb      	str	r3, [r7, #8]
 8005c3a:	4b7d      	ldr	r3, [pc, #500]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	4a7c      	ldr	r2, [pc, #496]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c44:	6413      	str	r3, [r2, #64]	; 0x40
 8005c46:	4b7a      	ldr	r3, [pc, #488]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c52:	2301      	movs	r3, #1
 8005c54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c56:	4b77      	ldr	r3, [pc, #476]	; (8005e34 <HAL_RCC_OscConfig+0x474>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d118      	bne.n	8005c94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c62:	4b74      	ldr	r3, [pc, #464]	; (8005e34 <HAL_RCC_OscConfig+0x474>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a73      	ldr	r2, [pc, #460]	; (8005e34 <HAL_RCC_OscConfig+0x474>)
 8005c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c6e:	f7fe fb7d 	bl	800436c <HAL_GetTick>
 8005c72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c74:	e008      	b.n	8005c88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c76:	f7fe fb79 	bl	800436c <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e10c      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c88:	4b6a      	ldr	r3, [pc, #424]	; (8005e34 <HAL_RCC_OscConfig+0x474>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0f0      	beq.n	8005c76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d106      	bne.n	8005caa <HAL_RCC_OscConfig+0x2ea>
 8005c9c:	4b64      	ldr	r3, [pc, #400]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca0:	4a63      	ldr	r2, [pc, #396]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	f043 0301 	orr.w	r3, r3, #1
 8005ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca8:	e01c      	b.n	8005ce4 <HAL_RCC_OscConfig+0x324>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	2b05      	cmp	r3, #5
 8005cb0:	d10c      	bne.n	8005ccc <HAL_RCC_OscConfig+0x30c>
 8005cb2:	4b5f      	ldr	r3, [pc, #380]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	4a5e      	ldr	r2, [pc, #376]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005cb8:	f043 0304 	orr.w	r3, r3, #4
 8005cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005cbe:	4b5c      	ldr	r3, [pc, #368]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc2:	4a5b      	ldr	r2, [pc, #364]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005cc4:	f043 0301 	orr.w	r3, r3, #1
 8005cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005cca:	e00b      	b.n	8005ce4 <HAL_RCC_OscConfig+0x324>
 8005ccc:	4b58      	ldr	r3, [pc, #352]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd0:	4a57      	ldr	r2, [pc, #348]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005cd2:	f023 0301 	bic.w	r3, r3, #1
 8005cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005cd8:	4b55      	ldr	r3, [pc, #340]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cdc:	4a54      	ldr	r2, [pc, #336]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005cde:	f023 0304 	bic.w	r3, r3, #4
 8005ce2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d015      	beq.n	8005d18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cec:	f7fe fb3e 	bl	800436c <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cf2:	e00a      	b.n	8005d0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cf4:	f7fe fb3a 	bl	800436c <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e0cb      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d0a:	4b49      	ldr	r3, [pc, #292]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0ee      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x334>
 8005d16:	e014      	b.n	8005d42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d18:	f7fe fb28 	bl	800436c <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d1e:	e00a      	b.n	8005d36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d20:	f7fe fb24 	bl	800436c <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e0b5      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d36:	4b3e      	ldr	r3, [pc, #248]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1ee      	bne.n	8005d20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d105      	bne.n	8005d54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d48:	4b39      	ldr	r3, [pc, #228]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4c:	4a38      	ldr	r2, [pc, #224]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 80a1 	beq.w	8005ea0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d5e:	4b34      	ldr	r3, [pc, #208]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 030c 	and.w	r3, r3, #12
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d05c      	beq.n	8005e24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d141      	bne.n	8005df6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d72:	4b31      	ldr	r3, [pc, #196]	; (8005e38 <HAL_RCC_OscConfig+0x478>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d78:	f7fe faf8 	bl	800436c <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d7e:	e008      	b.n	8005d92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d80:	f7fe faf4 	bl	800436c <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e087      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d92:	4b27      	ldr	r3, [pc, #156]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f0      	bne.n	8005d80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69da      	ldr	r2, [r3, #28]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	019b      	lsls	r3, r3, #6
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db4:	085b      	lsrs	r3, r3, #1
 8005db6:	3b01      	subs	r3, #1
 8005db8:	041b      	lsls	r3, r3, #16
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	061b      	lsls	r3, r3, #24
 8005dc2:	491b      	ldr	r1, [pc, #108]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dc8:	4b1b      	ldr	r3, [pc, #108]	; (8005e38 <HAL_RCC_OscConfig+0x478>)
 8005dca:	2201      	movs	r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dce:	f7fe facd 	bl	800436c <HAL_GetTick>
 8005dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dd4:	e008      	b.n	8005de8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dd6:	f7fe fac9 	bl	800436c <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d901      	bls.n	8005de8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e05c      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005de8:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d0f0      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x416>
 8005df4:	e054      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005df6:	4b10      	ldr	r3, [pc, #64]	; (8005e38 <HAL_RCC_OscConfig+0x478>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfc:	f7fe fab6 	bl	800436c <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e04:	f7fe fab2 	bl	800436c <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e045      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e16:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <HAL_RCC_OscConfig+0x470>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f0      	bne.n	8005e04 <HAL_RCC_OscConfig+0x444>
 8005e22:	e03d      	b.n	8005ea0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d107      	bne.n	8005e3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e038      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
 8005e30:	40023800 	.word	0x40023800
 8005e34:	40007000 	.word	0x40007000
 8005e38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e3c:	4b1b      	ldr	r3, [pc, #108]	; (8005eac <HAL_RCC_OscConfig+0x4ec>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d028      	beq.n	8005e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d121      	bne.n	8005e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d11a      	bne.n	8005e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d111      	bne.n	8005e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e82:	085b      	lsrs	r3, r3, #1
 8005e84:	3b01      	subs	r3, #1
 8005e86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d107      	bne.n	8005e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d001      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	40023800 	.word	0x40023800

08005eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e0cc      	b.n	800605e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ec4:	4b68      	ldr	r3, [pc, #416]	; (8006068 <HAL_RCC_ClockConfig+0x1b8>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d90c      	bls.n	8005eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed2:	4b65      	ldr	r3, [pc, #404]	; (8006068 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eda:	4b63      	ldr	r3, [pc, #396]	; (8006068 <HAL_RCC_ClockConfig+0x1b8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d001      	beq.n	8005eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e0b8      	b.n	800605e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d020      	beq.n	8005f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f04:	4b59      	ldr	r3, [pc, #356]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	4a58      	ldr	r2, [pc, #352]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8005f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d005      	beq.n	8005f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f1c:	4b53      	ldr	r3, [pc, #332]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	4a52      	ldr	r2, [pc, #328]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8005f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f28:	4b50      	ldr	r3, [pc, #320]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	494d      	ldr	r1, [pc, #308]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d044      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d107      	bne.n	8005f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f4e:	4b47      	ldr	r3, [pc, #284]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d119      	bne.n	8005f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e07f      	b.n	800605e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d003      	beq.n	8005f6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d107      	bne.n	8005f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f6e:	4b3f      	ldr	r3, [pc, #252]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d109      	bne.n	8005f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e06f      	b.n	800605e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f7e:	4b3b      	ldr	r3, [pc, #236]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e067      	b.n	800605e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f8e:	4b37      	ldr	r3, [pc, #220]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f023 0203 	bic.w	r2, r3, #3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	4934      	ldr	r1, [pc, #208]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fa0:	f7fe f9e4 	bl	800436c <HAL_GetTick>
 8005fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa6:	e00a      	b.n	8005fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fa8:	f7fe f9e0 	bl	800436c <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e04f      	b.n	800605e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fbe:	4b2b      	ldr	r3, [pc, #172]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 020c 	and.w	r2, r3, #12
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d1eb      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fd0:	4b25      	ldr	r3, [pc, #148]	; (8006068 <HAL_RCC_ClockConfig+0x1b8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d20c      	bcs.n	8005ff8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fde:	4b22      	ldr	r3, [pc, #136]	; (8006068 <HAL_RCC_ClockConfig+0x1b8>)
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe6:	4b20      	ldr	r3, [pc, #128]	; (8006068 <HAL_RCC_ClockConfig+0x1b8>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d001      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e032      	b.n	800605e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d008      	beq.n	8006016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006004:	4b19      	ldr	r3, [pc, #100]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	4916      	ldr	r1, [pc, #88]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	4313      	orrs	r3, r2
 8006014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0308 	and.w	r3, r3, #8
 800601e:	2b00      	cmp	r3, #0
 8006020:	d009      	beq.n	8006036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006022:	4b12      	ldr	r3, [pc, #72]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	490e      	ldr	r1, [pc, #56]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 8006032:	4313      	orrs	r3, r2
 8006034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006036:	f000 f821 	bl	800607c <HAL_RCC_GetSysClockFreq>
 800603a:	4602      	mov	r2, r0
 800603c:	4b0b      	ldr	r3, [pc, #44]	; (800606c <HAL_RCC_ClockConfig+0x1bc>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	091b      	lsrs	r3, r3, #4
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	490a      	ldr	r1, [pc, #40]	; (8006070 <HAL_RCC_ClockConfig+0x1c0>)
 8006048:	5ccb      	ldrb	r3, [r1, r3]
 800604a:	fa22 f303 	lsr.w	r3, r2, r3
 800604e:	4a09      	ldr	r2, [pc, #36]	; (8006074 <HAL_RCC_ClockConfig+0x1c4>)
 8006050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006052:	4b09      	ldr	r3, [pc, #36]	; (8006078 <HAL_RCC_ClockConfig+0x1c8>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe f944 	bl	80042e4 <HAL_InitTick>

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	40023c00 	.word	0x40023c00
 800606c:	40023800 	.word	0x40023800
 8006070:	0800cb40 	.word	0x0800cb40
 8006074:	2000077c 	.word	0x2000077c
 8006078:	2000079c 	.word	0x2000079c

0800607c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800607c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006080:	b090      	sub	sp, #64	; 0x40
 8006082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	637b      	str	r3, [r7, #52]	; 0x34
 8006088:	2300      	movs	r3, #0
 800608a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800608c:	2300      	movs	r3, #0
 800608e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006094:	4b59      	ldr	r3, [pc, #356]	; (80061fc <HAL_RCC_GetSysClockFreq+0x180>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 030c 	and.w	r3, r3, #12
 800609c:	2b08      	cmp	r3, #8
 800609e:	d00d      	beq.n	80060bc <HAL_RCC_GetSysClockFreq+0x40>
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	f200 80a1 	bhi.w	80061e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_RCC_GetSysClockFreq+0x34>
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d003      	beq.n	80060b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80060ae:	e09b      	b.n	80061e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060b0:	4b53      	ldr	r3, [pc, #332]	; (8006200 <HAL_RCC_GetSysClockFreq+0x184>)
 80060b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80060b4:	e09b      	b.n	80061ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060b6:	4b53      	ldr	r3, [pc, #332]	; (8006204 <HAL_RCC_GetSysClockFreq+0x188>)
 80060b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060ba:	e098      	b.n	80061ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060bc:	4b4f      	ldr	r3, [pc, #316]	; (80061fc <HAL_RCC_GetSysClockFreq+0x180>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060c6:	4b4d      	ldr	r3, [pc, #308]	; (80061fc <HAL_RCC_GetSysClockFreq+0x180>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d028      	beq.n	8006124 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060d2:	4b4a      	ldr	r3, [pc, #296]	; (80061fc <HAL_RCC_GetSysClockFreq+0x180>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	099b      	lsrs	r3, r3, #6
 80060d8:	2200      	movs	r2, #0
 80060da:	623b      	str	r3, [r7, #32]
 80060dc:	627a      	str	r2, [r7, #36]	; 0x24
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80060e4:	2100      	movs	r1, #0
 80060e6:	4b47      	ldr	r3, [pc, #284]	; (8006204 <HAL_RCC_GetSysClockFreq+0x188>)
 80060e8:	fb03 f201 	mul.w	r2, r3, r1
 80060ec:	2300      	movs	r3, #0
 80060ee:	fb00 f303 	mul.w	r3, r0, r3
 80060f2:	4413      	add	r3, r2
 80060f4:	4a43      	ldr	r2, [pc, #268]	; (8006204 <HAL_RCC_GetSysClockFreq+0x188>)
 80060f6:	fba0 1202 	umull	r1, r2, r0, r2
 80060fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060fc:	460a      	mov	r2, r1
 80060fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8006100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006102:	4413      	add	r3, r2
 8006104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006108:	2200      	movs	r2, #0
 800610a:	61bb      	str	r3, [r7, #24]
 800610c:	61fa      	str	r2, [r7, #28]
 800610e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006112:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006116:	f7fa fd7f 	bl	8000c18 <__aeabi_uldivmod>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4613      	mov	r3, r2
 8006120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006122:	e053      	b.n	80061cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006124:	4b35      	ldr	r3, [pc, #212]	; (80061fc <HAL_RCC_GetSysClockFreq+0x180>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	099b      	lsrs	r3, r3, #6
 800612a:	2200      	movs	r2, #0
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	617a      	str	r2, [r7, #20]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006136:	f04f 0b00 	mov.w	fp, #0
 800613a:	4652      	mov	r2, sl
 800613c:	465b      	mov	r3, fp
 800613e:	f04f 0000 	mov.w	r0, #0
 8006142:	f04f 0100 	mov.w	r1, #0
 8006146:	0159      	lsls	r1, r3, #5
 8006148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800614c:	0150      	lsls	r0, r2, #5
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	ebb2 080a 	subs.w	r8, r2, sl
 8006156:	eb63 090b 	sbc.w	r9, r3, fp
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	f04f 0300 	mov.w	r3, #0
 8006162:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006166:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800616a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800616e:	ebb2 0408 	subs.w	r4, r2, r8
 8006172:	eb63 0509 	sbc.w	r5, r3, r9
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	00eb      	lsls	r3, r5, #3
 8006180:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006184:	00e2      	lsls	r2, r4, #3
 8006186:	4614      	mov	r4, r2
 8006188:	461d      	mov	r5, r3
 800618a:	eb14 030a 	adds.w	r3, r4, sl
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	eb45 030b 	adc.w	r3, r5, fp
 8006194:	607b      	str	r3, [r7, #4]
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061a2:	4629      	mov	r1, r5
 80061a4:	028b      	lsls	r3, r1, #10
 80061a6:	4621      	mov	r1, r4
 80061a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061ac:	4621      	mov	r1, r4
 80061ae:	028a      	lsls	r2, r1, #10
 80061b0:	4610      	mov	r0, r2
 80061b2:	4619      	mov	r1, r3
 80061b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b6:	2200      	movs	r2, #0
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	60fa      	str	r2, [r7, #12]
 80061bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061c0:	f7fa fd2a 	bl	8000c18 <__aeabi_uldivmod>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4613      	mov	r3, r2
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061cc:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <HAL_RCC_GetSysClockFreq+0x180>)
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	0c1b      	lsrs	r3, r3, #16
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	3301      	adds	r3, #1
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80061dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061e6:	e002      	b.n	80061ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061e8:	4b05      	ldr	r3, [pc, #20]	; (8006200 <HAL_RCC_GetSysClockFreq+0x184>)
 80061ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3740      	adds	r7, #64	; 0x40
 80061f4:	46bd      	mov	sp, r7
 80061f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061fa:	bf00      	nop
 80061fc:	40023800 	.word	0x40023800
 8006200:	00f42400 	.word	0x00f42400
 8006204:	017d7840 	.word	0x017d7840

08006208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006208:	b480      	push	{r7}
 800620a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800620c:	4b03      	ldr	r3, [pc, #12]	; (800621c <HAL_RCC_GetHCLKFreq+0x14>)
 800620e:	681b      	ldr	r3, [r3, #0]
}
 8006210:	4618      	mov	r0, r3
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	2000077c 	.word	0x2000077c

08006220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006224:	f7ff fff0 	bl	8006208 <HAL_RCC_GetHCLKFreq>
 8006228:	4602      	mov	r2, r0
 800622a:	4b05      	ldr	r3, [pc, #20]	; (8006240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	0a9b      	lsrs	r3, r3, #10
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	4903      	ldr	r1, [pc, #12]	; (8006244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006236:	5ccb      	ldrb	r3, [r1, r3]
 8006238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800623c:	4618      	mov	r0, r3
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40023800 	.word	0x40023800
 8006244:	0800cb50 	.word	0x0800cb50

08006248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800624c:	f7ff ffdc 	bl	8006208 <HAL_RCC_GetHCLKFreq>
 8006250:	4602      	mov	r2, r0
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	0b5b      	lsrs	r3, r3, #13
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	4903      	ldr	r1, [pc, #12]	; (800626c <HAL_RCC_GetPCLK2Freq+0x24>)
 800625e:	5ccb      	ldrb	r3, [r1, r3]
 8006260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006264:	4618      	mov	r0, r3
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40023800 	.word	0x40023800
 800626c:	0800cb50 	.word	0x0800cb50

08006270 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d105      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006294:	2b00      	cmp	r3, #0
 8006296:	d038      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006298:	4b68      	ldr	r3, [pc, #416]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800629e:	f7fe f865 	bl	800436c <HAL_GetTick>
 80062a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062a4:	e008      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062a6:	f7fe f861 	bl	800436c <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e0bd      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062b8:	4b61      	ldr	r3, [pc, #388]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1f0      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	019b      	lsls	r3, r3, #6
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	071b      	lsls	r3, r3, #28
 80062d6:	495a      	ldr	r1, [pc, #360]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062de:	4b57      	ldr	r3, [pc, #348]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062e4:	f7fe f842 	bl	800436c <HAL_GetTick>
 80062e8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062ea:	e008      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062ec:	f7fe f83e 	bl	800436c <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d901      	bls.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e09a      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062fe:	4b50      	ldr	r3, [pc, #320]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0f0      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 8083 	beq.w	800641e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	4b48      	ldr	r3, [pc, #288]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	4a47      	ldr	r2, [pc, #284]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006326:	6413      	str	r3, [r2, #64]	; 0x40
 8006328:	4b45      	ldr	r3, [pc, #276]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800632a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006334:	4b43      	ldr	r3, [pc, #268]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a42      	ldr	r2, [pc, #264]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800633a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800633e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006340:	f7fe f814 	bl	800436c <HAL_GetTick>
 8006344:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006346:	e008      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006348:	f7fe f810 	bl	800436c <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d901      	bls.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e06c      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800635a:	4b3a      	ldr	r3, [pc, #232]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0f0      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006366:	4b36      	ldr	r3, [pc, #216]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800636e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d02f      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	429a      	cmp	r2, r3
 8006382:	d028      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006384:	4b2e      	ldr	r3, [pc, #184]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800638e:	4b2e      	ldr	r3, [pc, #184]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006390:	2201      	movs	r2, #1
 8006392:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006394:	4b2c      	ldr	r3, [pc, #176]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800639a:	4a29      	ldr	r2, [pc, #164]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063a0:	4b27      	ldr	r3, [pc, #156]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d114      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80063ac:	f7fd ffde 	bl	800436c <HAL_GetTick>
 80063b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063b2:	e00a      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063b4:	f7fd ffda 	bl	800436c <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d901      	bls.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e034      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ca:	4b1d      	ldr	r3, [pc, #116]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0ee      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063e2:	d10d      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80063e4:	4b16      	ldr	r3, [pc, #88]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80063f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063f8:	4911      	ldr	r1, [pc, #68]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	608b      	str	r3, [r1, #8]
 80063fe:	e005      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006400:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	4a0e      	ldr	r2, [pc, #56]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006406:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800640a:	6093      	str	r3, [r2, #8]
 800640c:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800640e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006418:	4909      	ldr	r1, [pc, #36]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800641a:	4313      	orrs	r3, r2
 800641c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0308 	and.w	r3, r3, #8
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	7d1a      	ldrb	r2, [r3, #20]
 800642e:	4b07      	ldr	r3, [pc, #28]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006430:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	42470068 	.word	0x42470068
 8006440:	40023800 	.word	0x40023800
 8006444:	40007000 	.word	0x40007000
 8006448:	42470e40 	.word	0x42470e40
 800644c:	424711e0 	.word	0x424711e0

08006450 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e066      	b.n	8006534 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	7f5b      	ldrb	r3, [r3, #29]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d105      	bne.n	800647c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fc fcf6 	bl	8002e68 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	22ca      	movs	r2, #202	; 0xca
 8006488:	625a      	str	r2, [r3, #36]	; 0x24
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2253      	movs	r2, #83	; 0x53
 8006490:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fa45 	bl	8006922 <RTC_EnterInitMode>
 8006498:	4603      	mov	r3, r0
 800649a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d12c      	bne.n	80064fc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6812      	ldr	r2, [r2, #0]
 80064ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80064b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6899      	ldr	r1, [r3, #8]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	431a      	orrs	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	68d2      	ldr	r2, [r2, #12]
 80064dc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6919      	ldr	r1, [r3, #16]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	041a      	lsls	r2, r3, #16
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa4c 	bl	8006990 <RTC_ExitInitMode>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d113      	bne.n	800652a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006510:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	699a      	ldr	r2, [r3, #24]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	22ff      	movs	r2, #255	; 0xff
 8006530:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006532:	7bfb      	ldrb	r3, [r7, #15]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800653c:	b590      	push	{r4, r7, lr}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	7f1b      	ldrb	r3, [r3, #28]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_RTC_SetTime+0x1c>
 8006554:	2302      	movs	r3, #2
 8006556:	e087      	b.n	8006668 <HAL_RTC_SetTime+0x12c>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2201      	movs	r2, #1
 800655c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2202      	movs	r2, #2
 8006562:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d126      	bne.n	80065b8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2200      	movs	r2, #0
 800657c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fa29 	bl	80069da <RTC_ByteToBcd2>
 8006588:	4603      	mov	r3, r0
 800658a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	785b      	ldrb	r3, [r3, #1]
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fa22 	bl	80069da <RTC_ByteToBcd2>
 8006596:	4603      	mov	r3, r0
 8006598:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800659a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	789b      	ldrb	r3, [r3, #2]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fa1a 	bl	80069da <RTC_ByteToBcd2>
 80065a6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065a8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	78db      	ldrb	r3, [r3, #3]
 80065b0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]
 80065b6:	e018      	b.n	80065ea <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d102      	bne.n	80065cc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2200      	movs	r2, #0
 80065ca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	785b      	ldrb	r3, [r3, #1]
 80065d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80065d8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80065de:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	78db      	ldrb	r3, [r3, #3]
 80065e4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	22ca      	movs	r2, #202	; 0xca
 80065f0:	625a      	str	r2, [r3, #36]	; 0x24
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2253      	movs	r2, #83	; 0x53
 80065f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 f991 	bl	8006922 <RTC_EnterInitMode>
 8006600:	4603      	mov	r3, r0
 8006602:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006604:	7cfb      	ldrb	r3, [r7, #19]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d120      	bne.n	800664c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006614:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006618:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006628:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6899      	ldr	r1, [r3, #8]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	431a      	orrs	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 f9a4 	bl	8006990 <RTC_ExitInitMode>
 8006648:	4603      	mov	r3, r0
 800664a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800664c:	7cfb      	ldrb	r3, [r7, #19]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d102      	bne.n	8006658 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	22ff      	movs	r2, #255	; 0xff
 800665e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	771a      	strb	r2, [r3, #28]

  return status;
 8006666:	7cfb      	ldrb	r3, [r7, #19]
}
 8006668:	4618      	mov	r0, r3
 800666a:	371c      	adds	r7, #28
 800666c:	46bd      	mov	sp, r7
 800666e:	bd90      	pop	{r4, r7, pc}

08006670 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80066a2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80066a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	0c1b      	lsrs	r3, r3, #16
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	0a1b      	lsrs	r3, r3, #8
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	0d9b      	lsrs	r3, r3, #22
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d11a      	bne.n	8006722 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 f98f 	bl	8006a14 <RTC_Bcd2ToByte>
 80066f6:	4603      	mov	r3, r0
 80066f8:	461a      	mov	r2, r3
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	785b      	ldrb	r3, [r3, #1]
 8006702:	4618      	mov	r0, r3
 8006704:	f000 f986 	bl	8006a14 <RTC_Bcd2ToByte>
 8006708:	4603      	mov	r3, r0
 800670a:	461a      	mov	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	789b      	ldrb	r3, [r3, #2]
 8006714:	4618      	mov	r0, r3
 8006716:	f000 f97d 	bl	8006a14 <RTC_Bcd2ToByte>
 800671a:	4603      	mov	r3, r0
 800671c:	461a      	mov	r2, r3
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800672c:	b590      	push	{r4, r7, lr}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	7f1b      	ldrb	r3, [r3, #28]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_RTC_SetDate+0x1c>
 8006744:	2302      	movs	r3, #2
 8006746:	e071      	b.n	800682c <HAL_RTC_SetDate+0x100>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2201      	movs	r2, #1
 800674c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2202      	movs	r2, #2
 8006752:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10e      	bne.n	8006778 <HAL_RTC_SetDate+0x4c>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	785b      	ldrb	r3, [r3, #1]
 800675e:	f003 0310 	and.w	r3, r3, #16
 8006762:	2b00      	cmp	r3, #0
 8006764:	d008      	beq.n	8006778 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	785b      	ldrb	r3, [r3, #1]
 800676a:	f023 0310 	bic.w	r3, r3, #16
 800676e:	b2db      	uxtb	r3, r3
 8006770:	330a      	adds	r3, #10
 8006772:	b2da      	uxtb	r2, r3
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d11c      	bne.n	80067b8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	78db      	ldrb	r3, [r3, #3]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 f929 	bl	80069da <RTC_ByteToBcd2>
 8006788:	4603      	mov	r3, r0
 800678a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	785b      	ldrb	r3, [r3, #1]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 f922 	bl	80069da <RTC_ByteToBcd2>
 8006796:	4603      	mov	r3, r0
 8006798:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800679a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	789b      	ldrb	r3, [r3, #2]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 f91a 	bl	80069da <RTC_ByteToBcd2>
 80067a6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80067a8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80067b2:	4313      	orrs	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	e00e      	b.n	80067d6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	78db      	ldrb	r3, [r3, #3]
 80067bc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80067c4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80067ca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80067d2:	4313      	orrs	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	22ca      	movs	r2, #202	; 0xca
 80067dc:	625a      	str	r2, [r3, #36]	; 0x24
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2253      	movs	r2, #83	; 0x53
 80067e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f89b 	bl	8006922 <RTC_EnterInitMode>
 80067ec:	4603      	mov	r3, r0
 80067ee:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80067f0:	7cfb      	ldrb	r3, [r7, #19]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10c      	bne.n	8006810 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006800:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006804:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 f8c2 	bl	8006990 <RTC_ExitInitMode>
 800680c:	4603      	mov	r3, r0
 800680e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006810:	7cfb      	ldrb	r3, [r7, #19]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d102      	bne.n	800681c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	22ff      	movs	r2, #255	; 0xff
 8006822:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	771a      	strb	r2, [r3, #28]

  return status;
 800682a:	7cfb      	ldrb	r3, [r7, #19]
}
 800682c:	4618      	mov	r0, r3
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	bd90      	pop	{r4, r7, pc}

08006834 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800684e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006852:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	0c1b      	lsrs	r3, r3, #16
 8006858:	b2da      	uxtb	r2, r3
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	0a1b      	lsrs	r3, r3, #8
 8006862:	b2db      	uxtb	r3, r3
 8006864:	f003 031f 	and.w	r3, r3, #31
 8006868:	b2da      	uxtb	r2, r3
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006876:	b2da      	uxtb	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	0b5b      	lsrs	r3, r3, #13
 8006880:	b2db      	uxtb	r3, r3
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	b2da      	uxtb	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d11a      	bne.n	80068c8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	78db      	ldrb	r3, [r3, #3]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 f8bc 	bl	8006a14 <RTC_Bcd2ToByte>
 800689c:	4603      	mov	r3, r0
 800689e:	461a      	mov	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	785b      	ldrb	r3, [r3, #1]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 f8b3 	bl	8006a14 <RTC_Bcd2ToByte>
 80068ae:	4603      	mov	r3, r0
 80068b0:	461a      	mov	r2, r3
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	789b      	ldrb	r3, [r3, #2]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 f8aa 	bl	8006a14 <RTC_Bcd2ToByte>
 80068c0:	4603      	mov	r3, r0
 80068c2:	461a      	mov	r2, r3
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068ec:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068ee:	f7fd fd3d 	bl	800436c <HAL_GetTick>
 80068f2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80068f4:	e009      	b.n	800690a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068f6:	f7fd fd39 	bl	800436c <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006904:	d901      	bls.n	800690a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e007      	b.n	800691a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0320 	and.w	r3, r3, #32
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0ee      	beq.n	80068f6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693c:	2b00      	cmp	r3, #0
 800693e:	d122      	bne.n	8006986 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800694e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006950:	f7fd fd0c 	bl	800436c <HAL_GetTick>
 8006954:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006956:	e00c      	b.n	8006972 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006958:	f7fd fd08 	bl	800436c <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006966:	d904      	bls.n	8006972 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2204      	movs	r2, #4
 800696c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <RTC_EnterInitMode+0x64>
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d1e8      	bne.n	8006958 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006986:	7bfb      	ldrb	r3, [r7, #15]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069aa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 0320 	and.w	r3, r3, #32
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10a      	bne.n	80069d0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff ff89 	bl	80068d2 <HAL_RTC_WaitForSynchro>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d004      	beq.n	80069d0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2204      	movs	r2, #4
 80069ca:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80069da:	b480      	push	{r7}
 80069dc:	b085      	sub	sp, #20
 80069de:	af00      	add	r7, sp, #0
 80069e0:	4603      	mov	r3, r0
 80069e2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80069e8:	e005      	b.n	80069f6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	3301      	adds	r3, #1
 80069ee:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80069f0:	79fb      	ldrb	r3, [r7, #7]
 80069f2:	3b0a      	subs	r3, #10
 80069f4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80069f6:	79fb      	ldrb	r3, [r7, #7]
 80069f8:	2b09      	cmp	r3, #9
 80069fa:	d8f6      	bhi.n	80069ea <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	b2db      	uxtb	r3, r3
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	091b      	lsrs	r3, r3, #4
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	461a      	mov	r2, r3
 8006a2a:	0092      	lsls	r2, r2, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006a32:	79fb      	ldrb	r3, [r7, #7]
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	b2db      	uxtb	r3, r3
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e07b      	b.n	8006b56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d108      	bne.n	8006a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a6e:	d009      	beq.n	8006a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	61da      	str	r2, [r3, #28]
 8006a76:	e005      	b.n	8006a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fc fa0e 	bl	8002ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006acc:	431a      	orrs	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b08:	ea42 0103 	orr.w	r1, r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	0c1b      	lsrs	r3, r3, #16
 8006b22:	f003 0104 	and.w	r1, r3, #4
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	f003 0210 	and.w	r2, r3, #16
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b088      	sub	sp, #32
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	603b      	str	r3, [r7, #0]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d101      	bne.n	8006b80 <HAL_SPI_Transmit+0x22>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e126      	b.n	8006dce <HAL_SPI_Transmit+0x270>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b88:	f7fd fbf0 	bl	800436c <HAL_GetTick>
 8006b8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b8e:	88fb      	ldrh	r3, [r7, #6]
 8006b90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d002      	beq.n	8006ba4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ba2:	e10b      	b.n	8006dbc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <HAL_SPI_Transmit+0x52>
 8006baa:	88fb      	ldrh	r3, [r7, #6]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d102      	bne.n	8006bb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bb4:	e102      	b.n	8006dbc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2203      	movs	r2, #3
 8006bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	88fa      	ldrh	r2, [r7, #6]
 8006bce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	88fa      	ldrh	r2, [r7, #6]
 8006bd4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfc:	d10f      	bne.n	8006c1e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c28:	2b40      	cmp	r3, #64	; 0x40
 8006c2a:	d007      	beq.n	8006c3c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c44:	d14b      	bne.n	8006cde <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <HAL_SPI_Transmit+0xf6>
 8006c4e:	8afb      	ldrh	r3, [r7, #22]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d13e      	bne.n	8006cd2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	881a      	ldrh	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	1c9a      	adds	r2, r3, #2
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c78:	e02b      	b.n	8006cd2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d112      	bne.n	8006cae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	881a      	ldrh	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c98:	1c9a      	adds	r2, r3, #2
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	86da      	strh	r2, [r3, #54]	; 0x36
 8006cac:	e011      	b.n	8006cd2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cae:	f7fd fb5d 	bl	800436c <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d803      	bhi.n	8006cc6 <HAL_SPI_Transmit+0x168>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc4:	d102      	bne.n	8006ccc <HAL_SPI_Transmit+0x16e>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d102      	bne.n	8006cd2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cd0:	e074      	b.n	8006dbc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1ce      	bne.n	8006c7a <HAL_SPI_Transmit+0x11c>
 8006cdc:	e04c      	b.n	8006d78 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <HAL_SPI_Transmit+0x18e>
 8006ce6:	8afb      	ldrh	r3, [r7, #22]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d140      	bne.n	8006d6e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	7812      	ldrb	r2, [r2, #0]
 8006cf8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d12:	e02c      	b.n	8006d6e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d113      	bne.n	8006d4a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	330c      	adds	r3, #12
 8006d2c:	7812      	ldrb	r2, [r2, #0]
 8006d2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d48:	e011      	b.n	8006d6e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d4a:	f7fd fb0f 	bl	800436c <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d803      	bhi.n	8006d62 <HAL_SPI_Transmit+0x204>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d102      	bne.n	8006d68 <HAL_SPI_Transmit+0x20a>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d6c:	e026      	b.n	8006dbc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1cd      	bne.n	8006d14 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 fa55 	bl	800722c <SPI_EndRxTxTransaction>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10a      	bne.n	8006dac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d96:	2300      	movs	r3, #0
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	613b      	str	r3, [r7, #16]
 8006daa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	77fb      	strb	r3, [r7, #31]
 8006db8:	e000      	b.n	8006dbc <HAL_SPI_Transmit+0x25e>
  }

error:
 8006dba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006dcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3720      	adds	r7, #32
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b08c      	sub	sp, #48	; 0x30
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	607a      	str	r2, [r7, #4]
 8006de2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006de4:	2301      	movs	r3, #1
 8006de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <HAL_SPI_TransmitReceive+0x26>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e18a      	b.n	8007112 <HAL_SPI_TransmitReceive+0x33c>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e04:	f7fd fab2 	bl	800436c <HAL_GetTick>
 8006e08:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006e1a:	887b      	ldrh	r3, [r7, #2]
 8006e1c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d00f      	beq.n	8006e46 <HAL_SPI_TransmitReceive+0x70>
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e2c:	d107      	bne.n	8006e3e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d103      	bne.n	8006e3e <HAL_SPI_TransmitReceive+0x68>
 8006e36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d003      	beq.n	8006e46 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006e3e:	2302      	movs	r3, #2
 8006e40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e44:	e15b      	b.n	80070fe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <HAL_SPI_TransmitReceive+0x82>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <HAL_SPI_TransmitReceive+0x82>
 8006e52:	887b      	ldrh	r3, [r7, #2]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d103      	bne.n	8006e60 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e5e:	e14e      	b.n	80070fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d003      	beq.n	8006e74 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2205      	movs	r2, #5
 8006e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	887a      	ldrh	r2, [r7, #2]
 8006e84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	887a      	ldrh	r2, [r7, #2]
 8006e8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	887a      	ldrh	r2, [r7, #2]
 8006e96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	887a      	ldrh	r2, [r7, #2]
 8006e9c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb4:	2b40      	cmp	r3, #64	; 0x40
 8006eb6:	d007      	beq.n	8006ec8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ec6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ed0:	d178      	bne.n	8006fc4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <HAL_SPI_TransmitReceive+0x10a>
 8006eda:	8b7b      	ldrh	r3, [r7, #26]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d166      	bne.n	8006fae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee4:	881a      	ldrh	r2, [r3, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef0:	1c9a      	adds	r2, r3, #2
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f04:	e053      	b.n	8006fae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d11b      	bne.n	8006f4c <HAL_SPI_TransmitReceive+0x176>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d016      	beq.n	8006f4c <HAL_SPI_TransmitReceive+0x176>
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d113      	bne.n	8006f4c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f28:	881a      	ldrh	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	1c9a      	adds	r2, r3, #2
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	3b01      	subs	r3, #1
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d119      	bne.n	8006f8e <HAL_SPI_TransmitReceive+0x1b8>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d014      	beq.n	8006f8e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6e:	b292      	uxth	r2, r2
 8006f70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f76:	1c9a      	adds	r2, r3, #2
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f8e:	f7fd f9ed 	bl	800436c <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d807      	bhi.n	8006fae <HAL_SPI_TransmitReceive+0x1d8>
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d003      	beq.n	8006fae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006fac:	e0a7      	b.n	80070fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1a6      	bne.n	8006f06 <HAL_SPI_TransmitReceive+0x130>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1a1      	bne.n	8006f06 <HAL_SPI_TransmitReceive+0x130>
 8006fc2:	e07c      	b.n	80070be <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <HAL_SPI_TransmitReceive+0x1fc>
 8006fcc:	8b7b      	ldrh	r3, [r7, #26]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d16b      	bne.n	80070aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	330c      	adds	r3, #12
 8006fdc:	7812      	ldrb	r2, [r2, #0]
 8006fde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ff8:	e057      	b.n	80070aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b02      	cmp	r3, #2
 8007006:	d11c      	bne.n	8007042 <HAL_SPI_TransmitReceive+0x26c>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d017      	beq.n	8007042 <HAL_SPI_TransmitReceive+0x26c>
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	2b01      	cmp	r3, #1
 8007016:	d114      	bne.n	8007042 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	330c      	adds	r3, #12
 8007022:	7812      	ldrb	r2, [r2, #0]
 8007024:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007034:	b29b      	uxth	r3, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	b29a      	uxth	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b01      	cmp	r3, #1
 800704e:	d119      	bne.n	8007084 <HAL_SPI_TransmitReceive+0x2ae>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007054:	b29b      	uxth	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d014      	beq.n	8007084 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007076:	b29b      	uxth	r3, r3
 8007078:	3b01      	subs	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007080:	2301      	movs	r3, #1
 8007082:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007084:	f7fd f972 	bl	800436c <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007090:	429a      	cmp	r2, r3
 8007092:	d803      	bhi.n	800709c <HAL_SPI_TransmitReceive+0x2c6>
 8007094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709a:	d102      	bne.n	80070a2 <HAL_SPI_TransmitReceive+0x2cc>
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d103      	bne.n	80070aa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80070a8:	e029      	b.n	80070fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1a2      	bne.n	8006ffa <HAL_SPI_TransmitReceive+0x224>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d19d      	bne.n	8006ffa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f8b2 	bl	800722c <SPI_EndRxTxTransaction>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d006      	beq.n	80070dc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2220      	movs	r2, #32
 80070d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80070da:	e010      	b.n	80070fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10b      	bne.n	80070fc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070e4:	2300      	movs	r3, #0
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	e000      	b.n	80070fe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80070fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800710e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007112:	4618      	mov	r0, r3
 8007114:	3730      	adds	r7, #48	; 0x30
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
	...

0800711c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	4613      	mov	r3, r2
 800712a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800712c:	f7fd f91e 	bl	800436c <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	1a9b      	subs	r3, r3, r2
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	4413      	add	r3, r2
 800713a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800713c:	f7fd f916 	bl	800436c <HAL_GetTick>
 8007140:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007142:	4b39      	ldr	r3, [pc, #228]	; (8007228 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	015b      	lsls	r3, r3, #5
 8007148:	0d1b      	lsrs	r3, r3, #20
 800714a:	69fa      	ldr	r2, [r7, #28]
 800714c:	fb02 f303 	mul.w	r3, r2, r3
 8007150:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007152:	e054      	b.n	80071fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715a:	d050      	beq.n	80071fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800715c:	f7fd f906 	bl	800436c <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	69fa      	ldr	r2, [r7, #28]
 8007168:	429a      	cmp	r2, r3
 800716a:	d902      	bls.n	8007172 <SPI_WaitFlagStateUntilTimeout+0x56>
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d13d      	bne.n	80071ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007180:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800718a:	d111      	bne.n	80071b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007194:	d004      	beq.n	80071a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800719e:	d107      	bne.n	80071b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071b8:	d10f      	bne.n	80071da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e017      	b.n	800721e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	4013      	ands	r3, r2
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	429a      	cmp	r2, r3
 800720c:	bf0c      	ite	eq
 800720e:	2301      	moveq	r3, #1
 8007210:	2300      	movne	r3, #0
 8007212:	b2db      	uxtb	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	429a      	cmp	r2, r3
 800721a:	d19b      	bne.n	8007154 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3720      	adds	r7, #32
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	2000077c 	.word	0x2000077c

0800722c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af02      	add	r7, sp, #8
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007238:	4b1b      	ldr	r3, [pc, #108]	; (80072a8 <SPI_EndRxTxTransaction+0x7c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a1b      	ldr	r2, [pc, #108]	; (80072ac <SPI_EndRxTxTransaction+0x80>)
 800723e:	fba2 2303 	umull	r2, r3, r2, r3
 8007242:	0d5b      	lsrs	r3, r3, #21
 8007244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007248:	fb02 f303 	mul.w	r3, r2, r3
 800724c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007256:	d112      	bne.n	800727e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2200      	movs	r2, #0
 8007260:	2180      	movs	r1, #128	; 0x80
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f7ff ff5a 	bl	800711c <SPI_WaitFlagStateUntilTimeout>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d016      	beq.n	800729c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007272:	f043 0220 	orr.w	r2, r3, #32
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e00f      	b.n	800729e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00a      	beq.n	800729a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	3b01      	subs	r3, #1
 8007288:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007294:	2b80      	cmp	r3, #128	; 0x80
 8007296:	d0f2      	beq.n	800727e <SPI_EndRxTxTransaction+0x52>
 8007298:	e000      	b.n	800729c <SPI_EndRxTxTransaction+0x70>
        break;
 800729a:	bf00      	nop
  }

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	2000077c 	.word	0x2000077c
 80072ac:	165e9f81 	.word	0x165e9f81

080072b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e041      	b.n	8007346 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d106      	bne.n	80072dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7fb fe92 	bl	8003000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3304      	adds	r3, #4
 80072ec:	4619      	mov	r1, r3
 80072ee:	4610      	mov	r0, r2
 80072f0:	f000 fe52 	bl	8007f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
	...

08007350 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b01      	cmp	r3, #1
 8007362:	d001      	beq.n	8007368 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e03c      	b.n	80073e2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1e      	ldr	r2, [pc, #120]	; (80073f0 <HAL_TIM_Base_Start+0xa0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d018      	beq.n	80073ac <HAL_TIM_Base_Start+0x5c>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007382:	d013      	beq.n	80073ac <HAL_TIM_Base_Start+0x5c>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a1a      	ldr	r2, [pc, #104]	; (80073f4 <HAL_TIM_Base_Start+0xa4>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d00e      	beq.n	80073ac <HAL_TIM_Base_Start+0x5c>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a19      	ldr	r2, [pc, #100]	; (80073f8 <HAL_TIM_Base_Start+0xa8>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d009      	beq.n	80073ac <HAL_TIM_Base_Start+0x5c>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a17      	ldr	r2, [pc, #92]	; (80073fc <HAL_TIM_Base_Start+0xac>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d004      	beq.n	80073ac <HAL_TIM_Base_Start+0x5c>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a16      	ldr	r2, [pc, #88]	; (8007400 <HAL_TIM_Base_Start+0xb0>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d111      	bne.n	80073d0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b06      	cmp	r3, #6
 80073bc:	d010      	beq.n	80073e0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f042 0201 	orr.w	r2, r2, #1
 80073cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ce:	e007      	b.n	80073e0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0201 	orr.w	r2, r2, #1
 80073de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	40010000 	.word	0x40010000
 80073f4:	40000400 	.word	0x40000400
 80073f8:	40000800 	.word	0x40000800
 80073fc:	40000c00 	.word	0x40000c00
 8007400:	40014000 	.word	0x40014000

08007404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b01      	cmp	r3, #1
 8007416:	d001      	beq.n	800741c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e044      	b.n	80074a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68da      	ldr	r2, [r3, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a1e      	ldr	r2, [pc, #120]	; (80074b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d018      	beq.n	8007470 <HAL_TIM_Base_Start_IT+0x6c>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007446:	d013      	beq.n	8007470 <HAL_TIM_Base_Start_IT+0x6c>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a1a      	ldr	r2, [pc, #104]	; (80074b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00e      	beq.n	8007470 <HAL_TIM_Base_Start_IT+0x6c>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a19      	ldr	r2, [pc, #100]	; (80074bc <HAL_TIM_Base_Start_IT+0xb8>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d009      	beq.n	8007470 <HAL_TIM_Base_Start_IT+0x6c>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a17      	ldr	r2, [pc, #92]	; (80074c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d004      	beq.n	8007470 <HAL_TIM_Base_Start_IT+0x6c>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a16      	ldr	r2, [pc, #88]	; (80074c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d111      	bne.n	8007494 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b06      	cmp	r3, #6
 8007480:	d010      	beq.n	80074a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f042 0201 	orr.w	r2, r2, #1
 8007490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007492:	e007      	b.n	80074a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0201 	orr.w	r2, r2, #1
 80074a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	40010000 	.word	0x40010000
 80074b8:	40000400 	.word	0x40000400
 80074bc:	40000800 	.word	0x40000800
 80074c0:	40000c00 	.word	0x40000c00
 80074c4:	40014000 	.word	0x40014000

080074c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 0201 	bic.w	r2, r2, #1
 80074de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6a1a      	ldr	r2, [r3, #32]
 80074e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80074ea:	4013      	ands	r3, r2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10f      	bne.n	8007510 <HAL_TIM_Base_Stop_IT+0x48>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6a1a      	ldr	r2, [r3, #32]
 80074f6:	f240 4344 	movw	r3, #1092	; 0x444
 80074fa:	4013      	ands	r3, r2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d107      	bne.n	8007510 <HAL_TIM_Base_Stop_IT+0x48>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0201 	bic.w	r2, r2, #1
 800750e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b082      	sub	sp, #8
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e041      	b.n	80075bc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d106      	bne.n	8007552 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f839 	bl	80075c4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2202      	movs	r2, #2
 8007556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	3304      	adds	r3, #4
 8007562:	4619      	mov	r1, r3
 8007564:	4610      	mov	r0, r2
 8007566:	f000 fd17 	bl	8007f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d109      	bne.n	8007600 <HAL_TIM_OC_Start_IT+0x28>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	bf14      	ite	ne
 80075f8:	2301      	movne	r3, #1
 80075fa:	2300      	moveq	r3, #0
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	e022      	b.n	8007646 <HAL_TIM_OC_Start_IT+0x6e>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b04      	cmp	r3, #4
 8007604:	d109      	bne.n	800761a <HAL_TIM_OC_Start_IT+0x42>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b01      	cmp	r3, #1
 8007610:	bf14      	ite	ne
 8007612:	2301      	movne	r3, #1
 8007614:	2300      	moveq	r3, #0
 8007616:	b2db      	uxtb	r3, r3
 8007618:	e015      	b.n	8007646 <HAL_TIM_OC_Start_IT+0x6e>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b08      	cmp	r3, #8
 800761e:	d109      	bne.n	8007634 <HAL_TIM_OC_Start_IT+0x5c>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b01      	cmp	r3, #1
 800762a:	bf14      	ite	ne
 800762c:	2301      	movne	r3, #1
 800762e:	2300      	moveq	r3, #0
 8007630:	b2db      	uxtb	r3, r3
 8007632:	e008      	b.n	8007646 <HAL_TIM_OC_Start_IT+0x6e>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b01      	cmp	r3, #1
 800763e:	bf14      	ite	ne
 8007640:	2301      	movne	r3, #1
 8007642:	2300      	moveq	r3, #0
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e0b3      	b.n	80077b6 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d104      	bne.n	800765e <HAL_TIM_OC_Start_IT+0x86>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800765c:	e013      	b.n	8007686 <HAL_TIM_OC_Start_IT+0xae>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b04      	cmp	r3, #4
 8007662:	d104      	bne.n	800766e <HAL_TIM_OC_Start_IT+0x96>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2202      	movs	r2, #2
 8007668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800766c:	e00b      	b.n	8007686 <HAL_TIM_OC_Start_IT+0xae>
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b08      	cmp	r3, #8
 8007672:	d104      	bne.n	800767e <HAL_TIM_OC_Start_IT+0xa6>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2202      	movs	r2, #2
 8007678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800767c:	e003      	b.n	8007686 <HAL_TIM_OC_Start_IT+0xae>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2202      	movs	r2, #2
 8007682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b0c      	cmp	r3, #12
 800768a:	d841      	bhi.n	8007710 <HAL_TIM_OC_Start_IT+0x138>
 800768c:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <HAL_TIM_OC_Start_IT+0xbc>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076c9 	.word	0x080076c9
 8007698:	08007711 	.word	0x08007711
 800769c:	08007711 	.word	0x08007711
 80076a0:	08007711 	.word	0x08007711
 80076a4:	080076db 	.word	0x080076db
 80076a8:	08007711 	.word	0x08007711
 80076ac:	08007711 	.word	0x08007711
 80076b0:	08007711 	.word	0x08007711
 80076b4:	080076ed 	.word	0x080076ed
 80076b8:	08007711 	.word	0x08007711
 80076bc:	08007711 	.word	0x08007711
 80076c0:	08007711 	.word	0x08007711
 80076c4:	080076ff 	.word	0x080076ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f042 0202 	orr.w	r2, r2, #2
 80076d6:	60da      	str	r2, [r3, #12]
      break;
 80076d8:	e01d      	b.n	8007716 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0204 	orr.w	r2, r2, #4
 80076e8:	60da      	str	r2, [r3, #12]
      break;
 80076ea:	e014      	b.n	8007716 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0208 	orr.w	r2, r2, #8
 80076fa:	60da      	str	r2, [r3, #12]
      break;
 80076fc:	e00b      	b.n	8007716 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68da      	ldr	r2, [r3, #12]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f042 0210 	orr.w	r2, r2, #16
 800770c:	60da      	str	r2, [r3, #12]
      break;
 800770e:	e002      	b.n	8007716 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
      break;
 8007714:	bf00      	nop
  }

  if (status == HAL_OK)
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d14b      	bne.n	80077b4 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2201      	movs	r2, #1
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	4618      	mov	r0, r3
 8007726:	f000 fedd 	bl	80084e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a24      	ldr	r2, [pc, #144]	; (80077c0 <HAL_TIM_OC_Start_IT+0x1e8>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d107      	bne.n	8007744 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007742:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a1d      	ldr	r2, [pc, #116]	; (80077c0 <HAL_TIM_OC_Start_IT+0x1e8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d018      	beq.n	8007780 <HAL_TIM_OC_Start_IT+0x1a8>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007756:	d013      	beq.n	8007780 <HAL_TIM_OC_Start_IT+0x1a8>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a19      	ldr	r2, [pc, #100]	; (80077c4 <HAL_TIM_OC_Start_IT+0x1ec>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00e      	beq.n	8007780 <HAL_TIM_OC_Start_IT+0x1a8>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a18      	ldr	r2, [pc, #96]	; (80077c8 <HAL_TIM_OC_Start_IT+0x1f0>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d009      	beq.n	8007780 <HAL_TIM_OC_Start_IT+0x1a8>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a16      	ldr	r2, [pc, #88]	; (80077cc <HAL_TIM_OC_Start_IT+0x1f4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d004      	beq.n	8007780 <HAL_TIM_OC_Start_IT+0x1a8>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a15      	ldr	r2, [pc, #84]	; (80077d0 <HAL_TIM_OC_Start_IT+0x1f8>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d111      	bne.n	80077a4 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2b06      	cmp	r3, #6
 8007790:	d010      	beq.n	80077b4 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f042 0201 	orr.w	r2, r2, #1
 80077a0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a2:	e007      	b.n	80077b4 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0201 	orr.w	r2, r2, #1
 80077b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40010000 	.word	0x40010000
 80077c4:	40000400 	.word	0x40000400
 80077c8:	40000800 	.word	0x40000800
 80077cc:	40000c00 	.word	0x40000c00
 80077d0:	40014000 	.word	0x40014000

080077d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e097      	b.n	8007918 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d106      	bne.n	8007802 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7fb fba7 	bl	8002f50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2202      	movs	r2, #2
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	6812      	ldr	r2, [r2, #0]
 8007814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007818:	f023 0307 	bic.w	r3, r3, #7
 800781c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	3304      	adds	r3, #4
 8007826:	4619      	mov	r1, r3
 8007828:	4610      	mov	r0, r2
 800782a:	f000 fbb5 	bl	8007f98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6a1b      	ldr	r3, [r3, #32]
 8007844:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	4313      	orrs	r3, r2
 800784e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	4313      	orrs	r3, r2
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4313      	orrs	r3, r2
 800786c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007874:	f023 030c 	bic.w	r3, r3, #12
 8007878:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007880:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	68da      	ldr	r2, [r3, #12]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	021b      	lsls	r3, r3, #8
 8007890:	4313      	orrs	r3, r2
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	4313      	orrs	r3, r2
 8007896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	011a      	lsls	r2, r3, #4
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	031b      	lsls	r3, r3, #12
 80078a4:	4313      	orrs	r3, r2
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80078b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80078ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	4313      	orrs	r3, r2
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3718      	adds	r7, #24
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007930:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007938:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007940:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007948:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d110      	bne.n	8007972 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d102      	bne.n	800795c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007956:	7b7b      	ldrb	r3, [r7, #13]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d001      	beq.n	8007960 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e089      	b.n	8007a74 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007970:	e031      	b.n	80079d6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b04      	cmp	r3, #4
 8007976:	d110      	bne.n	800799a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d102      	bne.n	8007984 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800797e:	7b3b      	ldrb	r3, [r7, #12]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d001      	beq.n	8007988 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e075      	b.n	8007a74 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007998:	e01d      	b.n	80079d6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d108      	bne.n	80079b2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d105      	bne.n	80079b2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079a6:	7b7b      	ldrb	r3, [r7, #13]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d102      	bne.n	80079b2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80079ac:	7b3b      	ldrb	r3, [r7, #12]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d001      	beq.n	80079b6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e05e      	b.n	8007a74 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2202      	movs	r2, #2
 80079ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2202      	movs	r2, #2
 80079c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2202      	movs	r2, #2
 80079ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2202      	movs	r2, #2
 80079d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d010      	beq.n	8007a04 <HAL_TIM_Encoder_Start_IT+0xe4>
 80079e2:	e01f      	b.n	8007a24 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2201      	movs	r2, #1
 80079ea:	2100      	movs	r1, #0
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 fd79 	bl	80084e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68da      	ldr	r2, [r3, #12]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f042 0202 	orr.w	r2, r2, #2
 8007a00:	60da      	str	r2, [r3, #12]
      break;
 8007a02:	e02e      	b.n	8007a62 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	2104      	movs	r1, #4
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fd69 	bl	80084e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68da      	ldr	r2, [r3, #12]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f042 0204 	orr.w	r2, r2, #4
 8007a20:	60da      	str	r2, [r3, #12]
      break;
 8007a22:	e01e      	b.n	8007a62 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fd59 	bl	80084e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2201      	movs	r2, #1
 8007a38:	2104      	movs	r1, #4
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fd52 	bl	80084e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f042 0202 	orr.w	r2, r2, #2
 8007a4e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0204 	orr.w	r2, r2, #4
 8007a5e:	60da      	str	r2, [r3, #12]
      break;
 8007a60:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f042 0201 	orr.w	r2, r2, #1
 8007a70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f003 0302 	and.w	r3, r3, #2
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d122      	bne.n	8007ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f003 0302 	and.w	r3, r3, #2
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d11b      	bne.n	8007ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f06f 0202 	mvn.w	r2, #2
 8007aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fa4c 	bl	8007f5c <HAL_TIM_IC_CaptureCallback>
 8007ac4:	e005      	b.n	8007ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7f9 fdc0 	bl	800164c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fa4f 	bl	8007f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	f003 0304 	and.w	r3, r3, #4
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	d122      	bne.n	8007b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	f003 0304 	and.w	r3, r3, #4
 8007af0:	2b04      	cmp	r3, #4
 8007af2:	d11b      	bne.n	8007b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f06f 0204 	mvn.w	r2, #4
 8007afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2202      	movs	r2, #2
 8007b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fa22 	bl	8007f5c <HAL_TIM_IC_CaptureCallback>
 8007b18:	e005      	b.n	8007b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7f9 fd96 	bl	800164c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fa25 	bl	8007f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f003 0308 	and.w	r3, r3, #8
 8007b36:	2b08      	cmp	r3, #8
 8007b38:	d122      	bne.n	8007b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	f003 0308 	and.w	r3, r3, #8
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d11b      	bne.n	8007b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f06f 0208 	mvn.w	r2, #8
 8007b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2204      	movs	r2, #4
 8007b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f9f8 	bl	8007f5c <HAL_TIM_IC_CaptureCallback>
 8007b6c:	e005      	b.n	8007b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7f9 fd6c 	bl	800164c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f9fb 	bl	8007f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	f003 0310 	and.w	r3, r3, #16
 8007b8a:	2b10      	cmp	r3, #16
 8007b8c:	d122      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f003 0310 	and.w	r3, r3, #16
 8007b98:	2b10      	cmp	r3, #16
 8007b9a:	d11b      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f06f 0210 	mvn.w	r2, #16
 8007ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2208      	movs	r2, #8
 8007baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f9ce 	bl	8007f5c <HAL_TIM_IC_CaptureCallback>
 8007bc0:	e005      	b.n	8007bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7f9 fd42 	bl	800164c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f9d1 	bl	8007f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d10e      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d107      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f06f 0201 	mvn.w	r2, #1
 8007bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7f9 fd04 	bl	8001608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0a:	2b80      	cmp	r3, #128	; 0x80
 8007c0c:	d10e      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c18:	2b80      	cmp	r3, #128	; 0x80
 8007c1a:	d107      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fcfa 	bl	8008620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c36:	2b40      	cmp	r3, #64	; 0x40
 8007c38:	d10e      	bne.n	8007c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c44:	2b40      	cmp	r3, #64	; 0x40
 8007c46:	d107      	bne.n	8007c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f996 	bl	8007f84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	d10e      	bne.n	8007c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f003 0320 	and.w	r3, r3, #32
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d107      	bne.n	8007c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f06f 0220 	mvn.w	r2, #32
 8007c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fcc4 	bl	800860c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c84:	bf00      	nop
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d101      	bne.n	8007caa <HAL_TIM_OC_ConfigChannel+0x1e>
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	e048      	b.n	8007d3c <HAL_TIM_OC_ConfigChannel+0xb0>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b0c      	cmp	r3, #12
 8007cb6:	d839      	bhi.n	8007d2c <HAL_TIM_OC_ConfigChannel+0xa0>
 8007cb8:	a201      	add	r2, pc, #4	; (adr r2, 8007cc0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbe:	bf00      	nop
 8007cc0:	08007cf5 	.word	0x08007cf5
 8007cc4:	08007d2d 	.word	0x08007d2d
 8007cc8:	08007d2d 	.word	0x08007d2d
 8007ccc:	08007d2d 	.word	0x08007d2d
 8007cd0:	08007d03 	.word	0x08007d03
 8007cd4:	08007d2d 	.word	0x08007d2d
 8007cd8:	08007d2d 	.word	0x08007d2d
 8007cdc:	08007d2d 	.word	0x08007d2d
 8007ce0:	08007d11 	.word	0x08007d11
 8007ce4:	08007d2d 	.word	0x08007d2d
 8007ce8:	08007d2d 	.word	0x08007d2d
 8007cec:	08007d2d 	.word	0x08007d2d
 8007cf0:	08007d1f 	.word	0x08007d1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68b9      	ldr	r1, [r7, #8]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 f9cc 	bl	8008098 <TIM_OC1_SetConfig>
      break;
 8007d00:	e017      	b.n	8007d32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68b9      	ldr	r1, [r7, #8]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 fa2b 	bl	8008164 <TIM_OC2_SetConfig>
      break;
 8007d0e:	e010      	b.n	8007d32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68b9      	ldr	r1, [r7, #8]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fa90 	bl	800823c <TIM_OC3_SetConfig>
      break;
 8007d1c:	e009      	b.n	8007d32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68b9      	ldr	r1, [r7, #8]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 faf3 	bl	8008310 <TIM_OC4_SetConfig>
      break;
 8007d2a:	e002      	b.n	8007d32 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3718      	adds	r7, #24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d101      	bne.n	8007d60 <HAL_TIM_ConfigClockSource+0x1c>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	e0b4      	b.n	8007eca <HAL_TIM_ConfigClockSource+0x186>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d98:	d03e      	beq.n	8007e18 <HAL_TIM_ConfigClockSource+0xd4>
 8007d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d9e:	f200 8087 	bhi.w	8007eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da6:	f000 8086 	beq.w	8007eb6 <HAL_TIM_ConfigClockSource+0x172>
 8007daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dae:	d87f      	bhi.n	8007eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007db0:	2b70      	cmp	r3, #112	; 0x70
 8007db2:	d01a      	beq.n	8007dea <HAL_TIM_ConfigClockSource+0xa6>
 8007db4:	2b70      	cmp	r3, #112	; 0x70
 8007db6:	d87b      	bhi.n	8007eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007db8:	2b60      	cmp	r3, #96	; 0x60
 8007dba:	d050      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x11a>
 8007dbc:	2b60      	cmp	r3, #96	; 0x60
 8007dbe:	d877      	bhi.n	8007eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc0:	2b50      	cmp	r3, #80	; 0x50
 8007dc2:	d03c      	beq.n	8007e3e <HAL_TIM_ConfigClockSource+0xfa>
 8007dc4:	2b50      	cmp	r3, #80	; 0x50
 8007dc6:	d873      	bhi.n	8007eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc8:	2b40      	cmp	r3, #64	; 0x40
 8007dca:	d058      	beq.n	8007e7e <HAL_TIM_ConfigClockSource+0x13a>
 8007dcc:	2b40      	cmp	r3, #64	; 0x40
 8007dce:	d86f      	bhi.n	8007eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd0:	2b30      	cmp	r3, #48	; 0x30
 8007dd2:	d064      	beq.n	8007e9e <HAL_TIM_ConfigClockSource+0x15a>
 8007dd4:	2b30      	cmp	r3, #48	; 0x30
 8007dd6:	d86b      	bhi.n	8007eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd8:	2b20      	cmp	r3, #32
 8007dda:	d060      	beq.n	8007e9e <HAL_TIM_ConfigClockSource+0x15a>
 8007ddc:	2b20      	cmp	r3, #32
 8007dde:	d867      	bhi.n	8007eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d05c      	beq.n	8007e9e <HAL_TIM_ConfigClockSource+0x15a>
 8007de4:	2b10      	cmp	r3, #16
 8007de6:	d05a      	beq.n	8007e9e <HAL_TIM_ConfigClockSource+0x15a>
 8007de8:	e062      	b.n	8007eb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	6899      	ldr	r1, [r3, #8]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	f000 fb53 	bl	80084a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	609a      	str	r2, [r3, #8]
      break;
 8007e16:	e04f      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	6899      	ldr	r1, [r3, #8]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f000 fb3c 	bl	80084a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e3a:	609a      	str	r2, [r3, #8]
      break;
 8007e3c:	e03c      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6818      	ldr	r0, [r3, #0]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	6859      	ldr	r1, [r3, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f000 fab0 	bl	80083b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2150      	movs	r1, #80	; 0x50
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fb09 	bl	800846e <TIM_ITRx_SetConfig>
      break;
 8007e5c:	e02c      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	6859      	ldr	r1, [r3, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f000 facf 	bl	800840e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2160      	movs	r1, #96	; 0x60
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 faf9 	bl	800846e <TIM_ITRx_SetConfig>
      break;
 8007e7c:	e01c      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	6859      	ldr	r1, [r3, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f000 fa90 	bl	80083b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2140      	movs	r1, #64	; 0x40
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 fae9 	bl	800846e <TIM_ITRx_SetConfig>
      break;
 8007e9c:	e00c      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	f000 fae0 	bl	800846e <TIM_ITRx_SetConfig>
      break;
 8007eae:	e003      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb4:	e000      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007eb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b0c      	cmp	r3, #12
 8007ee6:	d831      	bhi.n	8007f4c <HAL_TIM_ReadCapturedValue+0x78>
 8007ee8:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eee:	bf00      	nop
 8007ef0:	08007f25 	.word	0x08007f25
 8007ef4:	08007f4d 	.word	0x08007f4d
 8007ef8:	08007f4d 	.word	0x08007f4d
 8007efc:	08007f4d 	.word	0x08007f4d
 8007f00:	08007f2f 	.word	0x08007f2f
 8007f04:	08007f4d 	.word	0x08007f4d
 8007f08:	08007f4d 	.word	0x08007f4d
 8007f0c:	08007f4d 	.word	0x08007f4d
 8007f10:	08007f39 	.word	0x08007f39
 8007f14:	08007f4d 	.word	0x08007f4d
 8007f18:	08007f4d 	.word	0x08007f4d
 8007f1c:	08007f4d 	.word	0x08007f4d
 8007f20:	08007f43 	.word	0x08007f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2a:	60fb      	str	r3, [r7, #12]

      break;
 8007f2c:	e00f      	b.n	8007f4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f34:	60fb      	str	r3, [r7, #12]

      break;
 8007f36:	e00a      	b.n	8007f4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3e:	60fb      	str	r3, [r7, #12]

      break;
 8007f40:	e005      	b.n	8007f4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f48:	60fb      	str	r3, [r7, #12]

      break;
 8007f4a:	e000      	b.n	8007f4e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007f4c:	bf00      	nop
  }

  return tmpreg;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a34      	ldr	r2, [pc, #208]	; (800807c <TIM_Base_SetConfig+0xe4>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d00f      	beq.n	8007fd0 <TIM_Base_SetConfig+0x38>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb6:	d00b      	beq.n	8007fd0 <TIM_Base_SetConfig+0x38>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a31      	ldr	r2, [pc, #196]	; (8008080 <TIM_Base_SetConfig+0xe8>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d007      	beq.n	8007fd0 <TIM_Base_SetConfig+0x38>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a30      	ldr	r2, [pc, #192]	; (8008084 <TIM_Base_SetConfig+0xec>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d003      	beq.n	8007fd0 <TIM_Base_SetConfig+0x38>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a2f      	ldr	r2, [pc, #188]	; (8008088 <TIM_Base_SetConfig+0xf0>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d108      	bne.n	8007fe2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a25      	ldr	r2, [pc, #148]	; (800807c <TIM_Base_SetConfig+0xe4>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d01b      	beq.n	8008022 <TIM_Base_SetConfig+0x8a>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff0:	d017      	beq.n	8008022 <TIM_Base_SetConfig+0x8a>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a22      	ldr	r2, [pc, #136]	; (8008080 <TIM_Base_SetConfig+0xe8>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d013      	beq.n	8008022 <TIM_Base_SetConfig+0x8a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a21      	ldr	r2, [pc, #132]	; (8008084 <TIM_Base_SetConfig+0xec>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00f      	beq.n	8008022 <TIM_Base_SetConfig+0x8a>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a20      	ldr	r2, [pc, #128]	; (8008088 <TIM_Base_SetConfig+0xf0>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d00b      	beq.n	8008022 <TIM_Base_SetConfig+0x8a>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a1f      	ldr	r2, [pc, #124]	; (800808c <TIM_Base_SetConfig+0xf4>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d007      	beq.n	8008022 <TIM_Base_SetConfig+0x8a>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a1e      	ldr	r2, [pc, #120]	; (8008090 <TIM_Base_SetConfig+0xf8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d003      	beq.n	8008022 <TIM_Base_SetConfig+0x8a>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a1d      	ldr	r2, [pc, #116]	; (8008094 <TIM_Base_SetConfig+0xfc>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d108      	bne.n	8008034 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	4313      	orrs	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a08      	ldr	r2, [pc, #32]	; (800807c <TIM_Base_SetConfig+0xe4>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d103      	bne.n	8008068 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	691a      	ldr	r2, [r3, #16]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	615a      	str	r2, [r3, #20]
}
 800806e:	bf00      	nop
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	40010000 	.word	0x40010000
 8008080:	40000400 	.word	0x40000400
 8008084:	40000800 	.word	0x40000800
 8008088:	40000c00 	.word	0x40000c00
 800808c:	40014000 	.word	0x40014000
 8008090:	40014400 	.word	0x40014400
 8008094:	40014800 	.word	0x40014800

08008098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	f023 0201 	bic.w	r2, r3, #1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f023 0303 	bic.w	r3, r3, #3
 80080ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f023 0302 	bic.w	r3, r3, #2
 80080e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a1c      	ldr	r2, [pc, #112]	; (8008160 <TIM_OC1_SetConfig+0xc8>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d10c      	bne.n	800810e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	f023 0308 	bic.w	r3, r3, #8
 80080fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f023 0304 	bic.w	r3, r3, #4
 800810c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a13      	ldr	r2, [pc, #76]	; (8008160 <TIM_OC1_SetConfig+0xc8>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d111      	bne.n	800813a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800811c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	4313      	orrs	r3, r2
 8008138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	621a      	str	r2, [r3, #32]
}
 8008154:	bf00      	nop
 8008156:	371c      	adds	r7, #28
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	40010000 	.word	0x40010000

08008164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	f023 0210 	bic.w	r2, r3, #16
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800819a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	021b      	lsls	r3, r3, #8
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f023 0320 	bic.w	r3, r3, #32
 80081ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a1e      	ldr	r2, [pc, #120]	; (8008238 <TIM_OC2_SetConfig+0xd4>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d10d      	bne.n	80081e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	011b      	lsls	r3, r3, #4
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a15      	ldr	r2, [pc, #84]	; (8008238 <TIM_OC2_SetConfig+0xd4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d113      	bne.n	8008210 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	4313      	orrs	r3, r2
 8008202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	4313      	orrs	r3, r2
 800820e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	621a      	str	r2, [r3, #32]
}
 800822a:	bf00      	nop
 800822c:	371c      	adds	r7, #28
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	40010000 	.word	0x40010000

0800823c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f023 0303 	bic.w	r3, r3, #3
 8008272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	4313      	orrs	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	021b      	lsls	r3, r3, #8
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	4313      	orrs	r3, r2
 8008290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a1d      	ldr	r2, [pc, #116]	; (800830c <TIM_OC3_SetConfig+0xd0>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d10d      	bne.n	80082b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	021b      	lsls	r3, r3, #8
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a14      	ldr	r2, [pc, #80]	; (800830c <TIM_OC3_SetConfig+0xd0>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d113      	bne.n	80082e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	011b      	lsls	r3, r3, #4
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	621a      	str	r2, [r3, #32]
}
 8008300:	bf00      	nop
 8008302:	371c      	adds	r7, #28
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	40010000 	.word	0x40010000

08008310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008310:	b480      	push	{r7}
 8008312:	b087      	sub	sp, #28
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800833e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	021b      	lsls	r3, r3, #8
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	4313      	orrs	r3, r2
 8008352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800835a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	031b      	lsls	r3, r3, #12
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	4313      	orrs	r3, r2
 8008366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a10      	ldr	r2, [pc, #64]	; (80083ac <TIM_OC4_SetConfig+0x9c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d109      	bne.n	8008384 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008376:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	019b      	lsls	r3, r3, #6
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	4313      	orrs	r3, r2
 8008382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	621a      	str	r2, [r3, #32]
}
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	40010000 	.word	0x40010000

080083b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	f023 0201 	bic.w	r2, r3, #1
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	011b      	lsls	r3, r3, #4
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f023 030a 	bic.w	r3, r3, #10
 80083ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	621a      	str	r2, [r3, #32]
}
 8008402:	bf00      	nop
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800840e:	b480      	push	{r7}
 8008410:	b087      	sub	sp, #28
 8008412:	af00      	add	r7, sp, #0
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	f023 0210 	bic.w	r2, r3, #16
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	031b      	lsls	r3, r3, #12
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	4313      	orrs	r3, r2
 8008442:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800844a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	011b      	lsls	r3, r3, #4
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	4313      	orrs	r3, r2
 8008454:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	621a      	str	r2, [r3, #32]
}
 8008462:	bf00      	nop
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800846e:	b480      	push	{r7}
 8008470:	b085      	sub	sp, #20
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4313      	orrs	r3, r2
 800848c:	f043 0307 	orr.w	r3, r3, #7
 8008490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	609a      	str	r2, [r3, #8]
}
 8008498:	bf00      	nop
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
 80084b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	021a      	lsls	r2, r3, #8
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	431a      	orrs	r2, r3
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	609a      	str	r2, [r3, #8]
}
 80084d8:	bf00      	nop
 80084da:	371c      	adds	r7, #28
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	f003 031f 	and.w	r3, r3, #31
 80084f6:	2201      	movs	r2, #1
 80084f8:	fa02 f303 	lsl.w	r3, r2, r3
 80084fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a1a      	ldr	r2, [r3, #32]
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	43db      	mvns	r3, r3
 8008506:	401a      	ands	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a1a      	ldr	r2, [r3, #32]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f003 031f 	and.w	r3, r3, #31
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	fa01 f303 	lsl.w	r3, r1, r3
 800851c:	431a      	orrs	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	621a      	str	r2, [r3, #32]
}
 8008522:	bf00      	nop
 8008524:	371c      	adds	r7, #28
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
	...

08008530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008540:	2b01      	cmp	r3, #1
 8008542:	d101      	bne.n	8008548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008544:	2302      	movs	r3, #2
 8008546:	e050      	b.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2202      	movs	r2, #2
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a1c      	ldr	r2, [pc, #112]	; (80085f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d018      	beq.n	80085be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008594:	d013      	beq.n	80085be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a18      	ldr	r2, [pc, #96]	; (80085fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00e      	beq.n	80085be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a16      	ldr	r2, [pc, #88]	; (8008600 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d009      	beq.n	80085be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a15      	ldr	r2, [pc, #84]	; (8008604 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d004      	beq.n	80085be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a13      	ldr	r2, [pc, #76]	; (8008608 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d10c      	bne.n	80085d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	40010000 	.word	0x40010000
 80085fc:	40000400 	.word	0x40000400
 8008600:	40000800 	.word	0x40000800
 8008604:	40000c00 	.word	0x40000c00
 8008608:	40014000 	.word	0x40014000

0800860c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e03f      	b.n	80086c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d106      	bne.n	8008660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7fa fd32 	bl	80030c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2224      	movs	r2, #36	; 0x24
 8008664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f929 	bl	80088d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	691a      	ldr	r2, [r3, #16]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800868c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	695a      	ldr	r2, [r3, #20]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800869c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2220      	movs	r2, #32
 80086b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2220      	movs	r2, #32
 80086c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b08a      	sub	sp, #40	; 0x28
 80086d2:	af02      	add	r7, sp, #8
 80086d4:	60f8      	str	r0, [r7, #12]
 80086d6:	60b9      	str	r1, [r7, #8]
 80086d8:	603b      	str	r3, [r7, #0]
 80086da:	4613      	mov	r3, r2
 80086dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b20      	cmp	r3, #32
 80086ec:	d17c      	bne.n	80087e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <HAL_UART_Transmit+0x2c>
 80086f4:	88fb      	ldrh	r3, [r7, #6]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e075      	b.n	80087ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008704:	2b01      	cmp	r3, #1
 8008706:	d101      	bne.n	800870c <HAL_UART_Transmit+0x3e>
 8008708:	2302      	movs	r3, #2
 800870a:	e06e      	b.n	80087ea <HAL_UART_Transmit+0x11c>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2221      	movs	r2, #33	; 0x21
 800871e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008722:	f7fb fe23 	bl	800436c <HAL_GetTick>
 8008726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	88fa      	ldrh	r2, [r7, #6]
 800872c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	88fa      	ldrh	r2, [r7, #6]
 8008732:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800873c:	d108      	bne.n	8008750 <HAL_UART_Transmit+0x82>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d104      	bne.n	8008750 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008746:	2300      	movs	r3, #0
 8008748:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	61bb      	str	r3, [r7, #24]
 800874e:	e003      	b.n	8008758 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008754:	2300      	movs	r3, #0
 8008756:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008760:	e02a      	b.n	80087b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2200      	movs	r2, #0
 800876a:	2180      	movs	r1, #128	; 0x80
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 f840 	bl	80087f2 <UART_WaitOnFlagUntilTimeout>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e036      	b.n	80087ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10b      	bne.n	800879a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008790:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	3302      	adds	r3, #2
 8008796:	61bb      	str	r3, [r7, #24]
 8008798:	e007      	b.n	80087aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	781a      	ldrb	r2, [r3, #0]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	3301      	adds	r3, #1
 80087a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	3b01      	subs	r3, #1
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087bc:	b29b      	uxth	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1cf      	bne.n	8008762 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2200      	movs	r2, #0
 80087ca:	2140      	movs	r1, #64	; 0x40
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f000 f810 	bl	80087f2 <UART_WaitOnFlagUntilTimeout>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e006      	b.n	80087ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2220      	movs	r2, #32
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80087e4:	2300      	movs	r3, #0
 80087e6:	e000      	b.n	80087ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80087e8:	2302      	movs	r3, #2
  }
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3720      	adds	r7, #32
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b090      	sub	sp, #64	; 0x40
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	603b      	str	r3, [r7, #0]
 80087fe:	4613      	mov	r3, r2
 8008800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008802:	e050      	b.n	80088a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880a:	d04c      	beq.n	80088a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800880c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800880e:	2b00      	cmp	r3, #0
 8008810:	d007      	beq.n	8008822 <UART_WaitOnFlagUntilTimeout+0x30>
 8008812:	f7fb fdab 	bl	800436c <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800881e:	429a      	cmp	r2, r3
 8008820:	d241      	bcs.n	80088a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	330c      	adds	r3, #12
 8008828:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882c:	e853 3f00 	ldrex	r3, [r3]
 8008830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	330c      	adds	r3, #12
 8008840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008842:	637a      	str	r2, [r7, #52]	; 0x34
 8008844:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800884a:	e841 2300 	strex	r3, r2, [r1]
 800884e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1e5      	bne.n	8008822 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	3314      	adds	r3, #20
 800885c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	e853 3f00 	ldrex	r3, [r3]
 8008864:	613b      	str	r3, [r7, #16]
   return(result);
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f023 0301 	bic.w	r3, r3, #1
 800886c:	63bb      	str	r3, [r7, #56]	; 0x38
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	3314      	adds	r3, #20
 8008874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008876:	623a      	str	r2, [r7, #32]
 8008878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887a:	69f9      	ldr	r1, [r7, #28]
 800887c:	6a3a      	ldr	r2, [r7, #32]
 800887e:	e841 2300 	strex	r3, r2, [r1]
 8008882:	61bb      	str	r3, [r7, #24]
   return(result);
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1e5      	bne.n	8008856 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2220      	movs	r2, #32
 800888e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2220      	movs	r2, #32
 8008896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e00f      	b.n	80088c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	4013      	ands	r3, r2
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	bf0c      	ite	eq
 80088b6:	2301      	moveq	r3, #1
 80088b8:	2300      	movne	r3, #0
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	461a      	mov	r2, r3
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d09f      	beq.n	8008804 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3740      	adds	r7, #64	; 0x40
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088d4:	b0c0      	sub	sp, #256	; 0x100
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80088e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ec:	68d9      	ldr	r1, [r3, #12]
 80088ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	ea40 0301 	orr.w	r3, r0, r1
 80088f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	431a      	orrs	r2, r3
 8008908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	431a      	orrs	r2, r3
 8008910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	4313      	orrs	r3, r2
 8008918:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800891c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008928:	f021 010c 	bic.w	r1, r1, #12
 800892c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008936:	430b      	orrs	r3, r1
 8008938:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800893a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800894a:	6999      	ldr	r1, [r3, #24]
 800894c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	ea40 0301 	orr.w	r3, r0, r1
 8008956:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	4b8f      	ldr	r3, [pc, #572]	; (8008b9c <UART_SetConfig+0x2cc>)
 8008960:	429a      	cmp	r2, r3
 8008962:	d005      	beq.n	8008970 <UART_SetConfig+0xa0>
 8008964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	4b8d      	ldr	r3, [pc, #564]	; (8008ba0 <UART_SetConfig+0x2d0>)
 800896c:	429a      	cmp	r2, r3
 800896e:	d104      	bne.n	800897a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008970:	f7fd fc6a 	bl	8006248 <HAL_RCC_GetPCLK2Freq>
 8008974:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008978:	e003      	b.n	8008982 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800897a:	f7fd fc51 	bl	8006220 <HAL_RCC_GetPCLK1Freq>
 800897e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800898c:	f040 810c 	bne.w	8008ba8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008994:	2200      	movs	r2, #0
 8008996:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800899a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800899e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80089a2:	4622      	mov	r2, r4
 80089a4:	462b      	mov	r3, r5
 80089a6:	1891      	adds	r1, r2, r2
 80089a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80089aa:	415b      	adcs	r3, r3
 80089ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80089b2:	4621      	mov	r1, r4
 80089b4:	eb12 0801 	adds.w	r8, r2, r1
 80089b8:	4629      	mov	r1, r5
 80089ba:	eb43 0901 	adc.w	r9, r3, r1
 80089be:	f04f 0200 	mov.w	r2, #0
 80089c2:	f04f 0300 	mov.w	r3, #0
 80089c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80089ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80089ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80089d2:	4690      	mov	r8, r2
 80089d4:	4699      	mov	r9, r3
 80089d6:	4623      	mov	r3, r4
 80089d8:	eb18 0303 	adds.w	r3, r8, r3
 80089dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80089e0:	462b      	mov	r3, r5
 80089e2:	eb49 0303 	adc.w	r3, r9, r3
 80089e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80089ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80089fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80089fe:	460b      	mov	r3, r1
 8008a00:	18db      	adds	r3, r3, r3
 8008a02:	653b      	str	r3, [r7, #80]	; 0x50
 8008a04:	4613      	mov	r3, r2
 8008a06:	eb42 0303 	adc.w	r3, r2, r3
 8008a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8008a0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008a10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008a14:	f7f8 f900 	bl	8000c18 <__aeabi_uldivmod>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4b61      	ldr	r3, [pc, #388]	; (8008ba4 <UART_SetConfig+0x2d4>)
 8008a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8008a22:	095b      	lsrs	r3, r3, #5
 8008a24:	011c      	lsls	r4, r3, #4
 8008a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008a34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008a38:	4642      	mov	r2, r8
 8008a3a:	464b      	mov	r3, r9
 8008a3c:	1891      	adds	r1, r2, r2
 8008a3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008a40:	415b      	adcs	r3, r3
 8008a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008a48:	4641      	mov	r1, r8
 8008a4a:	eb12 0a01 	adds.w	sl, r2, r1
 8008a4e:	4649      	mov	r1, r9
 8008a50:	eb43 0b01 	adc.w	fp, r3, r1
 8008a54:	f04f 0200 	mov.w	r2, #0
 8008a58:	f04f 0300 	mov.w	r3, #0
 8008a5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008a60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a68:	4692      	mov	sl, r2
 8008a6a:	469b      	mov	fp, r3
 8008a6c:	4643      	mov	r3, r8
 8008a6e:	eb1a 0303 	adds.w	r3, sl, r3
 8008a72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a76:	464b      	mov	r3, r9
 8008a78:	eb4b 0303 	adc.w	r3, fp, r3
 8008a7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008a90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008a94:	460b      	mov	r3, r1
 8008a96:	18db      	adds	r3, r3, r3
 8008a98:	643b      	str	r3, [r7, #64]	; 0x40
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	eb42 0303 	adc.w	r3, r2, r3
 8008aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8008aa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008aa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008aaa:	f7f8 f8b5 	bl	8000c18 <__aeabi_uldivmod>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	4b3b      	ldr	r3, [pc, #236]	; (8008ba4 <UART_SetConfig+0x2d4>)
 8008ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8008aba:	095b      	lsrs	r3, r3, #5
 8008abc:	2264      	movs	r2, #100	; 0x64
 8008abe:	fb02 f303 	mul.w	r3, r2, r3
 8008ac2:	1acb      	subs	r3, r1, r3
 8008ac4:	00db      	lsls	r3, r3, #3
 8008ac6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008aca:	4b36      	ldr	r3, [pc, #216]	; (8008ba4 <UART_SetConfig+0x2d4>)
 8008acc:	fba3 2302 	umull	r2, r3, r3, r2
 8008ad0:	095b      	lsrs	r3, r3, #5
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ad8:	441c      	add	r4, r3
 8008ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ae4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ae8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008aec:	4642      	mov	r2, r8
 8008aee:	464b      	mov	r3, r9
 8008af0:	1891      	adds	r1, r2, r2
 8008af2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008af4:	415b      	adcs	r3, r3
 8008af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008af8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008afc:	4641      	mov	r1, r8
 8008afe:	1851      	adds	r1, r2, r1
 8008b00:	6339      	str	r1, [r7, #48]	; 0x30
 8008b02:	4649      	mov	r1, r9
 8008b04:	414b      	adcs	r3, r1
 8008b06:	637b      	str	r3, [r7, #52]	; 0x34
 8008b08:	f04f 0200 	mov.w	r2, #0
 8008b0c:	f04f 0300 	mov.w	r3, #0
 8008b10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008b14:	4659      	mov	r1, fp
 8008b16:	00cb      	lsls	r3, r1, #3
 8008b18:	4651      	mov	r1, sl
 8008b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b1e:	4651      	mov	r1, sl
 8008b20:	00ca      	lsls	r2, r1, #3
 8008b22:	4610      	mov	r0, r2
 8008b24:	4619      	mov	r1, r3
 8008b26:	4603      	mov	r3, r0
 8008b28:	4642      	mov	r2, r8
 8008b2a:	189b      	adds	r3, r3, r2
 8008b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b30:	464b      	mov	r3, r9
 8008b32:	460a      	mov	r2, r1
 8008b34:	eb42 0303 	adc.w	r3, r2, r3
 8008b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008b48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008b4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008b50:	460b      	mov	r3, r1
 8008b52:	18db      	adds	r3, r3, r3
 8008b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b56:	4613      	mov	r3, r2
 8008b58:	eb42 0303 	adc.w	r3, r2, r3
 8008b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008b66:	f7f8 f857 	bl	8000c18 <__aeabi_uldivmod>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <UART_SetConfig+0x2d4>)
 8008b70:	fba3 1302 	umull	r1, r3, r3, r2
 8008b74:	095b      	lsrs	r3, r3, #5
 8008b76:	2164      	movs	r1, #100	; 0x64
 8008b78:	fb01 f303 	mul.w	r3, r1, r3
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	00db      	lsls	r3, r3, #3
 8008b80:	3332      	adds	r3, #50	; 0x32
 8008b82:	4a08      	ldr	r2, [pc, #32]	; (8008ba4 <UART_SetConfig+0x2d4>)
 8008b84:	fba2 2303 	umull	r2, r3, r2, r3
 8008b88:	095b      	lsrs	r3, r3, #5
 8008b8a:	f003 0207 	and.w	r2, r3, #7
 8008b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4422      	add	r2, r4
 8008b96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b98:	e106      	b.n	8008da8 <UART_SetConfig+0x4d8>
 8008b9a:	bf00      	nop
 8008b9c:	40011000 	.word	0x40011000
 8008ba0:	40011400 	.word	0x40011400
 8008ba4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bac:	2200      	movs	r2, #0
 8008bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008bb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008bb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008bba:	4642      	mov	r2, r8
 8008bbc:	464b      	mov	r3, r9
 8008bbe:	1891      	adds	r1, r2, r2
 8008bc0:	6239      	str	r1, [r7, #32]
 8008bc2:	415b      	adcs	r3, r3
 8008bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8008bc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008bca:	4641      	mov	r1, r8
 8008bcc:	1854      	adds	r4, r2, r1
 8008bce:	4649      	mov	r1, r9
 8008bd0:	eb43 0501 	adc.w	r5, r3, r1
 8008bd4:	f04f 0200 	mov.w	r2, #0
 8008bd8:	f04f 0300 	mov.w	r3, #0
 8008bdc:	00eb      	lsls	r3, r5, #3
 8008bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008be2:	00e2      	lsls	r2, r4, #3
 8008be4:	4614      	mov	r4, r2
 8008be6:	461d      	mov	r5, r3
 8008be8:	4643      	mov	r3, r8
 8008bea:	18e3      	adds	r3, r4, r3
 8008bec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008bf0:	464b      	mov	r3, r9
 8008bf2:	eb45 0303 	adc.w	r3, r5, r3
 8008bf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c0a:	f04f 0200 	mov.w	r2, #0
 8008c0e:	f04f 0300 	mov.w	r3, #0
 8008c12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008c16:	4629      	mov	r1, r5
 8008c18:	008b      	lsls	r3, r1, #2
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c20:	4621      	mov	r1, r4
 8008c22:	008a      	lsls	r2, r1, #2
 8008c24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008c28:	f7f7 fff6 	bl	8000c18 <__aeabi_uldivmod>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4b60      	ldr	r3, [pc, #384]	; (8008db4 <UART_SetConfig+0x4e4>)
 8008c32:	fba3 2302 	umull	r2, r3, r3, r2
 8008c36:	095b      	lsrs	r3, r3, #5
 8008c38:	011c      	lsls	r4, r3, #4
 8008c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008c48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008c4c:	4642      	mov	r2, r8
 8008c4e:	464b      	mov	r3, r9
 8008c50:	1891      	adds	r1, r2, r2
 8008c52:	61b9      	str	r1, [r7, #24]
 8008c54:	415b      	adcs	r3, r3
 8008c56:	61fb      	str	r3, [r7, #28]
 8008c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c5c:	4641      	mov	r1, r8
 8008c5e:	1851      	adds	r1, r2, r1
 8008c60:	6139      	str	r1, [r7, #16]
 8008c62:	4649      	mov	r1, r9
 8008c64:	414b      	adcs	r3, r1
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	f04f 0200 	mov.w	r2, #0
 8008c6c:	f04f 0300 	mov.w	r3, #0
 8008c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c74:	4659      	mov	r1, fp
 8008c76:	00cb      	lsls	r3, r1, #3
 8008c78:	4651      	mov	r1, sl
 8008c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c7e:	4651      	mov	r1, sl
 8008c80:	00ca      	lsls	r2, r1, #3
 8008c82:	4610      	mov	r0, r2
 8008c84:	4619      	mov	r1, r3
 8008c86:	4603      	mov	r3, r0
 8008c88:	4642      	mov	r2, r8
 8008c8a:	189b      	adds	r3, r3, r2
 8008c8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c90:	464b      	mov	r3, r9
 8008c92:	460a      	mov	r2, r1
 8008c94:	eb42 0303 	adc.w	r3, r2, r3
 8008c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ca6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ca8:	f04f 0200 	mov.w	r2, #0
 8008cac:	f04f 0300 	mov.w	r3, #0
 8008cb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008cb4:	4649      	mov	r1, r9
 8008cb6:	008b      	lsls	r3, r1, #2
 8008cb8:	4641      	mov	r1, r8
 8008cba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cbe:	4641      	mov	r1, r8
 8008cc0:	008a      	lsls	r2, r1, #2
 8008cc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008cc6:	f7f7 ffa7 	bl	8000c18 <__aeabi_uldivmod>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4611      	mov	r1, r2
 8008cd0:	4b38      	ldr	r3, [pc, #224]	; (8008db4 <UART_SetConfig+0x4e4>)
 8008cd2:	fba3 2301 	umull	r2, r3, r3, r1
 8008cd6:	095b      	lsrs	r3, r3, #5
 8008cd8:	2264      	movs	r2, #100	; 0x64
 8008cda:	fb02 f303 	mul.w	r3, r2, r3
 8008cde:	1acb      	subs	r3, r1, r3
 8008ce0:	011b      	lsls	r3, r3, #4
 8008ce2:	3332      	adds	r3, #50	; 0x32
 8008ce4:	4a33      	ldr	r2, [pc, #204]	; (8008db4 <UART_SetConfig+0x4e4>)
 8008ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cea:	095b      	lsrs	r3, r3, #5
 8008cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cf0:	441c      	add	r4, r3
 8008cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	673b      	str	r3, [r7, #112]	; 0x70
 8008cfa:	677a      	str	r2, [r7, #116]	; 0x74
 8008cfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008d00:	4642      	mov	r2, r8
 8008d02:	464b      	mov	r3, r9
 8008d04:	1891      	adds	r1, r2, r2
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	415b      	adcs	r3, r3
 8008d0a:	60fb      	str	r3, [r7, #12]
 8008d0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d10:	4641      	mov	r1, r8
 8008d12:	1851      	adds	r1, r2, r1
 8008d14:	6039      	str	r1, [r7, #0]
 8008d16:	4649      	mov	r1, r9
 8008d18:	414b      	adcs	r3, r1
 8008d1a:	607b      	str	r3, [r7, #4]
 8008d1c:	f04f 0200 	mov.w	r2, #0
 8008d20:	f04f 0300 	mov.w	r3, #0
 8008d24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008d28:	4659      	mov	r1, fp
 8008d2a:	00cb      	lsls	r3, r1, #3
 8008d2c:	4651      	mov	r1, sl
 8008d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d32:	4651      	mov	r1, sl
 8008d34:	00ca      	lsls	r2, r1, #3
 8008d36:	4610      	mov	r0, r2
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	4642      	mov	r2, r8
 8008d3e:	189b      	adds	r3, r3, r2
 8008d40:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d42:	464b      	mov	r3, r9
 8008d44:	460a      	mov	r2, r1
 8008d46:	eb42 0303 	adc.w	r3, r2, r3
 8008d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	663b      	str	r3, [r7, #96]	; 0x60
 8008d56:	667a      	str	r2, [r7, #100]	; 0x64
 8008d58:	f04f 0200 	mov.w	r2, #0
 8008d5c:	f04f 0300 	mov.w	r3, #0
 8008d60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008d64:	4649      	mov	r1, r9
 8008d66:	008b      	lsls	r3, r1, #2
 8008d68:	4641      	mov	r1, r8
 8008d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d6e:	4641      	mov	r1, r8
 8008d70:	008a      	lsls	r2, r1, #2
 8008d72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008d76:	f7f7 ff4f 	bl	8000c18 <__aeabi_uldivmod>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4b0d      	ldr	r3, [pc, #52]	; (8008db4 <UART_SetConfig+0x4e4>)
 8008d80:	fba3 1302 	umull	r1, r3, r3, r2
 8008d84:	095b      	lsrs	r3, r3, #5
 8008d86:	2164      	movs	r1, #100	; 0x64
 8008d88:	fb01 f303 	mul.w	r3, r1, r3
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	011b      	lsls	r3, r3, #4
 8008d90:	3332      	adds	r3, #50	; 0x32
 8008d92:	4a08      	ldr	r2, [pc, #32]	; (8008db4 <UART_SetConfig+0x4e4>)
 8008d94:	fba2 2303 	umull	r2, r3, r2, r3
 8008d98:	095b      	lsrs	r3, r3, #5
 8008d9a:	f003 020f 	and.w	r2, r3, #15
 8008d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4422      	add	r2, r4
 8008da6:	609a      	str	r2, [r3, #8]
}
 8008da8:	bf00      	nop
 8008daa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008dae:	46bd      	mov	sp, r7
 8008db0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008db4:	51eb851f 	.word	0x51eb851f

08008db8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008dbc:	4904      	ldr	r1, [pc, #16]	; (8008dd0 <MX_FATFS_Init+0x18>)
 8008dbe:	4805      	ldr	r0, [pc, #20]	; (8008dd4 <MX_FATFS_Init+0x1c>)
 8008dc0:	f000 fe8a 	bl	8009ad8 <FATFS_LinkDriver>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	4b03      	ldr	r3, [pc, #12]	; (8008dd8 <MX_FATFS_Init+0x20>)
 8008dca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008dcc:	bf00      	nop
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20003a94 	.word	0x20003a94
 8008dd4:	200007a4 	.word	0x200007a4
 8008dd8:	20003a90 	.word	0x20003a90

08008ddc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8008de6:	79fb      	ldrb	r3, [r7, #7]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fa fca1 	bl	8003730 <USER_SPI_initialize>
 8008dee:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8008e02:	79fb      	ldrb	r3, [r7, #7]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fa fd7f 	bl	8003908 <USER_SPI_status>
 8008e0a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60b9      	str	r1, [r7, #8]
 8008e1c:	607a      	str	r2, [r7, #4]
 8008e1e:	603b      	str	r3, [r7, #0]
 8008e20:	4603      	mov	r3, r0
 8008e22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8008e24:	7bf8      	ldrb	r0, [r7, #15]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	68b9      	ldr	r1, [r7, #8]
 8008e2c:	f7fa fd82 	bl	8003934 <USER_SPI_read>
 8008e30:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
 8008e44:	603b      	str	r3, [r7, #0]
 8008e46:	4603      	mov	r3, r0
 8008e48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8008e4a:	7bf8      	ldrb	r0, [r7, #15]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	68b9      	ldr	r1, [r7, #8]
 8008e52:	f7fa fdd5 	bl	8003a00 <USER_SPI_write>
 8008e56:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	603a      	str	r2, [r7, #0]
 8008e6a:	71fb      	strb	r3, [r7, #7]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8008e70:	79b9      	ldrb	r1, [r7, #6]
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fa fe3e 	bl	8003af8 <USER_SPI_ioctl>
 8008e7c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
	...

08008e88 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	4603      	mov	r3, r0
 8008e90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008e92:	79fb      	ldrb	r3, [r7, #7]
 8008e94:	4a08      	ldr	r2, [pc, #32]	; (8008eb8 <disk_status+0x30>)
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	79fa      	ldrb	r2, [r7, #7]
 8008ea0:	4905      	ldr	r1, [pc, #20]	; (8008eb8 <disk_status+0x30>)
 8008ea2:	440a      	add	r2, r1
 8008ea4:	7a12      	ldrb	r2, [r2, #8]
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	4798      	blx	r3
 8008eaa:	4603      	mov	r3, r0
 8008eac:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	20003ac0 	.word	0x20003ac0

08008ebc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	4a0d      	ldr	r2, [pc, #52]	; (8008f04 <disk_initialize+0x48>)
 8008ece:	5cd3      	ldrb	r3, [r2, r3]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d111      	bne.n	8008ef8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008ed4:	79fb      	ldrb	r3, [r7, #7]
 8008ed6:	4a0b      	ldr	r2, [pc, #44]	; (8008f04 <disk_initialize+0x48>)
 8008ed8:	2101      	movs	r1, #1
 8008eda:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	4a09      	ldr	r2, [pc, #36]	; (8008f04 <disk_initialize+0x48>)
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4413      	add	r3, r2
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	79fa      	ldrb	r2, [r7, #7]
 8008eea:	4906      	ldr	r1, [pc, #24]	; (8008f04 <disk_initialize+0x48>)
 8008eec:	440a      	add	r2, r1
 8008eee:	7a12      	ldrb	r2, [r2, #8]
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4798      	blx	r3
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20003ac0 	.word	0x20003ac0

08008f08 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008f08:	b590      	push	{r4, r7, lr}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60b9      	str	r1, [r7, #8]
 8008f10:	607a      	str	r2, [r7, #4]
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	4603      	mov	r3, r0
 8008f16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	4a0a      	ldr	r2, [pc, #40]	; (8008f44 <disk_read+0x3c>)
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4413      	add	r3, r2
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	689c      	ldr	r4, [r3, #8]
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
 8008f26:	4a07      	ldr	r2, [pc, #28]	; (8008f44 <disk_read+0x3c>)
 8008f28:	4413      	add	r3, r2
 8008f2a:	7a18      	ldrb	r0, [r3, #8]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	68b9      	ldr	r1, [r7, #8]
 8008f32:	47a0      	blx	r4
 8008f34:	4603      	mov	r3, r0
 8008f36:	75fb      	strb	r3, [r7, #23]
  return res;
 8008f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	371c      	adds	r7, #28
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd90      	pop	{r4, r7, pc}
 8008f42:	bf00      	nop
 8008f44:	20003ac0 	.word	0x20003ac0

08008f48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008f48:	b590      	push	{r4, r7, lr}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	607a      	str	r2, [r7, #4]
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	4603      	mov	r3, r0
 8008f56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	4a0a      	ldr	r2, [pc, #40]	; (8008f84 <disk_write+0x3c>)
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	68dc      	ldr	r4, [r3, #12]
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	4a07      	ldr	r2, [pc, #28]	; (8008f84 <disk_write+0x3c>)
 8008f68:	4413      	add	r3, r2
 8008f6a:	7a18      	ldrb	r0, [r3, #8]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	68b9      	ldr	r1, [r7, #8]
 8008f72:	47a0      	blx	r4
 8008f74:	4603      	mov	r3, r0
 8008f76:	75fb      	strb	r3, [r7, #23]
  return res;
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	371c      	adds	r7, #28
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd90      	pop	{r4, r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20003ac0 	.word	0x20003ac0

08008f88 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	3301      	adds	r3, #1
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008f98:	89fb      	ldrh	r3, [r7, #14]
 8008f9a:	021b      	lsls	r3, r3, #8
 8008f9c:	b21a      	sxth	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	b21b      	sxth	r3, r3
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	b21b      	sxth	r3, r3
 8008fa8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008faa:	89fb      	ldrh	r3, [r7, #14]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3303      	adds	r3, #3
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	021b      	lsls	r3, r3, #8
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	3202      	adds	r2, #2
 8008fd0:	7812      	ldrb	r2, [r2, #0]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	021b      	lsls	r3, r3, #8
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	3201      	adds	r2, #1
 8008fde:	7812      	ldrb	r2, [r2, #0]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	021b      	lsls	r3, r3, #8
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	7812      	ldrb	r2, [r2, #0]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	60fb      	str	r3, [r7, #12]
	return rv;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3714      	adds	r7, #20
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
	...

08009000 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009008:	2300      	movs	r3, #0
 800900a:	60fb      	str	r3, [r7, #12]
 800900c:	e010      	b.n	8009030 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800900e:	4a0d      	ldr	r2, [pc, #52]	; (8009044 <clear_lock+0x44>)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	011b      	lsls	r3, r3, #4
 8009014:	4413      	add	r3, r2
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	429a      	cmp	r2, r3
 800901c:	d105      	bne.n	800902a <clear_lock+0x2a>
 800901e:	4a09      	ldr	r2, [pc, #36]	; (8009044 <clear_lock+0x44>)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	011b      	lsls	r3, r3, #4
 8009024:	4413      	add	r3, r2
 8009026:	2200      	movs	r2, #0
 8009028:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3301      	adds	r3, #1
 800902e:	60fb      	str	r3, [r7, #12]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d9eb      	bls.n	800900e <clear_lock+0xe>
	}
}
 8009036:	bf00      	nop
 8009038:	bf00      	nop
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	20003aa0 	.word	0x20003aa0

08009048 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	78db      	ldrb	r3, [r3, #3]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d034      	beq.n	80090c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	7858      	ldrb	r0, [r3, #1]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800906c:	2301      	movs	r3, #1
 800906e:	697a      	ldr	r2, [r7, #20]
 8009070:	f7ff ff6a 	bl	8008f48 <disk_write>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d002      	beq.n	8009080 <sync_window+0x38>
			res = FR_DISK_ERR;
 800907a:	2301      	movs	r3, #1
 800907c:	73fb      	strb	r3, [r7, #15]
 800907e:	e022      	b.n	80090c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	1ad2      	subs	r2, r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	429a      	cmp	r2, r3
 8009094:	d217      	bcs.n	80090c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	789b      	ldrb	r3, [r3, #2]
 800909a:	613b      	str	r3, [r7, #16]
 800909c:	e010      	b.n	80090c0 <sync_window+0x78>
					wsect += fs->fsize;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	4413      	add	r3, r2
 80090a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	7858      	ldrb	r0, [r3, #1]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090b2:	2301      	movs	r3, #1
 80090b4:	697a      	ldr	r2, [r7, #20]
 80090b6:	f7ff ff47 	bl	8008f48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	3b01      	subs	r3, #1
 80090be:	613b      	str	r3, [r7, #16]
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d8eb      	bhi.n	800909e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d01b      	beq.n	8009120 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff ffad 	bl	8009048 <sync_window>
 80090ee:	4603      	mov	r3, r0
 80090f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d113      	bne.n	8009120 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	7858      	ldrb	r0, [r3, #1]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009102:	2301      	movs	r3, #1
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	f7ff feff 	bl	8008f08 <disk_read>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d004      	beq.n	800911a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009110:	f04f 33ff 	mov.w	r3, #4294967295
 8009114:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009116:	2301      	movs	r3, #1
 8009118:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009120:	7bfb      	ldrb	r3, [r7, #15]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b086      	sub	sp, #24
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d904      	bls.n	800914a <get_fat+0x20>
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d302      	bcc.n	8009150 <get_fat+0x26>
		val = 1;	/* Internal error */
 800914a:	2301      	movs	r3, #1
 800914c:	617b      	str	r3, [r7, #20]
 800914e:	e08f      	b.n	8009270 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009150:	f04f 33ff 	mov.w	r3, #4294967295
 8009154:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	2b03      	cmp	r3, #3
 800915c:	d062      	beq.n	8009224 <get_fat+0xfa>
 800915e:	2b03      	cmp	r3, #3
 8009160:	dc7c      	bgt.n	800925c <get_fat+0x132>
 8009162:	2b01      	cmp	r3, #1
 8009164:	d002      	beq.n	800916c <get_fat+0x42>
 8009166:	2b02      	cmp	r3, #2
 8009168:	d042      	beq.n	80091f0 <get_fat+0xc6>
 800916a:	e077      	b.n	800925c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	085b      	lsrs	r3, r3, #1
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	4413      	add	r3, r2
 8009178:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	6a1a      	ldr	r2, [r3, #32]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	0a5b      	lsrs	r3, r3, #9
 8009182:	4413      	add	r3, r2
 8009184:	4619      	mov	r1, r3
 8009186:	6938      	ldr	r0, [r7, #16]
 8009188:	f7ff ffa2 	bl	80090d0 <move_window>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d167      	bne.n	8009262 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	60fa      	str	r2, [r7, #12]
 8009198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	4413      	add	r3, r2
 80091a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80091a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	6a1a      	ldr	r2, [r3, #32]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	0a5b      	lsrs	r3, r3, #9
 80091ae:	4413      	add	r3, r2
 80091b0:	4619      	mov	r1, r3
 80091b2:	6938      	ldr	r0, [r7, #16]
 80091b4:	f7ff ff8c 	bl	80090d0 <move_window>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d153      	bne.n	8009266 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	4413      	add	r3, r2
 80091c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80091cc:	021b      	lsls	r3, r3, #8
 80091ce:	461a      	mov	r2, r3
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <get_fat+0xbc>
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	091b      	lsrs	r3, r3, #4
 80091e4:	e002      	b.n	80091ec <get_fat+0xc2>
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091ec:	617b      	str	r3, [r7, #20]
			break;
 80091ee:	e03f      	b.n	8009270 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	6a1a      	ldr	r2, [r3, #32]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	0a1b      	lsrs	r3, r3, #8
 80091f8:	4413      	add	r3, r2
 80091fa:	4619      	mov	r1, r3
 80091fc:	6938      	ldr	r0, [r7, #16]
 80091fe:	f7ff ff67 	bl	80090d0 <move_window>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d130      	bne.n	800926a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	005b      	lsls	r3, r3, #1
 8009212:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009216:	4413      	add	r3, r2
 8009218:	4618      	mov	r0, r3
 800921a:	f7ff feb5 	bl	8008f88 <ld_word>
 800921e:	4603      	mov	r3, r0
 8009220:	617b      	str	r3, [r7, #20]
			break;
 8009222:	e025      	b.n	8009270 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	6a1a      	ldr	r2, [r3, #32]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	09db      	lsrs	r3, r3, #7
 800922c:	4413      	add	r3, r2
 800922e:	4619      	mov	r1, r3
 8009230:	6938      	ldr	r0, [r7, #16]
 8009232:	f7ff ff4d 	bl	80090d0 <move_window>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d118      	bne.n	800926e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800924a:	4413      	add	r3, r2
 800924c:	4618      	mov	r0, r3
 800924e:	f7ff feb3 	bl	8008fb8 <ld_dword>
 8009252:	4603      	mov	r3, r0
 8009254:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009258:	617b      	str	r3, [r7, #20]
			break;
 800925a:	e009      	b.n	8009270 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800925c:	2301      	movs	r3, #1
 800925e:	617b      	str	r3, [r7, #20]
 8009260:	e006      	b.n	8009270 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009262:	bf00      	nop
 8009264:	e004      	b.n	8009270 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009266:	bf00      	nop
 8009268:	e002      	b.n	8009270 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800926a:	bf00      	nop
 800926c:	e000      	b.n	8009270 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800926e:	bf00      	nop
		}
	}

	return val;
 8009270:	697b      	ldr	r3, [r7, #20]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3718      	adds	r7, #24
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800927a:	b480      	push	{r7}
 800927c:	b087      	sub	sp, #28
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009282:	f04f 33ff 	mov.w	r3, #4294967295
 8009286:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d031      	beq.n	80092f4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	617b      	str	r3, [r7, #20]
 8009296:	e002      	b.n	800929e <get_ldnumber+0x24>
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	3301      	adds	r3, #1
 800929c:	617b      	str	r3, [r7, #20]
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	2b20      	cmp	r3, #32
 80092a4:	d903      	bls.n	80092ae <get_ldnumber+0x34>
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	2b3a      	cmp	r3, #58	; 0x3a
 80092ac:	d1f4      	bne.n	8009298 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	2b3a      	cmp	r3, #58	; 0x3a
 80092b4:	d11c      	bne.n	80092f0 <get_ldnumber+0x76>
			tp = *path;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	60fa      	str	r2, [r7, #12]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	3b30      	subs	r3, #48	; 0x30
 80092c6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	2b09      	cmp	r3, #9
 80092cc:	d80e      	bhi.n	80092ec <get_ldnumber+0x72>
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d10a      	bne.n	80092ec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d107      	bne.n	80092ec <get_ldnumber+0x72>
					vol = (int)i;
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	3301      	adds	r3, #1
 80092e4:	617b      	str	r3, [r7, #20]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	e002      	b.n	80092f6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80092f0:	2300      	movs	r3, #0
 80092f2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80092f4:	693b      	ldr	r3, [r7, #16]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	371c      	adds	r7, #28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
	...

08009304 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	70da      	strb	r2, [r3, #3]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f04f 32ff 	mov.w	r2, #4294967295
 800931a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f7ff fed6 	bl	80090d0 <move_window>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <check_fs+0x2a>
 800932a:	2304      	movs	r3, #4
 800932c:	e038      	b.n	80093a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3330      	adds	r3, #48	; 0x30
 8009332:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff fe26 	bl	8008f88 <ld_word>
 800933c:	4603      	mov	r3, r0
 800933e:	461a      	mov	r2, r3
 8009340:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009344:	429a      	cmp	r2, r3
 8009346:	d001      	beq.n	800934c <check_fs+0x48>
 8009348:	2303      	movs	r3, #3
 800934a:	e029      	b.n	80093a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009352:	2be9      	cmp	r3, #233	; 0xe9
 8009354:	d009      	beq.n	800936a <check_fs+0x66>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800935c:	2beb      	cmp	r3, #235	; 0xeb
 800935e:	d11e      	bne.n	800939e <check_fs+0x9a>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009366:	2b90      	cmp	r3, #144	; 0x90
 8009368:	d119      	bne.n	800939e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	3330      	adds	r3, #48	; 0x30
 800936e:	3336      	adds	r3, #54	; 0x36
 8009370:	4618      	mov	r0, r3
 8009372:	f7ff fe21 	bl	8008fb8 <ld_dword>
 8009376:	4603      	mov	r3, r0
 8009378:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800937c:	4a0a      	ldr	r2, [pc, #40]	; (80093a8 <check_fs+0xa4>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d101      	bne.n	8009386 <check_fs+0x82>
 8009382:	2300      	movs	r3, #0
 8009384:	e00c      	b.n	80093a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	3330      	adds	r3, #48	; 0x30
 800938a:	3352      	adds	r3, #82	; 0x52
 800938c:	4618      	mov	r0, r3
 800938e:	f7ff fe13 	bl	8008fb8 <ld_dword>
 8009392:	4603      	mov	r3, r0
 8009394:	4a05      	ldr	r2, [pc, #20]	; (80093ac <check_fs+0xa8>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d101      	bne.n	800939e <check_fs+0x9a>
 800939a:	2300      	movs	r3, #0
 800939c:	e000      	b.n	80093a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800939e:	2302      	movs	r3, #2
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	00544146 	.word	0x00544146
 80093ac:	33544146 	.word	0x33544146

080093b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b096      	sub	sp, #88	; 0x58
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	4613      	mov	r3, r2
 80093bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	2200      	movs	r2, #0
 80093c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f7ff ff58 	bl	800927a <get_ldnumber>
 80093ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80093cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	da01      	bge.n	80093d6 <find_volume+0x26>
 80093d2:	230b      	movs	r3, #11
 80093d4:	e22d      	b.n	8009832 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80093d6:	4aa1      	ldr	r2, [pc, #644]	; (800965c <find_volume+0x2ac>)
 80093d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80093e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <find_volume+0x3a>
 80093e6:	230c      	movs	r3, #12
 80093e8:	e223      	b.n	8009832 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80093f0:	79fb      	ldrb	r3, [r7, #7]
 80093f2:	f023 0301 	bic.w	r3, r3, #1
 80093f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80093f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d01a      	beq.n	8009436 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009402:	785b      	ldrb	r3, [r3, #1]
 8009404:	4618      	mov	r0, r3
 8009406:	f7ff fd3f 	bl	8008e88 <disk_status>
 800940a:	4603      	mov	r3, r0
 800940c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009410:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009414:	f003 0301 	and.w	r3, r3, #1
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10c      	bne.n	8009436 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800941c:	79fb      	ldrb	r3, [r7, #7]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d007      	beq.n	8009432 <find_volume+0x82>
 8009422:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009426:	f003 0304 	and.w	r3, r3, #4
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800942e:	230a      	movs	r3, #10
 8009430:	e1ff      	b.n	8009832 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009432:	2300      	movs	r3, #0
 8009434:	e1fd      	b.n	8009832 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009438:	2200      	movs	r2, #0
 800943a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800943c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800943e:	b2da      	uxtb	r2, r3
 8009440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009442:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009446:	785b      	ldrb	r3, [r3, #1]
 8009448:	4618      	mov	r0, r3
 800944a:	f7ff fd37 	bl	8008ebc <disk_initialize>
 800944e:	4603      	mov	r3, r0
 8009450:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009454:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009460:	2303      	movs	r3, #3
 8009462:	e1e6      	b.n	8009832 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009464:	79fb      	ldrb	r3, [r7, #7]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d007      	beq.n	800947a <find_volume+0xca>
 800946a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800946e:	f003 0304 	and.w	r3, r3, #4
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009476:	230a      	movs	r3, #10
 8009478:	e1db      	b.n	8009832 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800947a:	2300      	movs	r3, #0
 800947c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800947e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009482:	f7ff ff3f 	bl	8009304 <check_fs>
 8009486:	4603      	mov	r3, r0
 8009488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800948c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009490:	2b02      	cmp	r3, #2
 8009492:	d149      	bne.n	8009528 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009494:	2300      	movs	r3, #0
 8009496:	643b      	str	r3, [r7, #64]	; 0x40
 8009498:	e01e      	b.n	80094d8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800949a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094a2:	011b      	lsls	r3, r3, #4
 80094a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80094a8:	4413      	add	r3, r2
 80094aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80094ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ae:	3304      	adds	r3, #4
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d006      	beq.n	80094c4 <find_volume+0x114>
 80094b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b8:	3308      	adds	r3, #8
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff fd7c 	bl	8008fb8 <ld_dword>
 80094c0:	4602      	mov	r2, r0
 80094c2:	e000      	b.n	80094c6 <find_volume+0x116>
 80094c4:	2200      	movs	r2, #0
 80094c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	3358      	adds	r3, #88	; 0x58
 80094cc:	443b      	add	r3, r7
 80094ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80094d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094d4:	3301      	adds	r3, #1
 80094d6:	643b      	str	r3, [r7, #64]	; 0x40
 80094d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d9dd      	bls.n	800949a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80094de:	2300      	movs	r3, #0
 80094e0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80094e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <find_volume+0x13e>
 80094e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ea:	3b01      	subs	r3, #1
 80094ec:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80094ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	3358      	adds	r3, #88	; 0x58
 80094f4:	443b      	add	r3, r7
 80094f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80094fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80094fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d005      	beq.n	800950e <find_volume+0x15e>
 8009502:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009504:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009506:	f7ff fefd 	bl	8009304 <check_fs>
 800950a:	4603      	mov	r3, r0
 800950c:	e000      	b.n	8009510 <find_volume+0x160>
 800950e:	2303      	movs	r3, #3
 8009510:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009514:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009518:	2b01      	cmp	r3, #1
 800951a:	d905      	bls.n	8009528 <find_volume+0x178>
 800951c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800951e:	3301      	adds	r3, #1
 8009520:	643b      	str	r3, [r7, #64]	; 0x40
 8009522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009524:	2b03      	cmp	r3, #3
 8009526:	d9e2      	bls.n	80094ee <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009528:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800952c:	2b04      	cmp	r3, #4
 800952e:	d101      	bne.n	8009534 <find_volume+0x184>
 8009530:	2301      	movs	r3, #1
 8009532:	e17e      	b.n	8009832 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009534:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009538:	2b01      	cmp	r3, #1
 800953a:	d901      	bls.n	8009540 <find_volume+0x190>
 800953c:	230d      	movs	r3, #13
 800953e:	e178      	b.n	8009832 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009542:	3330      	adds	r3, #48	; 0x30
 8009544:	330b      	adds	r3, #11
 8009546:	4618      	mov	r0, r3
 8009548:	f7ff fd1e 	bl	8008f88 <ld_word>
 800954c:	4603      	mov	r3, r0
 800954e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009552:	d001      	beq.n	8009558 <find_volume+0x1a8>
 8009554:	230d      	movs	r3, #13
 8009556:	e16c      	b.n	8009832 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	3330      	adds	r3, #48	; 0x30
 800955c:	3316      	adds	r3, #22
 800955e:	4618      	mov	r0, r3
 8009560:	f7ff fd12 	bl	8008f88 <ld_word>
 8009564:	4603      	mov	r3, r0
 8009566:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800956a:	2b00      	cmp	r3, #0
 800956c:	d106      	bne.n	800957c <find_volume+0x1cc>
 800956e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009570:	3330      	adds	r3, #48	; 0x30
 8009572:	3324      	adds	r3, #36	; 0x24
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff fd1f 	bl	8008fb8 <ld_dword>
 800957a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800957c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009580:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009584:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800958c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958e:	789b      	ldrb	r3, [r3, #2]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d005      	beq.n	80095a0 <find_volume+0x1f0>
 8009594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009596:	789b      	ldrb	r3, [r3, #2]
 8009598:	2b02      	cmp	r3, #2
 800959a:	d001      	beq.n	80095a0 <find_volume+0x1f0>
 800959c:	230d      	movs	r3, #13
 800959e:	e148      	b.n	8009832 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80095a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a2:	789b      	ldrb	r3, [r3, #2]
 80095a4:	461a      	mov	r2, r3
 80095a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a8:	fb02 f303 	mul.w	r3, r2, r3
 80095ac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80095ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80095ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095bc:	895b      	ldrh	r3, [r3, #10]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d008      	beq.n	80095d4 <find_volume+0x224>
 80095c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c4:	895b      	ldrh	r3, [r3, #10]
 80095c6:	461a      	mov	r2, r3
 80095c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ca:	895b      	ldrh	r3, [r3, #10]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	4013      	ands	r3, r2
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <find_volume+0x228>
 80095d4:	230d      	movs	r3, #13
 80095d6:	e12c      	b.n	8009832 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80095d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095da:	3330      	adds	r3, #48	; 0x30
 80095dc:	3311      	adds	r3, #17
 80095de:	4618      	mov	r0, r3
 80095e0:	f7ff fcd2 	bl	8008f88 <ld_word>
 80095e4:	4603      	mov	r3, r0
 80095e6:	461a      	mov	r2, r3
 80095e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80095ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ee:	891b      	ldrh	r3, [r3, #8]
 80095f0:	f003 030f 	and.w	r3, r3, #15
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <find_volume+0x24e>
 80095fa:	230d      	movs	r3, #13
 80095fc:	e119      	b.n	8009832 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80095fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009600:	3330      	adds	r3, #48	; 0x30
 8009602:	3313      	adds	r3, #19
 8009604:	4618      	mov	r0, r3
 8009606:	f7ff fcbf 	bl	8008f88 <ld_word>
 800960a:	4603      	mov	r3, r0
 800960c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800960e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009610:	2b00      	cmp	r3, #0
 8009612:	d106      	bne.n	8009622 <find_volume+0x272>
 8009614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009616:	3330      	adds	r3, #48	; 0x30
 8009618:	3320      	adds	r3, #32
 800961a:	4618      	mov	r0, r3
 800961c:	f7ff fccc 	bl	8008fb8 <ld_dword>
 8009620:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009624:	3330      	adds	r3, #48	; 0x30
 8009626:	330e      	adds	r3, #14
 8009628:	4618      	mov	r0, r3
 800962a:	f7ff fcad 	bl	8008f88 <ld_word>
 800962e:	4603      	mov	r3, r0
 8009630:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009632:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009634:	2b00      	cmp	r3, #0
 8009636:	d101      	bne.n	800963c <find_volume+0x28c>
 8009638:	230d      	movs	r3, #13
 800963a:	e0fa      	b.n	8009832 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800963c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800963e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009640:	4413      	add	r3, r2
 8009642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009644:	8912      	ldrh	r2, [r2, #8]
 8009646:	0912      	lsrs	r2, r2, #4
 8009648:	b292      	uxth	r2, r2
 800964a:	4413      	add	r3, r2
 800964c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800964e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009652:	429a      	cmp	r2, r3
 8009654:	d204      	bcs.n	8009660 <find_volume+0x2b0>
 8009656:	230d      	movs	r3, #13
 8009658:	e0eb      	b.n	8009832 <find_volume+0x482>
 800965a:	bf00      	nop
 800965c:	20003a98 	.word	0x20003a98
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009668:	8952      	ldrh	r2, [r2, #10]
 800966a:	fbb3 f3f2 	udiv	r3, r3, r2
 800966e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	2b00      	cmp	r3, #0
 8009674:	d101      	bne.n	800967a <find_volume+0x2ca>
 8009676:	230d      	movs	r3, #13
 8009678:	e0db      	b.n	8009832 <find_volume+0x482>
		fmt = FS_FAT32;
 800967a:	2303      	movs	r3, #3
 800967c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009686:	4293      	cmp	r3, r2
 8009688:	d802      	bhi.n	8009690 <find_volume+0x2e0>
 800968a:	2302      	movs	r3, #2
 800968c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009696:	4293      	cmp	r3, r2
 8009698:	d802      	bhi.n	80096a0 <find_volume+0x2f0>
 800969a:	2301      	movs	r3, #1
 800969c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	1c9a      	adds	r2, r3, #2
 80096a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096ac:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80096ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80096b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096b2:	441a      	add	r2, r3
 80096b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80096b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096bc:	441a      	add	r2, r3
 80096be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80096c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	d11e      	bne.n	8009708 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80096ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096cc:	3330      	adds	r3, #48	; 0x30
 80096ce:	332a      	adds	r3, #42	; 0x2a
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7ff fc59 	bl	8008f88 <ld_word>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <find_volume+0x330>
 80096dc:	230d      	movs	r3, #13
 80096de:	e0a8      	b.n	8009832 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80096e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e2:	891b      	ldrh	r3, [r3, #8]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <find_volume+0x33c>
 80096e8:	230d      	movs	r3, #13
 80096ea:	e0a2      	b.n	8009832 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80096ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ee:	3330      	adds	r3, #48	; 0x30
 80096f0:	332c      	adds	r3, #44	; 0x2c
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fc60 	bl	8008fb8 <ld_dword>
 80096f8:	4602      	mov	r2, r0
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80096fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	647b      	str	r3, [r7, #68]	; 0x44
 8009706:	e01f      	b.n	8009748 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970a:	891b      	ldrh	r3, [r3, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <find_volume+0x364>
 8009710:	230d      	movs	r3, #13
 8009712:	e08e      	b.n	8009832 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009716:	6a1a      	ldr	r2, [r3, #32]
 8009718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800971a:	441a      	add	r2, r3
 800971c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009720:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009724:	2b02      	cmp	r3, #2
 8009726:	d103      	bne.n	8009730 <find_volume+0x380>
 8009728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972a:	695b      	ldr	r3, [r3, #20]
 800972c:	005b      	lsls	r3, r3, #1
 800972e:	e00a      	b.n	8009746 <find_volume+0x396>
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	695a      	ldr	r2, [r3, #20]
 8009734:	4613      	mov	r3, r2
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	4413      	add	r3, r2
 800973a:	085a      	lsrs	r2, r3, #1
 800973c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009746:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	699a      	ldr	r2, [r3, #24]
 800974c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800974e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009752:	0a5b      	lsrs	r3, r3, #9
 8009754:	429a      	cmp	r2, r3
 8009756:	d201      	bcs.n	800975c <find_volume+0x3ac>
 8009758:	230d      	movs	r3, #13
 800975a:	e06a      	b.n	8009832 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800975c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975e:	f04f 32ff 	mov.w	r2, #4294967295
 8009762:	611a      	str	r2, [r3, #16]
 8009764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009766:	691a      	ldr	r2, [r3, #16]
 8009768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800976c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976e:	2280      	movs	r2, #128	; 0x80
 8009770:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009772:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009776:	2b03      	cmp	r3, #3
 8009778:	d149      	bne.n	800980e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977c:	3330      	adds	r3, #48	; 0x30
 800977e:	3330      	adds	r3, #48	; 0x30
 8009780:	4618      	mov	r0, r3
 8009782:	f7ff fc01 	bl	8008f88 <ld_word>
 8009786:	4603      	mov	r3, r0
 8009788:	2b01      	cmp	r3, #1
 800978a:	d140      	bne.n	800980e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800978c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800978e:	3301      	adds	r3, #1
 8009790:	4619      	mov	r1, r3
 8009792:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009794:	f7ff fc9c 	bl	80090d0 <move_window>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d137      	bne.n	800980e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800979e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a0:	2200      	movs	r2, #0
 80097a2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80097a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a6:	3330      	adds	r3, #48	; 0x30
 80097a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff fbeb 	bl	8008f88 <ld_word>
 80097b2:	4603      	mov	r3, r0
 80097b4:	461a      	mov	r2, r3
 80097b6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d127      	bne.n	800980e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80097be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c0:	3330      	adds	r3, #48	; 0x30
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7ff fbf8 	bl	8008fb8 <ld_dword>
 80097c8:	4603      	mov	r3, r0
 80097ca:	4a1c      	ldr	r2, [pc, #112]	; (800983c <find_volume+0x48c>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d11e      	bne.n	800980e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80097d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d2:	3330      	adds	r3, #48	; 0x30
 80097d4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff fbed 	bl	8008fb8 <ld_dword>
 80097de:	4603      	mov	r3, r0
 80097e0:	4a17      	ldr	r2, [pc, #92]	; (8009840 <find_volume+0x490>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d113      	bne.n	800980e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80097e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e8:	3330      	adds	r3, #48	; 0x30
 80097ea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7ff fbe2 	bl	8008fb8 <ld_dword>
 80097f4:	4602      	mov	r2, r0
 80097f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	3330      	adds	r3, #48	; 0x30
 80097fe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009802:	4618      	mov	r0, r3
 8009804:	f7ff fbd8 	bl	8008fb8 <ld_dword>
 8009808:	4602      	mov	r2, r0
 800980a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009814:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009816:	4b0b      	ldr	r3, [pc, #44]	; (8009844 <find_volume+0x494>)
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	3301      	adds	r3, #1
 800981c:	b29a      	uxth	r2, r3
 800981e:	4b09      	ldr	r3, [pc, #36]	; (8009844 <find_volume+0x494>)
 8009820:	801a      	strh	r2, [r3, #0]
 8009822:	4b08      	ldr	r3, [pc, #32]	; (8009844 <find_volume+0x494>)
 8009824:	881a      	ldrh	r2, [r3, #0]
 8009826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009828:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800982a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800982c:	f7ff fbe8 	bl	8009000 <clear_lock>
#endif
	return FR_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3758      	adds	r7, #88	; 0x58
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	41615252 	.word	0x41615252
 8009840:	61417272 	.word	0x61417272
 8009844:	20003a9c 	.word	0x20003a9c

08009848 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	4613      	mov	r3, r2
 8009854:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800985a:	f107 0310 	add.w	r3, r7, #16
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff fd0b 	bl	800927a <get_ldnumber>
 8009864:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	2b00      	cmp	r3, #0
 800986a:	da01      	bge.n	8009870 <f_mount+0x28>
 800986c:	230b      	movs	r3, #11
 800986e:	e02b      	b.n	80098c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009870:	4a17      	ldr	r2, [pc, #92]	; (80098d0 <f_mount+0x88>)
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009878:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d005      	beq.n	800988c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009880:	69b8      	ldr	r0, [r7, #24]
 8009882:	f7ff fbbd 	bl	8009000 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	2200      	movs	r2, #0
 800988a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d002      	beq.n	8009898 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	490d      	ldr	r1, [pc, #52]	; (80098d0 <f_mount+0x88>)
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d002      	beq.n	80098ae <f_mount+0x66>
 80098a8:	79fb      	ldrb	r3, [r7, #7]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d001      	beq.n	80098b2 <f_mount+0x6a>
 80098ae:	2300      	movs	r3, #0
 80098b0:	e00a      	b.n	80098c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80098b2:	f107 010c 	add.w	r1, r7, #12
 80098b6:	f107 0308 	add.w	r3, r7, #8
 80098ba:	2200      	movs	r2, #0
 80098bc:	4618      	mov	r0, r3
 80098be:	f7ff fd77 	bl	80093b0 <find_volume>
 80098c2:	4603      	mov	r3, r0
 80098c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80098c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3720      	adds	r7, #32
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	20003a98 	.word	0x20003a98

080098d4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b092      	sub	sp, #72	; 0x48
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80098e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80098e4:	f107 030c 	add.w	r3, r7, #12
 80098e8:	2200      	movs	r2, #0
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7ff fd60 	bl	80093b0 <find_volume>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80098f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f040 8099 	bne.w	8009a32 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009908:	691a      	ldr	r2, [r3, #16]
 800990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	3b02      	subs	r3, #2
 8009910:	429a      	cmp	r2, r3
 8009912:	d804      	bhi.n	800991e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	691a      	ldr	r2, [r3, #16]
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	e089      	b.n	8009a32 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d128      	bne.n	800997c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800992a:	2302      	movs	r3, #2
 800992c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800992e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009930:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009932:	f107 0314 	add.w	r3, r7, #20
 8009936:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fbf6 	bl	800912a <get_fat>
 800993e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009946:	d103      	bne.n	8009950 <f_getfree+0x7c>
 8009948:	2301      	movs	r3, #1
 800994a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800994e:	e063      	b.n	8009a18 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009952:	2b01      	cmp	r3, #1
 8009954:	d103      	bne.n	800995e <f_getfree+0x8a>
 8009956:	2302      	movs	r3, #2
 8009958:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800995c:	e05c      	b.n	8009a18 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800995e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009960:	2b00      	cmp	r3, #0
 8009962:	d102      	bne.n	800996a <f_getfree+0x96>
 8009964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009966:	3301      	adds	r3, #1
 8009968:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800996a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800996c:	3301      	adds	r3, #1
 800996e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009976:	429a      	cmp	r2, r3
 8009978:	d3db      	bcc.n	8009932 <f_getfree+0x5e>
 800997a:	e04d      	b.n	8009a18 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800997c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997e:	695b      	ldr	r3, [r3, #20]
 8009980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009988:	2300      	movs	r3, #0
 800998a:	637b      	str	r3, [r7, #52]	; 0x34
 800998c:	2300      	movs	r3, #0
 800998e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009992:	2b00      	cmp	r3, #0
 8009994:	d113      	bne.n	80099be <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999a:	1c5a      	adds	r2, r3, #1
 800999c:	63ba      	str	r2, [r7, #56]	; 0x38
 800999e:	4619      	mov	r1, r3
 80099a0:	f7ff fb96 	bl	80090d0 <move_window>
 80099a4:	4603      	mov	r3, r0
 80099a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80099aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d131      	bne.n	8009a16 <f_getfree+0x142>
							p = fs->win;
 80099b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b4:	3330      	adds	r3, #48	; 0x30
 80099b6:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80099b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099bc:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80099be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d10f      	bne.n	80099e6 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80099c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099c8:	f7ff fade 	bl	8008f88 <ld_word>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d102      	bne.n	80099d8 <f_getfree+0x104>
 80099d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099d4:	3301      	adds	r3, #1
 80099d6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099da:	3302      	adds	r3, #2
 80099dc:	633b      	str	r3, [r7, #48]	; 0x30
 80099de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e0:	3b02      	subs	r3, #2
 80099e2:	637b      	str	r3, [r7, #52]	; 0x34
 80099e4:	e010      	b.n	8009a08 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80099e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099e8:	f7ff fae6 	bl	8008fb8 <ld_dword>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d102      	bne.n	80099fc <f_getfree+0x128>
 80099f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099f8:	3301      	adds	r3, #1
 80099fa:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	3304      	adds	r3, #4
 8009a00:	633b      	str	r3, [r7, #48]	; 0x30
 8009a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a04:	3b04      	subs	r3, #4
 8009a06:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1bd      	bne.n	8009990 <f_getfree+0xbc>
 8009a14:	e000      	b.n	8009a18 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009a16:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a1c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a22:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	791a      	ldrb	r2, [r3, #4]
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	f042 0201 	orr.w	r2, r2, #1
 8009a2e:	b2d2      	uxtb	r2, r2
 8009a30:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009a32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3748      	adds	r7, #72	; 0x48
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009a56:	4b1f      	ldr	r3, [pc, #124]	; (8009ad4 <FATFS_LinkDriverEx+0x94>)
 8009a58:	7a5b      	ldrb	r3, [r3, #9]
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d131      	bne.n	8009ac4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009a60:	4b1c      	ldr	r3, [pc, #112]	; (8009ad4 <FATFS_LinkDriverEx+0x94>)
 8009a62:	7a5b      	ldrb	r3, [r3, #9]
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	461a      	mov	r2, r3
 8009a68:	4b1a      	ldr	r3, [pc, #104]	; (8009ad4 <FATFS_LinkDriverEx+0x94>)
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009a6e:	4b19      	ldr	r3, [pc, #100]	; (8009ad4 <FATFS_LinkDriverEx+0x94>)
 8009a70:	7a5b      	ldrb	r3, [r3, #9]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	4a17      	ldr	r2, [pc, #92]	; (8009ad4 <FATFS_LinkDriverEx+0x94>)
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009a7e:	4b15      	ldr	r3, [pc, #84]	; (8009ad4 <FATFS_LinkDriverEx+0x94>)
 8009a80:	7a5b      	ldrb	r3, [r3, #9]
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	461a      	mov	r2, r3
 8009a86:	4b13      	ldr	r3, [pc, #76]	; (8009ad4 <FATFS_LinkDriverEx+0x94>)
 8009a88:	4413      	add	r3, r2
 8009a8a:	79fa      	ldrb	r2, [r7, #7]
 8009a8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009a8e:	4b11      	ldr	r3, [pc, #68]	; (8009ad4 <FATFS_LinkDriverEx+0x94>)
 8009a90:	7a5b      	ldrb	r3, [r3, #9]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	1c5a      	adds	r2, r3, #1
 8009a96:	b2d1      	uxtb	r1, r2
 8009a98:	4a0e      	ldr	r2, [pc, #56]	; (8009ad4 <FATFS_LinkDriverEx+0x94>)
 8009a9a:	7251      	strb	r1, [r2, #9]
 8009a9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009a9e:	7dbb      	ldrb	r3, [r7, #22]
 8009aa0:	3330      	adds	r3, #48	; 0x30
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	223a      	movs	r2, #58	; 0x3a
 8009aae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	3302      	adds	r3, #2
 8009ab4:	222f      	movs	r2, #47	; 0x2f
 8009ab6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	3303      	adds	r3, #3
 8009abc:	2200      	movs	r2, #0
 8009abe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	371c      	adds	r7, #28
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	20003ac0 	.word	0x20003ac0

08009ad8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff ffaa 	bl	8009a40 <FATFS_LinkDriverEx>
 8009aec:	4603      	mov	r3, r0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <__cvt>:
 8009af6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009afa:	ec55 4b10 	vmov	r4, r5, d0
 8009afe:	2d00      	cmp	r5, #0
 8009b00:	460e      	mov	r6, r1
 8009b02:	4619      	mov	r1, r3
 8009b04:	462b      	mov	r3, r5
 8009b06:	bfbb      	ittet	lt
 8009b08:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b0c:	461d      	movlt	r5, r3
 8009b0e:	2300      	movge	r3, #0
 8009b10:	232d      	movlt	r3, #45	; 0x2d
 8009b12:	700b      	strb	r3, [r1, #0]
 8009b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b16:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b1a:	4691      	mov	r9, r2
 8009b1c:	f023 0820 	bic.w	r8, r3, #32
 8009b20:	bfbc      	itt	lt
 8009b22:	4622      	movlt	r2, r4
 8009b24:	4614      	movlt	r4, r2
 8009b26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b2a:	d005      	beq.n	8009b38 <__cvt+0x42>
 8009b2c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b30:	d100      	bne.n	8009b34 <__cvt+0x3e>
 8009b32:	3601      	adds	r6, #1
 8009b34:	2102      	movs	r1, #2
 8009b36:	e000      	b.n	8009b3a <__cvt+0x44>
 8009b38:	2103      	movs	r1, #3
 8009b3a:	ab03      	add	r3, sp, #12
 8009b3c:	9301      	str	r3, [sp, #4]
 8009b3e:	ab02      	add	r3, sp, #8
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	ec45 4b10 	vmov	d0, r4, r5
 8009b46:	4653      	mov	r3, sl
 8009b48:	4632      	mov	r2, r6
 8009b4a:	f000 ff6d 	bl	800aa28 <_dtoa_r>
 8009b4e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b52:	4607      	mov	r7, r0
 8009b54:	d102      	bne.n	8009b5c <__cvt+0x66>
 8009b56:	f019 0f01 	tst.w	r9, #1
 8009b5a:	d022      	beq.n	8009ba2 <__cvt+0xac>
 8009b5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b60:	eb07 0906 	add.w	r9, r7, r6
 8009b64:	d110      	bne.n	8009b88 <__cvt+0x92>
 8009b66:	783b      	ldrb	r3, [r7, #0]
 8009b68:	2b30      	cmp	r3, #48	; 0x30
 8009b6a:	d10a      	bne.n	8009b82 <__cvt+0x8c>
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	2300      	movs	r3, #0
 8009b70:	4620      	mov	r0, r4
 8009b72:	4629      	mov	r1, r5
 8009b74:	f7f6 ffc0 	bl	8000af8 <__aeabi_dcmpeq>
 8009b78:	b918      	cbnz	r0, 8009b82 <__cvt+0x8c>
 8009b7a:	f1c6 0601 	rsb	r6, r6, #1
 8009b7e:	f8ca 6000 	str.w	r6, [sl]
 8009b82:	f8da 3000 	ldr.w	r3, [sl]
 8009b86:	4499      	add	r9, r3
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	4629      	mov	r1, r5
 8009b90:	f7f6 ffb2 	bl	8000af8 <__aeabi_dcmpeq>
 8009b94:	b108      	cbz	r0, 8009b9a <__cvt+0xa4>
 8009b96:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b9a:	2230      	movs	r2, #48	; 0x30
 8009b9c:	9b03      	ldr	r3, [sp, #12]
 8009b9e:	454b      	cmp	r3, r9
 8009ba0:	d307      	bcc.n	8009bb2 <__cvt+0xbc>
 8009ba2:	9b03      	ldr	r3, [sp, #12]
 8009ba4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ba6:	1bdb      	subs	r3, r3, r7
 8009ba8:	4638      	mov	r0, r7
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	b004      	add	sp, #16
 8009bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb2:	1c59      	adds	r1, r3, #1
 8009bb4:	9103      	str	r1, [sp, #12]
 8009bb6:	701a      	strb	r2, [r3, #0]
 8009bb8:	e7f0      	b.n	8009b9c <__cvt+0xa6>

08009bba <__exponent>:
 8009bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2900      	cmp	r1, #0
 8009bc0:	bfb8      	it	lt
 8009bc2:	4249      	neglt	r1, r1
 8009bc4:	f803 2b02 	strb.w	r2, [r3], #2
 8009bc8:	bfb4      	ite	lt
 8009bca:	222d      	movlt	r2, #45	; 0x2d
 8009bcc:	222b      	movge	r2, #43	; 0x2b
 8009bce:	2909      	cmp	r1, #9
 8009bd0:	7042      	strb	r2, [r0, #1]
 8009bd2:	dd2a      	ble.n	8009c2a <__exponent+0x70>
 8009bd4:	f10d 0207 	add.w	r2, sp, #7
 8009bd8:	4617      	mov	r7, r2
 8009bda:	260a      	movs	r6, #10
 8009bdc:	4694      	mov	ip, r2
 8009bde:	fb91 f5f6 	sdiv	r5, r1, r6
 8009be2:	fb06 1415 	mls	r4, r6, r5, r1
 8009be6:	3430      	adds	r4, #48	; 0x30
 8009be8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009bec:	460c      	mov	r4, r1
 8009bee:	2c63      	cmp	r4, #99	; 0x63
 8009bf0:	f102 32ff 	add.w	r2, r2, #4294967295
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	dcf1      	bgt.n	8009bdc <__exponent+0x22>
 8009bf8:	3130      	adds	r1, #48	; 0x30
 8009bfa:	f1ac 0402 	sub.w	r4, ip, #2
 8009bfe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009c02:	1c41      	adds	r1, r0, #1
 8009c04:	4622      	mov	r2, r4
 8009c06:	42ba      	cmp	r2, r7
 8009c08:	d30a      	bcc.n	8009c20 <__exponent+0x66>
 8009c0a:	f10d 0209 	add.w	r2, sp, #9
 8009c0e:	eba2 020c 	sub.w	r2, r2, ip
 8009c12:	42bc      	cmp	r4, r7
 8009c14:	bf88      	it	hi
 8009c16:	2200      	movhi	r2, #0
 8009c18:	4413      	add	r3, r2
 8009c1a:	1a18      	subs	r0, r3, r0
 8009c1c:	b003      	add	sp, #12
 8009c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c20:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009c24:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009c28:	e7ed      	b.n	8009c06 <__exponent+0x4c>
 8009c2a:	2330      	movs	r3, #48	; 0x30
 8009c2c:	3130      	adds	r1, #48	; 0x30
 8009c2e:	7083      	strb	r3, [r0, #2]
 8009c30:	70c1      	strb	r1, [r0, #3]
 8009c32:	1d03      	adds	r3, r0, #4
 8009c34:	e7f1      	b.n	8009c1a <__exponent+0x60>
	...

08009c38 <_printf_float>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	ed2d 8b02 	vpush	{d8}
 8009c40:	b08d      	sub	sp, #52	; 0x34
 8009c42:	460c      	mov	r4, r1
 8009c44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c48:	4616      	mov	r6, r2
 8009c4a:	461f      	mov	r7, r3
 8009c4c:	4605      	mov	r5, r0
 8009c4e:	f000 fddd 	bl	800a80c <_localeconv_r>
 8009c52:	f8d0 a000 	ldr.w	sl, [r0]
 8009c56:	4650      	mov	r0, sl
 8009c58:	f7f6 fb22 	bl	80002a0 <strlen>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	9305      	str	r3, [sp, #20]
 8009c64:	f8d8 3000 	ldr.w	r3, [r8]
 8009c68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009c6c:	3307      	adds	r3, #7
 8009c6e:	f023 0307 	bic.w	r3, r3, #7
 8009c72:	f103 0208 	add.w	r2, r3, #8
 8009c76:	f8c8 2000 	str.w	r2, [r8]
 8009c7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c82:	9307      	str	r3, [sp, #28]
 8009c84:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c88:	ee08 0a10 	vmov	s16, r0
 8009c8c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009c90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c94:	4b9e      	ldr	r3, [pc, #632]	; (8009f10 <_printf_float+0x2d8>)
 8009c96:	f04f 32ff 	mov.w	r2, #4294967295
 8009c9a:	f7f6 ff5f 	bl	8000b5c <__aeabi_dcmpun>
 8009c9e:	bb88      	cbnz	r0, 8009d04 <_printf_float+0xcc>
 8009ca0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ca4:	4b9a      	ldr	r3, [pc, #616]	; (8009f10 <_printf_float+0x2d8>)
 8009ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8009caa:	f7f6 ff39 	bl	8000b20 <__aeabi_dcmple>
 8009cae:	bb48      	cbnz	r0, 8009d04 <_printf_float+0xcc>
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	f7f6 ff28 	bl	8000b0c <__aeabi_dcmplt>
 8009cbc:	b110      	cbz	r0, 8009cc4 <_printf_float+0x8c>
 8009cbe:	232d      	movs	r3, #45	; 0x2d
 8009cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cc4:	4a93      	ldr	r2, [pc, #588]	; (8009f14 <_printf_float+0x2dc>)
 8009cc6:	4b94      	ldr	r3, [pc, #592]	; (8009f18 <_printf_float+0x2e0>)
 8009cc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009ccc:	bf94      	ite	ls
 8009cce:	4690      	movls	r8, r2
 8009cd0:	4698      	movhi	r8, r3
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	6123      	str	r3, [r4, #16]
 8009cd6:	9b05      	ldr	r3, [sp, #20]
 8009cd8:	f023 0304 	bic.w	r3, r3, #4
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	f04f 0900 	mov.w	r9, #0
 8009ce2:	9700      	str	r7, [sp, #0]
 8009ce4:	4633      	mov	r3, r6
 8009ce6:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ce8:	4621      	mov	r1, r4
 8009cea:	4628      	mov	r0, r5
 8009cec:	f000 f9da 	bl	800a0a4 <_printf_common>
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	f040 8090 	bne.w	8009e16 <_printf_float+0x1de>
 8009cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cfa:	b00d      	add	sp, #52	; 0x34
 8009cfc:	ecbd 8b02 	vpop	{d8}
 8009d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d04:	4642      	mov	r2, r8
 8009d06:	464b      	mov	r3, r9
 8009d08:	4640      	mov	r0, r8
 8009d0a:	4649      	mov	r1, r9
 8009d0c:	f7f6 ff26 	bl	8000b5c <__aeabi_dcmpun>
 8009d10:	b140      	cbz	r0, 8009d24 <_printf_float+0xec>
 8009d12:	464b      	mov	r3, r9
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	bfbc      	itt	lt
 8009d18:	232d      	movlt	r3, #45	; 0x2d
 8009d1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d1e:	4a7f      	ldr	r2, [pc, #508]	; (8009f1c <_printf_float+0x2e4>)
 8009d20:	4b7f      	ldr	r3, [pc, #508]	; (8009f20 <_printf_float+0x2e8>)
 8009d22:	e7d1      	b.n	8009cc8 <_printf_float+0x90>
 8009d24:	6863      	ldr	r3, [r4, #4]
 8009d26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d2a:	9206      	str	r2, [sp, #24]
 8009d2c:	1c5a      	adds	r2, r3, #1
 8009d2e:	d13f      	bne.n	8009db0 <_printf_float+0x178>
 8009d30:	2306      	movs	r3, #6
 8009d32:	6063      	str	r3, [r4, #4]
 8009d34:	9b05      	ldr	r3, [sp, #20]
 8009d36:	6861      	ldr	r1, [r4, #4]
 8009d38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	9303      	str	r3, [sp, #12]
 8009d40:	ab0a      	add	r3, sp, #40	; 0x28
 8009d42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009d46:	ab09      	add	r3, sp, #36	; 0x24
 8009d48:	ec49 8b10 	vmov	d0, r8, r9
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	6022      	str	r2, [r4, #0]
 8009d50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009d54:	4628      	mov	r0, r5
 8009d56:	f7ff fece 	bl	8009af6 <__cvt>
 8009d5a:	9b06      	ldr	r3, [sp, #24]
 8009d5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d5e:	2b47      	cmp	r3, #71	; 0x47
 8009d60:	4680      	mov	r8, r0
 8009d62:	d108      	bne.n	8009d76 <_printf_float+0x13e>
 8009d64:	1cc8      	adds	r0, r1, #3
 8009d66:	db02      	blt.n	8009d6e <_printf_float+0x136>
 8009d68:	6863      	ldr	r3, [r4, #4]
 8009d6a:	4299      	cmp	r1, r3
 8009d6c:	dd41      	ble.n	8009df2 <_printf_float+0x1ba>
 8009d6e:	f1ab 0302 	sub.w	r3, fp, #2
 8009d72:	fa5f fb83 	uxtb.w	fp, r3
 8009d76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d7a:	d820      	bhi.n	8009dbe <_printf_float+0x186>
 8009d7c:	3901      	subs	r1, #1
 8009d7e:	465a      	mov	r2, fp
 8009d80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d84:	9109      	str	r1, [sp, #36]	; 0x24
 8009d86:	f7ff ff18 	bl	8009bba <__exponent>
 8009d8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d8c:	1813      	adds	r3, r2, r0
 8009d8e:	2a01      	cmp	r2, #1
 8009d90:	4681      	mov	r9, r0
 8009d92:	6123      	str	r3, [r4, #16]
 8009d94:	dc02      	bgt.n	8009d9c <_printf_float+0x164>
 8009d96:	6822      	ldr	r2, [r4, #0]
 8009d98:	07d2      	lsls	r2, r2, #31
 8009d9a:	d501      	bpl.n	8009da0 <_printf_float+0x168>
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	6123      	str	r3, [r4, #16]
 8009da0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d09c      	beq.n	8009ce2 <_printf_float+0xaa>
 8009da8:	232d      	movs	r3, #45	; 0x2d
 8009daa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dae:	e798      	b.n	8009ce2 <_printf_float+0xaa>
 8009db0:	9a06      	ldr	r2, [sp, #24]
 8009db2:	2a47      	cmp	r2, #71	; 0x47
 8009db4:	d1be      	bne.n	8009d34 <_printf_float+0xfc>
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1bc      	bne.n	8009d34 <_printf_float+0xfc>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e7b9      	b.n	8009d32 <_printf_float+0xfa>
 8009dbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009dc2:	d118      	bne.n	8009df6 <_printf_float+0x1be>
 8009dc4:	2900      	cmp	r1, #0
 8009dc6:	6863      	ldr	r3, [r4, #4]
 8009dc8:	dd0b      	ble.n	8009de2 <_printf_float+0x1aa>
 8009dca:	6121      	str	r1, [r4, #16]
 8009dcc:	b913      	cbnz	r3, 8009dd4 <_printf_float+0x19c>
 8009dce:	6822      	ldr	r2, [r4, #0]
 8009dd0:	07d0      	lsls	r0, r2, #31
 8009dd2:	d502      	bpl.n	8009dda <_printf_float+0x1a2>
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	440b      	add	r3, r1
 8009dd8:	6123      	str	r3, [r4, #16]
 8009dda:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ddc:	f04f 0900 	mov.w	r9, #0
 8009de0:	e7de      	b.n	8009da0 <_printf_float+0x168>
 8009de2:	b913      	cbnz	r3, 8009dea <_printf_float+0x1b2>
 8009de4:	6822      	ldr	r2, [r4, #0]
 8009de6:	07d2      	lsls	r2, r2, #31
 8009de8:	d501      	bpl.n	8009dee <_printf_float+0x1b6>
 8009dea:	3302      	adds	r3, #2
 8009dec:	e7f4      	b.n	8009dd8 <_printf_float+0x1a0>
 8009dee:	2301      	movs	r3, #1
 8009df0:	e7f2      	b.n	8009dd8 <_printf_float+0x1a0>
 8009df2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009df8:	4299      	cmp	r1, r3
 8009dfa:	db05      	blt.n	8009e08 <_printf_float+0x1d0>
 8009dfc:	6823      	ldr	r3, [r4, #0]
 8009dfe:	6121      	str	r1, [r4, #16]
 8009e00:	07d8      	lsls	r0, r3, #31
 8009e02:	d5ea      	bpl.n	8009dda <_printf_float+0x1a2>
 8009e04:	1c4b      	adds	r3, r1, #1
 8009e06:	e7e7      	b.n	8009dd8 <_printf_float+0x1a0>
 8009e08:	2900      	cmp	r1, #0
 8009e0a:	bfd4      	ite	le
 8009e0c:	f1c1 0202 	rsble	r2, r1, #2
 8009e10:	2201      	movgt	r2, #1
 8009e12:	4413      	add	r3, r2
 8009e14:	e7e0      	b.n	8009dd8 <_printf_float+0x1a0>
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	055a      	lsls	r2, r3, #21
 8009e1a:	d407      	bmi.n	8009e2c <_printf_float+0x1f4>
 8009e1c:	6923      	ldr	r3, [r4, #16]
 8009e1e:	4642      	mov	r2, r8
 8009e20:	4631      	mov	r1, r6
 8009e22:	4628      	mov	r0, r5
 8009e24:	47b8      	blx	r7
 8009e26:	3001      	adds	r0, #1
 8009e28:	d12c      	bne.n	8009e84 <_printf_float+0x24c>
 8009e2a:	e764      	b.n	8009cf6 <_printf_float+0xbe>
 8009e2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e30:	f240 80e0 	bls.w	8009ff4 <_printf_float+0x3bc>
 8009e34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e38:	2200      	movs	r2, #0
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	f7f6 fe5c 	bl	8000af8 <__aeabi_dcmpeq>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d034      	beq.n	8009eae <_printf_float+0x276>
 8009e44:	4a37      	ldr	r2, [pc, #220]	; (8009f24 <_printf_float+0x2ec>)
 8009e46:	2301      	movs	r3, #1
 8009e48:	4631      	mov	r1, r6
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	47b8      	blx	r7
 8009e4e:	3001      	adds	r0, #1
 8009e50:	f43f af51 	beq.w	8009cf6 <_printf_float+0xbe>
 8009e54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	db02      	blt.n	8009e62 <_printf_float+0x22a>
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	07d8      	lsls	r0, r3, #31
 8009e60:	d510      	bpl.n	8009e84 <_printf_float+0x24c>
 8009e62:	ee18 3a10 	vmov	r3, s16
 8009e66:	4652      	mov	r2, sl
 8009e68:	4631      	mov	r1, r6
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	47b8      	blx	r7
 8009e6e:	3001      	adds	r0, #1
 8009e70:	f43f af41 	beq.w	8009cf6 <_printf_float+0xbe>
 8009e74:	f04f 0800 	mov.w	r8, #0
 8009e78:	f104 091a 	add.w	r9, r4, #26
 8009e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	4543      	cmp	r3, r8
 8009e82:	dc09      	bgt.n	8009e98 <_printf_float+0x260>
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	079b      	lsls	r3, r3, #30
 8009e88:	f100 8107 	bmi.w	800a09a <_printf_float+0x462>
 8009e8c:	68e0      	ldr	r0, [r4, #12]
 8009e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e90:	4298      	cmp	r0, r3
 8009e92:	bfb8      	it	lt
 8009e94:	4618      	movlt	r0, r3
 8009e96:	e730      	b.n	8009cfa <_printf_float+0xc2>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	464a      	mov	r2, r9
 8009e9c:	4631      	mov	r1, r6
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	47b8      	blx	r7
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	f43f af27 	beq.w	8009cf6 <_printf_float+0xbe>
 8009ea8:	f108 0801 	add.w	r8, r8, #1
 8009eac:	e7e6      	b.n	8009e7c <_printf_float+0x244>
 8009eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	dc39      	bgt.n	8009f28 <_printf_float+0x2f0>
 8009eb4:	4a1b      	ldr	r2, [pc, #108]	; (8009f24 <_printf_float+0x2ec>)
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	4631      	mov	r1, r6
 8009eba:	4628      	mov	r0, r5
 8009ebc:	47b8      	blx	r7
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	f43f af19 	beq.w	8009cf6 <_printf_float+0xbe>
 8009ec4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	d102      	bne.n	8009ed2 <_printf_float+0x29a>
 8009ecc:	6823      	ldr	r3, [r4, #0]
 8009ece:	07d9      	lsls	r1, r3, #31
 8009ed0:	d5d8      	bpl.n	8009e84 <_printf_float+0x24c>
 8009ed2:	ee18 3a10 	vmov	r3, s16
 8009ed6:	4652      	mov	r2, sl
 8009ed8:	4631      	mov	r1, r6
 8009eda:	4628      	mov	r0, r5
 8009edc:	47b8      	blx	r7
 8009ede:	3001      	adds	r0, #1
 8009ee0:	f43f af09 	beq.w	8009cf6 <_printf_float+0xbe>
 8009ee4:	f04f 0900 	mov.w	r9, #0
 8009ee8:	f104 0a1a 	add.w	sl, r4, #26
 8009eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eee:	425b      	negs	r3, r3
 8009ef0:	454b      	cmp	r3, r9
 8009ef2:	dc01      	bgt.n	8009ef8 <_printf_float+0x2c0>
 8009ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ef6:	e792      	b.n	8009e1e <_printf_float+0x1e6>
 8009ef8:	2301      	movs	r3, #1
 8009efa:	4652      	mov	r2, sl
 8009efc:	4631      	mov	r1, r6
 8009efe:	4628      	mov	r0, r5
 8009f00:	47b8      	blx	r7
 8009f02:	3001      	adds	r0, #1
 8009f04:	f43f aef7 	beq.w	8009cf6 <_printf_float+0xbe>
 8009f08:	f109 0901 	add.w	r9, r9, #1
 8009f0c:	e7ee      	b.n	8009eec <_printf_float+0x2b4>
 8009f0e:	bf00      	nop
 8009f10:	7fefffff 	.word	0x7fefffff
 8009f14:	0800e610 	.word	0x0800e610
 8009f18:	0800e614 	.word	0x0800e614
 8009f1c:	0800e618 	.word	0x0800e618
 8009f20:	0800e61c 	.word	0x0800e61c
 8009f24:	0800e620 	.word	0x0800e620
 8009f28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	bfa8      	it	ge
 8009f30:	461a      	movge	r2, r3
 8009f32:	2a00      	cmp	r2, #0
 8009f34:	4691      	mov	r9, r2
 8009f36:	dc37      	bgt.n	8009fa8 <_printf_float+0x370>
 8009f38:	f04f 0b00 	mov.w	fp, #0
 8009f3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f40:	f104 021a 	add.w	r2, r4, #26
 8009f44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f46:	9305      	str	r3, [sp, #20]
 8009f48:	eba3 0309 	sub.w	r3, r3, r9
 8009f4c:	455b      	cmp	r3, fp
 8009f4e:	dc33      	bgt.n	8009fb8 <_printf_float+0x380>
 8009f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f54:	429a      	cmp	r2, r3
 8009f56:	db3b      	blt.n	8009fd0 <_printf_float+0x398>
 8009f58:	6823      	ldr	r3, [r4, #0]
 8009f5a:	07da      	lsls	r2, r3, #31
 8009f5c:	d438      	bmi.n	8009fd0 <_printf_float+0x398>
 8009f5e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009f62:	eba2 0903 	sub.w	r9, r2, r3
 8009f66:	9b05      	ldr	r3, [sp, #20]
 8009f68:	1ad2      	subs	r2, r2, r3
 8009f6a:	4591      	cmp	r9, r2
 8009f6c:	bfa8      	it	ge
 8009f6e:	4691      	movge	r9, r2
 8009f70:	f1b9 0f00 	cmp.w	r9, #0
 8009f74:	dc35      	bgt.n	8009fe2 <_printf_float+0x3aa>
 8009f76:	f04f 0800 	mov.w	r8, #0
 8009f7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f7e:	f104 0a1a 	add.w	sl, r4, #26
 8009f82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f86:	1a9b      	subs	r3, r3, r2
 8009f88:	eba3 0309 	sub.w	r3, r3, r9
 8009f8c:	4543      	cmp	r3, r8
 8009f8e:	f77f af79 	ble.w	8009e84 <_printf_float+0x24c>
 8009f92:	2301      	movs	r3, #1
 8009f94:	4652      	mov	r2, sl
 8009f96:	4631      	mov	r1, r6
 8009f98:	4628      	mov	r0, r5
 8009f9a:	47b8      	blx	r7
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	f43f aeaa 	beq.w	8009cf6 <_printf_float+0xbe>
 8009fa2:	f108 0801 	add.w	r8, r8, #1
 8009fa6:	e7ec      	b.n	8009f82 <_printf_float+0x34a>
 8009fa8:	4613      	mov	r3, r2
 8009faa:	4631      	mov	r1, r6
 8009fac:	4642      	mov	r2, r8
 8009fae:	4628      	mov	r0, r5
 8009fb0:	47b8      	blx	r7
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	d1c0      	bne.n	8009f38 <_printf_float+0x300>
 8009fb6:	e69e      	b.n	8009cf6 <_printf_float+0xbe>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	4631      	mov	r1, r6
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	9205      	str	r2, [sp, #20]
 8009fc0:	47b8      	blx	r7
 8009fc2:	3001      	adds	r0, #1
 8009fc4:	f43f ae97 	beq.w	8009cf6 <_printf_float+0xbe>
 8009fc8:	9a05      	ldr	r2, [sp, #20]
 8009fca:	f10b 0b01 	add.w	fp, fp, #1
 8009fce:	e7b9      	b.n	8009f44 <_printf_float+0x30c>
 8009fd0:	ee18 3a10 	vmov	r3, s16
 8009fd4:	4652      	mov	r2, sl
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4628      	mov	r0, r5
 8009fda:	47b8      	blx	r7
 8009fdc:	3001      	adds	r0, #1
 8009fde:	d1be      	bne.n	8009f5e <_printf_float+0x326>
 8009fe0:	e689      	b.n	8009cf6 <_printf_float+0xbe>
 8009fe2:	9a05      	ldr	r2, [sp, #20]
 8009fe4:	464b      	mov	r3, r9
 8009fe6:	4442      	add	r2, r8
 8009fe8:	4631      	mov	r1, r6
 8009fea:	4628      	mov	r0, r5
 8009fec:	47b8      	blx	r7
 8009fee:	3001      	adds	r0, #1
 8009ff0:	d1c1      	bne.n	8009f76 <_printf_float+0x33e>
 8009ff2:	e680      	b.n	8009cf6 <_printf_float+0xbe>
 8009ff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ff6:	2a01      	cmp	r2, #1
 8009ff8:	dc01      	bgt.n	8009ffe <_printf_float+0x3c6>
 8009ffa:	07db      	lsls	r3, r3, #31
 8009ffc:	d53a      	bpl.n	800a074 <_printf_float+0x43c>
 8009ffe:	2301      	movs	r3, #1
 800a000:	4642      	mov	r2, r8
 800a002:	4631      	mov	r1, r6
 800a004:	4628      	mov	r0, r5
 800a006:	47b8      	blx	r7
 800a008:	3001      	adds	r0, #1
 800a00a:	f43f ae74 	beq.w	8009cf6 <_printf_float+0xbe>
 800a00e:	ee18 3a10 	vmov	r3, s16
 800a012:	4652      	mov	r2, sl
 800a014:	4631      	mov	r1, r6
 800a016:	4628      	mov	r0, r5
 800a018:	47b8      	blx	r7
 800a01a:	3001      	adds	r0, #1
 800a01c:	f43f ae6b 	beq.w	8009cf6 <_printf_float+0xbe>
 800a020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a024:	2200      	movs	r2, #0
 800a026:	2300      	movs	r3, #0
 800a028:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a02c:	f7f6 fd64 	bl	8000af8 <__aeabi_dcmpeq>
 800a030:	b9d8      	cbnz	r0, 800a06a <_printf_float+0x432>
 800a032:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a036:	f108 0201 	add.w	r2, r8, #1
 800a03a:	4631      	mov	r1, r6
 800a03c:	4628      	mov	r0, r5
 800a03e:	47b8      	blx	r7
 800a040:	3001      	adds	r0, #1
 800a042:	d10e      	bne.n	800a062 <_printf_float+0x42a>
 800a044:	e657      	b.n	8009cf6 <_printf_float+0xbe>
 800a046:	2301      	movs	r3, #1
 800a048:	4652      	mov	r2, sl
 800a04a:	4631      	mov	r1, r6
 800a04c:	4628      	mov	r0, r5
 800a04e:	47b8      	blx	r7
 800a050:	3001      	adds	r0, #1
 800a052:	f43f ae50 	beq.w	8009cf6 <_printf_float+0xbe>
 800a056:	f108 0801 	add.w	r8, r8, #1
 800a05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a05c:	3b01      	subs	r3, #1
 800a05e:	4543      	cmp	r3, r8
 800a060:	dcf1      	bgt.n	800a046 <_printf_float+0x40e>
 800a062:	464b      	mov	r3, r9
 800a064:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a068:	e6da      	b.n	8009e20 <_printf_float+0x1e8>
 800a06a:	f04f 0800 	mov.w	r8, #0
 800a06e:	f104 0a1a 	add.w	sl, r4, #26
 800a072:	e7f2      	b.n	800a05a <_printf_float+0x422>
 800a074:	2301      	movs	r3, #1
 800a076:	4642      	mov	r2, r8
 800a078:	e7df      	b.n	800a03a <_printf_float+0x402>
 800a07a:	2301      	movs	r3, #1
 800a07c:	464a      	mov	r2, r9
 800a07e:	4631      	mov	r1, r6
 800a080:	4628      	mov	r0, r5
 800a082:	47b8      	blx	r7
 800a084:	3001      	adds	r0, #1
 800a086:	f43f ae36 	beq.w	8009cf6 <_printf_float+0xbe>
 800a08a:	f108 0801 	add.w	r8, r8, #1
 800a08e:	68e3      	ldr	r3, [r4, #12]
 800a090:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a092:	1a5b      	subs	r3, r3, r1
 800a094:	4543      	cmp	r3, r8
 800a096:	dcf0      	bgt.n	800a07a <_printf_float+0x442>
 800a098:	e6f8      	b.n	8009e8c <_printf_float+0x254>
 800a09a:	f04f 0800 	mov.w	r8, #0
 800a09e:	f104 0919 	add.w	r9, r4, #25
 800a0a2:	e7f4      	b.n	800a08e <_printf_float+0x456>

0800a0a4 <_printf_common>:
 800a0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a8:	4616      	mov	r6, r2
 800a0aa:	4699      	mov	r9, r3
 800a0ac:	688a      	ldr	r2, [r1, #8]
 800a0ae:	690b      	ldr	r3, [r1, #16]
 800a0b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	bfb8      	it	lt
 800a0b8:	4613      	movlt	r3, r2
 800a0ba:	6033      	str	r3, [r6, #0]
 800a0bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0c0:	4607      	mov	r7, r0
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	b10a      	cbz	r2, 800a0ca <_printf_common+0x26>
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	6033      	str	r3, [r6, #0]
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	0699      	lsls	r1, r3, #26
 800a0ce:	bf42      	ittt	mi
 800a0d0:	6833      	ldrmi	r3, [r6, #0]
 800a0d2:	3302      	addmi	r3, #2
 800a0d4:	6033      	strmi	r3, [r6, #0]
 800a0d6:	6825      	ldr	r5, [r4, #0]
 800a0d8:	f015 0506 	ands.w	r5, r5, #6
 800a0dc:	d106      	bne.n	800a0ec <_printf_common+0x48>
 800a0de:	f104 0a19 	add.w	sl, r4, #25
 800a0e2:	68e3      	ldr	r3, [r4, #12]
 800a0e4:	6832      	ldr	r2, [r6, #0]
 800a0e6:	1a9b      	subs	r3, r3, r2
 800a0e8:	42ab      	cmp	r3, r5
 800a0ea:	dc26      	bgt.n	800a13a <_printf_common+0x96>
 800a0ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0f0:	1e13      	subs	r3, r2, #0
 800a0f2:	6822      	ldr	r2, [r4, #0]
 800a0f4:	bf18      	it	ne
 800a0f6:	2301      	movne	r3, #1
 800a0f8:	0692      	lsls	r2, r2, #26
 800a0fa:	d42b      	bmi.n	800a154 <_printf_common+0xb0>
 800a0fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a100:	4649      	mov	r1, r9
 800a102:	4638      	mov	r0, r7
 800a104:	47c0      	blx	r8
 800a106:	3001      	adds	r0, #1
 800a108:	d01e      	beq.n	800a148 <_printf_common+0xa4>
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	6922      	ldr	r2, [r4, #16]
 800a10e:	f003 0306 	and.w	r3, r3, #6
 800a112:	2b04      	cmp	r3, #4
 800a114:	bf02      	ittt	eq
 800a116:	68e5      	ldreq	r5, [r4, #12]
 800a118:	6833      	ldreq	r3, [r6, #0]
 800a11a:	1aed      	subeq	r5, r5, r3
 800a11c:	68a3      	ldr	r3, [r4, #8]
 800a11e:	bf0c      	ite	eq
 800a120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a124:	2500      	movne	r5, #0
 800a126:	4293      	cmp	r3, r2
 800a128:	bfc4      	itt	gt
 800a12a:	1a9b      	subgt	r3, r3, r2
 800a12c:	18ed      	addgt	r5, r5, r3
 800a12e:	2600      	movs	r6, #0
 800a130:	341a      	adds	r4, #26
 800a132:	42b5      	cmp	r5, r6
 800a134:	d11a      	bne.n	800a16c <_printf_common+0xc8>
 800a136:	2000      	movs	r0, #0
 800a138:	e008      	b.n	800a14c <_printf_common+0xa8>
 800a13a:	2301      	movs	r3, #1
 800a13c:	4652      	mov	r2, sl
 800a13e:	4649      	mov	r1, r9
 800a140:	4638      	mov	r0, r7
 800a142:	47c0      	blx	r8
 800a144:	3001      	adds	r0, #1
 800a146:	d103      	bne.n	800a150 <_printf_common+0xac>
 800a148:	f04f 30ff 	mov.w	r0, #4294967295
 800a14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a150:	3501      	adds	r5, #1
 800a152:	e7c6      	b.n	800a0e2 <_printf_common+0x3e>
 800a154:	18e1      	adds	r1, r4, r3
 800a156:	1c5a      	adds	r2, r3, #1
 800a158:	2030      	movs	r0, #48	; 0x30
 800a15a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a15e:	4422      	add	r2, r4
 800a160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a168:	3302      	adds	r3, #2
 800a16a:	e7c7      	b.n	800a0fc <_printf_common+0x58>
 800a16c:	2301      	movs	r3, #1
 800a16e:	4622      	mov	r2, r4
 800a170:	4649      	mov	r1, r9
 800a172:	4638      	mov	r0, r7
 800a174:	47c0      	blx	r8
 800a176:	3001      	adds	r0, #1
 800a178:	d0e6      	beq.n	800a148 <_printf_common+0xa4>
 800a17a:	3601      	adds	r6, #1
 800a17c:	e7d9      	b.n	800a132 <_printf_common+0x8e>
	...

0800a180 <_printf_i>:
 800a180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a184:	7e0f      	ldrb	r7, [r1, #24]
 800a186:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a188:	2f78      	cmp	r7, #120	; 0x78
 800a18a:	4691      	mov	r9, r2
 800a18c:	4680      	mov	r8, r0
 800a18e:	460c      	mov	r4, r1
 800a190:	469a      	mov	sl, r3
 800a192:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a196:	d807      	bhi.n	800a1a8 <_printf_i+0x28>
 800a198:	2f62      	cmp	r7, #98	; 0x62
 800a19a:	d80a      	bhi.n	800a1b2 <_printf_i+0x32>
 800a19c:	2f00      	cmp	r7, #0
 800a19e:	f000 80d4 	beq.w	800a34a <_printf_i+0x1ca>
 800a1a2:	2f58      	cmp	r7, #88	; 0x58
 800a1a4:	f000 80c0 	beq.w	800a328 <_printf_i+0x1a8>
 800a1a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1b0:	e03a      	b.n	800a228 <_printf_i+0xa8>
 800a1b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1b6:	2b15      	cmp	r3, #21
 800a1b8:	d8f6      	bhi.n	800a1a8 <_printf_i+0x28>
 800a1ba:	a101      	add	r1, pc, #4	; (adr r1, 800a1c0 <_printf_i+0x40>)
 800a1bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1c0:	0800a219 	.word	0x0800a219
 800a1c4:	0800a22d 	.word	0x0800a22d
 800a1c8:	0800a1a9 	.word	0x0800a1a9
 800a1cc:	0800a1a9 	.word	0x0800a1a9
 800a1d0:	0800a1a9 	.word	0x0800a1a9
 800a1d4:	0800a1a9 	.word	0x0800a1a9
 800a1d8:	0800a22d 	.word	0x0800a22d
 800a1dc:	0800a1a9 	.word	0x0800a1a9
 800a1e0:	0800a1a9 	.word	0x0800a1a9
 800a1e4:	0800a1a9 	.word	0x0800a1a9
 800a1e8:	0800a1a9 	.word	0x0800a1a9
 800a1ec:	0800a331 	.word	0x0800a331
 800a1f0:	0800a259 	.word	0x0800a259
 800a1f4:	0800a2eb 	.word	0x0800a2eb
 800a1f8:	0800a1a9 	.word	0x0800a1a9
 800a1fc:	0800a1a9 	.word	0x0800a1a9
 800a200:	0800a353 	.word	0x0800a353
 800a204:	0800a1a9 	.word	0x0800a1a9
 800a208:	0800a259 	.word	0x0800a259
 800a20c:	0800a1a9 	.word	0x0800a1a9
 800a210:	0800a1a9 	.word	0x0800a1a9
 800a214:	0800a2f3 	.word	0x0800a2f3
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	1d1a      	adds	r2, r3, #4
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	602a      	str	r2, [r5, #0]
 800a220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a228:	2301      	movs	r3, #1
 800a22a:	e09f      	b.n	800a36c <_printf_i+0x1ec>
 800a22c:	6820      	ldr	r0, [r4, #0]
 800a22e:	682b      	ldr	r3, [r5, #0]
 800a230:	0607      	lsls	r7, r0, #24
 800a232:	f103 0104 	add.w	r1, r3, #4
 800a236:	6029      	str	r1, [r5, #0]
 800a238:	d501      	bpl.n	800a23e <_printf_i+0xbe>
 800a23a:	681e      	ldr	r6, [r3, #0]
 800a23c:	e003      	b.n	800a246 <_printf_i+0xc6>
 800a23e:	0646      	lsls	r6, r0, #25
 800a240:	d5fb      	bpl.n	800a23a <_printf_i+0xba>
 800a242:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a246:	2e00      	cmp	r6, #0
 800a248:	da03      	bge.n	800a252 <_printf_i+0xd2>
 800a24a:	232d      	movs	r3, #45	; 0x2d
 800a24c:	4276      	negs	r6, r6
 800a24e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a252:	485a      	ldr	r0, [pc, #360]	; (800a3bc <_printf_i+0x23c>)
 800a254:	230a      	movs	r3, #10
 800a256:	e012      	b.n	800a27e <_printf_i+0xfe>
 800a258:	682b      	ldr	r3, [r5, #0]
 800a25a:	6820      	ldr	r0, [r4, #0]
 800a25c:	1d19      	adds	r1, r3, #4
 800a25e:	6029      	str	r1, [r5, #0]
 800a260:	0605      	lsls	r5, r0, #24
 800a262:	d501      	bpl.n	800a268 <_printf_i+0xe8>
 800a264:	681e      	ldr	r6, [r3, #0]
 800a266:	e002      	b.n	800a26e <_printf_i+0xee>
 800a268:	0641      	lsls	r1, r0, #25
 800a26a:	d5fb      	bpl.n	800a264 <_printf_i+0xe4>
 800a26c:	881e      	ldrh	r6, [r3, #0]
 800a26e:	4853      	ldr	r0, [pc, #332]	; (800a3bc <_printf_i+0x23c>)
 800a270:	2f6f      	cmp	r7, #111	; 0x6f
 800a272:	bf0c      	ite	eq
 800a274:	2308      	moveq	r3, #8
 800a276:	230a      	movne	r3, #10
 800a278:	2100      	movs	r1, #0
 800a27a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a27e:	6865      	ldr	r5, [r4, #4]
 800a280:	60a5      	str	r5, [r4, #8]
 800a282:	2d00      	cmp	r5, #0
 800a284:	bfa2      	ittt	ge
 800a286:	6821      	ldrge	r1, [r4, #0]
 800a288:	f021 0104 	bicge.w	r1, r1, #4
 800a28c:	6021      	strge	r1, [r4, #0]
 800a28e:	b90e      	cbnz	r6, 800a294 <_printf_i+0x114>
 800a290:	2d00      	cmp	r5, #0
 800a292:	d04b      	beq.n	800a32c <_printf_i+0x1ac>
 800a294:	4615      	mov	r5, r2
 800a296:	fbb6 f1f3 	udiv	r1, r6, r3
 800a29a:	fb03 6711 	mls	r7, r3, r1, r6
 800a29e:	5dc7      	ldrb	r7, [r0, r7]
 800a2a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2a4:	4637      	mov	r7, r6
 800a2a6:	42bb      	cmp	r3, r7
 800a2a8:	460e      	mov	r6, r1
 800a2aa:	d9f4      	bls.n	800a296 <_printf_i+0x116>
 800a2ac:	2b08      	cmp	r3, #8
 800a2ae:	d10b      	bne.n	800a2c8 <_printf_i+0x148>
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	07de      	lsls	r6, r3, #31
 800a2b4:	d508      	bpl.n	800a2c8 <_printf_i+0x148>
 800a2b6:	6923      	ldr	r3, [r4, #16]
 800a2b8:	6861      	ldr	r1, [r4, #4]
 800a2ba:	4299      	cmp	r1, r3
 800a2bc:	bfde      	ittt	le
 800a2be:	2330      	movle	r3, #48	; 0x30
 800a2c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a2c8:	1b52      	subs	r2, r2, r5
 800a2ca:	6122      	str	r2, [r4, #16]
 800a2cc:	f8cd a000 	str.w	sl, [sp]
 800a2d0:	464b      	mov	r3, r9
 800a2d2:	aa03      	add	r2, sp, #12
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	4640      	mov	r0, r8
 800a2d8:	f7ff fee4 	bl	800a0a4 <_printf_common>
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d14a      	bne.n	800a376 <_printf_i+0x1f6>
 800a2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e4:	b004      	add	sp, #16
 800a2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	f043 0320 	orr.w	r3, r3, #32
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	4833      	ldr	r0, [pc, #204]	; (800a3c0 <_printf_i+0x240>)
 800a2f4:	2778      	movs	r7, #120	; 0x78
 800a2f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	6829      	ldr	r1, [r5, #0]
 800a2fe:	061f      	lsls	r7, r3, #24
 800a300:	f851 6b04 	ldr.w	r6, [r1], #4
 800a304:	d402      	bmi.n	800a30c <_printf_i+0x18c>
 800a306:	065f      	lsls	r7, r3, #25
 800a308:	bf48      	it	mi
 800a30a:	b2b6      	uxthmi	r6, r6
 800a30c:	07df      	lsls	r7, r3, #31
 800a30e:	bf48      	it	mi
 800a310:	f043 0320 	orrmi.w	r3, r3, #32
 800a314:	6029      	str	r1, [r5, #0]
 800a316:	bf48      	it	mi
 800a318:	6023      	strmi	r3, [r4, #0]
 800a31a:	b91e      	cbnz	r6, 800a324 <_printf_i+0x1a4>
 800a31c:	6823      	ldr	r3, [r4, #0]
 800a31e:	f023 0320 	bic.w	r3, r3, #32
 800a322:	6023      	str	r3, [r4, #0]
 800a324:	2310      	movs	r3, #16
 800a326:	e7a7      	b.n	800a278 <_printf_i+0xf8>
 800a328:	4824      	ldr	r0, [pc, #144]	; (800a3bc <_printf_i+0x23c>)
 800a32a:	e7e4      	b.n	800a2f6 <_printf_i+0x176>
 800a32c:	4615      	mov	r5, r2
 800a32e:	e7bd      	b.n	800a2ac <_printf_i+0x12c>
 800a330:	682b      	ldr	r3, [r5, #0]
 800a332:	6826      	ldr	r6, [r4, #0]
 800a334:	6961      	ldr	r1, [r4, #20]
 800a336:	1d18      	adds	r0, r3, #4
 800a338:	6028      	str	r0, [r5, #0]
 800a33a:	0635      	lsls	r5, r6, #24
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	d501      	bpl.n	800a344 <_printf_i+0x1c4>
 800a340:	6019      	str	r1, [r3, #0]
 800a342:	e002      	b.n	800a34a <_printf_i+0x1ca>
 800a344:	0670      	lsls	r0, r6, #25
 800a346:	d5fb      	bpl.n	800a340 <_printf_i+0x1c0>
 800a348:	8019      	strh	r1, [r3, #0]
 800a34a:	2300      	movs	r3, #0
 800a34c:	6123      	str	r3, [r4, #16]
 800a34e:	4615      	mov	r5, r2
 800a350:	e7bc      	b.n	800a2cc <_printf_i+0x14c>
 800a352:	682b      	ldr	r3, [r5, #0]
 800a354:	1d1a      	adds	r2, r3, #4
 800a356:	602a      	str	r2, [r5, #0]
 800a358:	681d      	ldr	r5, [r3, #0]
 800a35a:	6862      	ldr	r2, [r4, #4]
 800a35c:	2100      	movs	r1, #0
 800a35e:	4628      	mov	r0, r5
 800a360:	f7f5 ff4e 	bl	8000200 <memchr>
 800a364:	b108      	cbz	r0, 800a36a <_printf_i+0x1ea>
 800a366:	1b40      	subs	r0, r0, r5
 800a368:	6060      	str	r0, [r4, #4]
 800a36a:	6863      	ldr	r3, [r4, #4]
 800a36c:	6123      	str	r3, [r4, #16]
 800a36e:	2300      	movs	r3, #0
 800a370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a374:	e7aa      	b.n	800a2cc <_printf_i+0x14c>
 800a376:	6923      	ldr	r3, [r4, #16]
 800a378:	462a      	mov	r2, r5
 800a37a:	4649      	mov	r1, r9
 800a37c:	4640      	mov	r0, r8
 800a37e:	47d0      	blx	sl
 800a380:	3001      	adds	r0, #1
 800a382:	d0ad      	beq.n	800a2e0 <_printf_i+0x160>
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	079b      	lsls	r3, r3, #30
 800a388:	d413      	bmi.n	800a3b2 <_printf_i+0x232>
 800a38a:	68e0      	ldr	r0, [r4, #12]
 800a38c:	9b03      	ldr	r3, [sp, #12]
 800a38e:	4298      	cmp	r0, r3
 800a390:	bfb8      	it	lt
 800a392:	4618      	movlt	r0, r3
 800a394:	e7a6      	b.n	800a2e4 <_printf_i+0x164>
 800a396:	2301      	movs	r3, #1
 800a398:	4632      	mov	r2, r6
 800a39a:	4649      	mov	r1, r9
 800a39c:	4640      	mov	r0, r8
 800a39e:	47d0      	blx	sl
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	d09d      	beq.n	800a2e0 <_printf_i+0x160>
 800a3a4:	3501      	adds	r5, #1
 800a3a6:	68e3      	ldr	r3, [r4, #12]
 800a3a8:	9903      	ldr	r1, [sp, #12]
 800a3aa:	1a5b      	subs	r3, r3, r1
 800a3ac:	42ab      	cmp	r3, r5
 800a3ae:	dcf2      	bgt.n	800a396 <_printf_i+0x216>
 800a3b0:	e7eb      	b.n	800a38a <_printf_i+0x20a>
 800a3b2:	2500      	movs	r5, #0
 800a3b4:	f104 0619 	add.w	r6, r4, #25
 800a3b8:	e7f5      	b.n	800a3a6 <_printf_i+0x226>
 800a3ba:	bf00      	nop
 800a3bc:	0800e622 	.word	0x0800e622
 800a3c0:	0800e633 	.word	0x0800e633

0800a3c4 <std>:
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	b510      	push	{r4, lr}
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a3ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3d2:	6083      	str	r3, [r0, #8]
 800a3d4:	8181      	strh	r1, [r0, #12]
 800a3d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a3d8:	81c2      	strh	r2, [r0, #14]
 800a3da:	6183      	str	r3, [r0, #24]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	2208      	movs	r2, #8
 800a3e0:	305c      	adds	r0, #92	; 0x5c
 800a3e2:	f000 f9f7 	bl	800a7d4 <memset>
 800a3e6:	4b0d      	ldr	r3, [pc, #52]	; (800a41c <std+0x58>)
 800a3e8:	6263      	str	r3, [r4, #36]	; 0x24
 800a3ea:	4b0d      	ldr	r3, [pc, #52]	; (800a420 <std+0x5c>)
 800a3ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3ee:	4b0d      	ldr	r3, [pc, #52]	; (800a424 <std+0x60>)
 800a3f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3f2:	4b0d      	ldr	r3, [pc, #52]	; (800a428 <std+0x64>)
 800a3f4:	6323      	str	r3, [r4, #48]	; 0x30
 800a3f6:	4b0d      	ldr	r3, [pc, #52]	; (800a42c <std+0x68>)
 800a3f8:	6224      	str	r4, [r4, #32]
 800a3fa:	429c      	cmp	r4, r3
 800a3fc:	d006      	beq.n	800a40c <std+0x48>
 800a3fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a402:	4294      	cmp	r4, r2
 800a404:	d002      	beq.n	800a40c <std+0x48>
 800a406:	33d0      	adds	r3, #208	; 0xd0
 800a408:	429c      	cmp	r4, r3
 800a40a:	d105      	bne.n	800a418 <std+0x54>
 800a40c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a414:	f000 ba6e 	b.w	800a8f4 <__retarget_lock_init_recursive>
 800a418:	bd10      	pop	{r4, pc}
 800a41a:	bf00      	nop
 800a41c:	0800a5f1 	.word	0x0800a5f1
 800a420:	0800a613 	.word	0x0800a613
 800a424:	0800a64b 	.word	0x0800a64b
 800a428:	0800a66f 	.word	0x0800a66f
 800a42c:	20003acc 	.word	0x20003acc

0800a430 <stdio_exit_handler>:
 800a430:	4a02      	ldr	r2, [pc, #8]	; (800a43c <stdio_exit_handler+0xc>)
 800a432:	4903      	ldr	r1, [pc, #12]	; (800a440 <stdio_exit_handler+0x10>)
 800a434:	4803      	ldr	r0, [pc, #12]	; (800a444 <stdio_exit_handler+0x14>)
 800a436:	f000 b869 	b.w	800a50c <_fwalk_sglue>
 800a43a:	bf00      	nop
 800a43c:	200007b8 	.word	0x200007b8
 800a440:	0800c2c1 	.word	0x0800c2c1
 800a444:	200007c4 	.word	0x200007c4

0800a448 <cleanup_stdio>:
 800a448:	6841      	ldr	r1, [r0, #4]
 800a44a:	4b0c      	ldr	r3, [pc, #48]	; (800a47c <cleanup_stdio+0x34>)
 800a44c:	4299      	cmp	r1, r3
 800a44e:	b510      	push	{r4, lr}
 800a450:	4604      	mov	r4, r0
 800a452:	d001      	beq.n	800a458 <cleanup_stdio+0x10>
 800a454:	f001 ff34 	bl	800c2c0 <_fflush_r>
 800a458:	68a1      	ldr	r1, [r4, #8]
 800a45a:	4b09      	ldr	r3, [pc, #36]	; (800a480 <cleanup_stdio+0x38>)
 800a45c:	4299      	cmp	r1, r3
 800a45e:	d002      	beq.n	800a466 <cleanup_stdio+0x1e>
 800a460:	4620      	mov	r0, r4
 800a462:	f001 ff2d 	bl	800c2c0 <_fflush_r>
 800a466:	68e1      	ldr	r1, [r4, #12]
 800a468:	4b06      	ldr	r3, [pc, #24]	; (800a484 <cleanup_stdio+0x3c>)
 800a46a:	4299      	cmp	r1, r3
 800a46c:	d004      	beq.n	800a478 <cleanup_stdio+0x30>
 800a46e:	4620      	mov	r0, r4
 800a470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a474:	f001 bf24 	b.w	800c2c0 <_fflush_r>
 800a478:	bd10      	pop	{r4, pc}
 800a47a:	bf00      	nop
 800a47c:	20003acc 	.word	0x20003acc
 800a480:	20003b34 	.word	0x20003b34
 800a484:	20003b9c 	.word	0x20003b9c

0800a488 <global_stdio_init.part.0>:
 800a488:	b510      	push	{r4, lr}
 800a48a:	4b0b      	ldr	r3, [pc, #44]	; (800a4b8 <global_stdio_init.part.0+0x30>)
 800a48c:	4c0b      	ldr	r4, [pc, #44]	; (800a4bc <global_stdio_init.part.0+0x34>)
 800a48e:	4a0c      	ldr	r2, [pc, #48]	; (800a4c0 <global_stdio_init.part.0+0x38>)
 800a490:	601a      	str	r2, [r3, #0]
 800a492:	4620      	mov	r0, r4
 800a494:	2200      	movs	r2, #0
 800a496:	2104      	movs	r1, #4
 800a498:	f7ff ff94 	bl	800a3c4 <std>
 800a49c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	2109      	movs	r1, #9
 800a4a4:	f7ff ff8e 	bl	800a3c4 <std>
 800a4a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a4ac:	2202      	movs	r2, #2
 800a4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4b2:	2112      	movs	r1, #18
 800a4b4:	f7ff bf86 	b.w	800a3c4 <std>
 800a4b8:	20003c04 	.word	0x20003c04
 800a4bc:	20003acc 	.word	0x20003acc
 800a4c0:	0800a431 	.word	0x0800a431

0800a4c4 <__sfp_lock_acquire>:
 800a4c4:	4801      	ldr	r0, [pc, #4]	; (800a4cc <__sfp_lock_acquire+0x8>)
 800a4c6:	f000 ba16 	b.w	800a8f6 <__retarget_lock_acquire_recursive>
 800a4ca:	bf00      	nop
 800a4cc:	20003c0d 	.word	0x20003c0d

0800a4d0 <__sfp_lock_release>:
 800a4d0:	4801      	ldr	r0, [pc, #4]	; (800a4d8 <__sfp_lock_release+0x8>)
 800a4d2:	f000 ba11 	b.w	800a8f8 <__retarget_lock_release_recursive>
 800a4d6:	bf00      	nop
 800a4d8:	20003c0d 	.word	0x20003c0d

0800a4dc <__sinit>:
 800a4dc:	b510      	push	{r4, lr}
 800a4de:	4604      	mov	r4, r0
 800a4e0:	f7ff fff0 	bl	800a4c4 <__sfp_lock_acquire>
 800a4e4:	6a23      	ldr	r3, [r4, #32]
 800a4e6:	b11b      	cbz	r3, 800a4f0 <__sinit+0x14>
 800a4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4ec:	f7ff bff0 	b.w	800a4d0 <__sfp_lock_release>
 800a4f0:	4b04      	ldr	r3, [pc, #16]	; (800a504 <__sinit+0x28>)
 800a4f2:	6223      	str	r3, [r4, #32]
 800a4f4:	4b04      	ldr	r3, [pc, #16]	; (800a508 <__sinit+0x2c>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1f5      	bne.n	800a4e8 <__sinit+0xc>
 800a4fc:	f7ff ffc4 	bl	800a488 <global_stdio_init.part.0>
 800a500:	e7f2      	b.n	800a4e8 <__sinit+0xc>
 800a502:	bf00      	nop
 800a504:	0800a449 	.word	0x0800a449
 800a508:	20003c04 	.word	0x20003c04

0800a50c <_fwalk_sglue>:
 800a50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a510:	4607      	mov	r7, r0
 800a512:	4688      	mov	r8, r1
 800a514:	4614      	mov	r4, r2
 800a516:	2600      	movs	r6, #0
 800a518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a51c:	f1b9 0901 	subs.w	r9, r9, #1
 800a520:	d505      	bpl.n	800a52e <_fwalk_sglue+0x22>
 800a522:	6824      	ldr	r4, [r4, #0]
 800a524:	2c00      	cmp	r4, #0
 800a526:	d1f7      	bne.n	800a518 <_fwalk_sglue+0xc>
 800a528:	4630      	mov	r0, r6
 800a52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a52e:	89ab      	ldrh	r3, [r5, #12]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d907      	bls.n	800a544 <_fwalk_sglue+0x38>
 800a534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a538:	3301      	adds	r3, #1
 800a53a:	d003      	beq.n	800a544 <_fwalk_sglue+0x38>
 800a53c:	4629      	mov	r1, r5
 800a53e:	4638      	mov	r0, r7
 800a540:	47c0      	blx	r8
 800a542:	4306      	orrs	r6, r0
 800a544:	3568      	adds	r5, #104	; 0x68
 800a546:	e7e9      	b.n	800a51c <_fwalk_sglue+0x10>

0800a548 <sniprintf>:
 800a548:	b40c      	push	{r2, r3}
 800a54a:	b530      	push	{r4, r5, lr}
 800a54c:	4b17      	ldr	r3, [pc, #92]	; (800a5ac <sniprintf+0x64>)
 800a54e:	1e0c      	subs	r4, r1, #0
 800a550:	681d      	ldr	r5, [r3, #0]
 800a552:	b09d      	sub	sp, #116	; 0x74
 800a554:	da08      	bge.n	800a568 <sniprintf+0x20>
 800a556:	238b      	movs	r3, #139	; 0x8b
 800a558:	602b      	str	r3, [r5, #0]
 800a55a:	f04f 30ff 	mov.w	r0, #4294967295
 800a55e:	b01d      	add	sp, #116	; 0x74
 800a560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a564:	b002      	add	sp, #8
 800a566:	4770      	bx	lr
 800a568:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a56c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a570:	bf14      	ite	ne
 800a572:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a576:	4623      	moveq	r3, r4
 800a578:	9304      	str	r3, [sp, #16]
 800a57a:	9307      	str	r3, [sp, #28]
 800a57c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a580:	9002      	str	r0, [sp, #8]
 800a582:	9006      	str	r0, [sp, #24]
 800a584:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a588:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a58a:	ab21      	add	r3, sp, #132	; 0x84
 800a58c:	a902      	add	r1, sp, #8
 800a58e:	4628      	mov	r0, r5
 800a590:	9301      	str	r3, [sp, #4]
 800a592:	f001 fd11 	bl	800bfb8 <_svfiprintf_r>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	bfbc      	itt	lt
 800a59a:	238b      	movlt	r3, #139	; 0x8b
 800a59c:	602b      	strlt	r3, [r5, #0]
 800a59e:	2c00      	cmp	r4, #0
 800a5a0:	d0dd      	beq.n	800a55e <sniprintf+0x16>
 800a5a2:	9b02      	ldr	r3, [sp, #8]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	701a      	strb	r2, [r3, #0]
 800a5a8:	e7d9      	b.n	800a55e <sniprintf+0x16>
 800a5aa:	bf00      	nop
 800a5ac:	20000810 	.word	0x20000810

0800a5b0 <siprintf>:
 800a5b0:	b40e      	push	{r1, r2, r3}
 800a5b2:	b500      	push	{lr}
 800a5b4:	b09c      	sub	sp, #112	; 0x70
 800a5b6:	ab1d      	add	r3, sp, #116	; 0x74
 800a5b8:	9002      	str	r0, [sp, #8]
 800a5ba:	9006      	str	r0, [sp, #24]
 800a5bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5c0:	4809      	ldr	r0, [pc, #36]	; (800a5e8 <siprintf+0x38>)
 800a5c2:	9107      	str	r1, [sp, #28]
 800a5c4:	9104      	str	r1, [sp, #16]
 800a5c6:	4909      	ldr	r1, [pc, #36]	; (800a5ec <siprintf+0x3c>)
 800a5c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5cc:	9105      	str	r1, [sp, #20]
 800a5ce:	6800      	ldr	r0, [r0, #0]
 800a5d0:	9301      	str	r3, [sp, #4]
 800a5d2:	a902      	add	r1, sp, #8
 800a5d4:	f001 fcf0 	bl	800bfb8 <_svfiprintf_r>
 800a5d8:	9b02      	ldr	r3, [sp, #8]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	701a      	strb	r2, [r3, #0]
 800a5de:	b01c      	add	sp, #112	; 0x70
 800a5e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5e4:	b003      	add	sp, #12
 800a5e6:	4770      	bx	lr
 800a5e8:	20000810 	.word	0x20000810
 800a5ec:	ffff0208 	.word	0xffff0208

0800a5f0 <__sread>:
 800a5f0:	b510      	push	{r4, lr}
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f8:	f000 f92e 	bl	800a858 <_read_r>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	bfab      	itete	ge
 800a600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a602:	89a3      	ldrhlt	r3, [r4, #12]
 800a604:	181b      	addge	r3, r3, r0
 800a606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a60a:	bfac      	ite	ge
 800a60c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a60e:	81a3      	strhlt	r3, [r4, #12]
 800a610:	bd10      	pop	{r4, pc}

0800a612 <__swrite>:
 800a612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a616:	461f      	mov	r7, r3
 800a618:	898b      	ldrh	r3, [r1, #12]
 800a61a:	05db      	lsls	r3, r3, #23
 800a61c:	4605      	mov	r5, r0
 800a61e:	460c      	mov	r4, r1
 800a620:	4616      	mov	r6, r2
 800a622:	d505      	bpl.n	800a630 <__swrite+0x1e>
 800a624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a628:	2302      	movs	r3, #2
 800a62a:	2200      	movs	r2, #0
 800a62c:	f000 f902 	bl	800a834 <_lseek_r>
 800a630:	89a3      	ldrh	r3, [r4, #12]
 800a632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a63a:	81a3      	strh	r3, [r4, #12]
 800a63c:	4632      	mov	r2, r6
 800a63e:	463b      	mov	r3, r7
 800a640:	4628      	mov	r0, r5
 800a642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a646:	f000 b919 	b.w	800a87c <_write_r>

0800a64a <__sseek>:
 800a64a:	b510      	push	{r4, lr}
 800a64c:	460c      	mov	r4, r1
 800a64e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a652:	f000 f8ef 	bl	800a834 <_lseek_r>
 800a656:	1c43      	adds	r3, r0, #1
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	bf15      	itete	ne
 800a65c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a65e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a666:	81a3      	strheq	r3, [r4, #12]
 800a668:	bf18      	it	ne
 800a66a:	81a3      	strhne	r3, [r4, #12]
 800a66c:	bd10      	pop	{r4, pc}

0800a66e <__sclose>:
 800a66e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a672:	f000 b8cf 	b.w	800a814 <_close_r>

0800a676 <__swbuf_r>:
 800a676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a678:	460e      	mov	r6, r1
 800a67a:	4614      	mov	r4, r2
 800a67c:	4605      	mov	r5, r0
 800a67e:	b118      	cbz	r0, 800a688 <__swbuf_r+0x12>
 800a680:	6a03      	ldr	r3, [r0, #32]
 800a682:	b90b      	cbnz	r3, 800a688 <__swbuf_r+0x12>
 800a684:	f7ff ff2a 	bl	800a4dc <__sinit>
 800a688:	69a3      	ldr	r3, [r4, #24]
 800a68a:	60a3      	str	r3, [r4, #8]
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	071a      	lsls	r2, r3, #28
 800a690:	d525      	bpl.n	800a6de <__swbuf_r+0x68>
 800a692:	6923      	ldr	r3, [r4, #16]
 800a694:	b31b      	cbz	r3, 800a6de <__swbuf_r+0x68>
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	6922      	ldr	r2, [r4, #16]
 800a69a:	1a98      	subs	r0, r3, r2
 800a69c:	6963      	ldr	r3, [r4, #20]
 800a69e:	b2f6      	uxtb	r6, r6
 800a6a0:	4283      	cmp	r3, r0
 800a6a2:	4637      	mov	r7, r6
 800a6a4:	dc04      	bgt.n	800a6b0 <__swbuf_r+0x3a>
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	f001 fe09 	bl	800c2c0 <_fflush_r>
 800a6ae:	b9e0      	cbnz	r0, 800a6ea <__swbuf_r+0x74>
 800a6b0:	68a3      	ldr	r3, [r4, #8]
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	60a3      	str	r3, [r4, #8]
 800a6b6:	6823      	ldr	r3, [r4, #0]
 800a6b8:	1c5a      	adds	r2, r3, #1
 800a6ba:	6022      	str	r2, [r4, #0]
 800a6bc:	701e      	strb	r6, [r3, #0]
 800a6be:	6962      	ldr	r2, [r4, #20]
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d004      	beq.n	800a6d0 <__swbuf_r+0x5a>
 800a6c6:	89a3      	ldrh	r3, [r4, #12]
 800a6c8:	07db      	lsls	r3, r3, #31
 800a6ca:	d506      	bpl.n	800a6da <__swbuf_r+0x64>
 800a6cc:	2e0a      	cmp	r6, #10
 800a6ce:	d104      	bne.n	800a6da <__swbuf_r+0x64>
 800a6d0:	4621      	mov	r1, r4
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f001 fdf4 	bl	800c2c0 <_fflush_r>
 800a6d8:	b938      	cbnz	r0, 800a6ea <__swbuf_r+0x74>
 800a6da:	4638      	mov	r0, r7
 800a6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6de:	4621      	mov	r1, r4
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	f000 f805 	bl	800a6f0 <__swsetup_r>
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	d0d5      	beq.n	800a696 <__swbuf_r+0x20>
 800a6ea:	f04f 37ff 	mov.w	r7, #4294967295
 800a6ee:	e7f4      	b.n	800a6da <__swbuf_r+0x64>

0800a6f0 <__swsetup_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4b2a      	ldr	r3, [pc, #168]	; (800a79c <__swsetup_r+0xac>)
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	6818      	ldr	r0, [r3, #0]
 800a6f8:	460c      	mov	r4, r1
 800a6fa:	b118      	cbz	r0, 800a704 <__swsetup_r+0x14>
 800a6fc:	6a03      	ldr	r3, [r0, #32]
 800a6fe:	b90b      	cbnz	r3, 800a704 <__swsetup_r+0x14>
 800a700:	f7ff feec 	bl	800a4dc <__sinit>
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a70a:	0718      	lsls	r0, r3, #28
 800a70c:	d422      	bmi.n	800a754 <__swsetup_r+0x64>
 800a70e:	06d9      	lsls	r1, r3, #27
 800a710:	d407      	bmi.n	800a722 <__swsetup_r+0x32>
 800a712:	2309      	movs	r3, #9
 800a714:	602b      	str	r3, [r5, #0]
 800a716:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a71a:	81a3      	strh	r3, [r4, #12]
 800a71c:	f04f 30ff 	mov.w	r0, #4294967295
 800a720:	e034      	b.n	800a78c <__swsetup_r+0x9c>
 800a722:	0758      	lsls	r0, r3, #29
 800a724:	d512      	bpl.n	800a74c <__swsetup_r+0x5c>
 800a726:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a728:	b141      	cbz	r1, 800a73c <__swsetup_r+0x4c>
 800a72a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a72e:	4299      	cmp	r1, r3
 800a730:	d002      	beq.n	800a738 <__swsetup_r+0x48>
 800a732:	4628      	mov	r0, r5
 800a734:	f000 ff6a 	bl	800b60c <_free_r>
 800a738:	2300      	movs	r3, #0
 800a73a:	6363      	str	r3, [r4, #52]	; 0x34
 800a73c:	89a3      	ldrh	r3, [r4, #12]
 800a73e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a742:	81a3      	strh	r3, [r4, #12]
 800a744:	2300      	movs	r3, #0
 800a746:	6063      	str	r3, [r4, #4]
 800a748:	6923      	ldr	r3, [r4, #16]
 800a74a:	6023      	str	r3, [r4, #0]
 800a74c:	89a3      	ldrh	r3, [r4, #12]
 800a74e:	f043 0308 	orr.w	r3, r3, #8
 800a752:	81a3      	strh	r3, [r4, #12]
 800a754:	6923      	ldr	r3, [r4, #16]
 800a756:	b94b      	cbnz	r3, 800a76c <__swsetup_r+0x7c>
 800a758:	89a3      	ldrh	r3, [r4, #12]
 800a75a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a75e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a762:	d003      	beq.n	800a76c <__swsetup_r+0x7c>
 800a764:	4621      	mov	r1, r4
 800a766:	4628      	mov	r0, r5
 800a768:	f001 fdf8 	bl	800c35c <__smakebuf_r>
 800a76c:	89a0      	ldrh	r0, [r4, #12]
 800a76e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a772:	f010 0301 	ands.w	r3, r0, #1
 800a776:	d00a      	beq.n	800a78e <__swsetup_r+0x9e>
 800a778:	2300      	movs	r3, #0
 800a77a:	60a3      	str	r3, [r4, #8]
 800a77c:	6963      	ldr	r3, [r4, #20]
 800a77e:	425b      	negs	r3, r3
 800a780:	61a3      	str	r3, [r4, #24]
 800a782:	6923      	ldr	r3, [r4, #16]
 800a784:	b943      	cbnz	r3, 800a798 <__swsetup_r+0xa8>
 800a786:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a78a:	d1c4      	bne.n	800a716 <__swsetup_r+0x26>
 800a78c:	bd38      	pop	{r3, r4, r5, pc}
 800a78e:	0781      	lsls	r1, r0, #30
 800a790:	bf58      	it	pl
 800a792:	6963      	ldrpl	r3, [r4, #20]
 800a794:	60a3      	str	r3, [r4, #8]
 800a796:	e7f4      	b.n	800a782 <__swsetup_r+0x92>
 800a798:	2000      	movs	r0, #0
 800a79a:	e7f7      	b.n	800a78c <__swsetup_r+0x9c>
 800a79c:	20000810 	.word	0x20000810

0800a7a0 <memmove>:
 800a7a0:	4288      	cmp	r0, r1
 800a7a2:	b510      	push	{r4, lr}
 800a7a4:	eb01 0402 	add.w	r4, r1, r2
 800a7a8:	d902      	bls.n	800a7b0 <memmove+0x10>
 800a7aa:	4284      	cmp	r4, r0
 800a7ac:	4623      	mov	r3, r4
 800a7ae:	d807      	bhi.n	800a7c0 <memmove+0x20>
 800a7b0:	1e43      	subs	r3, r0, #1
 800a7b2:	42a1      	cmp	r1, r4
 800a7b4:	d008      	beq.n	800a7c8 <memmove+0x28>
 800a7b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7be:	e7f8      	b.n	800a7b2 <memmove+0x12>
 800a7c0:	4402      	add	r2, r0
 800a7c2:	4601      	mov	r1, r0
 800a7c4:	428a      	cmp	r2, r1
 800a7c6:	d100      	bne.n	800a7ca <memmove+0x2a>
 800a7c8:	bd10      	pop	{r4, pc}
 800a7ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7d2:	e7f7      	b.n	800a7c4 <memmove+0x24>

0800a7d4 <memset>:
 800a7d4:	4402      	add	r2, r0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d100      	bne.n	800a7de <memset+0xa>
 800a7dc:	4770      	bx	lr
 800a7de:	f803 1b01 	strb.w	r1, [r3], #1
 800a7e2:	e7f9      	b.n	800a7d8 <memset+0x4>

0800a7e4 <strncpy>:
 800a7e4:	b510      	push	{r4, lr}
 800a7e6:	3901      	subs	r1, #1
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	b132      	cbz	r2, 800a7fa <strncpy+0x16>
 800a7ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a7f0:	f803 4b01 	strb.w	r4, [r3], #1
 800a7f4:	3a01      	subs	r2, #1
 800a7f6:	2c00      	cmp	r4, #0
 800a7f8:	d1f7      	bne.n	800a7ea <strncpy+0x6>
 800a7fa:	441a      	add	r2, r3
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d100      	bne.n	800a804 <strncpy+0x20>
 800a802:	bd10      	pop	{r4, pc}
 800a804:	f803 1b01 	strb.w	r1, [r3], #1
 800a808:	e7f9      	b.n	800a7fe <strncpy+0x1a>
	...

0800a80c <_localeconv_r>:
 800a80c:	4800      	ldr	r0, [pc, #0]	; (800a810 <_localeconv_r+0x4>)
 800a80e:	4770      	bx	lr
 800a810:	20000904 	.word	0x20000904

0800a814 <_close_r>:
 800a814:	b538      	push	{r3, r4, r5, lr}
 800a816:	4d06      	ldr	r5, [pc, #24]	; (800a830 <_close_r+0x1c>)
 800a818:	2300      	movs	r3, #0
 800a81a:	4604      	mov	r4, r0
 800a81c:	4608      	mov	r0, r1
 800a81e:	602b      	str	r3, [r5, #0]
 800a820:	f7f8 fd83 	bl	800332a <_close>
 800a824:	1c43      	adds	r3, r0, #1
 800a826:	d102      	bne.n	800a82e <_close_r+0x1a>
 800a828:	682b      	ldr	r3, [r5, #0]
 800a82a:	b103      	cbz	r3, 800a82e <_close_r+0x1a>
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
 800a830:	20003c08 	.word	0x20003c08

0800a834 <_lseek_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4d07      	ldr	r5, [pc, #28]	; (800a854 <_lseek_r+0x20>)
 800a838:	4604      	mov	r4, r0
 800a83a:	4608      	mov	r0, r1
 800a83c:	4611      	mov	r1, r2
 800a83e:	2200      	movs	r2, #0
 800a840:	602a      	str	r2, [r5, #0]
 800a842:	461a      	mov	r2, r3
 800a844:	f7f8 fd98 	bl	8003378 <_lseek>
 800a848:	1c43      	adds	r3, r0, #1
 800a84a:	d102      	bne.n	800a852 <_lseek_r+0x1e>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	b103      	cbz	r3, 800a852 <_lseek_r+0x1e>
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	bd38      	pop	{r3, r4, r5, pc}
 800a854:	20003c08 	.word	0x20003c08

0800a858 <_read_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	4d07      	ldr	r5, [pc, #28]	; (800a878 <_read_r+0x20>)
 800a85c:	4604      	mov	r4, r0
 800a85e:	4608      	mov	r0, r1
 800a860:	4611      	mov	r1, r2
 800a862:	2200      	movs	r2, #0
 800a864:	602a      	str	r2, [r5, #0]
 800a866:	461a      	mov	r2, r3
 800a868:	f7f8 fd26 	bl	80032b8 <_read>
 800a86c:	1c43      	adds	r3, r0, #1
 800a86e:	d102      	bne.n	800a876 <_read_r+0x1e>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	b103      	cbz	r3, 800a876 <_read_r+0x1e>
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	bd38      	pop	{r3, r4, r5, pc}
 800a878:	20003c08 	.word	0x20003c08

0800a87c <_write_r>:
 800a87c:	b538      	push	{r3, r4, r5, lr}
 800a87e:	4d07      	ldr	r5, [pc, #28]	; (800a89c <_write_r+0x20>)
 800a880:	4604      	mov	r4, r0
 800a882:	4608      	mov	r0, r1
 800a884:	4611      	mov	r1, r2
 800a886:	2200      	movs	r2, #0
 800a888:	602a      	str	r2, [r5, #0]
 800a88a:	461a      	mov	r2, r3
 800a88c:	f7f8 fd31 	bl	80032f2 <_write>
 800a890:	1c43      	adds	r3, r0, #1
 800a892:	d102      	bne.n	800a89a <_write_r+0x1e>
 800a894:	682b      	ldr	r3, [r5, #0]
 800a896:	b103      	cbz	r3, 800a89a <_write_r+0x1e>
 800a898:	6023      	str	r3, [r4, #0]
 800a89a:	bd38      	pop	{r3, r4, r5, pc}
 800a89c:	20003c08 	.word	0x20003c08

0800a8a0 <__errno>:
 800a8a0:	4b01      	ldr	r3, [pc, #4]	; (800a8a8 <__errno+0x8>)
 800a8a2:	6818      	ldr	r0, [r3, #0]
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	20000810 	.word	0x20000810

0800a8ac <__libc_init_array>:
 800a8ac:	b570      	push	{r4, r5, r6, lr}
 800a8ae:	4d0d      	ldr	r5, [pc, #52]	; (800a8e4 <__libc_init_array+0x38>)
 800a8b0:	4c0d      	ldr	r4, [pc, #52]	; (800a8e8 <__libc_init_array+0x3c>)
 800a8b2:	1b64      	subs	r4, r4, r5
 800a8b4:	10a4      	asrs	r4, r4, #2
 800a8b6:	2600      	movs	r6, #0
 800a8b8:	42a6      	cmp	r6, r4
 800a8ba:	d109      	bne.n	800a8d0 <__libc_init_array+0x24>
 800a8bc:	4d0b      	ldr	r5, [pc, #44]	; (800a8ec <__libc_init_array+0x40>)
 800a8be:	4c0c      	ldr	r4, [pc, #48]	; (800a8f0 <__libc_init_array+0x44>)
 800a8c0:	f001 ffe4 	bl	800c88c <_init>
 800a8c4:	1b64      	subs	r4, r4, r5
 800a8c6:	10a4      	asrs	r4, r4, #2
 800a8c8:	2600      	movs	r6, #0
 800a8ca:	42a6      	cmp	r6, r4
 800a8cc:	d105      	bne.n	800a8da <__libc_init_array+0x2e>
 800a8ce:	bd70      	pop	{r4, r5, r6, pc}
 800a8d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8d4:	4798      	blx	r3
 800a8d6:	3601      	adds	r6, #1
 800a8d8:	e7ee      	b.n	800a8b8 <__libc_init_array+0xc>
 800a8da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8de:	4798      	blx	r3
 800a8e0:	3601      	adds	r6, #1
 800a8e2:	e7f2      	b.n	800a8ca <__libc_init_array+0x1e>
 800a8e4:	0800e98c 	.word	0x0800e98c
 800a8e8:	0800e98c 	.word	0x0800e98c
 800a8ec:	0800e98c 	.word	0x0800e98c
 800a8f0:	0800e990 	.word	0x0800e990

0800a8f4 <__retarget_lock_init_recursive>:
 800a8f4:	4770      	bx	lr

0800a8f6 <__retarget_lock_acquire_recursive>:
 800a8f6:	4770      	bx	lr

0800a8f8 <__retarget_lock_release_recursive>:
 800a8f8:	4770      	bx	lr

0800a8fa <memcpy>:
 800a8fa:	440a      	add	r2, r1
 800a8fc:	4291      	cmp	r1, r2
 800a8fe:	f100 33ff 	add.w	r3, r0, #4294967295
 800a902:	d100      	bne.n	800a906 <memcpy+0xc>
 800a904:	4770      	bx	lr
 800a906:	b510      	push	{r4, lr}
 800a908:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a90c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a910:	4291      	cmp	r1, r2
 800a912:	d1f9      	bne.n	800a908 <memcpy+0xe>
 800a914:	bd10      	pop	{r4, pc}

0800a916 <quorem>:
 800a916:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91a:	6903      	ldr	r3, [r0, #16]
 800a91c:	690c      	ldr	r4, [r1, #16]
 800a91e:	42a3      	cmp	r3, r4
 800a920:	4607      	mov	r7, r0
 800a922:	db7e      	blt.n	800aa22 <quorem+0x10c>
 800a924:	3c01      	subs	r4, #1
 800a926:	f101 0814 	add.w	r8, r1, #20
 800a92a:	f100 0514 	add.w	r5, r0, #20
 800a92e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a932:	9301      	str	r3, [sp, #4]
 800a934:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a938:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a93c:	3301      	adds	r3, #1
 800a93e:	429a      	cmp	r2, r3
 800a940:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a944:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a948:	fbb2 f6f3 	udiv	r6, r2, r3
 800a94c:	d331      	bcc.n	800a9b2 <quorem+0x9c>
 800a94e:	f04f 0e00 	mov.w	lr, #0
 800a952:	4640      	mov	r0, r8
 800a954:	46ac      	mov	ip, r5
 800a956:	46f2      	mov	sl, lr
 800a958:	f850 2b04 	ldr.w	r2, [r0], #4
 800a95c:	b293      	uxth	r3, r2
 800a95e:	fb06 e303 	mla	r3, r6, r3, lr
 800a962:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a966:	0c1a      	lsrs	r2, r3, #16
 800a968:	b29b      	uxth	r3, r3
 800a96a:	ebaa 0303 	sub.w	r3, sl, r3
 800a96e:	f8dc a000 	ldr.w	sl, [ip]
 800a972:	fa13 f38a 	uxtah	r3, r3, sl
 800a976:	fb06 220e 	mla	r2, r6, lr, r2
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	9b00      	ldr	r3, [sp, #0]
 800a97e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a982:	b292      	uxth	r2, r2
 800a984:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a988:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a98c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a990:	4581      	cmp	r9, r0
 800a992:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a996:	f84c 3b04 	str.w	r3, [ip], #4
 800a99a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a99e:	d2db      	bcs.n	800a958 <quorem+0x42>
 800a9a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a9a4:	b92b      	cbnz	r3, 800a9b2 <quorem+0x9c>
 800a9a6:	9b01      	ldr	r3, [sp, #4]
 800a9a8:	3b04      	subs	r3, #4
 800a9aa:	429d      	cmp	r5, r3
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	d32c      	bcc.n	800aa0a <quorem+0xf4>
 800a9b0:	613c      	str	r4, [r7, #16]
 800a9b2:	4638      	mov	r0, r7
 800a9b4:	f001 f9a6 	bl	800bd04 <__mcmp>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	db22      	blt.n	800aa02 <quorem+0xec>
 800a9bc:	3601      	adds	r6, #1
 800a9be:	4629      	mov	r1, r5
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9c6:	f8d1 c000 	ldr.w	ip, [r1]
 800a9ca:	b293      	uxth	r3, r2
 800a9cc:	1ac3      	subs	r3, r0, r3
 800a9ce:	0c12      	lsrs	r2, r2, #16
 800a9d0:	fa13 f38c 	uxtah	r3, r3, ip
 800a9d4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a9d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9e2:	45c1      	cmp	r9, r8
 800a9e4:	f841 3b04 	str.w	r3, [r1], #4
 800a9e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a9ec:	d2e9      	bcs.n	800a9c2 <quorem+0xac>
 800a9ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9f6:	b922      	cbnz	r2, 800aa02 <quorem+0xec>
 800a9f8:	3b04      	subs	r3, #4
 800a9fa:	429d      	cmp	r5, r3
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	d30a      	bcc.n	800aa16 <quorem+0x100>
 800aa00:	613c      	str	r4, [r7, #16]
 800aa02:	4630      	mov	r0, r6
 800aa04:	b003      	add	sp, #12
 800aa06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0a:	6812      	ldr	r2, [r2, #0]
 800aa0c:	3b04      	subs	r3, #4
 800aa0e:	2a00      	cmp	r2, #0
 800aa10:	d1ce      	bne.n	800a9b0 <quorem+0x9a>
 800aa12:	3c01      	subs	r4, #1
 800aa14:	e7c9      	b.n	800a9aa <quorem+0x94>
 800aa16:	6812      	ldr	r2, [r2, #0]
 800aa18:	3b04      	subs	r3, #4
 800aa1a:	2a00      	cmp	r2, #0
 800aa1c:	d1f0      	bne.n	800aa00 <quorem+0xea>
 800aa1e:	3c01      	subs	r4, #1
 800aa20:	e7eb      	b.n	800a9fa <quorem+0xe4>
 800aa22:	2000      	movs	r0, #0
 800aa24:	e7ee      	b.n	800aa04 <quorem+0xee>
	...

0800aa28 <_dtoa_r>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	ed2d 8b04 	vpush	{d8-d9}
 800aa30:	69c5      	ldr	r5, [r0, #28]
 800aa32:	b093      	sub	sp, #76	; 0x4c
 800aa34:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aa38:	ec57 6b10 	vmov	r6, r7, d0
 800aa3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aa40:	9107      	str	r1, [sp, #28]
 800aa42:	4604      	mov	r4, r0
 800aa44:	920a      	str	r2, [sp, #40]	; 0x28
 800aa46:	930d      	str	r3, [sp, #52]	; 0x34
 800aa48:	b975      	cbnz	r5, 800aa68 <_dtoa_r+0x40>
 800aa4a:	2010      	movs	r0, #16
 800aa4c:	f000 fe2a 	bl	800b6a4 <malloc>
 800aa50:	4602      	mov	r2, r0
 800aa52:	61e0      	str	r0, [r4, #28]
 800aa54:	b920      	cbnz	r0, 800aa60 <_dtoa_r+0x38>
 800aa56:	4bae      	ldr	r3, [pc, #696]	; (800ad10 <_dtoa_r+0x2e8>)
 800aa58:	21ef      	movs	r1, #239	; 0xef
 800aa5a:	48ae      	ldr	r0, [pc, #696]	; (800ad14 <_dtoa_r+0x2ec>)
 800aa5c:	f001 fcec 	bl	800c438 <__assert_func>
 800aa60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa64:	6005      	str	r5, [r0, #0]
 800aa66:	60c5      	str	r5, [r0, #12]
 800aa68:	69e3      	ldr	r3, [r4, #28]
 800aa6a:	6819      	ldr	r1, [r3, #0]
 800aa6c:	b151      	cbz	r1, 800aa84 <_dtoa_r+0x5c>
 800aa6e:	685a      	ldr	r2, [r3, #4]
 800aa70:	604a      	str	r2, [r1, #4]
 800aa72:	2301      	movs	r3, #1
 800aa74:	4093      	lsls	r3, r2
 800aa76:	608b      	str	r3, [r1, #8]
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f000 ff07 	bl	800b88c <_Bfree>
 800aa7e:	69e3      	ldr	r3, [r4, #28]
 800aa80:	2200      	movs	r2, #0
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	1e3b      	subs	r3, r7, #0
 800aa86:	bfbb      	ittet	lt
 800aa88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa8c:	9303      	strlt	r3, [sp, #12]
 800aa8e:	2300      	movge	r3, #0
 800aa90:	2201      	movlt	r2, #1
 800aa92:	bfac      	ite	ge
 800aa94:	f8c8 3000 	strge.w	r3, [r8]
 800aa98:	f8c8 2000 	strlt.w	r2, [r8]
 800aa9c:	4b9e      	ldr	r3, [pc, #632]	; (800ad18 <_dtoa_r+0x2f0>)
 800aa9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800aaa2:	ea33 0308 	bics.w	r3, r3, r8
 800aaa6:	d11b      	bne.n	800aae0 <_dtoa_r+0xb8>
 800aaa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aaaa:	f242 730f 	movw	r3, #9999	; 0x270f
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800aab4:	4333      	orrs	r3, r6
 800aab6:	f000 8593 	beq.w	800b5e0 <_dtoa_r+0xbb8>
 800aaba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aabc:	b963      	cbnz	r3, 800aad8 <_dtoa_r+0xb0>
 800aabe:	4b97      	ldr	r3, [pc, #604]	; (800ad1c <_dtoa_r+0x2f4>)
 800aac0:	e027      	b.n	800ab12 <_dtoa_r+0xea>
 800aac2:	4b97      	ldr	r3, [pc, #604]	; (800ad20 <_dtoa_r+0x2f8>)
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	3308      	adds	r3, #8
 800aac8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aaca:	6013      	str	r3, [r2, #0]
 800aacc:	9800      	ldr	r0, [sp, #0]
 800aace:	b013      	add	sp, #76	; 0x4c
 800aad0:	ecbd 8b04 	vpop	{d8-d9}
 800aad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad8:	4b90      	ldr	r3, [pc, #576]	; (800ad1c <_dtoa_r+0x2f4>)
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	3303      	adds	r3, #3
 800aade:	e7f3      	b.n	800aac8 <_dtoa_r+0xa0>
 800aae0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aae4:	2200      	movs	r2, #0
 800aae6:	ec51 0b17 	vmov	r0, r1, d7
 800aaea:	eeb0 8a47 	vmov.f32	s16, s14
 800aaee:	eef0 8a67 	vmov.f32	s17, s15
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	f7f6 f800 	bl	8000af8 <__aeabi_dcmpeq>
 800aaf8:	4681      	mov	r9, r0
 800aafa:	b160      	cbz	r0, 800ab16 <_dtoa_r+0xee>
 800aafc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aafe:	2301      	movs	r3, #1
 800ab00:	6013      	str	r3, [r2, #0]
 800ab02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 8568 	beq.w	800b5da <_dtoa_r+0xbb2>
 800ab0a:	4b86      	ldr	r3, [pc, #536]	; (800ad24 <_dtoa_r+0x2fc>)
 800ab0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab0e:	6013      	str	r3, [r2, #0]
 800ab10:	3b01      	subs	r3, #1
 800ab12:	9300      	str	r3, [sp, #0]
 800ab14:	e7da      	b.n	800aacc <_dtoa_r+0xa4>
 800ab16:	aa10      	add	r2, sp, #64	; 0x40
 800ab18:	a911      	add	r1, sp, #68	; 0x44
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	eeb0 0a48 	vmov.f32	s0, s16
 800ab20:	eef0 0a68 	vmov.f32	s1, s17
 800ab24:	f001 f994 	bl	800be50 <__d2b>
 800ab28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ab2c:	4682      	mov	sl, r0
 800ab2e:	2d00      	cmp	r5, #0
 800ab30:	d07f      	beq.n	800ac32 <_dtoa_r+0x20a>
 800ab32:	ee18 3a90 	vmov	r3, s17
 800ab36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ab3e:	ec51 0b18 	vmov	r0, r1, d8
 800ab42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ab46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ab4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ab4e:	4619      	mov	r1, r3
 800ab50:	2200      	movs	r2, #0
 800ab52:	4b75      	ldr	r3, [pc, #468]	; (800ad28 <_dtoa_r+0x300>)
 800ab54:	f7f5 fbb0 	bl	80002b8 <__aeabi_dsub>
 800ab58:	a367      	add	r3, pc, #412	; (adr r3, 800acf8 <_dtoa_r+0x2d0>)
 800ab5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5e:	f7f5 fd63 	bl	8000628 <__aeabi_dmul>
 800ab62:	a367      	add	r3, pc, #412	; (adr r3, 800ad00 <_dtoa_r+0x2d8>)
 800ab64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab68:	f7f5 fba8 	bl	80002bc <__adddf3>
 800ab6c:	4606      	mov	r6, r0
 800ab6e:	4628      	mov	r0, r5
 800ab70:	460f      	mov	r7, r1
 800ab72:	f7f5 fcef 	bl	8000554 <__aeabi_i2d>
 800ab76:	a364      	add	r3, pc, #400	; (adr r3, 800ad08 <_dtoa_r+0x2e0>)
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	f7f5 fd54 	bl	8000628 <__aeabi_dmul>
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	4630      	mov	r0, r6
 800ab86:	4639      	mov	r1, r7
 800ab88:	f7f5 fb98 	bl	80002bc <__adddf3>
 800ab8c:	4606      	mov	r6, r0
 800ab8e:	460f      	mov	r7, r1
 800ab90:	f7f5 fffa 	bl	8000b88 <__aeabi_d2iz>
 800ab94:	2200      	movs	r2, #0
 800ab96:	4683      	mov	fp, r0
 800ab98:	2300      	movs	r3, #0
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	4639      	mov	r1, r7
 800ab9e:	f7f5 ffb5 	bl	8000b0c <__aeabi_dcmplt>
 800aba2:	b148      	cbz	r0, 800abb8 <_dtoa_r+0x190>
 800aba4:	4658      	mov	r0, fp
 800aba6:	f7f5 fcd5 	bl	8000554 <__aeabi_i2d>
 800abaa:	4632      	mov	r2, r6
 800abac:	463b      	mov	r3, r7
 800abae:	f7f5 ffa3 	bl	8000af8 <__aeabi_dcmpeq>
 800abb2:	b908      	cbnz	r0, 800abb8 <_dtoa_r+0x190>
 800abb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800abb8:	f1bb 0f16 	cmp.w	fp, #22
 800abbc:	d857      	bhi.n	800ac6e <_dtoa_r+0x246>
 800abbe:	4b5b      	ldr	r3, [pc, #364]	; (800ad2c <_dtoa_r+0x304>)
 800abc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800abc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc8:	ec51 0b18 	vmov	r0, r1, d8
 800abcc:	f7f5 ff9e 	bl	8000b0c <__aeabi_dcmplt>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d04e      	beq.n	800ac72 <_dtoa_r+0x24a>
 800abd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800abd8:	2300      	movs	r3, #0
 800abda:	930c      	str	r3, [sp, #48]	; 0x30
 800abdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abde:	1b5b      	subs	r3, r3, r5
 800abe0:	1e5a      	subs	r2, r3, #1
 800abe2:	bf45      	ittet	mi
 800abe4:	f1c3 0301 	rsbmi	r3, r3, #1
 800abe8:	9305      	strmi	r3, [sp, #20]
 800abea:	2300      	movpl	r3, #0
 800abec:	2300      	movmi	r3, #0
 800abee:	9206      	str	r2, [sp, #24]
 800abf0:	bf54      	ite	pl
 800abf2:	9305      	strpl	r3, [sp, #20]
 800abf4:	9306      	strmi	r3, [sp, #24]
 800abf6:	f1bb 0f00 	cmp.w	fp, #0
 800abfa:	db3c      	blt.n	800ac76 <_dtoa_r+0x24e>
 800abfc:	9b06      	ldr	r3, [sp, #24]
 800abfe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ac02:	445b      	add	r3, fp
 800ac04:	9306      	str	r3, [sp, #24]
 800ac06:	2300      	movs	r3, #0
 800ac08:	9308      	str	r3, [sp, #32]
 800ac0a:	9b07      	ldr	r3, [sp, #28]
 800ac0c:	2b09      	cmp	r3, #9
 800ac0e:	d868      	bhi.n	800ace2 <_dtoa_r+0x2ba>
 800ac10:	2b05      	cmp	r3, #5
 800ac12:	bfc4      	itt	gt
 800ac14:	3b04      	subgt	r3, #4
 800ac16:	9307      	strgt	r3, [sp, #28]
 800ac18:	9b07      	ldr	r3, [sp, #28]
 800ac1a:	f1a3 0302 	sub.w	r3, r3, #2
 800ac1e:	bfcc      	ite	gt
 800ac20:	2500      	movgt	r5, #0
 800ac22:	2501      	movle	r5, #1
 800ac24:	2b03      	cmp	r3, #3
 800ac26:	f200 8085 	bhi.w	800ad34 <_dtoa_r+0x30c>
 800ac2a:	e8df f003 	tbb	[pc, r3]
 800ac2e:	3b2e      	.short	0x3b2e
 800ac30:	5839      	.short	0x5839
 800ac32:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ac36:	441d      	add	r5, r3
 800ac38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ac3c:	2b20      	cmp	r3, #32
 800ac3e:	bfc1      	itttt	gt
 800ac40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac44:	fa08 f803 	lslgt.w	r8, r8, r3
 800ac48:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ac4c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ac50:	bfd6      	itet	le
 800ac52:	f1c3 0320 	rsble	r3, r3, #32
 800ac56:	ea48 0003 	orrgt.w	r0, r8, r3
 800ac5a:	fa06 f003 	lslle.w	r0, r6, r3
 800ac5e:	f7f5 fc69 	bl	8000534 <__aeabi_ui2d>
 800ac62:	2201      	movs	r2, #1
 800ac64:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ac68:	3d01      	subs	r5, #1
 800ac6a:	920e      	str	r2, [sp, #56]	; 0x38
 800ac6c:	e76f      	b.n	800ab4e <_dtoa_r+0x126>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e7b3      	b.n	800abda <_dtoa_r+0x1b2>
 800ac72:	900c      	str	r0, [sp, #48]	; 0x30
 800ac74:	e7b2      	b.n	800abdc <_dtoa_r+0x1b4>
 800ac76:	9b05      	ldr	r3, [sp, #20]
 800ac78:	eba3 030b 	sub.w	r3, r3, fp
 800ac7c:	9305      	str	r3, [sp, #20]
 800ac7e:	f1cb 0300 	rsb	r3, fp, #0
 800ac82:	9308      	str	r3, [sp, #32]
 800ac84:	2300      	movs	r3, #0
 800ac86:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac88:	e7bf      	b.n	800ac0a <_dtoa_r+0x1e2>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	dc52      	bgt.n	800ad3a <_dtoa_r+0x312>
 800ac94:	2301      	movs	r3, #1
 800ac96:	9301      	str	r3, [sp, #4]
 800ac98:	9304      	str	r3, [sp, #16]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	920a      	str	r2, [sp, #40]	; 0x28
 800ac9e:	e00b      	b.n	800acb8 <_dtoa_r+0x290>
 800aca0:	2301      	movs	r3, #1
 800aca2:	e7f3      	b.n	800ac8c <_dtoa_r+0x264>
 800aca4:	2300      	movs	r3, #0
 800aca6:	9309      	str	r3, [sp, #36]	; 0x24
 800aca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acaa:	445b      	add	r3, fp
 800acac:	9301      	str	r3, [sp, #4]
 800acae:	3301      	adds	r3, #1
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	9304      	str	r3, [sp, #16]
 800acb4:	bfb8      	it	lt
 800acb6:	2301      	movlt	r3, #1
 800acb8:	69e0      	ldr	r0, [r4, #28]
 800acba:	2100      	movs	r1, #0
 800acbc:	2204      	movs	r2, #4
 800acbe:	f102 0614 	add.w	r6, r2, #20
 800acc2:	429e      	cmp	r6, r3
 800acc4:	d93d      	bls.n	800ad42 <_dtoa_r+0x31a>
 800acc6:	6041      	str	r1, [r0, #4]
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 fd9f 	bl	800b80c <_Balloc>
 800acce:	9000      	str	r0, [sp, #0]
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d139      	bne.n	800ad48 <_dtoa_r+0x320>
 800acd4:	4b16      	ldr	r3, [pc, #88]	; (800ad30 <_dtoa_r+0x308>)
 800acd6:	4602      	mov	r2, r0
 800acd8:	f240 11af 	movw	r1, #431	; 0x1af
 800acdc:	e6bd      	b.n	800aa5a <_dtoa_r+0x32>
 800acde:	2301      	movs	r3, #1
 800ace0:	e7e1      	b.n	800aca6 <_dtoa_r+0x27e>
 800ace2:	2501      	movs	r5, #1
 800ace4:	2300      	movs	r3, #0
 800ace6:	9307      	str	r3, [sp, #28]
 800ace8:	9509      	str	r5, [sp, #36]	; 0x24
 800acea:	f04f 33ff 	mov.w	r3, #4294967295
 800acee:	9301      	str	r3, [sp, #4]
 800acf0:	9304      	str	r3, [sp, #16]
 800acf2:	2200      	movs	r2, #0
 800acf4:	2312      	movs	r3, #18
 800acf6:	e7d1      	b.n	800ac9c <_dtoa_r+0x274>
 800acf8:	636f4361 	.word	0x636f4361
 800acfc:	3fd287a7 	.word	0x3fd287a7
 800ad00:	8b60c8b3 	.word	0x8b60c8b3
 800ad04:	3fc68a28 	.word	0x3fc68a28
 800ad08:	509f79fb 	.word	0x509f79fb
 800ad0c:	3fd34413 	.word	0x3fd34413
 800ad10:	0800e651 	.word	0x0800e651
 800ad14:	0800e668 	.word	0x0800e668
 800ad18:	7ff00000 	.word	0x7ff00000
 800ad1c:	0800e64d 	.word	0x0800e64d
 800ad20:	0800e644 	.word	0x0800e644
 800ad24:	0800e621 	.word	0x0800e621
 800ad28:	3ff80000 	.word	0x3ff80000
 800ad2c:	0800e758 	.word	0x0800e758
 800ad30:	0800e6c0 	.word	0x0800e6c0
 800ad34:	2301      	movs	r3, #1
 800ad36:	9309      	str	r3, [sp, #36]	; 0x24
 800ad38:	e7d7      	b.n	800acea <_dtoa_r+0x2c2>
 800ad3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad3c:	9301      	str	r3, [sp, #4]
 800ad3e:	9304      	str	r3, [sp, #16]
 800ad40:	e7ba      	b.n	800acb8 <_dtoa_r+0x290>
 800ad42:	3101      	adds	r1, #1
 800ad44:	0052      	lsls	r2, r2, #1
 800ad46:	e7ba      	b.n	800acbe <_dtoa_r+0x296>
 800ad48:	69e3      	ldr	r3, [r4, #28]
 800ad4a:	9a00      	ldr	r2, [sp, #0]
 800ad4c:	601a      	str	r2, [r3, #0]
 800ad4e:	9b04      	ldr	r3, [sp, #16]
 800ad50:	2b0e      	cmp	r3, #14
 800ad52:	f200 80a8 	bhi.w	800aea6 <_dtoa_r+0x47e>
 800ad56:	2d00      	cmp	r5, #0
 800ad58:	f000 80a5 	beq.w	800aea6 <_dtoa_r+0x47e>
 800ad5c:	f1bb 0f00 	cmp.w	fp, #0
 800ad60:	dd38      	ble.n	800add4 <_dtoa_r+0x3ac>
 800ad62:	4bc0      	ldr	r3, [pc, #768]	; (800b064 <_dtoa_r+0x63c>)
 800ad64:	f00b 020f 	and.w	r2, fp, #15
 800ad68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ad70:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ad74:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ad78:	d019      	beq.n	800adae <_dtoa_r+0x386>
 800ad7a:	4bbb      	ldr	r3, [pc, #748]	; (800b068 <_dtoa_r+0x640>)
 800ad7c:	ec51 0b18 	vmov	r0, r1, d8
 800ad80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad84:	f7f5 fd7a 	bl	800087c <__aeabi_ddiv>
 800ad88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad8c:	f008 080f 	and.w	r8, r8, #15
 800ad90:	2503      	movs	r5, #3
 800ad92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b068 <_dtoa_r+0x640>
 800ad96:	f1b8 0f00 	cmp.w	r8, #0
 800ad9a:	d10a      	bne.n	800adb2 <_dtoa_r+0x38a>
 800ad9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ada0:	4632      	mov	r2, r6
 800ada2:	463b      	mov	r3, r7
 800ada4:	f7f5 fd6a 	bl	800087c <__aeabi_ddiv>
 800ada8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adac:	e02b      	b.n	800ae06 <_dtoa_r+0x3de>
 800adae:	2502      	movs	r5, #2
 800adb0:	e7ef      	b.n	800ad92 <_dtoa_r+0x36a>
 800adb2:	f018 0f01 	tst.w	r8, #1
 800adb6:	d008      	beq.n	800adca <_dtoa_r+0x3a2>
 800adb8:	4630      	mov	r0, r6
 800adba:	4639      	mov	r1, r7
 800adbc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800adc0:	f7f5 fc32 	bl	8000628 <__aeabi_dmul>
 800adc4:	3501      	adds	r5, #1
 800adc6:	4606      	mov	r6, r0
 800adc8:	460f      	mov	r7, r1
 800adca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800adce:	f109 0908 	add.w	r9, r9, #8
 800add2:	e7e0      	b.n	800ad96 <_dtoa_r+0x36e>
 800add4:	f000 809f 	beq.w	800af16 <_dtoa_r+0x4ee>
 800add8:	f1cb 0600 	rsb	r6, fp, #0
 800addc:	4ba1      	ldr	r3, [pc, #644]	; (800b064 <_dtoa_r+0x63c>)
 800adde:	4fa2      	ldr	r7, [pc, #648]	; (800b068 <_dtoa_r+0x640>)
 800ade0:	f006 020f 	and.w	r2, r6, #15
 800ade4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ade8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adec:	ec51 0b18 	vmov	r0, r1, d8
 800adf0:	f7f5 fc1a 	bl	8000628 <__aeabi_dmul>
 800adf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adf8:	1136      	asrs	r6, r6, #4
 800adfa:	2300      	movs	r3, #0
 800adfc:	2502      	movs	r5, #2
 800adfe:	2e00      	cmp	r6, #0
 800ae00:	d17e      	bne.n	800af00 <_dtoa_r+0x4d8>
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1d0      	bne.n	800ada8 <_dtoa_r+0x380>
 800ae06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f000 8084 	beq.w	800af1a <_dtoa_r+0x4f2>
 800ae12:	4b96      	ldr	r3, [pc, #600]	; (800b06c <_dtoa_r+0x644>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	4640      	mov	r0, r8
 800ae18:	4649      	mov	r1, r9
 800ae1a:	f7f5 fe77 	bl	8000b0c <__aeabi_dcmplt>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d07b      	beq.n	800af1a <_dtoa_r+0x4f2>
 800ae22:	9b04      	ldr	r3, [sp, #16]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d078      	beq.n	800af1a <_dtoa_r+0x4f2>
 800ae28:	9b01      	ldr	r3, [sp, #4]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	dd39      	ble.n	800aea2 <_dtoa_r+0x47a>
 800ae2e:	4b90      	ldr	r3, [pc, #576]	; (800b070 <_dtoa_r+0x648>)
 800ae30:	2200      	movs	r2, #0
 800ae32:	4640      	mov	r0, r8
 800ae34:	4649      	mov	r1, r9
 800ae36:	f7f5 fbf7 	bl	8000628 <__aeabi_dmul>
 800ae3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae3e:	9e01      	ldr	r6, [sp, #4]
 800ae40:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ae44:	3501      	adds	r5, #1
 800ae46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	f7f5 fb82 	bl	8000554 <__aeabi_i2d>
 800ae50:	4642      	mov	r2, r8
 800ae52:	464b      	mov	r3, r9
 800ae54:	f7f5 fbe8 	bl	8000628 <__aeabi_dmul>
 800ae58:	4b86      	ldr	r3, [pc, #536]	; (800b074 <_dtoa_r+0x64c>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f7f5 fa2e 	bl	80002bc <__adddf3>
 800ae60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ae64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae68:	9303      	str	r3, [sp, #12]
 800ae6a:	2e00      	cmp	r6, #0
 800ae6c:	d158      	bne.n	800af20 <_dtoa_r+0x4f8>
 800ae6e:	4b82      	ldr	r3, [pc, #520]	; (800b078 <_dtoa_r+0x650>)
 800ae70:	2200      	movs	r2, #0
 800ae72:	4640      	mov	r0, r8
 800ae74:	4649      	mov	r1, r9
 800ae76:	f7f5 fa1f 	bl	80002b8 <__aeabi_dsub>
 800ae7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae7e:	4680      	mov	r8, r0
 800ae80:	4689      	mov	r9, r1
 800ae82:	f7f5 fe61 	bl	8000b48 <__aeabi_dcmpgt>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	f040 8296 	bne.w	800b3b8 <_dtoa_r+0x990>
 800ae8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ae90:	4640      	mov	r0, r8
 800ae92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae96:	4649      	mov	r1, r9
 800ae98:	f7f5 fe38 	bl	8000b0c <__aeabi_dcmplt>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	f040 8289 	bne.w	800b3b4 <_dtoa_r+0x98c>
 800aea2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aea6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f2c0 814e 	blt.w	800b14a <_dtoa_r+0x722>
 800aeae:	f1bb 0f0e 	cmp.w	fp, #14
 800aeb2:	f300 814a 	bgt.w	800b14a <_dtoa_r+0x722>
 800aeb6:	4b6b      	ldr	r3, [pc, #428]	; (800b064 <_dtoa_r+0x63c>)
 800aeb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aebc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f280 80dc 	bge.w	800b080 <_dtoa_r+0x658>
 800aec8:	9b04      	ldr	r3, [sp, #16]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f300 80d8 	bgt.w	800b080 <_dtoa_r+0x658>
 800aed0:	f040 826f 	bne.w	800b3b2 <_dtoa_r+0x98a>
 800aed4:	4b68      	ldr	r3, [pc, #416]	; (800b078 <_dtoa_r+0x650>)
 800aed6:	2200      	movs	r2, #0
 800aed8:	4640      	mov	r0, r8
 800aeda:	4649      	mov	r1, r9
 800aedc:	f7f5 fba4 	bl	8000628 <__aeabi_dmul>
 800aee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aee4:	f7f5 fe26 	bl	8000b34 <__aeabi_dcmpge>
 800aee8:	9e04      	ldr	r6, [sp, #16]
 800aeea:	4637      	mov	r7, r6
 800aeec:	2800      	cmp	r0, #0
 800aeee:	f040 8245 	bne.w	800b37c <_dtoa_r+0x954>
 800aef2:	9d00      	ldr	r5, [sp, #0]
 800aef4:	2331      	movs	r3, #49	; 0x31
 800aef6:	f805 3b01 	strb.w	r3, [r5], #1
 800aefa:	f10b 0b01 	add.w	fp, fp, #1
 800aefe:	e241      	b.n	800b384 <_dtoa_r+0x95c>
 800af00:	07f2      	lsls	r2, r6, #31
 800af02:	d505      	bpl.n	800af10 <_dtoa_r+0x4e8>
 800af04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af08:	f7f5 fb8e 	bl	8000628 <__aeabi_dmul>
 800af0c:	3501      	adds	r5, #1
 800af0e:	2301      	movs	r3, #1
 800af10:	1076      	asrs	r6, r6, #1
 800af12:	3708      	adds	r7, #8
 800af14:	e773      	b.n	800adfe <_dtoa_r+0x3d6>
 800af16:	2502      	movs	r5, #2
 800af18:	e775      	b.n	800ae06 <_dtoa_r+0x3de>
 800af1a:	9e04      	ldr	r6, [sp, #16]
 800af1c:	465f      	mov	r7, fp
 800af1e:	e792      	b.n	800ae46 <_dtoa_r+0x41e>
 800af20:	9900      	ldr	r1, [sp, #0]
 800af22:	4b50      	ldr	r3, [pc, #320]	; (800b064 <_dtoa_r+0x63c>)
 800af24:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af28:	4431      	add	r1, r6
 800af2a:	9102      	str	r1, [sp, #8]
 800af2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af2e:	eeb0 9a47 	vmov.f32	s18, s14
 800af32:	eef0 9a67 	vmov.f32	s19, s15
 800af36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af3e:	2900      	cmp	r1, #0
 800af40:	d044      	beq.n	800afcc <_dtoa_r+0x5a4>
 800af42:	494e      	ldr	r1, [pc, #312]	; (800b07c <_dtoa_r+0x654>)
 800af44:	2000      	movs	r0, #0
 800af46:	f7f5 fc99 	bl	800087c <__aeabi_ddiv>
 800af4a:	ec53 2b19 	vmov	r2, r3, d9
 800af4e:	f7f5 f9b3 	bl	80002b8 <__aeabi_dsub>
 800af52:	9d00      	ldr	r5, [sp, #0]
 800af54:	ec41 0b19 	vmov	d9, r0, r1
 800af58:	4649      	mov	r1, r9
 800af5a:	4640      	mov	r0, r8
 800af5c:	f7f5 fe14 	bl	8000b88 <__aeabi_d2iz>
 800af60:	4606      	mov	r6, r0
 800af62:	f7f5 faf7 	bl	8000554 <__aeabi_i2d>
 800af66:	4602      	mov	r2, r0
 800af68:	460b      	mov	r3, r1
 800af6a:	4640      	mov	r0, r8
 800af6c:	4649      	mov	r1, r9
 800af6e:	f7f5 f9a3 	bl	80002b8 <__aeabi_dsub>
 800af72:	3630      	adds	r6, #48	; 0x30
 800af74:	f805 6b01 	strb.w	r6, [r5], #1
 800af78:	ec53 2b19 	vmov	r2, r3, d9
 800af7c:	4680      	mov	r8, r0
 800af7e:	4689      	mov	r9, r1
 800af80:	f7f5 fdc4 	bl	8000b0c <__aeabi_dcmplt>
 800af84:	2800      	cmp	r0, #0
 800af86:	d164      	bne.n	800b052 <_dtoa_r+0x62a>
 800af88:	4642      	mov	r2, r8
 800af8a:	464b      	mov	r3, r9
 800af8c:	4937      	ldr	r1, [pc, #220]	; (800b06c <_dtoa_r+0x644>)
 800af8e:	2000      	movs	r0, #0
 800af90:	f7f5 f992 	bl	80002b8 <__aeabi_dsub>
 800af94:	ec53 2b19 	vmov	r2, r3, d9
 800af98:	f7f5 fdb8 	bl	8000b0c <__aeabi_dcmplt>
 800af9c:	2800      	cmp	r0, #0
 800af9e:	f040 80b6 	bne.w	800b10e <_dtoa_r+0x6e6>
 800afa2:	9b02      	ldr	r3, [sp, #8]
 800afa4:	429d      	cmp	r5, r3
 800afa6:	f43f af7c 	beq.w	800aea2 <_dtoa_r+0x47a>
 800afaa:	4b31      	ldr	r3, [pc, #196]	; (800b070 <_dtoa_r+0x648>)
 800afac:	ec51 0b19 	vmov	r0, r1, d9
 800afb0:	2200      	movs	r2, #0
 800afb2:	f7f5 fb39 	bl	8000628 <__aeabi_dmul>
 800afb6:	4b2e      	ldr	r3, [pc, #184]	; (800b070 <_dtoa_r+0x648>)
 800afb8:	ec41 0b19 	vmov	d9, r0, r1
 800afbc:	2200      	movs	r2, #0
 800afbe:	4640      	mov	r0, r8
 800afc0:	4649      	mov	r1, r9
 800afc2:	f7f5 fb31 	bl	8000628 <__aeabi_dmul>
 800afc6:	4680      	mov	r8, r0
 800afc8:	4689      	mov	r9, r1
 800afca:	e7c5      	b.n	800af58 <_dtoa_r+0x530>
 800afcc:	ec51 0b17 	vmov	r0, r1, d7
 800afd0:	f7f5 fb2a 	bl	8000628 <__aeabi_dmul>
 800afd4:	9b02      	ldr	r3, [sp, #8]
 800afd6:	9d00      	ldr	r5, [sp, #0]
 800afd8:	930f      	str	r3, [sp, #60]	; 0x3c
 800afda:	ec41 0b19 	vmov	d9, r0, r1
 800afde:	4649      	mov	r1, r9
 800afe0:	4640      	mov	r0, r8
 800afe2:	f7f5 fdd1 	bl	8000b88 <__aeabi_d2iz>
 800afe6:	4606      	mov	r6, r0
 800afe8:	f7f5 fab4 	bl	8000554 <__aeabi_i2d>
 800afec:	3630      	adds	r6, #48	; 0x30
 800afee:	4602      	mov	r2, r0
 800aff0:	460b      	mov	r3, r1
 800aff2:	4640      	mov	r0, r8
 800aff4:	4649      	mov	r1, r9
 800aff6:	f7f5 f95f 	bl	80002b8 <__aeabi_dsub>
 800affa:	f805 6b01 	strb.w	r6, [r5], #1
 800affe:	9b02      	ldr	r3, [sp, #8]
 800b000:	429d      	cmp	r5, r3
 800b002:	4680      	mov	r8, r0
 800b004:	4689      	mov	r9, r1
 800b006:	f04f 0200 	mov.w	r2, #0
 800b00a:	d124      	bne.n	800b056 <_dtoa_r+0x62e>
 800b00c:	4b1b      	ldr	r3, [pc, #108]	; (800b07c <_dtoa_r+0x654>)
 800b00e:	ec51 0b19 	vmov	r0, r1, d9
 800b012:	f7f5 f953 	bl	80002bc <__adddf3>
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	4640      	mov	r0, r8
 800b01c:	4649      	mov	r1, r9
 800b01e:	f7f5 fd93 	bl	8000b48 <__aeabi_dcmpgt>
 800b022:	2800      	cmp	r0, #0
 800b024:	d173      	bne.n	800b10e <_dtoa_r+0x6e6>
 800b026:	ec53 2b19 	vmov	r2, r3, d9
 800b02a:	4914      	ldr	r1, [pc, #80]	; (800b07c <_dtoa_r+0x654>)
 800b02c:	2000      	movs	r0, #0
 800b02e:	f7f5 f943 	bl	80002b8 <__aeabi_dsub>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	4640      	mov	r0, r8
 800b038:	4649      	mov	r1, r9
 800b03a:	f7f5 fd67 	bl	8000b0c <__aeabi_dcmplt>
 800b03e:	2800      	cmp	r0, #0
 800b040:	f43f af2f 	beq.w	800aea2 <_dtoa_r+0x47a>
 800b044:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b046:	1e6b      	subs	r3, r5, #1
 800b048:	930f      	str	r3, [sp, #60]	; 0x3c
 800b04a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b04e:	2b30      	cmp	r3, #48	; 0x30
 800b050:	d0f8      	beq.n	800b044 <_dtoa_r+0x61c>
 800b052:	46bb      	mov	fp, r7
 800b054:	e04a      	b.n	800b0ec <_dtoa_r+0x6c4>
 800b056:	4b06      	ldr	r3, [pc, #24]	; (800b070 <_dtoa_r+0x648>)
 800b058:	f7f5 fae6 	bl	8000628 <__aeabi_dmul>
 800b05c:	4680      	mov	r8, r0
 800b05e:	4689      	mov	r9, r1
 800b060:	e7bd      	b.n	800afde <_dtoa_r+0x5b6>
 800b062:	bf00      	nop
 800b064:	0800e758 	.word	0x0800e758
 800b068:	0800e730 	.word	0x0800e730
 800b06c:	3ff00000 	.word	0x3ff00000
 800b070:	40240000 	.word	0x40240000
 800b074:	401c0000 	.word	0x401c0000
 800b078:	40140000 	.word	0x40140000
 800b07c:	3fe00000 	.word	0x3fe00000
 800b080:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b084:	9d00      	ldr	r5, [sp, #0]
 800b086:	4642      	mov	r2, r8
 800b088:	464b      	mov	r3, r9
 800b08a:	4630      	mov	r0, r6
 800b08c:	4639      	mov	r1, r7
 800b08e:	f7f5 fbf5 	bl	800087c <__aeabi_ddiv>
 800b092:	f7f5 fd79 	bl	8000b88 <__aeabi_d2iz>
 800b096:	9001      	str	r0, [sp, #4]
 800b098:	f7f5 fa5c 	bl	8000554 <__aeabi_i2d>
 800b09c:	4642      	mov	r2, r8
 800b09e:	464b      	mov	r3, r9
 800b0a0:	f7f5 fac2 	bl	8000628 <__aeabi_dmul>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	4639      	mov	r1, r7
 800b0ac:	f7f5 f904 	bl	80002b8 <__aeabi_dsub>
 800b0b0:	9e01      	ldr	r6, [sp, #4]
 800b0b2:	9f04      	ldr	r7, [sp, #16]
 800b0b4:	3630      	adds	r6, #48	; 0x30
 800b0b6:	f805 6b01 	strb.w	r6, [r5], #1
 800b0ba:	9e00      	ldr	r6, [sp, #0]
 800b0bc:	1bae      	subs	r6, r5, r6
 800b0be:	42b7      	cmp	r7, r6
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	d134      	bne.n	800b130 <_dtoa_r+0x708>
 800b0c6:	f7f5 f8f9 	bl	80002bc <__adddf3>
 800b0ca:	4642      	mov	r2, r8
 800b0cc:	464b      	mov	r3, r9
 800b0ce:	4606      	mov	r6, r0
 800b0d0:	460f      	mov	r7, r1
 800b0d2:	f7f5 fd39 	bl	8000b48 <__aeabi_dcmpgt>
 800b0d6:	b9c8      	cbnz	r0, 800b10c <_dtoa_r+0x6e4>
 800b0d8:	4642      	mov	r2, r8
 800b0da:	464b      	mov	r3, r9
 800b0dc:	4630      	mov	r0, r6
 800b0de:	4639      	mov	r1, r7
 800b0e0:	f7f5 fd0a 	bl	8000af8 <__aeabi_dcmpeq>
 800b0e4:	b110      	cbz	r0, 800b0ec <_dtoa_r+0x6c4>
 800b0e6:	9b01      	ldr	r3, [sp, #4]
 800b0e8:	07db      	lsls	r3, r3, #31
 800b0ea:	d40f      	bmi.n	800b10c <_dtoa_r+0x6e4>
 800b0ec:	4651      	mov	r1, sl
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 fbcc 	bl	800b88c <_Bfree>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0f8:	702b      	strb	r3, [r5, #0]
 800b0fa:	f10b 0301 	add.w	r3, fp, #1
 800b0fe:	6013      	str	r3, [r2, #0]
 800b100:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b102:	2b00      	cmp	r3, #0
 800b104:	f43f ace2 	beq.w	800aacc <_dtoa_r+0xa4>
 800b108:	601d      	str	r5, [r3, #0]
 800b10a:	e4df      	b.n	800aacc <_dtoa_r+0xa4>
 800b10c:	465f      	mov	r7, fp
 800b10e:	462b      	mov	r3, r5
 800b110:	461d      	mov	r5, r3
 800b112:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b116:	2a39      	cmp	r2, #57	; 0x39
 800b118:	d106      	bne.n	800b128 <_dtoa_r+0x700>
 800b11a:	9a00      	ldr	r2, [sp, #0]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d1f7      	bne.n	800b110 <_dtoa_r+0x6e8>
 800b120:	9900      	ldr	r1, [sp, #0]
 800b122:	2230      	movs	r2, #48	; 0x30
 800b124:	3701      	adds	r7, #1
 800b126:	700a      	strb	r2, [r1, #0]
 800b128:	781a      	ldrb	r2, [r3, #0]
 800b12a:	3201      	adds	r2, #1
 800b12c:	701a      	strb	r2, [r3, #0]
 800b12e:	e790      	b.n	800b052 <_dtoa_r+0x62a>
 800b130:	4ba3      	ldr	r3, [pc, #652]	; (800b3c0 <_dtoa_r+0x998>)
 800b132:	2200      	movs	r2, #0
 800b134:	f7f5 fa78 	bl	8000628 <__aeabi_dmul>
 800b138:	2200      	movs	r2, #0
 800b13a:	2300      	movs	r3, #0
 800b13c:	4606      	mov	r6, r0
 800b13e:	460f      	mov	r7, r1
 800b140:	f7f5 fcda 	bl	8000af8 <__aeabi_dcmpeq>
 800b144:	2800      	cmp	r0, #0
 800b146:	d09e      	beq.n	800b086 <_dtoa_r+0x65e>
 800b148:	e7d0      	b.n	800b0ec <_dtoa_r+0x6c4>
 800b14a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b14c:	2a00      	cmp	r2, #0
 800b14e:	f000 80ca 	beq.w	800b2e6 <_dtoa_r+0x8be>
 800b152:	9a07      	ldr	r2, [sp, #28]
 800b154:	2a01      	cmp	r2, #1
 800b156:	f300 80ad 	bgt.w	800b2b4 <_dtoa_r+0x88c>
 800b15a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b15c:	2a00      	cmp	r2, #0
 800b15e:	f000 80a5 	beq.w	800b2ac <_dtoa_r+0x884>
 800b162:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b166:	9e08      	ldr	r6, [sp, #32]
 800b168:	9d05      	ldr	r5, [sp, #20]
 800b16a:	9a05      	ldr	r2, [sp, #20]
 800b16c:	441a      	add	r2, r3
 800b16e:	9205      	str	r2, [sp, #20]
 800b170:	9a06      	ldr	r2, [sp, #24]
 800b172:	2101      	movs	r1, #1
 800b174:	441a      	add	r2, r3
 800b176:	4620      	mov	r0, r4
 800b178:	9206      	str	r2, [sp, #24]
 800b17a:	f000 fc3d 	bl	800b9f8 <__i2b>
 800b17e:	4607      	mov	r7, r0
 800b180:	b165      	cbz	r5, 800b19c <_dtoa_r+0x774>
 800b182:	9b06      	ldr	r3, [sp, #24]
 800b184:	2b00      	cmp	r3, #0
 800b186:	dd09      	ble.n	800b19c <_dtoa_r+0x774>
 800b188:	42ab      	cmp	r3, r5
 800b18a:	9a05      	ldr	r2, [sp, #20]
 800b18c:	bfa8      	it	ge
 800b18e:	462b      	movge	r3, r5
 800b190:	1ad2      	subs	r2, r2, r3
 800b192:	9205      	str	r2, [sp, #20]
 800b194:	9a06      	ldr	r2, [sp, #24]
 800b196:	1aed      	subs	r5, r5, r3
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	9306      	str	r3, [sp, #24]
 800b19c:	9b08      	ldr	r3, [sp, #32]
 800b19e:	b1f3      	cbz	r3, 800b1de <_dtoa_r+0x7b6>
 800b1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f000 80a3 	beq.w	800b2ee <_dtoa_r+0x8c6>
 800b1a8:	2e00      	cmp	r6, #0
 800b1aa:	dd10      	ble.n	800b1ce <_dtoa_r+0x7a6>
 800b1ac:	4639      	mov	r1, r7
 800b1ae:	4632      	mov	r2, r6
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f000 fce1 	bl	800bb78 <__pow5mult>
 800b1b6:	4652      	mov	r2, sl
 800b1b8:	4601      	mov	r1, r0
 800b1ba:	4607      	mov	r7, r0
 800b1bc:	4620      	mov	r0, r4
 800b1be:	f000 fc31 	bl	800ba24 <__multiply>
 800b1c2:	4651      	mov	r1, sl
 800b1c4:	4680      	mov	r8, r0
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f000 fb60 	bl	800b88c <_Bfree>
 800b1cc:	46c2      	mov	sl, r8
 800b1ce:	9b08      	ldr	r3, [sp, #32]
 800b1d0:	1b9a      	subs	r2, r3, r6
 800b1d2:	d004      	beq.n	800b1de <_dtoa_r+0x7b6>
 800b1d4:	4651      	mov	r1, sl
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f000 fcce 	bl	800bb78 <__pow5mult>
 800b1dc:	4682      	mov	sl, r0
 800b1de:	2101      	movs	r1, #1
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f000 fc09 	bl	800b9f8 <__i2b>
 800b1e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	4606      	mov	r6, r0
 800b1ec:	f340 8081 	ble.w	800b2f2 <_dtoa_r+0x8ca>
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	4601      	mov	r1, r0
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	f000 fcbf 	bl	800bb78 <__pow5mult>
 800b1fa:	9b07      	ldr	r3, [sp, #28]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	4606      	mov	r6, r0
 800b200:	dd7a      	ble.n	800b2f8 <_dtoa_r+0x8d0>
 800b202:	f04f 0800 	mov.w	r8, #0
 800b206:	6933      	ldr	r3, [r6, #16]
 800b208:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b20c:	6918      	ldr	r0, [r3, #16]
 800b20e:	f000 fba5 	bl	800b95c <__hi0bits>
 800b212:	f1c0 0020 	rsb	r0, r0, #32
 800b216:	9b06      	ldr	r3, [sp, #24]
 800b218:	4418      	add	r0, r3
 800b21a:	f010 001f 	ands.w	r0, r0, #31
 800b21e:	f000 8094 	beq.w	800b34a <_dtoa_r+0x922>
 800b222:	f1c0 0320 	rsb	r3, r0, #32
 800b226:	2b04      	cmp	r3, #4
 800b228:	f340 8085 	ble.w	800b336 <_dtoa_r+0x90e>
 800b22c:	9b05      	ldr	r3, [sp, #20]
 800b22e:	f1c0 001c 	rsb	r0, r0, #28
 800b232:	4403      	add	r3, r0
 800b234:	9305      	str	r3, [sp, #20]
 800b236:	9b06      	ldr	r3, [sp, #24]
 800b238:	4403      	add	r3, r0
 800b23a:	4405      	add	r5, r0
 800b23c:	9306      	str	r3, [sp, #24]
 800b23e:	9b05      	ldr	r3, [sp, #20]
 800b240:	2b00      	cmp	r3, #0
 800b242:	dd05      	ble.n	800b250 <_dtoa_r+0x828>
 800b244:	4651      	mov	r1, sl
 800b246:	461a      	mov	r2, r3
 800b248:	4620      	mov	r0, r4
 800b24a:	f000 fcef 	bl	800bc2c <__lshift>
 800b24e:	4682      	mov	sl, r0
 800b250:	9b06      	ldr	r3, [sp, #24]
 800b252:	2b00      	cmp	r3, #0
 800b254:	dd05      	ble.n	800b262 <_dtoa_r+0x83a>
 800b256:	4631      	mov	r1, r6
 800b258:	461a      	mov	r2, r3
 800b25a:	4620      	mov	r0, r4
 800b25c:	f000 fce6 	bl	800bc2c <__lshift>
 800b260:	4606      	mov	r6, r0
 800b262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b264:	2b00      	cmp	r3, #0
 800b266:	d072      	beq.n	800b34e <_dtoa_r+0x926>
 800b268:	4631      	mov	r1, r6
 800b26a:	4650      	mov	r0, sl
 800b26c:	f000 fd4a 	bl	800bd04 <__mcmp>
 800b270:	2800      	cmp	r0, #0
 800b272:	da6c      	bge.n	800b34e <_dtoa_r+0x926>
 800b274:	2300      	movs	r3, #0
 800b276:	4651      	mov	r1, sl
 800b278:	220a      	movs	r2, #10
 800b27a:	4620      	mov	r0, r4
 800b27c:	f000 fb28 	bl	800b8d0 <__multadd>
 800b280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b282:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b286:	4682      	mov	sl, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f000 81b0 	beq.w	800b5ee <_dtoa_r+0xbc6>
 800b28e:	2300      	movs	r3, #0
 800b290:	4639      	mov	r1, r7
 800b292:	220a      	movs	r2, #10
 800b294:	4620      	mov	r0, r4
 800b296:	f000 fb1b 	bl	800b8d0 <__multadd>
 800b29a:	9b01      	ldr	r3, [sp, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	4607      	mov	r7, r0
 800b2a0:	f300 8096 	bgt.w	800b3d0 <_dtoa_r+0x9a8>
 800b2a4:	9b07      	ldr	r3, [sp, #28]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	dc59      	bgt.n	800b35e <_dtoa_r+0x936>
 800b2aa:	e091      	b.n	800b3d0 <_dtoa_r+0x9a8>
 800b2ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b2b2:	e758      	b.n	800b166 <_dtoa_r+0x73e>
 800b2b4:	9b04      	ldr	r3, [sp, #16]
 800b2b6:	1e5e      	subs	r6, r3, #1
 800b2b8:	9b08      	ldr	r3, [sp, #32]
 800b2ba:	42b3      	cmp	r3, r6
 800b2bc:	bfbf      	itttt	lt
 800b2be:	9b08      	ldrlt	r3, [sp, #32]
 800b2c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b2c2:	9608      	strlt	r6, [sp, #32]
 800b2c4:	1af3      	sublt	r3, r6, r3
 800b2c6:	bfb4      	ite	lt
 800b2c8:	18d2      	addlt	r2, r2, r3
 800b2ca:	1b9e      	subge	r6, r3, r6
 800b2cc:	9b04      	ldr	r3, [sp, #16]
 800b2ce:	bfbc      	itt	lt
 800b2d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b2d2:	2600      	movlt	r6, #0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	bfb7      	itett	lt
 800b2d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b2dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b2e0:	1a9d      	sublt	r5, r3, r2
 800b2e2:	2300      	movlt	r3, #0
 800b2e4:	e741      	b.n	800b16a <_dtoa_r+0x742>
 800b2e6:	9e08      	ldr	r6, [sp, #32]
 800b2e8:	9d05      	ldr	r5, [sp, #20]
 800b2ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b2ec:	e748      	b.n	800b180 <_dtoa_r+0x758>
 800b2ee:	9a08      	ldr	r2, [sp, #32]
 800b2f0:	e770      	b.n	800b1d4 <_dtoa_r+0x7ac>
 800b2f2:	9b07      	ldr	r3, [sp, #28]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	dc19      	bgt.n	800b32c <_dtoa_r+0x904>
 800b2f8:	9b02      	ldr	r3, [sp, #8]
 800b2fa:	b9bb      	cbnz	r3, 800b32c <_dtoa_r+0x904>
 800b2fc:	9b03      	ldr	r3, [sp, #12]
 800b2fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b302:	b99b      	cbnz	r3, 800b32c <_dtoa_r+0x904>
 800b304:	9b03      	ldr	r3, [sp, #12]
 800b306:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b30a:	0d1b      	lsrs	r3, r3, #20
 800b30c:	051b      	lsls	r3, r3, #20
 800b30e:	b183      	cbz	r3, 800b332 <_dtoa_r+0x90a>
 800b310:	9b05      	ldr	r3, [sp, #20]
 800b312:	3301      	adds	r3, #1
 800b314:	9305      	str	r3, [sp, #20]
 800b316:	9b06      	ldr	r3, [sp, #24]
 800b318:	3301      	adds	r3, #1
 800b31a:	9306      	str	r3, [sp, #24]
 800b31c:	f04f 0801 	mov.w	r8, #1
 800b320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b322:	2b00      	cmp	r3, #0
 800b324:	f47f af6f 	bne.w	800b206 <_dtoa_r+0x7de>
 800b328:	2001      	movs	r0, #1
 800b32a:	e774      	b.n	800b216 <_dtoa_r+0x7ee>
 800b32c:	f04f 0800 	mov.w	r8, #0
 800b330:	e7f6      	b.n	800b320 <_dtoa_r+0x8f8>
 800b332:	4698      	mov	r8, r3
 800b334:	e7f4      	b.n	800b320 <_dtoa_r+0x8f8>
 800b336:	d082      	beq.n	800b23e <_dtoa_r+0x816>
 800b338:	9a05      	ldr	r2, [sp, #20]
 800b33a:	331c      	adds	r3, #28
 800b33c:	441a      	add	r2, r3
 800b33e:	9205      	str	r2, [sp, #20]
 800b340:	9a06      	ldr	r2, [sp, #24]
 800b342:	441a      	add	r2, r3
 800b344:	441d      	add	r5, r3
 800b346:	9206      	str	r2, [sp, #24]
 800b348:	e779      	b.n	800b23e <_dtoa_r+0x816>
 800b34a:	4603      	mov	r3, r0
 800b34c:	e7f4      	b.n	800b338 <_dtoa_r+0x910>
 800b34e:	9b04      	ldr	r3, [sp, #16]
 800b350:	2b00      	cmp	r3, #0
 800b352:	dc37      	bgt.n	800b3c4 <_dtoa_r+0x99c>
 800b354:	9b07      	ldr	r3, [sp, #28]
 800b356:	2b02      	cmp	r3, #2
 800b358:	dd34      	ble.n	800b3c4 <_dtoa_r+0x99c>
 800b35a:	9b04      	ldr	r3, [sp, #16]
 800b35c:	9301      	str	r3, [sp, #4]
 800b35e:	9b01      	ldr	r3, [sp, #4]
 800b360:	b963      	cbnz	r3, 800b37c <_dtoa_r+0x954>
 800b362:	4631      	mov	r1, r6
 800b364:	2205      	movs	r2, #5
 800b366:	4620      	mov	r0, r4
 800b368:	f000 fab2 	bl	800b8d0 <__multadd>
 800b36c:	4601      	mov	r1, r0
 800b36e:	4606      	mov	r6, r0
 800b370:	4650      	mov	r0, sl
 800b372:	f000 fcc7 	bl	800bd04 <__mcmp>
 800b376:	2800      	cmp	r0, #0
 800b378:	f73f adbb 	bgt.w	800aef2 <_dtoa_r+0x4ca>
 800b37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b37e:	9d00      	ldr	r5, [sp, #0]
 800b380:	ea6f 0b03 	mvn.w	fp, r3
 800b384:	f04f 0800 	mov.w	r8, #0
 800b388:	4631      	mov	r1, r6
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 fa7e 	bl	800b88c <_Bfree>
 800b390:	2f00      	cmp	r7, #0
 800b392:	f43f aeab 	beq.w	800b0ec <_dtoa_r+0x6c4>
 800b396:	f1b8 0f00 	cmp.w	r8, #0
 800b39a:	d005      	beq.n	800b3a8 <_dtoa_r+0x980>
 800b39c:	45b8      	cmp	r8, r7
 800b39e:	d003      	beq.n	800b3a8 <_dtoa_r+0x980>
 800b3a0:	4641      	mov	r1, r8
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f000 fa72 	bl	800b88c <_Bfree>
 800b3a8:	4639      	mov	r1, r7
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f000 fa6e 	bl	800b88c <_Bfree>
 800b3b0:	e69c      	b.n	800b0ec <_dtoa_r+0x6c4>
 800b3b2:	2600      	movs	r6, #0
 800b3b4:	4637      	mov	r7, r6
 800b3b6:	e7e1      	b.n	800b37c <_dtoa_r+0x954>
 800b3b8:	46bb      	mov	fp, r7
 800b3ba:	4637      	mov	r7, r6
 800b3bc:	e599      	b.n	800aef2 <_dtoa_r+0x4ca>
 800b3be:	bf00      	nop
 800b3c0:	40240000 	.word	0x40240000
 800b3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f000 80c8 	beq.w	800b55c <_dtoa_r+0xb34>
 800b3cc:	9b04      	ldr	r3, [sp, #16]
 800b3ce:	9301      	str	r3, [sp, #4]
 800b3d0:	2d00      	cmp	r5, #0
 800b3d2:	dd05      	ble.n	800b3e0 <_dtoa_r+0x9b8>
 800b3d4:	4639      	mov	r1, r7
 800b3d6:	462a      	mov	r2, r5
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f000 fc27 	bl	800bc2c <__lshift>
 800b3de:	4607      	mov	r7, r0
 800b3e0:	f1b8 0f00 	cmp.w	r8, #0
 800b3e4:	d05b      	beq.n	800b49e <_dtoa_r+0xa76>
 800b3e6:	6879      	ldr	r1, [r7, #4]
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f000 fa0f 	bl	800b80c <_Balloc>
 800b3ee:	4605      	mov	r5, r0
 800b3f0:	b928      	cbnz	r0, 800b3fe <_dtoa_r+0x9d6>
 800b3f2:	4b83      	ldr	r3, [pc, #524]	; (800b600 <_dtoa_r+0xbd8>)
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b3fa:	f7ff bb2e 	b.w	800aa5a <_dtoa_r+0x32>
 800b3fe:	693a      	ldr	r2, [r7, #16]
 800b400:	3202      	adds	r2, #2
 800b402:	0092      	lsls	r2, r2, #2
 800b404:	f107 010c 	add.w	r1, r7, #12
 800b408:	300c      	adds	r0, #12
 800b40a:	f7ff fa76 	bl	800a8fa <memcpy>
 800b40e:	2201      	movs	r2, #1
 800b410:	4629      	mov	r1, r5
 800b412:	4620      	mov	r0, r4
 800b414:	f000 fc0a 	bl	800bc2c <__lshift>
 800b418:	9b00      	ldr	r3, [sp, #0]
 800b41a:	3301      	adds	r3, #1
 800b41c:	9304      	str	r3, [sp, #16]
 800b41e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b422:	4413      	add	r3, r2
 800b424:	9308      	str	r3, [sp, #32]
 800b426:	9b02      	ldr	r3, [sp, #8]
 800b428:	f003 0301 	and.w	r3, r3, #1
 800b42c:	46b8      	mov	r8, r7
 800b42e:	9306      	str	r3, [sp, #24]
 800b430:	4607      	mov	r7, r0
 800b432:	9b04      	ldr	r3, [sp, #16]
 800b434:	4631      	mov	r1, r6
 800b436:	3b01      	subs	r3, #1
 800b438:	4650      	mov	r0, sl
 800b43a:	9301      	str	r3, [sp, #4]
 800b43c:	f7ff fa6b 	bl	800a916 <quorem>
 800b440:	4641      	mov	r1, r8
 800b442:	9002      	str	r0, [sp, #8]
 800b444:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b448:	4650      	mov	r0, sl
 800b44a:	f000 fc5b 	bl	800bd04 <__mcmp>
 800b44e:	463a      	mov	r2, r7
 800b450:	9005      	str	r0, [sp, #20]
 800b452:	4631      	mov	r1, r6
 800b454:	4620      	mov	r0, r4
 800b456:	f000 fc71 	bl	800bd3c <__mdiff>
 800b45a:	68c2      	ldr	r2, [r0, #12]
 800b45c:	4605      	mov	r5, r0
 800b45e:	bb02      	cbnz	r2, 800b4a2 <_dtoa_r+0xa7a>
 800b460:	4601      	mov	r1, r0
 800b462:	4650      	mov	r0, sl
 800b464:	f000 fc4e 	bl	800bd04 <__mcmp>
 800b468:	4602      	mov	r2, r0
 800b46a:	4629      	mov	r1, r5
 800b46c:	4620      	mov	r0, r4
 800b46e:	9209      	str	r2, [sp, #36]	; 0x24
 800b470:	f000 fa0c 	bl	800b88c <_Bfree>
 800b474:	9b07      	ldr	r3, [sp, #28]
 800b476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b478:	9d04      	ldr	r5, [sp, #16]
 800b47a:	ea43 0102 	orr.w	r1, r3, r2
 800b47e:	9b06      	ldr	r3, [sp, #24]
 800b480:	4319      	orrs	r1, r3
 800b482:	d110      	bne.n	800b4a6 <_dtoa_r+0xa7e>
 800b484:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b488:	d029      	beq.n	800b4de <_dtoa_r+0xab6>
 800b48a:	9b05      	ldr	r3, [sp, #20]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	dd02      	ble.n	800b496 <_dtoa_r+0xa6e>
 800b490:	9b02      	ldr	r3, [sp, #8]
 800b492:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b496:	9b01      	ldr	r3, [sp, #4]
 800b498:	f883 9000 	strb.w	r9, [r3]
 800b49c:	e774      	b.n	800b388 <_dtoa_r+0x960>
 800b49e:	4638      	mov	r0, r7
 800b4a0:	e7ba      	b.n	800b418 <_dtoa_r+0x9f0>
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	e7e1      	b.n	800b46a <_dtoa_r+0xa42>
 800b4a6:	9b05      	ldr	r3, [sp, #20]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	db04      	blt.n	800b4b6 <_dtoa_r+0xa8e>
 800b4ac:	9907      	ldr	r1, [sp, #28]
 800b4ae:	430b      	orrs	r3, r1
 800b4b0:	9906      	ldr	r1, [sp, #24]
 800b4b2:	430b      	orrs	r3, r1
 800b4b4:	d120      	bne.n	800b4f8 <_dtoa_r+0xad0>
 800b4b6:	2a00      	cmp	r2, #0
 800b4b8:	dded      	ble.n	800b496 <_dtoa_r+0xa6e>
 800b4ba:	4651      	mov	r1, sl
 800b4bc:	2201      	movs	r2, #1
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f000 fbb4 	bl	800bc2c <__lshift>
 800b4c4:	4631      	mov	r1, r6
 800b4c6:	4682      	mov	sl, r0
 800b4c8:	f000 fc1c 	bl	800bd04 <__mcmp>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	dc03      	bgt.n	800b4d8 <_dtoa_r+0xab0>
 800b4d0:	d1e1      	bne.n	800b496 <_dtoa_r+0xa6e>
 800b4d2:	f019 0f01 	tst.w	r9, #1
 800b4d6:	d0de      	beq.n	800b496 <_dtoa_r+0xa6e>
 800b4d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b4dc:	d1d8      	bne.n	800b490 <_dtoa_r+0xa68>
 800b4de:	9a01      	ldr	r2, [sp, #4]
 800b4e0:	2339      	movs	r3, #57	; 0x39
 800b4e2:	7013      	strb	r3, [r2, #0]
 800b4e4:	462b      	mov	r3, r5
 800b4e6:	461d      	mov	r5, r3
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b4ee:	2a39      	cmp	r2, #57	; 0x39
 800b4f0:	d06c      	beq.n	800b5cc <_dtoa_r+0xba4>
 800b4f2:	3201      	adds	r2, #1
 800b4f4:	701a      	strb	r2, [r3, #0]
 800b4f6:	e747      	b.n	800b388 <_dtoa_r+0x960>
 800b4f8:	2a00      	cmp	r2, #0
 800b4fa:	dd07      	ble.n	800b50c <_dtoa_r+0xae4>
 800b4fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b500:	d0ed      	beq.n	800b4de <_dtoa_r+0xab6>
 800b502:	9a01      	ldr	r2, [sp, #4]
 800b504:	f109 0301 	add.w	r3, r9, #1
 800b508:	7013      	strb	r3, [r2, #0]
 800b50a:	e73d      	b.n	800b388 <_dtoa_r+0x960>
 800b50c:	9b04      	ldr	r3, [sp, #16]
 800b50e:	9a08      	ldr	r2, [sp, #32]
 800b510:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b514:	4293      	cmp	r3, r2
 800b516:	d043      	beq.n	800b5a0 <_dtoa_r+0xb78>
 800b518:	4651      	mov	r1, sl
 800b51a:	2300      	movs	r3, #0
 800b51c:	220a      	movs	r2, #10
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 f9d6 	bl	800b8d0 <__multadd>
 800b524:	45b8      	cmp	r8, r7
 800b526:	4682      	mov	sl, r0
 800b528:	f04f 0300 	mov.w	r3, #0
 800b52c:	f04f 020a 	mov.w	r2, #10
 800b530:	4641      	mov	r1, r8
 800b532:	4620      	mov	r0, r4
 800b534:	d107      	bne.n	800b546 <_dtoa_r+0xb1e>
 800b536:	f000 f9cb 	bl	800b8d0 <__multadd>
 800b53a:	4680      	mov	r8, r0
 800b53c:	4607      	mov	r7, r0
 800b53e:	9b04      	ldr	r3, [sp, #16]
 800b540:	3301      	adds	r3, #1
 800b542:	9304      	str	r3, [sp, #16]
 800b544:	e775      	b.n	800b432 <_dtoa_r+0xa0a>
 800b546:	f000 f9c3 	bl	800b8d0 <__multadd>
 800b54a:	4639      	mov	r1, r7
 800b54c:	4680      	mov	r8, r0
 800b54e:	2300      	movs	r3, #0
 800b550:	220a      	movs	r2, #10
 800b552:	4620      	mov	r0, r4
 800b554:	f000 f9bc 	bl	800b8d0 <__multadd>
 800b558:	4607      	mov	r7, r0
 800b55a:	e7f0      	b.n	800b53e <_dtoa_r+0xb16>
 800b55c:	9b04      	ldr	r3, [sp, #16]
 800b55e:	9301      	str	r3, [sp, #4]
 800b560:	9d00      	ldr	r5, [sp, #0]
 800b562:	4631      	mov	r1, r6
 800b564:	4650      	mov	r0, sl
 800b566:	f7ff f9d6 	bl	800a916 <quorem>
 800b56a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b56e:	9b00      	ldr	r3, [sp, #0]
 800b570:	f805 9b01 	strb.w	r9, [r5], #1
 800b574:	1aea      	subs	r2, r5, r3
 800b576:	9b01      	ldr	r3, [sp, #4]
 800b578:	4293      	cmp	r3, r2
 800b57a:	dd07      	ble.n	800b58c <_dtoa_r+0xb64>
 800b57c:	4651      	mov	r1, sl
 800b57e:	2300      	movs	r3, #0
 800b580:	220a      	movs	r2, #10
 800b582:	4620      	mov	r0, r4
 800b584:	f000 f9a4 	bl	800b8d0 <__multadd>
 800b588:	4682      	mov	sl, r0
 800b58a:	e7ea      	b.n	800b562 <_dtoa_r+0xb3a>
 800b58c:	9b01      	ldr	r3, [sp, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	bfc8      	it	gt
 800b592:	461d      	movgt	r5, r3
 800b594:	9b00      	ldr	r3, [sp, #0]
 800b596:	bfd8      	it	le
 800b598:	2501      	movle	r5, #1
 800b59a:	441d      	add	r5, r3
 800b59c:	f04f 0800 	mov.w	r8, #0
 800b5a0:	4651      	mov	r1, sl
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f000 fb41 	bl	800bc2c <__lshift>
 800b5aa:	4631      	mov	r1, r6
 800b5ac:	4682      	mov	sl, r0
 800b5ae:	f000 fba9 	bl	800bd04 <__mcmp>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	dc96      	bgt.n	800b4e4 <_dtoa_r+0xabc>
 800b5b6:	d102      	bne.n	800b5be <_dtoa_r+0xb96>
 800b5b8:	f019 0f01 	tst.w	r9, #1
 800b5bc:	d192      	bne.n	800b4e4 <_dtoa_r+0xabc>
 800b5be:	462b      	mov	r3, r5
 800b5c0:	461d      	mov	r5, r3
 800b5c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5c6:	2a30      	cmp	r2, #48	; 0x30
 800b5c8:	d0fa      	beq.n	800b5c0 <_dtoa_r+0xb98>
 800b5ca:	e6dd      	b.n	800b388 <_dtoa_r+0x960>
 800b5cc:	9a00      	ldr	r2, [sp, #0]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d189      	bne.n	800b4e6 <_dtoa_r+0xabe>
 800b5d2:	f10b 0b01 	add.w	fp, fp, #1
 800b5d6:	2331      	movs	r3, #49	; 0x31
 800b5d8:	e796      	b.n	800b508 <_dtoa_r+0xae0>
 800b5da:	4b0a      	ldr	r3, [pc, #40]	; (800b604 <_dtoa_r+0xbdc>)
 800b5dc:	f7ff ba99 	b.w	800ab12 <_dtoa_r+0xea>
 800b5e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f47f aa6d 	bne.w	800aac2 <_dtoa_r+0x9a>
 800b5e8:	4b07      	ldr	r3, [pc, #28]	; (800b608 <_dtoa_r+0xbe0>)
 800b5ea:	f7ff ba92 	b.w	800ab12 <_dtoa_r+0xea>
 800b5ee:	9b01      	ldr	r3, [sp, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	dcb5      	bgt.n	800b560 <_dtoa_r+0xb38>
 800b5f4:	9b07      	ldr	r3, [sp, #28]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	f73f aeb1 	bgt.w	800b35e <_dtoa_r+0x936>
 800b5fc:	e7b0      	b.n	800b560 <_dtoa_r+0xb38>
 800b5fe:	bf00      	nop
 800b600:	0800e6c0 	.word	0x0800e6c0
 800b604:	0800e620 	.word	0x0800e620
 800b608:	0800e644 	.word	0x0800e644

0800b60c <_free_r>:
 800b60c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b60e:	2900      	cmp	r1, #0
 800b610:	d044      	beq.n	800b69c <_free_r+0x90>
 800b612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b616:	9001      	str	r0, [sp, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f1a1 0404 	sub.w	r4, r1, #4
 800b61e:	bfb8      	it	lt
 800b620:	18e4      	addlt	r4, r4, r3
 800b622:	f000 f8e7 	bl	800b7f4 <__malloc_lock>
 800b626:	4a1e      	ldr	r2, [pc, #120]	; (800b6a0 <_free_r+0x94>)
 800b628:	9801      	ldr	r0, [sp, #4]
 800b62a:	6813      	ldr	r3, [r2, #0]
 800b62c:	b933      	cbnz	r3, 800b63c <_free_r+0x30>
 800b62e:	6063      	str	r3, [r4, #4]
 800b630:	6014      	str	r4, [r2, #0]
 800b632:	b003      	add	sp, #12
 800b634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b638:	f000 b8e2 	b.w	800b800 <__malloc_unlock>
 800b63c:	42a3      	cmp	r3, r4
 800b63e:	d908      	bls.n	800b652 <_free_r+0x46>
 800b640:	6825      	ldr	r5, [r4, #0]
 800b642:	1961      	adds	r1, r4, r5
 800b644:	428b      	cmp	r3, r1
 800b646:	bf01      	itttt	eq
 800b648:	6819      	ldreq	r1, [r3, #0]
 800b64a:	685b      	ldreq	r3, [r3, #4]
 800b64c:	1949      	addeq	r1, r1, r5
 800b64e:	6021      	streq	r1, [r4, #0]
 800b650:	e7ed      	b.n	800b62e <_free_r+0x22>
 800b652:	461a      	mov	r2, r3
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	b10b      	cbz	r3, 800b65c <_free_r+0x50>
 800b658:	42a3      	cmp	r3, r4
 800b65a:	d9fa      	bls.n	800b652 <_free_r+0x46>
 800b65c:	6811      	ldr	r1, [r2, #0]
 800b65e:	1855      	adds	r5, r2, r1
 800b660:	42a5      	cmp	r5, r4
 800b662:	d10b      	bne.n	800b67c <_free_r+0x70>
 800b664:	6824      	ldr	r4, [r4, #0]
 800b666:	4421      	add	r1, r4
 800b668:	1854      	adds	r4, r2, r1
 800b66a:	42a3      	cmp	r3, r4
 800b66c:	6011      	str	r1, [r2, #0]
 800b66e:	d1e0      	bne.n	800b632 <_free_r+0x26>
 800b670:	681c      	ldr	r4, [r3, #0]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	6053      	str	r3, [r2, #4]
 800b676:	440c      	add	r4, r1
 800b678:	6014      	str	r4, [r2, #0]
 800b67a:	e7da      	b.n	800b632 <_free_r+0x26>
 800b67c:	d902      	bls.n	800b684 <_free_r+0x78>
 800b67e:	230c      	movs	r3, #12
 800b680:	6003      	str	r3, [r0, #0]
 800b682:	e7d6      	b.n	800b632 <_free_r+0x26>
 800b684:	6825      	ldr	r5, [r4, #0]
 800b686:	1961      	adds	r1, r4, r5
 800b688:	428b      	cmp	r3, r1
 800b68a:	bf04      	itt	eq
 800b68c:	6819      	ldreq	r1, [r3, #0]
 800b68e:	685b      	ldreq	r3, [r3, #4]
 800b690:	6063      	str	r3, [r4, #4]
 800b692:	bf04      	itt	eq
 800b694:	1949      	addeq	r1, r1, r5
 800b696:	6021      	streq	r1, [r4, #0]
 800b698:	6054      	str	r4, [r2, #4]
 800b69a:	e7ca      	b.n	800b632 <_free_r+0x26>
 800b69c:	b003      	add	sp, #12
 800b69e:	bd30      	pop	{r4, r5, pc}
 800b6a0:	20003c10 	.word	0x20003c10

0800b6a4 <malloc>:
 800b6a4:	4b02      	ldr	r3, [pc, #8]	; (800b6b0 <malloc+0xc>)
 800b6a6:	4601      	mov	r1, r0
 800b6a8:	6818      	ldr	r0, [r3, #0]
 800b6aa:	f000 b823 	b.w	800b6f4 <_malloc_r>
 800b6ae:	bf00      	nop
 800b6b0:	20000810 	.word	0x20000810

0800b6b4 <sbrk_aligned>:
 800b6b4:	b570      	push	{r4, r5, r6, lr}
 800b6b6:	4e0e      	ldr	r6, [pc, #56]	; (800b6f0 <sbrk_aligned+0x3c>)
 800b6b8:	460c      	mov	r4, r1
 800b6ba:	6831      	ldr	r1, [r6, #0]
 800b6bc:	4605      	mov	r5, r0
 800b6be:	b911      	cbnz	r1, 800b6c6 <sbrk_aligned+0x12>
 800b6c0:	f000 feaa 	bl	800c418 <_sbrk_r>
 800b6c4:	6030      	str	r0, [r6, #0]
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	f000 fea5 	bl	800c418 <_sbrk_r>
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	d00a      	beq.n	800b6e8 <sbrk_aligned+0x34>
 800b6d2:	1cc4      	adds	r4, r0, #3
 800b6d4:	f024 0403 	bic.w	r4, r4, #3
 800b6d8:	42a0      	cmp	r0, r4
 800b6da:	d007      	beq.n	800b6ec <sbrk_aligned+0x38>
 800b6dc:	1a21      	subs	r1, r4, r0
 800b6de:	4628      	mov	r0, r5
 800b6e0:	f000 fe9a 	bl	800c418 <_sbrk_r>
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	d101      	bne.n	800b6ec <sbrk_aligned+0x38>
 800b6e8:	f04f 34ff 	mov.w	r4, #4294967295
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	bd70      	pop	{r4, r5, r6, pc}
 800b6f0:	20003c14 	.word	0x20003c14

0800b6f4 <_malloc_r>:
 800b6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6f8:	1ccd      	adds	r5, r1, #3
 800b6fa:	f025 0503 	bic.w	r5, r5, #3
 800b6fe:	3508      	adds	r5, #8
 800b700:	2d0c      	cmp	r5, #12
 800b702:	bf38      	it	cc
 800b704:	250c      	movcc	r5, #12
 800b706:	2d00      	cmp	r5, #0
 800b708:	4607      	mov	r7, r0
 800b70a:	db01      	blt.n	800b710 <_malloc_r+0x1c>
 800b70c:	42a9      	cmp	r1, r5
 800b70e:	d905      	bls.n	800b71c <_malloc_r+0x28>
 800b710:	230c      	movs	r3, #12
 800b712:	603b      	str	r3, [r7, #0]
 800b714:	2600      	movs	r6, #0
 800b716:	4630      	mov	r0, r6
 800b718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b71c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b7f0 <_malloc_r+0xfc>
 800b720:	f000 f868 	bl	800b7f4 <__malloc_lock>
 800b724:	f8d8 3000 	ldr.w	r3, [r8]
 800b728:	461c      	mov	r4, r3
 800b72a:	bb5c      	cbnz	r4, 800b784 <_malloc_r+0x90>
 800b72c:	4629      	mov	r1, r5
 800b72e:	4638      	mov	r0, r7
 800b730:	f7ff ffc0 	bl	800b6b4 <sbrk_aligned>
 800b734:	1c43      	adds	r3, r0, #1
 800b736:	4604      	mov	r4, r0
 800b738:	d155      	bne.n	800b7e6 <_malloc_r+0xf2>
 800b73a:	f8d8 4000 	ldr.w	r4, [r8]
 800b73e:	4626      	mov	r6, r4
 800b740:	2e00      	cmp	r6, #0
 800b742:	d145      	bne.n	800b7d0 <_malloc_r+0xdc>
 800b744:	2c00      	cmp	r4, #0
 800b746:	d048      	beq.n	800b7da <_malloc_r+0xe6>
 800b748:	6823      	ldr	r3, [r4, #0]
 800b74a:	4631      	mov	r1, r6
 800b74c:	4638      	mov	r0, r7
 800b74e:	eb04 0903 	add.w	r9, r4, r3
 800b752:	f000 fe61 	bl	800c418 <_sbrk_r>
 800b756:	4581      	cmp	r9, r0
 800b758:	d13f      	bne.n	800b7da <_malloc_r+0xe6>
 800b75a:	6821      	ldr	r1, [r4, #0]
 800b75c:	1a6d      	subs	r5, r5, r1
 800b75e:	4629      	mov	r1, r5
 800b760:	4638      	mov	r0, r7
 800b762:	f7ff ffa7 	bl	800b6b4 <sbrk_aligned>
 800b766:	3001      	adds	r0, #1
 800b768:	d037      	beq.n	800b7da <_malloc_r+0xe6>
 800b76a:	6823      	ldr	r3, [r4, #0]
 800b76c:	442b      	add	r3, r5
 800b76e:	6023      	str	r3, [r4, #0]
 800b770:	f8d8 3000 	ldr.w	r3, [r8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d038      	beq.n	800b7ea <_malloc_r+0xf6>
 800b778:	685a      	ldr	r2, [r3, #4]
 800b77a:	42a2      	cmp	r2, r4
 800b77c:	d12b      	bne.n	800b7d6 <_malloc_r+0xe2>
 800b77e:	2200      	movs	r2, #0
 800b780:	605a      	str	r2, [r3, #4]
 800b782:	e00f      	b.n	800b7a4 <_malloc_r+0xb0>
 800b784:	6822      	ldr	r2, [r4, #0]
 800b786:	1b52      	subs	r2, r2, r5
 800b788:	d41f      	bmi.n	800b7ca <_malloc_r+0xd6>
 800b78a:	2a0b      	cmp	r2, #11
 800b78c:	d917      	bls.n	800b7be <_malloc_r+0xca>
 800b78e:	1961      	adds	r1, r4, r5
 800b790:	42a3      	cmp	r3, r4
 800b792:	6025      	str	r5, [r4, #0]
 800b794:	bf18      	it	ne
 800b796:	6059      	strne	r1, [r3, #4]
 800b798:	6863      	ldr	r3, [r4, #4]
 800b79a:	bf08      	it	eq
 800b79c:	f8c8 1000 	streq.w	r1, [r8]
 800b7a0:	5162      	str	r2, [r4, r5]
 800b7a2:	604b      	str	r3, [r1, #4]
 800b7a4:	4638      	mov	r0, r7
 800b7a6:	f104 060b 	add.w	r6, r4, #11
 800b7aa:	f000 f829 	bl	800b800 <__malloc_unlock>
 800b7ae:	f026 0607 	bic.w	r6, r6, #7
 800b7b2:	1d23      	adds	r3, r4, #4
 800b7b4:	1af2      	subs	r2, r6, r3
 800b7b6:	d0ae      	beq.n	800b716 <_malloc_r+0x22>
 800b7b8:	1b9b      	subs	r3, r3, r6
 800b7ba:	50a3      	str	r3, [r4, r2]
 800b7bc:	e7ab      	b.n	800b716 <_malloc_r+0x22>
 800b7be:	42a3      	cmp	r3, r4
 800b7c0:	6862      	ldr	r2, [r4, #4]
 800b7c2:	d1dd      	bne.n	800b780 <_malloc_r+0x8c>
 800b7c4:	f8c8 2000 	str.w	r2, [r8]
 800b7c8:	e7ec      	b.n	800b7a4 <_malloc_r+0xb0>
 800b7ca:	4623      	mov	r3, r4
 800b7cc:	6864      	ldr	r4, [r4, #4]
 800b7ce:	e7ac      	b.n	800b72a <_malloc_r+0x36>
 800b7d0:	4634      	mov	r4, r6
 800b7d2:	6876      	ldr	r6, [r6, #4]
 800b7d4:	e7b4      	b.n	800b740 <_malloc_r+0x4c>
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	e7cc      	b.n	800b774 <_malloc_r+0x80>
 800b7da:	230c      	movs	r3, #12
 800b7dc:	603b      	str	r3, [r7, #0]
 800b7de:	4638      	mov	r0, r7
 800b7e0:	f000 f80e 	bl	800b800 <__malloc_unlock>
 800b7e4:	e797      	b.n	800b716 <_malloc_r+0x22>
 800b7e6:	6025      	str	r5, [r4, #0]
 800b7e8:	e7dc      	b.n	800b7a4 <_malloc_r+0xb0>
 800b7ea:	605b      	str	r3, [r3, #4]
 800b7ec:	deff      	udf	#255	; 0xff
 800b7ee:	bf00      	nop
 800b7f0:	20003c10 	.word	0x20003c10

0800b7f4 <__malloc_lock>:
 800b7f4:	4801      	ldr	r0, [pc, #4]	; (800b7fc <__malloc_lock+0x8>)
 800b7f6:	f7ff b87e 	b.w	800a8f6 <__retarget_lock_acquire_recursive>
 800b7fa:	bf00      	nop
 800b7fc:	20003c0c 	.word	0x20003c0c

0800b800 <__malloc_unlock>:
 800b800:	4801      	ldr	r0, [pc, #4]	; (800b808 <__malloc_unlock+0x8>)
 800b802:	f7ff b879 	b.w	800a8f8 <__retarget_lock_release_recursive>
 800b806:	bf00      	nop
 800b808:	20003c0c 	.word	0x20003c0c

0800b80c <_Balloc>:
 800b80c:	b570      	push	{r4, r5, r6, lr}
 800b80e:	69c6      	ldr	r6, [r0, #28]
 800b810:	4604      	mov	r4, r0
 800b812:	460d      	mov	r5, r1
 800b814:	b976      	cbnz	r6, 800b834 <_Balloc+0x28>
 800b816:	2010      	movs	r0, #16
 800b818:	f7ff ff44 	bl	800b6a4 <malloc>
 800b81c:	4602      	mov	r2, r0
 800b81e:	61e0      	str	r0, [r4, #28]
 800b820:	b920      	cbnz	r0, 800b82c <_Balloc+0x20>
 800b822:	4b18      	ldr	r3, [pc, #96]	; (800b884 <_Balloc+0x78>)
 800b824:	4818      	ldr	r0, [pc, #96]	; (800b888 <_Balloc+0x7c>)
 800b826:	216b      	movs	r1, #107	; 0x6b
 800b828:	f000 fe06 	bl	800c438 <__assert_func>
 800b82c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b830:	6006      	str	r6, [r0, #0]
 800b832:	60c6      	str	r6, [r0, #12]
 800b834:	69e6      	ldr	r6, [r4, #28]
 800b836:	68f3      	ldr	r3, [r6, #12]
 800b838:	b183      	cbz	r3, 800b85c <_Balloc+0x50>
 800b83a:	69e3      	ldr	r3, [r4, #28]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b842:	b9b8      	cbnz	r0, 800b874 <_Balloc+0x68>
 800b844:	2101      	movs	r1, #1
 800b846:	fa01 f605 	lsl.w	r6, r1, r5
 800b84a:	1d72      	adds	r2, r6, #5
 800b84c:	0092      	lsls	r2, r2, #2
 800b84e:	4620      	mov	r0, r4
 800b850:	f000 fe10 	bl	800c474 <_calloc_r>
 800b854:	b160      	cbz	r0, 800b870 <_Balloc+0x64>
 800b856:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b85a:	e00e      	b.n	800b87a <_Balloc+0x6e>
 800b85c:	2221      	movs	r2, #33	; 0x21
 800b85e:	2104      	movs	r1, #4
 800b860:	4620      	mov	r0, r4
 800b862:	f000 fe07 	bl	800c474 <_calloc_r>
 800b866:	69e3      	ldr	r3, [r4, #28]
 800b868:	60f0      	str	r0, [r6, #12]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1e4      	bne.n	800b83a <_Balloc+0x2e>
 800b870:	2000      	movs	r0, #0
 800b872:	bd70      	pop	{r4, r5, r6, pc}
 800b874:	6802      	ldr	r2, [r0, #0]
 800b876:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b87a:	2300      	movs	r3, #0
 800b87c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b880:	e7f7      	b.n	800b872 <_Balloc+0x66>
 800b882:	bf00      	nop
 800b884:	0800e651 	.word	0x0800e651
 800b888:	0800e6d1 	.word	0x0800e6d1

0800b88c <_Bfree>:
 800b88c:	b570      	push	{r4, r5, r6, lr}
 800b88e:	69c6      	ldr	r6, [r0, #28]
 800b890:	4605      	mov	r5, r0
 800b892:	460c      	mov	r4, r1
 800b894:	b976      	cbnz	r6, 800b8b4 <_Bfree+0x28>
 800b896:	2010      	movs	r0, #16
 800b898:	f7ff ff04 	bl	800b6a4 <malloc>
 800b89c:	4602      	mov	r2, r0
 800b89e:	61e8      	str	r0, [r5, #28]
 800b8a0:	b920      	cbnz	r0, 800b8ac <_Bfree+0x20>
 800b8a2:	4b09      	ldr	r3, [pc, #36]	; (800b8c8 <_Bfree+0x3c>)
 800b8a4:	4809      	ldr	r0, [pc, #36]	; (800b8cc <_Bfree+0x40>)
 800b8a6:	218f      	movs	r1, #143	; 0x8f
 800b8a8:	f000 fdc6 	bl	800c438 <__assert_func>
 800b8ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8b0:	6006      	str	r6, [r0, #0]
 800b8b2:	60c6      	str	r6, [r0, #12]
 800b8b4:	b13c      	cbz	r4, 800b8c6 <_Bfree+0x3a>
 800b8b6:	69eb      	ldr	r3, [r5, #28]
 800b8b8:	6862      	ldr	r2, [r4, #4]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8c0:	6021      	str	r1, [r4, #0]
 800b8c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8c6:	bd70      	pop	{r4, r5, r6, pc}
 800b8c8:	0800e651 	.word	0x0800e651
 800b8cc:	0800e6d1 	.word	0x0800e6d1

0800b8d0 <__multadd>:
 800b8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d4:	690d      	ldr	r5, [r1, #16]
 800b8d6:	4607      	mov	r7, r0
 800b8d8:	460c      	mov	r4, r1
 800b8da:	461e      	mov	r6, r3
 800b8dc:	f101 0c14 	add.w	ip, r1, #20
 800b8e0:	2000      	movs	r0, #0
 800b8e2:	f8dc 3000 	ldr.w	r3, [ip]
 800b8e6:	b299      	uxth	r1, r3
 800b8e8:	fb02 6101 	mla	r1, r2, r1, r6
 800b8ec:	0c1e      	lsrs	r6, r3, #16
 800b8ee:	0c0b      	lsrs	r3, r1, #16
 800b8f0:	fb02 3306 	mla	r3, r2, r6, r3
 800b8f4:	b289      	uxth	r1, r1
 800b8f6:	3001      	adds	r0, #1
 800b8f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b8fc:	4285      	cmp	r5, r0
 800b8fe:	f84c 1b04 	str.w	r1, [ip], #4
 800b902:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b906:	dcec      	bgt.n	800b8e2 <__multadd+0x12>
 800b908:	b30e      	cbz	r6, 800b94e <__multadd+0x7e>
 800b90a:	68a3      	ldr	r3, [r4, #8]
 800b90c:	42ab      	cmp	r3, r5
 800b90e:	dc19      	bgt.n	800b944 <__multadd+0x74>
 800b910:	6861      	ldr	r1, [r4, #4]
 800b912:	4638      	mov	r0, r7
 800b914:	3101      	adds	r1, #1
 800b916:	f7ff ff79 	bl	800b80c <_Balloc>
 800b91a:	4680      	mov	r8, r0
 800b91c:	b928      	cbnz	r0, 800b92a <__multadd+0x5a>
 800b91e:	4602      	mov	r2, r0
 800b920:	4b0c      	ldr	r3, [pc, #48]	; (800b954 <__multadd+0x84>)
 800b922:	480d      	ldr	r0, [pc, #52]	; (800b958 <__multadd+0x88>)
 800b924:	21ba      	movs	r1, #186	; 0xba
 800b926:	f000 fd87 	bl	800c438 <__assert_func>
 800b92a:	6922      	ldr	r2, [r4, #16]
 800b92c:	3202      	adds	r2, #2
 800b92e:	f104 010c 	add.w	r1, r4, #12
 800b932:	0092      	lsls	r2, r2, #2
 800b934:	300c      	adds	r0, #12
 800b936:	f7fe ffe0 	bl	800a8fa <memcpy>
 800b93a:	4621      	mov	r1, r4
 800b93c:	4638      	mov	r0, r7
 800b93e:	f7ff ffa5 	bl	800b88c <_Bfree>
 800b942:	4644      	mov	r4, r8
 800b944:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b948:	3501      	adds	r5, #1
 800b94a:	615e      	str	r6, [r3, #20]
 800b94c:	6125      	str	r5, [r4, #16]
 800b94e:	4620      	mov	r0, r4
 800b950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b954:	0800e6c0 	.word	0x0800e6c0
 800b958:	0800e6d1 	.word	0x0800e6d1

0800b95c <__hi0bits>:
 800b95c:	0c03      	lsrs	r3, r0, #16
 800b95e:	041b      	lsls	r3, r3, #16
 800b960:	b9d3      	cbnz	r3, 800b998 <__hi0bits+0x3c>
 800b962:	0400      	lsls	r0, r0, #16
 800b964:	2310      	movs	r3, #16
 800b966:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b96a:	bf04      	itt	eq
 800b96c:	0200      	lsleq	r0, r0, #8
 800b96e:	3308      	addeq	r3, #8
 800b970:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b974:	bf04      	itt	eq
 800b976:	0100      	lsleq	r0, r0, #4
 800b978:	3304      	addeq	r3, #4
 800b97a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b97e:	bf04      	itt	eq
 800b980:	0080      	lsleq	r0, r0, #2
 800b982:	3302      	addeq	r3, #2
 800b984:	2800      	cmp	r0, #0
 800b986:	db05      	blt.n	800b994 <__hi0bits+0x38>
 800b988:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b98c:	f103 0301 	add.w	r3, r3, #1
 800b990:	bf08      	it	eq
 800b992:	2320      	moveq	r3, #32
 800b994:	4618      	mov	r0, r3
 800b996:	4770      	bx	lr
 800b998:	2300      	movs	r3, #0
 800b99a:	e7e4      	b.n	800b966 <__hi0bits+0xa>

0800b99c <__lo0bits>:
 800b99c:	6803      	ldr	r3, [r0, #0]
 800b99e:	f013 0207 	ands.w	r2, r3, #7
 800b9a2:	d00c      	beq.n	800b9be <__lo0bits+0x22>
 800b9a4:	07d9      	lsls	r1, r3, #31
 800b9a6:	d422      	bmi.n	800b9ee <__lo0bits+0x52>
 800b9a8:	079a      	lsls	r2, r3, #30
 800b9aa:	bf49      	itett	mi
 800b9ac:	085b      	lsrmi	r3, r3, #1
 800b9ae:	089b      	lsrpl	r3, r3, #2
 800b9b0:	6003      	strmi	r3, [r0, #0]
 800b9b2:	2201      	movmi	r2, #1
 800b9b4:	bf5c      	itt	pl
 800b9b6:	6003      	strpl	r3, [r0, #0]
 800b9b8:	2202      	movpl	r2, #2
 800b9ba:	4610      	mov	r0, r2
 800b9bc:	4770      	bx	lr
 800b9be:	b299      	uxth	r1, r3
 800b9c0:	b909      	cbnz	r1, 800b9c6 <__lo0bits+0x2a>
 800b9c2:	0c1b      	lsrs	r3, r3, #16
 800b9c4:	2210      	movs	r2, #16
 800b9c6:	b2d9      	uxtb	r1, r3
 800b9c8:	b909      	cbnz	r1, 800b9ce <__lo0bits+0x32>
 800b9ca:	3208      	adds	r2, #8
 800b9cc:	0a1b      	lsrs	r3, r3, #8
 800b9ce:	0719      	lsls	r1, r3, #28
 800b9d0:	bf04      	itt	eq
 800b9d2:	091b      	lsreq	r3, r3, #4
 800b9d4:	3204      	addeq	r2, #4
 800b9d6:	0799      	lsls	r1, r3, #30
 800b9d8:	bf04      	itt	eq
 800b9da:	089b      	lsreq	r3, r3, #2
 800b9dc:	3202      	addeq	r2, #2
 800b9de:	07d9      	lsls	r1, r3, #31
 800b9e0:	d403      	bmi.n	800b9ea <__lo0bits+0x4e>
 800b9e2:	085b      	lsrs	r3, r3, #1
 800b9e4:	f102 0201 	add.w	r2, r2, #1
 800b9e8:	d003      	beq.n	800b9f2 <__lo0bits+0x56>
 800b9ea:	6003      	str	r3, [r0, #0]
 800b9ec:	e7e5      	b.n	800b9ba <__lo0bits+0x1e>
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	e7e3      	b.n	800b9ba <__lo0bits+0x1e>
 800b9f2:	2220      	movs	r2, #32
 800b9f4:	e7e1      	b.n	800b9ba <__lo0bits+0x1e>
	...

0800b9f8 <__i2b>:
 800b9f8:	b510      	push	{r4, lr}
 800b9fa:	460c      	mov	r4, r1
 800b9fc:	2101      	movs	r1, #1
 800b9fe:	f7ff ff05 	bl	800b80c <_Balloc>
 800ba02:	4602      	mov	r2, r0
 800ba04:	b928      	cbnz	r0, 800ba12 <__i2b+0x1a>
 800ba06:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <__i2b+0x24>)
 800ba08:	4805      	ldr	r0, [pc, #20]	; (800ba20 <__i2b+0x28>)
 800ba0a:	f240 1145 	movw	r1, #325	; 0x145
 800ba0e:	f000 fd13 	bl	800c438 <__assert_func>
 800ba12:	2301      	movs	r3, #1
 800ba14:	6144      	str	r4, [r0, #20]
 800ba16:	6103      	str	r3, [r0, #16]
 800ba18:	bd10      	pop	{r4, pc}
 800ba1a:	bf00      	nop
 800ba1c:	0800e6c0 	.word	0x0800e6c0
 800ba20:	0800e6d1 	.word	0x0800e6d1

0800ba24 <__multiply>:
 800ba24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba28:	4691      	mov	r9, r2
 800ba2a:	690a      	ldr	r2, [r1, #16]
 800ba2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	bfb8      	it	lt
 800ba34:	460b      	movlt	r3, r1
 800ba36:	460c      	mov	r4, r1
 800ba38:	bfbc      	itt	lt
 800ba3a:	464c      	movlt	r4, r9
 800ba3c:	4699      	movlt	r9, r3
 800ba3e:	6927      	ldr	r7, [r4, #16]
 800ba40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba44:	68a3      	ldr	r3, [r4, #8]
 800ba46:	6861      	ldr	r1, [r4, #4]
 800ba48:	eb07 060a 	add.w	r6, r7, sl
 800ba4c:	42b3      	cmp	r3, r6
 800ba4e:	b085      	sub	sp, #20
 800ba50:	bfb8      	it	lt
 800ba52:	3101      	addlt	r1, #1
 800ba54:	f7ff feda 	bl	800b80c <_Balloc>
 800ba58:	b930      	cbnz	r0, 800ba68 <__multiply+0x44>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	4b44      	ldr	r3, [pc, #272]	; (800bb70 <__multiply+0x14c>)
 800ba5e:	4845      	ldr	r0, [pc, #276]	; (800bb74 <__multiply+0x150>)
 800ba60:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ba64:	f000 fce8 	bl	800c438 <__assert_func>
 800ba68:	f100 0514 	add.w	r5, r0, #20
 800ba6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba70:	462b      	mov	r3, r5
 800ba72:	2200      	movs	r2, #0
 800ba74:	4543      	cmp	r3, r8
 800ba76:	d321      	bcc.n	800babc <__multiply+0x98>
 800ba78:	f104 0314 	add.w	r3, r4, #20
 800ba7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ba80:	f109 0314 	add.w	r3, r9, #20
 800ba84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ba88:	9202      	str	r2, [sp, #8]
 800ba8a:	1b3a      	subs	r2, r7, r4
 800ba8c:	3a15      	subs	r2, #21
 800ba8e:	f022 0203 	bic.w	r2, r2, #3
 800ba92:	3204      	adds	r2, #4
 800ba94:	f104 0115 	add.w	r1, r4, #21
 800ba98:	428f      	cmp	r7, r1
 800ba9a:	bf38      	it	cc
 800ba9c:	2204      	movcc	r2, #4
 800ba9e:	9201      	str	r2, [sp, #4]
 800baa0:	9a02      	ldr	r2, [sp, #8]
 800baa2:	9303      	str	r3, [sp, #12]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d80c      	bhi.n	800bac2 <__multiply+0x9e>
 800baa8:	2e00      	cmp	r6, #0
 800baaa:	dd03      	ble.n	800bab4 <__multiply+0x90>
 800baac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d05b      	beq.n	800bb6c <__multiply+0x148>
 800bab4:	6106      	str	r6, [r0, #16]
 800bab6:	b005      	add	sp, #20
 800bab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800babc:	f843 2b04 	str.w	r2, [r3], #4
 800bac0:	e7d8      	b.n	800ba74 <__multiply+0x50>
 800bac2:	f8b3 a000 	ldrh.w	sl, [r3]
 800bac6:	f1ba 0f00 	cmp.w	sl, #0
 800baca:	d024      	beq.n	800bb16 <__multiply+0xf2>
 800bacc:	f104 0e14 	add.w	lr, r4, #20
 800bad0:	46a9      	mov	r9, r5
 800bad2:	f04f 0c00 	mov.w	ip, #0
 800bad6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bada:	f8d9 1000 	ldr.w	r1, [r9]
 800bade:	fa1f fb82 	uxth.w	fp, r2
 800bae2:	b289      	uxth	r1, r1
 800bae4:	fb0a 110b 	mla	r1, sl, fp, r1
 800bae8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800baec:	f8d9 2000 	ldr.w	r2, [r9]
 800baf0:	4461      	add	r1, ip
 800baf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800baf6:	fb0a c20b 	mla	r2, sl, fp, ip
 800bafa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bafe:	b289      	uxth	r1, r1
 800bb00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb04:	4577      	cmp	r7, lr
 800bb06:	f849 1b04 	str.w	r1, [r9], #4
 800bb0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb0e:	d8e2      	bhi.n	800bad6 <__multiply+0xb2>
 800bb10:	9a01      	ldr	r2, [sp, #4]
 800bb12:	f845 c002 	str.w	ip, [r5, r2]
 800bb16:	9a03      	ldr	r2, [sp, #12]
 800bb18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb1c:	3304      	adds	r3, #4
 800bb1e:	f1b9 0f00 	cmp.w	r9, #0
 800bb22:	d021      	beq.n	800bb68 <__multiply+0x144>
 800bb24:	6829      	ldr	r1, [r5, #0]
 800bb26:	f104 0c14 	add.w	ip, r4, #20
 800bb2a:	46ae      	mov	lr, r5
 800bb2c:	f04f 0a00 	mov.w	sl, #0
 800bb30:	f8bc b000 	ldrh.w	fp, [ip]
 800bb34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bb38:	fb09 220b 	mla	r2, r9, fp, r2
 800bb3c:	4452      	add	r2, sl
 800bb3e:	b289      	uxth	r1, r1
 800bb40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb44:	f84e 1b04 	str.w	r1, [lr], #4
 800bb48:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bb4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb50:	f8be 1000 	ldrh.w	r1, [lr]
 800bb54:	fb09 110a 	mla	r1, r9, sl, r1
 800bb58:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bb5c:	4567      	cmp	r7, ip
 800bb5e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb62:	d8e5      	bhi.n	800bb30 <__multiply+0x10c>
 800bb64:	9a01      	ldr	r2, [sp, #4]
 800bb66:	50a9      	str	r1, [r5, r2]
 800bb68:	3504      	adds	r5, #4
 800bb6a:	e799      	b.n	800baa0 <__multiply+0x7c>
 800bb6c:	3e01      	subs	r6, #1
 800bb6e:	e79b      	b.n	800baa8 <__multiply+0x84>
 800bb70:	0800e6c0 	.word	0x0800e6c0
 800bb74:	0800e6d1 	.word	0x0800e6d1

0800bb78 <__pow5mult>:
 800bb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb7c:	4615      	mov	r5, r2
 800bb7e:	f012 0203 	ands.w	r2, r2, #3
 800bb82:	4606      	mov	r6, r0
 800bb84:	460f      	mov	r7, r1
 800bb86:	d007      	beq.n	800bb98 <__pow5mult+0x20>
 800bb88:	4c25      	ldr	r4, [pc, #148]	; (800bc20 <__pow5mult+0xa8>)
 800bb8a:	3a01      	subs	r2, #1
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb92:	f7ff fe9d 	bl	800b8d0 <__multadd>
 800bb96:	4607      	mov	r7, r0
 800bb98:	10ad      	asrs	r5, r5, #2
 800bb9a:	d03d      	beq.n	800bc18 <__pow5mult+0xa0>
 800bb9c:	69f4      	ldr	r4, [r6, #28]
 800bb9e:	b97c      	cbnz	r4, 800bbc0 <__pow5mult+0x48>
 800bba0:	2010      	movs	r0, #16
 800bba2:	f7ff fd7f 	bl	800b6a4 <malloc>
 800bba6:	4602      	mov	r2, r0
 800bba8:	61f0      	str	r0, [r6, #28]
 800bbaa:	b928      	cbnz	r0, 800bbb8 <__pow5mult+0x40>
 800bbac:	4b1d      	ldr	r3, [pc, #116]	; (800bc24 <__pow5mult+0xac>)
 800bbae:	481e      	ldr	r0, [pc, #120]	; (800bc28 <__pow5mult+0xb0>)
 800bbb0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bbb4:	f000 fc40 	bl	800c438 <__assert_func>
 800bbb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbbc:	6004      	str	r4, [r0, #0]
 800bbbe:	60c4      	str	r4, [r0, #12]
 800bbc0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bbc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbc8:	b94c      	cbnz	r4, 800bbde <__pow5mult+0x66>
 800bbca:	f240 2171 	movw	r1, #625	; 0x271
 800bbce:	4630      	mov	r0, r6
 800bbd0:	f7ff ff12 	bl	800b9f8 <__i2b>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbda:	4604      	mov	r4, r0
 800bbdc:	6003      	str	r3, [r0, #0]
 800bbde:	f04f 0900 	mov.w	r9, #0
 800bbe2:	07eb      	lsls	r3, r5, #31
 800bbe4:	d50a      	bpl.n	800bbfc <__pow5mult+0x84>
 800bbe6:	4639      	mov	r1, r7
 800bbe8:	4622      	mov	r2, r4
 800bbea:	4630      	mov	r0, r6
 800bbec:	f7ff ff1a 	bl	800ba24 <__multiply>
 800bbf0:	4639      	mov	r1, r7
 800bbf2:	4680      	mov	r8, r0
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f7ff fe49 	bl	800b88c <_Bfree>
 800bbfa:	4647      	mov	r7, r8
 800bbfc:	106d      	asrs	r5, r5, #1
 800bbfe:	d00b      	beq.n	800bc18 <__pow5mult+0xa0>
 800bc00:	6820      	ldr	r0, [r4, #0]
 800bc02:	b938      	cbnz	r0, 800bc14 <__pow5mult+0x9c>
 800bc04:	4622      	mov	r2, r4
 800bc06:	4621      	mov	r1, r4
 800bc08:	4630      	mov	r0, r6
 800bc0a:	f7ff ff0b 	bl	800ba24 <__multiply>
 800bc0e:	6020      	str	r0, [r4, #0]
 800bc10:	f8c0 9000 	str.w	r9, [r0]
 800bc14:	4604      	mov	r4, r0
 800bc16:	e7e4      	b.n	800bbe2 <__pow5mult+0x6a>
 800bc18:	4638      	mov	r0, r7
 800bc1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc1e:	bf00      	nop
 800bc20:	0800e820 	.word	0x0800e820
 800bc24:	0800e651 	.word	0x0800e651
 800bc28:	0800e6d1 	.word	0x0800e6d1

0800bc2c <__lshift>:
 800bc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc30:	460c      	mov	r4, r1
 800bc32:	6849      	ldr	r1, [r1, #4]
 800bc34:	6923      	ldr	r3, [r4, #16]
 800bc36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc3a:	68a3      	ldr	r3, [r4, #8]
 800bc3c:	4607      	mov	r7, r0
 800bc3e:	4691      	mov	r9, r2
 800bc40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc44:	f108 0601 	add.w	r6, r8, #1
 800bc48:	42b3      	cmp	r3, r6
 800bc4a:	db0b      	blt.n	800bc64 <__lshift+0x38>
 800bc4c:	4638      	mov	r0, r7
 800bc4e:	f7ff fddd 	bl	800b80c <_Balloc>
 800bc52:	4605      	mov	r5, r0
 800bc54:	b948      	cbnz	r0, 800bc6a <__lshift+0x3e>
 800bc56:	4602      	mov	r2, r0
 800bc58:	4b28      	ldr	r3, [pc, #160]	; (800bcfc <__lshift+0xd0>)
 800bc5a:	4829      	ldr	r0, [pc, #164]	; (800bd00 <__lshift+0xd4>)
 800bc5c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bc60:	f000 fbea 	bl	800c438 <__assert_func>
 800bc64:	3101      	adds	r1, #1
 800bc66:	005b      	lsls	r3, r3, #1
 800bc68:	e7ee      	b.n	800bc48 <__lshift+0x1c>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	f100 0114 	add.w	r1, r0, #20
 800bc70:	f100 0210 	add.w	r2, r0, #16
 800bc74:	4618      	mov	r0, r3
 800bc76:	4553      	cmp	r3, sl
 800bc78:	db33      	blt.n	800bce2 <__lshift+0xb6>
 800bc7a:	6920      	ldr	r0, [r4, #16]
 800bc7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc80:	f104 0314 	add.w	r3, r4, #20
 800bc84:	f019 091f 	ands.w	r9, r9, #31
 800bc88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc90:	d02b      	beq.n	800bcea <__lshift+0xbe>
 800bc92:	f1c9 0e20 	rsb	lr, r9, #32
 800bc96:	468a      	mov	sl, r1
 800bc98:	2200      	movs	r2, #0
 800bc9a:	6818      	ldr	r0, [r3, #0]
 800bc9c:	fa00 f009 	lsl.w	r0, r0, r9
 800bca0:	4310      	orrs	r0, r2
 800bca2:	f84a 0b04 	str.w	r0, [sl], #4
 800bca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcaa:	459c      	cmp	ip, r3
 800bcac:	fa22 f20e 	lsr.w	r2, r2, lr
 800bcb0:	d8f3      	bhi.n	800bc9a <__lshift+0x6e>
 800bcb2:	ebac 0304 	sub.w	r3, ip, r4
 800bcb6:	3b15      	subs	r3, #21
 800bcb8:	f023 0303 	bic.w	r3, r3, #3
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	f104 0015 	add.w	r0, r4, #21
 800bcc2:	4584      	cmp	ip, r0
 800bcc4:	bf38      	it	cc
 800bcc6:	2304      	movcc	r3, #4
 800bcc8:	50ca      	str	r2, [r1, r3]
 800bcca:	b10a      	cbz	r2, 800bcd0 <__lshift+0xa4>
 800bccc:	f108 0602 	add.w	r6, r8, #2
 800bcd0:	3e01      	subs	r6, #1
 800bcd2:	4638      	mov	r0, r7
 800bcd4:	612e      	str	r6, [r5, #16]
 800bcd6:	4621      	mov	r1, r4
 800bcd8:	f7ff fdd8 	bl	800b88c <_Bfree>
 800bcdc:	4628      	mov	r0, r5
 800bcde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bce2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bce6:	3301      	adds	r3, #1
 800bce8:	e7c5      	b.n	800bc76 <__lshift+0x4a>
 800bcea:	3904      	subs	r1, #4
 800bcec:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcf0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcf4:	459c      	cmp	ip, r3
 800bcf6:	d8f9      	bhi.n	800bcec <__lshift+0xc0>
 800bcf8:	e7ea      	b.n	800bcd0 <__lshift+0xa4>
 800bcfa:	bf00      	nop
 800bcfc:	0800e6c0 	.word	0x0800e6c0
 800bd00:	0800e6d1 	.word	0x0800e6d1

0800bd04 <__mcmp>:
 800bd04:	b530      	push	{r4, r5, lr}
 800bd06:	6902      	ldr	r2, [r0, #16]
 800bd08:	690c      	ldr	r4, [r1, #16]
 800bd0a:	1b12      	subs	r2, r2, r4
 800bd0c:	d10e      	bne.n	800bd2c <__mcmp+0x28>
 800bd0e:	f100 0314 	add.w	r3, r0, #20
 800bd12:	3114      	adds	r1, #20
 800bd14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd24:	42a5      	cmp	r5, r4
 800bd26:	d003      	beq.n	800bd30 <__mcmp+0x2c>
 800bd28:	d305      	bcc.n	800bd36 <__mcmp+0x32>
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	bd30      	pop	{r4, r5, pc}
 800bd30:	4283      	cmp	r3, r0
 800bd32:	d3f3      	bcc.n	800bd1c <__mcmp+0x18>
 800bd34:	e7fa      	b.n	800bd2c <__mcmp+0x28>
 800bd36:	f04f 32ff 	mov.w	r2, #4294967295
 800bd3a:	e7f7      	b.n	800bd2c <__mcmp+0x28>

0800bd3c <__mdiff>:
 800bd3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd40:	460c      	mov	r4, r1
 800bd42:	4606      	mov	r6, r0
 800bd44:	4611      	mov	r1, r2
 800bd46:	4620      	mov	r0, r4
 800bd48:	4690      	mov	r8, r2
 800bd4a:	f7ff ffdb 	bl	800bd04 <__mcmp>
 800bd4e:	1e05      	subs	r5, r0, #0
 800bd50:	d110      	bne.n	800bd74 <__mdiff+0x38>
 800bd52:	4629      	mov	r1, r5
 800bd54:	4630      	mov	r0, r6
 800bd56:	f7ff fd59 	bl	800b80c <_Balloc>
 800bd5a:	b930      	cbnz	r0, 800bd6a <__mdiff+0x2e>
 800bd5c:	4b3a      	ldr	r3, [pc, #232]	; (800be48 <__mdiff+0x10c>)
 800bd5e:	4602      	mov	r2, r0
 800bd60:	f240 2137 	movw	r1, #567	; 0x237
 800bd64:	4839      	ldr	r0, [pc, #228]	; (800be4c <__mdiff+0x110>)
 800bd66:	f000 fb67 	bl	800c438 <__assert_func>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd74:	bfa4      	itt	ge
 800bd76:	4643      	movge	r3, r8
 800bd78:	46a0      	movge	r8, r4
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd80:	bfa6      	itte	ge
 800bd82:	461c      	movge	r4, r3
 800bd84:	2500      	movge	r5, #0
 800bd86:	2501      	movlt	r5, #1
 800bd88:	f7ff fd40 	bl	800b80c <_Balloc>
 800bd8c:	b920      	cbnz	r0, 800bd98 <__mdiff+0x5c>
 800bd8e:	4b2e      	ldr	r3, [pc, #184]	; (800be48 <__mdiff+0x10c>)
 800bd90:	4602      	mov	r2, r0
 800bd92:	f240 2145 	movw	r1, #581	; 0x245
 800bd96:	e7e5      	b.n	800bd64 <__mdiff+0x28>
 800bd98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd9c:	6926      	ldr	r6, [r4, #16]
 800bd9e:	60c5      	str	r5, [r0, #12]
 800bda0:	f104 0914 	add.w	r9, r4, #20
 800bda4:	f108 0514 	add.w	r5, r8, #20
 800bda8:	f100 0e14 	add.w	lr, r0, #20
 800bdac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bdb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bdb4:	f108 0210 	add.w	r2, r8, #16
 800bdb8:	46f2      	mov	sl, lr
 800bdba:	2100      	movs	r1, #0
 800bdbc:	f859 3b04 	ldr.w	r3, [r9], #4
 800bdc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bdc4:	fa11 f88b 	uxtah	r8, r1, fp
 800bdc8:	b299      	uxth	r1, r3
 800bdca:	0c1b      	lsrs	r3, r3, #16
 800bdcc:	eba8 0801 	sub.w	r8, r8, r1
 800bdd0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bdd4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bdd8:	fa1f f888 	uxth.w	r8, r8
 800bddc:	1419      	asrs	r1, r3, #16
 800bdde:	454e      	cmp	r6, r9
 800bde0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bde4:	f84a 3b04 	str.w	r3, [sl], #4
 800bde8:	d8e8      	bhi.n	800bdbc <__mdiff+0x80>
 800bdea:	1b33      	subs	r3, r6, r4
 800bdec:	3b15      	subs	r3, #21
 800bdee:	f023 0303 	bic.w	r3, r3, #3
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	3415      	adds	r4, #21
 800bdf6:	42a6      	cmp	r6, r4
 800bdf8:	bf38      	it	cc
 800bdfa:	2304      	movcc	r3, #4
 800bdfc:	441d      	add	r5, r3
 800bdfe:	4473      	add	r3, lr
 800be00:	469e      	mov	lr, r3
 800be02:	462e      	mov	r6, r5
 800be04:	4566      	cmp	r6, ip
 800be06:	d30e      	bcc.n	800be26 <__mdiff+0xea>
 800be08:	f10c 0203 	add.w	r2, ip, #3
 800be0c:	1b52      	subs	r2, r2, r5
 800be0e:	f022 0203 	bic.w	r2, r2, #3
 800be12:	3d03      	subs	r5, #3
 800be14:	45ac      	cmp	ip, r5
 800be16:	bf38      	it	cc
 800be18:	2200      	movcc	r2, #0
 800be1a:	4413      	add	r3, r2
 800be1c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800be20:	b17a      	cbz	r2, 800be42 <__mdiff+0x106>
 800be22:	6107      	str	r7, [r0, #16]
 800be24:	e7a4      	b.n	800bd70 <__mdiff+0x34>
 800be26:	f856 8b04 	ldr.w	r8, [r6], #4
 800be2a:	fa11 f288 	uxtah	r2, r1, r8
 800be2e:	1414      	asrs	r4, r2, #16
 800be30:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800be34:	b292      	uxth	r2, r2
 800be36:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800be3a:	f84e 2b04 	str.w	r2, [lr], #4
 800be3e:	1421      	asrs	r1, r4, #16
 800be40:	e7e0      	b.n	800be04 <__mdiff+0xc8>
 800be42:	3f01      	subs	r7, #1
 800be44:	e7ea      	b.n	800be1c <__mdiff+0xe0>
 800be46:	bf00      	nop
 800be48:	0800e6c0 	.word	0x0800e6c0
 800be4c:	0800e6d1 	.word	0x0800e6d1

0800be50 <__d2b>:
 800be50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be54:	460f      	mov	r7, r1
 800be56:	2101      	movs	r1, #1
 800be58:	ec59 8b10 	vmov	r8, r9, d0
 800be5c:	4616      	mov	r6, r2
 800be5e:	f7ff fcd5 	bl	800b80c <_Balloc>
 800be62:	4604      	mov	r4, r0
 800be64:	b930      	cbnz	r0, 800be74 <__d2b+0x24>
 800be66:	4602      	mov	r2, r0
 800be68:	4b24      	ldr	r3, [pc, #144]	; (800befc <__d2b+0xac>)
 800be6a:	4825      	ldr	r0, [pc, #148]	; (800bf00 <__d2b+0xb0>)
 800be6c:	f240 310f 	movw	r1, #783	; 0x30f
 800be70:	f000 fae2 	bl	800c438 <__assert_func>
 800be74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be7c:	bb2d      	cbnz	r5, 800beca <__d2b+0x7a>
 800be7e:	9301      	str	r3, [sp, #4]
 800be80:	f1b8 0300 	subs.w	r3, r8, #0
 800be84:	d026      	beq.n	800bed4 <__d2b+0x84>
 800be86:	4668      	mov	r0, sp
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	f7ff fd87 	bl	800b99c <__lo0bits>
 800be8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800be92:	b1e8      	cbz	r0, 800bed0 <__d2b+0x80>
 800be94:	f1c0 0320 	rsb	r3, r0, #32
 800be98:	fa02 f303 	lsl.w	r3, r2, r3
 800be9c:	430b      	orrs	r3, r1
 800be9e:	40c2      	lsrs	r2, r0
 800bea0:	6163      	str	r3, [r4, #20]
 800bea2:	9201      	str	r2, [sp, #4]
 800bea4:	9b01      	ldr	r3, [sp, #4]
 800bea6:	61a3      	str	r3, [r4, #24]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	bf14      	ite	ne
 800beac:	2202      	movne	r2, #2
 800beae:	2201      	moveq	r2, #1
 800beb0:	6122      	str	r2, [r4, #16]
 800beb2:	b1bd      	cbz	r5, 800bee4 <__d2b+0x94>
 800beb4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800beb8:	4405      	add	r5, r0
 800beba:	603d      	str	r5, [r7, #0]
 800bebc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bec0:	6030      	str	r0, [r6, #0]
 800bec2:	4620      	mov	r0, r4
 800bec4:	b003      	add	sp, #12
 800bec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bece:	e7d6      	b.n	800be7e <__d2b+0x2e>
 800bed0:	6161      	str	r1, [r4, #20]
 800bed2:	e7e7      	b.n	800bea4 <__d2b+0x54>
 800bed4:	a801      	add	r0, sp, #4
 800bed6:	f7ff fd61 	bl	800b99c <__lo0bits>
 800beda:	9b01      	ldr	r3, [sp, #4]
 800bedc:	6163      	str	r3, [r4, #20]
 800bede:	3020      	adds	r0, #32
 800bee0:	2201      	movs	r2, #1
 800bee2:	e7e5      	b.n	800beb0 <__d2b+0x60>
 800bee4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bee8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800beec:	6038      	str	r0, [r7, #0]
 800beee:	6918      	ldr	r0, [r3, #16]
 800bef0:	f7ff fd34 	bl	800b95c <__hi0bits>
 800bef4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bef8:	e7e2      	b.n	800bec0 <__d2b+0x70>
 800befa:	bf00      	nop
 800befc:	0800e6c0 	.word	0x0800e6c0
 800bf00:	0800e6d1 	.word	0x0800e6d1

0800bf04 <__ssputs_r>:
 800bf04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf08:	688e      	ldr	r6, [r1, #8]
 800bf0a:	461f      	mov	r7, r3
 800bf0c:	42be      	cmp	r6, r7
 800bf0e:	680b      	ldr	r3, [r1, #0]
 800bf10:	4682      	mov	sl, r0
 800bf12:	460c      	mov	r4, r1
 800bf14:	4690      	mov	r8, r2
 800bf16:	d82c      	bhi.n	800bf72 <__ssputs_r+0x6e>
 800bf18:	898a      	ldrh	r2, [r1, #12]
 800bf1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf1e:	d026      	beq.n	800bf6e <__ssputs_r+0x6a>
 800bf20:	6965      	ldr	r5, [r4, #20]
 800bf22:	6909      	ldr	r1, [r1, #16]
 800bf24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf28:	eba3 0901 	sub.w	r9, r3, r1
 800bf2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf30:	1c7b      	adds	r3, r7, #1
 800bf32:	444b      	add	r3, r9
 800bf34:	106d      	asrs	r5, r5, #1
 800bf36:	429d      	cmp	r5, r3
 800bf38:	bf38      	it	cc
 800bf3a:	461d      	movcc	r5, r3
 800bf3c:	0553      	lsls	r3, r2, #21
 800bf3e:	d527      	bpl.n	800bf90 <__ssputs_r+0x8c>
 800bf40:	4629      	mov	r1, r5
 800bf42:	f7ff fbd7 	bl	800b6f4 <_malloc_r>
 800bf46:	4606      	mov	r6, r0
 800bf48:	b360      	cbz	r0, 800bfa4 <__ssputs_r+0xa0>
 800bf4a:	6921      	ldr	r1, [r4, #16]
 800bf4c:	464a      	mov	r2, r9
 800bf4e:	f7fe fcd4 	bl	800a8fa <memcpy>
 800bf52:	89a3      	ldrh	r3, [r4, #12]
 800bf54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf5c:	81a3      	strh	r3, [r4, #12]
 800bf5e:	6126      	str	r6, [r4, #16]
 800bf60:	6165      	str	r5, [r4, #20]
 800bf62:	444e      	add	r6, r9
 800bf64:	eba5 0509 	sub.w	r5, r5, r9
 800bf68:	6026      	str	r6, [r4, #0]
 800bf6a:	60a5      	str	r5, [r4, #8]
 800bf6c:	463e      	mov	r6, r7
 800bf6e:	42be      	cmp	r6, r7
 800bf70:	d900      	bls.n	800bf74 <__ssputs_r+0x70>
 800bf72:	463e      	mov	r6, r7
 800bf74:	6820      	ldr	r0, [r4, #0]
 800bf76:	4632      	mov	r2, r6
 800bf78:	4641      	mov	r1, r8
 800bf7a:	f7fe fc11 	bl	800a7a0 <memmove>
 800bf7e:	68a3      	ldr	r3, [r4, #8]
 800bf80:	1b9b      	subs	r3, r3, r6
 800bf82:	60a3      	str	r3, [r4, #8]
 800bf84:	6823      	ldr	r3, [r4, #0]
 800bf86:	4433      	add	r3, r6
 800bf88:	6023      	str	r3, [r4, #0]
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf90:	462a      	mov	r2, r5
 800bf92:	f000 fa97 	bl	800c4c4 <_realloc_r>
 800bf96:	4606      	mov	r6, r0
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	d1e0      	bne.n	800bf5e <__ssputs_r+0x5a>
 800bf9c:	6921      	ldr	r1, [r4, #16]
 800bf9e:	4650      	mov	r0, sl
 800bfa0:	f7ff fb34 	bl	800b60c <_free_r>
 800bfa4:	230c      	movs	r3, #12
 800bfa6:	f8ca 3000 	str.w	r3, [sl]
 800bfaa:	89a3      	ldrh	r3, [r4, #12]
 800bfac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfb0:	81a3      	strh	r3, [r4, #12]
 800bfb2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb6:	e7e9      	b.n	800bf8c <__ssputs_r+0x88>

0800bfb8 <_svfiprintf_r>:
 800bfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfbc:	4698      	mov	r8, r3
 800bfbe:	898b      	ldrh	r3, [r1, #12]
 800bfc0:	061b      	lsls	r3, r3, #24
 800bfc2:	b09d      	sub	sp, #116	; 0x74
 800bfc4:	4607      	mov	r7, r0
 800bfc6:	460d      	mov	r5, r1
 800bfc8:	4614      	mov	r4, r2
 800bfca:	d50e      	bpl.n	800bfea <_svfiprintf_r+0x32>
 800bfcc:	690b      	ldr	r3, [r1, #16]
 800bfce:	b963      	cbnz	r3, 800bfea <_svfiprintf_r+0x32>
 800bfd0:	2140      	movs	r1, #64	; 0x40
 800bfd2:	f7ff fb8f 	bl	800b6f4 <_malloc_r>
 800bfd6:	6028      	str	r0, [r5, #0]
 800bfd8:	6128      	str	r0, [r5, #16]
 800bfda:	b920      	cbnz	r0, 800bfe6 <_svfiprintf_r+0x2e>
 800bfdc:	230c      	movs	r3, #12
 800bfde:	603b      	str	r3, [r7, #0]
 800bfe0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe4:	e0d0      	b.n	800c188 <_svfiprintf_r+0x1d0>
 800bfe6:	2340      	movs	r3, #64	; 0x40
 800bfe8:	616b      	str	r3, [r5, #20]
 800bfea:	2300      	movs	r3, #0
 800bfec:	9309      	str	r3, [sp, #36]	; 0x24
 800bfee:	2320      	movs	r3, #32
 800bff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bff4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bff8:	2330      	movs	r3, #48	; 0x30
 800bffa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c1a0 <_svfiprintf_r+0x1e8>
 800bffe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c002:	f04f 0901 	mov.w	r9, #1
 800c006:	4623      	mov	r3, r4
 800c008:	469a      	mov	sl, r3
 800c00a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c00e:	b10a      	cbz	r2, 800c014 <_svfiprintf_r+0x5c>
 800c010:	2a25      	cmp	r2, #37	; 0x25
 800c012:	d1f9      	bne.n	800c008 <_svfiprintf_r+0x50>
 800c014:	ebba 0b04 	subs.w	fp, sl, r4
 800c018:	d00b      	beq.n	800c032 <_svfiprintf_r+0x7a>
 800c01a:	465b      	mov	r3, fp
 800c01c:	4622      	mov	r2, r4
 800c01e:	4629      	mov	r1, r5
 800c020:	4638      	mov	r0, r7
 800c022:	f7ff ff6f 	bl	800bf04 <__ssputs_r>
 800c026:	3001      	adds	r0, #1
 800c028:	f000 80a9 	beq.w	800c17e <_svfiprintf_r+0x1c6>
 800c02c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c02e:	445a      	add	r2, fp
 800c030:	9209      	str	r2, [sp, #36]	; 0x24
 800c032:	f89a 3000 	ldrb.w	r3, [sl]
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 80a1 	beq.w	800c17e <_svfiprintf_r+0x1c6>
 800c03c:	2300      	movs	r3, #0
 800c03e:	f04f 32ff 	mov.w	r2, #4294967295
 800c042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c046:	f10a 0a01 	add.w	sl, sl, #1
 800c04a:	9304      	str	r3, [sp, #16]
 800c04c:	9307      	str	r3, [sp, #28]
 800c04e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c052:	931a      	str	r3, [sp, #104]	; 0x68
 800c054:	4654      	mov	r4, sl
 800c056:	2205      	movs	r2, #5
 800c058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c05c:	4850      	ldr	r0, [pc, #320]	; (800c1a0 <_svfiprintf_r+0x1e8>)
 800c05e:	f7f4 f8cf 	bl	8000200 <memchr>
 800c062:	9a04      	ldr	r2, [sp, #16]
 800c064:	b9d8      	cbnz	r0, 800c09e <_svfiprintf_r+0xe6>
 800c066:	06d0      	lsls	r0, r2, #27
 800c068:	bf44      	itt	mi
 800c06a:	2320      	movmi	r3, #32
 800c06c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c070:	0711      	lsls	r1, r2, #28
 800c072:	bf44      	itt	mi
 800c074:	232b      	movmi	r3, #43	; 0x2b
 800c076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c07a:	f89a 3000 	ldrb.w	r3, [sl]
 800c07e:	2b2a      	cmp	r3, #42	; 0x2a
 800c080:	d015      	beq.n	800c0ae <_svfiprintf_r+0xf6>
 800c082:	9a07      	ldr	r2, [sp, #28]
 800c084:	4654      	mov	r4, sl
 800c086:	2000      	movs	r0, #0
 800c088:	f04f 0c0a 	mov.w	ip, #10
 800c08c:	4621      	mov	r1, r4
 800c08e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c092:	3b30      	subs	r3, #48	; 0x30
 800c094:	2b09      	cmp	r3, #9
 800c096:	d94d      	bls.n	800c134 <_svfiprintf_r+0x17c>
 800c098:	b1b0      	cbz	r0, 800c0c8 <_svfiprintf_r+0x110>
 800c09a:	9207      	str	r2, [sp, #28]
 800c09c:	e014      	b.n	800c0c8 <_svfiprintf_r+0x110>
 800c09e:	eba0 0308 	sub.w	r3, r0, r8
 800c0a2:	fa09 f303 	lsl.w	r3, r9, r3
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	9304      	str	r3, [sp, #16]
 800c0aa:	46a2      	mov	sl, r4
 800c0ac:	e7d2      	b.n	800c054 <_svfiprintf_r+0x9c>
 800c0ae:	9b03      	ldr	r3, [sp, #12]
 800c0b0:	1d19      	adds	r1, r3, #4
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	9103      	str	r1, [sp, #12]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	bfbb      	ittet	lt
 800c0ba:	425b      	neglt	r3, r3
 800c0bc:	f042 0202 	orrlt.w	r2, r2, #2
 800c0c0:	9307      	strge	r3, [sp, #28]
 800c0c2:	9307      	strlt	r3, [sp, #28]
 800c0c4:	bfb8      	it	lt
 800c0c6:	9204      	strlt	r2, [sp, #16]
 800c0c8:	7823      	ldrb	r3, [r4, #0]
 800c0ca:	2b2e      	cmp	r3, #46	; 0x2e
 800c0cc:	d10c      	bne.n	800c0e8 <_svfiprintf_r+0x130>
 800c0ce:	7863      	ldrb	r3, [r4, #1]
 800c0d0:	2b2a      	cmp	r3, #42	; 0x2a
 800c0d2:	d134      	bne.n	800c13e <_svfiprintf_r+0x186>
 800c0d4:	9b03      	ldr	r3, [sp, #12]
 800c0d6:	1d1a      	adds	r2, r3, #4
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	9203      	str	r2, [sp, #12]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	bfb8      	it	lt
 800c0e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0e4:	3402      	adds	r4, #2
 800c0e6:	9305      	str	r3, [sp, #20]
 800c0e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c1b0 <_svfiprintf_r+0x1f8>
 800c0ec:	7821      	ldrb	r1, [r4, #0]
 800c0ee:	2203      	movs	r2, #3
 800c0f0:	4650      	mov	r0, sl
 800c0f2:	f7f4 f885 	bl	8000200 <memchr>
 800c0f6:	b138      	cbz	r0, 800c108 <_svfiprintf_r+0x150>
 800c0f8:	9b04      	ldr	r3, [sp, #16]
 800c0fa:	eba0 000a 	sub.w	r0, r0, sl
 800c0fe:	2240      	movs	r2, #64	; 0x40
 800c100:	4082      	lsls	r2, r0
 800c102:	4313      	orrs	r3, r2
 800c104:	3401      	adds	r4, #1
 800c106:	9304      	str	r3, [sp, #16]
 800c108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c10c:	4825      	ldr	r0, [pc, #148]	; (800c1a4 <_svfiprintf_r+0x1ec>)
 800c10e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c112:	2206      	movs	r2, #6
 800c114:	f7f4 f874 	bl	8000200 <memchr>
 800c118:	2800      	cmp	r0, #0
 800c11a:	d038      	beq.n	800c18e <_svfiprintf_r+0x1d6>
 800c11c:	4b22      	ldr	r3, [pc, #136]	; (800c1a8 <_svfiprintf_r+0x1f0>)
 800c11e:	bb1b      	cbnz	r3, 800c168 <_svfiprintf_r+0x1b0>
 800c120:	9b03      	ldr	r3, [sp, #12]
 800c122:	3307      	adds	r3, #7
 800c124:	f023 0307 	bic.w	r3, r3, #7
 800c128:	3308      	adds	r3, #8
 800c12a:	9303      	str	r3, [sp, #12]
 800c12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c12e:	4433      	add	r3, r6
 800c130:	9309      	str	r3, [sp, #36]	; 0x24
 800c132:	e768      	b.n	800c006 <_svfiprintf_r+0x4e>
 800c134:	fb0c 3202 	mla	r2, ip, r2, r3
 800c138:	460c      	mov	r4, r1
 800c13a:	2001      	movs	r0, #1
 800c13c:	e7a6      	b.n	800c08c <_svfiprintf_r+0xd4>
 800c13e:	2300      	movs	r3, #0
 800c140:	3401      	adds	r4, #1
 800c142:	9305      	str	r3, [sp, #20]
 800c144:	4619      	mov	r1, r3
 800c146:	f04f 0c0a 	mov.w	ip, #10
 800c14a:	4620      	mov	r0, r4
 800c14c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c150:	3a30      	subs	r2, #48	; 0x30
 800c152:	2a09      	cmp	r2, #9
 800c154:	d903      	bls.n	800c15e <_svfiprintf_r+0x1a6>
 800c156:	2b00      	cmp	r3, #0
 800c158:	d0c6      	beq.n	800c0e8 <_svfiprintf_r+0x130>
 800c15a:	9105      	str	r1, [sp, #20]
 800c15c:	e7c4      	b.n	800c0e8 <_svfiprintf_r+0x130>
 800c15e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c162:	4604      	mov	r4, r0
 800c164:	2301      	movs	r3, #1
 800c166:	e7f0      	b.n	800c14a <_svfiprintf_r+0x192>
 800c168:	ab03      	add	r3, sp, #12
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	462a      	mov	r2, r5
 800c16e:	4b0f      	ldr	r3, [pc, #60]	; (800c1ac <_svfiprintf_r+0x1f4>)
 800c170:	a904      	add	r1, sp, #16
 800c172:	4638      	mov	r0, r7
 800c174:	f7fd fd60 	bl	8009c38 <_printf_float>
 800c178:	1c42      	adds	r2, r0, #1
 800c17a:	4606      	mov	r6, r0
 800c17c:	d1d6      	bne.n	800c12c <_svfiprintf_r+0x174>
 800c17e:	89ab      	ldrh	r3, [r5, #12]
 800c180:	065b      	lsls	r3, r3, #25
 800c182:	f53f af2d 	bmi.w	800bfe0 <_svfiprintf_r+0x28>
 800c186:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c188:	b01d      	add	sp, #116	; 0x74
 800c18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c18e:	ab03      	add	r3, sp, #12
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	462a      	mov	r2, r5
 800c194:	4b05      	ldr	r3, [pc, #20]	; (800c1ac <_svfiprintf_r+0x1f4>)
 800c196:	a904      	add	r1, sp, #16
 800c198:	4638      	mov	r0, r7
 800c19a:	f7fd fff1 	bl	800a180 <_printf_i>
 800c19e:	e7eb      	b.n	800c178 <_svfiprintf_r+0x1c0>
 800c1a0:	0800e82c 	.word	0x0800e82c
 800c1a4:	0800e836 	.word	0x0800e836
 800c1a8:	08009c39 	.word	0x08009c39
 800c1ac:	0800bf05 	.word	0x0800bf05
 800c1b0:	0800e832 	.word	0x0800e832

0800c1b4 <__sflush_r>:
 800c1b4:	898a      	ldrh	r2, [r1, #12]
 800c1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ba:	4605      	mov	r5, r0
 800c1bc:	0710      	lsls	r0, r2, #28
 800c1be:	460c      	mov	r4, r1
 800c1c0:	d458      	bmi.n	800c274 <__sflush_r+0xc0>
 800c1c2:	684b      	ldr	r3, [r1, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	dc05      	bgt.n	800c1d4 <__sflush_r+0x20>
 800c1c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	dc02      	bgt.n	800c1d4 <__sflush_r+0x20>
 800c1ce:	2000      	movs	r0, #0
 800c1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1d6:	2e00      	cmp	r6, #0
 800c1d8:	d0f9      	beq.n	800c1ce <__sflush_r+0x1a>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1e0:	682f      	ldr	r7, [r5, #0]
 800c1e2:	6a21      	ldr	r1, [r4, #32]
 800c1e4:	602b      	str	r3, [r5, #0]
 800c1e6:	d032      	beq.n	800c24e <__sflush_r+0x9a>
 800c1e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1ea:	89a3      	ldrh	r3, [r4, #12]
 800c1ec:	075a      	lsls	r2, r3, #29
 800c1ee:	d505      	bpl.n	800c1fc <__sflush_r+0x48>
 800c1f0:	6863      	ldr	r3, [r4, #4]
 800c1f2:	1ac0      	subs	r0, r0, r3
 800c1f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1f6:	b10b      	cbz	r3, 800c1fc <__sflush_r+0x48>
 800c1f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1fa:	1ac0      	subs	r0, r0, r3
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	4602      	mov	r2, r0
 800c200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c202:	6a21      	ldr	r1, [r4, #32]
 800c204:	4628      	mov	r0, r5
 800c206:	47b0      	blx	r6
 800c208:	1c43      	adds	r3, r0, #1
 800c20a:	89a3      	ldrh	r3, [r4, #12]
 800c20c:	d106      	bne.n	800c21c <__sflush_r+0x68>
 800c20e:	6829      	ldr	r1, [r5, #0]
 800c210:	291d      	cmp	r1, #29
 800c212:	d82b      	bhi.n	800c26c <__sflush_r+0xb8>
 800c214:	4a29      	ldr	r2, [pc, #164]	; (800c2bc <__sflush_r+0x108>)
 800c216:	410a      	asrs	r2, r1
 800c218:	07d6      	lsls	r6, r2, #31
 800c21a:	d427      	bmi.n	800c26c <__sflush_r+0xb8>
 800c21c:	2200      	movs	r2, #0
 800c21e:	6062      	str	r2, [r4, #4]
 800c220:	04d9      	lsls	r1, r3, #19
 800c222:	6922      	ldr	r2, [r4, #16]
 800c224:	6022      	str	r2, [r4, #0]
 800c226:	d504      	bpl.n	800c232 <__sflush_r+0x7e>
 800c228:	1c42      	adds	r2, r0, #1
 800c22a:	d101      	bne.n	800c230 <__sflush_r+0x7c>
 800c22c:	682b      	ldr	r3, [r5, #0]
 800c22e:	b903      	cbnz	r3, 800c232 <__sflush_r+0x7e>
 800c230:	6560      	str	r0, [r4, #84]	; 0x54
 800c232:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c234:	602f      	str	r7, [r5, #0]
 800c236:	2900      	cmp	r1, #0
 800c238:	d0c9      	beq.n	800c1ce <__sflush_r+0x1a>
 800c23a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c23e:	4299      	cmp	r1, r3
 800c240:	d002      	beq.n	800c248 <__sflush_r+0x94>
 800c242:	4628      	mov	r0, r5
 800c244:	f7ff f9e2 	bl	800b60c <_free_r>
 800c248:	2000      	movs	r0, #0
 800c24a:	6360      	str	r0, [r4, #52]	; 0x34
 800c24c:	e7c0      	b.n	800c1d0 <__sflush_r+0x1c>
 800c24e:	2301      	movs	r3, #1
 800c250:	4628      	mov	r0, r5
 800c252:	47b0      	blx	r6
 800c254:	1c41      	adds	r1, r0, #1
 800c256:	d1c8      	bne.n	800c1ea <__sflush_r+0x36>
 800c258:	682b      	ldr	r3, [r5, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d0c5      	beq.n	800c1ea <__sflush_r+0x36>
 800c25e:	2b1d      	cmp	r3, #29
 800c260:	d001      	beq.n	800c266 <__sflush_r+0xb2>
 800c262:	2b16      	cmp	r3, #22
 800c264:	d101      	bne.n	800c26a <__sflush_r+0xb6>
 800c266:	602f      	str	r7, [r5, #0]
 800c268:	e7b1      	b.n	800c1ce <__sflush_r+0x1a>
 800c26a:	89a3      	ldrh	r3, [r4, #12]
 800c26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c270:	81a3      	strh	r3, [r4, #12]
 800c272:	e7ad      	b.n	800c1d0 <__sflush_r+0x1c>
 800c274:	690f      	ldr	r7, [r1, #16]
 800c276:	2f00      	cmp	r7, #0
 800c278:	d0a9      	beq.n	800c1ce <__sflush_r+0x1a>
 800c27a:	0793      	lsls	r3, r2, #30
 800c27c:	680e      	ldr	r6, [r1, #0]
 800c27e:	bf08      	it	eq
 800c280:	694b      	ldreq	r3, [r1, #20]
 800c282:	600f      	str	r7, [r1, #0]
 800c284:	bf18      	it	ne
 800c286:	2300      	movne	r3, #0
 800c288:	eba6 0807 	sub.w	r8, r6, r7
 800c28c:	608b      	str	r3, [r1, #8]
 800c28e:	f1b8 0f00 	cmp.w	r8, #0
 800c292:	dd9c      	ble.n	800c1ce <__sflush_r+0x1a>
 800c294:	6a21      	ldr	r1, [r4, #32]
 800c296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c298:	4643      	mov	r3, r8
 800c29a:	463a      	mov	r2, r7
 800c29c:	4628      	mov	r0, r5
 800c29e:	47b0      	blx	r6
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	dc06      	bgt.n	800c2b2 <__sflush_r+0xfe>
 800c2a4:	89a3      	ldrh	r3, [r4, #12]
 800c2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2aa:	81a3      	strh	r3, [r4, #12]
 800c2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b0:	e78e      	b.n	800c1d0 <__sflush_r+0x1c>
 800c2b2:	4407      	add	r7, r0
 800c2b4:	eba8 0800 	sub.w	r8, r8, r0
 800c2b8:	e7e9      	b.n	800c28e <__sflush_r+0xda>
 800c2ba:	bf00      	nop
 800c2bc:	dfbffffe 	.word	0xdfbffffe

0800c2c0 <_fflush_r>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	690b      	ldr	r3, [r1, #16]
 800c2c4:	4605      	mov	r5, r0
 800c2c6:	460c      	mov	r4, r1
 800c2c8:	b913      	cbnz	r3, 800c2d0 <_fflush_r+0x10>
 800c2ca:	2500      	movs	r5, #0
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	bd38      	pop	{r3, r4, r5, pc}
 800c2d0:	b118      	cbz	r0, 800c2da <_fflush_r+0x1a>
 800c2d2:	6a03      	ldr	r3, [r0, #32]
 800c2d4:	b90b      	cbnz	r3, 800c2da <_fflush_r+0x1a>
 800c2d6:	f7fe f901 	bl	800a4dc <__sinit>
 800c2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d0f3      	beq.n	800c2ca <_fflush_r+0xa>
 800c2e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2e4:	07d0      	lsls	r0, r2, #31
 800c2e6:	d404      	bmi.n	800c2f2 <_fflush_r+0x32>
 800c2e8:	0599      	lsls	r1, r3, #22
 800c2ea:	d402      	bmi.n	800c2f2 <_fflush_r+0x32>
 800c2ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2ee:	f7fe fb02 	bl	800a8f6 <__retarget_lock_acquire_recursive>
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	4621      	mov	r1, r4
 800c2f6:	f7ff ff5d 	bl	800c1b4 <__sflush_r>
 800c2fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2fc:	07da      	lsls	r2, r3, #31
 800c2fe:	4605      	mov	r5, r0
 800c300:	d4e4      	bmi.n	800c2cc <_fflush_r+0xc>
 800c302:	89a3      	ldrh	r3, [r4, #12]
 800c304:	059b      	lsls	r3, r3, #22
 800c306:	d4e1      	bmi.n	800c2cc <_fflush_r+0xc>
 800c308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c30a:	f7fe faf5 	bl	800a8f8 <__retarget_lock_release_recursive>
 800c30e:	e7dd      	b.n	800c2cc <_fflush_r+0xc>

0800c310 <__swhatbuf_r>:
 800c310:	b570      	push	{r4, r5, r6, lr}
 800c312:	460c      	mov	r4, r1
 800c314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c318:	2900      	cmp	r1, #0
 800c31a:	b096      	sub	sp, #88	; 0x58
 800c31c:	4615      	mov	r5, r2
 800c31e:	461e      	mov	r6, r3
 800c320:	da0d      	bge.n	800c33e <__swhatbuf_r+0x2e>
 800c322:	89a3      	ldrh	r3, [r4, #12]
 800c324:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c328:	f04f 0100 	mov.w	r1, #0
 800c32c:	bf0c      	ite	eq
 800c32e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c332:	2340      	movne	r3, #64	; 0x40
 800c334:	2000      	movs	r0, #0
 800c336:	6031      	str	r1, [r6, #0]
 800c338:	602b      	str	r3, [r5, #0]
 800c33a:	b016      	add	sp, #88	; 0x58
 800c33c:	bd70      	pop	{r4, r5, r6, pc}
 800c33e:	466a      	mov	r2, sp
 800c340:	f000 f848 	bl	800c3d4 <_fstat_r>
 800c344:	2800      	cmp	r0, #0
 800c346:	dbec      	blt.n	800c322 <__swhatbuf_r+0x12>
 800c348:	9901      	ldr	r1, [sp, #4]
 800c34a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c34e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c352:	4259      	negs	r1, r3
 800c354:	4159      	adcs	r1, r3
 800c356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c35a:	e7eb      	b.n	800c334 <__swhatbuf_r+0x24>

0800c35c <__smakebuf_r>:
 800c35c:	898b      	ldrh	r3, [r1, #12]
 800c35e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c360:	079d      	lsls	r5, r3, #30
 800c362:	4606      	mov	r6, r0
 800c364:	460c      	mov	r4, r1
 800c366:	d507      	bpl.n	800c378 <__smakebuf_r+0x1c>
 800c368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	6123      	str	r3, [r4, #16]
 800c370:	2301      	movs	r3, #1
 800c372:	6163      	str	r3, [r4, #20]
 800c374:	b002      	add	sp, #8
 800c376:	bd70      	pop	{r4, r5, r6, pc}
 800c378:	ab01      	add	r3, sp, #4
 800c37a:	466a      	mov	r2, sp
 800c37c:	f7ff ffc8 	bl	800c310 <__swhatbuf_r>
 800c380:	9900      	ldr	r1, [sp, #0]
 800c382:	4605      	mov	r5, r0
 800c384:	4630      	mov	r0, r6
 800c386:	f7ff f9b5 	bl	800b6f4 <_malloc_r>
 800c38a:	b948      	cbnz	r0, 800c3a0 <__smakebuf_r+0x44>
 800c38c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c390:	059a      	lsls	r2, r3, #22
 800c392:	d4ef      	bmi.n	800c374 <__smakebuf_r+0x18>
 800c394:	f023 0303 	bic.w	r3, r3, #3
 800c398:	f043 0302 	orr.w	r3, r3, #2
 800c39c:	81a3      	strh	r3, [r4, #12]
 800c39e:	e7e3      	b.n	800c368 <__smakebuf_r+0xc>
 800c3a0:	89a3      	ldrh	r3, [r4, #12]
 800c3a2:	6020      	str	r0, [r4, #0]
 800c3a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3a8:	81a3      	strh	r3, [r4, #12]
 800c3aa:	9b00      	ldr	r3, [sp, #0]
 800c3ac:	6163      	str	r3, [r4, #20]
 800c3ae:	9b01      	ldr	r3, [sp, #4]
 800c3b0:	6120      	str	r0, [r4, #16]
 800c3b2:	b15b      	cbz	r3, 800c3cc <__smakebuf_r+0x70>
 800c3b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	f000 f81d 	bl	800c3f8 <_isatty_r>
 800c3be:	b128      	cbz	r0, 800c3cc <__smakebuf_r+0x70>
 800c3c0:	89a3      	ldrh	r3, [r4, #12]
 800c3c2:	f023 0303 	bic.w	r3, r3, #3
 800c3c6:	f043 0301 	orr.w	r3, r3, #1
 800c3ca:	81a3      	strh	r3, [r4, #12]
 800c3cc:	89a3      	ldrh	r3, [r4, #12]
 800c3ce:	431d      	orrs	r5, r3
 800c3d0:	81a5      	strh	r5, [r4, #12]
 800c3d2:	e7cf      	b.n	800c374 <__smakebuf_r+0x18>

0800c3d4 <_fstat_r>:
 800c3d4:	b538      	push	{r3, r4, r5, lr}
 800c3d6:	4d07      	ldr	r5, [pc, #28]	; (800c3f4 <_fstat_r+0x20>)
 800c3d8:	2300      	movs	r3, #0
 800c3da:	4604      	mov	r4, r0
 800c3dc:	4608      	mov	r0, r1
 800c3de:	4611      	mov	r1, r2
 800c3e0:	602b      	str	r3, [r5, #0]
 800c3e2:	f7f6 ffae 	bl	8003342 <_fstat>
 800c3e6:	1c43      	adds	r3, r0, #1
 800c3e8:	d102      	bne.n	800c3f0 <_fstat_r+0x1c>
 800c3ea:	682b      	ldr	r3, [r5, #0]
 800c3ec:	b103      	cbz	r3, 800c3f0 <_fstat_r+0x1c>
 800c3ee:	6023      	str	r3, [r4, #0]
 800c3f0:	bd38      	pop	{r3, r4, r5, pc}
 800c3f2:	bf00      	nop
 800c3f4:	20003c08 	.word	0x20003c08

0800c3f8 <_isatty_r>:
 800c3f8:	b538      	push	{r3, r4, r5, lr}
 800c3fa:	4d06      	ldr	r5, [pc, #24]	; (800c414 <_isatty_r+0x1c>)
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	4604      	mov	r4, r0
 800c400:	4608      	mov	r0, r1
 800c402:	602b      	str	r3, [r5, #0]
 800c404:	f7f6 ffad 	bl	8003362 <_isatty>
 800c408:	1c43      	adds	r3, r0, #1
 800c40a:	d102      	bne.n	800c412 <_isatty_r+0x1a>
 800c40c:	682b      	ldr	r3, [r5, #0]
 800c40e:	b103      	cbz	r3, 800c412 <_isatty_r+0x1a>
 800c410:	6023      	str	r3, [r4, #0]
 800c412:	bd38      	pop	{r3, r4, r5, pc}
 800c414:	20003c08 	.word	0x20003c08

0800c418 <_sbrk_r>:
 800c418:	b538      	push	{r3, r4, r5, lr}
 800c41a:	4d06      	ldr	r5, [pc, #24]	; (800c434 <_sbrk_r+0x1c>)
 800c41c:	2300      	movs	r3, #0
 800c41e:	4604      	mov	r4, r0
 800c420:	4608      	mov	r0, r1
 800c422:	602b      	str	r3, [r5, #0]
 800c424:	f7f6 ffb6 	bl	8003394 <_sbrk>
 800c428:	1c43      	adds	r3, r0, #1
 800c42a:	d102      	bne.n	800c432 <_sbrk_r+0x1a>
 800c42c:	682b      	ldr	r3, [r5, #0]
 800c42e:	b103      	cbz	r3, 800c432 <_sbrk_r+0x1a>
 800c430:	6023      	str	r3, [r4, #0]
 800c432:	bd38      	pop	{r3, r4, r5, pc}
 800c434:	20003c08 	.word	0x20003c08

0800c438 <__assert_func>:
 800c438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c43a:	4614      	mov	r4, r2
 800c43c:	461a      	mov	r2, r3
 800c43e:	4b09      	ldr	r3, [pc, #36]	; (800c464 <__assert_func+0x2c>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4605      	mov	r5, r0
 800c444:	68d8      	ldr	r0, [r3, #12]
 800c446:	b14c      	cbz	r4, 800c45c <__assert_func+0x24>
 800c448:	4b07      	ldr	r3, [pc, #28]	; (800c468 <__assert_func+0x30>)
 800c44a:	9100      	str	r1, [sp, #0]
 800c44c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c450:	4906      	ldr	r1, [pc, #24]	; (800c46c <__assert_func+0x34>)
 800c452:	462b      	mov	r3, r5
 800c454:	f000 f872 	bl	800c53c <fiprintf>
 800c458:	f000 f882 	bl	800c560 <abort>
 800c45c:	4b04      	ldr	r3, [pc, #16]	; (800c470 <__assert_func+0x38>)
 800c45e:	461c      	mov	r4, r3
 800c460:	e7f3      	b.n	800c44a <__assert_func+0x12>
 800c462:	bf00      	nop
 800c464:	20000810 	.word	0x20000810
 800c468:	0800e847 	.word	0x0800e847
 800c46c:	0800e854 	.word	0x0800e854
 800c470:	0800e882 	.word	0x0800e882

0800c474 <_calloc_r>:
 800c474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c476:	fba1 2402 	umull	r2, r4, r1, r2
 800c47a:	b94c      	cbnz	r4, 800c490 <_calloc_r+0x1c>
 800c47c:	4611      	mov	r1, r2
 800c47e:	9201      	str	r2, [sp, #4]
 800c480:	f7ff f938 	bl	800b6f4 <_malloc_r>
 800c484:	9a01      	ldr	r2, [sp, #4]
 800c486:	4605      	mov	r5, r0
 800c488:	b930      	cbnz	r0, 800c498 <_calloc_r+0x24>
 800c48a:	4628      	mov	r0, r5
 800c48c:	b003      	add	sp, #12
 800c48e:	bd30      	pop	{r4, r5, pc}
 800c490:	220c      	movs	r2, #12
 800c492:	6002      	str	r2, [r0, #0]
 800c494:	2500      	movs	r5, #0
 800c496:	e7f8      	b.n	800c48a <_calloc_r+0x16>
 800c498:	4621      	mov	r1, r4
 800c49a:	f7fe f99b 	bl	800a7d4 <memset>
 800c49e:	e7f4      	b.n	800c48a <_calloc_r+0x16>

0800c4a0 <__ascii_mbtowc>:
 800c4a0:	b082      	sub	sp, #8
 800c4a2:	b901      	cbnz	r1, 800c4a6 <__ascii_mbtowc+0x6>
 800c4a4:	a901      	add	r1, sp, #4
 800c4a6:	b142      	cbz	r2, 800c4ba <__ascii_mbtowc+0x1a>
 800c4a8:	b14b      	cbz	r3, 800c4be <__ascii_mbtowc+0x1e>
 800c4aa:	7813      	ldrb	r3, [r2, #0]
 800c4ac:	600b      	str	r3, [r1, #0]
 800c4ae:	7812      	ldrb	r2, [r2, #0]
 800c4b0:	1e10      	subs	r0, r2, #0
 800c4b2:	bf18      	it	ne
 800c4b4:	2001      	movne	r0, #1
 800c4b6:	b002      	add	sp, #8
 800c4b8:	4770      	bx	lr
 800c4ba:	4610      	mov	r0, r2
 800c4bc:	e7fb      	b.n	800c4b6 <__ascii_mbtowc+0x16>
 800c4be:	f06f 0001 	mvn.w	r0, #1
 800c4c2:	e7f8      	b.n	800c4b6 <__ascii_mbtowc+0x16>

0800c4c4 <_realloc_r>:
 800c4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c8:	4680      	mov	r8, r0
 800c4ca:	4614      	mov	r4, r2
 800c4cc:	460e      	mov	r6, r1
 800c4ce:	b921      	cbnz	r1, 800c4da <_realloc_r+0x16>
 800c4d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d4:	4611      	mov	r1, r2
 800c4d6:	f7ff b90d 	b.w	800b6f4 <_malloc_r>
 800c4da:	b92a      	cbnz	r2, 800c4e8 <_realloc_r+0x24>
 800c4dc:	f7ff f896 	bl	800b60c <_free_r>
 800c4e0:	4625      	mov	r5, r4
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e8:	f000 f841 	bl	800c56e <_malloc_usable_size_r>
 800c4ec:	4284      	cmp	r4, r0
 800c4ee:	4607      	mov	r7, r0
 800c4f0:	d802      	bhi.n	800c4f8 <_realloc_r+0x34>
 800c4f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4f6:	d812      	bhi.n	800c51e <_realloc_r+0x5a>
 800c4f8:	4621      	mov	r1, r4
 800c4fa:	4640      	mov	r0, r8
 800c4fc:	f7ff f8fa 	bl	800b6f4 <_malloc_r>
 800c500:	4605      	mov	r5, r0
 800c502:	2800      	cmp	r0, #0
 800c504:	d0ed      	beq.n	800c4e2 <_realloc_r+0x1e>
 800c506:	42bc      	cmp	r4, r7
 800c508:	4622      	mov	r2, r4
 800c50a:	4631      	mov	r1, r6
 800c50c:	bf28      	it	cs
 800c50e:	463a      	movcs	r2, r7
 800c510:	f7fe f9f3 	bl	800a8fa <memcpy>
 800c514:	4631      	mov	r1, r6
 800c516:	4640      	mov	r0, r8
 800c518:	f7ff f878 	bl	800b60c <_free_r>
 800c51c:	e7e1      	b.n	800c4e2 <_realloc_r+0x1e>
 800c51e:	4635      	mov	r5, r6
 800c520:	e7df      	b.n	800c4e2 <_realloc_r+0x1e>

0800c522 <__ascii_wctomb>:
 800c522:	b149      	cbz	r1, 800c538 <__ascii_wctomb+0x16>
 800c524:	2aff      	cmp	r2, #255	; 0xff
 800c526:	bf85      	ittet	hi
 800c528:	238a      	movhi	r3, #138	; 0x8a
 800c52a:	6003      	strhi	r3, [r0, #0]
 800c52c:	700a      	strbls	r2, [r1, #0]
 800c52e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c532:	bf98      	it	ls
 800c534:	2001      	movls	r0, #1
 800c536:	4770      	bx	lr
 800c538:	4608      	mov	r0, r1
 800c53a:	4770      	bx	lr

0800c53c <fiprintf>:
 800c53c:	b40e      	push	{r1, r2, r3}
 800c53e:	b503      	push	{r0, r1, lr}
 800c540:	4601      	mov	r1, r0
 800c542:	ab03      	add	r3, sp, #12
 800c544:	4805      	ldr	r0, [pc, #20]	; (800c55c <fiprintf+0x20>)
 800c546:	f853 2b04 	ldr.w	r2, [r3], #4
 800c54a:	6800      	ldr	r0, [r0, #0]
 800c54c:	9301      	str	r3, [sp, #4]
 800c54e:	f000 f83f 	bl	800c5d0 <_vfiprintf_r>
 800c552:	b002      	add	sp, #8
 800c554:	f85d eb04 	ldr.w	lr, [sp], #4
 800c558:	b003      	add	sp, #12
 800c55a:	4770      	bx	lr
 800c55c:	20000810 	.word	0x20000810

0800c560 <abort>:
 800c560:	b508      	push	{r3, lr}
 800c562:	2006      	movs	r0, #6
 800c564:	f000 f976 	bl	800c854 <raise>
 800c568:	2001      	movs	r0, #1
 800c56a:	f7f6 fe9b 	bl	80032a4 <_exit>

0800c56e <_malloc_usable_size_r>:
 800c56e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c572:	1f18      	subs	r0, r3, #4
 800c574:	2b00      	cmp	r3, #0
 800c576:	bfbc      	itt	lt
 800c578:	580b      	ldrlt	r3, [r1, r0]
 800c57a:	18c0      	addlt	r0, r0, r3
 800c57c:	4770      	bx	lr

0800c57e <__sfputc_r>:
 800c57e:	6893      	ldr	r3, [r2, #8]
 800c580:	3b01      	subs	r3, #1
 800c582:	2b00      	cmp	r3, #0
 800c584:	b410      	push	{r4}
 800c586:	6093      	str	r3, [r2, #8]
 800c588:	da08      	bge.n	800c59c <__sfputc_r+0x1e>
 800c58a:	6994      	ldr	r4, [r2, #24]
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	db01      	blt.n	800c594 <__sfputc_r+0x16>
 800c590:	290a      	cmp	r1, #10
 800c592:	d103      	bne.n	800c59c <__sfputc_r+0x1e>
 800c594:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c598:	f7fe b86d 	b.w	800a676 <__swbuf_r>
 800c59c:	6813      	ldr	r3, [r2, #0]
 800c59e:	1c58      	adds	r0, r3, #1
 800c5a0:	6010      	str	r0, [r2, #0]
 800c5a2:	7019      	strb	r1, [r3, #0]
 800c5a4:	4608      	mov	r0, r1
 800c5a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <__sfputs_r>:
 800c5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ae:	4606      	mov	r6, r0
 800c5b0:	460f      	mov	r7, r1
 800c5b2:	4614      	mov	r4, r2
 800c5b4:	18d5      	adds	r5, r2, r3
 800c5b6:	42ac      	cmp	r4, r5
 800c5b8:	d101      	bne.n	800c5be <__sfputs_r+0x12>
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	e007      	b.n	800c5ce <__sfputs_r+0x22>
 800c5be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c2:	463a      	mov	r2, r7
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f7ff ffda 	bl	800c57e <__sfputc_r>
 800c5ca:	1c43      	adds	r3, r0, #1
 800c5cc:	d1f3      	bne.n	800c5b6 <__sfputs_r+0xa>
 800c5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5d0 <_vfiprintf_r>:
 800c5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d4:	460d      	mov	r5, r1
 800c5d6:	b09d      	sub	sp, #116	; 0x74
 800c5d8:	4614      	mov	r4, r2
 800c5da:	4698      	mov	r8, r3
 800c5dc:	4606      	mov	r6, r0
 800c5de:	b118      	cbz	r0, 800c5e8 <_vfiprintf_r+0x18>
 800c5e0:	6a03      	ldr	r3, [r0, #32]
 800c5e2:	b90b      	cbnz	r3, 800c5e8 <_vfiprintf_r+0x18>
 800c5e4:	f7fd ff7a 	bl	800a4dc <__sinit>
 800c5e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5ea:	07d9      	lsls	r1, r3, #31
 800c5ec:	d405      	bmi.n	800c5fa <_vfiprintf_r+0x2a>
 800c5ee:	89ab      	ldrh	r3, [r5, #12]
 800c5f0:	059a      	lsls	r2, r3, #22
 800c5f2:	d402      	bmi.n	800c5fa <_vfiprintf_r+0x2a>
 800c5f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5f6:	f7fe f97e 	bl	800a8f6 <__retarget_lock_acquire_recursive>
 800c5fa:	89ab      	ldrh	r3, [r5, #12]
 800c5fc:	071b      	lsls	r3, r3, #28
 800c5fe:	d501      	bpl.n	800c604 <_vfiprintf_r+0x34>
 800c600:	692b      	ldr	r3, [r5, #16]
 800c602:	b99b      	cbnz	r3, 800c62c <_vfiprintf_r+0x5c>
 800c604:	4629      	mov	r1, r5
 800c606:	4630      	mov	r0, r6
 800c608:	f7fe f872 	bl	800a6f0 <__swsetup_r>
 800c60c:	b170      	cbz	r0, 800c62c <_vfiprintf_r+0x5c>
 800c60e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c610:	07dc      	lsls	r4, r3, #31
 800c612:	d504      	bpl.n	800c61e <_vfiprintf_r+0x4e>
 800c614:	f04f 30ff 	mov.w	r0, #4294967295
 800c618:	b01d      	add	sp, #116	; 0x74
 800c61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c61e:	89ab      	ldrh	r3, [r5, #12]
 800c620:	0598      	lsls	r0, r3, #22
 800c622:	d4f7      	bmi.n	800c614 <_vfiprintf_r+0x44>
 800c624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c626:	f7fe f967 	bl	800a8f8 <__retarget_lock_release_recursive>
 800c62a:	e7f3      	b.n	800c614 <_vfiprintf_r+0x44>
 800c62c:	2300      	movs	r3, #0
 800c62e:	9309      	str	r3, [sp, #36]	; 0x24
 800c630:	2320      	movs	r3, #32
 800c632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c636:	f8cd 800c 	str.w	r8, [sp, #12]
 800c63a:	2330      	movs	r3, #48	; 0x30
 800c63c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c7f0 <_vfiprintf_r+0x220>
 800c640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c644:	f04f 0901 	mov.w	r9, #1
 800c648:	4623      	mov	r3, r4
 800c64a:	469a      	mov	sl, r3
 800c64c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c650:	b10a      	cbz	r2, 800c656 <_vfiprintf_r+0x86>
 800c652:	2a25      	cmp	r2, #37	; 0x25
 800c654:	d1f9      	bne.n	800c64a <_vfiprintf_r+0x7a>
 800c656:	ebba 0b04 	subs.w	fp, sl, r4
 800c65a:	d00b      	beq.n	800c674 <_vfiprintf_r+0xa4>
 800c65c:	465b      	mov	r3, fp
 800c65e:	4622      	mov	r2, r4
 800c660:	4629      	mov	r1, r5
 800c662:	4630      	mov	r0, r6
 800c664:	f7ff ffa2 	bl	800c5ac <__sfputs_r>
 800c668:	3001      	adds	r0, #1
 800c66a:	f000 80a9 	beq.w	800c7c0 <_vfiprintf_r+0x1f0>
 800c66e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c670:	445a      	add	r2, fp
 800c672:	9209      	str	r2, [sp, #36]	; 0x24
 800c674:	f89a 3000 	ldrb.w	r3, [sl]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f000 80a1 	beq.w	800c7c0 <_vfiprintf_r+0x1f0>
 800c67e:	2300      	movs	r3, #0
 800c680:	f04f 32ff 	mov.w	r2, #4294967295
 800c684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c688:	f10a 0a01 	add.w	sl, sl, #1
 800c68c:	9304      	str	r3, [sp, #16]
 800c68e:	9307      	str	r3, [sp, #28]
 800c690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c694:	931a      	str	r3, [sp, #104]	; 0x68
 800c696:	4654      	mov	r4, sl
 800c698:	2205      	movs	r2, #5
 800c69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c69e:	4854      	ldr	r0, [pc, #336]	; (800c7f0 <_vfiprintf_r+0x220>)
 800c6a0:	f7f3 fdae 	bl	8000200 <memchr>
 800c6a4:	9a04      	ldr	r2, [sp, #16]
 800c6a6:	b9d8      	cbnz	r0, 800c6e0 <_vfiprintf_r+0x110>
 800c6a8:	06d1      	lsls	r1, r2, #27
 800c6aa:	bf44      	itt	mi
 800c6ac:	2320      	movmi	r3, #32
 800c6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6b2:	0713      	lsls	r3, r2, #28
 800c6b4:	bf44      	itt	mi
 800c6b6:	232b      	movmi	r3, #43	; 0x2b
 800c6b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c6c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c6c2:	d015      	beq.n	800c6f0 <_vfiprintf_r+0x120>
 800c6c4:	9a07      	ldr	r2, [sp, #28]
 800c6c6:	4654      	mov	r4, sl
 800c6c8:	2000      	movs	r0, #0
 800c6ca:	f04f 0c0a 	mov.w	ip, #10
 800c6ce:	4621      	mov	r1, r4
 800c6d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6d4:	3b30      	subs	r3, #48	; 0x30
 800c6d6:	2b09      	cmp	r3, #9
 800c6d8:	d94d      	bls.n	800c776 <_vfiprintf_r+0x1a6>
 800c6da:	b1b0      	cbz	r0, 800c70a <_vfiprintf_r+0x13a>
 800c6dc:	9207      	str	r2, [sp, #28]
 800c6de:	e014      	b.n	800c70a <_vfiprintf_r+0x13a>
 800c6e0:	eba0 0308 	sub.w	r3, r0, r8
 800c6e4:	fa09 f303 	lsl.w	r3, r9, r3
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	9304      	str	r3, [sp, #16]
 800c6ec:	46a2      	mov	sl, r4
 800c6ee:	e7d2      	b.n	800c696 <_vfiprintf_r+0xc6>
 800c6f0:	9b03      	ldr	r3, [sp, #12]
 800c6f2:	1d19      	adds	r1, r3, #4
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	9103      	str	r1, [sp, #12]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	bfbb      	ittet	lt
 800c6fc:	425b      	neglt	r3, r3
 800c6fe:	f042 0202 	orrlt.w	r2, r2, #2
 800c702:	9307      	strge	r3, [sp, #28]
 800c704:	9307      	strlt	r3, [sp, #28]
 800c706:	bfb8      	it	lt
 800c708:	9204      	strlt	r2, [sp, #16]
 800c70a:	7823      	ldrb	r3, [r4, #0]
 800c70c:	2b2e      	cmp	r3, #46	; 0x2e
 800c70e:	d10c      	bne.n	800c72a <_vfiprintf_r+0x15a>
 800c710:	7863      	ldrb	r3, [r4, #1]
 800c712:	2b2a      	cmp	r3, #42	; 0x2a
 800c714:	d134      	bne.n	800c780 <_vfiprintf_r+0x1b0>
 800c716:	9b03      	ldr	r3, [sp, #12]
 800c718:	1d1a      	adds	r2, r3, #4
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	9203      	str	r2, [sp, #12]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	bfb8      	it	lt
 800c722:	f04f 33ff 	movlt.w	r3, #4294967295
 800c726:	3402      	adds	r4, #2
 800c728:	9305      	str	r3, [sp, #20]
 800c72a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c800 <_vfiprintf_r+0x230>
 800c72e:	7821      	ldrb	r1, [r4, #0]
 800c730:	2203      	movs	r2, #3
 800c732:	4650      	mov	r0, sl
 800c734:	f7f3 fd64 	bl	8000200 <memchr>
 800c738:	b138      	cbz	r0, 800c74a <_vfiprintf_r+0x17a>
 800c73a:	9b04      	ldr	r3, [sp, #16]
 800c73c:	eba0 000a 	sub.w	r0, r0, sl
 800c740:	2240      	movs	r2, #64	; 0x40
 800c742:	4082      	lsls	r2, r0
 800c744:	4313      	orrs	r3, r2
 800c746:	3401      	adds	r4, #1
 800c748:	9304      	str	r3, [sp, #16]
 800c74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c74e:	4829      	ldr	r0, [pc, #164]	; (800c7f4 <_vfiprintf_r+0x224>)
 800c750:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c754:	2206      	movs	r2, #6
 800c756:	f7f3 fd53 	bl	8000200 <memchr>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d03f      	beq.n	800c7de <_vfiprintf_r+0x20e>
 800c75e:	4b26      	ldr	r3, [pc, #152]	; (800c7f8 <_vfiprintf_r+0x228>)
 800c760:	bb1b      	cbnz	r3, 800c7aa <_vfiprintf_r+0x1da>
 800c762:	9b03      	ldr	r3, [sp, #12]
 800c764:	3307      	adds	r3, #7
 800c766:	f023 0307 	bic.w	r3, r3, #7
 800c76a:	3308      	adds	r3, #8
 800c76c:	9303      	str	r3, [sp, #12]
 800c76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c770:	443b      	add	r3, r7
 800c772:	9309      	str	r3, [sp, #36]	; 0x24
 800c774:	e768      	b.n	800c648 <_vfiprintf_r+0x78>
 800c776:	fb0c 3202 	mla	r2, ip, r2, r3
 800c77a:	460c      	mov	r4, r1
 800c77c:	2001      	movs	r0, #1
 800c77e:	e7a6      	b.n	800c6ce <_vfiprintf_r+0xfe>
 800c780:	2300      	movs	r3, #0
 800c782:	3401      	adds	r4, #1
 800c784:	9305      	str	r3, [sp, #20]
 800c786:	4619      	mov	r1, r3
 800c788:	f04f 0c0a 	mov.w	ip, #10
 800c78c:	4620      	mov	r0, r4
 800c78e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c792:	3a30      	subs	r2, #48	; 0x30
 800c794:	2a09      	cmp	r2, #9
 800c796:	d903      	bls.n	800c7a0 <_vfiprintf_r+0x1d0>
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d0c6      	beq.n	800c72a <_vfiprintf_r+0x15a>
 800c79c:	9105      	str	r1, [sp, #20]
 800c79e:	e7c4      	b.n	800c72a <_vfiprintf_r+0x15a>
 800c7a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7a4:	4604      	mov	r4, r0
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e7f0      	b.n	800c78c <_vfiprintf_r+0x1bc>
 800c7aa:	ab03      	add	r3, sp, #12
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	462a      	mov	r2, r5
 800c7b0:	4b12      	ldr	r3, [pc, #72]	; (800c7fc <_vfiprintf_r+0x22c>)
 800c7b2:	a904      	add	r1, sp, #16
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	f7fd fa3f 	bl	8009c38 <_printf_float>
 800c7ba:	4607      	mov	r7, r0
 800c7bc:	1c78      	adds	r0, r7, #1
 800c7be:	d1d6      	bne.n	800c76e <_vfiprintf_r+0x19e>
 800c7c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7c2:	07d9      	lsls	r1, r3, #31
 800c7c4:	d405      	bmi.n	800c7d2 <_vfiprintf_r+0x202>
 800c7c6:	89ab      	ldrh	r3, [r5, #12]
 800c7c8:	059a      	lsls	r2, r3, #22
 800c7ca:	d402      	bmi.n	800c7d2 <_vfiprintf_r+0x202>
 800c7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7ce:	f7fe f893 	bl	800a8f8 <__retarget_lock_release_recursive>
 800c7d2:	89ab      	ldrh	r3, [r5, #12]
 800c7d4:	065b      	lsls	r3, r3, #25
 800c7d6:	f53f af1d 	bmi.w	800c614 <_vfiprintf_r+0x44>
 800c7da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7dc:	e71c      	b.n	800c618 <_vfiprintf_r+0x48>
 800c7de:	ab03      	add	r3, sp, #12
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	462a      	mov	r2, r5
 800c7e4:	4b05      	ldr	r3, [pc, #20]	; (800c7fc <_vfiprintf_r+0x22c>)
 800c7e6:	a904      	add	r1, sp, #16
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f7fd fcc9 	bl	800a180 <_printf_i>
 800c7ee:	e7e4      	b.n	800c7ba <_vfiprintf_r+0x1ea>
 800c7f0:	0800e82c 	.word	0x0800e82c
 800c7f4:	0800e836 	.word	0x0800e836
 800c7f8:	08009c39 	.word	0x08009c39
 800c7fc:	0800c5ad 	.word	0x0800c5ad
 800c800:	0800e832 	.word	0x0800e832

0800c804 <_raise_r>:
 800c804:	291f      	cmp	r1, #31
 800c806:	b538      	push	{r3, r4, r5, lr}
 800c808:	4604      	mov	r4, r0
 800c80a:	460d      	mov	r5, r1
 800c80c:	d904      	bls.n	800c818 <_raise_r+0x14>
 800c80e:	2316      	movs	r3, #22
 800c810:	6003      	str	r3, [r0, #0]
 800c812:	f04f 30ff 	mov.w	r0, #4294967295
 800c816:	bd38      	pop	{r3, r4, r5, pc}
 800c818:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c81a:	b112      	cbz	r2, 800c822 <_raise_r+0x1e>
 800c81c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c820:	b94b      	cbnz	r3, 800c836 <_raise_r+0x32>
 800c822:	4620      	mov	r0, r4
 800c824:	f000 f830 	bl	800c888 <_getpid_r>
 800c828:	462a      	mov	r2, r5
 800c82a:	4601      	mov	r1, r0
 800c82c:	4620      	mov	r0, r4
 800c82e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c832:	f000 b817 	b.w	800c864 <_kill_r>
 800c836:	2b01      	cmp	r3, #1
 800c838:	d00a      	beq.n	800c850 <_raise_r+0x4c>
 800c83a:	1c59      	adds	r1, r3, #1
 800c83c:	d103      	bne.n	800c846 <_raise_r+0x42>
 800c83e:	2316      	movs	r3, #22
 800c840:	6003      	str	r3, [r0, #0]
 800c842:	2001      	movs	r0, #1
 800c844:	e7e7      	b.n	800c816 <_raise_r+0x12>
 800c846:	2400      	movs	r4, #0
 800c848:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c84c:	4628      	mov	r0, r5
 800c84e:	4798      	blx	r3
 800c850:	2000      	movs	r0, #0
 800c852:	e7e0      	b.n	800c816 <_raise_r+0x12>

0800c854 <raise>:
 800c854:	4b02      	ldr	r3, [pc, #8]	; (800c860 <raise+0xc>)
 800c856:	4601      	mov	r1, r0
 800c858:	6818      	ldr	r0, [r3, #0]
 800c85a:	f7ff bfd3 	b.w	800c804 <_raise_r>
 800c85e:	bf00      	nop
 800c860:	20000810 	.word	0x20000810

0800c864 <_kill_r>:
 800c864:	b538      	push	{r3, r4, r5, lr}
 800c866:	4d07      	ldr	r5, [pc, #28]	; (800c884 <_kill_r+0x20>)
 800c868:	2300      	movs	r3, #0
 800c86a:	4604      	mov	r4, r0
 800c86c:	4608      	mov	r0, r1
 800c86e:	4611      	mov	r1, r2
 800c870:	602b      	str	r3, [r5, #0]
 800c872:	f7f6 fd07 	bl	8003284 <_kill>
 800c876:	1c43      	adds	r3, r0, #1
 800c878:	d102      	bne.n	800c880 <_kill_r+0x1c>
 800c87a:	682b      	ldr	r3, [r5, #0]
 800c87c:	b103      	cbz	r3, 800c880 <_kill_r+0x1c>
 800c87e:	6023      	str	r3, [r4, #0]
 800c880:	bd38      	pop	{r3, r4, r5, pc}
 800c882:	bf00      	nop
 800c884:	20003c08 	.word	0x20003c08

0800c888 <_getpid_r>:
 800c888:	f7f6 bcf4 	b.w	8003274 <_getpid>

0800c88c <_init>:
 800c88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88e:	bf00      	nop
 800c890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c892:	bc08      	pop	{r3}
 800c894:	469e      	mov	lr, r3
 800c896:	4770      	bx	lr

0800c898 <_fini>:
 800c898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89a:	bf00      	nop
 800c89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c89e:	bc08      	pop	{r3}
 800c8a0:	469e      	mov	lr, r3
 800c8a2:	4770      	bx	lr

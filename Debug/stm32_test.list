
stm32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003294  0800d358  0800d358  0001d358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105ec  080105ec  0003084c  2**0
                  CONTENTS
  4 .ARM          00000008  080105ec  080105ec  000205ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105f4  080105f4  0003084c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105f4  080105f4  000205f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105f8  080105f8  000205f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000084c  20000000  080105fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001168  2000084c  08010e48  0003084c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019b4  08010e48  000319b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003084c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003087c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a148  00000000  00000000  000308bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e8c  00000000  00000000  0004aa07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b0  00000000  00000000  0004e898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000132a  00000000  00000000  00050148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d363  00000000  00000000  00051472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022349  00000000  00000000  0006e7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2f8a  00000000  00000000  00090b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000789c  00000000  00000000  00133aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013b344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000084c 	.word	0x2000084c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d340 	.word	0x0800d340

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000850 	.word	0x20000850
 80001dc:	0800d340 	.word	0x0800d340

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <ds18_init>:

TIM_HandleTypeDef *htim10_new;



void ds18_init(TIM_HandleTypeDef *htim10) {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	htim10_new=htim10;
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <ds18_init+0x1c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000868 	.word	0x20000868

08000f14 <ds18_get_temp>:

float ds18_get_temp(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
	wire_reset();
 8000f1a:	f000 f857 	bl	8000fcc <wire_reset>
	wire_write(0xcc);
 8000f1e:	20cc      	movs	r0, #204	; 0xcc
 8000f20:	f000 f8d0 	bl	80010c4 <wire_write>
	wire_write(0x44);
 8000f24:	2044      	movs	r0, #68	; 0x44
 8000f26:	f000 f8cd 	bl	80010c4 <wire_write>
	HAL_Delay(95);
 8000f2a:	205f      	movs	r0, #95	; 0x5f
 8000f2c:	f002 feec 	bl	8003d08 <HAL_Delay>
	wire_reset();
 8000f30:	f000 f84c 	bl	8000fcc <wire_reset>
	wire_write(0xcc);
 8000f34:	20cc      	movs	r0, #204	; 0xcc
 8000f36:	f000 f8c5 	bl	80010c4 <wire_write>
	wire_write(0xbe);
 8000f3a:	20be      	movs	r0, #190	; 0xbe
 8000f3c:	f000 f8c2 	bl	80010c4 <wire_write>
	int i;
	uint8_t rom_code[9];
	for (i = 0; i < 9; i++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e00b      	b.n	8000f5e <ds18_get_temp+0x4a>
	  rom_code[i] = wire_read();
 8000f46:	f000 f8d9 	bl	80010fc <wire_read>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	1d3a      	adds	r2, r7, #4
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4413      	add	r3, r2
 8000f54:	460a      	mov	r2, r1
 8000f56:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 9; i++)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	ddf0      	ble.n	8000f46 <ds18_get_temp+0x32>
	float temp= ((rom_code[1]<<8) | (rom_code[0]));
 8000f64:	797b      	ldrb	r3, [r7, #5]
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	793a      	ldrb	r2, [r7, #4]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	ee07 3a90 	vmov	s15, r3
 8000f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f74:	edc7 7a04 	vstr	s15, [r7, #16]


	return temp = temp/16.0f;
 8000f78:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f7c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000f80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f84:	edc7 7a04 	vstr	s15, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	ee07 3a90 	vmov	s15, r3
}
 8000f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <delay_us>:

void delay_us(uint32_t us)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim10_new, 0);
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <delay_us+0x30>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
	  while (__HAL_TIM_GET_COUNTER(htim10_new) < us) {}
 8000faa:	bf00      	nop
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <delay_us+0x30>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d8f8      	bhi.n	8000fac <delay_us+0x14>
}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	20000868 	.word	0x20000868

08000fcc <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4811      	ldr	r0, [pc, #68]	; (800101c <wire_reset+0x50>)
 8000fd8:	f003 fbda 	bl	8004790 <HAL_GPIO_WritePin>
  delay_us(480);
 8000fdc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000fe0:	f7ff ffda 	bl	8000f98 <delay_us>
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	480c      	ldr	r0, [pc, #48]	; (800101c <wire_reset+0x50>)
 8000fea:	f003 fbd1 	bl	8004790 <HAL_GPIO_WritePin>
  delay_us(70);
 8000fee:	2046      	movs	r0, #70	; 0x46
 8000ff0:	f7ff ffd2 	bl	8000f98 <delay_us>
  rc = HAL_GPIO_ReadPin(DSO_DATA_GPIO_Port, DSO_DATA_Pin);
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4809      	ldr	r0, [pc, #36]	; (800101c <wire_reset+0x50>)
 8000ff8:	f003 fbb2 	bl	8004760 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	607b      	str	r3, [r7, #4]
  delay_us(410);
 8001000:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001004:	f7ff ffc8 	bl	8000f98 <delay_us>

  if (rc == 0)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <wire_reset+0x46>
    return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <wire_reset+0x48>
  else
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40020400 	.word	0x40020400

08001020 <write_bit>:

void write_bit(int value)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if (value) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d010      	beq.n	8001050 <write_bit+0x30>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2102      	movs	r1, #2
 8001032:	4811      	ldr	r0, [pc, #68]	; (8001078 <write_bit+0x58>)
 8001034:	f003 fbac 	bl	8004790 <HAL_GPIO_WritePin>
    delay_us(6);
 8001038:	2006      	movs	r0, #6
 800103a:	f7ff ffad 	bl	8000f98 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	2102      	movs	r1, #2
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <write_bit+0x58>)
 8001044:	f003 fba4 	bl	8004790 <HAL_GPIO_WritePin>
    delay_us(64);
 8001048:	2040      	movs	r0, #64	; 0x40
 800104a:	f7ff ffa5 	bl	8000f98 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 800104e:	e00f      	b.n	8001070 <write_bit+0x50>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2102      	movs	r1, #2
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <write_bit+0x58>)
 8001056:	f003 fb9b 	bl	8004790 <HAL_GPIO_WritePin>
    delay_us(60);
 800105a:	203c      	movs	r0, #60	; 0x3c
 800105c:	f7ff ff9c 	bl	8000f98 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2102      	movs	r1, #2
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <write_bit+0x58>)
 8001066:	f003 fb93 	bl	8004790 <HAL_GPIO_WritePin>
    delay_us(10);
 800106a:	200a      	movs	r0, #10
 800106c:	f7ff ff94 	bl	8000f98 <delay_us>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40020400 	.word	0x40020400

0800107c <read_bit>:


int read_bit(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2102      	movs	r1, #2
 8001086:	480e      	ldr	r0, [pc, #56]	; (80010c0 <read_bit+0x44>)
 8001088:	f003 fb82 	bl	8004790 <HAL_GPIO_WritePin>
  delay_us(6);
 800108c:	2006      	movs	r0, #6
 800108e:	f7ff ff83 	bl	8000f98 <delay_us>
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2102      	movs	r1, #2
 8001096:	480a      	ldr	r0, [pc, #40]	; (80010c0 <read_bit+0x44>)
 8001098:	f003 fb7a 	bl	8004790 <HAL_GPIO_WritePin>
  delay_us(9);
 800109c:	2009      	movs	r0, #9
 800109e:	f7ff ff7b 	bl	8000f98 <delay_us>
  rc = HAL_GPIO_ReadPin(DSO_DATA_GPIO_Port, DSO_DATA_Pin);
 80010a2:	2102      	movs	r1, #2
 80010a4:	4806      	ldr	r0, [pc, #24]	; (80010c0 <read_bit+0x44>)
 80010a6:	f003 fb5b 	bl	8004760 <HAL_GPIO_ReadPin>
 80010aa:	4603      	mov	r3, r0
 80010ac:	607b      	str	r3, [r7, #4]
  delay_us(55);
 80010ae:	2037      	movs	r0, #55	; 0x37
 80010b0:	f7ff ff72 	bl	8000f98 <delay_us>
  return rc;
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020400 	.word	0x40020400

080010c4 <wire_write>:

void wire_write(uint8_t byte)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	e00b      	b.n	80010ec <wire_write+0x28>
    write_bit(byte & 0x01);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ffa0 	bl	8001020 <write_bit>
    byte >>= 1;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	085b      	lsrs	r3, r3, #1
 80010e4:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3301      	adds	r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b07      	cmp	r3, #7
 80010f0:	ddf0      	ble.n	80010d4 <wire_write+0x10>
  }
}
 80010f2:	bf00      	nop
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <wire_read>:

uint8_t wire_read(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	e00e      	b.n	800112a <wire_read+0x2e>
    value >>= 1;
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	085b      	lsrs	r3, r3, #1
 8001110:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 8001112:	f7ff ffb3 	bl	800107c <read_bit>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <wire_read+0x28>
      value |= 0x80;
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001122:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2b07      	cmp	r3, #7
 800112e:	dded      	ble.n	800110c <wire_read+0x10>
  }
  return value;
 8001130:	79fb      	ldrb	r3, [r7, #7]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <encSetRange>:


TIM_HandleTypeDef *htim1_new;


void encSetRange(uint16_t min, uint16_t max) {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	460a      	mov	r2, r1
 8001146:	80fb      	strh	r3, [r7, #6]
 8001148:	4613      	mov	r3, r2
 800114a:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(htim1_new, max);
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <encSetRange+0x30>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	88ba      	ldrh	r2, [r7, #4]
 8001154:	62da      	str	r2, [r3, #44]	; 0x2c
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <encSetRange+0x30>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	88ba      	ldrh	r2, [r7, #4]
 800115c:	60da      	str	r2, [r3, #12]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	2000086c 	.word	0x2000086c

08001170 <encSetPos>:

void encSetPos(uint16_t encPos) {
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim1_new, encPos);
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <encSetPos+0x20>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	88fa      	ldrh	r2, [r7, #6]
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	2000086c 	.word	0x2000086c

08001194 <encoderGet>:

uint32_t encoderGet(void) {
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(htim1_new);
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <encoderGet+0x18>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2000086c 	.word	0x2000086c

080011b0 <encoderInit>:

void encoderInit(TIM_HandleTypeDef *htim1) {
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	htim1_new=htim1;
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <encoderInit+0x1c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	2000086c 	.word	0x2000086c

080011d0 <entrySelected>:

bool entrySelected(int16_t id) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]
    if (encoderGet() == id) {
 80011da:	f7ff ffdb 	bl	8001194 <encoderGet>
 80011de:	4602      	mov	r2, r0
 80011e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d101      	bne.n	80011ec <entrySelected+0x1c>
        return true;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <entrySelected+0x1e>
    }
    return false;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <entryClicked>:

bool entryClicked(int16_t id) {
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	80fb      	strh	r3, [r7, #6]
    if (encoderGet() == id && isClicked()) {
 8001200:	f7ff ffc8 	bl	8001194 <encoderGet>
 8001204:	4602      	mov	r2, r0
 8001206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120a:	429a      	cmp	r2, r3
 800120c:	d106      	bne.n	800121c <entryClicked+0x26>
 800120e:	f000 f8b5 	bl	800137c <isClicked>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <entryClicked+0x26>
        return true;
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <entryClicked+0x28>
    }
    return false;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <send_uart>:
int8_t ch2przerwanie=0;
int8_t ch3przerwanie=0;
int8_t ch4przerwanie=0;


void send_uart(char *string) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff f825 	bl	8000280 <strlen>
 8001236:	4603      	mov	r3, r0
 8001238:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart6, (uint8_t *)string, len, HAL_MAX_DELAY);
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	b29a      	uxth	r2, r3
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	4803      	ldr	r0, [pc, #12]	; (8001254 <send_uart+0x2c>)
 8001246:	f006 f9ca 	bl	80075de <HAL_UART_Transmit>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000ad8 	.word	0x20000ad8

08001258 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10d      	bne.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_TIM_Base_Stop_IT(htim);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f005 f8b4 	bl	80063d8 <HAL_TIM_Base_Stop_IT>
		if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)==GPIO_PIN_RESET) {
 8001270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001276:	f003 fa73 	bl	8004760 <HAL_GPIO_ReadPin>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x2e>
			sendToUart=1;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
			}
		}
	}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40014800 	.word	0x40014800
 8001294:	40020400 	.word	0x40020400
 8001298:	20000b1c 	.word	0x20000b1c

0800129c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t pulse;
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7f1b      	ldrb	r3, [r3, #28]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d10e      	bne.n	80012ca <HAL_TIM_OC_DelayElapsedCallback+0x2e>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80012ac:	2100      	movs	r1, #0
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f005 fd98 	bl	8006de4 <HAL_TIM_ReadCapturedValue>
 80012b4:	60f8      	str	r0, [r7, #12]
    ch1przerwanie=1;
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (pulse + 6659)); //to wartosc pulse dla kazdego timera
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 80012c6:	3303      	adds	r3, #3
 80012c8:	6353      	str	r3, [r2, #52]	; 0x34
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7f1b      	ldrb	r3, [r3, #28]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d10e      	bne.n	80012f0 <HAL_TIM_OC_DelayElapsedCallback+0x54>
  pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80012d2:	2104      	movs	r1, #4
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f005 fd85 	bl	8006de4 <HAL_TIM_ReadCapturedValue>
 80012da:	60f8      	str	r0, [r7, #12]
  ch2przerwanie=1;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
  /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (pulse + 13500));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f503 5352 	add.w	r3, r3, #13440	; 0x3480
 80012ec:	333c      	adds	r3, #60	; 0x3c
 80012ee:	6393      	str	r3, [r2, #56]	; 0x38
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7f1b      	ldrb	r3, [r3, #28]
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d10e      	bne.n	8001316 <HAL_TIM_OC_DelayElapsedCallback+0x7a>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80012f8:	2108      	movs	r1, #8
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f005 fd72 	bl	8006de4 <HAL_TIM_ReadCapturedValue>
 8001300:	60f8      	str	r0, [r7, #12]
    ch3przerwanie=1;
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, (pulse + 36000));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8001312:	33a0      	adds	r3, #160	; 0xa0
 8001314:	63d3      	str	r3, [r2, #60]	; 0x3c
    }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7f1b      	ldrb	r3, [r3, #28]
 800131a:	2b08      	cmp	r3, #8
 800131c:	d10f      	bne.n	800133e <HAL_TIM_OC_DelayElapsedCallback+0xa2>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 800131e:	210c      	movs	r1, #12
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f005 fd5f 	bl	8006de4 <HAL_TIM_ReadCapturedValue>
 8001326:	60f8      	str	r0, [r7, #12]
    ch4przerwanie=1;
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, (pulse + 67000));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001338:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
    }
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000b1d 	.word	0x20000b1d
 800134c:	20000b1e 	.word	0x20000b1e
 8001350:	20000b1f 	.word	0x20000b1f
 8001354:	20000b20 	.word	0x20000b20

08001358 <HAL_GPIO_EXTI_Callback>:
//} //sprawdzic czy nie mozna usunac tego

char charAr[50];


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
	  if(GPIO_Pin == ENC_BTN_Pin) {
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001368:	d102      	bne.n	8001370 <HAL_GPIO_EXTI_Callback+0x18>
		  HAL_TIM_Base_Start_IT(&htim11);
 800136a:	4803      	ldr	r0, [pc, #12]	; (8001378 <HAL_GPIO_EXTI_Callback+0x20>)
 800136c:	f004 ffd2 	bl	8006314 <HAL_TIM_Base_Start_IT>
	  }
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000a90 	.word	0x20000a90

0800137c <isClicked>:


bool isClicked(void) {
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	if(sendToUart==1) {
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <isClicked+0x24>)
 8001382:	f993 3000 	ldrsb.w	r3, [r3]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d104      	bne.n	8001394 <isClicked+0x18>
		sendToUart=0;
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <isClicked+0x24>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
		return true;
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <isClicked+0x1a>
	}
	else {
		return false;
 8001394:	2300      	movs	r3, #0
	}
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	20000b1c 	.word	0x20000b1c

080013a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013aa:	f002 fc3b 	bl	8003c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ae:	f000 f859 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b2:	f000 fb19 	bl	80019e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80013b6:	f000 f8bd 	bl	8001534 <MX_ADC1_Init>
  MX_I2C1_Init();
 80013ba:	f000 f91b 	bl	80015f4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80013be:	f000 f947 	bl	8001650 <MX_I2C2_Init>
  MX_SPI1_Init();
 80013c2:	f000 f973 	bl	80016ac <MX_SPI1_Init>
  MX_TIM1_Init();
 80013c6:	f000 f9a7 	bl	8001718 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 80013ca:	f000 fae3 	bl	8001994 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80013ce:	f000 fa99 	bl	8001904 <MX_TIM10_Init>
  MX_TIM11_Init();
 80013d2:	f000 fabb 	bl	800194c <MX_TIM11_Init>
  MX_TIM2_Init();
 80013d6:	f000 f9f5 	bl	80017c4 <MX_TIM2_Init>
  MX_FATFS_Init();
 80013da:	f006 fc75 	bl	8007cc8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  encoderInit(&htim1);
 80013de:	481d      	ldr	r0, [pc, #116]	; (8001454 <main+0xb0>)
 80013e0:	f7ff fee6 	bl	80011b0 <encoderInit>
  ds18_init(&htim10);
 80013e4:	481c      	ldr	r0, [pc, #112]	; (8001458 <main+0xb4>)
 80013e6:	f7ff fd85 	bl	8000ef4 <ds18_init>
  huart_ds_init(&huart6);
 80013ea:	481c      	ldr	r0, [pc, #112]	; (800145c <main+0xb8>)
 80013ec:	f000 fbc6 	bl	8001b7c <huart_ds_init>
  HAL_TIM_Base_Start(&htim10);
 80013f0:	4819      	ldr	r0, [pc, #100]	; (8001458 <main+0xb4>)
 80013f2:	f004 ff35 	bl	8006260 <HAL_TIM_Base_Start>
  displayInit();
 80013f6:	f000 ff37 	bl	8002268 <displayInit>

  wire_reset();
 80013fa:	f7ff fde7 	bl	8000fcc <wire_reset>
  buff();
 80013fe:	f000 ffbd 	bl	800237c <buff>
  sd_init();
 8001402:	f001 f80b 	bl	800241c <sd_init>
  sd_totalspace();
 8001406:	f001 f869 	bl	80024dc <sd_totalspace>
  sd_freespace();
 800140a:	f001 f831 	bl	8002470 <sd_freespace>

  sd_writefile();
 800140e:	f001 f8d9 	bl	80025c4 <sd_writefile>
  sd_closefile();
 8001412:	f001 f8fb 	bl	800260c <sd_closefile>
  sd_readfile();
 8001416:	f001 f899 	bl	800254c <sd_readfile>
  sd_closefile();
 800141a:	f001 f8f7 	bl	800260c <sd_closefile>
  sd_demount();
 800141e:	f000 fff1 	bl	8002404 <sd_demount>
  bool debug=false;
 8001422:	2300      	movs	r3, #0
 8001424:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001426:	213c      	movs	r1, #60	; 0x3c
 8001428:	480a      	ldr	r0, [pc, #40]	; (8001454 <main+0xb0>)
 800142a:	f005 fa01 	bl	8006830 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800142e:	2100      	movs	r1, #0
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <main+0xbc>)
 8001432:	f005 f859 	bl	80064e8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001436:	2104      	movs	r1, #4
 8001438:	4809      	ldr	r0, [pc, #36]	; (8001460 <main+0xbc>)
 800143a:	f005 f855 	bl	80064e8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 800143e:	2108      	movs	r1, #8
 8001440:	4807      	ldr	r0, [pc, #28]	; (8001460 <main+0xbc>)
 8001442:	f005 f851 	bl	80064e8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001446:	210c      	movs	r1, #12
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <main+0xbc>)
 800144a:	f005 f84d 	bl	80064e8 <HAL_TIM_OC_Start_IT>
//	  if(value!=prev_value) {
//	  sprintf(charAr, "%d, adc1: %lu, adc2: %lu \n\r", value, valueAdc[0], valueAdc[1]);
//	  HAL_UART_Transmit(&huart6, (uint8_t *)charAr, strlen(charAr), HAL_MAX_DELAY);
//	  prev_value=value;
//	  }
	displayMenu();
 800144e:	f000 fee3 	bl	8002218 <displayMenu>
 8001452:	e7fc      	b.n	800144e <main+0xaa>
 8001454:	200009b8 	.word	0x200009b8
 8001458:	20000a48 	.word	0x20000a48
 800145c:	20000ad8 	.word	0x20000ad8
 8001460:	20000a00 	.word	0x20000a00

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b094      	sub	sp, #80	; 0x50
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	2230      	movs	r2, #48	; 0x30
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f009 fe85 	bl	800b182 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <SystemClock_Config+0xc8>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4a26      	ldr	r2, [pc, #152]	; (800152c <SystemClock_Config+0xc8>)
 8001492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001496:	6413      	str	r3, [r2, #64]	; 0x40
 8001498:	4b24      	ldr	r3, [pc, #144]	; (800152c <SystemClock_Config+0xc8>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <SystemClock_Config+0xcc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a20      	ldr	r2, [pc, #128]	; (8001530 <SystemClock_Config+0xcc>)
 80014ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <SystemClock_Config+0xcc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c0:	2302      	movs	r3, #2
 80014c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c4:	2301      	movs	r3, #1
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c8:	2310      	movs	r3, #16
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014cc:	2302      	movs	r3, #2
 80014ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014d0:	2300      	movs	r3, #0
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014d4:	2308      	movs	r3, #8
 80014d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80014d8:	2350      	movs	r3, #80	; 0x50
 80014da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014dc:	2302      	movs	r3, #2
 80014de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014e0:	2304      	movs	r3, #4
 80014e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e4:	f107 0320 	add.w	r3, r7, #32
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fddf 	bl	80050ac <HAL_RCC_OscConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014f4:	f000 fb3c 	bl	8001b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f8:	230f      	movs	r3, #15
 80014fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fc:	2302      	movs	r3, #2
 80014fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001508:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2102      	movs	r1, #2
 8001514:	4618      	mov	r0, r3
 8001516:	f004 f841 	bl	800559c <HAL_RCC_ClockConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001520:	f000 fb26 	bl	8001b70 <Error_Handler>
  }
}
 8001524:	bf00      	nop
 8001526:	3750      	adds	r7, #80	; 0x50
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	40007000 	.word	0x40007000

08001534 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800153a:	463b      	mov	r3, r7
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001548:	4a28      	ldr	r2, [pc, #160]	; (80015ec <MX_ADC1_Init+0xb8>)
 800154a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800154c:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <MX_ADC1_Init+0xb4>)
 800154e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001552:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <MX_ADC1_Init+0xb4>)
 800155c:	2201      	movs	r2, #1
 800155e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001562:	2200      	movs	r2, #0
 8001564:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001570:	2200      	movs	r2, #0
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001576:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <MX_ADC1_Init+0xbc>)
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_ADC1_Init+0xb4>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001582:	2202      	movs	r2, #2
 8001584:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001590:	2201      	movs	r2, #1
 8001592:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001594:	4814      	ldr	r0, [pc, #80]	; (80015e8 <MX_ADC1_Init+0xb4>)
 8001596:	f002 fbdb 	bl	8003d50 <HAL_ADC_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015a0:	f000 fae6 	bl	8001b70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80015ac:	2303      	movs	r3, #3
 80015ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b0:	463b      	mov	r3, r7
 80015b2:	4619      	mov	r1, r3
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <MX_ADC1_Init+0xb4>)
 80015b6:	f002 fc0f 	bl	8003dd8 <HAL_ADC_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015c0:	f000 fad6 	bl	8001b70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_ADC1_Init+0xb4>)
 80015d2:	f002 fc01 	bl	8003dd8 <HAL_ADC_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80015dc:	f000 fac8 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000870 	.word	0x20000870
 80015ec:	40012000 	.word	0x40012000
 80015f0:	0f000001 	.word	0x0f000001

080015f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_I2C1_Init+0x50>)
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <MX_I2C1_Init+0x54>)
 80015fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_I2C1_Init+0x50>)
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <MX_I2C1_Init+0x58>)
 8001602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_I2C1_Init+0x50>)
 8001612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001616:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <MX_I2C1_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_I2C1_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_I2C1_Init+0x50>)
 8001632:	f003 f8df 	bl	80047f4 <HAL_I2C_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800163c:	f000 fa98 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200008b8 	.word	0x200008b8
 8001648:	40005400 	.word	0x40005400
 800164c:	000186a0 	.word	0x000186a0

08001650 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MX_I2C2_Init+0x50>)
 8001656:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <MX_I2C2_Init+0x54>)
 8001658:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_I2C2_Init+0x50>)
 800165c:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <MX_I2C2_Init+0x58>)
 800165e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_I2C2_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_I2C2_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <MX_I2C2_Init+0x50>)
 800166e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001672:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <MX_I2C2_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MX_I2C2_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <MX_I2C2_Init+0x50>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <MX_I2C2_Init+0x50>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800168c:	4804      	ldr	r0, [pc, #16]	; (80016a0 <MX_I2C2_Init+0x50>)
 800168e:	f003 f8b1 	bl	80047f4 <HAL_I2C_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001698:	f000 fa6a 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2000090c 	.word	0x2000090c
 80016a4:	40005800 	.word	0x40005800
 80016a8:	000186a0 	.word	0x000186a0

080016ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <MX_SPI1_Init+0x64>)
 80016b2:	4a18      	ldr	r2, [pc, #96]	; (8001714 <MX_SPI1_Init+0x68>)
 80016b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <MX_SPI1_Init+0x64>)
 80016b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_SPI1_Init+0x64>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_SPI1_Init+0x64>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_SPI1_Init+0x64>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_SPI1_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_SPI1_Init+0x64>)
 80016d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_SPI1_Init+0x64>)
 80016e0:	2220      	movs	r2, #32
 80016e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <MX_SPI1_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_SPI1_Init+0x64>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <MX_SPI1_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_SPI1_Init+0x64>)
 80016f8:	220a      	movs	r2, #10
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	; (8001710 <MX_SPI1_Init+0x64>)
 80016fe:	f004 f92d 	bl	800595c <HAL_SPI_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001708:	f000 fa32 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000960 	.word	0x20000960
 8001714:	40013000 	.word	0x40013000

08001718 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	2224      	movs	r2, #36	; 0x24
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f009 fd2b 	bl	800b182 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001734:	4b21      	ldr	r3, [pc, #132]	; (80017bc <MX_TIM1_Init+0xa4>)
 8001736:	4a22      	ldr	r2, [pc, #136]	; (80017c0 <MX_TIM1_Init+0xa8>)
 8001738:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 800173a:	4b20      	ldr	r3, [pc, #128]	; (80017bc <MX_TIM1_Init+0xa4>)
 800173c:	2201      	movs	r2, #1
 800173e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <MX_TIM1_Init+0xa4>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40;
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_TIM1_Init+0xa4>)
 8001748:	2228      	movs	r2, #40	; 0x28
 800174a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MX_TIM1_Init+0xa4>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_TIM1_Init+0xa4>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <MX_TIM1_Init+0xa4>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800175e:	2301      	movs	r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001766:	2301      	movs	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800176e:	230f      	movs	r3, #15
 8001770:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001776:	2301      	movs	r3, #1
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800177e:	230f      	movs	r3, #15
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	4619      	mov	r1, r3
 8001788:	480c      	ldr	r0, [pc, #48]	; (80017bc <MX_TIM1_Init+0xa4>)
 800178a:	f004 ffab 	bl	80066e4 <HAL_TIM_Encoder_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001794:	f000 f9ec 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_TIM1_Init+0xa4>)
 80017a6:	f005 fe4b 	bl	8007440 <HAL_TIMEx_MasterConfigSynchronization>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80017b0:	f000 f9de 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	3730      	adds	r7, #48	; 0x30
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200009b8 	.word	0x200009b8
 80017c0:	40010000 	.word	0x40010000

080017c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08e      	sub	sp, #56	; 0x38
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	f107 0320 	add.w	r3, r7, #32
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
 80017f0:	615a      	str	r2, [r3, #20]
 80017f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017f4:	4b41      	ldr	r3, [pc, #260]	; (80018fc <MX_TIM2_Init+0x138>)
 80017f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12000;
 80017fc:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <MX_TIM2_Init+0x138>)
 80017fe:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001802:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001804:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <MX_TIM2_Init+0x138>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <MX_TIM2_Init+0x138>)
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001812:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <MX_TIM2_Init+0x138>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001818:	4b38      	ldr	r3, [pc, #224]	; (80018fc <MX_TIM2_Init+0x138>)
 800181a:	2200      	movs	r2, #0
 800181c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800181e:	4837      	ldr	r0, [pc, #220]	; (80018fc <MX_TIM2_Init+0x138>)
 8001820:	f004 fcce 	bl	80061c0 <HAL_TIM_Base_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800182a:	f000 f9a1 	bl	8001b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001838:	4619      	mov	r1, r3
 800183a:	4830      	ldr	r0, [pc, #192]	; (80018fc <MX_TIM2_Init+0x138>)
 800183c:	f005 fa0a 	bl	8006c54 <HAL_TIM_ConfigClockSource>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001846:	f000 f993 	bl	8001b70 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800184a:	482c      	ldr	r0, [pc, #176]	; (80018fc <MX_TIM2_Init+0x138>)
 800184c:	f004 fdf3 	bl	8006436 <HAL_TIM_OC_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001856:	f000 f98b 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001862:	f107 0320 	add.w	r3, r7, #32
 8001866:	4619      	mov	r1, r3
 8001868:	4824      	ldr	r0, [pc, #144]	; (80018fc <MX_TIM2_Init+0x138>)
 800186a:	f005 fde9 	bl	8007440 <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001874:	f000 f97c 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001878:	2330      	movs	r3, #48	; 0x30
 800187a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6659;
 800187c:	f641 2303 	movw	r3, #6659	; 0x1a03
 8001880:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2200      	movs	r2, #0
 800188e:	4619      	mov	r1, r3
 8001890:	481a      	ldr	r0, [pc, #104]	; (80018fc <MX_TIM2_Init+0x138>)
 8001892:	f005 f983 	bl	8006b9c <HAL_TIM_OC_ConfigChannel>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800189c:	f000 f968 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.Pulse = 13500;
 80018a0:	f243 43bc 	movw	r3, #13500	; 0x34bc
 80018a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2204      	movs	r2, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4813      	ldr	r0, [pc, #76]	; (80018fc <MX_TIM2_Init+0x138>)
 80018ae:	f005 f975 	bl	8006b9c <HAL_TIM_OC_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80018b8:	f000 f95a 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.Pulse = 36000;
 80018bc:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 80018c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2208      	movs	r2, #8
 80018c6:	4619      	mov	r1, r3
 80018c8:	480c      	ldr	r0, [pc, #48]	; (80018fc <MX_TIM2_Init+0x138>)
 80018ca:	f005 f967 	bl	8006b9c <HAL_TIM_OC_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 80018d4:	f000 f94c 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.Pulse = 67000;
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_TIM2_Init+0x13c>)
 80018da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	220c      	movs	r2, #12
 80018e0:	4619      	mov	r1, r3
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <MX_TIM2_Init+0x138>)
 80018e4:	f005 f95a 	bl	8006b9c <HAL_TIM_OC_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 80018ee:	f000 f93f 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	3738      	adds	r7, #56	; 0x38
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000a00 	.word	0x20000a00
 8001900:	000105b8 	.word	0x000105b8

08001904 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_TIM10_Init+0x40>)
 800190a:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <MX_TIM10_Init+0x44>)
 800190c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <MX_TIM10_Init+0x40>)
 8001910:	224f      	movs	r2, #79	; 0x4f
 8001912:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <MX_TIM10_Init+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <MX_TIM10_Init+0x40>)
 800191c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001920:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <MX_TIM10_Init+0x40>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_TIM10_Init+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_TIM10_Init+0x40>)
 8001930:	f004 fc46 	bl	80061c0 <HAL_TIM_Base_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800193a:	f000 f919 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000a48 	.word	0x20000a48
 8001948:	40014400 	.word	0x40014400

0800194c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <MX_TIM11_Init+0x40>)
 8001952:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <MX_TIM11_Init+0x44>)
 8001954:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10;
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <MX_TIM11_Init+0x40>)
 8001958:	220a      	movs	r2, #10
 800195a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <MX_TIM11_Init+0x40>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <MX_TIM11_Init+0x40>)
 8001964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001968:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <MX_TIM11_Init+0x40>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_TIM11_Init+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_TIM11_Init+0x40>)
 8001978:	f004 fc22 	bl	80061c0 <HAL_TIM_Base_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001982:	f000 f8f5 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000a90 	.word	0x20000a90
 8001990:	40014800 	.word	0x40014800

08001994 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <MX_USART6_UART_Init+0x50>)
 800199c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019ba:	220c      	movs	r2, #12
 80019bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019cc:	f005 fdba 	bl	8007544 <HAL_UART_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80019d6:	f000 f8cb 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000ad8 	.word	0x20000ad8
 80019e4:	40011400 	.word	0x40011400

080019e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b57      	ldr	r3, [pc, #348]	; (8001b60 <MX_GPIO_Init+0x178>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a56      	ldr	r2, [pc, #344]	; (8001b60 <MX_GPIO_Init+0x178>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b54      	ldr	r3, [pc, #336]	; (8001b60 <MX_GPIO_Init+0x178>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <MX_GPIO_Init+0x178>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a4f      	ldr	r2, [pc, #316]	; (8001b60 <MX_GPIO_Init+0x178>)
 8001a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <MX_GPIO_Init+0x178>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <MX_GPIO_Init+0x178>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a48      	ldr	r2, [pc, #288]	; (8001b60 <MX_GPIO_Init+0x178>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b46      	ldr	r3, [pc, #280]	; (8001b60 <MX_GPIO_Init+0x178>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <MX_GPIO_Init+0x178>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a41      	ldr	r2, [pc, #260]	; (8001b60 <MX_GPIO_Init+0x178>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <MX_GPIO_Init+0x178>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_SD_Pin|LED5_Pin, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f248 0110 	movw	r1, #32784	; 0x8010
 8001a74:	483b      	ldr	r0, [pc, #236]	; (8001b64 <MX_GPIO_Init+0x17c>)
 8001a76:	f002 fe8b 	bl	8004790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	483a      	ldr	r0, [pc, #232]	; (8001b68 <MX_GPIO_Init+0x180>)
 8001a80:	f002 fe86 	bl	8004790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|LED4_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f243 0118 	movw	r1, #12312	; 0x3018
 8001a8a:	4837      	ldr	r0, [pc, #220]	; (8001b68 <MX_GPIO_Init+0x180>)
 8001a8c:	f002 fe80 	bl	8004790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ALERT_ADS_Pin */
  GPIO_InitStruct.Pin = ALERT_ADS_Pin;
 8001a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALERT_ADS_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4831      	ldr	r0, [pc, #196]	; (8001b6c <MX_GPIO_Init+0x184>)
 8001aa8:	f002 fcd6 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_SD_Pin LED5_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin|LED5_Pin;
 8001aac:	f248 0310 	movw	r3, #32784	; 0x8010
 8001ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4827      	ldr	r0, [pc, #156]	; (8001b64 <MX_GPIO_Init+0x17c>)
 8001ac6:	f002 fcc7 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSO_DATA_Pin */
  GPIO_InitStruct.Pin = DSO_DATA_Pin;
 8001aca:	2302      	movs	r3, #2
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ace:	2311      	movs	r3, #17
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DSO_DATA_GPIO_Port, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4821      	ldr	r0, [pc, #132]	; (8001b68 <MX_GPIO_Init+0x180>)
 8001ae2:	f002 fcb9 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : DET_SD_Pin */
  GPIO_InitStruct.Pin = DET_SD_Pin;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DET_SD_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	481b      	ldr	r0, [pc, #108]	; (8001b68 <MX_GPIO_Init+0x180>)
 8001afa:	f002 fcad 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED4_Pin|LED3_Pin;
 8001afe:	f243 0318 	movw	r3, #12312	; 0x3018
 8001b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	4814      	ldr	r0, [pc, #80]	; (8001b68 <MX_GPIO_Init+0x180>)
 8001b18:	f002 fc9e 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BTN_Pin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	480d      	ldr	r0, [pc, #52]	; (8001b68 <MX_GPIO_Init+0x180>)
 8001b34:	f002 fc90 	bl	8004458 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2017      	movs	r0, #23
 8001b3e:	f002 fc54 	bl	80043ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b42:	2017      	movs	r0, #23
 8001b44:	f002 fc6d 	bl	8004422 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	2028      	movs	r0, #40	; 0x28
 8001b4e:	f002 fc4c 	bl	80043ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b52:	2028      	movs	r0, #40	; 0x28
 8001b54:	f002 fc65 	bl	8004422 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b58:	bf00      	nop
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	40020800 	.word	0x40020800

08001b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b74:	b672      	cpsid	i
}
 8001b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <Error_Handler+0x8>
	...

08001b7c <huart_ds_init>:
uint16_t encoderMax;
volatile Screen screen = MAIN_MENU; //instancja enuma Screen, aktualny stan menu
int sensorAdcExt=0;
UART_HandleTypeDef *huart6_new;

void huart_ds_init(UART_HandleTypeDef *huart6) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	huart6_new=huart6;
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <huart_ds_init+0x1c>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000b24 	.word	0x20000b24

08001b9c <backButton>:

void backButton(uint8_t back_pos, uint8_t target_screen, uint16_t encoder_pos) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	71bb      	strb	r3, [r7, #6]
 8001baa:	4613      	mov	r3, r2
 8001bac:	80bb      	strh	r3, [r7, #4]
	ssd1306_SetCursor(0, 56);
 8001bae:	2138      	movs	r1, #56	; 0x38
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f001 ffed 	bl	8003b90 <ssd1306_SetCursor>
	ssd1306_WriteString("COFNIJ", Font_6x8, entrySelected(back_pos) ? Black : White);
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fb08 	bl	80011d0 <entrySelected>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f083 0301 	eor.w	r3, r3, #1
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <backButton+0x5c>)
 8001bca:	ca06      	ldmia	r2, {r1, r2}
 8001bcc:	480b      	ldr	r0, [pc, #44]	; (8001bfc <backButton+0x60>)
 8001bce:	f001 ffb9 	bl	8003b44 <ssd1306_WriteString>
	if(entryClicked(back_pos)) {
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fb0d 	bl	80011f6 <entryClicked>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <backButton+0x52>
		encSetPos(0);
 8001be2:	2000      	movs	r0, #0
 8001be4:	f7ff fac4 	bl	8001170 <encSetPos>
		screen = target_screen;
 8001be8:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <backButton+0x64>)
 8001bea:	79bb      	ldrb	r3, [r7, #6]
 8001bec:	7013      	strb	r3, [r2, #0]
	}
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000648 	.word	0x20000648
 8001bfc:	0800d358 	.word	0x0800d358
 8001c00:	20000b21 	.word	0x20000b21

08001c04 <listAllItemsFromMenu>:

void listAllItemsFromMenu(Menu *menu) {
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < menu->entry_count; ++i) { //-> bo entry_count na stercie cpu jest (heap)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e02e      	b.n	8001c70 <listAllItemsFromMenu+0x6c>
			ssd1306_SetCursor(0, i*8);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f001 ffb7 	bl	8003b90 <ssd1306_SetCursor>
			if(entryClicked(i)) {
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fae5 	bl	80011f6 <entryClicked>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d007      	beq.n	8001c42 <listAllItemsFromMenu+0x3e>
				screen = menu->entries[i].entry;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	3201      	adds	r2, #1
 8001c38:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <listAllItemsFromMenu+0x80>)
 8001c3e:	701a      	strb	r2, [r3, #0]
				break;
 8001c40:	e01c      	b.n	8001c7c <listAllItemsFromMenu+0x78>
			}
			ssd1306_WriteString(menu->entries[i].entry_string, Font_6x8, entrySelected(i) ? Black : White);
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3301      	adds	r3, #1
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	685c      	ldr	r4, [r3, #4]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	b21b      	sxth	r3, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fabc 	bl	80011d0 <entrySelected>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f083 0301 	eor.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <listAllItemsFromMenu+0x84>)
 8001c62:	ca06      	ldmia	r2, {r1, r2}
 8001c64:	4620      	mov	r0, r4
 8001c66:	f001 ff6d 	bl	8003b44 <ssd1306_WriteString>
	for (int i = 0; i < menu->entry_count; ++i) { //-> bo entry_count na stercie cpu jest (heap)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	dbcb      	blt.n	8001c12 <listAllItemsFromMenu+0xe>
		  }
}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd90      	pop	{r4, r7, pc}
 8001c84:	20000b21 	.word	0x20000b21
 8001c88:	20000648 	.word	0x20000648

08001c8c <drawMainMenu>:

void drawMainMenu(Menu *menu) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	encSetRange(0, 39);
 8001c94:	2127      	movs	r1, #39	; 0x27
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7ff fa50 	bl	800113c <encSetRange>
	listAllItemsFromMenu(menu);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ffb1 	bl	8001c04 <listAllItemsFromMenu>
	uint32_t encVal = encoderGet();
 8001ca2:	f7ff fa77 	bl	8001194 <encoderGet>
 8001ca6:	60f8      	str	r0, [r7, #12]
	char charArVal[4];
	sprintf(charArVal, "%lu", encVal);
 8001ca8:	f107 0308 	add.w	r3, r7, #8
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4909      	ldr	r1, [pc, #36]	; (8001cd4 <drawMainMenu+0x48>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f009 f9e9 	bl	800b088 <siprintf>
	ssd1306_SetCursor(0, 30);
 8001cb6:	211e      	movs	r1, #30
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f001 ff69 	bl	8003b90 <ssd1306_SetCursor>
	ssd1306_WriteString(charArVal, Font_16x24, White);
 8001cbe:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <drawMainMenu+0x4c>)
 8001cc0:	f107 0008 	add.w	r0, r7, #8
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	ca06      	ldmia	r2, {r1, r2}
 8001cc8:	f001 ff3c 	bl	8003b44 <ssd1306_WriteString>

}
 8001ccc:	bf00      	nop
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	0800d360 	.word	0x0800d360
 8001cd8:	20000660 	.word	0x20000660

08001cdc <drawSensorConfig>:

void drawSensorConfig(Menu *menu) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	encSetRange(0, 3);
 8001ce4:	2103      	movs	r1, #3
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff fa28 	bl	800113c <encSetRange>
	listAllItemsFromMenu(menu);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff89 	bl	8001c04 <listAllItemsFromMenu>
	backButton(3, MAIN_MENU, 1);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2003      	movs	r0, #3
 8001cf8:	f7ff ff50 	bl	8001b9c <backButton>
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <drawSdConfig>:

void drawSdConfig(Menu *menu) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	encSetRange(0, 1);
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7ff fa14 	bl	800113c <encSetRange>

	listAllItemsFromMenu(menu);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff75 	bl	8001c04 <listAllItemsFromMenu>
	backButton(0, MAIN_MENU, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7ff ff3c 	bl	8001b9c <backButton>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <drawOnoffMeasure>:

void drawOnoffMeasure(Menu *menu) {
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	//listAllItemsFromMenu(menu);
	encSetRange(0, 1);
 8001d34:	2101      	movs	r1, #1
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff fa00 	bl	800113c <encSetRange>
	float temp = ds18_get_temp();
 8001d3c:	f7ff f8ea 	bl	8000f14 <ds18_get_temp>
 8001d40:	ed87 0a05 	vstr	s0, [r7, #20]
	char tempStr[10];
	ssd1306_SetCursor(0, 0);
 8001d44:	2100      	movs	r1, #0
 8001d46:	2000      	movs	r0, #0
 8001d48:	f001 ff22 	bl	8003b90 <ssd1306_SetCursor>
	ssd1306_WriteString("ds18b20_1 value:", Font_7x10, White);
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <drawOnoffMeasure+0x88>)
 8001d4e:	2301      	movs	r3, #1
 8001d50:	ca06      	ldmia	r2, {r1, r2}
 8001d52:	4819      	ldr	r0, [pc, #100]	; (8001db8 <drawOnoffMeasure+0x8c>)
 8001d54:	f001 fef6 	bl	8003b44 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 12);
 8001d58:	210c      	movs	r1, #12
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f001 ff18 	bl	8003b90 <ssd1306_SetCursor>
	sprintf(tempStr, "%f \n\r", temp);
 8001d60:	6978      	ldr	r0, [r7, #20]
 8001d62:	f7fe fbf9 	bl	8000558 <__aeabi_f2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	f107 0008 	add.w	r0, r7, #8
 8001d6e:	4913      	ldr	r1, [pc, #76]	; (8001dbc <drawOnoffMeasure+0x90>)
 8001d70:	f009 f98a 	bl	800b088 <siprintf>
	ssd1306_WriteString(tempStr, Font_16x24, White);
 8001d74:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <drawOnoffMeasure+0x94>)
 8001d76:	f107 0008 	add.w	r0, r7, #8
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	ca06      	ldmia	r2, {r1, r2}
 8001d7e:	f001 fee1 	bl	8003b44 <ssd1306_WriteString>
	HAL_UART_Transmit(huart6_new, tempStr, strlen(tempStr), HAL_MAX_DELAY);
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <drawOnoffMeasure+0x98>)
 8001d84:	681c      	ldr	r4, [r3, #0]
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fa78 	bl	8000280 <strlen>
 8001d90:	4603      	mov	r3, r0
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	f107 0108 	add.w	r1, r7, #8
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f005 fc1e 	bl	80075de <HAL_UART_Transmit>
	backButton(1, MAIN_MENU, 1);
 8001da2:	2201      	movs	r2, #1
 8001da4:	2100      	movs	r1, #0
 8001da6:	2001      	movs	r0, #1
 8001da8:	f7ff fef8 	bl	8001b9c <backButton>
}
 8001dac:	bf00      	nop
 8001dae:	371c      	adds	r7, #28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd90      	pop	{r4, r7, pc}
 8001db4:	20000650 	.word	0x20000650
 8001db8:	0800d364 	.word	0x0800d364
 8001dbc:	0800d378 	.word	0x0800d378
 8001dc0:	20000660 	.word	0x20000660
 8001dc4:	20000b24 	.word	0x20000b24

08001dc8 <drawSensorConfigAdcExt>:


void drawSensorConfigAdcExt(Menu *menu) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	listAllItemsFromMenu(menu);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ff17 	bl	8001c04 <listAllItemsFromMenu>
	//ustawienie wartosci enuma globalnego na nastepne menu czyli np SENSOR_CONFIG_ADC_EXT1 lub EXT2 itp.
//	if(enkoder==wcisniety) {
//		sensorAdcExt=wartosc z enkodera
//		screen = SENSOR_CONFIG_ADC_EXT1;
//	}
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <drawSensorConfigAdcInt>:
void drawSensorConfigAdcInt(Menu *menu) {
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
	listAllItemsFromMenu(menu);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ff0c 	bl	8001c04 <listAllItemsFromMenu>
	backButton(1, MAIN_MENU, 1);
 8001dec:	2201      	movs	r2, #1
 8001dee:	2100      	movs	r1, #0
 8001df0:	2001      	movs	r0, #1
 8001df2:	f7ff fed3 	bl	8001b9c <backButton>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <drawSensorConfigDS18>:
void drawSensorConfigDS18(Menu *menu) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
	listAllItemsFromMenu(menu);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff fefc 	bl	8001c04 <listAllItemsFromMenu>
	backButton(1, MAIN_MENU, 1);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2001      	movs	r0, #1
 8001e12:	f7ff fec3 	bl	8001b9c <backButton>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <drawSensorConfigGeneric>:

int samplingRates[] = {1,2,3,4};
int sampling1;
int samplingIndex = 0;

void drawSensorConfigGeneric(Menu *menu) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0ba      	sub	sp, #232	; 0xe8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	encSetRange(0, 2);
 8001e28:	2102      	movs	r1, #2
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff f986 	bl	800113c <encSetRange>
	ssd1306_SetCursor(0, 0);
 8001e30:	2100      	movs	r1, #0
 8001e32:	2000      	movs	r0, #0
 8001e34:	f001 feac 	bl	8003b90 <ssd1306_SetCursor>
	if(screen==SENSOR_CONFIG_ADC_EXT0) {
 8001e38:	4ba9      	ldr	r3, [pc, #676]	; (80020e0 <drawSensorConfigGeneric+0x2c0>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d134      	bne.n	8001eac <drawSensorConfigGeneric+0x8c>
		ssd1306_WriteString(sensors[0].name, Font_11x18, White);
 8001e42:	4aa8      	ldr	r2, [pc, #672]	; (80020e4 <drawSensorConfigGeneric+0x2c4>)
 8001e44:	2301      	movs	r3, #1
 8001e46:	ca06      	ldmia	r2, {r1, r2}
 8001e48:	48a7      	ldr	r0, [pc, #668]	; (80020e8 <drawSensorConfigGeneric+0x2c8>)
 8001e4a:	f001 fe7b 	bl	8003b44 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 8001e4e:	2112      	movs	r1, #18
 8001e50:	2000      	movs	r0, #0
 8001e52:	f001 fe9d 	bl	8003b90 <ssd1306_SetCursor>
		char isEnabledStr[20];
		sprintf(isEnabledStr, "enabled: %s", sensors[0].isEnabled ? "true" : "false");
 8001e56:	4ba4      	ldr	r3, [pc, #656]	; (80020e8 <drawSensorConfigGeneric+0x2c8>)
 8001e58:	7d1b      	ldrb	r3, [r3, #20]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <drawSensorConfigGeneric+0x42>
 8001e5e:	4aa3      	ldr	r2, [pc, #652]	; (80020ec <drawSensorConfigGeneric+0x2cc>)
 8001e60:	e000      	b.n	8001e64 <drawSensorConfigGeneric+0x44>
 8001e62:	4aa3      	ldr	r2, [pc, #652]	; (80020f0 <drawSensorConfigGeneric+0x2d0>)
 8001e64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e68:	49a2      	ldr	r1, [pc, #648]	; (80020f4 <drawSensorConfigGeneric+0x2d4>)
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f009 f90c 	bl	800b088 <siprintf>
		ssd1306_WriteString(isEnabledStr, Font_7x10, entrySelected(0) ? Black : White);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff f9ad 	bl	80011d0 <entrySelected>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f083 0301 	eor.w	r3, r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4a9e      	ldr	r2, [pc, #632]	; (80020f8 <drawSensorConfigGeneric+0x2d8>)
 8001e80:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8001e84:	ca06      	ldmia	r2, {r1, r2}
 8001e86:	f001 fe5d 	bl	8003b44 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 28);
 8001e8a:	211c      	movs	r1, #28
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f001 fe7f 	bl	8003b90 <ssd1306_SetCursor>

		ssd1306_WriteString("period: NULL", Font_7x10, entrySelected(1) ? Black : White);
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7ff f99c 	bl	80011d0 <entrySelected>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f083 0301 	eor.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	4a95      	ldr	r2, [pc, #596]	; (80020f8 <drawSensorConfigGeneric+0x2d8>)
 8001ea2:	ca06      	ldmia	r2, {r1, r2}
 8001ea4:	4895      	ldr	r0, [pc, #596]	; (80020fc <drawSensorConfigGeneric+0x2dc>)
 8001ea6:	f001 fe4d 	bl	8003b44 <ssd1306_WriteString>
 8001eaa:	e191      	b.n	80021d0 <drawSensorConfigGeneric+0x3b0>
	}
	else if(screen==SENSOR_CONFIG_ADC_EXT1) {
 8001eac:	4b8c      	ldr	r3, [pc, #560]	; (80020e0 <drawSensorConfigGeneric+0x2c0>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b09      	cmp	r3, #9
 8001eb4:	d11f      	bne.n	8001ef6 <drawSensorConfigGeneric+0xd6>
		ssd1306_WriteString(sensors[1].name, Font_11x18, White);
 8001eb6:	4a8b      	ldr	r2, [pc, #556]	; (80020e4 <drawSensorConfigGeneric+0x2c4>)
 8001eb8:	2301      	movs	r3, #1
 8001eba:	ca06      	ldmia	r2, {r1, r2}
 8001ebc:	4890      	ldr	r0, [pc, #576]	; (8002100 <drawSensorConfigGeneric+0x2e0>)
 8001ebe:	f001 fe41 	bl	8003b44 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 8001ec2:	2112      	movs	r1, #18
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f001 fe63 	bl	8003b90 <ssd1306_SetCursor>
		char isEnabledStr[20];
		sprintf(isEnabledStr, "enabled: %s", sensors[1].isEnabled ? "true" : "false");
 8001eca:	4b87      	ldr	r3, [pc, #540]	; (80020e8 <drawSensorConfigGeneric+0x2c8>)
 8001ecc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <drawSensorConfigGeneric+0xb8>
 8001ed4:	4a85      	ldr	r2, [pc, #532]	; (80020ec <drawSensorConfigGeneric+0x2cc>)
 8001ed6:	e000      	b.n	8001eda <drawSensorConfigGeneric+0xba>
 8001ed8:	4a85      	ldr	r2, [pc, #532]	; (80020f0 <drawSensorConfigGeneric+0x2d0>)
 8001eda:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ede:	4985      	ldr	r1, [pc, #532]	; (80020f4 <drawSensorConfigGeneric+0x2d4>)
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f009 f8d1 	bl	800b088 <siprintf>
		ssd1306_WriteString(isEnabledStr, Font_7x10, White);
 8001ee6:	4a84      	ldr	r2, [pc, #528]	; (80020f8 <drawSensorConfigGeneric+0x2d8>)
 8001ee8:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8001eec:	2301      	movs	r3, #1
 8001eee:	ca06      	ldmia	r2, {r1, r2}
 8001ef0:	f001 fe28 	bl	8003b44 <ssd1306_WriteString>
 8001ef4:	e16c      	b.n	80021d0 <drawSensorConfigGeneric+0x3b0>

	}
	else if(screen==SENSOR_CONFIG_ADC_EXT2) {
 8001ef6:	4b7a      	ldr	r3, [pc, #488]	; (80020e0 <drawSensorConfigGeneric+0x2c0>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b0a      	cmp	r3, #10
 8001efe:	d11f      	bne.n	8001f40 <drawSensorConfigGeneric+0x120>
		ssd1306_WriteString(sensors[2].name, Font_11x18, White);
 8001f00:	4a78      	ldr	r2, [pc, #480]	; (80020e4 <drawSensorConfigGeneric+0x2c4>)
 8001f02:	2301      	movs	r3, #1
 8001f04:	ca06      	ldmia	r2, {r1, r2}
 8001f06:	487f      	ldr	r0, [pc, #508]	; (8002104 <drawSensorConfigGeneric+0x2e4>)
 8001f08:	f001 fe1c 	bl	8003b44 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 8001f0c:	2112      	movs	r1, #18
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f001 fe3e 	bl	8003b90 <ssd1306_SetCursor>
		char isEnabledStr[20];
		sprintf(isEnabledStr, "enabled: %s", sensors[2].isEnabled ? "true" : "false");
 8001f14:	4b74      	ldr	r3, [pc, #464]	; (80020e8 <drawSensorConfigGeneric+0x2c8>)
 8001f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <drawSensorConfigGeneric+0x102>
 8001f1e:	4a73      	ldr	r2, [pc, #460]	; (80020ec <drawSensorConfigGeneric+0x2cc>)
 8001f20:	e000      	b.n	8001f24 <drawSensorConfigGeneric+0x104>
 8001f22:	4a73      	ldr	r2, [pc, #460]	; (80020f0 <drawSensorConfigGeneric+0x2d0>)
 8001f24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f28:	4972      	ldr	r1, [pc, #456]	; (80020f4 <drawSensorConfigGeneric+0x2d4>)
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f009 f8ac 	bl	800b088 <siprintf>
		ssd1306_WriteString(isEnabledStr, Font_7x10, White);
 8001f30:	4a71      	ldr	r2, [pc, #452]	; (80020f8 <drawSensorConfigGeneric+0x2d8>)
 8001f32:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001f36:	2301      	movs	r3, #1
 8001f38:	ca06      	ldmia	r2, {r1, r2}
 8001f3a:	f001 fe03 	bl	8003b44 <ssd1306_WriteString>
 8001f3e:	e147      	b.n	80021d0 <drawSensorConfigGeneric+0x3b0>
	}
	else if(screen==SENSOR_CONFIG_ADC_EXT3) {
 8001f40:	4b67      	ldr	r3, [pc, #412]	; (80020e0 <drawSensorConfigGeneric+0x2c0>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b0b      	cmp	r3, #11
 8001f48:	d11f      	bne.n	8001f8a <drawSensorConfigGeneric+0x16a>
		ssd1306_WriteString(sensors[3].name, Font_11x18, White);
 8001f4a:	4a66      	ldr	r2, [pc, #408]	; (80020e4 <drawSensorConfigGeneric+0x2c4>)
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	ca06      	ldmia	r2, {r1, r2}
 8001f50:	486d      	ldr	r0, [pc, #436]	; (8002108 <drawSensorConfigGeneric+0x2e8>)
 8001f52:	f001 fdf7 	bl	8003b44 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 8001f56:	2112      	movs	r1, #18
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f001 fe19 	bl	8003b90 <ssd1306_SetCursor>
		char isEnabledStr[20];
		sprintf(isEnabledStr, "enabled: %s", sensors[3].isEnabled ? "true" : "false");
 8001f5e:	4b62      	ldr	r3, [pc, #392]	; (80020e8 <drawSensorConfigGeneric+0x2c8>)
 8001f60:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <drawSensorConfigGeneric+0x14c>
 8001f68:	4a60      	ldr	r2, [pc, #384]	; (80020ec <drawSensorConfigGeneric+0x2cc>)
 8001f6a:	e000      	b.n	8001f6e <drawSensorConfigGeneric+0x14e>
 8001f6c:	4a60      	ldr	r2, [pc, #384]	; (80020f0 <drawSensorConfigGeneric+0x2d0>)
 8001f6e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f72:	4960      	ldr	r1, [pc, #384]	; (80020f4 <drawSensorConfigGeneric+0x2d4>)
 8001f74:	4618      	mov	r0, r3
 8001f76:	f009 f887 	bl	800b088 <siprintf>
		ssd1306_WriteString(isEnabledStr, Font_7x10, White);
 8001f7a:	4a5f      	ldr	r2, [pc, #380]	; (80020f8 <drawSensorConfigGeneric+0x2d8>)
 8001f7c:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001f80:	2301      	movs	r3, #1
 8001f82:	ca06      	ldmia	r2, {r1, r2}
 8001f84:	f001 fdde 	bl	8003b44 <ssd1306_WriteString>
 8001f88:	e122      	b.n	80021d0 <drawSensorConfigGeneric+0x3b0>
	}
	else if(screen==SENSOR_CONFIG_ADC_INT0) {
 8001f8a:	4b55      	ldr	r3, [pc, #340]	; (80020e0 <drawSensorConfigGeneric+0x2c0>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b0c      	cmp	r3, #12
 8001f92:	d11f      	bne.n	8001fd4 <drawSensorConfigGeneric+0x1b4>
		ssd1306_WriteString(sensors[4].name, Font_11x18, White);
 8001f94:	4a53      	ldr	r2, [pc, #332]	; (80020e4 <drawSensorConfigGeneric+0x2c4>)
 8001f96:	2301      	movs	r3, #1
 8001f98:	ca06      	ldmia	r2, {r1, r2}
 8001f9a:	485c      	ldr	r0, [pc, #368]	; (800210c <drawSensorConfigGeneric+0x2ec>)
 8001f9c:	f001 fdd2 	bl	8003b44 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 8001fa0:	2112      	movs	r1, #18
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f001 fdf4 	bl	8003b90 <ssd1306_SetCursor>
		char isEnabledStr[20];
		sprintf(isEnabledStr, "enabled: %s", sensors[4].isEnabled ? "true" : "false");
 8001fa8:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <drawSensorConfigGeneric+0x2c8>)
 8001faa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <drawSensorConfigGeneric+0x196>
 8001fb2:	4a4e      	ldr	r2, [pc, #312]	; (80020ec <drawSensorConfigGeneric+0x2cc>)
 8001fb4:	e000      	b.n	8001fb8 <drawSensorConfigGeneric+0x198>
 8001fb6:	4a4e      	ldr	r2, [pc, #312]	; (80020f0 <drawSensorConfigGeneric+0x2d0>)
 8001fb8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001fbc:	494d      	ldr	r1, [pc, #308]	; (80020f4 <drawSensorConfigGeneric+0x2d4>)
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f009 f862 	bl	800b088 <siprintf>
		ssd1306_WriteString(isEnabledStr, Font_7x10, White);
 8001fc4:	4a4c      	ldr	r2, [pc, #304]	; (80020f8 <drawSensorConfigGeneric+0x2d8>)
 8001fc6:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001fca:	2301      	movs	r3, #1
 8001fcc:	ca06      	ldmia	r2, {r1, r2}
 8001fce:	f001 fdb9 	bl	8003b44 <ssd1306_WriteString>
 8001fd2:	e0fd      	b.n	80021d0 <drawSensorConfigGeneric+0x3b0>
	}
	else if(screen==SENSOR_CONFIG_ADC_INT1) {
 8001fd4:	4b42      	ldr	r3, [pc, #264]	; (80020e0 <drawSensorConfigGeneric+0x2c0>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b0d      	cmp	r3, #13
 8001fdc:	d11f      	bne.n	800201e <drawSensorConfigGeneric+0x1fe>
		ssd1306_WriteString(sensors[5].name, Font_11x18, White);
 8001fde:	4a41      	ldr	r2, [pc, #260]	; (80020e4 <drawSensorConfigGeneric+0x2c4>)
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	ca06      	ldmia	r2, {r1, r2}
 8001fe4:	484a      	ldr	r0, [pc, #296]	; (8002110 <drawSensorConfigGeneric+0x2f0>)
 8001fe6:	f001 fdad 	bl	8003b44 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 8001fea:	2112      	movs	r1, #18
 8001fec:	2000      	movs	r0, #0
 8001fee:	f001 fdcf 	bl	8003b90 <ssd1306_SetCursor>
		char isEnabledStr[20];
		sprintf(isEnabledStr, "enabled: %s", sensors[5].isEnabled ? "true" : "false");
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	; (80020e8 <drawSensorConfigGeneric+0x2c8>)
 8001ff4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <drawSensorConfigGeneric+0x1e0>
 8001ffc:	4a3b      	ldr	r2, [pc, #236]	; (80020ec <drawSensorConfigGeneric+0x2cc>)
 8001ffe:	e000      	b.n	8002002 <drawSensorConfigGeneric+0x1e2>
 8002000:	4a3b      	ldr	r2, [pc, #236]	; (80020f0 <drawSensorConfigGeneric+0x2d0>)
 8002002:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002006:	493b      	ldr	r1, [pc, #236]	; (80020f4 <drawSensorConfigGeneric+0x2d4>)
 8002008:	4618      	mov	r0, r3
 800200a:	f009 f83d 	bl	800b088 <siprintf>
		ssd1306_WriteString(isEnabledStr, Font_7x10, White);
 800200e:	4a3a      	ldr	r2, [pc, #232]	; (80020f8 <drawSensorConfigGeneric+0x2d8>)
 8002010:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8002014:	2301      	movs	r3, #1
 8002016:	ca06      	ldmia	r2, {r1, r2}
 8002018:	f001 fd94 	bl	8003b44 <ssd1306_WriteString>
 800201c:	e0d8      	b.n	80021d0 <drawSensorConfigGeneric+0x3b0>
	}
	else if(screen==SENSOR_CONFIG_ADC_INT2) {
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <drawSensorConfigGeneric+0x2c0>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b0e      	cmp	r3, #14
 8002026:	d11f      	bne.n	8002068 <drawSensorConfigGeneric+0x248>
		ssd1306_WriteString(sensors[6].name, Font_11x18, White);
 8002028:	4a2e      	ldr	r2, [pc, #184]	; (80020e4 <drawSensorConfigGeneric+0x2c4>)
 800202a:	2301      	movs	r3, #1
 800202c:	ca06      	ldmia	r2, {r1, r2}
 800202e:	4839      	ldr	r0, [pc, #228]	; (8002114 <drawSensorConfigGeneric+0x2f4>)
 8002030:	f001 fd88 	bl	8003b44 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 8002034:	2112      	movs	r1, #18
 8002036:	2000      	movs	r0, #0
 8002038:	f001 fdaa 	bl	8003b90 <ssd1306_SetCursor>
		char isEnabledStr[20];
		sprintf(isEnabledStr, "enabled: %s", sensors[6].isEnabled ? "true" : "false");
 800203c:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <drawSensorConfigGeneric+0x2c8>)
 800203e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <drawSensorConfigGeneric+0x22a>
 8002046:	4a29      	ldr	r2, [pc, #164]	; (80020ec <drawSensorConfigGeneric+0x2cc>)
 8002048:	e000      	b.n	800204c <drawSensorConfigGeneric+0x22c>
 800204a:	4a29      	ldr	r2, [pc, #164]	; (80020f0 <drawSensorConfigGeneric+0x2d0>)
 800204c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002050:	4928      	ldr	r1, [pc, #160]	; (80020f4 <drawSensorConfigGeneric+0x2d4>)
 8002052:	4618      	mov	r0, r3
 8002054:	f009 f818 	bl	800b088 <siprintf>
		ssd1306_WriteString(isEnabledStr, Font_7x10, White);
 8002058:	4a27      	ldr	r2, [pc, #156]	; (80020f8 <drawSensorConfigGeneric+0x2d8>)
 800205a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800205e:	2301      	movs	r3, #1
 8002060:	ca06      	ldmia	r2, {r1, r2}
 8002062:	f001 fd6f 	bl	8003b44 <ssd1306_WriteString>
 8002066:	e0b3      	b.n	80021d0 <drawSensorConfigGeneric+0x3b0>
	}
	else if(screen==SENSOR_CONFIG_ADC_INT3) {
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <drawSensorConfigGeneric+0x2c0>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b0f      	cmp	r3, #15
 8002070:	d11f      	bne.n	80020b2 <drawSensorConfigGeneric+0x292>
		ssd1306_WriteString(sensors[7].name, Font_11x18, White);
 8002072:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <drawSensorConfigGeneric+0x2c4>)
 8002074:	2301      	movs	r3, #1
 8002076:	ca06      	ldmia	r2, {r1, r2}
 8002078:	4827      	ldr	r0, [pc, #156]	; (8002118 <drawSensorConfigGeneric+0x2f8>)
 800207a:	f001 fd63 	bl	8003b44 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 800207e:	2112      	movs	r1, #18
 8002080:	2000      	movs	r0, #0
 8002082:	f001 fd85 	bl	8003b90 <ssd1306_SetCursor>
		char isEnabledStr[20];
		sprintf(isEnabledStr, "enabled: %s", sensors[7].isEnabled ? "true" : "false");
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <drawSensorConfigGeneric+0x2c8>)
 8002088:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <drawSensorConfigGeneric+0x274>
 8002090:	4a16      	ldr	r2, [pc, #88]	; (80020ec <drawSensorConfigGeneric+0x2cc>)
 8002092:	e000      	b.n	8002096 <drawSensorConfigGeneric+0x276>
 8002094:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <drawSensorConfigGeneric+0x2d0>)
 8002096:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800209a:	4916      	ldr	r1, [pc, #88]	; (80020f4 <drawSensorConfigGeneric+0x2d4>)
 800209c:	4618      	mov	r0, r3
 800209e:	f008 fff3 	bl	800b088 <siprintf>
		ssd1306_WriteString(isEnabledStr, Font_7x10, White);
 80020a2:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <drawSensorConfigGeneric+0x2d8>)
 80020a4:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80020a8:	2301      	movs	r3, #1
 80020aa:	ca06      	ldmia	r2, {r1, r2}
 80020ac:	f001 fd4a 	bl	8003b44 <ssd1306_WriteString>
 80020b0:	e08e      	b.n	80021d0 <drawSensorConfigGeneric+0x3b0>
	}
	else if(screen==SENSOR_CONFIG_DS18_1) {
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <drawSensorConfigGeneric+0x2c0>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	d140      	bne.n	800213e <drawSensorConfigGeneric+0x31e>
		ssd1306_WriteString(sensors[8].name, Font_11x18, White);
 80020bc:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <drawSensorConfigGeneric+0x2c4>)
 80020be:	2301      	movs	r3, #1
 80020c0:	ca06      	ldmia	r2, {r1, r2}
 80020c2:	4816      	ldr	r0, [pc, #88]	; (800211c <drawSensorConfigGeneric+0x2fc>)
 80020c4:	f001 fd3e 	bl	8003b44 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 80020c8:	2112      	movs	r1, #18
 80020ca:	2000      	movs	r0, #0
 80020cc:	f001 fd60 	bl	8003b90 <ssd1306_SetCursor>
		char isEnabledStr[20];
		sprintf(isEnabledStr, "enabled: %s", sensors[8].isEnabled ? "true" : "false");
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <drawSensorConfigGeneric+0x2c8>)
 80020d2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d022      	beq.n	8002120 <drawSensorConfigGeneric+0x300>
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <drawSensorConfigGeneric+0x2cc>)
 80020dc:	e021      	b.n	8002122 <drawSensorConfigGeneric+0x302>
 80020de:	bf00      	nop
 80020e0:	20000b21 	.word	0x20000b21
 80020e4:	20000658 	.word	0x20000658
 80020e8:	20000000 	.word	0x20000000
 80020ec:	0800d380 	.word	0x0800d380
 80020f0:	0800d388 	.word	0x0800d388
 80020f4:	0800d390 	.word	0x0800d390
 80020f8:	20000650 	.word	0x20000650
 80020fc:	0800d39c 	.word	0x0800d39c
 8002100:	20000015 	.word	0x20000015
 8002104:	2000002a 	.word	0x2000002a
 8002108:	2000003f 	.word	0x2000003f
 800210c:	20000054 	.word	0x20000054
 8002110:	20000069 	.word	0x20000069
 8002114:	2000007e 	.word	0x2000007e
 8002118:	20000093 	.word	0x20000093
 800211c:	200000a8 	.word	0x200000a8
 8002120:	4a33      	ldr	r2, [pc, #204]	; (80021f0 <drawSensorConfigGeneric+0x3d0>)
 8002122:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002126:	4933      	ldr	r1, [pc, #204]	; (80021f4 <drawSensorConfigGeneric+0x3d4>)
 8002128:	4618      	mov	r0, r3
 800212a:	f008 ffad 	bl	800b088 <siprintf>
		ssd1306_WriteString(isEnabledStr, Font_7x10, White);
 800212e:	4a32      	ldr	r2, [pc, #200]	; (80021f8 <drawSensorConfigGeneric+0x3d8>)
 8002130:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002134:	2301      	movs	r3, #1
 8002136:	ca06      	ldmia	r2, {r1, r2}
 8002138:	f001 fd04 	bl	8003b44 <ssd1306_WriteString>
 800213c:	e048      	b.n	80021d0 <drawSensorConfigGeneric+0x3b0>
	}
	else if(screen==SENSOR_CONFIG_DS18_2) {
 800213e:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <drawSensorConfigGeneric+0x3dc>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b11      	cmp	r3, #17
 8002146:	d11f      	bne.n	8002188 <drawSensorConfigGeneric+0x368>
		ssd1306_WriteString(sensors[9].name, Font_11x18, White);
 8002148:	4a2d      	ldr	r2, [pc, #180]	; (8002200 <drawSensorConfigGeneric+0x3e0>)
 800214a:	2301      	movs	r3, #1
 800214c:	ca06      	ldmia	r2, {r1, r2}
 800214e:	482d      	ldr	r0, [pc, #180]	; (8002204 <drawSensorConfigGeneric+0x3e4>)
 8002150:	f001 fcf8 	bl	8003b44 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 8002154:	2112      	movs	r1, #18
 8002156:	2000      	movs	r0, #0
 8002158:	f001 fd1a 	bl	8003b90 <ssd1306_SetCursor>
		char isEnabledStr[20];
		sprintf(isEnabledStr, "enabled: %s", sensors[9].isEnabled ? "true" : "false");
 800215c:	4b2a      	ldr	r3, [pc, #168]	; (8002208 <drawSensorConfigGeneric+0x3e8>)
 800215e:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <drawSensorConfigGeneric+0x34a>
 8002166:	4a29      	ldr	r2, [pc, #164]	; (800220c <drawSensorConfigGeneric+0x3ec>)
 8002168:	e000      	b.n	800216c <drawSensorConfigGeneric+0x34c>
 800216a:	4a21      	ldr	r2, [pc, #132]	; (80021f0 <drawSensorConfigGeneric+0x3d0>)
 800216c:	f107 0320 	add.w	r3, r7, #32
 8002170:	4920      	ldr	r1, [pc, #128]	; (80021f4 <drawSensorConfigGeneric+0x3d4>)
 8002172:	4618      	mov	r0, r3
 8002174:	f008 ff88 	bl	800b088 <siprintf>
		ssd1306_WriteString(isEnabledStr, Font_7x10, White);
 8002178:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <drawSensorConfigGeneric+0x3d8>)
 800217a:	f107 0020 	add.w	r0, r7, #32
 800217e:	2301      	movs	r3, #1
 8002180:	ca06      	ldmia	r2, {r1, r2}
 8002182:	f001 fcdf 	bl	8003b44 <ssd1306_WriteString>
 8002186:	e023      	b.n	80021d0 <drawSensorConfigGeneric+0x3b0>
	}
	else if(screen==SENSOR_CONFIG_DS18_3) {
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <drawSensorConfigGeneric+0x3dc>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b12      	cmp	r3, #18
 8002190:	d11e      	bne.n	80021d0 <drawSensorConfigGeneric+0x3b0>
		ssd1306_WriteString(sensors[10].name, Font_11x18, White);
 8002192:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <drawSensorConfigGeneric+0x3e0>)
 8002194:	2301      	movs	r3, #1
 8002196:	ca06      	ldmia	r2, {r1, r2}
 8002198:	481d      	ldr	r0, [pc, #116]	; (8002210 <drawSensorConfigGeneric+0x3f0>)
 800219a:	f001 fcd3 	bl	8003b44 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 800219e:	2112      	movs	r1, #18
 80021a0:	2000      	movs	r0, #0
 80021a2:	f001 fcf5 	bl	8003b90 <ssd1306_SetCursor>
		char isEnabledStr[20];
		sprintf(isEnabledStr, "enabled: %s", sensors[10].isEnabled ? "true" : "false");
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <drawSensorConfigGeneric+0x3e8>)
 80021a8:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <drawSensorConfigGeneric+0x394>
 80021b0:	4a16      	ldr	r2, [pc, #88]	; (800220c <drawSensorConfigGeneric+0x3ec>)
 80021b2:	e000      	b.n	80021b6 <drawSensorConfigGeneric+0x396>
 80021b4:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <drawSensorConfigGeneric+0x3d0>)
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	490e      	ldr	r1, [pc, #56]	; (80021f4 <drawSensorConfigGeneric+0x3d4>)
 80021bc:	4618      	mov	r0, r3
 80021be:	f008 ff63 	bl	800b088 <siprintf>
		ssd1306_WriteString(isEnabledStr, Font_7x10, White);
 80021c2:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <drawSensorConfigGeneric+0x3d8>)
 80021c4:	f107 000c 	add.w	r0, r7, #12
 80021c8:	2301      	movs	r3, #1
 80021ca:	ca06      	ldmia	r2, {r1, r2}
 80021cc:	f001 fcba 	bl	8003b44 <ssd1306_WriteString>
	else {

	}


	ssd1306_WriteString("", Font_7x10, White);
 80021d0:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <drawSensorConfigGeneric+0x3d8>)
 80021d2:	2301      	movs	r3, #1
 80021d4:	ca06      	ldmia	r2, {r1, r2}
 80021d6:	480f      	ldr	r0, [pc, #60]	; (8002214 <drawSensorConfigGeneric+0x3f4>)
 80021d8:	f001 fcb4 	bl	8003b44 <ssd1306_WriteString>

	backButton(2, MAIN_MENU, 2);
 80021dc:	2202      	movs	r2, #2
 80021de:	2100      	movs	r1, #0
 80021e0:	2002      	movs	r0, #2
 80021e2:	f7ff fcdb 	bl	8001b9c <backButton>
}
 80021e6:	bf00      	nop
 80021e8:	37e8      	adds	r7, #232	; 0xe8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	0800d388 	.word	0x0800d388
 80021f4:	0800d390 	.word	0x0800d390
 80021f8:	20000650 	.word	0x20000650
 80021fc:	20000b21 	.word	0x20000b21
 8002200:	20000658 	.word	0x20000658
 8002204:	200000bd 	.word	0x200000bd
 8002208:	20000000 	.word	0x20000000
 800220c:	0800d380 	.word	0x0800d380
 8002210:	200000d2 	.word	0x200000d2
 8002214:	0800d3ac 	.word	0x0800d3ac

08002218 <displayMenu>:
	[SENSOR_CONFIG_DS18_3] = {drawSensorConfigGeneric,0,{}},
	[SD_CONFIG] = {drawSdConfig, 0, {}},
	[ONOFF_MEASURE] = {drawOnoffMeasure, 0, {}}
};

void displayMenu(void) {
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 800221c:	2000      	movs	r0, #0
 800221e:	f001 fb69 	bl	80038f4 <ssd1306_Fill>

	menu[screen].function(&menu[screen]);
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <displayMenu+0x48>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4619      	mov	r1, r3
 800222a:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <displayMenu+0x4c>)
 800222c:	460b      	mov	r3, r1
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <displayMenu+0x48>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	4619      	mov	r1, r3
 8002240:	460b      	mov	r3, r1
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4906      	ldr	r1, [pc, #24]	; (8002264 <displayMenu+0x4c>)
 800224a:	440b      	add	r3, r1
 800224c:	4618      	mov	r0, r3
 800224e:	4790      	blx	r2
	ssd1306_UpdateScreen();
 8002250:	f001 fb74 	bl	800393c <ssd1306_UpdateScreen>
	//clearEncButton();
	HAL_Delay(1);
 8002254:	2001      	movs	r0, #1
 8002256:	f001 fd57 	bl	8003d08 <HAL_Delay>

}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000b21 	.word	0x20000b21
 8002264:	200000e8 	.word	0x200000e8

08002268 <displayInit>:
#include "ssd1306_tests.h"
#include "ssd1306.h"



void displayInit(void) {
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
	ssd1306_Init();
 800226c:	f001 fad8 	bl	8003820 <ssd1306_Init>
}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}

08002274 <CircularBuffer_Init>:
	uint8_t buffer[BUFFER_SIZE];
	uint8_t head;
	uint8_t tail;
} CircularBuffer;

void CircularBuffer_Init(CircularBuffer *buffer) {
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    buffer->head = 0;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    buffer->tail = 0;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <CircularBuffer_Add>:

CircularBuffer myBuffer;


bool CircularBuffer_Add(CircularBuffer *buffer, uint8_t data) {
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	70fb      	strb	r3, [r7, #3]
    // Sprawdź, czy bufor nie jest pełny
    if (((buffer->head + 1) % BUFFER_SIZE) != buffer->tail) {
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <CircularBuffer_Add+0x7c>)
 80022ae:	fb83 1302 	smull	r1, r3, r3, r2
 80022b2:	1199      	asrs	r1, r3, #6
 80022b4:	17d3      	asrs	r3, r2, #31
 80022b6:	1acb      	subs	r3, r1, r3
 80022b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	f892 23e9 	ldrb.w	r2, [r2, #1001]	; 0x3e9
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d01b      	beq.n	8002304 <CircularBuffer_Add+0x6c>
        buffer->buffer[buffer->head] = data;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80022d2:	4619      	mov	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	545a      	strb	r2, [r3, r1]
        buffer->head = (buffer->head + 1) % BUFFER_SIZE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80022e0:	3301      	adds	r3, #1
 80022e2:	4a0c      	ldr	r2, [pc, #48]	; (8002314 <CircularBuffer_Add+0x7c>)
 80022e4:	fb82 1203 	smull	r1, r2, r2, r3
 80022e8:	1191      	asrs	r1, r2, #6
 80022ea:	17da      	asrs	r2, r3, #31
 80022ec:	1a8a      	subs	r2, r1, r2
 80022ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022f2:	fb01 f202 	mul.w	r2, r1, r2
 80022f6:	1a9a      	subs	r2, r3, r2
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
        return true;
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <CircularBuffer_Add+0x6e>
    }
    return false;
 8002304:	2300      	movs	r3, #0
    // Jeśli bufor jest pełny, można obsłużyć to w odpowiedni sposób (np. zignorować nowe dane lub nadpisać stare)
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	10624dd3 	.word	0x10624dd3

08002318 <CircularBuffer_Get>:


// Funkcja pobierająca element z bufora
uint8_t CircularBuffer_Get(CircularBuffer *buffer) {
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
    // Sprawdź, czy bufor nie jest pusty
    if (buffer->head != buffer->tail) {
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 23e8 	ldrb.w	r2, [r3, #1000]	; 0x3e8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 33e9 	ldrb.w	r3, [r3, #1001]	; 0x3e9
 800232c:	429a      	cmp	r2, r3
 800232e:	d01b      	beq.n	8002368 <CircularBuffer_Get+0x50>
        uint8_t data = buffer->buffer[buffer->tail];
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 33e9 	ldrb.w	r3, [r3, #1001]	; 0x3e9
 8002336:	461a      	mov	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	5c9b      	ldrb	r3, [r3, r2]
 800233c:	73fb      	strb	r3, [r7, #15]
        buffer->tail = (buffer->tail + 1) % BUFFER_SIZE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 33e9 	ldrb.w	r3, [r3, #1001]	; 0x3e9
 8002344:	3301      	adds	r3, #1
 8002346:	4a0c      	ldr	r2, [pc, #48]	; (8002378 <CircularBuffer_Get+0x60>)
 8002348:	fb82 1203 	smull	r1, r2, r2, r3
 800234c:	1191      	asrs	r1, r2, #6
 800234e:	17da      	asrs	r2, r3, #31
 8002350:	1a8a      	subs	r2, r1, r2
 8002352:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002356:	fb01 f202 	mul.w	r2, r1, r2
 800235a:	1a9a      	subs	r2, r3, r2
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
        return data;
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	e000      	b.n	800236a <CircularBuffer_Get+0x52>
    }
    // Jeśli bufor jest pusty, można obsłużyć to w odpowiedni sposób (np. zwrócić specjalną wartość lub zablokować wykonanie)
    return 0;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	10624dd3 	.word	0x10624dd3

0800237c <buff>:

void buff(void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0

	CircularBuffer_Init(&myBuffer);
 8002382:	481e      	ldr	r0, [pc, #120]	; (80023fc <buff+0x80>)
 8002384:	f7ff ff76 	bl	8002274 <CircularBuffer_Init>
	// Przykładowe użycie bufora kołowego
	CircularBuffer_Add(&myBuffer, 10);
 8002388:	210a      	movs	r1, #10
 800238a:	481c      	ldr	r0, [pc, #112]	; (80023fc <buff+0x80>)
 800238c:	f7ff ff84 	bl	8002298 <CircularBuffer_Add>
	CircularBuffer_Add(&myBuffer, 20);
 8002390:	2114      	movs	r1, #20
 8002392:	481a      	ldr	r0, [pc, #104]	; (80023fc <buff+0x80>)
 8002394:	f7ff ff80 	bl	8002298 <CircularBuffer_Add>
	CircularBuffer_Add(&myBuffer, 'B');
 8002398:	2142      	movs	r1, #66	; 0x42
 800239a:	4818      	ldr	r0, [pc, #96]	; (80023fc <buff+0x80>)
 800239c:	f7ff ff7c 	bl	8002298 <CircularBuffer_Add>
	//uint8_t data = CircularBuffer_Get(&myBuffer);
	char temp[10];
	sprintf(temp, "%u \n\r", CircularBuffer_Get(&myBuffer));
 80023a0:	4816      	ldr	r0, [pc, #88]	; (80023fc <buff+0x80>)
 80023a2:	f7ff ffb9 	bl	8002318 <CircularBuffer_Get>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461a      	mov	r2, r3
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	4914      	ldr	r1, [pc, #80]	; (8002400 <buff+0x84>)
 80023ae:	4618      	mov	r0, r3
 80023b0:	f008 fe6a 	bl	800b088 <siprintf>
	send_uart(temp);
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe ff36 	bl	8001228 <send_uart>
	sprintf(temp, "%u \n\r", CircularBuffer_Get(&myBuffer));
 80023bc:	480f      	ldr	r0, [pc, #60]	; (80023fc <buff+0x80>)
 80023be:	f7ff ffab 	bl	8002318 <CircularBuffer_Get>
 80023c2:	4603      	mov	r3, r0
 80023c4:	461a      	mov	r2, r3
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	490d      	ldr	r1, [pc, #52]	; (8002400 <buff+0x84>)
 80023ca:	4618      	mov	r0, r3
 80023cc:	f008 fe5c 	bl	800b088 <siprintf>
	send_uart(temp);
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe ff28 	bl	8001228 <send_uart>
	sprintf(temp, "%u \n\r", CircularBuffer_Get(&myBuffer));
 80023d8:	4808      	ldr	r0, [pc, #32]	; (80023fc <buff+0x80>)
 80023da:	f7ff ff9d 	bl	8002318 <CircularBuffer_Get>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	4906      	ldr	r1, [pc, #24]	; (8002400 <buff+0x84>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f008 fe4e 	bl	800b088 <siprintf>
	send_uart(temp);
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe ff1a 	bl	8001228 <send_uart>

}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000b28 	.word	0x20000b28
 8002400:	0800d464 	.word	0x0800d464

08002404 <sd_demount>:

// functions
char buffer[128];
bool sdReady = false;

void sd_demount() {
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 0);
 8002408:	2200      	movs	r2, #0
 800240a:	4903      	ldr	r1, [pc, #12]	; (8002418 <sd_demount+0x14>)
 800240c:	2000      	movs	r0, #0
 800240e:	f007 fa07 	bl	8009820 <f_mount>
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	0800d46c 	.word	0x0800d46c

0800241c <sd_init>:

void sd_init() {
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 8002420:	2201      	movs	r2, #1
 8002422:	490d      	ldr	r1, [pc, #52]	; (8002458 <sd_init+0x3c>)
 8002424:	480d      	ldr	r0, [pc, #52]	; (800245c <sd_init+0x40>)
 8002426:	f007 f9fb 	bl	8009820 <f_mount>
 800242a:	4603      	mov	r3, r0
 800242c:	461a      	mov	r2, r3
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <sd_init+0x44>)
 8002430:	701a      	strb	r2, [r3, #0]

	if(fresult==FR_OK) {
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <sd_init+0x44>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <sd_init+0x2c>
		sdReady = true;
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <sd_init+0x48>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
		send_uart("sd status: FR_OK\n\r");
 8002440:	4809      	ldr	r0, [pc, #36]	; (8002468 <sd_init+0x4c>)
 8002442:	f7fe fef1 	bl	8001228 <send_uart>
	}
	else {
		sdReady = false;
		send_uart("sd status: sd err\n\r");
	}
}
 8002446:	e005      	b.n	8002454 <sd_init+0x38>
		sdReady = false;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <sd_init+0x48>)
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
		send_uart("sd status: sd err\n\r");
 800244e:	4807      	ldr	r0, [pc, #28]	; (800246c <sd_init+0x50>)
 8002450:	f7fe feea 	bl	8001228 <send_uart>
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	0800d470 	.word	0x0800d470
 800245c:	20000f14 	.word	0x20000f14
 8002460:	20001374 	.word	0x20001374
 8002464:	2000140c 	.word	0x2000140c
 8002468:	0800d474 	.word	0x0800d474
 800246c:	0800d488 	.word	0x0800d488

08002470 <sd_freespace>:

uint32_t sd_freespace() {
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
	if(sdReady) {
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <sd_freespace+0x54>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <sd_freespace+0x4e>
		f_getfree("", &fre_clust, &pfs);
 800247c:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <sd_freespace+0x58>)
 800247e:	4913      	ldr	r1, [pc, #76]	; (80024cc <sd_freespace+0x5c>)
 8002480:	4813      	ldr	r0, [pc, #76]	; (80024d0 <sd_freespace+0x60>)
 8002482:	f007 ff2d 	bl	800a2e0 <f_getfree>
		return free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <sd_freespace+0x58>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	895b      	ldrh	r3, [r3, #10]
 800248c:	461a      	mov	r2, r3
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <sd_freespace+0x5c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe f83c 	bl	8000514 <__aeabi_ui2d>
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <sd_freespace+0x64>)
 80024a2:	f7fe f8b1 	bl	8000608 <__aeabi_dmul>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f7fe fb83 	bl	8000bb8 <__aeabi_d2uiz>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <sd_freespace+0x68>)
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <sd_freespace+0x68>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	e000      	b.n	80024c0 <sd_freespace+0x50>
	}
	else {
		return 0;
 80024be:	2300      	movs	r3, #0
	}

}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	2000140c 	.word	0x2000140c
 80024c8:	2000137c 	.word	0x2000137c
 80024cc:	20001380 	.word	0x20001380
 80024d0:	0800d46c 	.word	0x0800d46c
 80024d4:	3fe00000 	.word	0x3fe00000
 80024d8:	20001388 	.word	0x20001388

080024dc <sd_totalspace>:

uint32_t sd_totalspace() {
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	if(sdReady) {
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <sd_totalspace+0x58>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d021      	beq.n	800252c <sd_totalspace+0x50>
		f_getfree("", &fre_clust, &pfs);
 80024e8:	4a13      	ldr	r2, [pc, #76]	; (8002538 <sd_totalspace+0x5c>)
 80024ea:	4914      	ldr	r1, [pc, #80]	; (800253c <sd_totalspace+0x60>)
 80024ec:	4814      	ldr	r0, [pc, #80]	; (8002540 <sd_totalspace+0x64>)
 80024ee:	f007 fef7 	bl	800a2e0 <f_getfree>
		return total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <sd_totalspace+0x5c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	3b02      	subs	r3, #2
 80024fa:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <sd_totalspace+0x5c>)
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	8952      	ldrh	r2, [r2, #10]
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f805 	bl	8000514 <__aeabi_ui2d>
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <sd_totalspace+0x68>)
 8002510:	f7fe f87a 	bl	8000608 <__aeabi_dmul>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	f7fe fb4c 	bl	8000bb8 <__aeabi_d2uiz>
 8002520:	4603      	mov	r3, r0
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <sd_totalspace+0x6c>)
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <sd_totalspace+0x6c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	e000      	b.n	800252e <sd_totalspace+0x52>
	}
	else {
		return 0;
 800252c:	2300      	movs	r3, #0
	}

}
 800252e:	4618      	mov	r0, r3
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	2000140c 	.word	0x2000140c
 8002538:	2000137c 	.word	0x2000137c
 800253c:	20001380 	.word	0x20001380
 8002540:	0800d46c 	.word	0x0800d46c
 8002544:	3fe00000 	.word	0x3fe00000
 8002548:	20001384 	.word	0x20001384

0800254c <sd_readfile>:

void sd_readfile() {
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
	if(sdReady) {
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <sd_readfile+0x54>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <sd_readfile+0x4e>
	fresult = f_open(&fil, "file1.txt", FA_READ); //tu odczyt
 8002558:	2201      	movs	r2, #1
 800255a:	4912      	ldr	r1, [pc, #72]	; (80025a4 <sd_readfile+0x58>)
 800255c:	4812      	ldr	r0, [pc, #72]	; (80025a8 <sd_readfile+0x5c>)
 800255e:	f007 f9a5 	bl	80098ac <f_open>
 8002562:	4603      	mov	r3, r0
 8002564:	461a      	mov	r2, r3
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <sd_readfile+0x60>)
 8002568:	701a      	strb	r2, [r3, #0]
		if(fresult==FR_OK) {
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <sd_readfile+0x60>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d110      	bne.n	8002594 <sd_readfile+0x48>
			send_uart("opening file1.txt, data: \n\r");
 8002572:	480f      	ldr	r0, [pc, #60]	; (80025b0 <sd_readfile+0x64>)
 8002574:	f7fe fe58 	bl	8001228 <send_uart>
			f_read(&fil, buffer, f_size(&fil), &br);
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <sd_readfile+0x5c>)
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <sd_readfile+0x68>)
 800257e:	490e      	ldr	r1, [pc, #56]	; (80025b8 <sd_readfile+0x6c>)
 8002580:	4809      	ldr	r0, [pc, #36]	; (80025a8 <sd_readfile+0x5c>)
 8002582:	f007 fb51 	bl	8009c28 <f_read>
			send_uart(buffer);
 8002586:	480c      	ldr	r0, [pc, #48]	; (80025b8 <sd_readfile+0x6c>)
 8002588:	f7fe fe4e 	bl	8001228 <send_uart>
			send_uart("\n\r");
 800258c:	480b      	ldr	r0, [pc, #44]	; (80025bc <sd_readfile+0x70>)
 800258e:	f7fe fe4b 	bl	8001228 <send_uart>
		}
		else {
			send_uart("error while opening file... \n\r");
		}
	}
}
 8002592:	e002      	b.n	800259a <sd_readfile+0x4e>
			send_uart("error while opening file... \n\r");
 8002594:	480a      	ldr	r0, [pc, #40]	; (80025c0 <sd_readfile+0x74>)
 8002596:	f7fe fe47 	bl	8001228 <send_uart>
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	2000140c 	.word	0x2000140c
 80025a4:	0800d49c 	.word	0x0800d49c
 80025a8:	20001144 	.word	0x20001144
 80025ac:	20001374 	.word	0x20001374
 80025b0:	0800d4a8 	.word	0x0800d4a8
 80025b4:	20001378 	.word	0x20001378
 80025b8:	2000138c 	.word	0x2000138c
 80025bc:	0800d4c4 	.word	0x0800d4c4
 80025c0:	0800d4c8 	.word	0x0800d4c8

080025c4 <sd_writefile>:

void sd_writefile() {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
	if(sdReady) {
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <sd_writefile+0x30>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00f      	beq.n	80025f0 <sd_writefile+0x2c>
		fresult = f_open(&fil, "file1.txt", FA_CREATE_ALWAYS | FA_READ | FA_WRITE); // TU ZAPIS
 80025d0:	220b      	movs	r2, #11
 80025d2:	4909      	ldr	r1, [pc, #36]	; (80025f8 <sd_writefile+0x34>)
 80025d4:	4809      	ldr	r0, [pc, #36]	; (80025fc <sd_writefile+0x38>)
 80025d6:	f007 f969 	bl	80098ac <f_open>
 80025da:	4603      	mov	r3, r0
 80025dc:	461a      	mov	r2, r3
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <sd_writefile+0x3c>)
 80025e0:	701a      	strb	r2, [r3, #0]
		/* Writing text */
		f_puts("test test test", &fil);
 80025e2:	4906      	ldr	r1, [pc, #24]	; (80025fc <sd_writefile+0x38>)
 80025e4:	4807      	ldr	r0, [pc, #28]	; (8002604 <sd_writefile+0x40>)
 80025e6:	f007 ffa7 	bl	800a538 <f_puts>
		send_uart("file written \n\r");
 80025ea:	4807      	ldr	r0, [pc, #28]	; (8002608 <sd_writefile+0x44>)
 80025ec:	f7fe fe1c 	bl	8001228 <send_uart>
	}
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	2000140c 	.word	0x2000140c
 80025f8:	0800d49c 	.word	0x0800d49c
 80025fc:	20001144 	.word	0x20001144
 8002600:	20001374 	.word	0x20001374
 8002604:	0800d4e8 	.word	0x0800d4e8
 8002608:	0800d4f8 	.word	0x0800d4f8

0800260c <sd_closefile>:

void sd_closefile() {
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
	if(sdReady) {
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <sd_closefile+0x24>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d009      	beq.n	800262c <sd_closefile+0x20>
		fresult = f_close(&fil);
 8002618:	4806      	ldr	r0, [pc, #24]	; (8002634 <sd_closefile+0x28>)
 800261a:	f007 fe37 	bl	800a28c <f_close>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <sd_closefile+0x2c>)
 8002624:	701a      	strb	r2, [r3, #0]
		send_uart("closing file\n\r");
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <sd_closefile+0x30>)
 8002628:	f7fe fdfe 	bl	8001228 <send_uart>
	}
}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}
 8002630:	2000140c 	.word	0x2000140c
 8002634:	20001144 	.word	0x20001144
 8002638:	20001374 	.word	0x20001374
 800263c:	0800d508 	.word	0x0800d508

08002640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <HAL_MspInit+0x4c>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a0f      	ldr	r2, [pc, #60]	; (800268c <HAL_MspInit+0x4c>)
 8002650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_MspInit+0x4c>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_MspInit+0x4c>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a08      	ldr	r2, [pc, #32]	; (800268c <HAL_MspInit+0x4c>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_MspInit+0x4c>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800

08002690 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a17      	ldr	r2, [pc, #92]	; (800270c <HAL_ADC_MspInit+0x7c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d127      	bne.n	8002702 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_ADC_MspInit+0x80>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	4a15      	ldr	r2, [pc, #84]	; (8002710 <HAL_ADC_MspInit+0x80>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c0:	6453      	str	r3, [r2, #68]	; 0x44
 80026c2:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_ADC_MspInit+0x80>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <HAL_ADC_MspInit+0x80>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a0e      	ldr	r2, [pc, #56]	; (8002710 <HAL_ADC_MspInit+0x80>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <HAL_ADC_MspInit+0x80>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN0_INT_Pin|ADC1_IN1_INT_Pin|ADC1_IN2_INT_Pin|ADC1_IN3_INT_Pin;
 80026ea:	230f      	movs	r3, #15
 80026ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ee:	2303      	movs	r3, #3
 80026f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	4619      	mov	r1, r3
 80026fc:	4805      	ldr	r0, [pc, #20]	; (8002714 <HAL_ADC_MspInit+0x84>)
 80026fe:	f001 feab 	bl	8004458 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002702:	bf00      	nop
 8002704:	3728      	adds	r7, #40	; 0x28
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40012000 	.word	0x40012000
 8002710:	40023800 	.word	0x40023800
 8002714:	40020000 	.word	0x40020000

08002718 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08c      	sub	sp, #48	; 0x30
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 031c 	add.w	r3, r7, #28
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a3b      	ldr	r2, [pc, #236]	; (8002824 <HAL_I2C_MspInit+0x10c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d12c      	bne.n	8002794 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	4b3a      	ldr	r3, [pc, #232]	; (8002828 <HAL_I2C_MspInit+0x110>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a39      	ldr	r2, [pc, #228]	; (8002828 <HAL_I2C_MspInit+0x110>)
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b37      	ldr	r3, [pc, #220]	; (8002828 <HAL_I2C_MspInit+0x110>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
 8002756:	23c0      	movs	r3, #192	; 0xc0
 8002758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800275a:	2312      	movs	r3, #18
 800275c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002766:	2304      	movs	r3, #4
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276a:	f107 031c 	add.w	r3, r7, #28
 800276e:	4619      	mov	r1, r3
 8002770:	482e      	ldr	r0, [pc, #184]	; (800282c <HAL_I2C_MspInit+0x114>)
 8002772:	f001 fe71 	bl	8004458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <HAL_I2C_MspInit+0x110>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a2a      	ldr	r2, [pc, #168]	; (8002828 <HAL_I2C_MspInit+0x110>)
 8002780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b28      	ldr	r3, [pc, #160]	; (8002828 <HAL_I2C_MspInit+0x110>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002792:	e042      	b.n	800281a <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a25      	ldr	r2, [pc, #148]	; (8002830 <HAL_I2C_MspInit+0x118>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d13d      	bne.n	800281a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	4b21      	ldr	r3, [pc, #132]	; (8002828 <HAL_I2C_MspInit+0x110>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a20      	ldr	r2, [pc, #128]	; (8002828 <HAL_I2C_MspInit+0x110>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <HAL_I2C_MspInit+0x110>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SCL_ADS_Pin;
 80027ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c0:	2312      	movs	r3, #18
 80027c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c8:	2303      	movs	r3, #3
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80027cc:	2304      	movs	r3, #4
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCL_ADS_GPIO_Port, &GPIO_InitStruct);
 80027d0:	f107 031c 	add.w	r3, r7, #28
 80027d4:	4619      	mov	r1, r3
 80027d6:	4815      	ldr	r0, [pc, #84]	; (800282c <HAL_I2C_MspInit+0x114>)
 80027d8:	f001 fe3e 	bl	8004458 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDA_ADS_Pin;
 80027dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e2:	2312      	movs	r3, #18
 80027e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ea:	2303      	movs	r3, #3
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80027ee:	2309      	movs	r3, #9
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDA_ADS_GPIO_Port, &GPIO_InitStruct);
 80027f2:	f107 031c 	add.w	r3, r7, #28
 80027f6:	4619      	mov	r1, r3
 80027f8:	480c      	ldr	r0, [pc, #48]	; (800282c <HAL_I2C_MspInit+0x114>)
 80027fa:	f001 fe2d 	bl	8004458 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_I2C_MspInit+0x110>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a08      	ldr	r2, [pc, #32]	; (8002828 <HAL_I2C_MspInit+0x110>)
 8002808:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_I2C_MspInit+0x110>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
}
 800281a:	bf00      	nop
 800281c:	3730      	adds	r7, #48	; 0x30
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40005400 	.word	0x40005400
 8002828:	40023800 	.word	0x40023800
 800282c:	40020400 	.word	0x40020400
 8002830:	40005800 	.word	0x40005800

08002834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <HAL_SPI_MspInit+0x84>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d12b      	bne.n	80028ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_SPI_MspInit+0x88>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	4a17      	ldr	r2, [pc, #92]	; (80028bc <HAL_SPI_MspInit+0x88>)
 8002860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002864:	6453      	str	r3, [r2, #68]	; 0x44
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_SPI_MspInit+0x88>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_SPI_MspInit+0x88>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_SPI_MspInit+0x88>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_SPI_MspInit+0x88>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_SD_Pin|MISO_SD_Pin|MOSI_SD_Pin;
 800288e:	23e0      	movs	r3, #224	; 0xe0
 8002890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800289e:	2305      	movs	r3, #5
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	4805      	ldr	r0, [pc, #20]	; (80028c0 <HAL_SPI_MspInit+0x8c>)
 80028aa:	f001 fdd5 	bl	8004458 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028ae:	bf00      	nop
 80028b0:	3728      	adds	r7, #40	; 0x28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40013000 	.word	0x40013000
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020000 	.word	0x40020000

080028c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a21      	ldr	r2, [pc, #132]	; (8002968 <HAL_TIM_Encoder_MspInit+0xa4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d13c      	bne.n	8002960 <HAL_TIM_Encoder_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_TIM_Encoder_MspInit+0xa8>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	4a1f      	ldr	r2, [pc, #124]	; (800296c <HAL_TIM_Encoder_MspInit+0xa8>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6453      	str	r3, [r2, #68]	; 0x44
 80028f6:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_TIM_Encoder_MspInit+0xa8>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	4b19      	ldr	r3, [pc, #100]	; (800296c <HAL_TIM_Encoder_MspInit+0xa8>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a18      	ldr	r2, [pc, #96]	; (800296c <HAL_TIM_Encoder_MspInit+0xa8>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b16      	ldr	r3, [pc, #88]	; (800296c <HAL_TIM_Encoder_MspInit+0xa8>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 800291e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002930:	2301      	movs	r3, #1
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4619      	mov	r1, r3
 800293a:	480d      	ldr	r0, [pc, #52]	; (8002970 <HAL_TIM_Encoder_MspInit+0xac>)
 800293c:	f001 fd8c 	bl	8004458 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002940:	2200      	movs	r2, #0
 8002942:	2100      	movs	r1, #0
 8002944:	2019      	movs	r0, #25
 8002946:	f001 fd50 	bl	80043ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800294a:	2019      	movs	r0, #25
 800294c:	f001 fd69 	bl	8004422 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002950:	2200      	movs	r2, #0
 8002952:	2100      	movs	r1, #0
 8002954:	201a      	movs	r0, #26
 8002956:	f001 fd48 	bl	80043ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800295a:	201a      	movs	r0, #26
 800295c:	f001 fd61 	bl	8004422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002960:	bf00      	nop
 8002962:	3728      	adds	r7, #40	; 0x28
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40010000 	.word	0x40010000
 800296c:	40023800 	.word	0x40023800
 8002970:	40020000 	.word	0x40020000

08002974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d116      	bne.n	80029b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <HAL_TIM_Base_MspInit+0xb8>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a27      	ldr	r2, [pc, #156]	; (8002a2c <HAL_TIM_Base_MspInit+0xb8>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <HAL_TIM_Base_MspInit+0xb8>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	201c      	movs	r0, #28
 80029a8:	f001 fd1f 	bl	80043ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029ac:	201c      	movs	r0, #28
 80029ae:	f001 fd38 	bl	8004422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80029b2:	e036      	b.n	8002a22 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <HAL_TIM_Base_MspInit+0xbc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d116      	bne.n	80029ec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <HAL_TIM_Base_MspInit+0xb8>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_TIM_Base_MspInit+0xb8>)
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029cc:	6453      	str	r3, [r2, #68]	; 0x44
 80029ce:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <HAL_TIM_Base_MspInit+0xb8>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	2019      	movs	r0, #25
 80029e0:	f001 fd03 	bl	80043ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029e4:	2019      	movs	r0, #25
 80029e6:	f001 fd1c 	bl	8004422 <HAL_NVIC_EnableIRQ>
}
 80029ea:	e01a      	b.n	8002a22 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <HAL_TIM_Base_MspInit+0xc0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d115      	bne.n	8002a22 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <HAL_TIM_Base_MspInit+0xb8>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <HAL_TIM_Base_MspInit+0xb8>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a04:	6453      	str	r3, [r2, #68]	; 0x44
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_TIM_Base_MspInit+0xb8>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	201a      	movs	r0, #26
 8002a18:	f001 fce7 	bl	80043ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002a1c:	201a      	movs	r0, #26
 8002a1e:	f001 fd00 	bl	8004422 <HAL_NVIC_EnableIRQ>
}
 8002a22:	bf00      	nop
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40014400 	.word	0x40014400
 8002a34:	40014800 	.word	0x40014800

08002a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a19      	ldr	r2, [pc, #100]	; (8002abc <HAL_UART_MspInit+0x84>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d12c      	bne.n	8002ab4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <HAL_UART_MspInit+0x88>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	4a17      	ldr	r2, [pc, #92]	; (8002ac0 <HAL_UART_MspInit+0x88>)
 8002a64:	f043 0320 	orr.w	r3, r3, #32
 8002a68:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_UART_MspInit+0x88>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_UART_MspInit+0x88>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a10      	ldr	r2, [pc, #64]	; (8002ac0 <HAL_UART_MspInit+0x88>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <HAL_UART_MspInit+0x88>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002aa4:	2308      	movs	r3, #8
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4619      	mov	r1, r3
 8002aae:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <HAL_UART_MspInit+0x8c>)
 8002ab0:	f001 fcd2 	bl	8004458 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002ab4:	bf00      	nop
 8002ab6:	3728      	adds	r7, #40	; 0x28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40011400 	.word	0x40011400
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40020000 	.word	0x40020000

08002ac8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <SDTimer_Handler+0x40>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <SDTimer_Handler+0x1c>
    Timer1--;
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <SDTimer_Handler+0x40>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <SDTimer_Handler+0x40>)
 8002ae2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <SDTimer_Handler+0x44>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d006      	beq.n	8002afc <SDTimer_Handler+0x34>
    Timer2--;
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <SDTimer_Handler+0x44>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <SDTimer_Handler+0x44>)
 8002afa:	701a      	strb	r2, [r3, #0]
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	2000140e 	.word	0x2000140e
 8002b0c:	2000140f 	.word	0x2000140f

08002b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b14:	e7fe      	b.n	8002b14 <NMI_Handler+0x4>

08002b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b1a:	e7fe      	b.n	8002b1a <HardFault_Handler+0x4>

08002b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b20:	e7fe      	b.n	8002b20 <MemManage_Handler+0x4>

08002b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b26:	e7fe      	b.n	8002b26 <BusFault_Handler+0x4>

08002b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b2c:	e7fe      	b.n	8002b2c <UsageFault_Handler+0x4>

08002b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <SysTick_Handler+0x30>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <SysTick_Handler+0x30>)
 8002b68:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <SysTick_Handler+0x30>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b09      	cmp	r3, #9
 8002b72:	d904      	bls.n	8002b7e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <SysTick_Handler+0x30>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002b7a:	f7ff ffa5 	bl	8002ac8 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b7e:	f001 f8a3 	bl	8003cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	2000140d 	.word	0x2000140d

08002b8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8002b90:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b94:	f001 fe16 	bl	80047c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b98:	bf00      	nop
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ba0:	4803      	ldr	r0, [pc, #12]	; (8002bb0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002ba2:	f003 fef3 	bl	800698c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002ba6:	4803      	ldr	r0, [pc, #12]	; (8002bb4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002ba8:	f003 fef0 	bl	800698c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	200009b8 	.word	0x200009b8
 8002bb4:	20000a48 	.word	0x20000a48

08002bb8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bbc:	4803      	ldr	r0, [pc, #12]	; (8002bcc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002bbe:	f003 fee5 	bl	800698c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002bc2:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002bc4:	f003 fee2 	bl	800698c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200009b8 	.word	0x200009b8
 8002bd0:	20000a90 	.word	0x20000a90

08002bd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <TIM2_IRQHandler+0x10>)
 8002bda:	f003 fed7 	bl	800698c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000a00 	.word	0x20000a00

08002be8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALERT_ADS_Pin);
 8002bec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002bf0:	f001 fde8 	bl	80047c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return 1;
 8002bfc:	2301      	movs	r3, #1
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <_kill>:

int _kill(int pid, int sig)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c12:	f008 fb09 	bl	800b228 <__errno>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2216      	movs	r2, #22
 8002c1a:	601a      	str	r2, [r3, #0]
  return -1;
 8002c1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_exit>:

void _exit (int status)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c30:	f04f 31ff 	mov.w	r1, #4294967295
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ffe7 	bl	8002c08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c3a:	e7fe      	b.n	8002c3a <_exit+0x12>

08002c3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	e00a      	b.n	8002c64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c4e:	f3af 8000 	nop.w
 8002c52:	4601      	mov	r1, r0
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	60ba      	str	r2, [r7, #8]
 8002c5a:	b2ca      	uxtb	r2, r1
 8002c5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3301      	adds	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	dbf0      	blt.n	8002c4e <_read+0x12>
  }

  return len;
 8002c6c:	687b      	ldr	r3, [r7, #4]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	e009      	b.n	8002c9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	60ba      	str	r2, [r7, #8]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	dbf1      	blt.n	8002c88 <_write+0x12>
  }
  return len;
 8002ca4:	687b      	ldr	r3, [r7, #4]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <_close>:

int _close(int file)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cd6:	605a      	str	r2, [r3, #4]
  return 0;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <_isatty>:

int _isatty(int file)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cee:	2301      	movs	r3, #1
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d20:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <_sbrk+0x5c>)
 8002d22:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <_sbrk+0x60>)
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d2c:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <_sbrk+0x64>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <_sbrk+0x64>)
 8002d36:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <_sbrk+0x68>)
 8002d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <_sbrk+0x64>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d207      	bcs.n	8002d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d48:	f008 fa6e 	bl	800b228 <__errno>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	220c      	movs	r2, #12
 8002d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d52:	f04f 33ff 	mov.w	r3, #4294967295
 8002d56:	e009      	b.n	8002d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <_sbrk+0x64>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <_sbrk+0x64>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <_sbrk+0x64>)
 8002d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20020000 	.word	0x20020000
 8002d78:	00000400 	.word	0x00000400
 8002d7c:	20001410 	.word	0x20001410
 8002d80:	200019b8 	.word	0x200019b8

08002d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <SystemInit+0x20>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	4a05      	ldr	r2, [pc, #20]	; (8002da4 <SystemInit+0x20>)
 8002d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002db0:	f000 ff9e 	bl	8003cf0 <HAL_GetTick>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <SPI_Timer_On+0x20>)
 8002db8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002dba:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <SPI_Timer_On+0x24>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6013      	str	r3, [r2, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20001418 	.word	0x20001418
 8002dcc:	2000141c 	.word	0x2000141c

08002dd0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002dd4:	f000 ff8c 	bl	8003cf0 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <SPI_Timer_Status+0x24>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	1ad2      	subs	r2, r2, r3
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <SPI_Timer_Status+0x28>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	bf34      	ite	cc
 8002de8:	2301      	movcc	r3, #1
 8002dea:	2300      	movcs	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20001418 	.word	0x20001418
 8002df8:	2000141c 	.word	0x2000141c

08002dfc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002e06:	f107 020f 	add.w	r2, r7, #15
 8002e0a:	1df9      	adds	r1, r7, #7
 8002e0c:	2332      	movs	r3, #50	; 0x32
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	2301      	movs	r3, #1
 8002e12:	4804      	ldr	r0, [pc, #16]	; (8002e24 <xchg_spi+0x28>)
 8002e14:	f002 ff67 	bl	8005ce6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000960 	.word	0x20000960

08002e28 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	e00a      	b.n	8002e4e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	18d4      	adds	r4, r2, r3
 8002e3e:	20ff      	movs	r0, #255	; 0xff
 8002e40:	f7ff ffdc 	bl	8002dfc <xchg_spi>
 8002e44:	4603      	mov	r3, r0
 8002e46:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d3f0      	bcc.n	8002e38 <rcvr_spi_multi+0x10>
	}
}
 8002e56:	bf00      	nop
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd90      	pop	{r4, r7, pc}

08002e60 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4803      	ldr	r0, [pc, #12]	; (8002e84 <xmit_spi_multi+0x24>)
 8002e76:	f002 fdfa 	bl	8005a6e <HAL_SPI_Transmit>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000960 	.word	0x20000960

08002e88 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002e90:	f000 ff2e 	bl	8003cf0 <HAL_GetTick>
 8002e94:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002e9a:	20ff      	movs	r0, #255	; 0xff
 8002e9c:	f7ff ffae 	bl	8002dfc <xchg_spi>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2bff      	cmp	r3, #255	; 0xff
 8002ea8:	d007      	beq.n	8002eba <wait_ready+0x32>
 8002eaa:	f000 ff21 	bl	8003cf0 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d8ef      	bhi.n	8002e9a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	2bff      	cmp	r3, #255	; 0xff
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	2110      	movs	r1, #16
 8002ed8:	4803      	ldr	r0, [pc, #12]	; (8002ee8 <despiselect+0x18>)
 8002eda:	f001 fc59 	bl	8004790 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002ede:	20ff      	movs	r0, #255	; 0xff
 8002ee0:	f7ff ff8c 	bl	8002dfc <xchg_spi>

}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40020000 	.word	0x40020000

08002eec <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2110      	movs	r1, #16
 8002ef4:	4809      	ldr	r0, [pc, #36]	; (8002f1c <spiselect+0x30>)
 8002ef6:	f001 fc4b 	bl	8004790 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002efa:	20ff      	movs	r0, #255	; 0xff
 8002efc:	f7ff ff7e 	bl	8002dfc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002f00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f04:	f7ff ffc0 	bl	8002e88 <wait_ready>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <spiselect+0x26>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e002      	b.n	8002f18 <spiselect+0x2c>

	despiselect();
 8002f12:	f7ff ffdd 	bl	8002ed0 <despiselect>
	return 0;	/* Timeout */
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40020000 	.word	0x40020000

08002f20 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002f2a:	20c8      	movs	r0, #200	; 0xc8
 8002f2c:	f7ff ff3c 	bl	8002da8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002f30:	20ff      	movs	r0, #255	; 0xff
 8002f32:	f7ff ff63 	bl	8002dfc <xchg_spi>
 8002f36:	4603      	mov	r3, r0
 8002f38:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	2bff      	cmp	r3, #255	; 0xff
 8002f3e:	d104      	bne.n	8002f4a <rcvr_datablock+0x2a>
 8002f40:	f7ff ff46 	bl	8002dd0 <SPI_Timer_Status>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f2      	bne.n	8002f30 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2bfe      	cmp	r3, #254	; 0xfe
 8002f4e:	d001      	beq.n	8002f54 <rcvr_datablock+0x34>
 8002f50:	2300      	movs	r3, #0
 8002f52:	e00a      	b.n	8002f6a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002f54:	6839      	ldr	r1, [r7, #0]
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ff66 	bl	8002e28 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002f5c:	20ff      	movs	r0, #255	; 0xff
 8002f5e:	f7ff ff4d 	bl	8002dfc <xchg_spi>
 8002f62:	20ff      	movs	r0, #255	; 0xff
 8002f64:	f7ff ff4a 	bl	8002dfc <xchg_spi>

	return 1;						/* Function succeeded */
 8002f68:	2301      	movs	r3, #1
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002f7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f82:	f7ff ff81 	bl	8002e88 <wait_ready>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <xmit_datablock+0x1e>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e01e      	b.n	8002fce <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ff32 	bl	8002dfc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	2bfd      	cmp	r3, #253	; 0xfd
 8002f9c:	d016      	beq.n	8002fcc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002f9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff ff5c 	bl	8002e60 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002fa8:	20ff      	movs	r0, #255	; 0xff
 8002faa:	f7ff ff27 	bl	8002dfc <xchg_spi>
 8002fae:	20ff      	movs	r0, #255	; 0xff
 8002fb0:	f7ff ff24 	bl	8002dfc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002fb4:	20ff      	movs	r0, #255	; 0xff
 8002fb6:	f7ff ff21 	bl	8002dfc <xchg_spi>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2b05      	cmp	r3, #5
 8002fc6:	d001      	beq.n	8002fcc <xmit_datablock+0x5a>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e000      	b.n	8002fce <xmit_datablock+0x5c>
	}
	return 1;
 8002fcc:	2301      	movs	r3, #1
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	4603      	mov	r3, r0
 8002fde:	6039      	str	r1, [r7, #0]
 8002fe0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	da0e      	bge.n	8003008 <send_cmd+0x32>
		cmd &= 0x7F;
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ff0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	2037      	movs	r0, #55	; 0x37
 8002ff6:	f7ff ffee 	bl	8002fd6 <send_cmd>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002ffe:	7bbb      	ldrb	r3, [r7, #14]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d901      	bls.n	8003008 <send_cmd+0x32>
 8003004:	7bbb      	ldrb	r3, [r7, #14]
 8003006:	e051      	b.n	80030ac <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d008      	beq.n	8003020 <send_cmd+0x4a>
		despiselect();
 800300e:	f7ff ff5f 	bl	8002ed0 <despiselect>
		if (!spiselect()) return 0xFF;
 8003012:	f7ff ff6b 	bl	8002eec <spiselect>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <send_cmd+0x4a>
 800301c:	23ff      	movs	r3, #255	; 0xff
 800301e:	e045      	b.n	80030ac <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003026:	b2db      	uxtb	r3, r3
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fee7 	bl	8002dfc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	0e1b      	lsrs	r3, r3, #24
 8003032:	b2db      	uxtb	r3, r3
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fee1 	bl	8002dfc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	b2db      	uxtb	r3, r3
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fedb 	bl	8002dfc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	b2db      	uxtb	r3, r3
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fed5 	bl	8002dfc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fed0 	bl	8002dfc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <send_cmd+0x94>
 8003066:	2395      	movs	r3, #149	; 0x95
 8003068:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	2b08      	cmp	r3, #8
 800306e:	d101      	bne.n	8003074 <send_cmd+0x9e>
 8003070:	2387      	movs	r3, #135	; 0x87
 8003072:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fec0 	bl	8002dfc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d102      	bne.n	8003088 <send_cmd+0xb2>
 8003082:	20ff      	movs	r0, #255	; 0xff
 8003084:	f7ff feba 	bl	8002dfc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003088:	230a      	movs	r3, #10
 800308a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800308c:	20ff      	movs	r0, #255	; 0xff
 800308e:	f7ff feb5 	bl	8002dfc <xchg_spi>
 8003092:	4603      	mov	r3, r0
 8003094:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da05      	bge.n	80030aa <send_cmd+0xd4>
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <send_cmd+0xb6>

	return res;							/* Return received response */
 80030aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <USER_SPI_initialize+0x14>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0d6      	b.n	8003276 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80030c8:	4b6d      	ldr	r3, [pc, #436]	; (8003280 <USER_SPI_initialize+0x1cc>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <USER_SPI_initialize+0x2a>
 80030d6:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <USER_SPI_initialize+0x1cc>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e0cb      	b.n	8003276 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80030de:	4b69      	ldr	r3, [pc, #420]	; (8003284 <USER_SPI_initialize+0x1d0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80030e8:	4b66      	ldr	r3, [pc, #408]	; (8003284 <USER_SPI_initialize+0x1d0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80030f0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80030f2:	230a      	movs	r3, #10
 80030f4:	73fb      	strb	r3, [r7, #15]
 80030f6:	e005      	b.n	8003104 <USER_SPI_initialize+0x50>
 80030f8:	20ff      	movs	r0, #255	; 0xff
 80030fa:	f7ff fe7f 	bl	8002dfc <xchg_spi>
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	3b01      	subs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f6      	bne.n	80030f8 <USER_SPI_initialize+0x44>

	ty = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800310e:	2100      	movs	r1, #0
 8003110:	2000      	movs	r0, #0
 8003112:	f7ff ff60 	bl	8002fd6 <send_cmd>
 8003116:	4603      	mov	r3, r0
 8003118:	2b01      	cmp	r3, #1
 800311a:	f040 808b 	bne.w	8003234 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800311e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003122:	f7ff fe41 	bl	8002da8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003126:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800312a:	2008      	movs	r0, #8
 800312c:	f7ff ff53 	bl	8002fd6 <send_cmd>
 8003130:	4603      	mov	r3, r0
 8003132:	2b01      	cmp	r3, #1
 8003134:	d151      	bne.n	80031da <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003136:	2300      	movs	r3, #0
 8003138:	73fb      	strb	r3, [r7, #15]
 800313a:	e00d      	b.n	8003158 <USER_SPI_initialize+0xa4>
 800313c:	7bfc      	ldrb	r4, [r7, #15]
 800313e:	20ff      	movs	r0, #255	; 0xff
 8003140:	f7ff fe5c 	bl	8002dfc <xchg_spi>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	f104 0310 	add.w	r3, r4, #16
 800314c:	443b      	add	r3, r7
 800314e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	3301      	adds	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d9ee      	bls.n	800313c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800315e:	7abb      	ldrb	r3, [r7, #10]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d167      	bne.n	8003234 <USER_SPI_initialize+0x180>
 8003164:	7afb      	ldrb	r3, [r7, #11]
 8003166:	2baa      	cmp	r3, #170	; 0xaa
 8003168:	d164      	bne.n	8003234 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800316a:	bf00      	nop
 800316c:	f7ff fe30 	bl	8002dd0 <SPI_Timer_Status>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d007      	beq.n	8003186 <USER_SPI_initialize+0xd2>
 8003176:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800317a:	20a9      	movs	r0, #169	; 0xa9
 800317c:	f7ff ff2b 	bl	8002fd6 <send_cmd>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f2      	bne.n	800316c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003186:	f7ff fe23 	bl	8002dd0 <SPI_Timer_Status>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d051      	beq.n	8003234 <USER_SPI_initialize+0x180>
 8003190:	2100      	movs	r1, #0
 8003192:	203a      	movs	r0, #58	; 0x3a
 8003194:	f7ff ff1f 	bl	8002fd6 <send_cmd>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d14a      	bne.n	8003234 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800319e:	2300      	movs	r3, #0
 80031a0:	73fb      	strb	r3, [r7, #15]
 80031a2:	e00d      	b.n	80031c0 <USER_SPI_initialize+0x10c>
 80031a4:	7bfc      	ldrb	r4, [r7, #15]
 80031a6:	20ff      	movs	r0, #255	; 0xff
 80031a8:	f7ff fe28 	bl	8002dfc <xchg_spi>
 80031ac:	4603      	mov	r3, r0
 80031ae:	461a      	mov	r2, r3
 80031b0:	f104 0310 	add.w	r3, r4, #16
 80031b4:	443b      	add	r3, r7
 80031b6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	3301      	adds	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d9ee      	bls.n	80031a4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80031c6:	7a3b      	ldrb	r3, [r7, #8]
 80031c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <USER_SPI_initialize+0x120>
 80031d0:	230c      	movs	r3, #12
 80031d2:	e000      	b.n	80031d6 <USER_SPI_initialize+0x122>
 80031d4:	2304      	movs	r3, #4
 80031d6:	737b      	strb	r3, [r7, #13]
 80031d8:	e02c      	b.n	8003234 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80031da:	2100      	movs	r1, #0
 80031dc:	20a9      	movs	r0, #169	; 0xa9
 80031de:	f7ff fefa 	bl	8002fd6 <send_cmd>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d804      	bhi.n	80031f2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80031e8:	2302      	movs	r3, #2
 80031ea:	737b      	strb	r3, [r7, #13]
 80031ec:	23a9      	movs	r3, #169	; 0xa9
 80031ee:	73bb      	strb	r3, [r7, #14]
 80031f0:	e003      	b.n	80031fa <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80031f2:	2301      	movs	r3, #1
 80031f4:	737b      	strb	r3, [r7, #13]
 80031f6:	2301      	movs	r3, #1
 80031f8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80031fa:	bf00      	nop
 80031fc:	f7ff fde8 	bl	8002dd0 <SPI_Timer_Status>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <USER_SPI_initialize+0x162>
 8003206:	7bbb      	ldrb	r3, [r7, #14]
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff fee3 	bl	8002fd6 <send_cmd>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f2      	bne.n	80031fc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003216:	f7ff fddb 	bl	8002dd0 <SPI_Timer_Status>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d007      	beq.n	8003230 <USER_SPI_initialize+0x17c>
 8003220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003224:	2010      	movs	r0, #16
 8003226:	f7ff fed6 	bl	8002fd6 <send_cmd>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <USER_SPI_initialize+0x180>
				ty = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003234:	4a14      	ldr	r2, [pc, #80]	; (8003288 <USER_SPI_initialize+0x1d4>)
 8003236:	7b7b      	ldrb	r3, [r7, #13]
 8003238:	7013      	strb	r3, [r2, #0]
	despiselect();
 800323a:	f7ff fe49 	bl	8002ed0 <despiselect>

	if (ty) {			/* OK */
 800323e:	7b7b      	ldrb	r3, [r7, #13]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d012      	beq.n	800326a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <USER_SPI_initialize+0x1d0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800324e:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <USER_SPI_initialize+0x1d0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0210 	orr.w	r2, r2, #16
 8003256:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <USER_SPI_initialize+0x1cc>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f023 0301 	bic.w	r3, r3, #1
 8003262:	b2da      	uxtb	r2, r3
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <USER_SPI_initialize+0x1cc>)
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	e002      	b.n	8003270 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <USER_SPI_initialize+0x1cc>)
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <USER_SPI_initialize+0x1cc>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	b2db      	uxtb	r3, r3
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bd90      	pop	{r4, r7, pc}
 800327e:	bf00      	nop
 8003280:	20000644 	.word	0x20000644
 8003284:	20000960 	.word	0x20000960
 8003288:	20001414 	.word	0x20001414

0800328c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <USER_SPI_status+0x14>
 800329c:	2301      	movs	r3, #1
 800329e:	e002      	b.n	80032a6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <USER_SPI_status+0x28>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	b2db      	uxtb	r3, r3
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000644 	.word	0x20000644

080032b8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	4603      	mov	r3, r0
 80032c6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d102      	bne.n	80032d4 <USER_SPI_read+0x1c>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <USER_SPI_read+0x20>
 80032d4:	2304      	movs	r3, #4
 80032d6:	e04d      	b.n	8003374 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80032d8:	4b28      	ldr	r3, [pc, #160]	; (800337c <USER_SPI_read+0xc4>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <USER_SPI_read+0x32>
 80032e6:	2303      	movs	r3, #3
 80032e8:	e044      	b.n	8003374 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80032ea:	4b25      	ldr	r3, [pc, #148]	; (8003380 <USER_SPI_read+0xc8>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <USER_SPI_read+0x44>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	025b      	lsls	r3, r3, #9
 80032fa:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d111      	bne.n	8003326 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	2011      	movs	r0, #17
 8003306:	f7ff fe66 	bl	8002fd6 <send_cmd>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d129      	bne.n	8003364 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003310:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003314:	68b8      	ldr	r0, [r7, #8]
 8003316:	f7ff fe03 	bl	8002f20 <rcvr_datablock>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d021      	beq.n	8003364 <USER_SPI_read+0xac>
			count = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	e01e      	b.n	8003364 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	2012      	movs	r0, #18
 800332a:	f7ff fe54 	bl	8002fd6 <send_cmd>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d117      	bne.n	8003364 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003334:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003338:	68b8      	ldr	r0, [r7, #8]
 800333a:	f7ff fdf1 	bl	8002f20 <rcvr_datablock>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <USER_SPI_read+0xa2>
				buff += 512;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800334a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	3b01      	subs	r3, #1
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1ed      	bne.n	8003334 <USER_SPI_read+0x7c>
 8003358:	e000      	b.n	800335c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800335a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800335c:	2100      	movs	r1, #0
 800335e:	200c      	movs	r0, #12
 8003360:	f7ff fe39 	bl	8002fd6 <send_cmd>
		}
	}
	despiselect();
 8003364:	f7ff fdb4 	bl	8002ed0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	bf14      	ite	ne
 800336e:	2301      	movne	r3, #1
 8003370:	2300      	moveq	r3, #0
 8003372:	b2db      	uxtb	r3, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000644 	.word	0x20000644
 8003380:	20001414 	.word	0x20001414

08003384 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	4603      	mov	r3, r0
 8003392:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <USER_SPI_write+0x1c>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <USER_SPI_write+0x20>
 80033a0:	2304      	movs	r3, #4
 80033a2:	e063      	b.n	800346c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80033a4:	4b33      	ldr	r3, [pc, #204]	; (8003474 <USER_SPI_write+0xf0>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <USER_SPI_write+0x32>
 80033b2:	2303      	movs	r3, #3
 80033b4:	e05a      	b.n	800346c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80033b6:	4b2f      	ldr	r3, [pc, #188]	; (8003474 <USER_SPI_write+0xf0>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <USER_SPI_write+0x44>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e051      	b.n	800346c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80033c8:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <USER_SPI_write+0xf4>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <USER_SPI_write+0x56>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	025b      	lsls	r3, r3, #9
 80033d8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d110      	bne.n	8003402 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	2018      	movs	r0, #24
 80033e4:	f7ff fdf7 	bl	8002fd6 <send_cmd>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d136      	bne.n	800345c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80033ee:	21fe      	movs	r1, #254	; 0xfe
 80033f0:	68b8      	ldr	r0, [r7, #8]
 80033f2:	f7ff fdbe 	bl	8002f72 <xmit_datablock>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d02f      	beq.n	800345c <USER_SPI_write+0xd8>
			count = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	e02c      	b.n	800345c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003402:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <USER_SPI_write+0xf4>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	f003 0306 	and.w	r3, r3, #6
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <USER_SPI_write+0x92>
 800340e:	6839      	ldr	r1, [r7, #0]
 8003410:	2097      	movs	r0, #151	; 0x97
 8003412:	f7ff fde0 	bl	8002fd6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	2019      	movs	r0, #25
 800341a:	f7ff fddc 	bl	8002fd6 <send_cmd>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d11b      	bne.n	800345c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003424:	21fc      	movs	r1, #252	; 0xfc
 8003426:	68b8      	ldr	r0, [r7, #8]
 8003428:	f7ff fda3 	bl	8002f72 <xmit_datablock>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <USER_SPI_write+0xc4>
				buff += 512;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003438:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	3b01      	subs	r3, #1
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1ee      	bne.n	8003424 <USER_SPI_write+0xa0>
 8003446:	e000      	b.n	800344a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003448:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800344a:	21fd      	movs	r1, #253	; 0xfd
 800344c:	2000      	movs	r0, #0
 800344e:	f7ff fd90 	bl	8002f72 <xmit_datablock>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <USER_SPI_write+0xd8>
 8003458:	2301      	movs	r3, #1
 800345a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800345c:	f7ff fd38 	bl	8002ed0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000644 	.word	0x20000644
 8003478:	20001414 	.word	0x20001414

0800347c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08c      	sub	sp, #48	; 0x30
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	603a      	str	r2, [r7, #0]
 8003486:	71fb      	strb	r3, [r7, #7]
 8003488:	460b      	mov	r3, r1
 800348a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <USER_SPI_ioctl+0x1a>
 8003492:	2304      	movs	r3, #4
 8003494:	e15a      	b.n	800374c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003496:	4baf      	ldr	r3, [pc, #700]	; (8003754 <USER_SPI_ioctl+0x2d8>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <USER_SPI_ioctl+0x2c>
 80034a4:	2303      	movs	r3, #3
 80034a6:	e151      	b.n	800374c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80034ae:	79bb      	ldrb	r3, [r7, #6]
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	f200 8136 	bhi.w	8003722 <USER_SPI_ioctl+0x2a6>
 80034b6:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <USER_SPI_ioctl+0x40>)
 80034b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034bc:	080034d1 	.word	0x080034d1
 80034c0:	080034e5 	.word	0x080034e5
 80034c4:	08003723 	.word	0x08003723
 80034c8:	08003591 	.word	0x08003591
 80034cc:	08003687 	.word	0x08003687
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80034d0:	f7ff fd0c 	bl	8002eec <spiselect>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8127 	beq.w	800372a <USER_SPI_ioctl+0x2ae>
 80034dc:	2300      	movs	r3, #0
 80034de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80034e2:	e122      	b.n	800372a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80034e4:	2100      	movs	r1, #0
 80034e6:	2009      	movs	r0, #9
 80034e8:	f7ff fd75 	bl	8002fd6 <send_cmd>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 811d 	bne.w	800372e <USER_SPI_ioctl+0x2b2>
 80034f4:	f107 030c 	add.w	r3, r7, #12
 80034f8:	2110      	movs	r1, #16
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fd10 	bl	8002f20 <rcvr_datablock>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8113 	beq.w	800372e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003508:	7b3b      	ldrb	r3, [r7, #12]
 800350a:	099b      	lsrs	r3, r3, #6
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b01      	cmp	r3, #1
 8003510:	d111      	bne.n	8003536 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003512:	7d7b      	ldrb	r3, [r7, #21]
 8003514:	461a      	mov	r2, r3
 8003516:	7d3b      	ldrb	r3, [r7, #20]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	4413      	add	r3, r2
 800351c:	461a      	mov	r2, r3
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	041b      	lsls	r3, r3, #16
 8003522:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003526:	4413      	add	r3, r2
 8003528:	3301      	adds	r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	029a      	lsls	r2, r3, #10
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e028      	b.n	8003588 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003536:	7c7b      	ldrb	r3, [r7, #17]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	b2da      	uxtb	r2, r3
 800353e:	7dbb      	ldrb	r3, [r7, #22]
 8003540:	09db      	lsrs	r3, r3, #7
 8003542:	b2db      	uxtb	r3, r3
 8003544:	4413      	add	r3, r2
 8003546:	b2da      	uxtb	r2, r3
 8003548:	7d7b      	ldrb	r3, [r7, #21]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	f003 0306 	and.w	r3, r3, #6
 8003552:	b2db      	uxtb	r3, r3
 8003554:	4413      	add	r3, r2
 8003556:	b2db      	uxtb	r3, r3
 8003558:	3302      	adds	r3, #2
 800355a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800355e:	7d3b      	ldrb	r3, [r7, #20]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	b2db      	uxtb	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	7cfb      	ldrb	r3, [r7, #19]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	441a      	add	r2, r3
 800356c:	7cbb      	ldrb	r3, [r7, #18]
 800356e:	029b      	lsls	r3, r3, #10
 8003570:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003574:	4413      	add	r3, r2
 8003576:	3301      	adds	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800357a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800357e:	3b09      	subs	r3, #9
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	409a      	lsls	r2, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800358e:	e0ce      	b.n	800372e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003590:	4b71      	ldr	r3, [pc, #452]	; (8003758 <USER_SPI_ioctl+0x2dc>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d031      	beq.n	8003600 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800359c:	2100      	movs	r1, #0
 800359e:	208d      	movs	r0, #141	; 0x8d
 80035a0:	f7ff fd19 	bl	8002fd6 <send_cmd>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f040 80c3 	bne.w	8003732 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80035ac:	20ff      	movs	r0, #255	; 0xff
 80035ae:	f7ff fc25 	bl	8002dfc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80035b2:	f107 030c 	add.w	r3, r7, #12
 80035b6:	2110      	movs	r1, #16
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fcb1 	bl	8002f20 <rcvr_datablock>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80b6 	beq.w	8003732 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80035c6:	2330      	movs	r3, #48	; 0x30
 80035c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80035cc:	e007      	b.n	80035de <USER_SPI_ioctl+0x162>
 80035ce:	20ff      	movs	r0, #255	; 0xff
 80035d0:	f7ff fc14 	bl	8002dfc <xchg_spi>
 80035d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80035d8:	3b01      	subs	r3, #1
 80035da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80035de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f3      	bne.n	80035ce <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80035e6:	7dbb      	ldrb	r3, [r7, #22]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	2310      	movs	r3, #16
 80035f0:	fa03 f202 	lsl.w	r2, r3, r2
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80035fe:	e098      	b.n	8003732 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003600:	2100      	movs	r1, #0
 8003602:	2009      	movs	r0, #9
 8003604:	f7ff fce7 	bl	8002fd6 <send_cmd>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	f040 8091 	bne.w	8003732 <USER_SPI_ioctl+0x2b6>
 8003610:	f107 030c 	add.w	r3, r7, #12
 8003614:	2110      	movs	r1, #16
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fc82 	bl	8002f20 <rcvr_datablock>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 8087 	beq.w	8003732 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003624:	4b4c      	ldr	r3, [pc, #304]	; (8003758 <USER_SPI_ioctl+0x2dc>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d012      	beq.n	8003656 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003630:	7dbb      	ldrb	r3, [r7, #22]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003638:	7dfa      	ldrb	r2, [r7, #23]
 800363a:	09d2      	lsrs	r2, r2, #7
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	4413      	add	r3, r2
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	7e7b      	ldrb	r3, [r7, #25]
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	b2db      	uxtb	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	461a      	mov	r2, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e013      	b.n	800367e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003656:	7dbb      	ldrb	r3, [r7, #22]
 8003658:	109b      	asrs	r3, r3, #2
 800365a:	b29b      	uxth	r3, r3
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	3301      	adds	r3, #1
 8003662:	7dfa      	ldrb	r2, [r7, #23]
 8003664:	00d2      	lsls	r2, r2, #3
 8003666:	f002 0218 	and.w	r2, r2, #24
 800366a:	7df9      	ldrb	r1, [r7, #23]
 800366c:	0949      	lsrs	r1, r1, #5
 800366e:	b2c9      	uxtb	r1, r1
 8003670:	440a      	add	r2, r1
 8003672:	3201      	adds	r2, #1
 8003674:	fb02 f303 	mul.w	r3, r2, r3
 8003678:	461a      	mov	r2, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003684:	e055      	b.n	8003732 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003686:	4b34      	ldr	r3, [pc, #208]	; (8003758 <USER_SPI_ioctl+0x2dc>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	f003 0306 	and.w	r3, r3, #6
 800368e:	2b00      	cmp	r3, #0
 8003690:	d051      	beq.n	8003736 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003692:	f107 020c 	add.w	r2, r7, #12
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	210b      	movs	r1, #11
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff feee 	bl	800347c <USER_SPI_ioctl>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d149      	bne.n	800373a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80036a6:	7b3b      	ldrb	r3, [r7, #12]
 80036a8:	099b      	lsrs	r3, r3, #6
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <USER_SPI_ioctl+0x23e>
 80036b0:	7dbb      	ldrb	r3, [r7, #22]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d041      	beq.n	800373e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	623b      	str	r3, [r7, #32]
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80036ca:	4b23      	ldr	r3, [pc, #140]	; (8003758 <USER_SPI_ioctl+0x2dc>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d105      	bne.n	80036e2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	025b      	lsls	r3, r3, #9
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	025b      	lsls	r3, r3, #9
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80036e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036e4:	2020      	movs	r0, #32
 80036e6:	f7ff fc76 	bl	8002fd6 <send_cmd>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d128      	bne.n	8003742 <USER_SPI_ioctl+0x2c6>
 80036f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036f2:	2021      	movs	r0, #33	; 0x21
 80036f4:	f7ff fc6f 	bl	8002fd6 <send_cmd>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d121      	bne.n	8003742 <USER_SPI_ioctl+0x2c6>
 80036fe:	2100      	movs	r1, #0
 8003700:	2026      	movs	r0, #38	; 0x26
 8003702:	f7ff fc68 	bl	8002fd6 <send_cmd>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d11a      	bne.n	8003742 <USER_SPI_ioctl+0x2c6>
 800370c:	f247 5030 	movw	r0, #30000	; 0x7530
 8003710:	f7ff fbba 	bl	8002e88 <wait_ready>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d013      	beq.n	8003742 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800371a:	2300      	movs	r3, #0
 800371c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003720:	e00f      	b.n	8003742 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003722:	2304      	movs	r3, #4
 8003724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003728:	e00c      	b.n	8003744 <USER_SPI_ioctl+0x2c8>
		break;
 800372a:	bf00      	nop
 800372c:	e00a      	b.n	8003744 <USER_SPI_ioctl+0x2c8>
		break;
 800372e:	bf00      	nop
 8003730:	e008      	b.n	8003744 <USER_SPI_ioctl+0x2c8>
		break;
 8003732:	bf00      	nop
 8003734:	e006      	b.n	8003744 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003736:	bf00      	nop
 8003738:	e004      	b.n	8003744 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800373a:	bf00      	nop
 800373c:	e002      	b.n	8003744 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800373e:	bf00      	nop
 8003740:	e000      	b.n	8003744 <USER_SPI_ioctl+0x2c8>
		break;
 8003742:	bf00      	nop
	}

	despiselect();
 8003744:	f7ff fbc4 	bl	8002ed0 <despiselect>

	return res;
 8003748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800374c:	4618      	mov	r0, r3
 800374e:	3730      	adds	r7, #48	; 0x30
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000644 	.word	0x20000644
 8003758:	20001414 	.word	0x20001414

0800375c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800375c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003794 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003760:	480d      	ldr	r0, [pc, #52]	; (8003798 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003762:	490e      	ldr	r1, [pc, #56]	; (800379c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003764:	4a0e      	ldr	r2, [pc, #56]	; (80037a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003768:	e002      	b.n	8003770 <LoopCopyDataInit>

0800376a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800376a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800376c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800376e:	3304      	adds	r3, #4

08003770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003774:	d3f9      	bcc.n	800376a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003776:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003778:	4c0b      	ldr	r4, [pc, #44]	; (80037a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800377a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800377c:	e001      	b.n	8003782 <LoopFillZerobss>

0800377e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800377e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003780:	3204      	adds	r2, #4

08003782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003784:	d3fb      	bcc.n	800377e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003786:	f7ff fafd 	bl	8002d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800378a:	f007 fd53 	bl	800b234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800378e:	f7fd fe09 	bl	80013a4 <main>
  bx  lr    
 8003792:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003794:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800379c:	2000084c 	.word	0x2000084c
  ldr r2, =_sidata
 80037a0:	080105fc 	.word	0x080105fc
  ldr r2, =_sbss
 80037a4:	2000084c 	.word	0x2000084c
  ldr r4, =_ebss
 80037a8:	200019b4 	.word	0x200019b4

080037ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037ac:	e7fe      	b.n	80037ac <ADC_IRQHandler>

080037ae <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af04      	add	r7, sp, #16
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80037c6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ca:	9302      	str	r3, [sp, #8]
 80037cc:	2301      	movs	r3, #1
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	1dfb      	adds	r3, r7, #7
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2301      	movs	r3, #1
 80037d6:	2200      	movs	r2, #0
 80037d8:	2178      	movs	r1, #120	; 0x78
 80037da:	4803      	ldr	r0, [pc, #12]	; (80037e8 <ssd1306_WriteCommand+0x2c>)
 80037dc:	f001 f94e 	bl	8004a7c <HAL_I2C_Mem_Write>
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	200008b8 	.word	0x200008b8

080037ec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af04      	add	r7, sp, #16
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	f04f 32ff 	mov.w	r2, #4294967295
 80037fe:	9202      	str	r2, [sp, #8]
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2301      	movs	r3, #1
 8003808:	2240      	movs	r2, #64	; 0x40
 800380a:	2178      	movs	r1, #120	; 0x78
 800380c:	4803      	ldr	r0, [pc, #12]	; (800381c <ssd1306_WriteData+0x30>)
 800380e:	f001 f935 	bl	8004a7c <HAL_I2C_Mem_Write>
}
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	200008b8 	.word	0x200008b8

08003820 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003824:	f7ff ffc3 	bl	80037ae <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003828:	2064      	movs	r0, #100	; 0x64
 800382a:	f000 fa6d 	bl	8003d08 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800382e:	2000      	movs	r0, #0
 8003830:	f000 f9da 	bl	8003be8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003834:	2020      	movs	r0, #32
 8003836:	f7ff ffc1 	bl	80037bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800383a:	2000      	movs	r0, #0
 800383c:	f7ff ffbe 	bl	80037bc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003840:	20b0      	movs	r0, #176	; 0xb0
 8003842:	f7ff ffbb 	bl	80037bc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003846:	20c8      	movs	r0, #200	; 0xc8
 8003848:	f7ff ffb8 	bl	80037bc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800384c:	2000      	movs	r0, #0
 800384e:	f7ff ffb5 	bl	80037bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003852:	2010      	movs	r0, #16
 8003854:	f7ff ffb2 	bl	80037bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003858:	2040      	movs	r0, #64	; 0x40
 800385a:	f7ff ffaf 	bl	80037bc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800385e:	20ff      	movs	r0, #255	; 0xff
 8003860:	f000 f9ae 	bl	8003bc0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003864:	20a1      	movs	r0, #161	; 0xa1
 8003866:	f7ff ffa9 	bl	80037bc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800386a:	20a6      	movs	r0, #166	; 0xa6
 800386c:	f7ff ffa6 	bl	80037bc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003870:	20a8      	movs	r0, #168	; 0xa8
 8003872:	f7ff ffa3 	bl	80037bc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003876:	203f      	movs	r0, #63	; 0x3f
 8003878:	f7ff ffa0 	bl	80037bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800387c:	20a4      	movs	r0, #164	; 0xa4
 800387e:	f7ff ff9d 	bl	80037bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003882:	20d3      	movs	r0, #211	; 0xd3
 8003884:	f7ff ff9a 	bl	80037bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003888:	2000      	movs	r0, #0
 800388a:	f7ff ff97 	bl	80037bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800388e:	20d5      	movs	r0, #213	; 0xd5
 8003890:	f7ff ff94 	bl	80037bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003894:	20f0      	movs	r0, #240	; 0xf0
 8003896:	f7ff ff91 	bl	80037bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800389a:	20d9      	movs	r0, #217	; 0xd9
 800389c:	f7ff ff8e 	bl	80037bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80038a0:	2022      	movs	r0, #34	; 0x22
 80038a2:	f7ff ff8b 	bl	80037bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80038a6:	20da      	movs	r0, #218	; 0xda
 80038a8:	f7ff ff88 	bl	80037bc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80038ac:	2012      	movs	r0, #18
 80038ae:	f7ff ff85 	bl	80037bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80038b2:	20db      	movs	r0, #219	; 0xdb
 80038b4:	f7ff ff82 	bl	80037bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80038b8:	2020      	movs	r0, #32
 80038ba:	f7ff ff7f 	bl	80037bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80038be:	208d      	movs	r0, #141	; 0x8d
 80038c0:	f7ff ff7c 	bl	80037bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80038c4:	2014      	movs	r0, #20
 80038c6:	f7ff ff79 	bl	80037bc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80038ca:	2001      	movs	r0, #1
 80038cc:	f000 f98c 	bl	8003be8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80038d0:	2000      	movs	r0, #0
 80038d2:	f000 f80f 	bl	80038f4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80038d6:	f000 f831 	bl	800393c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <ssd1306_Init+0xd0>)
 80038dc:	2200      	movs	r2, #0
 80038de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <ssd1306_Init+0xd0>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80038e6:	4b02      	ldr	r3, [pc, #8]	; (80038f0 <ssd1306_Init+0xd0>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	711a      	strb	r2, [r3, #4]
}
 80038ec:	bf00      	nop
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20001820 	.word	0x20001820

080038f4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	e00d      	b.n	8003920 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <ssd1306_Fill+0x1a>
 800390a:	2100      	movs	r1, #0
 800390c:	e000      	b.n	8003910 <ssd1306_Fill+0x1c>
 800390e:	21ff      	movs	r1, #255	; 0xff
 8003910:	4a09      	ldr	r2, [pc, #36]	; (8003938 <ssd1306_Fill+0x44>)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4413      	add	r3, r2
 8003916:	460a      	mov	r2, r1
 8003918:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3301      	adds	r3, #1
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003926:	d3ed      	bcc.n	8003904 <ssd1306_Fill+0x10>
    }
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20001420 	.word	0x20001420

0800393c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003942:	2300      	movs	r3, #0
 8003944:	71fb      	strb	r3, [r7, #7]
 8003946:	e016      	b.n	8003976 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	3b50      	subs	r3, #80	; 0x50
 800394c:	b2db      	uxtb	r3, r3
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff ff34 	bl	80037bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003954:	2000      	movs	r0, #0
 8003956:	f7ff ff31 	bl	80037bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800395a:	2010      	movs	r0, #16
 800395c:	f7ff ff2e 	bl	80037bc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	01db      	lsls	r3, r3, #7
 8003964:	4a08      	ldr	r2, [pc, #32]	; (8003988 <ssd1306_UpdateScreen+0x4c>)
 8003966:	4413      	add	r3, r2
 8003968:	2180      	movs	r1, #128	; 0x80
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ff3e 	bl	80037ec <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	3301      	adds	r3, #1
 8003974:	71fb      	strb	r3, [r7, #7]
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	2b07      	cmp	r3, #7
 800397a:	d9e5      	bls.n	8003948 <ssd1306_UpdateScreen+0xc>
    }
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20001420 	.word	0x20001420

0800398c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	71fb      	strb	r3, [r7, #7]
 8003996:	460b      	mov	r3, r1
 8003998:	71bb      	strb	r3, [r7, #6]
 800399a:	4613      	mov	r3, r2
 800399c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	db3d      	blt.n	8003a22 <ssd1306_DrawPixel+0x96>
 80039a6:	79bb      	ldrb	r3, [r7, #6]
 80039a8:	2b3f      	cmp	r3, #63	; 0x3f
 80039aa:	d83a      	bhi.n	8003a22 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80039ac:	797b      	ldrb	r3, [r7, #5]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d11a      	bne.n	80039e8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80039b2:	79fa      	ldrb	r2, [r7, #7]
 80039b4:	79bb      	ldrb	r3, [r7, #6]
 80039b6:	08db      	lsrs	r3, r3, #3
 80039b8:	b2d8      	uxtb	r0, r3
 80039ba:	4603      	mov	r3, r0
 80039bc:	01db      	lsls	r3, r3, #7
 80039be:	4413      	add	r3, r2
 80039c0:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <ssd1306_DrawPixel+0xa4>)
 80039c2:	5cd3      	ldrb	r3, [r2, r3]
 80039c4:	b25a      	sxtb	r2, r3
 80039c6:	79bb      	ldrb	r3, [r7, #6]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	2101      	movs	r1, #1
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	b25b      	sxtb	r3, r3
 80039d4:	4313      	orrs	r3, r2
 80039d6:	b259      	sxtb	r1, r3
 80039d8:	79fa      	ldrb	r2, [r7, #7]
 80039da:	4603      	mov	r3, r0
 80039dc:	01db      	lsls	r3, r3, #7
 80039de:	4413      	add	r3, r2
 80039e0:	b2c9      	uxtb	r1, r1
 80039e2:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <ssd1306_DrawPixel+0xa4>)
 80039e4:	54d1      	strb	r1, [r2, r3]
 80039e6:	e01d      	b.n	8003a24 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80039e8:	79fa      	ldrb	r2, [r7, #7]
 80039ea:	79bb      	ldrb	r3, [r7, #6]
 80039ec:	08db      	lsrs	r3, r3, #3
 80039ee:	b2d8      	uxtb	r0, r3
 80039f0:	4603      	mov	r3, r0
 80039f2:	01db      	lsls	r3, r3, #7
 80039f4:	4413      	add	r3, r2
 80039f6:	4a0e      	ldr	r2, [pc, #56]	; (8003a30 <ssd1306_DrawPixel+0xa4>)
 80039f8:	5cd3      	ldrb	r3, [r2, r3]
 80039fa:	b25a      	sxtb	r2, r3
 80039fc:	79bb      	ldrb	r3, [r7, #6]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f303 	lsl.w	r3, r1, r3
 8003a08:	b25b      	sxtb	r3, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	b25b      	sxtb	r3, r3
 8003a0e:	4013      	ands	r3, r2
 8003a10:	b259      	sxtb	r1, r3
 8003a12:	79fa      	ldrb	r2, [r7, #7]
 8003a14:	4603      	mov	r3, r0
 8003a16:	01db      	lsls	r3, r3, #7
 8003a18:	4413      	add	r3, r2
 8003a1a:	b2c9      	uxtb	r1, r1
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <ssd1306_DrawPixel+0xa4>)
 8003a1e:	54d1      	strb	r1, [r2, r3]
 8003a20:	e000      	b.n	8003a24 <ssd1306_DrawPixel+0x98>
        return;
 8003a22:	bf00      	nop
    }
}
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20001420 	.word	0x20001420

08003a34 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003a34:	b590      	push	{r4, r7, lr}
 8003a36:	b089      	sub	sp, #36	; 0x24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	1d38      	adds	r0, r7, #4
 8003a3e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003a42:	461a      	mov	r2, r3
 8003a44:	4623      	mov	r3, r4
 8003a46:	73fb      	strb	r3, [r7, #15]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b1f      	cmp	r3, #31
 8003a50:	d902      	bls.n	8003a58 <ssd1306_WriteChar+0x24>
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	2b7e      	cmp	r3, #126	; 0x7e
 8003a56:	d901      	bls.n	8003a5c <ssd1306_WriteChar+0x28>
        return 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e06d      	b.n	8003b38 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003a5c:	4b38      	ldr	r3, [pc, #224]	; (8003b40 <ssd1306_WriteChar+0x10c>)
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	793b      	ldrb	r3, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	2b80      	cmp	r3, #128	; 0x80
 8003a68:	dc06      	bgt.n	8003a78 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003a6a:	4b35      	ldr	r3, [pc, #212]	; (8003b40 <ssd1306_WriteChar+0x10c>)
 8003a6c:	885b      	ldrh	r3, [r3, #2]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	797b      	ldrb	r3, [r7, #5]
 8003a72:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003a74:	2b40      	cmp	r3, #64	; 0x40
 8003a76:	dd01      	ble.n	8003a7c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e05d      	b.n	8003b38 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	e04c      	b.n	8003b1c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	3b20      	subs	r3, #32
 8003a88:	7979      	ldrb	r1, [r7, #5]
 8003a8a:	fb01 f303 	mul.w	r3, r1, r3
 8003a8e:	4619      	mov	r1, r3
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	440b      	add	r3, r1
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	4413      	add	r3, r2
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e034      	b.n	8003b0c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d012      	beq.n	8003ad8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003ab2:	4b23      	ldr	r3, [pc, #140]	; (8003b40 <ssd1306_WriteChar+0x10c>)
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	4413      	add	r3, r2
 8003abe:	b2d8      	uxtb	r0, r3
 8003ac0:	4b1f      	ldr	r3, [pc, #124]	; (8003b40 <ssd1306_WriteChar+0x10c>)
 8003ac2:	885b      	ldrh	r3, [r3, #2]
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	7bba      	ldrb	r2, [r7, #14]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	f7ff ff5b 	bl	800398c <ssd1306_DrawPixel>
 8003ad6:	e016      	b.n	8003b06 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003ad8:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <ssd1306_WriteChar+0x10c>)
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	b2d8      	uxtb	r0, r3
 8003ae6:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <ssd1306_WriteChar+0x10c>)
 8003ae8:	885b      	ldrh	r3, [r3, #2]
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	b2d9      	uxtb	r1, r3
 8003af4:	7bbb      	ldrb	r3, [r7, #14]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	f7ff ff43 	bl	800398c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	793b      	ldrb	r3, [r7, #4]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d3c5      	bcc.n	8003aa2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	797b      	ldrb	r3, [r7, #5]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d3ad      	bcc.n	8003a82 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003b26:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <ssd1306_WriteChar+0x10c>)
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	793b      	ldrb	r3, [r7, #4]
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	4413      	add	r3, r2
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <ssd1306_WriteChar+0x10c>)
 8003b34:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3724      	adds	r7, #36	; 0x24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd90      	pop	{r4, r7, pc}
 8003b40:	20001820 	.word	0x20001820

08003b44 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	1d38      	adds	r0, r7, #4
 8003b4e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003b52:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003b54:	e012      	b.n	8003b7c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	7818      	ldrb	r0, [r3, #0]
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	1d3a      	adds	r2, r7, #4
 8003b5e:	ca06      	ldmia	r2, {r1, r2}
 8003b60:	f7ff ff68 	bl	8003a34 <ssd1306_WriteChar>
 8003b64:	4603      	mov	r3, r0
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d002      	beq.n	8003b76 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	e008      	b.n	8003b88 <ssd1306_WriteString+0x44>
        }
        str++;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1e8      	bne.n	8003b56 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	781b      	ldrb	r3, [r3, #0]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	460a      	mov	r2, r1
 8003b9a:	71fb      	strb	r3, [r7, #7]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <ssd1306_SetCursor+0x2c>)
 8003ba6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003ba8:	79bb      	ldrb	r3, [r7, #6]
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	4b03      	ldr	r3, [pc, #12]	; (8003bbc <ssd1306_SetCursor+0x2c>)
 8003bae:	805a      	strh	r2, [r3, #2]
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	20001820 	.word	0x20001820

08003bc0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003bca:	2381      	movs	r3, #129	; 0x81
 8003bcc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff fdf3 	bl	80037bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fdef 	bl	80037bc <ssd1306_WriteCommand>
}
 8003bde:	bf00      	nop
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003bf8:	23af      	movs	r3, #175	; 0xaf
 8003bfa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003bfc:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <ssd1306_SetDisplayOn+0x38>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	715a      	strb	r2, [r3, #5]
 8003c02:	e004      	b.n	8003c0e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003c04:	23ae      	movs	r3, #174	; 0xae
 8003c06:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <ssd1306_SetDisplayOn+0x38>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fdd3 	bl	80037bc <ssd1306_WriteCommand>
}
 8003c16:	bf00      	nop
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20001820 	.word	0x20001820

08003c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c28:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <HAL_Init+0x40>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a0d      	ldr	r2, [pc, #52]	; (8003c64 <HAL_Init+0x40>)
 8003c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_Init+0x40>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <HAL_Init+0x40>)
 8003c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <HAL_Init+0x40>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a07      	ldr	r2, [pc, #28]	; (8003c64 <HAL_Init+0x40>)
 8003c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c4c:	2003      	movs	r0, #3
 8003c4e:	f000 fbc1 	bl	80043d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c52:	200f      	movs	r0, #15
 8003c54:	f000 f808 	bl	8003c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c58:	f7fe fcf2 	bl	8002640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023c00 	.word	0x40023c00

08003c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c70:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <HAL_InitTick+0x54>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <HAL_InitTick+0x58>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fbd9 	bl	800443e <HAL_SYSTICK_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e00e      	b.n	8003cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b0f      	cmp	r3, #15
 8003c9a:	d80a      	bhi.n	8003cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca4:	f000 fba1 	bl	80043ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ca8:	4a06      	ldr	r2, [pc, #24]	; (8003cc4 <HAL_InitTick+0x5c>)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e000      	b.n	8003cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20000640 	.word	0x20000640
 8003cc0:	2000066c 	.word	0x2000066c
 8003cc4:	20000668 	.word	0x20000668

08003cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_IncTick+0x20>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_IncTick+0x24>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	4a04      	ldr	r2, [pc, #16]	; (8003cec <HAL_IncTick+0x24>)
 8003cda:	6013      	str	r3, [r2, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	2000066c 	.word	0x2000066c
 8003cec:	20001828 	.word	0x20001828

08003cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8003cf4:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <HAL_GetTick+0x14>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20001828 	.word	0x20001828

08003d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d10:	f7ff ffee 	bl	8003cf0 <HAL_GetTick>
 8003d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d005      	beq.n	8003d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <HAL_Delay+0x44>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d2e:	bf00      	nop
 8003d30:	f7ff ffde 	bl	8003cf0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d8f7      	bhi.n	8003d30 <HAL_Delay+0x28>
  {
  }
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	2000066c 	.word	0x2000066c

08003d50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e033      	b.n	8003dce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe fc8e 	bl	8002690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d118      	bne.n	8003dc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d96:	f023 0302 	bic.w	r3, r3, #2
 8003d9a:	f043 0202 	orr.w	r2, r3, #2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f94a 	bl	800403c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f023 0303 	bic.w	r3, r3, #3
 8003db6:	f043 0201 	orr.w	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40
 8003dbe:	e001      	b.n	8003dc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x1c>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e113      	b.n	800401c <HAL_ADC_ConfigChannel+0x244>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b09      	cmp	r3, #9
 8003e02:	d925      	bls.n	8003e50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68d9      	ldr	r1, [r3, #12]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	4613      	mov	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4413      	add	r3, r2
 8003e18:	3b1e      	subs	r3, #30
 8003e1a:	2207      	movs	r2, #7
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43da      	mvns	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	400a      	ands	r2, r1
 8003e28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68d9      	ldr	r1, [r3, #12]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4403      	add	r3, r0
 8003e42:	3b1e      	subs	r3, #30
 8003e44:	409a      	lsls	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	60da      	str	r2, [r3, #12]
 8003e4e:	e022      	b.n	8003e96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6919      	ldr	r1, [r3, #16]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4613      	mov	r3, r2
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	4413      	add	r3, r2
 8003e64:	2207      	movs	r2, #7
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43da      	mvns	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	400a      	ands	r2, r1
 8003e72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6919      	ldr	r1, [r3, #16]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	4618      	mov	r0, r3
 8003e86:	4603      	mov	r3, r0
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	4403      	add	r3, r0
 8003e8c:	409a      	lsls	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b06      	cmp	r3, #6
 8003e9c:	d824      	bhi.n	8003ee8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	3b05      	subs	r3, #5
 8003eb0:	221f      	movs	r2, #31
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	400a      	ands	r2, r1
 8003ebe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	4618      	mov	r0, r3
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3b05      	subs	r3, #5
 8003eda:	fa00 f203 	lsl.w	r2, r0, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ee6:	e04c      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b0c      	cmp	r3, #12
 8003eee:	d824      	bhi.n	8003f3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	3b23      	subs	r3, #35	; 0x23
 8003f02:	221f      	movs	r2, #31
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	43da      	mvns	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	400a      	ands	r2, r1
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	4618      	mov	r0, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	3b23      	subs	r3, #35	; 0x23
 8003f2c:	fa00 f203 	lsl.w	r2, r0, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30
 8003f38:	e023      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	3b41      	subs	r3, #65	; 0x41
 8003f4c:	221f      	movs	r2, #31
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43da      	mvns	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	400a      	ands	r2, r1
 8003f5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	4618      	mov	r0, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	3b41      	subs	r3, #65	; 0x41
 8003f76:	fa00 f203 	lsl.w	r2, r0, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f82:	4b29      	ldr	r3, [pc, #164]	; (8004028 <HAL_ADC_ConfigChannel+0x250>)
 8003f84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a28      	ldr	r2, [pc, #160]	; (800402c <HAL_ADC_ConfigChannel+0x254>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d10f      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x1d8>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b12      	cmp	r3, #18
 8003f96:	d10b      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1d      	ldr	r2, [pc, #116]	; (800402c <HAL_ADC_ConfigChannel+0x254>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d12b      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x23a>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a1c      	ldr	r2, [pc, #112]	; (8004030 <HAL_ADC_ConfigChannel+0x258>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d003      	beq.n	8003fcc <HAL_ADC_ConfigChannel+0x1f4>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b11      	cmp	r3, #17
 8003fca:	d122      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a11      	ldr	r2, [pc, #68]	; (8004030 <HAL_ADC_ConfigChannel+0x258>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d111      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <HAL_ADC_ConfigChannel+0x25c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a11      	ldr	r2, [pc, #68]	; (8004038 <HAL_ADC_ConfigChannel+0x260>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	0c9a      	lsrs	r2, r3, #18
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004004:	e002      	b.n	800400c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	3b01      	subs	r3, #1
 800400a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f9      	bne.n	8004006 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40012300 	.word	0x40012300
 800402c:	40012000 	.word	0x40012000
 8004030:	10000012 	.word	0x10000012
 8004034:	20000640 	.word	0x20000640
 8004038:	431bde83 	.word	0x431bde83

0800403c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004044:	4b79      	ldr	r3, [pc, #484]	; (800422c <ADC_Init+0x1f0>)
 8004046:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	431a      	orrs	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004070:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	021a      	lsls	r2, r3, #8
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004094:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6859      	ldr	r1, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6899      	ldr	r1, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	4a58      	ldr	r2, [pc, #352]	; (8004230 <ADC_Init+0x1f4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d022      	beq.n	800411a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6899      	ldr	r1, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004104:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6899      	ldr	r1, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	609a      	str	r2, [r3, #8]
 8004118:	e00f      	b.n	800413a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004128:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004138:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0202 	bic.w	r2, r2, #2
 8004148:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6899      	ldr	r1, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	7e1b      	ldrb	r3, [r3, #24]
 8004154:	005a      	lsls	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01b      	beq.n	80041a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004176:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004186:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6859      	ldr	r1, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	3b01      	subs	r3, #1
 8004194:	035a      	lsls	r2, r3, #13
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	e007      	b.n	80041b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	051a      	lsls	r2, r3, #20
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6899      	ldr	r1, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041f2:	025a      	lsls	r2, r3, #9
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6899      	ldr	r1, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	029a      	lsls	r2, r3, #10
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	40012300 	.word	0x40012300
 8004230:	0f000001 	.word	0x0f000001

08004234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004244:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <__NVIC_SetPriorityGrouping+0x44>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004250:	4013      	ands	r3, r2
 8004252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800425c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004266:	4a04      	ldr	r2, [pc, #16]	; (8004278 <__NVIC_SetPriorityGrouping+0x44>)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	60d3      	str	r3, [r2, #12]
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004280:	4b04      	ldr	r3, [pc, #16]	; (8004294 <__NVIC_GetPriorityGrouping+0x18>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	0a1b      	lsrs	r3, r3, #8
 8004286:	f003 0307 	and.w	r3, r3, #7
}
 800428a:	4618      	mov	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	e000ed00 	.word	0xe000ed00

08004298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	db0b      	blt.n	80042c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	f003 021f 	and.w	r2, r3, #31
 80042b0:	4907      	ldr	r1, [pc, #28]	; (80042d0 <__NVIC_EnableIRQ+0x38>)
 80042b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	2001      	movs	r0, #1
 80042ba:	fa00 f202 	lsl.w	r2, r0, r2
 80042be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	e000e100 	.word	0xe000e100

080042d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	6039      	str	r1, [r7, #0]
 80042de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	db0a      	blt.n	80042fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	490c      	ldr	r1, [pc, #48]	; (8004320 <__NVIC_SetPriority+0x4c>)
 80042ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f2:	0112      	lsls	r2, r2, #4
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	440b      	add	r3, r1
 80042f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042fc:	e00a      	b.n	8004314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	b2da      	uxtb	r2, r3
 8004302:	4908      	ldr	r1, [pc, #32]	; (8004324 <__NVIC_SetPriority+0x50>)
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	3b04      	subs	r3, #4
 800430c:	0112      	lsls	r2, r2, #4
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	440b      	add	r3, r1
 8004312:	761a      	strb	r2, [r3, #24]
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	e000e100 	.word	0xe000e100
 8004324:	e000ed00 	.word	0xe000ed00

08004328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004328:	b480      	push	{r7}
 800432a:	b089      	sub	sp, #36	; 0x24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f1c3 0307 	rsb	r3, r3, #7
 8004342:	2b04      	cmp	r3, #4
 8004344:	bf28      	it	cs
 8004346:	2304      	movcs	r3, #4
 8004348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3304      	adds	r3, #4
 800434e:	2b06      	cmp	r3, #6
 8004350:	d902      	bls.n	8004358 <NVIC_EncodePriority+0x30>
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	3b03      	subs	r3, #3
 8004356:	e000      	b.n	800435a <NVIC_EncodePriority+0x32>
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800435c:	f04f 32ff 	mov.w	r2, #4294967295
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43da      	mvns	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	401a      	ands	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004370:	f04f 31ff 	mov.w	r1, #4294967295
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	fa01 f303 	lsl.w	r3, r1, r3
 800437a:	43d9      	mvns	r1, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004380:	4313      	orrs	r3, r2
         );
}
 8004382:	4618      	mov	r0, r3
 8004384:	3724      	adds	r7, #36	; 0x24
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3b01      	subs	r3, #1
 800439c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043a0:	d301      	bcc.n	80043a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043a2:	2301      	movs	r3, #1
 80043a4:	e00f      	b.n	80043c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043a6:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <SysTick_Config+0x40>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ae:	210f      	movs	r1, #15
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	f7ff ff8e 	bl	80042d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <SysTick_Config+0x40>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043be:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <SysTick_Config+0x40>)
 80043c0:	2207      	movs	r2, #7
 80043c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	e000e010 	.word	0xe000e010

080043d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff ff29 	bl	8004234 <__NVIC_SetPriorityGrouping>
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b086      	sub	sp, #24
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	4603      	mov	r3, r0
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
 80043f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043fc:	f7ff ff3e 	bl	800427c <__NVIC_GetPriorityGrouping>
 8004400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	6978      	ldr	r0, [r7, #20]
 8004408:	f7ff ff8e 	bl	8004328 <NVIC_EncodePriority>
 800440c:	4602      	mov	r2, r0
 800440e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004412:	4611      	mov	r1, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff ff5d 	bl	80042d4 <__NVIC_SetPriority>
}
 800441a:	bf00      	nop
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	4603      	mov	r3, r0
 800442a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800442c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff ff31 	bl	8004298 <__NVIC_EnableIRQ>
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b082      	sub	sp, #8
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff ffa2 	bl	8004390 <SysTick_Config>
 800444c:	4603      	mov	r3, r0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004458:	b480      	push	{r7}
 800445a:	b089      	sub	sp, #36	; 0x24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004466:	2300      	movs	r3, #0
 8004468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800446a:	2300      	movs	r3, #0
 800446c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	e159      	b.n	8004728 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004474:	2201      	movs	r2, #1
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4013      	ands	r3, r2
 8004486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	429a      	cmp	r2, r3
 800448e:	f040 8148 	bne.w	8004722 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d005      	beq.n	80044aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d130      	bne.n	800450c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	2203      	movs	r2, #3
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	43db      	mvns	r3, r3
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	4013      	ands	r3, r2
 80044c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044e0:	2201      	movs	r2, #1
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	43db      	mvns	r3, r3
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4013      	ands	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	f003 0201 	and.w	r2, r3, #1
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4313      	orrs	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	2b03      	cmp	r3, #3
 8004516:	d017      	beq.n	8004548 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	2203      	movs	r2, #3
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d123      	bne.n	800459c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	08da      	lsrs	r2, r3, #3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3208      	adds	r2, #8
 800455c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004560:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	220f      	movs	r2, #15
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	4013      	ands	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	08da      	lsrs	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3208      	adds	r2, #8
 8004596:	69b9      	ldr	r1, [r7, #24]
 8004598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	2203      	movs	r2, #3
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 0203 	and.w	r2, r3, #3
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80a2 	beq.w	8004722 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	4b57      	ldr	r3, [pc, #348]	; (8004740 <HAL_GPIO_Init+0x2e8>)
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	4a56      	ldr	r2, [pc, #344]	; (8004740 <HAL_GPIO_Init+0x2e8>)
 80045e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045ec:	6453      	str	r3, [r2, #68]	; 0x44
 80045ee:	4b54      	ldr	r3, [pc, #336]	; (8004740 <HAL_GPIO_Init+0x2e8>)
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045fa:	4a52      	ldr	r2, [pc, #328]	; (8004744 <HAL_GPIO_Init+0x2ec>)
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	089b      	lsrs	r3, r3, #2
 8004600:	3302      	adds	r3, #2
 8004602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	220f      	movs	r2, #15
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	43db      	mvns	r3, r3
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4013      	ands	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a49      	ldr	r2, [pc, #292]	; (8004748 <HAL_GPIO_Init+0x2f0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d019      	beq.n	800465a <HAL_GPIO_Init+0x202>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a48      	ldr	r2, [pc, #288]	; (800474c <HAL_GPIO_Init+0x2f4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <HAL_GPIO_Init+0x1fe>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a47      	ldr	r2, [pc, #284]	; (8004750 <HAL_GPIO_Init+0x2f8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00d      	beq.n	8004652 <HAL_GPIO_Init+0x1fa>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a46      	ldr	r2, [pc, #280]	; (8004754 <HAL_GPIO_Init+0x2fc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <HAL_GPIO_Init+0x1f6>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a45      	ldr	r2, [pc, #276]	; (8004758 <HAL_GPIO_Init+0x300>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d101      	bne.n	800464a <HAL_GPIO_Init+0x1f2>
 8004646:	2304      	movs	r3, #4
 8004648:	e008      	b.n	800465c <HAL_GPIO_Init+0x204>
 800464a:	2307      	movs	r3, #7
 800464c:	e006      	b.n	800465c <HAL_GPIO_Init+0x204>
 800464e:	2303      	movs	r3, #3
 8004650:	e004      	b.n	800465c <HAL_GPIO_Init+0x204>
 8004652:	2302      	movs	r3, #2
 8004654:	e002      	b.n	800465c <HAL_GPIO_Init+0x204>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <HAL_GPIO_Init+0x204>
 800465a:	2300      	movs	r3, #0
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	f002 0203 	and.w	r2, r2, #3
 8004662:	0092      	lsls	r2, r2, #2
 8004664:	4093      	lsls	r3, r2
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	4313      	orrs	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800466c:	4935      	ldr	r1, [pc, #212]	; (8004744 <HAL_GPIO_Init+0x2ec>)
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	3302      	adds	r3, #2
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800467a:	4b38      	ldr	r3, [pc, #224]	; (800475c <HAL_GPIO_Init+0x304>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	43db      	mvns	r3, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4013      	ands	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800469e:	4a2f      	ldr	r2, [pc, #188]	; (800475c <HAL_GPIO_Init+0x304>)
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046a4:	4b2d      	ldr	r3, [pc, #180]	; (800475c <HAL_GPIO_Init+0x304>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4013      	ands	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046c8:	4a24      	ldr	r2, [pc, #144]	; (800475c <HAL_GPIO_Init+0x304>)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046ce:	4b23      	ldr	r3, [pc, #140]	; (800475c <HAL_GPIO_Init+0x304>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	43db      	mvns	r3, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4013      	ands	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046f2:	4a1a      	ldr	r2, [pc, #104]	; (800475c <HAL_GPIO_Init+0x304>)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046f8:	4b18      	ldr	r3, [pc, #96]	; (800475c <HAL_GPIO_Init+0x304>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	43db      	mvns	r3, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800471c:	4a0f      	ldr	r2, [pc, #60]	; (800475c <HAL_GPIO_Init+0x304>)
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	3301      	adds	r3, #1
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	2b0f      	cmp	r3, #15
 800472c:	f67f aea2 	bls.w	8004474 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	3724      	adds	r7, #36	; 0x24
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40023800 	.word	0x40023800
 8004744:	40013800 	.word	0x40013800
 8004748:	40020000 	.word	0x40020000
 800474c:	40020400 	.word	0x40020400
 8004750:	40020800 	.word	0x40020800
 8004754:	40020c00 	.word	0x40020c00
 8004758:	40021000 	.word	0x40021000
 800475c:	40013c00 	.word	0x40013c00

08004760 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	887b      	ldrh	r3, [r7, #2]
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
 800477c:	e001      	b.n	8004782 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004782:	7bfb      	ldrb	r3, [r7, #15]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	807b      	strh	r3, [r7, #2]
 800479c:	4613      	mov	r3, r2
 800479e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047a0:	787b      	ldrb	r3, [r7, #1]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047a6:	887a      	ldrh	r2, [r7, #2]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047ac:	e003      	b.n	80047b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047ae:	887b      	ldrh	r3, [r7, #2]
 80047b0:	041a      	lsls	r2, r3, #16
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	619a      	str	r2, [r3, #24]
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047ce:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d006      	beq.n	80047e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047da:	4a05      	ldr	r2, [pc, #20]	; (80047f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047dc:	88fb      	ldrh	r3, [r7, #6]
 80047de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fc fdb8 	bl	8001358 <HAL_GPIO_EXTI_Callback>
  }
}
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40013c00 	.word	0x40013c00

080047f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e12b      	b.n	8004a5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fd ff7c 	bl	8002718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2224      	movs	r2, #36	; 0x24
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0201 	bic.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004846:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004856:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004858:	f001 f858 	bl	800590c <HAL_RCC_GetPCLK1Freq>
 800485c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	4a81      	ldr	r2, [pc, #516]	; (8004a68 <HAL_I2C_Init+0x274>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d807      	bhi.n	8004878 <HAL_I2C_Init+0x84>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4a80      	ldr	r2, [pc, #512]	; (8004a6c <HAL_I2C_Init+0x278>)
 800486c:	4293      	cmp	r3, r2
 800486e:	bf94      	ite	ls
 8004870:	2301      	movls	r3, #1
 8004872:	2300      	movhi	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	e006      	b.n	8004886 <HAL_I2C_Init+0x92>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a7d      	ldr	r2, [pc, #500]	; (8004a70 <HAL_I2C_Init+0x27c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	bf94      	ite	ls
 8004880:	2301      	movls	r3, #1
 8004882:	2300      	movhi	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e0e7      	b.n	8004a5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4a78      	ldr	r2, [pc, #480]	; (8004a74 <HAL_I2C_Init+0x280>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	0c9b      	lsrs	r3, r3, #18
 8004898:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4a6a      	ldr	r2, [pc, #424]	; (8004a68 <HAL_I2C_Init+0x274>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d802      	bhi.n	80048c8 <HAL_I2C_Init+0xd4>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	3301      	adds	r3, #1
 80048c6:	e009      	b.n	80048dc <HAL_I2C_Init+0xe8>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	4a69      	ldr	r2, [pc, #420]	; (8004a78 <HAL_I2C_Init+0x284>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	099b      	lsrs	r3, r3, #6
 80048da:	3301      	adds	r3, #1
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	430b      	orrs	r3, r1
 80048e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	495c      	ldr	r1, [pc, #368]	; (8004a68 <HAL_I2C_Init+0x274>)
 80048f8:	428b      	cmp	r3, r1
 80048fa:	d819      	bhi.n	8004930 <HAL_I2C_Init+0x13c>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	1e59      	subs	r1, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb1 f3f3 	udiv	r3, r1, r3
 800490a:	1c59      	adds	r1, r3, #1
 800490c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004910:	400b      	ands	r3, r1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_I2C_Init+0x138>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1e59      	subs	r1, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb1 f3f3 	udiv	r3, r1, r3
 8004924:	3301      	adds	r3, #1
 8004926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800492a:	e051      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 800492c:	2304      	movs	r3, #4
 800492e:	e04f      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d111      	bne.n	800495c <HAL_I2C_Init+0x168>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1e58      	subs	r0, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6859      	ldr	r1, [r3, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	440b      	add	r3, r1
 8004946:	fbb0 f3f3 	udiv	r3, r0, r3
 800494a:	3301      	adds	r3, #1
 800494c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e012      	b.n	8004982 <HAL_I2C_Init+0x18e>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1e58      	subs	r0, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6859      	ldr	r1, [r3, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	0099      	lsls	r1, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004972:	3301      	adds	r3, #1
 8004974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_I2C_Init+0x196>
 8004986:	2301      	movs	r3, #1
 8004988:	e022      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10e      	bne.n	80049b0 <HAL_I2C_Init+0x1bc>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1e58      	subs	r0, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6859      	ldr	r1, [r3, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	440b      	add	r3, r1
 80049a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a4:	3301      	adds	r3, #1
 80049a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ae:	e00f      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1e58      	subs	r0, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	0099      	lsls	r1, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c6:	3301      	adds	r3, #1
 80049c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	6809      	ldr	r1, [r1, #0]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69da      	ldr	r2, [r3, #28]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6911      	ldr	r1, [r2, #16]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68d2      	ldr	r2, [r2, #12]
 8004a0a:	4311      	orrs	r1, r2
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	430b      	orrs	r3, r1
 8004a12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	000186a0 	.word	0x000186a0
 8004a6c:	001e847f 	.word	0x001e847f
 8004a70:	003d08ff 	.word	0x003d08ff
 8004a74:	431bde83 	.word	0x431bde83
 8004a78:	10624dd3 	.word	0x10624dd3

08004a7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	4608      	mov	r0, r1
 8004a86:	4611      	mov	r1, r2
 8004a88:	461a      	mov	r2, r3
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	817b      	strh	r3, [r7, #10]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	813b      	strh	r3, [r7, #8]
 8004a92:	4613      	mov	r3, r2
 8004a94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a96:	f7ff f92b 	bl	8003cf0 <HAL_GetTick>
 8004a9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	f040 80d9 	bne.w	8004c5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	2319      	movs	r3, #25
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	496d      	ldr	r1, [pc, #436]	; (8004c68 <HAL_I2C_Mem_Write+0x1ec>)
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f971 	bl	8004d9c <I2C_WaitOnFlagUntilTimeout>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e0cc      	b.n	8004c5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_I2C_Mem_Write+0x56>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e0c5      	b.n	8004c5e <HAL_I2C_Mem_Write+0x1e2>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d007      	beq.n	8004af8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2221      	movs	r2, #33	; 0x21
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2240      	movs	r2, #64	; 0x40
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a3a      	ldr	r2, [r7, #32]
 8004b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4a4d      	ldr	r2, [pc, #308]	; (8004c6c <HAL_I2C_Mem_Write+0x1f0>)
 8004b38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b3a:	88f8      	ldrh	r0, [r7, #6]
 8004b3c:	893a      	ldrh	r2, [r7, #8]
 8004b3e:	8979      	ldrh	r1, [r7, #10]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	4603      	mov	r3, r0
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f890 	bl	8004c70 <I2C_RequestMemoryWrite>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d052      	beq.n	8004bfc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e081      	b.n	8004c5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f9f2 	bl	8004f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00d      	beq.n	8004b86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d107      	bne.n	8004b82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e06b      	b.n	8004c5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	781a      	ldrb	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d11b      	bne.n	8004bfc <HAL_I2C_Mem_Write+0x180>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d017      	beq.n	8004bfc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	781a      	ldrb	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1aa      	bne.n	8004b5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f9de 	bl	8004fca <I2C_WaitOnBTFFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00d      	beq.n	8004c30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d107      	bne.n	8004c2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e016      	b.n	8004c5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e000      	b.n	8004c5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c5c:	2302      	movs	r3, #2
  }
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	00100002 	.word	0x00100002
 8004c6c:	ffff0000 	.word	0xffff0000

08004c70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	4608      	mov	r0, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	817b      	strh	r3, [r7, #10]
 8004c82:	460b      	mov	r3, r1
 8004c84:	813b      	strh	r3, [r7, #8]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 f878 	bl	8004d9c <I2C_WaitOnFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00d      	beq.n	8004cce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc0:	d103      	bne.n	8004cca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e05f      	b.n	8004d8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cce:	897b      	ldrh	r3, [r7, #10]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	6a3a      	ldr	r2, [r7, #32]
 8004ce2:	492d      	ldr	r1, [pc, #180]	; (8004d98 <I2C_RequestMemoryWrite+0x128>)
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f8b0 	bl	8004e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e04c      	b.n	8004d8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0c:	6a39      	ldr	r1, [r7, #32]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f91a 	bl	8004f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00d      	beq.n	8004d36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d107      	bne.n	8004d32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e02b      	b.n	8004d8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d105      	bne.n	8004d48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d3c:	893b      	ldrh	r3, [r7, #8]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	611a      	str	r2, [r3, #16]
 8004d46:	e021      	b.n	8004d8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d48:	893b      	ldrh	r3, [r7, #8]
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d58:	6a39      	ldr	r1, [r7, #32]
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f8f4 	bl	8004f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00d      	beq.n	8004d82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d107      	bne.n	8004d7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e005      	b.n	8004d8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d82:	893b      	ldrh	r3, [r7, #8]
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	00010002 	.word	0x00010002

08004d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dac:	e025      	b.n	8004dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	d021      	beq.n	8004dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db6:	f7fe ff9b 	bl	8003cf0 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d302      	bcc.n	8004dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d116      	bne.n	8004dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f043 0220 	orr.w	r2, r3, #32
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e023      	b.n	8004e42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	0c1b      	lsrs	r3, r3, #16
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d10d      	bne.n	8004e20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	43da      	mvns	r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	bf0c      	ite	eq
 8004e16:	2301      	moveq	r3, #1
 8004e18:	2300      	movne	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	e00c      	b.n	8004e3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	43da      	mvns	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	bf0c      	ite	eq
 8004e32:	2301      	moveq	r3, #1
 8004e34:	2300      	movne	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d0b6      	beq.n	8004dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	607a      	str	r2, [r7, #4]
 8004e56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e58:	e051      	b.n	8004efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e68:	d123      	bne.n	8004eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f043 0204 	orr.w	r2, r3, #4
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e046      	b.n	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d021      	beq.n	8004efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eba:	f7fe ff19 	bl	8003cf0 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d302      	bcc.n	8004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d116      	bne.n	8004efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	f043 0220 	orr.w	r2, r3, #32
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e020      	b.n	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	0c1b      	lsrs	r3, r3, #16
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d10c      	bne.n	8004f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	43da      	mvns	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4013      	ands	r3, r2
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bf14      	ite	ne
 8004f1a:	2301      	movne	r3, #1
 8004f1c:	2300      	moveq	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	e00b      	b.n	8004f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	43da      	mvns	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bf14      	ite	ne
 8004f34:	2301      	movne	r3, #1
 8004f36:	2300      	moveq	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d18d      	bne.n	8004e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f54:	e02d      	b.n	8004fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f878 	bl	800504c <I2C_IsAcknowledgeFailed>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e02d      	b.n	8004fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d021      	beq.n	8004fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f6e:	f7fe febf 	bl	8003cf0 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d302      	bcc.n	8004f84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d116      	bne.n	8004fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f043 0220 	orr.w	r2, r3, #32
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e007      	b.n	8004fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbc:	2b80      	cmp	r3, #128	; 0x80
 8004fbe:	d1ca      	bne.n	8004f56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fd6:	e02d      	b.n	8005034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f837 	bl	800504c <I2C_IsAcknowledgeFailed>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e02d      	b.n	8005044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d021      	beq.n	8005034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ff0:	f7fe fe7e 	bl	8003cf0 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d302      	bcc.n	8005006 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d116      	bne.n	8005034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	f043 0220 	orr.w	r2, r3, #32
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e007      	b.n	8005044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b04      	cmp	r3, #4
 8005040:	d1ca      	bne.n	8004fd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800505e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005062:	d11b      	bne.n	800509c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800506c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	f043 0204 	orr.w	r2, r3, #4
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
	...

080050ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e267      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d075      	beq.n	80051b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050ca:	4b88      	ldr	r3, [pc, #544]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 030c 	and.w	r3, r3, #12
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d00c      	beq.n	80050f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050d6:	4b85      	ldr	r3, [pc, #532]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050de:	2b08      	cmp	r3, #8
 80050e0:	d112      	bne.n	8005108 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050e2:	4b82      	ldr	r3, [pc, #520]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050ee:	d10b      	bne.n	8005108 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f0:	4b7e      	ldr	r3, [pc, #504]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d05b      	beq.n	80051b4 <HAL_RCC_OscConfig+0x108>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d157      	bne.n	80051b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e242      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005110:	d106      	bne.n	8005120 <HAL_RCC_OscConfig+0x74>
 8005112:	4b76      	ldr	r3, [pc, #472]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a75      	ldr	r2, [pc, #468]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 8005118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	e01d      	b.n	800515c <HAL_RCC_OscConfig+0xb0>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005128:	d10c      	bne.n	8005144 <HAL_RCC_OscConfig+0x98>
 800512a:	4b70      	ldr	r3, [pc, #448]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a6f      	ldr	r2, [pc, #444]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 8005130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	4b6d      	ldr	r3, [pc, #436]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a6c      	ldr	r2, [pc, #432]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 800513c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	e00b      	b.n	800515c <HAL_RCC_OscConfig+0xb0>
 8005144:	4b69      	ldr	r3, [pc, #420]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a68      	ldr	r2, [pc, #416]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 800514a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	4b66      	ldr	r3, [pc, #408]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a65      	ldr	r2, [pc, #404]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 8005156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800515a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d013      	beq.n	800518c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005164:	f7fe fdc4 	bl	8003cf0 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800516c:	f7fe fdc0 	bl	8003cf0 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b64      	cmp	r3, #100	; 0x64
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e207      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517e:	4b5b      	ldr	r3, [pc, #364]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f0      	beq.n	800516c <HAL_RCC_OscConfig+0xc0>
 800518a:	e014      	b.n	80051b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518c:	f7fe fdb0 	bl	8003cf0 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005194:	f7fe fdac 	bl	8003cf0 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b64      	cmp	r3, #100	; 0x64
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e1f3      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051a6:	4b51      	ldr	r3, [pc, #324]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCC_OscConfig+0xe8>
 80051b2:	e000      	b.n	80051b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d063      	beq.n	800528a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051c2:	4b4a      	ldr	r3, [pc, #296]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 030c 	and.w	r3, r3, #12
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00b      	beq.n	80051e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ce:	4b47      	ldr	r3, [pc, #284]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d11c      	bne.n	8005214 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051da:	4b44      	ldr	r3, [pc, #272]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d116      	bne.n	8005214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051e6:	4b41      	ldr	r3, [pc, #260]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d005      	beq.n	80051fe <HAL_RCC_OscConfig+0x152>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d001      	beq.n	80051fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e1c7      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fe:	4b3b      	ldr	r3, [pc, #236]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	4937      	ldr	r1, [pc, #220]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 800520e:	4313      	orrs	r3, r2
 8005210:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005212:	e03a      	b.n	800528a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d020      	beq.n	800525e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800521c:	4b34      	ldr	r3, [pc, #208]	; (80052f0 <HAL_RCC_OscConfig+0x244>)
 800521e:	2201      	movs	r2, #1
 8005220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005222:	f7fe fd65 	bl	8003cf0 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800522a:	f7fe fd61 	bl	8003cf0 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e1a8      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800523c:	4b2b      	ldr	r3, [pc, #172]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0f0      	beq.n	800522a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005248:	4b28      	ldr	r3, [pc, #160]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	4925      	ldr	r1, [pc, #148]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 8005258:	4313      	orrs	r3, r2
 800525a:	600b      	str	r3, [r1, #0]
 800525c:	e015      	b.n	800528a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800525e:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <HAL_RCC_OscConfig+0x244>)
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fe fd44 	bl	8003cf0 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800526c:	f7fe fd40 	bl	8003cf0 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e187      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800527e:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d036      	beq.n	8005304 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d016      	beq.n	80052cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800529e:	4b15      	ldr	r3, [pc, #84]	; (80052f4 <HAL_RCC_OscConfig+0x248>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a4:	f7fe fd24 	bl	8003cf0 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ac:	f7fe fd20 	bl	8003cf0 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e167      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052be:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <HAL_RCC_OscConfig+0x240>)
 80052c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0f0      	beq.n	80052ac <HAL_RCC_OscConfig+0x200>
 80052ca:	e01b      	b.n	8005304 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <HAL_RCC_OscConfig+0x248>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d2:	f7fe fd0d 	bl	8003cf0 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d8:	e00e      	b.n	80052f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052da:	f7fe fd09 	bl	8003cf0 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d907      	bls.n	80052f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e150      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
 80052ec:	40023800 	.word	0x40023800
 80052f0:	42470000 	.word	0x42470000
 80052f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f8:	4b88      	ldr	r3, [pc, #544]	; (800551c <HAL_RCC_OscConfig+0x470>)
 80052fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1ea      	bne.n	80052da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8097 	beq.w	8005440 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005312:	2300      	movs	r3, #0
 8005314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005316:	4b81      	ldr	r3, [pc, #516]	; (800551c <HAL_RCC_OscConfig+0x470>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10f      	bne.n	8005342 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005322:	2300      	movs	r3, #0
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	4b7d      	ldr	r3, [pc, #500]	; (800551c <HAL_RCC_OscConfig+0x470>)
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	4a7c      	ldr	r2, [pc, #496]	; (800551c <HAL_RCC_OscConfig+0x470>)
 800532c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005330:	6413      	str	r3, [r2, #64]	; 0x40
 8005332:	4b7a      	ldr	r3, [pc, #488]	; (800551c <HAL_RCC_OscConfig+0x470>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533a:	60bb      	str	r3, [r7, #8]
 800533c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800533e:	2301      	movs	r3, #1
 8005340:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005342:	4b77      	ldr	r3, [pc, #476]	; (8005520 <HAL_RCC_OscConfig+0x474>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534a:	2b00      	cmp	r3, #0
 800534c:	d118      	bne.n	8005380 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800534e:	4b74      	ldr	r3, [pc, #464]	; (8005520 <HAL_RCC_OscConfig+0x474>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a73      	ldr	r2, [pc, #460]	; (8005520 <HAL_RCC_OscConfig+0x474>)
 8005354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800535a:	f7fe fcc9 	bl	8003cf0 <HAL_GetTick>
 800535e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005360:	e008      	b.n	8005374 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005362:	f7fe fcc5 	bl	8003cf0 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e10c      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005374:	4b6a      	ldr	r3, [pc, #424]	; (8005520 <HAL_RCC_OscConfig+0x474>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0f0      	beq.n	8005362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d106      	bne.n	8005396 <HAL_RCC_OscConfig+0x2ea>
 8005388:	4b64      	ldr	r3, [pc, #400]	; (800551c <HAL_RCC_OscConfig+0x470>)
 800538a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538c:	4a63      	ldr	r2, [pc, #396]	; (800551c <HAL_RCC_OscConfig+0x470>)
 800538e:	f043 0301 	orr.w	r3, r3, #1
 8005392:	6713      	str	r3, [r2, #112]	; 0x70
 8005394:	e01c      	b.n	80053d0 <HAL_RCC_OscConfig+0x324>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	2b05      	cmp	r3, #5
 800539c:	d10c      	bne.n	80053b8 <HAL_RCC_OscConfig+0x30c>
 800539e:	4b5f      	ldr	r3, [pc, #380]	; (800551c <HAL_RCC_OscConfig+0x470>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	4a5e      	ldr	r2, [pc, #376]	; (800551c <HAL_RCC_OscConfig+0x470>)
 80053a4:	f043 0304 	orr.w	r3, r3, #4
 80053a8:	6713      	str	r3, [r2, #112]	; 0x70
 80053aa:	4b5c      	ldr	r3, [pc, #368]	; (800551c <HAL_RCC_OscConfig+0x470>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ae:	4a5b      	ldr	r2, [pc, #364]	; (800551c <HAL_RCC_OscConfig+0x470>)
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	6713      	str	r3, [r2, #112]	; 0x70
 80053b6:	e00b      	b.n	80053d0 <HAL_RCC_OscConfig+0x324>
 80053b8:	4b58      	ldr	r3, [pc, #352]	; (800551c <HAL_RCC_OscConfig+0x470>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053bc:	4a57      	ldr	r2, [pc, #348]	; (800551c <HAL_RCC_OscConfig+0x470>)
 80053be:	f023 0301 	bic.w	r3, r3, #1
 80053c2:	6713      	str	r3, [r2, #112]	; 0x70
 80053c4:	4b55      	ldr	r3, [pc, #340]	; (800551c <HAL_RCC_OscConfig+0x470>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c8:	4a54      	ldr	r2, [pc, #336]	; (800551c <HAL_RCC_OscConfig+0x470>)
 80053ca:	f023 0304 	bic.w	r3, r3, #4
 80053ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d015      	beq.n	8005404 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d8:	f7fe fc8a 	bl	8003cf0 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053de:	e00a      	b.n	80053f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e0:	f7fe fc86 	bl	8003cf0 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e0cb      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f6:	4b49      	ldr	r3, [pc, #292]	; (800551c <HAL_RCC_OscConfig+0x470>)
 80053f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0ee      	beq.n	80053e0 <HAL_RCC_OscConfig+0x334>
 8005402:	e014      	b.n	800542e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005404:	f7fe fc74 	bl	8003cf0 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800540a:	e00a      	b.n	8005422 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800540c:	f7fe fc70 	bl	8003cf0 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	f241 3288 	movw	r2, #5000	; 0x1388
 800541a:	4293      	cmp	r3, r2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e0b5      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005422:	4b3e      	ldr	r3, [pc, #248]	; (800551c <HAL_RCC_OscConfig+0x470>)
 8005424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1ee      	bne.n	800540c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800542e:	7dfb      	ldrb	r3, [r7, #23]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d105      	bne.n	8005440 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005434:	4b39      	ldr	r3, [pc, #228]	; (800551c <HAL_RCC_OscConfig+0x470>)
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	4a38      	ldr	r2, [pc, #224]	; (800551c <HAL_RCC_OscConfig+0x470>)
 800543a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800543e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80a1 	beq.w	800558c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800544a:	4b34      	ldr	r3, [pc, #208]	; (800551c <HAL_RCC_OscConfig+0x470>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 030c 	and.w	r3, r3, #12
 8005452:	2b08      	cmp	r3, #8
 8005454:	d05c      	beq.n	8005510 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	2b02      	cmp	r3, #2
 800545c:	d141      	bne.n	80054e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545e:	4b31      	ldr	r3, [pc, #196]	; (8005524 <HAL_RCC_OscConfig+0x478>)
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005464:	f7fe fc44 	bl	8003cf0 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800546c:	f7fe fc40 	bl	8003cf0 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e087      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800547e:	4b27      	ldr	r3, [pc, #156]	; (800551c <HAL_RCC_OscConfig+0x470>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f0      	bne.n	800546c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69da      	ldr	r2, [r3, #28]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	019b      	lsls	r3, r3, #6
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	085b      	lsrs	r3, r3, #1
 80054a2:	3b01      	subs	r3, #1
 80054a4:	041b      	lsls	r3, r3, #16
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	061b      	lsls	r3, r3, #24
 80054ae:	491b      	ldr	r1, [pc, #108]	; (800551c <HAL_RCC_OscConfig+0x470>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054b4:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <HAL_RCC_OscConfig+0x478>)
 80054b6:	2201      	movs	r2, #1
 80054b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ba:	f7fe fc19 	bl	8003cf0 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054c2:	f7fe fc15 	bl	8003cf0 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e05c      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d4:	4b11      	ldr	r3, [pc, #68]	; (800551c <HAL_RCC_OscConfig+0x470>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0f0      	beq.n	80054c2 <HAL_RCC_OscConfig+0x416>
 80054e0:	e054      	b.n	800558c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e2:	4b10      	ldr	r3, [pc, #64]	; (8005524 <HAL_RCC_OscConfig+0x478>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e8:	f7fe fc02 	bl	8003cf0 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054f0:	f7fe fbfe 	bl	8003cf0 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e045      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <HAL_RCC_OscConfig+0x470>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f0      	bne.n	80054f0 <HAL_RCC_OscConfig+0x444>
 800550e:	e03d      	b.n	800558c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d107      	bne.n	8005528 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e038      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
 800551c:	40023800 	.word	0x40023800
 8005520:	40007000 	.word	0x40007000
 8005524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005528:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <HAL_RCC_OscConfig+0x4ec>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d028      	beq.n	8005588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005540:	429a      	cmp	r2, r3
 8005542:	d121      	bne.n	8005588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800554e:	429a      	cmp	r2, r3
 8005550:	d11a      	bne.n	8005588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005558:	4013      	ands	r3, r2
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800555e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005560:	4293      	cmp	r3, r2
 8005562:	d111      	bne.n	8005588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	085b      	lsrs	r3, r3, #1
 8005570:	3b01      	subs	r3, #1
 8005572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005574:	429a      	cmp	r2, r3
 8005576:	d107      	bne.n	8005588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005584:	429a      	cmp	r2, r3
 8005586:	d001      	beq.n	800558c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	40023800 	.word	0x40023800

0800559c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e0cc      	b.n	800574a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055b0:	4b68      	ldr	r3, [pc, #416]	; (8005754 <HAL_RCC_ClockConfig+0x1b8>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d90c      	bls.n	80055d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055be:	4b65      	ldr	r3, [pc, #404]	; (8005754 <HAL_RCC_ClockConfig+0x1b8>)
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055c6:	4b63      	ldr	r3, [pc, #396]	; (8005754 <HAL_RCC_ClockConfig+0x1b8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d001      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0b8      	b.n	800574a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d020      	beq.n	8005626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055f0:	4b59      	ldr	r3, [pc, #356]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	4a58      	ldr	r2, [pc, #352]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0308 	and.w	r3, r3, #8
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005608:	4b53      	ldr	r3, [pc, #332]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	4a52      	ldr	r2, [pc, #328]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 800560e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005614:	4b50      	ldr	r3, [pc, #320]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	494d      	ldr	r1, [pc, #308]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	4313      	orrs	r3, r2
 8005624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d044      	beq.n	80056bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d107      	bne.n	800564a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563a:	4b47      	ldr	r3, [pc, #284]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d119      	bne.n	800567a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e07f      	b.n	800574a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d003      	beq.n	800565a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005656:	2b03      	cmp	r3, #3
 8005658:	d107      	bne.n	800566a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800565a:	4b3f      	ldr	r3, [pc, #252]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e06f      	b.n	800574a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800566a:	4b3b      	ldr	r3, [pc, #236]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e067      	b.n	800574a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800567a:	4b37      	ldr	r3, [pc, #220]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f023 0203 	bic.w	r2, r3, #3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	4934      	ldr	r1, [pc, #208]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 8005688:	4313      	orrs	r3, r2
 800568a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800568c:	f7fe fb30 	bl	8003cf0 <HAL_GetTick>
 8005690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005692:	e00a      	b.n	80056aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005694:	f7fe fb2c 	bl	8003cf0 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e04f      	b.n	800574a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056aa:	4b2b      	ldr	r3, [pc, #172]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 020c 	and.w	r2, r3, #12
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d1eb      	bne.n	8005694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056bc:	4b25      	ldr	r3, [pc, #148]	; (8005754 <HAL_RCC_ClockConfig+0x1b8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d20c      	bcs.n	80056e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ca:	4b22      	ldr	r3, [pc, #136]	; (8005754 <HAL_RCC_ClockConfig+0x1b8>)
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d2:	4b20      	ldr	r3, [pc, #128]	; (8005754 <HAL_RCC_ClockConfig+0x1b8>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d001      	beq.n	80056e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e032      	b.n	800574a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d008      	beq.n	8005702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056f0:	4b19      	ldr	r3, [pc, #100]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	4916      	ldr	r1, [pc, #88]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0308 	and.w	r3, r3, #8
 800570a:	2b00      	cmp	r3, #0
 800570c:	d009      	beq.n	8005722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800570e:	4b12      	ldr	r3, [pc, #72]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	490e      	ldr	r1, [pc, #56]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	4313      	orrs	r3, r2
 8005720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005722:	f000 f821 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8005726:	4602      	mov	r2, r0
 8005728:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	091b      	lsrs	r3, r3, #4
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	490a      	ldr	r1, [pc, #40]	; (800575c <HAL_RCC_ClockConfig+0x1c0>)
 8005734:	5ccb      	ldrb	r3, [r1, r3]
 8005736:	fa22 f303 	lsr.w	r3, r2, r3
 800573a:	4a09      	ldr	r2, [pc, #36]	; (8005760 <HAL_RCC_ClockConfig+0x1c4>)
 800573c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800573e:	4b09      	ldr	r3, [pc, #36]	; (8005764 <HAL_RCC_ClockConfig+0x1c8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7fe fa90 	bl	8003c68 <HAL_InitTick>

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	40023c00 	.word	0x40023c00
 8005758:	40023800 	.word	0x40023800
 800575c:	0800d55c 	.word	0x0800d55c
 8005760:	20000640 	.word	0x20000640
 8005764:	20000668 	.word	0x20000668

08005768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800576c:	b090      	sub	sp, #64	; 0x40
 800576e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	637b      	str	r3, [r7, #52]	; 0x34
 8005774:	2300      	movs	r3, #0
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005778:	2300      	movs	r3, #0
 800577a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005780:	4b59      	ldr	r3, [pc, #356]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 030c 	and.w	r3, r3, #12
 8005788:	2b08      	cmp	r3, #8
 800578a:	d00d      	beq.n	80057a8 <HAL_RCC_GetSysClockFreq+0x40>
 800578c:	2b08      	cmp	r3, #8
 800578e:	f200 80a1 	bhi.w	80058d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <HAL_RCC_GetSysClockFreq+0x34>
 8005796:	2b04      	cmp	r3, #4
 8005798:	d003      	beq.n	80057a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800579a:	e09b      	b.n	80058d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800579c:	4b53      	ldr	r3, [pc, #332]	; (80058ec <HAL_RCC_GetSysClockFreq+0x184>)
 800579e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80057a0:	e09b      	b.n	80058da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057a2:	4b53      	ldr	r3, [pc, #332]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80057a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057a6:	e098      	b.n	80058da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057a8:	4b4f      	ldr	r3, [pc, #316]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057b2:	4b4d      	ldr	r3, [pc, #308]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d028      	beq.n	8005810 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057be:	4b4a      	ldr	r3, [pc, #296]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	099b      	lsrs	r3, r3, #6
 80057c4:	2200      	movs	r2, #0
 80057c6:	623b      	str	r3, [r7, #32]
 80057c8:	627a      	str	r2, [r7, #36]	; 0x24
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80057d0:	2100      	movs	r1, #0
 80057d2:	4b47      	ldr	r3, [pc, #284]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80057d4:	fb03 f201 	mul.w	r2, r3, r1
 80057d8:	2300      	movs	r3, #0
 80057da:	fb00 f303 	mul.w	r3, r0, r3
 80057de:	4413      	add	r3, r2
 80057e0:	4a43      	ldr	r2, [pc, #268]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80057e2:	fba0 1202 	umull	r1, r2, r0, r2
 80057e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057e8:	460a      	mov	r2, r1
 80057ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80057ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ee:	4413      	add	r3, r2
 80057f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f4:	2200      	movs	r2, #0
 80057f6:	61bb      	str	r3, [r7, #24]
 80057f8:	61fa      	str	r2, [r7, #28]
 80057fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005802:	f7fb f9f9 	bl	8000bf8 <__aeabi_uldivmod>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4613      	mov	r3, r2
 800580c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800580e:	e053      	b.n	80058b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005810:	4b35      	ldr	r3, [pc, #212]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	099b      	lsrs	r3, r3, #6
 8005816:	2200      	movs	r2, #0
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	617a      	str	r2, [r7, #20]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005822:	f04f 0b00 	mov.w	fp, #0
 8005826:	4652      	mov	r2, sl
 8005828:	465b      	mov	r3, fp
 800582a:	f04f 0000 	mov.w	r0, #0
 800582e:	f04f 0100 	mov.w	r1, #0
 8005832:	0159      	lsls	r1, r3, #5
 8005834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005838:	0150      	lsls	r0, r2, #5
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	ebb2 080a 	subs.w	r8, r2, sl
 8005842:	eb63 090b 	sbc.w	r9, r3, fp
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005852:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005856:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800585a:	ebb2 0408 	subs.w	r4, r2, r8
 800585e:	eb63 0509 	sbc.w	r5, r3, r9
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	f04f 0300 	mov.w	r3, #0
 800586a:	00eb      	lsls	r3, r5, #3
 800586c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005870:	00e2      	lsls	r2, r4, #3
 8005872:	4614      	mov	r4, r2
 8005874:	461d      	mov	r5, r3
 8005876:	eb14 030a 	adds.w	r3, r4, sl
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	eb45 030b 	adc.w	r3, r5, fp
 8005880:	607b      	str	r3, [r7, #4]
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800588e:	4629      	mov	r1, r5
 8005890:	028b      	lsls	r3, r1, #10
 8005892:	4621      	mov	r1, r4
 8005894:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005898:	4621      	mov	r1, r4
 800589a:	028a      	lsls	r2, r1, #10
 800589c:	4610      	mov	r0, r2
 800589e:	4619      	mov	r1, r3
 80058a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a2:	2200      	movs	r2, #0
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	60fa      	str	r2, [r7, #12]
 80058a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058ac:	f7fb f9a4 	bl	8000bf8 <__aeabi_uldivmod>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4613      	mov	r3, r2
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058b8:	4b0b      	ldr	r3, [pc, #44]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	0c1b      	lsrs	r3, r3, #16
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	3301      	adds	r3, #1
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80058c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058d2:	e002      	b.n	80058da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058d4:	4b05      	ldr	r3, [pc, #20]	; (80058ec <HAL_RCC_GetSysClockFreq+0x184>)
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3740      	adds	r7, #64	; 0x40
 80058e0:	46bd      	mov	sp, r7
 80058e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058e6:	bf00      	nop
 80058e8:	40023800 	.word	0x40023800
 80058ec:	00f42400 	.word	0x00f42400
 80058f0:	017d7840 	.word	0x017d7840

080058f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058f8:	4b03      	ldr	r3, [pc, #12]	; (8005908 <HAL_RCC_GetHCLKFreq+0x14>)
 80058fa:	681b      	ldr	r3, [r3, #0]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	20000640 	.word	0x20000640

0800590c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005910:	f7ff fff0 	bl	80058f4 <HAL_RCC_GetHCLKFreq>
 8005914:	4602      	mov	r2, r0
 8005916:	4b05      	ldr	r3, [pc, #20]	; (800592c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	0a9b      	lsrs	r3, r3, #10
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	4903      	ldr	r1, [pc, #12]	; (8005930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005922:	5ccb      	ldrb	r3, [r1, r3]
 8005924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005928:	4618      	mov	r0, r3
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40023800 	.word	0x40023800
 8005930:	0800d56c 	.word	0x0800d56c

08005934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005938:	f7ff ffdc 	bl	80058f4 <HAL_RCC_GetHCLKFreq>
 800593c:	4602      	mov	r2, r0
 800593e:	4b05      	ldr	r3, [pc, #20]	; (8005954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	0b5b      	lsrs	r3, r3, #13
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	4903      	ldr	r1, [pc, #12]	; (8005958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800594a:	5ccb      	ldrb	r3, [r1, r3]
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005950:	4618      	mov	r0, r3
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40023800 	.word	0x40023800
 8005958:	0800d56c 	.word	0x0800d56c

0800595c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e07b      	b.n	8005a66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	2b00      	cmp	r3, #0
 8005974:	d108      	bne.n	8005988 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800597e:	d009      	beq.n	8005994 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	61da      	str	r2, [r3, #28]
 8005986:	e005      	b.n	8005994 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fc ff40 	bl	8002834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a18:	ea42 0103 	orr.w	r1, r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	0c1b      	lsrs	r3, r3, #16
 8005a32:	f003 0104 	and.w	r1, r3, #4
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	f003 0210 	and.w	r2, r3, #16
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69da      	ldr	r2, [r3, #28]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b088      	sub	sp, #32
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_SPI_Transmit+0x22>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e126      	b.n	8005cde <HAL_SPI_Transmit+0x270>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a98:	f7fe f92a 	bl	8003cf0 <HAL_GetTick>
 8005a9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d002      	beq.n	8005ab4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005aae:	2302      	movs	r3, #2
 8005ab0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ab2:	e10b      	b.n	8005ccc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <HAL_SPI_Transmit+0x52>
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d102      	bne.n	8005ac6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ac4:	e102      	b.n	8005ccc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2203      	movs	r2, #3
 8005aca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	88fa      	ldrh	r2, [r7, #6]
 8005ade:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	88fa      	ldrh	r2, [r7, #6]
 8005ae4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b0c:	d10f      	bne.n	8005b2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b38:	2b40      	cmp	r3, #64	; 0x40
 8005b3a:	d007      	beq.n	8005b4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b54:	d14b      	bne.n	8005bee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_SPI_Transmit+0xf6>
 8005b5e:	8afb      	ldrh	r3, [r7, #22]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d13e      	bne.n	8005be2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	881a      	ldrh	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	1c9a      	adds	r2, r3, #2
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b88:	e02b      	b.n	8005be2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d112      	bne.n	8005bbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	881a      	ldrh	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	1c9a      	adds	r2, r3, #2
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bbc:	e011      	b.n	8005be2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bbe:	f7fe f897 	bl	8003cf0 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d803      	bhi.n	8005bd6 <HAL_SPI_Transmit+0x168>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd4:	d102      	bne.n	8005bdc <HAL_SPI_Transmit+0x16e>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d102      	bne.n	8005be2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005be0:	e074      	b.n	8005ccc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1ce      	bne.n	8005b8a <HAL_SPI_Transmit+0x11c>
 8005bec:	e04c      	b.n	8005c88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <HAL_SPI_Transmit+0x18e>
 8005bf6:	8afb      	ldrh	r3, [r7, #22]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d140      	bne.n	8005c7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	330c      	adds	r3, #12
 8005c06:	7812      	ldrb	r2, [r2, #0]
 8005c08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c22:	e02c      	b.n	8005c7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d113      	bne.n	8005c5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	7812      	ldrb	r2, [r2, #0]
 8005c3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c58:	e011      	b.n	8005c7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c5a:	f7fe f849 	bl	8003cf0 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d803      	bhi.n	8005c72 <HAL_SPI_Transmit+0x204>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c70:	d102      	bne.n	8005c78 <HAL_SPI_Transmit+0x20a>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d102      	bne.n	8005c7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c7c:	e026      	b.n	8005ccc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1cd      	bne.n	8005c24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	6839      	ldr	r1, [r7, #0]
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 fa55 	bl	800613c <SPI_EndRxTxTransaction>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	77fb      	strb	r3, [r7, #31]
 8005cc8:	e000      	b.n	8005ccc <HAL_SPI_Transmit+0x25e>
  }

error:
 8005cca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3720      	adds	r7, #32
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b08c      	sub	sp, #48	; 0x30
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
 8005cf2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x26>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e18a      	b.n	8006022 <HAL_SPI_TransmitReceive+0x33c>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d14:	f7fd ffec 	bl	8003cf0 <HAL_GetTick>
 8005d18:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d2a:	887b      	ldrh	r3, [r7, #2]
 8005d2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d00f      	beq.n	8005d56 <HAL_SPI_TransmitReceive+0x70>
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d3c:	d107      	bne.n	8005d4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d103      	bne.n	8005d4e <HAL_SPI_TransmitReceive+0x68>
 8005d46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d003      	beq.n	8005d56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d54:	e15b      	b.n	800600e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <HAL_SPI_TransmitReceive+0x82>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <HAL_SPI_TransmitReceive+0x82>
 8005d62:	887b      	ldrh	r3, [r7, #2]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d103      	bne.n	8005d70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d6e:	e14e      	b.n	800600e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d003      	beq.n	8005d84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2205      	movs	r2, #5
 8005d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	887a      	ldrh	r2, [r7, #2]
 8005d94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	887a      	ldrh	r2, [r7, #2]
 8005d9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	887a      	ldrh	r2, [r7, #2]
 8005da6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	887a      	ldrh	r2, [r7, #2]
 8005dac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc4:	2b40      	cmp	r3, #64	; 0x40
 8005dc6:	d007      	beq.n	8005dd8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de0:	d178      	bne.n	8005ed4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <HAL_SPI_TransmitReceive+0x10a>
 8005dea:	8b7b      	ldrh	r3, [r7, #26]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d166      	bne.n	8005ebe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	881a      	ldrh	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e00:	1c9a      	adds	r2, r3, #2
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e14:	e053      	b.n	8005ebe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d11b      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x176>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d016      	beq.n	8005e5c <HAL_SPI_TransmitReceive+0x176>
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d113      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	881a      	ldrh	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	1c9a      	adds	r2, r3, #2
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d119      	bne.n	8005e9e <HAL_SPI_TransmitReceive+0x1b8>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d014      	beq.n	8005e9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	b292      	uxth	r2, r2
 8005e80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	1c9a      	adds	r2, r3, #2
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e9e:	f7fd ff27 	bl	8003cf0 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d807      	bhi.n	8005ebe <HAL_SPI_TransmitReceive+0x1d8>
 8005eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb4:	d003      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ebc:	e0a7      	b.n	800600e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1a6      	bne.n	8005e16 <HAL_SPI_TransmitReceive+0x130>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1a1      	bne.n	8005e16 <HAL_SPI_TransmitReceive+0x130>
 8005ed2:	e07c      	b.n	8005fce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <HAL_SPI_TransmitReceive+0x1fc>
 8005edc:	8b7b      	ldrh	r3, [r7, #26]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d16b      	bne.n	8005fba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	330c      	adds	r3, #12
 8005eec:	7812      	ldrb	r2, [r2, #0]
 8005eee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f08:	e057      	b.n	8005fba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d11c      	bne.n	8005f52 <HAL_SPI_TransmitReceive+0x26c>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d017      	beq.n	8005f52 <HAL_SPI_TransmitReceive+0x26c>
 8005f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d114      	bne.n	8005f52 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	330c      	adds	r3, #12
 8005f32:	7812      	ldrb	r2, [r2, #0]
 8005f34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d119      	bne.n	8005f94 <HAL_SPI_TransmitReceive+0x2ae>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d014      	beq.n	8005f94 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f90:	2301      	movs	r3, #1
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f94:	f7fd feac 	bl	8003cf0 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d803      	bhi.n	8005fac <HAL_SPI_TransmitReceive+0x2c6>
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005faa:	d102      	bne.n	8005fb2 <HAL_SPI_TransmitReceive+0x2cc>
 8005fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d103      	bne.n	8005fba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005fb8:	e029      	b.n	800600e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1a2      	bne.n	8005f0a <HAL_SPI_TransmitReceive+0x224>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d19d      	bne.n	8005f0a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f8b2 	bl	800613c <SPI_EndRxTxTransaction>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d006      	beq.n	8005fec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005fea:	e010      	b.n	800600e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10b      	bne.n	800600c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	e000      	b.n	800600e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800600c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800601e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006022:	4618      	mov	r0, r3
 8006024:	3730      	adds	r7, #48	; 0x30
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	4613      	mov	r3, r2
 800603a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800603c:	f7fd fe58 	bl	8003cf0 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	4413      	add	r3, r2
 800604a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800604c:	f7fd fe50 	bl	8003cf0 <HAL_GetTick>
 8006050:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006052:	4b39      	ldr	r3, [pc, #228]	; (8006138 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	015b      	lsls	r3, r3, #5
 8006058:	0d1b      	lsrs	r3, r3, #20
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	fb02 f303 	mul.w	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006062:	e054      	b.n	800610e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606a:	d050      	beq.n	800610e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800606c:	f7fd fe40 	bl	8003cf0 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	429a      	cmp	r2, r3
 800607a:	d902      	bls.n	8006082 <SPI_WaitFlagStateUntilTimeout+0x56>
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d13d      	bne.n	80060fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006090:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800609a:	d111      	bne.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a4:	d004      	beq.n	80060b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ae:	d107      	bne.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c8:	d10f      	bne.n	80060ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e017      	b.n	800612e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	3b01      	subs	r3, #1
 800610c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4013      	ands	r3, r2
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	429a      	cmp	r2, r3
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	429a      	cmp	r2, r3
 800612a:	d19b      	bne.n	8006064 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000640 	.word	0x20000640

0800613c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af02      	add	r7, sp, #8
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006148:	4b1b      	ldr	r3, [pc, #108]	; (80061b8 <SPI_EndRxTxTransaction+0x7c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a1b      	ldr	r2, [pc, #108]	; (80061bc <SPI_EndRxTxTransaction+0x80>)
 800614e:	fba2 2303 	umull	r2, r3, r2, r3
 8006152:	0d5b      	lsrs	r3, r3, #21
 8006154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006158:	fb02 f303 	mul.w	r3, r2, r3
 800615c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006166:	d112      	bne.n	800618e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2200      	movs	r2, #0
 8006170:	2180      	movs	r1, #128	; 0x80
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7ff ff5a 	bl	800602c <SPI_WaitFlagStateUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d016      	beq.n	80061ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006182:	f043 0220 	orr.w	r2, r3, #32
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e00f      	b.n	80061ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	3b01      	subs	r3, #1
 8006198:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a4:	2b80      	cmp	r3, #128	; 0x80
 80061a6:	d0f2      	beq.n	800618e <SPI_EndRxTxTransaction+0x52>
 80061a8:	e000      	b.n	80061ac <SPI_EndRxTxTransaction+0x70>
        break;
 80061aa:	bf00      	nop
  }

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000640 	.word	0x20000640
 80061bc:	165e9f81 	.word	0x165e9f81

080061c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e041      	b.n	8006256 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fc fbc4 	bl	8002974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3304      	adds	r3, #4
 80061fc:	4619      	mov	r1, r3
 80061fe:	4610      	mov	r0, r2
 8006200:	f000 fe52 	bl	8006ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	d001      	beq.n	8006278 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e03c      	b.n	80062f2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <HAL_TIM_Base_Start+0xa0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d018      	beq.n	80062bc <HAL_TIM_Base_Start+0x5c>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006292:	d013      	beq.n	80062bc <HAL_TIM_Base_Start+0x5c>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a1a      	ldr	r2, [pc, #104]	; (8006304 <HAL_TIM_Base_Start+0xa4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00e      	beq.n	80062bc <HAL_TIM_Base_Start+0x5c>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a19      	ldr	r2, [pc, #100]	; (8006308 <HAL_TIM_Base_Start+0xa8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d009      	beq.n	80062bc <HAL_TIM_Base_Start+0x5c>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a17      	ldr	r2, [pc, #92]	; (800630c <HAL_TIM_Base_Start+0xac>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d004      	beq.n	80062bc <HAL_TIM_Base_Start+0x5c>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a16      	ldr	r2, [pc, #88]	; (8006310 <HAL_TIM_Base_Start+0xb0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d111      	bne.n	80062e0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b06      	cmp	r3, #6
 80062cc:	d010      	beq.n	80062f0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0201 	orr.w	r2, r2, #1
 80062dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062de:	e007      	b.n	80062f0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40010000 	.word	0x40010000
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800
 800630c:	40000c00 	.word	0x40000c00
 8006310:	40014000 	.word	0x40014000

08006314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b01      	cmp	r3, #1
 8006326:	d001      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e044      	b.n	80063b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1e      	ldr	r2, [pc, #120]	; (80063c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d018      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x6c>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006356:	d013      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x6c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1a      	ldr	r2, [pc, #104]	; (80063c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00e      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x6c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a19      	ldr	r2, [pc, #100]	; (80063cc <HAL_TIM_Base_Start_IT+0xb8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d009      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x6c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a17      	ldr	r2, [pc, #92]	; (80063d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d004      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x6c>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a16      	ldr	r2, [pc, #88]	; (80063d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d111      	bne.n	80063a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b06      	cmp	r3, #6
 8006390:	d010      	beq.n	80063b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0201 	orr.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a2:	e007      	b.n	80063b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40010000 	.word	0x40010000
 80063c8:	40000400 	.word	0x40000400
 80063cc:	40000800 	.word	0x40000800
 80063d0:	40000c00 	.word	0x40000c00
 80063d4:	40014000 	.word	0x40014000

080063d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6a1a      	ldr	r2, [r3, #32]
 80063f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80063fa:	4013      	ands	r3, r2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10f      	bne.n	8006420 <HAL_TIM_Base_Stop_IT+0x48>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6a1a      	ldr	r2, [r3, #32]
 8006406:	f240 4344 	movw	r3, #1092	; 0x444
 800640a:	4013      	ands	r3, r2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d107      	bne.n	8006420 <HAL_TIM_Base_Stop_IT+0x48>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0201 	bic.w	r2, r2, #1
 800641e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e041      	b.n	80064cc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d106      	bne.n	8006462 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f839 	bl	80064d4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2202      	movs	r2, #2
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3304      	adds	r3, #4
 8006472:	4619      	mov	r1, r3
 8006474:	4610      	mov	r0, r2
 8006476:	f000 fd17 	bl	8006ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d109      	bne.n	8006510 <HAL_TIM_OC_Start_IT+0x28>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	bf14      	ite	ne
 8006508:	2301      	movne	r3, #1
 800650a:	2300      	moveq	r3, #0
 800650c:	b2db      	uxtb	r3, r3
 800650e:	e022      	b.n	8006556 <HAL_TIM_OC_Start_IT+0x6e>
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b04      	cmp	r3, #4
 8006514:	d109      	bne.n	800652a <HAL_TIM_OC_Start_IT+0x42>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b01      	cmp	r3, #1
 8006520:	bf14      	ite	ne
 8006522:	2301      	movne	r3, #1
 8006524:	2300      	moveq	r3, #0
 8006526:	b2db      	uxtb	r3, r3
 8006528:	e015      	b.n	8006556 <HAL_TIM_OC_Start_IT+0x6e>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b08      	cmp	r3, #8
 800652e:	d109      	bne.n	8006544 <HAL_TIM_OC_Start_IT+0x5c>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b01      	cmp	r3, #1
 800653a:	bf14      	ite	ne
 800653c:	2301      	movne	r3, #1
 800653e:	2300      	moveq	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	e008      	b.n	8006556 <HAL_TIM_OC_Start_IT+0x6e>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b01      	cmp	r3, #1
 800654e:	bf14      	ite	ne
 8006550:	2301      	movne	r3, #1
 8006552:	2300      	moveq	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e0b3      	b.n	80066c6 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d104      	bne.n	800656e <HAL_TIM_OC_Start_IT+0x86>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800656c:	e013      	b.n	8006596 <HAL_TIM_OC_Start_IT+0xae>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b04      	cmp	r3, #4
 8006572:	d104      	bne.n	800657e <HAL_TIM_OC_Start_IT+0x96>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800657c:	e00b      	b.n	8006596 <HAL_TIM_OC_Start_IT+0xae>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b08      	cmp	r3, #8
 8006582:	d104      	bne.n	800658e <HAL_TIM_OC_Start_IT+0xa6>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800658c:	e003      	b.n	8006596 <HAL_TIM_OC_Start_IT+0xae>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b0c      	cmp	r3, #12
 800659a:	d841      	bhi.n	8006620 <HAL_TIM_OC_Start_IT+0x138>
 800659c:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <HAL_TIM_OC_Start_IT+0xbc>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065d9 	.word	0x080065d9
 80065a8:	08006621 	.word	0x08006621
 80065ac:	08006621 	.word	0x08006621
 80065b0:	08006621 	.word	0x08006621
 80065b4:	080065eb 	.word	0x080065eb
 80065b8:	08006621 	.word	0x08006621
 80065bc:	08006621 	.word	0x08006621
 80065c0:	08006621 	.word	0x08006621
 80065c4:	080065fd 	.word	0x080065fd
 80065c8:	08006621 	.word	0x08006621
 80065cc:	08006621 	.word	0x08006621
 80065d0:	08006621 	.word	0x08006621
 80065d4:	0800660f 	.word	0x0800660f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0202 	orr.w	r2, r2, #2
 80065e6:	60da      	str	r2, [r3, #12]
      break;
 80065e8:	e01d      	b.n	8006626 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f042 0204 	orr.w	r2, r2, #4
 80065f8:	60da      	str	r2, [r3, #12]
      break;
 80065fa:	e014      	b.n	8006626 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0208 	orr.w	r2, r2, #8
 800660a:	60da      	str	r2, [r3, #12]
      break;
 800660c:	e00b      	b.n	8006626 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0210 	orr.w	r2, r2, #16
 800661c:	60da      	str	r2, [r3, #12]
      break;
 800661e:	e002      	b.n	8006626 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	73fb      	strb	r3, [r7, #15]
      break;
 8006624:	bf00      	nop
  }

  if (status == HAL_OK)
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d14b      	bne.n	80066c4 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2201      	movs	r2, #1
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f000 fedd 	bl	80073f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a24      	ldr	r2, [pc, #144]	; (80066d0 <HAL_TIM_OC_Start_IT+0x1e8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d107      	bne.n	8006654 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006652:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1d      	ldr	r2, [pc, #116]	; (80066d0 <HAL_TIM_OC_Start_IT+0x1e8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d018      	beq.n	8006690 <HAL_TIM_OC_Start_IT+0x1a8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006666:	d013      	beq.n	8006690 <HAL_TIM_OC_Start_IT+0x1a8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a19      	ldr	r2, [pc, #100]	; (80066d4 <HAL_TIM_OC_Start_IT+0x1ec>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00e      	beq.n	8006690 <HAL_TIM_OC_Start_IT+0x1a8>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a18      	ldr	r2, [pc, #96]	; (80066d8 <HAL_TIM_OC_Start_IT+0x1f0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d009      	beq.n	8006690 <HAL_TIM_OC_Start_IT+0x1a8>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a16      	ldr	r2, [pc, #88]	; (80066dc <HAL_TIM_OC_Start_IT+0x1f4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d004      	beq.n	8006690 <HAL_TIM_OC_Start_IT+0x1a8>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a15      	ldr	r2, [pc, #84]	; (80066e0 <HAL_TIM_OC_Start_IT+0x1f8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d111      	bne.n	80066b4 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b06      	cmp	r3, #6
 80066a0:	d010      	beq.n	80066c4 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f042 0201 	orr.w	r2, r2, #1
 80066b0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b2:	e007      	b.n	80066c4 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0201 	orr.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	40010000 	.word	0x40010000
 80066d4:	40000400 	.word	0x40000400
 80066d8:	40000800 	.word	0x40000800
 80066dc:	40000c00 	.word	0x40000c00
 80066e0:	40014000 	.word	0x40014000

080066e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e097      	b.n	8006828 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d106      	bne.n	8006712 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7fc f8d9 	bl	80028c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6812      	ldr	r2, [r2, #0]
 8006724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006728:	f023 0307 	bic.w	r3, r3, #7
 800672c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3304      	adds	r3, #4
 8006736:	4619      	mov	r1, r3
 8006738:	4610      	mov	r0, r2
 800673a:	f000 fbb5 	bl	8006ea8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006766:	f023 0303 	bic.w	r3, r3, #3
 800676a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	4313      	orrs	r3, r2
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006784:	f023 030c 	bic.w	r3, r3, #12
 8006788:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	4313      	orrs	r3, r2
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	011a      	lsls	r2, r3, #4
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	031b      	lsls	r3, r3, #12
 80067b4:	4313      	orrs	r3, r2
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80067c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80067ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	4313      	orrs	r3, r2
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006840:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006848:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006850:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006858:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d110      	bne.n	8006882 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d102      	bne.n	800686c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006866:	7b7b      	ldrb	r3, [r7, #13]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d001      	beq.n	8006870 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e089      	b.n	8006984 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006880:	e031      	b.n	80068e6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b04      	cmp	r3, #4
 8006886:	d110      	bne.n	80068aa <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006888:	7bbb      	ldrb	r3, [r7, #14]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d102      	bne.n	8006894 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800688e:	7b3b      	ldrb	r3, [r7, #12]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d001      	beq.n	8006898 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e075      	b.n	8006984 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068a8:	e01d      	b.n	80068e6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d108      	bne.n	80068c2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068b0:	7bbb      	ldrb	r3, [r7, #14]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d105      	bne.n	80068c2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068b6:	7b7b      	ldrb	r3, [r7, #13]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d102      	bne.n	80068c2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068bc:	7b3b      	ldrb	r3, [r7, #12]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d001      	beq.n	80068c6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e05e      	b.n	8006984 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2202      	movs	r2, #2
 80068ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2202      	movs	r2, #2
 80068d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2202      	movs	r2, #2
 80068da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2202      	movs	r2, #2
 80068e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d010      	beq.n	8006914 <HAL_TIM_Encoder_Start_IT+0xe4>
 80068f2:	e01f      	b.n	8006934 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2201      	movs	r2, #1
 80068fa:	2100      	movs	r1, #0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fd79 	bl	80073f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f042 0202 	orr.w	r2, r2, #2
 8006910:	60da      	str	r2, [r3, #12]
      break;
 8006912:	e02e      	b.n	8006972 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2201      	movs	r2, #1
 800691a:	2104      	movs	r1, #4
 800691c:	4618      	mov	r0, r3
 800691e:	f000 fd69 	bl	80073f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68da      	ldr	r2, [r3, #12]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f042 0204 	orr.w	r2, r2, #4
 8006930:	60da      	str	r2, [r3, #12]
      break;
 8006932:	e01e      	b.n	8006972 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2201      	movs	r2, #1
 800693a:	2100      	movs	r1, #0
 800693c:	4618      	mov	r0, r3
 800693e:	f000 fd59 	bl	80073f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2201      	movs	r2, #1
 8006948:	2104      	movs	r1, #4
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fd52 	bl	80073f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0202 	orr.w	r2, r2, #2
 800695e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0204 	orr.w	r2, r2, #4
 800696e:	60da      	str	r2, [r3, #12]
      break;
 8006970:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0201 	orr.w	r2, r2, #1
 8006980:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d122      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d11b      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f06f 0202 	mvn.w	r2, #2
 80069b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa4c 	bl	8006e6c <HAL_TIM_IC_CaptureCallback>
 80069d4:	e005      	b.n	80069e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fa fc60 	bl	800129c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fa4f 	bl	8006e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d122      	bne.n	8006a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d11b      	bne.n	8006a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0204 	mvn.w	r2, #4
 8006a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2202      	movs	r2, #2
 8006a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa22 	bl	8006e6c <HAL_TIM_IC_CaptureCallback>
 8006a28:	e005      	b.n	8006a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7fa fc36 	bl	800129c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fa25 	bl	8006e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0308 	and.w	r3, r3, #8
 8006a46:	2b08      	cmp	r3, #8
 8006a48:	d122      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d11b      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f06f 0208 	mvn.w	r2, #8
 8006a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2204      	movs	r2, #4
 8006a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f9f8 	bl	8006e6c <HAL_TIM_IC_CaptureCallback>
 8006a7c:	e005      	b.n	8006a8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fa fc0c 	bl	800129c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f9fb 	bl	8006e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f003 0310 	and.w	r3, r3, #16
 8006a9a:	2b10      	cmp	r3, #16
 8006a9c:	d122      	bne.n	8006ae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f003 0310 	and.w	r3, r3, #16
 8006aa8:	2b10      	cmp	r3, #16
 8006aaa:	d11b      	bne.n	8006ae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f06f 0210 	mvn.w	r2, #16
 8006ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2208      	movs	r2, #8
 8006aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f9ce 	bl	8006e6c <HAL_TIM_IC_CaptureCallback>
 8006ad0:	e005      	b.n	8006ade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7fa fbe2 	bl	800129c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f9d1 	bl	8006e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d10e      	bne.n	8006b10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d107      	bne.n	8006b10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f06f 0201 	mvn.w	r2, #1
 8006b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fa fba4 	bl	8001258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1a:	2b80      	cmp	r3, #128	; 0x80
 8006b1c:	d10e      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b28:	2b80      	cmp	r3, #128	; 0x80
 8006b2a:	d107      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fcfa 	bl	8007530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b46:	2b40      	cmp	r3, #64	; 0x40
 8006b48:	d10e      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b54:	2b40      	cmp	r3, #64	; 0x40
 8006b56:	d107      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f996 	bl	8006e94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d10e      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0320 	and.w	r3, r3, #32
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d107      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0220 	mvn.w	r2, #32
 8006b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fcc4 	bl	800751c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d101      	bne.n	8006bba <HAL_TIM_OC_ConfigChannel+0x1e>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e048      	b.n	8006c4c <HAL_TIM_OC_ConfigChannel+0xb0>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b0c      	cmp	r3, #12
 8006bc6:	d839      	bhi.n	8006c3c <HAL_TIM_OC_ConfigChannel+0xa0>
 8006bc8:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006c05 	.word	0x08006c05
 8006bd4:	08006c3d 	.word	0x08006c3d
 8006bd8:	08006c3d 	.word	0x08006c3d
 8006bdc:	08006c3d 	.word	0x08006c3d
 8006be0:	08006c13 	.word	0x08006c13
 8006be4:	08006c3d 	.word	0x08006c3d
 8006be8:	08006c3d 	.word	0x08006c3d
 8006bec:	08006c3d 	.word	0x08006c3d
 8006bf0:	08006c21 	.word	0x08006c21
 8006bf4:	08006c3d 	.word	0x08006c3d
 8006bf8:	08006c3d 	.word	0x08006c3d
 8006bfc:	08006c3d 	.word	0x08006c3d
 8006c00:	08006c2f 	.word	0x08006c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 f9cc 	bl	8006fa8 <TIM_OC1_SetConfig>
      break;
 8006c10:	e017      	b.n	8006c42 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fa2b 	bl	8007074 <TIM_OC2_SetConfig>
      break;
 8006c1e:	e010      	b.n	8006c42 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fa90 	bl	800714c <TIM_OC3_SetConfig>
      break;
 8006c2c:	e009      	b.n	8006c42 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 faf3 	bl	8007220 <TIM_OC4_SetConfig>
      break;
 8006c3a:	e002      	b.n	8006c42 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_TIM_ConfigClockSource+0x1c>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e0b4      	b.n	8006dda <HAL_TIM_ConfigClockSource+0x186>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ca8:	d03e      	beq.n	8006d28 <HAL_TIM_ConfigClockSource+0xd4>
 8006caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cae:	f200 8087 	bhi.w	8006dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb6:	f000 8086 	beq.w	8006dc6 <HAL_TIM_ConfigClockSource+0x172>
 8006cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cbe:	d87f      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cc0:	2b70      	cmp	r3, #112	; 0x70
 8006cc2:	d01a      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0xa6>
 8006cc4:	2b70      	cmp	r3, #112	; 0x70
 8006cc6:	d87b      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cc8:	2b60      	cmp	r3, #96	; 0x60
 8006cca:	d050      	beq.n	8006d6e <HAL_TIM_ConfigClockSource+0x11a>
 8006ccc:	2b60      	cmp	r3, #96	; 0x60
 8006cce:	d877      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cd0:	2b50      	cmp	r3, #80	; 0x50
 8006cd2:	d03c      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0xfa>
 8006cd4:	2b50      	cmp	r3, #80	; 0x50
 8006cd6:	d873      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cd8:	2b40      	cmp	r3, #64	; 0x40
 8006cda:	d058      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x13a>
 8006cdc:	2b40      	cmp	r3, #64	; 0x40
 8006cde:	d86f      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ce0:	2b30      	cmp	r3, #48	; 0x30
 8006ce2:	d064      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x15a>
 8006ce4:	2b30      	cmp	r3, #48	; 0x30
 8006ce6:	d86b      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ce8:	2b20      	cmp	r3, #32
 8006cea:	d060      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x15a>
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d867      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d05c      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x15a>
 8006cf4:	2b10      	cmp	r3, #16
 8006cf6:	d05a      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x15a>
 8006cf8:	e062      	b.n	8006dc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	6899      	ldr	r1, [r3, #8]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f000 fb53 	bl	80073b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	609a      	str	r2, [r3, #8]
      break;
 8006d26:	e04f      	b.n	8006dc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	6899      	ldr	r1, [r3, #8]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f000 fb3c 	bl	80073b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d4a:	609a      	str	r2, [r3, #8]
      break;
 8006d4c:	e03c      	b.n	8006dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	6859      	ldr	r1, [r3, #4]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	f000 fab0 	bl	80072c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2150      	movs	r1, #80	; 0x50
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 fb09 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 8006d6c:	e02c      	b.n	8006dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	6859      	ldr	r1, [r3, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f000 facf 	bl	800731e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2160      	movs	r1, #96	; 0x60
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 faf9 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 8006d8c:	e01c      	b.n	8006dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	6859      	ldr	r1, [r3, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f000 fa90 	bl	80072c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2140      	movs	r1, #64	; 0x40
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fae9 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 8006dac:	e00c      	b.n	8006dc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4619      	mov	r1, r3
 8006db8:	4610      	mov	r0, r2
 8006dba:	f000 fae0 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 8006dbe:	e003      	b.n	8006dc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc4:	e000      	b.n	8006dc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b0c      	cmp	r3, #12
 8006df6:	d831      	bhi.n	8006e5c <HAL_TIM_ReadCapturedValue+0x78>
 8006df8:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfe:	bf00      	nop
 8006e00:	08006e35 	.word	0x08006e35
 8006e04:	08006e5d 	.word	0x08006e5d
 8006e08:	08006e5d 	.word	0x08006e5d
 8006e0c:	08006e5d 	.word	0x08006e5d
 8006e10:	08006e3f 	.word	0x08006e3f
 8006e14:	08006e5d 	.word	0x08006e5d
 8006e18:	08006e5d 	.word	0x08006e5d
 8006e1c:	08006e5d 	.word	0x08006e5d
 8006e20:	08006e49 	.word	0x08006e49
 8006e24:	08006e5d 	.word	0x08006e5d
 8006e28:	08006e5d 	.word	0x08006e5d
 8006e2c:	08006e5d 	.word	0x08006e5d
 8006e30:	08006e53 	.word	0x08006e53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3a:	60fb      	str	r3, [r7, #12]

      break;
 8006e3c:	e00f      	b.n	8006e5e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e44:	60fb      	str	r3, [r7, #12]

      break;
 8006e46:	e00a      	b.n	8006e5e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4e:	60fb      	str	r3, [r7, #12]

      break;
 8006e50:	e005      	b.n	8006e5e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e58:	60fb      	str	r3, [r7, #12]

      break;
 8006e5a:	e000      	b.n	8006e5e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006e5c:	bf00      	nop
  }

  return tmpreg;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a34      	ldr	r2, [pc, #208]	; (8006f8c <TIM_Base_SetConfig+0xe4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00f      	beq.n	8006ee0 <TIM_Base_SetConfig+0x38>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec6:	d00b      	beq.n	8006ee0 <TIM_Base_SetConfig+0x38>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a31      	ldr	r2, [pc, #196]	; (8006f90 <TIM_Base_SetConfig+0xe8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d007      	beq.n	8006ee0 <TIM_Base_SetConfig+0x38>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a30      	ldr	r2, [pc, #192]	; (8006f94 <TIM_Base_SetConfig+0xec>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d003      	beq.n	8006ee0 <TIM_Base_SetConfig+0x38>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a2f      	ldr	r2, [pc, #188]	; (8006f98 <TIM_Base_SetConfig+0xf0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d108      	bne.n	8006ef2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a25      	ldr	r2, [pc, #148]	; (8006f8c <TIM_Base_SetConfig+0xe4>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d01b      	beq.n	8006f32 <TIM_Base_SetConfig+0x8a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f00:	d017      	beq.n	8006f32 <TIM_Base_SetConfig+0x8a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a22      	ldr	r2, [pc, #136]	; (8006f90 <TIM_Base_SetConfig+0xe8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d013      	beq.n	8006f32 <TIM_Base_SetConfig+0x8a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a21      	ldr	r2, [pc, #132]	; (8006f94 <TIM_Base_SetConfig+0xec>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00f      	beq.n	8006f32 <TIM_Base_SetConfig+0x8a>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a20      	ldr	r2, [pc, #128]	; (8006f98 <TIM_Base_SetConfig+0xf0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00b      	beq.n	8006f32 <TIM_Base_SetConfig+0x8a>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a1f      	ldr	r2, [pc, #124]	; (8006f9c <TIM_Base_SetConfig+0xf4>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d007      	beq.n	8006f32 <TIM_Base_SetConfig+0x8a>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a1e      	ldr	r2, [pc, #120]	; (8006fa0 <TIM_Base_SetConfig+0xf8>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d003      	beq.n	8006f32 <TIM_Base_SetConfig+0x8a>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a1d      	ldr	r2, [pc, #116]	; (8006fa4 <TIM_Base_SetConfig+0xfc>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d108      	bne.n	8006f44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a08      	ldr	r2, [pc, #32]	; (8006f8c <TIM_Base_SetConfig+0xe4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d103      	bne.n	8006f78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	615a      	str	r2, [r3, #20]
}
 8006f7e:	bf00      	nop
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40000800 	.word	0x40000800
 8006f98:	40000c00 	.word	0x40000c00
 8006f9c:	40014000 	.word	0x40014000
 8006fa0:	40014400 	.word	0x40014400
 8006fa4:	40014800 	.word	0x40014800

08006fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	f023 0201 	bic.w	r2, r3, #1
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0303 	bic.w	r3, r3, #3
 8006fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	f023 0302 	bic.w	r3, r3, #2
 8006ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a1c      	ldr	r2, [pc, #112]	; (8007070 <TIM_OC1_SetConfig+0xc8>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d10c      	bne.n	800701e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f023 0308 	bic.w	r3, r3, #8
 800700a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f023 0304 	bic.w	r3, r3, #4
 800701c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a13      	ldr	r2, [pc, #76]	; (8007070 <TIM_OC1_SetConfig+0xc8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d111      	bne.n	800704a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800702c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	4313      	orrs	r3, r2
 800703e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	4313      	orrs	r3, r2
 8007048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	621a      	str	r2, [r3, #32]
}
 8007064:	bf00      	nop
 8007066:	371c      	adds	r7, #28
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	40010000 	.word	0x40010000

08007074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	f023 0210 	bic.w	r2, r3, #16
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f023 0320 	bic.w	r3, r3, #32
 80070be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	011b      	lsls	r3, r3, #4
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a1e      	ldr	r2, [pc, #120]	; (8007148 <TIM_OC2_SetConfig+0xd4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d10d      	bne.n	80070f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a15      	ldr	r2, [pc, #84]	; (8007148 <TIM_OC2_SetConfig+0xd4>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d113      	bne.n	8007120 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4313      	orrs	r3, r2
 8007112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	621a      	str	r2, [r3, #32]
}
 800713a:	bf00      	nop
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40010000 	.word	0x40010000

0800714c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0303 	bic.w	r3, r3, #3
 8007182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4313      	orrs	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a1d      	ldr	r2, [pc, #116]	; (800721c <TIM_OC3_SetConfig+0xd0>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d10d      	bne.n	80071c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	021b      	lsls	r3, r3, #8
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a14      	ldr	r2, [pc, #80]	; (800721c <TIM_OC3_SetConfig+0xd0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d113      	bne.n	80071f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	621a      	str	r2, [r3, #32]
}
 8007210:	bf00      	nop
 8007212:	371c      	adds	r7, #28
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	40010000 	.word	0x40010000

08007220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800724e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	021b      	lsls	r3, r3, #8
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4313      	orrs	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800726a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	031b      	lsls	r3, r3, #12
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a10      	ldr	r2, [pc, #64]	; (80072bc <TIM_OC4_SetConfig+0x9c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d109      	bne.n	8007294 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	019b      	lsls	r3, r3, #6
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	4313      	orrs	r3, r2
 8007292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	621a      	str	r2, [r3, #32]
}
 80072ae:	bf00      	nop
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	40010000 	.word	0x40010000

080072c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	f023 0201 	bic.w	r2, r3, #1
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f023 030a 	bic.w	r3, r3, #10
 80072fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800731e:	b480      	push	{r7}
 8007320:	b087      	sub	sp, #28
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	f023 0210 	bic.w	r2, r3, #16
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007348:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	031b      	lsls	r3, r3, #12
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800735a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	4313      	orrs	r3, r2
 8007364:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	621a      	str	r2, [r3, #32]
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800737e:	b480      	push	{r7}
 8007380:	b085      	sub	sp, #20
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4313      	orrs	r3, r2
 800739c:	f043 0307 	orr.w	r3, r3, #7
 80073a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	609a      	str	r2, [r3, #8]
}
 80073a8:	bf00      	nop
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	021a      	lsls	r2, r3, #8
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	431a      	orrs	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4313      	orrs	r3, r2
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	609a      	str	r2, [r3, #8]
}
 80073e8:	bf00      	nop
 80073ea:	371c      	adds	r7, #28
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	2201      	movs	r2, #1
 8007408:	fa02 f303 	lsl.w	r3, r2, r3
 800740c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a1a      	ldr	r2, [r3, #32]
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	43db      	mvns	r3, r3
 8007416:	401a      	ands	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a1a      	ldr	r2, [r3, #32]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f003 031f 	and.w	r3, r3, #31
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	fa01 f303 	lsl.w	r3, r1, r3
 800742c:	431a      	orrs	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	621a      	str	r2, [r3, #32]
}
 8007432:	bf00      	nop
 8007434:	371c      	adds	r7, #28
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
	...

08007440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007450:	2b01      	cmp	r3, #1
 8007452:	d101      	bne.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007454:	2302      	movs	r3, #2
 8007456:	e050      	b.n	80074fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a1c      	ldr	r2, [pc, #112]	; (8007508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d018      	beq.n	80074ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a4:	d013      	beq.n	80074ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a18      	ldr	r2, [pc, #96]	; (800750c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d00e      	beq.n	80074ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a16      	ldr	r2, [pc, #88]	; (8007510 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d009      	beq.n	80074ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a15      	ldr	r2, [pc, #84]	; (8007514 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d004      	beq.n	80074ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a13      	ldr	r2, [pc, #76]	; (8007518 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d10c      	bne.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	40010000 	.word	0x40010000
 800750c:	40000400 	.word	0x40000400
 8007510:	40000800 	.word	0x40000800
 8007514:	40000c00 	.word	0x40000c00
 8007518:	40014000 	.word	0x40014000

0800751c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e03f      	b.n	80075d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d106      	bne.n	8007570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7fb fa64 	bl	8002a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2224      	movs	r2, #36	; 0x24
 8007574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007586:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f929 	bl	80077e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	691a      	ldr	r2, [r3, #16]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800759c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	695a      	ldr	r2, [r3, #20]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b08a      	sub	sp, #40	; 0x28
 80075e2:	af02      	add	r7, sp, #8
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	603b      	str	r3, [r7, #0]
 80075ea:	4613      	mov	r3, r2
 80075ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b20      	cmp	r3, #32
 80075fc:	d17c      	bne.n	80076f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <HAL_UART_Transmit+0x2c>
 8007604:	88fb      	ldrh	r3, [r7, #6]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e075      	b.n	80076fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_UART_Transmit+0x3e>
 8007618:	2302      	movs	r3, #2
 800761a:	e06e      	b.n	80076fa <HAL_UART_Transmit+0x11c>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2221      	movs	r2, #33	; 0x21
 800762e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007632:	f7fc fb5d 	bl	8003cf0 <HAL_GetTick>
 8007636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	88fa      	ldrh	r2, [r7, #6]
 800763c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	88fa      	ldrh	r2, [r7, #6]
 8007642:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764c:	d108      	bne.n	8007660 <HAL_UART_Transmit+0x82>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d104      	bne.n	8007660 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007656:	2300      	movs	r3, #0
 8007658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	61bb      	str	r3, [r7, #24]
 800765e:	e003      	b.n	8007668 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007664:	2300      	movs	r3, #0
 8007666:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007670:	e02a      	b.n	80076c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2200      	movs	r2, #0
 800767a:	2180      	movs	r1, #128	; 0x80
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f840 	bl	8007702 <UART_WaitOnFlagUntilTimeout>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e036      	b.n	80076fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10b      	bne.n	80076aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	3302      	adds	r3, #2
 80076a6:	61bb      	str	r3, [r7, #24]
 80076a8:	e007      	b.n	80076ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	781a      	ldrb	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	3301      	adds	r3, #1
 80076b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1cf      	bne.n	8007672 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2200      	movs	r2, #0
 80076da:	2140      	movs	r1, #64	; 0x40
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 f810 	bl	8007702 <UART_WaitOnFlagUntilTimeout>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e006      	b.n	80076fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2220      	movs	r2, #32
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	e000      	b.n	80076fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80076f8:	2302      	movs	r3, #2
  }
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3720      	adds	r7, #32
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b090      	sub	sp, #64	; 0x40
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	603b      	str	r3, [r7, #0]
 800770e:	4613      	mov	r3, r2
 8007710:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007712:	e050      	b.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771a:	d04c      	beq.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800771c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800771e:	2b00      	cmp	r3, #0
 8007720:	d007      	beq.n	8007732 <UART_WaitOnFlagUntilTimeout+0x30>
 8007722:	f7fc fae5 	bl	8003cf0 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800772e:	429a      	cmp	r2, r3
 8007730:	d241      	bcs.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	330c      	adds	r3, #12
 8007738:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	330c      	adds	r3, #12
 8007750:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007752:	637a      	str	r2, [r7, #52]	; 0x34
 8007754:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800775a:	e841 2300 	strex	r3, r2, [r1]
 800775e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e5      	bne.n	8007732 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3314      	adds	r3, #20
 800776c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	613b      	str	r3, [r7, #16]
   return(result);
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f023 0301 	bic.w	r3, r3, #1
 800777c:	63bb      	str	r3, [r7, #56]	; 0x38
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	3314      	adds	r3, #20
 8007784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007786:	623a      	str	r2, [r7, #32]
 8007788:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778a:	69f9      	ldr	r1, [r7, #28]
 800778c:	6a3a      	ldr	r2, [r7, #32]
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	61bb      	str	r3, [r7, #24]
   return(result);
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1e5      	bne.n	8007766 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2220      	movs	r2, #32
 800779e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e00f      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	4013      	ands	r3, r2
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	bf0c      	ite	eq
 80077c6:	2301      	moveq	r3, #1
 80077c8:	2300      	movne	r3, #0
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d09f      	beq.n	8007714 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3740      	adds	r7, #64	; 0x40
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077e4:	b0c0      	sub	sp, #256	; 0x100
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80077f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077fc:	68d9      	ldr	r1, [r3, #12]
 80077fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	ea40 0301 	orr.w	r3, r0, r1
 8007808:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800780a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	431a      	orrs	r2, r3
 8007818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	431a      	orrs	r2, r3
 8007820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	4313      	orrs	r3, r2
 8007828:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800782c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007838:	f021 010c 	bic.w	r1, r1, #12
 800783c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007846:	430b      	orrs	r3, r1
 8007848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800784a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800785a:	6999      	ldr	r1, [r3, #24]
 800785c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	ea40 0301 	orr.w	r3, r0, r1
 8007866:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	4b8f      	ldr	r3, [pc, #572]	; (8007aac <UART_SetConfig+0x2cc>)
 8007870:	429a      	cmp	r2, r3
 8007872:	d005      	beq.n	8007880 <UART_SetConfig+0xa0>
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	4b8d      	ldr	r3, [pc, #564]	; (8007ab0 <UART_SetConfig+0x2d0>)
 800787c:	429a      	cmp	r2, r3
 800787e:	d104      	bne.n	800788a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007880:	f7fe f858 	bl	8005934 <HAL_RCC_GetPCLK2Freq>
 8007884:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007888:	e003      	b.n	8007892 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800788a:	f7fe f83f 	bl	800590c <HAL_RCC_GetPCLK1Freq>
 800788e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800789c:	f040 810c 	bne.w	8007ab8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078a4:	2200      	movs	r2, #0
 80078a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80078ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80078b2:	4622      	mov	r2, r4
 80078b4:	462b      	mov	r3, r5
 80078b6:	1891      	adds	r1, r2, r2
 80078b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80078ba:	415b      	adcs	r3, r3
 80078bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80078c2:	4621      	mov	r1, r4
 80078c4:	eb12 0801 	adds.w	r8, r2, r1
 80078c8:	4629      	mov	r1, r5
 80078ca:	eb43 0901 	adc.w	r9, r3, r1
 80078ce:	f04f 0200 	mov.w	r2, #0
 80078d2:	f04f 0300 	mov.w	r3, #0
 80078d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078e2:	4690      	mov	r8, r2
 80078e4:	4699      	mov	r9, r3
 80078e6:	4623      	mov	r3, r4
 80078e8:	eb18 0303 	adds.w	r3, r8, r3
 80078ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078f0:	462b      	mov	r3, r5
 80078f2:	eb49 0303 	adc.w	r3, r9, r3
 80078f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80078fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007906:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800790a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800790e:	460b      	mov	r3, r1
 8007910:	18db      	adds	r3, r3, r3
 8007912:	653b      	str	r3, [r7, #80]	; 0x50
 8007914:	4613      	mov	r3, r2
 8007916:	eb42 0303 	adc.w	r3, r2, r3
 800791a:	657b      	str	r3, [r7, #84]	; 0x54
 800791c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007920:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007924:	f7f9 f968 	bl	8000bf8 <__aeabi_uldivmod>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4b61      	ldr	r3, [pc, #388]	; (8007ab4 <UART_SetConfig+0x2d4>)
 800792e:	fba3 2302 	umull	r2, r3, r3, r2
 8007932:	095b      	lsrs	r3, r3, #5
 8007934:	011c      	lsls	r4, r3, #4
 8007936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800793a:	2200      	movs	r2, #0
 800793c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007940:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007944:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007948:	4642      	mov	r2, r8
 800794a:	464b      	mov	r3, r9
 800794c:	1891      	adds	r1, r2, r2
 800794e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007950:	415b      	adcs	r3, r3
 8007952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007954:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007958:	4641      	mov	r1, r8
 800795a:	eb12 0a01 	adds.w	sl, r2, r1
 800795e:	4649      	mov	r1, r9
 8007960:	eb43 0b01 	adc.w	fp, r3, r1
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	f04f 0300 	mov.w	r3, #0
 800796c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007970:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007978:	4692      	mov	sl, r2
 800797a:	469b      	mov	fp, r3
 800797c:	4643      	mov	r3, r8
 800797e:	eb1a 0303 	adds.w	r3, sl, r3
 8007982:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007986:	464b      	mov	r3, r9
 8007988:	eb4b 0303 	adc.w	r3, fp, r3
 800798c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800799c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80079a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80079a4:	460b      	mov	r3, r1
 80079a6:	18db      	adds	r3, r3, r3
 80079a8:	643b      	str	r3, [r7, #64]	; 0x40
 80079aa:	4613      	mov	r3, r2
 80079ac:	eb42 0303 	adc.w	r3, r2, r3
 80079b0:	647b      	str	r3, [r7, #68]	; 0x44
 80079b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80079b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80079ba:	f7f9 f91d 	bl	8000bf8 <__aeabi_uldivmod>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	4611      	mov	r1, r2
 80079c4:	4b3b      	ldr	r3, [pc, #236]	; (8007ab4 <UART_SetConfig+0x2d4>)
 80079c6:	fba3 2301 	umull	r2, r3, r3, r1
 80079ca:	095b      	lsrs	r3, r3, #5
 80079cc:	2264      	movs	r2, #100	; 0x64
 80079ce:	fb02 f303 	mul.w	r3, r2, r3
 80079d2:	1acb      	subs	r3, r1, r3
 80079d4:	00db      	lsls	r3, r3, #3
 80079d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80079da:	4b36      	ldr	r3, [pc, #216]	; (8007ab4 <UART_SetConfig+0x2d4>)
 80079dc:	fba3 2302 	umull	r2, r3, r3, r2
 80079e0:	095b      	lsrs	r3, r3, #5
 80079e2:	005b      	lsls	r3, r3, #1
 80079e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079e8:	441c      	add	r4, r3
 80079ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80079f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80079fc:	4642      	mov	r2, r8
 80079fe:	464b      	mov	r3, r9
 8007a00:	1891      	adds	r1, r2, r2
 8007a02:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a04:	415b      	adcs	r3, r3
 8007a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a0c:	4641      	mov	r1, r8
 8007a0e:	1851      	adds	r1, r2, r1
 8007a10:	6339      	str	r1, [r7, #48]	; 0x30
 8007a12:	4649      	mov	r1, r9
 8007a14:	414b      	adcs	r3, r1
 8007a16:	637b      	str	r3, [r7, #52]	; 0x34
 8007a18:	f04f 0200 	mov.w	r2, #0
 8007a1c:	f04f 0300 	mov.w	r3, #0
 8007a20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007a24:	4659      	mov	r1, fp
 8007a26:	00cb      	lsls	r3, r1, #3
 8007a28:	4651      	mov	r1, sl
 8007a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a2e:	4651      	mov	r1, sl
 8007a30:	00ca      	lsls	r2, r1, #3
 8007a32:	4610      	mov	r0, r2
 8007a34:	4619      	mov	r1, r3
 8007a36:	4603      	mov	r3, r0
 8007a38:	4642      	mov	r2, r8
 8007a3a:	189b      	adds	r3, r3, r2
 8007a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a40:	464b      	mov	r3, r9
 8007a42:	460a      	mov	r2, r1
 8007a44:	eb42 0303 	adc.w	r3, r2, r3
 8007a48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007a5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007a60:	460b      	mov	r3, r1
 8007a62:	18db      	adds	r3, r3, r3
 8007a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a66:	4613      	mov	r3, r2
 8007a68:	eb42 0303 	adc.w	r3, r2, r3
 8007a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007a76:	f7f9 f8bf 	bl	8000bf8 <__aeabi_uldivmod>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4b0d      	ldr	r3, [pc, #52]	; (8007ab4 <UART_SetConfig+0x2d4>)
 8007a80:	fba3 1302 	umull	r1, r3, r3, r2
 8007a84:	095b      	lsrs	r3, r3, #5
 8007a86:	2164      	movs	r1, #100	; 0x64
 8007a88:	fb01 f303 	mul.w	r3, r1, r3
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	3332      	adds	r3, #50	; 0x32
 8007a92:	4a08      	ldr	r2, [pc, #32]	; (8007ab4 <UART_SetConfig+0x2d4>)
 8007a94:	fba2 2303 	umull	r2, r3, r2, r3
 8007a98:	095b      	lsrs	r3, r3, #5
 8007a9a:	f003 0207 	and.w	r2, r3, #7
 8007a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4422      	add	r2, r4
 8007aa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007aa8:	e106      	b.n	8007cb8 <UART_SetConfig+0x4d8>
 8007aaa:	bf00      	nop
 8007aac:	40011000 	.word	0x40011000
 8007ab0:	40011400 	.word	0x40011400
 8007ab4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007abc:	2200      	movs	r2, #0
 8007abe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ac2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007ac6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007aca:	4642      	mov	r2, r8
 8007acc:	464b      	mov	r3, r9
 8007ace:	1891      	adds	r1, r2, r2
 8007ad0:	6239      	str	r1, [r7, #32]
 8007ad2:	415b      	adcs	r3, r3
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ada:	4641      	mov	r1, r8
 8007adc:	1854      	adds	r4, r2, r1
 8007ade:	4649      	mov	r1, r9
 8007ae0:	eb43 0501 	adc.w	r5, r3, r1
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	00eb      	lsls	r3, r5, #3
 8007aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007af2:	00e2      	lsls	r2, r4, #3
 8007af4:	4614      	mov	r4, r2
 8007af6:	461d      	mov	r5, r3
 8007af8:	4643      	mov	r3, r8
 8007afa:	18e3      	adds	r3, r4, r3
 8007afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b00:	464b      	mov	r3, r9
 8007b02:	eb45 0303 	adc.w	r3, r5, r3
 8007b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b1a:	f04f 0200 	mov.w	r2, #0
 8007b1e:	f04f 0300 	mov.w	r3, #0
 8007b22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007b26:	4629      	mov	r1, r5
 8007b28:	008b      	lsls	r3, r1, #2
 8007b2a:	4621      	mov	r1, r4
 8007b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b30:	4621      	mov	r1, r4
 8007b32:	008a      	lsls	r2, r1, #2
 8007b34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b38:	f7f9 f85e 	bl	8000bf8 <__aeabi_uldivmod>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4b60      	ldr	r3, [pc, #384]	; (8007cc4 <UART_SetConfig+0x4e4>)
 8007b42:	fba3 2302 	umull	r2, r3, r3, r2
 8007b46:	095b      	lsrs	r3, r3, #5
 8007b48:	011c      	lsls	r4, r3, #4
 8007b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007b58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007b5c:	4642      	mov	r2, r8
 8007b5e:	464b      	mov	r3, r9
 8007b60:	1891      	adds	r1, r2, r2
 8007b62:	61b9      	str	r1, [r7, #24]
 8007b64:	415b      	adcs	r3, r3
 8007b66:	61fb      	str	r3, [r7, #28]
 8007b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b6c:	4641      	mov	r1, r8
 8007b6e:	1851      	adds	r1, r2, r1
 8007b70:	6139      	str	r1, [r7, #16]
 8007b72:	4649      	mov	r1, r9
 8007b74:	414b      	adcs	r3, r1
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	f04f 0200 	mov.w	r2, #0
 8007b7c:	f04f 0300 	mov.w	r3, #0
 8007b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b84:	4659      	mov	r1, fp
 8007b86:	00cb      	lsls	r3, r1, #3
 8007b88:	4651      	mov	r1, sl
 8007b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b8e:	4651      	mov	r1, sl
 8007b90:	00ca      	lsls	r2, r1, #3
 8007b92:	4610      	mov	r0, r2
 8007b94:	4619      	mov	r1, r3
 8007b96:	4603      	mov	r3, r0
 8007b98:	4642      	mov	r2, r8
 8007b9a:	189b      	adds	r3, r3, r2
 8007b9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ba0:	464b      	mov	r3, r9
 8007ba2:	460a      	mov	r2, r1
 8007ba4:	eb42 0303 	adc.w	r3, r2, r3
 8007ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007bb8:	f04f 0200 	mov.w	r2, #0
 8007bbc:	f04f 0300 	mov.w	r3, #0
 8007bc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	008b      	lsls	r3, r1, #2
 8007bc8:	4641      	mov	r1, r8
 8007bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bce:	4641      	mov	r1, r8
 8007bd0:	008a      	lsls	r2, r1, #2
 8007bd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007bd6:	f7f9 f80f 	bl	8000bf8 <__aeabi_uldivmod>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4611      	mov	r1, r2
 8007be0:	4b38      	ldr	r3, [pc, #224]	; (8007cc4 <UART_SetConfig+0x4e4>)
 8007be2:	fba3 2301 	umull	r2, r3, r3, r1
 8007be6:	095b      	lsrs	r3, r3, #5
 8007be8:	2264      	movs	r2, #100	; 0x64
 8007bea:	fb02 f303 	mul.w	r3, r2, r3
 8007bee:	1acb      	subs	r3, r1, r3
 8007bf0:	011b      	lsls	r3, r3, #4
 8007bf2:	3332      	adds	r3, #50	; 0x32
 8007bf4:	4a33      	ldr	r2, [pc, #204]	; (8007cc4 <UART_SetConfig+0x4e4>)
 8007bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfa:	095b      	lsrs	r3, r3, #5
 8007bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c00:	441c      	add	r4, r3
 8007c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c06:	2200      	movs	r2, #0
 8007c08:	673b      	str	r3, [r7, #112]	; 0x70
 8007c0a:	677a      	str	r2, [r7, #116]	; 0x74
 8007c0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007c10:	4642      	mov	r2, r8
 8007c12:	464b      	mov	r3, r9
 8007c14:	1891      	adds	r1, r2, r2
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	415b      	adcs	r3, r3
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c20:	4641      	mov	r1, r8
 8007c22:	1851      	adds	r1, r2, r1
 8007c24:	6039      	str	r1, [r7, #0]
 8007c26:	4649      	mov	r1, r9
 8007c28:	414b      	adcs	r3, r1
 8007c2a:	607b      	str	r3, [r7, #4]
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	f04f 0300 	mov.w	r3, #0
 8007c34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c38:	4659      	mov	r1, fp
 8007c3a:	00cb      	lsls	r3, r1, #3
 8007c3c:	4651      	mov	r1, sl
 8007c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c42:	4651      	mov	r1, sl
 8007c44:	00ca      	lsls	r2, r1, #3
 8007c46:	4610      	mov	r0, r2
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4642      	mov	r2, r8
 8007c4e:	189b      	adds	r3, r3, r2
 8007c50:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c52:	464b      	mov	r3, r9
 8007c54:	460a      	mov	r2, r1
 8007c56:	eb42 0303 	adc.w	r3, r2, r3
 8007c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	663b      	str	r3, [r7, #96]	; 0x60
 8007c66:	667a      	str	r2, [r7, #100]	; 0x64
 8007c68:	f04f 0200 	mov.w	r2, #0
 8007c6c:	f04f 0300 	mov.w	r3, #0
 8007c70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007c74:	4649      	mov	r1, r9
 8007c76:	008b      	lsls	r3, r1, #2
 8007c78:	4641      	mov	r1, r8
 8007c7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c7e:	4641      	mov	r1, r8
 8007c80:	008a      	lsls	r2, r1, #2
 8007c82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007c86:	f7f8 ffb7 	bl	8000bf8 <__aeabi_uldivmod>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4b0d      	ldr	r3, [pc, #52]	; (8007cc4 <UART_SetConfig+0x4e4>)
 8007c90:	fba3 1302 	umull	r1, r3, r3, r2
 8007c94:	095b      	lsrs	r3, r3, #5
 8007c96:	2164      	movs	r1, #100	; 0x64
 8007c98:	fb01 f303 	mul.w	r3, r1, r3
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	3332      	adds	r3, #50	; 0x32
 8007ca2:	4a08      	ldr	r2, [pc, #32]	; (8007cc4 <UART_SetConfig+0x4e4>)
 8007ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca8:	095b      	lsrs	r3, r3, #5
 8007caa:	f003 020f 	and.w	r2, r3, #15
 8007cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4422      	add	r2, r4
 8007cb6:	609a      	str	r2, [r3, #8]
}
 8007cb8:	bf00      	nop
 8007cba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cc4:	51eb851f 	.word	0x51eb851f

08007cc8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007ccc:	4904      	ldr	r1, [pc, #16]	; (8007ce0 <MX_FATFS_Init+0x18>)
 8007cce:	4805      	ldr	r0, [pc, #20]	; (8007ce4 <MX_FATFS_Init+0x1c>)
 8007cd0:	f002 fca2 	bl	800a618 <FATFS_LinkDriver>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	4b03      	ldr	r3, [pc, #12]	; (8007ce8 <MX_FATFS_Init+0x20>)
 8007cda:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007cdc:	bf00      	nop
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20001830 	.word	0x20001830
 8007ce4:	20000670 	.word	0x20000670
 8007ce8:	2000182c 	.word	0x2000182c

08007cec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007cec:	b480      	push	{r7}
 8007cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007cf0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fb f9d3 	bl	80030b4 <USER_SPI_initialize>
 8007d0e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	4603      	mov	r3, r0
 8007d20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8007d22:	79fb      	ldrb	r3, [r7, #7]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fb fab1 	bl	800328c <USER_SPI_status>
 8007d2a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	607a      	str	r2, [r7, #4]
 8007d3e:	603b      	str	r3, [r7, #0]
 8007d40:	4603      	mov	r3, r0
 8007d42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8007d44:	7bf8      	ldrb	r0, [r7, #15]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	68b9      	ldr	r1, [r7, #8]
 8007d4c:	f7fb fab4 	bl	80032b8 <USER_SPI_read>
 8007d50:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	603b      	str	r3, [r7, #0]
 8007d66:	4603      	mov	r3, r0
 8007d68:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8007d6a:	7bf8      	ldrb	r0, [r7, #15]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	68b9      	ldr	r1, [r7, #8]
 8007d72:	f7fb fb07 	bl	8003384 <USER_SPI_write>
 8007d76:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	603a      	str	r2, [r7, #0]
 8007d8a:	71fb      	strb	r3, [r7, #7]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8007d90:	79b9      	ldrb	r1, [r7, #6]
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fb fb70 	bl	800347c <USER_SPI_ioctl>
 8007d9c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	4603      	mov	r3, r0
 8007db0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007db2:	79fb      	ldrb	r3, [r7, #7]
 8007db4:	4a08      	ldr	r2, [pc, #32]	; (8007dd8 <disk_status+0x30>)
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	79fa      	ldrb	r2, [r7, #7]
 8007dc0:	4905      	ldr	r1, [pc, #20]	; (8007dd8 <disk_status+0x30>)
 8007dc2:	440a      	add	r2, r1
 8007dc4:	7a12      	ldrb	r2, [r2, #8]
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	4798      	blx	r3
 8007dca:	4603      	mov	r3, r0
 8007dcc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	2000185c 	.word	0x2000185c

08007ddc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	4603      	mov	r3, r0
 8007de4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007dea:	79fb      	ldrb	r3, [r7, #7]
 8007dec:	4a0d      	ldr	r2, [pc, #52]	; (8007e24 <disk_initialize+0x48>)
 8007dee:	5cd3      	ldrb	r3, [r2, r3]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d111      	bne.n	8007e18 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007df4:	79fb      	ldrb	r3, [r7, #7]
 8007df6:	4a0b      	ldr	r2, [pc, #44]	; (8007e24 <disk_initialize+0x48>)
 8007df8:	2101      	movs	r1, #1
 8007dfa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007dfc:	79fb      	ldrb	r3, [r7, #7]
 8007dfe:	4a09      	ldr	r2, [pc, #36]	; (8007e24 <disk_initialize+0x48>)
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	79fa      	ldrb	r2, [r7, #7]
 8007e0a:	4906      	ldr	r1, [pc, #24]	; (8007e24 <disk_initialize+0x48>)
 8007e0c:	440a      	add	r2, r1
 8007e0e:	7a12      	ldrb	r2, [r2, #8]
 8007e10:	4610      	mov	r0, r2
 8007e12:	4798      	blx	r3
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	2000185c 	.word	0x2000185c

08007e28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007e28:	b590      	push	{r4, r7, lr}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60b9      	str	r1, [r7, #8]
 8007e30:	607a      	str	r2, [r7, #4]
 8007e32:	603b      	str	r3, [r7, #0]
 8007e34:	4603      	mov	r3, r0
 8007e36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
 8007e3a:	4a0a      	ldr	r2, [pc, #40]	; (8007e64 <disk_read+0x3c>)
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	689c      	ldr	r4, [r3, #8]
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	4a07      	ldr	r2, [pc, #28]	; (8007e64 <disk_read+0x3c>)
 8007e48:	4413      	add	r3, r2
 8007e4a:	7a18      	ldrb	r0, [r3, #8]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	68b9      	ldr	r1, [r7, #8]
 8007e52:	47a0      	blx	r4
 8007e54:	4603      	mov	r3, r0
 8007e56:	75fb      	strb	r3, [r7, #23]
  return res;
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd90      	pop	{r4, r7, pc}
 8007e62:	bf00      	nop
 8007e64:	2000185c 	.word	0x2000185c

08007e68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007e68:	b590      	push	{r4, r7, lr}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60b9      	str	r1, [r7, #8]
 8007e70:	607a      	str	r2, [r7, #4]
 8007e72:	603b      	str	r3, [r7, #0]
 8007e74:	4603      	mov	r3, r0
 8007e76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	4a0a      	ldr	r2, [pc, #40]	; (8007ea4 <disk_write+0x3c>)
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	68dc      	ldr	r4, [r3, #12]
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	4a07      	ldr	r2, [pc, #28]	; (8007ea4 <disk_write+0x3c>)
 8007e88:	4413      	add	r3, r2
 8007e8a:	7a18      	ldrb	r0, [r3, #8]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	68b9      	ldr	r1, [r7, #8]
 8007e92:	47a0      	blx	r4
 8007e94:	4603      	mov	r3, r0
 8007e96:	75fb      	strb	r3, [r7, #23]
  return res;
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd90      	pop	{r4, r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	2000185c 	.word	0x2000185c

08007ea8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4603      	mov	r3, r0
 8007eb0:	603a      	str	r2, [r7, #0]
 8007eb2:	71fb      	strb	r3, [r7, #7]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	4a09      	ldr	r2, [pc, #36]	; (8007ee0 <disk_ioctl+0x38>)
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	79fa      	ldrb	r2, [r7, #7]
 8007ec6:	4906      	ldr	r1, [pc, #24]	; (8007ee0 <disk_ioctl+0x38>)
 8007ec8:	440a      	add	r2, r1
 8007eca:	7a10      	ldrb	r0, [r2, #8]
 8007ecc:	79b9      	ldrb	r1, [r7, #6]
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	4798      	blx	r3
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	73fb      	strb	r3, [r7, #15]
  return res;
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	2000185c 	.word	0x2000185c

08007ee4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007ef4:	89fb      	ldrh	r3, [r7, #14]
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	b21a      	sxth	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	b21b      	sxth	r3, r3
 8007f00:	4313      	orrs	r3, r2
 8007f02:	b21b      	sxth	r3, r3
 8007f04:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007f06:	89fb      	ldrh	r3, [r7, #14]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3303      	adds	r3, #3
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	021b      	lsls	r3, r3, #8
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	3202      	adds	r2, #2
 8007f2c:	7812      	ldrb	r2, [r2, #0]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	021b      	lsls	r3, r3, #8
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	3201      	adds	r2, #1
 8007f3a:	7812      	ldrb	r2, [r2, #0]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	021b      	lsls	r3, r3, #8
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	7812      	ldrb	r2, [r2, #0]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	60fb      	str	r3, [r7, #12]
	return rv;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	460b      	mov	r3, r1
 8007f64:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	887a      	ldrh	r2, [r7, #2]
 8007f6e:	b2d2      	uxtb	r2, r2
 8007f70:	701a      	strb	r2, [r3, #0]
 8007f72:	887b      	ldrh	r3, [r7, #2]
 8007f74:	0a1b      	lsrs	r3, r3, #8
 8007f76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	1c5a      	adds	r2, r3, #1
 8007f7c:	607a      	str	r2, [r7, #4]
 8007f7e:	887a      	ldrh	r2, [r7, #2]
 8007f80:	b2d2      	uxtb	r2, r2
 8007f82:	701a      	strb	r2, [r3, #0]
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	b2d2      	uxtb	r2, r2
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	0a1b      	lsrs	r3, r3, #8
 8007faa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	607a      	str	r2, [r7, #4]
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	b2d2      	uxtb	r2, r2
 8007fb6:	701a      	strb	r2, [r3, #0]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	0a1b      	lsrs	r3, r3, #8
 8007fbc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	b2d2      	uxtb	r2, r2
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	0a1b      	lsrs	r3, r3, #8
 8007fce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	607a      	str	r2, [r7, #4]
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	b2d2      	uxtb	r2, r2
 8007fda:	701a      	strb	r2, [r3, #0]
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00d      	beq.n	800801e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	1c53      	adds	r3, r2, #1
 8008006:	613b      	str	r3, [r7, #16]
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	1c59      	adds	r1, r3, #1
 800800c:	6179      	str	r1, [r7, #20]
 800800e:	7812      	ldrb	r2, [r2, #0]
 8008010:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3b01      	subs	r3, #1
 8008016:	607b      	str	r3, [r7, #4]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1f1      	bne.n	8008002 <mem_cpy+0x1a>
	}
}
 800801e:	bf00      	nop
 8008020:	371c      	adds	r7, #28
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800802a:	b480      	push	{r7}
 800802c:	b087      	sub	sp, #28
 800802e:	af00      	add	r7, sp, #0
 8008030:	60f8      	str	r0, [r7, #12]
 8008032:	60b9      	str	r1, [r7, #8]
 8008034:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	617a      	str	r2, [r7, #20]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	b2d2      	uxtb	r2, r2
 8008044:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	3b01      	subs	r3, #1
 800804a:	607b      	str	r3, [r7, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f3      	bne.n	800803a <mem_set+0x10>
}
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	371c      	adds	r7, #28
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008060:	b480      	push	{r7}
 8008062:	b089      	sub	sp, #36	; 0x24
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	61fb      	str	r3, [r7, #28]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	1c5a      	adds	r2, r3, #1
 800807c:	61fa      	str	r2, [r7, #28]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	4619      	mov	r1, r3
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	61ba      	str	r2, [r7, #24]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	1acb      	subs	r3, r1, r3
 800808c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	3b01      	subs	r3, #1
 8008092:	607b      	str	r3, [r7, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d002      	beq.n	80080a0 <mem_cmp+0x40>
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0eb      	beq.n	8008078 <mem_cmp+0x18>

	return r;
 80080a0:	697b      	ldr	r3, [r7, #20]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3724      	adds	r7, #36	; 0x24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80080b8:	e002      	b.n	80080c0 <chk_chr+0x12>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	3301      	adds	r3, #1
 80080be:	607b      	str	r3, [r7, #4]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d005      	beq.n	80080d4 <chk_chr+0x26>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d1f2      	bne.n	80080ba <chk_chr+0xc>
	return *str;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	781b      	ldrb	r3, [r3, #0]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80080ee:	2300      	movs	r3, #0
 80080f0:	60bb      	str	r3, [r7, #8]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	60fb      	str	r3, [r7, #12]
 80080f6:	e029      	b.n	800814c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80080f8:	4a27      	ldr	r2, [pc, #156]	; (8008198 <chk_lock+0xb4>)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	011b      	lsls	r3, r3, #4
 80080fe:	4413      	add	r3, r2
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d01d      	beq.n	8008142 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008106:	4a24      	ldr	r2, [pc, #144]	; (8008198 <chk_lock+0xb4>)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	4413      	add	r3, r2
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	429a      	cmp	r2, r3
 8008116:	d116      	bne.n	8008146 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008118:	4a1f      	ldr	r2, [pc, #124]	; (8008198 <chk_lock+0xb4>)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	011b      	lsls	r3, r3, #4
 800811e:	4413      	add	r3, r2
 8008120:	3304      	adds	r3, #4
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008128:	429a      	cmp	r2, r3
 800812a:	d10c      	bne.n	8008146 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800812c:	4a1a      	ldr	r2, [pc, #104]	; (8008198 <chk_lock+0xb4>)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	011b      	lsls	r3, r3, #4
 8008132:	4413      	add	r3, r2
 8008134:	3308      	adds	r3, #8
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800813c:	429a      	cmp	r2, r3
 800813e:	d102      	bne.n	8008146 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008140:	e007      	b.n	8008152 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008142:	2301      	movs	r3, #1
 8008144:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3301      	adds	r3, #1
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d9d2      	bls.n	80080f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2b02      	cmp	r3, #2
 8008156:	d109      	bne.n	800816c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d102      	bne.n	8008164 <chk_lock+0x80>
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	2b02      	cmp	r3, #2
 8008162:	d101      	bne.n	8008168 <chk_lock+0x84>
 8008164:	2300      	movs	r3, #0
 8008166:	e010      	b.n	800818a <chk_lock+0xa6>
 8008168:	2312      	movs	r3, #18
 800816a:	e00e      	b.n	800818a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d108      	bne.n	8008184 <chk_lock+0xa0>
 8008172:	4a09      	ldr	r2, [pc, #36]	; (8008198 <chk_lock+0xb4>)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	011b      	lsls	r3, r3, #4
 8008178:	4413      	add	r3, r2
 800817a:	330c      	adds	r3, #12
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008182:	d101      	bne.n	8008188 <chk_lock+0xa4>
 8008184:	2310      	movs	r3, #16
 8008186:	e000      	b.n	800818a <chk_lock+0xa6>
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	2000183c 	.word	0x2000183c

0800819c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80081a2:	2300      	movs	r3, #0
 80081a4:	607b      	str	r3, [r7, #4]
 80081a6:	e002      	b.n	80081ae <enq_lock+0x12>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3301      	adds	r3, #1
 80081ac:	607b      	str	r3, [r7, #4]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d806      	bhi.n	80081c2 <enq_lock+0x26>
 80081b4:	4a09      	ldr	r2, [pc, #36]	; (80081dc <enq_lock+0x40>)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	011b      	lsls	r3, r3, #4
 80081ba:	4413      	add	r3, r2
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1f2      	bne.n	80081a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	bf14      	ite	ne
 80081c8:	2301      	movne	r3, #1
 80081ca:	2300      	moveq	r3, #0
 80081cc:	b2db      	uxtb	r3, r3
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	2000183c 	.word	0x2000183c

080081e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80081ea:	2300      	movs	r3, #0
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	e01f      	b.n	8008230 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80081f0:	4a41      	ldr	r2, [pc, #260]	; (80082f8 <inc_lock+0x118>)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	011b      	lsls	r3, r3, #4
 80081f6:	4413      	add	r3, r2
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d113      	bne.n	800822a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008202:	4a3d      	ldr	r2, [pc, #244]	; (80082f8 <inc_lock+0x118>)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	011b      	lsls	r3, r3, #4
 8008208:	4413      	add	r3, r2
 800820a:	3304      	adds	r3, #4
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008212:	429a      	cmp	r2, r3
 8008214:	d109      	bne.n	800822a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008216:	4a38      	ldr	r2, [pc, #224]	; (80082f8 <inc_lock+0x118>)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	011b      	lsls	r3, r3, #4
 800821c:	4413      	add	r3, r2
 800821e:	3308      	adds	r3, #8
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008226:	429a      	cmp	r2, r3
 8008228:	d006      	beq.n	8008238 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3301      	adds	r3, #1
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d9dc      	bls.n	80081f0 <inc_lock+0x10>
 8008236:	e000      	b.n	800823a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008238:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b02      	cmp	r3, #2
 800823e:	d132      	bne.n	80082a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008240:	2300      	movs	r3, #0
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	e002      	b.n	800824c <inc_lock+0x6c>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3301      	adds	r3, #1
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d806      	bhi.n	8008260 <inc_lock+0x80>
 8008252:	4a29      	ldr	r2, [pc, #164]	; (80082f8 <inc_lock+0x118>)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	4413      	add	r3, r2
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1f2      	bne.n	8008246 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b02      	cmp	r3, #2
 8008264:	d101      	bne.n	800826a <inc_lock+0x8a>
 8008266:	2300      	movs	r3, #0
 8008268:	e040      	b.n	80082ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	4922      	ldr	r1, [pc, #136]	; (80082f8 <inc_lock+0x118>)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	011b      	lsls	r3, r3, #4
 8008274:	440b      	add	r3, r1
 8008276:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689a      	ldr	r2, [r3, #8]
 800827c:	491e      	ldr	r1, [pc, #120]	; (80082f8 <inc_lock+0x118>)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	011b      	lsls	r3, r3, #4
 8008282:	440b      	add	r3, r1
 8008284:	3304      	adds	r3, #4
 8008286:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	695a      	ldr	r2, [r3, #20]
 800828c:	491a      	ldr	r1, [pc, #104]	; (80082f8 <inc_lock+0x118>)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	011b      	lsls	r3, r3, #4
 8008292:	440b      	add	r3, r1
 8008294:	3308      	adds	r3, #8
 8008296:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008298:	4a17      	ldr	r2, [pc, #92]	; (80082f8 <inc_lock+0x118>)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	011b      	lsls	r3, r3, #4
 800829e:	4413      	add	r3, r2
 80082a0:	330c      	adds	r3, #12
 80082a2:	2200      	movs	r2, #0
 80082a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d009      	beq.n	80082c0 <inc_lock+0xe0>
 80082ac:	4a12      	ldr	r2, [pc, #72]	; (80082f8 <inc_lock+0x118>)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	011b      	lsls	r3, r3, #4
 80082b2:	4413      	add	r3, r2
 80082b4:	330c      	adds	r3, #12
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <inc_lock+0xe0>
 80082bc:	2300      	movs	r3, #0
 80082be:	e015      	b.n	80082ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d108      	bne.n	80082d8 <inc_lock+0xf8>
 80082c6:	4a0c      	ldr	r2, [pc, #48]	; (80082f8 <inc_lock+0x118>)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	011b      	lsls	r3, r3, #4
 80082cc:	4413      	add	r3, r2
 80082ce:	330c      	adds	r3, #12
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	3301      	adds	r3, #1
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	e001      	b.n	80082dc <inc_lock+0xfc>
 80082d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082dc:	4906      	ldr	r1, [pc, #24]	; (80082f8 <inc_lock+0x118>)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	440b      	add	r3, r1
 80082e4:	330c      	adds	r3, #12
 80082e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3301      	adds	r3, #1
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	2000183c 	.word	0x2000183c

080082fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3b01      	subs	r3, #1
 8008308:	607b      	str	r3, [r7, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d825      	bhi.n	800835c <dec_lock+0x60>
		n = Files[i].ctr;
 8008310:	4a17      	ldr	r2, [pc, #92]	; (8008370 <dec_lock+0x74>)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	011b      	lsls	r3, r3, #4
 8008316:	4413      	add	r3, r2
 8008318:	330c      	adds	r3, #12
 800831a:	881b      	ldrh	r3, [r3, #0]
 800831c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800831e:	89fb      	ldrh	r3, [r7, #14]
 8008320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008324:	d101      	bne.n	800832a <dec_lock+0x2e>
 8008326:	2300      	movs	r3, #0
 8008328:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800832a:	89fb      	ldrh	r3, [r7, #14]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <dec_lock+0x3a>
 8008330:	89fb      	ldrh	r3, [r7, #14]
 8008332:	3b01      	subs	r3, #1
 8008334:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008336:	4a0e      	ldr	r2, [pc, #56]	; (8008370 <dec_lock+0x74>)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	011b      	lsls	r3, r3, #4
 800833c:	4413      	add	r3, r2
 800833e:	330c      	adds	r3, #12
 8008340:	89fa      	ldrh	r2, [r7, #14]
 8008342:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008344:	89fb      	ldrh	r3, [r7, #14]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d105      	bne.n	8008356 <dec_lock+0x5a>
 800834a:	4a09      	ldr	r2, [pc, #36]	; (8008370 <dec_lock+0x74>)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	011b      	lsls	r3, r3, #4
 8008350:	4413      	add	r3, r2
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	737b      	strb	r3, [r7, #13]
 800835a:	e001      	b.n	8008360 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800835c:	2302      	movs	r3, #2
 800835e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008360:	7b7b      	ldrb	r3, [r7, #13]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	2000183c 	.word	0x2000183c

08008374 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	e010      	b.n	80083a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008382:	4a0d      	ldr	r2, [pc, #52]	; (80083b8 <clear_lock+0x44>)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	011b      	lsls	r3, r3, #4
 8008388:	4413      	add	r3, r2
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	429a      	cmp	r2, r3
 8008390:	d105      	bne.n	800839e <clear_lock+0x2a>
 8008392:	4a09      	ldr	r2, [pc, #36]	; (80083b8 <clear_lock+0x44>)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	011b      	lsls	r3, r3, #4
 8008398:	4413      	add	r3, r2
 800839a:	2200      	movs	r2, #0
 800839c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3301      	adds	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d9eb      	bls.n	8008382 <clear_lock+0xe>
	}
}
 80083aa:	bf00      	nop
 80083ac:	bf00      	nop
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	2000183c 	.word	0x2000183c

080083bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	78db      	ldrb	r3, [r3, #3]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d034      	beq.n	800843a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	7858      	ldrb	r0, [r3, #1]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083e0:	2301      	movs	r3, #1
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	f7ff fd40 	bl	8007e68 <disk_write>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	73fb      	strb	r3, [r7, #15]
 80083f2:	e022      	b.n	800843a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	1ad2      	subs	r2, r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	429a      	cmp	r2, r3
 8008408:	d217      	bcs.n	800843a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	789b      	ldrb	r3, [r3, #2]
 800840e:	613b      	str	r3, [r7, #16]
 8008410:	e010      	b.n	8008434 <sync_window+0x78>
					wsect += fs->fsize;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	4413      	add	r3, r2
 800841a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	7858      	ldrb	r0, [r3, #1]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008426:	2301      	movs	r3, #1
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	f7ff fd1d 	bl	8007e68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	3b01      	subs	r3, #1
 8008432:	613b      	str	r3, [r7, #16]
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d8eb      	bhi.n	8008412 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800843a:	7bfb      	ldrb	r3, [r7, #15]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	429a      	cmp	r2, r3
 800845a:	d01b      	beq.n	8008494 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7ff ffad 	bl	80083bc <sync_window>
 8008462:	4603      	mov	r3, r0
 8008464:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008466:	7bfb      	ldrb	r3, [r7, #15]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d113      	bne.n	8008494 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	7858      	ldrb	r0, [r3, #1]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008476:	2301      	movs	r3, #1
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	f7ff fcd5 	bl	8007e28 <disk_read>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d004      	beq.n	800848e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008484:	f04f 33ff 	mov.w	r3, #4294967295
 8008488:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800848a:	2301      	movs	r3, #1
 800848c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008494:	7bfb      	ldrb	r3, [r7, #15]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff ff87 	bl	80083bc <sync_window>
 80084ae:	4603      	mov	r3, r0
 80084b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d158      	bne.n	800856a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d148      	bne.n	8008552 <sync_fs+0xb2>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	791b      	ldrb	r3, [r3, #4]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d144      	bne.n	8008552 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3330      	adds	r3, #48	; 0x30
 80084cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084d0:	2100      	movs	r1, #0
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7ff fda9 	bl	800802a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3330      	adds	r3, #48	; 0x30
 80084dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80084e0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7ff fd38 	bl	8007f5a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3330      	adds	r3, #48	; 0x30
 80084ee:	4921      	ldr	r1, [pc, #132]	; (8008574 <sync_fs+0xd4>)
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7ff fd4d 	bl	8007f90 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	3330      	adds	r3, #48	; 0x30
 80084fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80084fe:	491e      	ldr	r1, [pc, #120]	; (8008578 <sync_fs+0xd8>)
 8008500:	4618      	mov	r0, r3
 8008502:	f7ff fd45 	bl	8007f90 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3330      	adds	r3, #48	; 0x30
 800850a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	4619      	mov	r1, r3
 8008514:	4610      	mov	r0, r2
 8008516:	f7ff fd3b 	bl	8007f90 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3330      	adds	r3, #48	; 0x30
 800851e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	4619      	mov	r1, r3
 8008528:	4610      	mov	r0, r2
 800852a:	f7ff fd31 	bl	8007f90 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	7858      	ldrb	r0, [r3, #1]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008546:	2301      	movs	r3, #1
 8008548:	f7ff fc8e 	bl	8007e68 <disk_write>
			fs->fsi_flag = 0;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	2200      	movs	r2, #0
 8008558:	2100      	movs	r1, #0
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff fca4 	bl	8007ea8 <disk_ioctl>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <sync_fs+0xca>
 8008566:	2301      	movs	r3, #1
 8008568:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800856a:	7bfb      	ldrb	r3, [r7, #15]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	41615252 	.word	0x41615252
 8008578:	61417272 	.word	0x61417272

0800857c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	3b02      	subs	r3, #2
 800858a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	3b02      	subs	r3, #2
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	429a      	cmp	r2, r3
 8008596:	d301      	bcc.n	800859c <clust2sect+0x20>
 8008598:	2300      	movs	r3, #0
 800859a:	e008      	b.n	80085ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	895b      	ldrh	r3, [r3, #10]
 80085a0:	461a      	mov	r2, r3
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	fb03 f202 	mul.w	r2, r3, r2
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ac:	4413      	add	r3, r2
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b086      	sub	sp, #24
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d904      	bls.n	80085da <get_fat+0x20>
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d302      	bcc.n	80085e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80085da:	2301      	movs	r3, #1
 80085dc:	617b      	str	r3, [r7, #20]
 80085de:	e08f      	b.n	8008700 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80085e0:	f04f 33ff 	mov.w	r3, #4294967295
 80085e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d062      	beq.n	80086b4 <get_fat+0xfa>
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	dc7c      	bgt.n	80086ec <get_fat+0x132>
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d002      	beq.n	80085fc <get_fat+0x42>
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d042      	beq.n	8008680 <get_fat+0xc6>
 80085fa:	e077      	b.n	80086ec <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	085b      	lsrs	r3, r3, #1
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4413      	add	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	6a1a      	ldr	r2, [r3, #32]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	0a5b      	lsrs	r3, r3, #9
 8008612:	4413      	add	r3, r2
 8008614:	4619      	mov	r1, r3
 8008616:	6938      	ldr	r0, [r7, #16]
 8008618:	f7ff ff14 	bl	8008444 <move_window>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d167      	bne.n	80086f2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	60fa      	str	r2, [r7, #12]
 8008628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	4413      	add	r3, r2
 8008630:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008634:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	6a1a      	ldr	r2, [r3, #32]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	0a5b      	lsrs	r3, r3, #9
 800863e:	4413      	add	r3, r2
 8008640:	4619      	mov	r1, r3
 8008642:	6938      	ldr	r0, [r7, #16]
 8008644:	f7ff fefe 	bl	8008444 <move_window>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d153      	bne.n	80086f6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	4413      	add	r3, r2
 8008658:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800865c:	021b      	lsls	r3, r3, #8
 800865e:	461a      	mov	r2, r3
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	4313      	orrs	r3, r2
 8008664:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <get_fat+0xbc>
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	091b      	lsrs	r3, r3, #4
 8008674:	e002      	b.n	800867c <get_fat+0xc2>
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800867c:	617b      	str	r3, [r7, #20]
			break;
 800867e:	e03f      	b.n	8008700 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	6a1a      	ldr	r2, [r3, #32]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	0a1b      	lsrs	r3, r3, #8
 8008688:	4413      	add	r3, r2
 800868a:	4619      	mov	r1, r3
 800868c:	6938      	ldr	r0, [r7, #16]
 800868e:	f7ff fed9 	bl	8008444 <move_window>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d130      	bne.n	80086fa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	005b      	lsls	r3, r3, #1
 80086a2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80086a6:	4413      	add	r3, r2
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7ff fc1b 	bl	8007ee4 <ld_word>
 80086ae:	4603      	mov	r3, r0
 80086b0:	617b      	str	r3, [r7, #20]
			break;
 80086b2:	e025      	b.n	8008700 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	6a1a      	ldr	r2, [r3, #32]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	09db      	lsrs	r3, r3, #7
 80086bc:	4413      	add	r3, r2
 80086be:	4619      	mov	r1, r3
 80086c0:	6938      	ldr	r0, [r7, #16]
 80086c2:	f7ff febf 	bl	8008444 <move_window>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d118      	bne.n	80086fe <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80086da:	4413      	add	r3, r2
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff fc19 	bl	8007f14 <ld_dword>
 80086e2:	4603      	mov	r3, r0
 80086e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80086e8:	617b      	str	r3, [r7, #20]
			break;
 80086ea:	e009      	b.n	8008700 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80086ec:	2301      	movs	r3, #1
 80086ee:	617b      	str	r3, [r7, #20]
 80086f0:	e006      	b.n	8008700 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086f2:	bf00      	nop
 80086f4:	e004      	b.n	8008700 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086f6:	bf00      	nop
 80086f8:	e002      	b.n	8008700 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80086fa:	bf00      	nop
 80086fc:	e000      	b.n	8008700 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80086fe:	bf00      	nop
		}
	}

	return val;
 8008700:	697b      	ldr	r3, [r7, #20]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800870a:	b590      	push	{r4, r7, lr}
 800870c:	b089      	sub	sp, #36	; 0x24
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008716:	2302      	movs	r3, #2
 8008718:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2b01      	cmp	r3, #1
 800871e:	f240 80d9 	bls.w	80088d4 <put_fat+0x1ca>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	429a      	cmp	r2, r3
 800872a:	f080 80d3 	bcs.w	80088d4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b03      	cmp	r3, #3
 8008734:	f000 8096 	beq.w	8008864 <put_fat+0x15a>
 8008738:	2b03      	cmp	r3, #3
 800873a:	f300 80cb 	bgt.w	80088d4 <put_fat+0x1ca>
 800873e:	2b01      	cmp	r3, #1
 8008740:	d002      	beq.n	8008748 <put_fat+0x3e>
 8008742:	2b02      	cmp	r3, #2
 8008744:	d06e      	beq.n	8008824 <put_fat+0x11a>
 8008746:	e0c5      	b.n	80088d4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	61bb      	str	r3, [r7, #24]
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	085b      	lsrs	r3, r3, #1
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	4413      	add	r3, r2
 8008754:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6a1a      	ldr	r2, [r3, #32]
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	0a5b      	lsrs	r3, r3, #9
 800875e:	4413      	add	r3, r2
 8008760:	4619      	mov	r1, r3
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7ff fe6e 	bl	8008444 <move_window>
 8008768:	4603      	mov	r3, r0
 800876a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800876c:	7ffb      	ldrb	r3, [r7, #31]
 800876e:	2b00      	cmp	r3, #0
 8008770:	f040 80a9 	bne.w	80088c6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	1c59      	adds	r1, r3, #1
 800877e:	61b9      	str	r1, [r7, #24]
 8008780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008784:	4413      	add	r3, r2
 8008786:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00d      	beq.n	80087ae <put_fat+0xa4>
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	b25b      	sxtb	r3, r3
 8008798:	f003 030f 	and.w	r3, r3, #15
 800879c:	b25a      	sxtb	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	b25b      	sxtb	r3, r3
 80087a6:	4313      	orrs	r3, r2
 80087a8:	b25b      	sxtb	r3, r3
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	e001      	b.n	80087b2 <put_fat+0xa8>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6a1a      	ldr	r2, [r3, #32]
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	0a5b      	lsrs	r3, r3, #9
 80087c4:	4413      	add	r3, r2
 80087c6:	4619      	mov	r1, r3
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f7ff fe3b 	bl	8008444 <move_window>
 80087ce:	4603      	mov	r3, r0
 80087d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80087d2:	7ffb      	ldrb	r3, [r7, #31]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d178      	bne.n	80088ca <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e4:	4413      	add	r3, r2
 80087e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <put_fat+0xf0>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	091b      	lsrs	r3, r3, #4
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	e00e      	b.n	8008818 <put_fat+0x10e>
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	b25b      	sxtb	r3, r3
 8008800:	f023 030f 	bic.w	r3, r3, #15
 8008804:	b25a      	sxtb	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	0a1b      	lsrs	r3, r3, #8
 800880a:	b25b      	sxtb	r3, r3
 800880c:	f003 030f 	and.w	r3, r3, #15
 8008810:	b25b      	sxtb	r3, r3
 8008812:	4313      	orrs	r3, r2
 8008814:	b25b      	sxtb	r3, r3
 8008816:	b2db      	uxtb	r3, r3
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2201      	movs	r2, #1
 8008820:	70da      	strb	r2, [r3, #3]
			break;
 8008822:	e057      	b.n	80088d4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a1a      	ldr	r2, [r3, #32]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	0a1b      	lsrs	r3, r3, #8
 800882c:	4413      	add	r3, r2
 800882e:	4619      	mov	r1, r3
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f7ff fe07 	bl	8008444 <move_window>
 8008836:	4603      	mov	r3, r0
 8008838:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800883a:	7ffb      	ldrb	r3, [r7, #31]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d146      	bne.n	80088ce <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800884e:	4413      	add	r3, r2
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	b292      	uxth	r2, r2
 8008854:	4611      	mov	r1, r2
 8008856:	4618      	mov	r0, r3
 8008858:	f7ff fb7f 	bl	8007f5a <st_word>
			fs->wflag = 1;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2201      	movs	r2, #1
 8008860:	70da      	strb	r2, [r3, #3]
			break;
 8008862:	e037      	b.n	80088d4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a1a      	ldr	r2, [r3, #32]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	09db      	lsrs	r3, r3, #7
 800886c:	4413      	add	r3, r2
 800886e:	4619      	mov	r1, r3
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f7ff fde7 	bl	8008444 <move_window>
 8008876:	4603      	mov	r3, r0
 8008878:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800887a:	7ffb      	ldrb	r3, [r7, #31]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d128      	bne.n	80088d2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008894:	4413      	add	r3, r2
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff fb3c 	bl	8007f14 <ld_dword>
 800889c:	4603      	mov	r3, r0
 800889e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80088a2:	4323      	orrs	r3, r4
 80088a4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80088b4:	4413      	add	r3, r2
 80088b6:	6879      	ldr	r1, [r7, #4]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7ff fb69 	bl	8007f90 <st_dword>
			fs->wflag = 1;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2201      	movs	r2, #1
 80088c2:	70da      	strb	r2, [r3, #3]
			break;
 80088c4:	e006      	b.n	80088d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80088c6:	bf00      	nop
 80088c8:	e004      	b.n	80088d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80088ca:	bf00      	nop
 80088cc:	e002      	b.n	80088d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80088ce:	bf00      	nop
 80088d0:	e000      	b.n	80088d4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80088d2:	bf00      	nop
		}
	}
	return res;
 80088d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3724      	adds	r7, #36	; 0x24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd90      	pop	{r4, r7, pc}

080088de <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b088      	sub	sp, #32
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d904      	bls.n	8008904 <remove_chain+0x26>
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	429a      	cmp	r2, r3
 8008902:	d301      	bcc.n	8008908 <remove_chain+0x2a>
 8008904:	2302      	movs	r3, #2
 8008906:	e04b      	b.n	80089a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00c      	beq.n	8008928 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800890e:	f04f 32ff 	mov.w	r2, #4294967295
 8008912:	6879      	ldr	r1, [r7, #4]
 8008914:	69b8      	ldr	r0, [r7, #24]
 8008916:	f7ff fef8 	bl	800870a <put_fat>
 800891a:	4603      	mov	r3, r0
 800891c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800891e:	7ffb      	ldrb	r3, [r7, #31]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <remove_chain+0x4a>
 8008924:	7ffb      	ldrb	r3, [r7, #31]
 8008926:	e03b      	b.n	80089a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008928:	68b9      	ldr	r1, [r7, #8]
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f7ff fe45 	bl	80085ba <get_fat>
 8008930:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d031      	beq.n	800899c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d101      	bne.n	8008942 <remove_chain+0x64>
 800893e:	2302      	movs	r3, #2
 8008940:	e02e      	b.n	80089a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008948:	d101      	bne.n	800894e <remove_chain+0x70>
 800894a:	2301      	movs	r3, #1
 800894c:	e028      	b.n	80089a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800894e:	2200      	movs	r2, #0
 8008950:	68b9      	ldr	r1, [r7, #8]
 8008952:	69b8      	ldr	r0, [r7, #24]
 8008954:	f7ff fed9 	bl	800870a <put_fat>
 8008958:	4603      	mov	r3, r0
 800895a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800895c:	7ffb      	ldrb	r3, [r7, #31]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d001      	beq.n	8008966 <remove_chain+0x88>
 8008962:	7ffb      	ldrb	r3, [r7, #31]
 8008964:	e01c      	b.n	80089a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	691a      	ldr	r2, [r3, #16]
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	3b02      	subs	r3, #2
 8008970:	429a      	cmp	r2, r3
 8008972:	d20b      	bcs.n	800898c <remove_chain+0xae>
			fs->free_clst++;
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	791b      	ldrb	r3, [r3, #4]
 8008982:	f043 0301 	orr.w	r3, r3, #1
 8008986:	b2da      	uxtb	r2, r3
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	429a      	cmp	r2, r3
 8008998:	d3c6      	bcc.n	8008928 <remove_chain+0x4a>
 800899a:	e000      	b.n	800899e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800899c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3720      	adds	r7, #32
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b088      	sub	sp, #32
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10d      	bne.n	80089da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d004      	beq.n	80089d4 <create_chain+0x2c>
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	69ba      	ldr	r2, [r7, #24]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d31b      	bcc.n	8008a0c <create_chain+0x64>
 80089d4:	2301      	movs	r3, #1
 80089d6:	61bb      	str	r3, [r7, #24]
 80089d8:	e018      	b.n	8008a0c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff fdec 	bl	80085ba <get_fat>
 80089e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d801      	bhi.n	80089ee <create_chain+0x46>
 80089ea:	2301      	movs	r3, #1
 80089ec:	e070      	b.n	8008ad0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f4:	d101      	bne.n	80089fa <create_chain+0x52>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	e06a      	b.n	8008ad0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d201      	bcs.n	8008a08 <create_chain+0x60>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	e063      	b.n	8008ad0 <create_chain+0x128>
		scl = clst;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	3301      	adds	r3, #1
 8008a14:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	69fa      	ldr	r2, [r7, #28]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d307      	bcc.n	8008a30 <create_chain+0x88>
				ncl = 2;
 8008a20:	2302      	movs	r3, #2
 8008a22:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008a24:	69fa      	ldr	r2, [r7, #28]
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d901      	bls.n	8008a30 <create_chain+0x88>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	e04f      	b.n	8008ad0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008a30:	69f9      	ldr	r1, [r7, #28]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff fdc1 	bl	80085ba <get_fat>
 8008a38:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00e      	beq.n	8008a5e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d003      	beq.n	8008a4e <create_chain+0xa6>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4c:	d101      	bne.n	8008a52 <create_chain+0xaa>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	e03e      	b.n	8008ad0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008a52:	69fa      	ldr	r2, [r7, #28]
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d1da      	bne.n	8008a10 <create_chain+0x68>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e038      	b.n	8008ad0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008a5e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008a60:	f04f 32ff 	mov.w	r2, #4294967295
 8008a64:	69f9      	ldr	r1, [r7, #28]
 8008a66:	6938      	ldr	r0, [r7, #16]
 8008a68:	f7ff fe4f 	bl	800870a <put_fat>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d109      	bne.n	8008a8a <create_chain+0xe2>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d006      	beq.n	8008a8a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008a7c:	69fa      	ldr	r2, [r7, #28]
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6938      	ldr	r0, [r7, #16]
 8008a82:	f7ff fe42 	bl	800870a <put_fat>
 8008a86:	4603      	mov	r3, r0
 8008a88:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d116      	bne.n	8008abe <create_chain+0x116>
		fs->last_clst = ncl;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	691a      	ldr	r2, [r3, #16]
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	3b02      	subs	r3, #2
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d804      	bhi.n	8008aae <create_chain+0x106>
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	1e5a      	subs	r2, r3, #1
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	791b      	ldrb	r3, [r3, #4]
 8008ab2:	f043 0301 	orr.w	r3, r3, #1
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	711a      	strb	r2, [r3, #4]
 8008abc:	e007      	b.n	8008ace <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d102      	bne.n	8008aca <create_chain+0x122>
 8008ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac8:	e000      	b.n	8008acc <create_chain+0x124>
 8008aca:	2301      	movs	r3, #1
 8008acc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008ace:	69fb      	ldr	r3, [r7, #28]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3720      	adds	r7, #32
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aec:	3304      	adds	r3, #4
 8008aee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	0a5b      	lsrs	r3, r3, #9
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	8952      	ldrh	r2, [r2, #10]
 8008af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008afc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	1d1a      	adds	r2, r3, #4
 8008b02:	613a      	str	r2, [r7, #16]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <clmt_clust+0x3a>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e010      	b.n	8008b34 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d307      	bcc.n	8008b2a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	617b      	str	r3, [r7, #20]
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	3304      	adds	r3, #4
 8008b26:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b28:	e7e9      	b.n	8008afe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008b2a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	4413      	add	r3, r2
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b56:	d204      	bcs.n	8008b62 <dir_sdi+0x22>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f003 031f 	and.w	r3, r3, #31
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008b62:	2302      	movs	r3, #2
 8008b64:	e063      	b.n	8008c2e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d106      	bne.n	8008b86 <dir_sdi+0x46>
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d902      	bls.n	8008b86 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10c      	bne.n	8008ba6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	095b      	lsrs	r3, r3, #5
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	8912      	ldrh	r2, [r2, #8]
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d301      	bcc.n	8008b9c <dir_sdi+0x5c>
 8008b98:	2302      	movs	r3, #2
 8008b9a:	e048      	b.n	8008c2e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	61da      	str	r2, [r3, #28]
 8008ba4:	e029      	b.n	8008bfa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	895b      	ldrh	r3, [r3, #10]
 8008baa:	025b      	lsls	r3, r3, #9
 8008bac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008bae:	e019      	b.n	8008be4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6979      	ldr	r1, [r7, #20]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff fd00 	bl	80085ba <get_fat>
 8008bba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc2:	d101      	bne.n	8008bc8 <dir_sdi+0x88>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e032      	b.n	8008c2e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d904      	bls.n	8008bd8 <dir_sdi+0x98>
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d301      	bcc.n	8008bdc <dir_sdi+0x9c>
 8008bd8:	2302      	movs	r3, #2
 8008bda:	e028      	b.n	8008c2e <dir_sdi+0xee>
			ofs -= csz;
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d2e1      	bcs.n	8008bb0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008bec:	6979      	ldr	r1, [r7, #20]
 8008bee:	6938      	ldr	r0, [r7, #16]
 8008bf0:	f7ff fcc4 	bl	800857c <clust2sect>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	69db      	ldr	r3, [r3, #28]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d101      	bne.n	8008c0c <dir_sdi+0xcc>
 8008c08:	2302      	movs	r3, #2
 8008c0a:	e010      	b.n	8008c2e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	69da      	ldr	r2, [r3, #28]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	0a5b      	lsrs	r3, r3, #9
 8008c14:	441a      	add	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c26:	441a      	add	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3718      	adds	r7, #24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b086      	sub	sp, #24
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	3320      	adds	r3, #32
 8008c4c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <dir_next+0x28>
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c5c:	d301      	bcc.n	8008c62 <dir_next+0x2c>
 8008c5e:	2304      	movs	r3, #4
 8008c60:	e0aa      	b.n	8008db8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f040 8098 	bne.w	8008d9e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10b      	bne.n	8008c98 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	095b      	lsrs	r3, r3, #5
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	8912      	ldrh	r2, [r2, #8]
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	f0c0 8088 	bcc.w	8008d9e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	61da      	str	r2, [r3, #28]
 8008c94:	2304      	movs	r3, #4
 8008c96:	e08f      	b.n	8008db8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	0a5b      	lsrs	r3, r3, #9
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	8952      	ldrh	r2, [r2, #10]
 8008ca0:	3a01      	subs	r2, #1
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d17a      	bne.n	8008d9e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	f7ff fc82 	bl	80085ba <get_fat>
 8008cb6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d801      	bhi.n	8008cc2 <dir_next+0x8c>
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	e07a      	b.n	8008db8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc8:	d101      	bne.n	8008cce <dir_next+0x98>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e074      	b.n	8008db8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d358      	bcc.n	8008d8a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	61da      	str	r2, [r3, #28]
 8008ce4:	2304      	movs	r3, #4
 8008ce6:	e067      	b.n	8008db8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	f7ff fe59 	bl	80089a8 <create_chain>
 8008cf6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <dir_next+0xcc>
 8008cfe:	2307      	movs	r3, #7
 8008d00:	e05a      	b.n	8008db8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d101      	bne.n	8008d0c <dir_next+0xd6>
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e055      	b.n	8008db8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d12:	d101      	bne.n	8008d18 <dir_next+0xe2>
 8008d14:	2301      	movs	r3, #1
 8008d16:	e04f      	b.n	8008db8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f7ff fb4f 	bl	80083bc <sync_window>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <dir_next+0xf2>
 8008d24:	2301      	movs	r3, #1
 8008d26:	e047      	b.n	8008db8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	3330      	adds	r3, #48	; 0x30
 8008d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d30:	2100      	movs	r1, #0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff f979 	bl	800802a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008d38:	2300      	movs	r3, #0
 8008d3a:	613b      	str	r3, [r7, #16]
 8008d3c:	6979      	ldr	r1, [r7, #20]
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f7ff fc1c 	bl	800857c <clust2sect>
 8008d44:	4602      	mov	r2, r0
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d4a:	e012      	b.n	8008d72 <dir_next+0x13c>
						fs->wflag = 1;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f7ff fb32 	bl	80083bc <sync_window>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <dir_next+0x12c>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e02a      	b.n	8008db8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	3301      	adds	r3, #1
 8008d66:	613b      	str	r3, [r7, #16]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6c:	1c5a      	adds	r2, r3, #1
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	895b      	ldrh	r3, [r3, #10]
 8008d76:	461a      	mov	r2, r3
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d3e6      	bcc.n	8008d4c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	1ad2      	subs	r2, r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008d90:	6979      	ldr	r1, [r7, #20]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7ff fbf2 	bl	800857c <clust2sect>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db0:	441a      	add	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff feb4 	bl	8008b40 <dir_sdi>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d12b      	bne.n	8008e3a <dir_alloc+0x7a>
		n = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	4619      	mov	r1, r3
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f7ff fb29 	bl	8008444 <move_window>
 8008df2:	4603      	mov	r3, r0
 8008df4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008df6:	7dfb      	ldrb	r3, [r7, #23]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d11d      	bne.n	8008e38 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a1b      	ldr	r3, [r3, #32]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	2be5      	cmp	r3, #229	; 0xe5
 8008e04:	d004      	beq.n	8008e10 <dir_alloc+0x50>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d107      	bne.n	8008e20 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	3301      	adds	r3, #1
 8008e14:	613b      	str	r3, [r7, #16]
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d102      	bne.n	8008e24 <dir_alloc+0x64>
 8008e1e:	e00c      	b.n	8008e3a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008e20:	2300      	movs	r3, #0
 8008e22:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008e24:	2101      	movs	r1, #1
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff ff05 	bl	8008c36 <dir_next>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008e30:	7dfb      	ldrb	r3, [r7, #23]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0d7      	beq.n	8008de6 <dir_alloc+0x26>
 8008e36:	e000      	b.n	8008e3a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008e38:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	2b04      	cmp	r3, #4
 8008e3e:	d101      	bne.n	8008e44 <dir_alloc+0x84>
 8008e40:	2307      	movs	r3, #7
 8008e42:	75fb      	strb	r3, [r7, #23]
	return res;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	331a      	adds	r3, #26
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7ff f841 	bl	8007ee4 <ld_word>
 8008e62:	4603      	mov	r3, r0
 8008e64:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d109      	bne.n	8008e82 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	3314      	adds	r3, #20
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7ff f836 	bl	8007ee4 <ld_word>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	041b      	lsls	r3, r3, #16
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008e82:	68fb      	ldr	r3, [r7, #12]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	331a      	adds	r3, #26
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	b292      	uxth	r2, r2
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7ff f859 	bl	8007f5a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d109      	bne.n	8008ec4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f103 0214 	add.w	r2, r3, #20
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	0c1b      	lsrs	r3, r3, #16
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	f7ff f84b 	bl	8007f5a <st_word>
	}
}
 8008ec4:	bf00      	nop
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008eda:	2100      	movs	r1, #0
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7ff fe2f 	bl	8008b40 <dir_sdi>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <dir_find+0x24>
 8008eec:	7dfb      	ldrb	r3, [r7, #23]
 8008eee:	e03e      	b.n	8008f6e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	69db      	ldr	r3, [r3, #28]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6938      	ldr	r0, [r7, #16]
 8008ef8:	f7ff faa4 	bl	8008444 <move_window>
 8008efc:	4603      	mov	r3, r0
 8008efe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d12f      	bne.n	8008f66 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a1b      	ldr	r3, [r3, #32]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d102      	bne.n	8008f1a <dir_find+0x4e>
 8008f14:	2304      	movs	r3, #4
 8008f16:	75fb      	strb	r3, [r7, #23]
 8008f18:	e028      	b.n	8008f6c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	330b      	adds	r3, #11
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f26:	b2da      	uxtb	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a1b      	ldr	r3, [r3, #32]
 8008f30:	330b      	adds	r3, #11
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	f003 0308 	and.w	r3, r3, #8
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10a      	bne.n	8008f52 <dir_find+0x86>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a18      	ldr	r0, [r3, #32]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	3324      	adds	r3, #36	; 0x24
 8008f44:	220b      	movs	r2, #11
 8008f46:	4619      	mov	r1, r3
 8008f48:	f7ff f88a 	bl	8008060 <mem_cmp>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00b      	beq.n	8008f6a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008f52:	2100      	movs	r1, #0
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7ff fe6e 	bl	8008c36 <dir_next>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d0c5      	beq.n	8008ef0 <dir_find+0x24>
 8008f64:	e002      	b.n	8008f6c <dir_find+0xa0>
		if (res != FR_OK) break;
 8008f66:	bf00      	nop
 8008f68:	e000      	b.n	8008f6c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008f6a:	bf00      	nop

	return res;
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b084      	sub	sp, #16
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008f84:	2101      	movs	r1, #1
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7ff ff1a 	bl	8008dc0 <dir_alloc>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d11c      	bne.n	8008fd0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	69db      	ldr	r3, [r3, #28]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	68b8      	ldr	r0, [r7, #8]
 8008f9e:	f7ff fa51 	bl	8008444 <move_window>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d111      	bne.n	8008fd0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a1b      	ldr	r3, [r3, #32]
 8008fb0:	2220      	movs	r2, #32
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7ff f838 	bl	800802a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a18      	ldr	r0, [r3, #32]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	3324      	adds	r3, #36	; 0x24
 8008fc2:	220b      	movs	r2, #11
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	f7ff f80f 	bl	8007fe8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b088      	sub	sp, #32
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	3324      	adds	r3, #36	; 0x24
 8008ff0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008ff2:	220b      	movs	r2, #11
 8008ff4:	2120      	movs	r1, #32
 8008ff6:	68b8      	ldr	r0, [r7, #8]
 8008ff8:	f7ff f817 	bl	800802a <mem_set>
	si = i = 0; ni = 8;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	613b      	str	r3, [r7, #16]
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	61fb      	str	r3, [r7, #28]
 8009004:	2308      	movs	r3, #8
 8009006:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	1c5a      	adds	r2, r3, #1
 800900c:	61fa      	str	r2, [r7, #28]
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	4413      	add	r3, r2
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009016:	7efb      	ldrb	r3, [r7, #27]
 8009018:	2b20      	cmp	r3, #32
 800901a:	d94e      	bls.n	80090ba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800901c:	7efb      	ldrb	r3, [r7, #27]
 800901e:	2b2f      	cmp	r3, #47	; 0x2f
 8009020:	d006      	beq.n	8009030 <create_name+0x54>
 8009022:	7efb      	ldrb	r3, [r7, #27]
 8009024:	2b5c      	cmp	r3, #92	; 0x5c
 8009026:	d110      	bne.n	800904a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009028:	e002      	b.n	8009030 <create_name+0x54>
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	3301      	adds	r3, #1
 800902e:	61fb      	str	r3, [r7, #28]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	4413      	add	r3, r2
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	2b2f      	cmp	r3, #47	; 0x2f
 800903a:	d0f6      	beq.n	800902a <create_name+0x4e>
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	4413      	add	r3, r2
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	2b5c      	cmp	r3, #92	; 0x5c
 8009046:	d0f0      	beq.n	800902a <create_name+0x4e>
			break;
 8009048:	e038      	b.n	80090bc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800904a:	7efb      	ldrb	r3, [r7, #27]
 800904c:	2b2e      	cmp	r3, #46	; 0x2e
 800904e:	d003      	beq.n	8009058 <create_name+0x7c>
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	429a      	cmp	r2, r3
 8009056:	d30c      	bcc.n	8009072 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2b0b      	cmp	r3, #11
 800905c:	d002      	beq.n	8009064 <create_name+0x88>
 800905e:	7efb      	ldrb	r3, [r7, #27]
 8009060:	2b2e      	cmp	r3, #46	; 0x2e
 8009062:	d001      	beq.n	8009068 <create_name+0x8c>
 8009064:	2306      	movs	r3, #6
 8009066:	e044      	b.n	80090f2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009068:	2308      	movs	r3, #8
 800906a:	613b      	str	r3, [r7, #16]
 800906c:	230b      	movs	r3, #11
 800906e:	617b      	str	r3, [r7, #20]
			continue;
 8009070:	e022      	b.n	80090b8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009072:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009076:	2b00      	cmp	r3, #0
 8009078:	da04      	bge.n	8009084 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800907a:	7efb      	ldrb	r3, [r7, #27]
 800907c:	3b80      	subs	r3, #128	; 0x80
 800907e:	4a1f      	ldr	r2, [pc, #124]	; (80090fc <create_name+0x120>)
 8009080:	5cd3      	ldrb	r3, [r2, r3]
 8009082:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009084:	7efb      	ldrb	r3, [r7, #27]
 8009086:	4619      	mov	r1, r3
 8009088:	481d      	ldr	r0, [pc, #116]	; (8009100 <create_name+0x124>)
 800908a:	f7ff f810 	bl	80080ae <chk_chr>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d001      	beq.n	8009098 <create_name+0xbc>
 8009094:	2306      	movs	r3, #6
 8009096:	e02c      	b.n	80090f2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009098:	7efb      	ldrb	r3, [r7, #27]
 800909a:	2b60      	cmp	r3, #96	; 0x60
 800909c:	d905      	bls.n	80090aa <create_name+0xce>
 800909e:	7efb      	ldrb	r3, [r7, #27]
 80090a0:	2b7a      	cmp	r3, #122	; 0x7a
 80090a2:	d802      	bhi.n	80090aa <create_name+0xce>
 80090a4:	7efb      	ldrb	r3, [r7, #27]
 80090a6:	3b20      	subs	r3, #32
 80090a8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	1c5a      	adds	r2, r3, #1
 80090ae:	613a      	str	r2, [r7, #16]
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	4413      	add	r3, r2
 80090b4:	7efa      	ldrb	r2, [r7, #27]
 80090b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80090b8:	e7a6      	b.n	8009008 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80090ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	441a      	add	r2, r3
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <create_name+0xf4>
 80090cc:	2306      	movs	r3, #6
 80090ce:	e010      	b.n	80090f2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	2be5      	cmp	r3, #229	; 0xe5
 80090d6:	d102      	bne.n	80090de <create_name+0x102>
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2205      	movs	r2, #5
 80090dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80090de:	7efb      	ldrb	r3, [r7, #27]
 80090e0:	2b20      	cmp	r3, #32
 80090e2:	d801      	bhi.n	80090e8 <create_name+0x10c>
 80090e4:	2204      	movs	r2, #4
 80090e6:	e000      	b.n	80090ea <create_name+0x10e>
 80090e8:	2200      	movs	r2, #0
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	330b      	adds	r3, #11
 80090ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80090f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3720      	adds	r7, #32
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	080101fc 	.word	0x080101fc
 8009100:	0800d518 	.word	0x0800d518

08009104 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009118:	e002      	b.n	8009120 <follow_path+0x1c>
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	3301      	adds	r3, #1
 800911e:	603b      	str	r3, [r7, #0]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	2b2f      	cmp	r3, #47	; 0x2f
 8009126:	d0f8      	beq.n	800911a <follow_path+0x16>
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	2b5c      	cmp	r3, #92	; 0x5c
 800912e:	d0f4      	beq.n	800911a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	2200      	movs	r2, #0
 8009134:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	2b1f      	cmp	r3, #31
 800913c:	d80a      	bhi.n	8009154 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2280      	movs	r2, #128	; 0x80
 8009142:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009146:	2100      	movs	r1, #0
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff fcf9 	bl	8008b40 <dir_sdi>
 800914e:	4603      	mov	r3, r0
 8009150:	75fb      	strb	r3, [r7, #23]
 8009152:	e043      	b.n	80091dc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009154:	463b      	mov	r3, r7
 8009156:	4619      	mov	r1, r3
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7ff ff3f 	bl	8008fdc <create_name>
 800915e:	4603      	mov	r3, r0
 8009160:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009162:	7dfb      	ldrb	r3, [r7, #23]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d134      	bne.n	80091d2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f7ff feaf 	bl	8008ecc <dir_find>
 800916e:	4603      	mov	r3, r0
 8009170:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009178:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00a      	beq.n	8009196 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009180:	7dfb      	ldrb	r3, [r7, #23]
 8009182:	2b04      	cmp	r3, #4
 8009184:	d127      	bne.n	80091d6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009186:	7afb      	ldrb	r3, [r7, #11]
 8009188:	f003 0304 	and.w	r3, r3, #4
 800918c:	2b00      	cmp	r3, #0
 800918e:	d122      	bne.n	80091d6 <follow_path+0xd2>
 8009190:	2305      	movs	r3, #5
 8009192:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009194:	e01f      	b.n	80091d6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009196:	7afb      	ldrb	r3, [r7, #11]
 8009198:	f003 0304 	and.w	r3, r3, #4
 800919c:	2b00      	cmp	r3, #0
 800919e:	d11c      	bne.n	80091da <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	799b      	ldrb	r3, [r3, #6]
 80091a4:	f003 0310 	and.w	r3, r3, #16
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d102      	bne.n	80091b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80091ac:	2305      	movs	r3, #5
 80091ae:	75fb      	strb	r3, [r7, #23]
 80091b0:	e014      	b.n	80091dc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c0:	4413      	add	r3, r2
 80091c2:	4619      	mov	r1, r3
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f7ff fe42 	bl	8008e4e <ld_clust>
 80091ca:	4602      	mov	r2, r0
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80091d0:	e7c0      	b.n	8009154 <follow_path+0x50>
			if (res != FR_OK) break;
 80091d2:	bf00      	nop
 80091d4:	e002      	b.n	80091dc <follow_path+0xd8>
				break;
 80091d6:	bf00      	nop
 80091d8:	e000      	b.n	80091dc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80091da:	bf00      	nop
			}
		}
	}

	return res;
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b087      	sub	sp, #28
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80091ee:	f04f 33ff 	mov.w	r3, #4294967295
 80091f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d031      	beq.n	8009260 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	617b      	str	r3, [r7, #20]
 8009202:	e002      	b.n	800920a <get_ldnumber+0x24>
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	3301      	adds	r3, #1
 8009208:	617b      	str	r3, [r7, #20]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	2b20      	cmp	r3, #32
 8009210:	d903      	bls.n	800921a <get_ldnumber+0x34>
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b3a      	cmp	r3, #58	; 0x3a
 8009218:	d1f4      	bne.n	8009204 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b3a      	cmp	r3, #58	; 0x3a
 8009220:	d11c      	bne.n	800925c <get_ldnumber+0x76>
			tp = *path;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	60fa      	str	r2, [r7, #12]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	3b30      	subs	r3, #48	; 0x30
 8009232:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2b09      	cmp	r3, #9
 8009238:	d80e      	bhi.n	8009258 <get_ldnumber+0x72>
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	429a      	cmp	r2, r3
 8009240:	d10a      	bne.n	8009258 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d107      	bne.n	8009258 <get_ldnumber+0x72>
					vol = (int)i;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	3301      	adds	r3, #1
 8009250:	617b      	str	r3, [r7, #20]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	e002      	b.n	8009262 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800925c:	2300      	movs	r3, #0
 800925e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009260:	693b      	ldr	r3, [r7, #16]
}
 8009262:	4618      	mov	r0, r3
 8009264:	371c      	adds	r7, #28
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
	...

08009270 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	70da      	strb	r2, [r3, #3]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f04f 32ff 	mov.w	r2, #4294967295
 8009286:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7ff f8da 	bl	8008444 <move_window>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <check_fs+0x2a>
 8009296:	2304      	movs	r3, #4
 8009298:	e038      	b.n	800930c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	3330      	adds	r3, #48	; 0x30
 800929e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fe fe1e 	bl	8007ee4 <ld_word>
 80092a8:	4603      	mov	r3, r0
 80092aa:	461a      	mov	r2, r3
 80092ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d001      	beq.n	80092b8 <check_fs+0x48>
 80092b4:	2303      	movs	r3, #3
 80092b6:	e029      	b.n	800930c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80092be:	2be9      	cmp	r3, #233	; 0xe9
 80092c0:	d009      	beq.n	80092d6 <check_fs+0x66>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80092c8:	2beb      	cmp	r3, #235	; 0xeb
 80092ca:	d11e      	bne.n	800930a <check_fs+0x9a>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80092d2:	2b90      	cmp	r3, #144	; 0x90
 80092d4:	d119      	bne.n	800930a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3330      	adds	r3, #48	; 0x30
 80092da:	3336      	adds	r3, #54	; 0x36
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fe fe19 	bl	8007f14 <ld_dword>
 80092e2:	4603      	mov	r3, r0
 80092e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80092e8:	4a0a      	ldr	r2, [pc, #40]	; (8009314 <check_fs+0xa4>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d101      	bne.n	80092f2 <check_fs+0x82>
 80092ee:	2300      	movs	r3, #0
 80092f0:	e00c      	b.n	800930c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3330      	adds	r3, #48	; 0x30
 80092f6:	3352      	adds	r3, #82	; 0x52
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fe fe0b 	bl	8007f14 <ld_dword>
 80092fe:	4603      	mov	r3, r0
 8009300:	4a05      	ldr	r2, [pc, #20]	; (8009318 <check_fs+0xa8>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d101      	bne.n	800930a <check_fs+0x9a>
 8009306:	2300      	movs	r3, #0
 8009308:	e000      	b.n	800930c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800930a:	2302      	movs	r3, #2
}
 800930c:	4618      	mov	r0, r3
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	00544146 	.word	0x00544146
 8009318:	33544146 	.word	0x33544146

0800931c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b096      	sub	sp, #88	; 0x58
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	4613      	mov	r3, r2
 8009328:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	2200      	movs	r2, #0
 800932e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f7ff ff58 	bl	80091e6 <get_ldnumber>
 8009336:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800933a:	2b00      	cmp	r3, #0
 800933c:	da01      	bge.n	8009342 <find_volume+0x26>
 800933e:	230b      	movs	r3, #11
 8009340:	e22d      	b.n	800979e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009342:	4aa1      	ldr	r2, [pc, #644]	; (80095c8 <find_volume+0x2ac>)
 8009344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800934a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <find_volume+0x3a>
 8009352:	230c      	movs	r3, #12
 8009354:	e223      	b.n	800979e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800935a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800935c:	79fb      	ldrb	r3, [r7, #7]
 800935e:	f023 0301 	bic.w	r3, r3, #1
 8009362:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01a      	beq.n	80093a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936e:	785b      	ldrb	r3, [r3, #1]
 8009370:	4618      	mov	r0, r3
 8009372:	f7fe fd19 	bl	8007da8 <disk_status>
 8009376:	4603      	mov	r3, r0
 8009378:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800937c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10c      	bne.n	80093a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d007      	beq.n	800939e <find_volume+0x82>
 800938e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800939a:	230a      	movs	r3, #10
 800939c:	e1ff      	b.n	800979e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800939e:	2300      	movs	r3, #0
 80093a0:	e1fd      	b.n	800979e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80093a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a4:	2200      	movs	r2, #0
 80093a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80093a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80093b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b2:	785b      	ldrb	r3, [r3, #1]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fe fd11 	bl	8007ddc <disk_initialize>
 80093ba:	4603      	mov	r3, r0
 80093bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80093c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093c4:	f003 0301 	and.w	r3, r3, #1
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80093cc:	2303      	movs	r3, #3
 80093ce:	e1e6      	b.n	800979e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d007      	beq.n	80093e6 <find_volume+0xca>
 80093d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093da:	f003 0304 	and.w	r3, r3, #4
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80093e2:	230a      	movs	r3, #10
 80093e4:	e1db      	b.n	800979e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80093e6:	2300      	movs	r3, #0
 80093e8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80093ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093ee:	f7ff ff3f 	bl	8009270 <check_fs>
 80093f2:	4603      	mov	r3, r0
 80093f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80093f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d149      	bne.n	8009494 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009400:	2300      	movs	r3, #0
 8009402:	643b      	str	r3, [r7, #64]	; 0x40
 8009404:	e01e      	b.n	8009444 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009408:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800940c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800940e:	011b      	lsls	r3, r3, #4
 8009410:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009414:	4413      	add	r3, r2
 8009416:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941a:	3304      	adds	r3, #4
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d006      	beq.n	8009430 <find_volume+0x114>
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	3308      	adds	r3, #8
 8009426:	4618      	mov	r0, r3
 8009428:	f7fe fd74 	bl	8007f14 <ld_dword>
 800942c:	4602      	mov	r2, r0
 800942e:	e000      	b.n	8009432 <find_volume+0x116>
 8009430:	2200      	movs	r2, #0
 8009432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	3358      	adds	r3, #88	; 0x58
 8009438:	443b      	add	r3, r7
 800943a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800943e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009440:	3301      	adds	r3, #1
 8009442:	643b      	str	r3, [r7, #64]	; 0x40
 8009444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009446:	2b03      	cmp	r3, #3
 8009448:	d9dd      	bls.n	8009406 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800944a:	2300      	movs	r3, #0
 800944c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800944e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <find_volume+0x13e>
 8009454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009456:	3b01      	subs	r3, #1
 8009458:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800945a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	3358      	adds	r3, #88	; 0x58
 8009460:	443b      	add	r3, r7
 8009462:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009466:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800946a:	2b00      	cmp	r3, #0
 800946c:	d005      	beq.n	800947a <find_volume+0x15e>
 800946e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009470:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009472:	f7ff fefd 	bl	8009270 <check_fs>
 8009476:	4603      	mov	r3, r0
 8009478:	e000      	b.n	800947c <find_volume+0x160>
 800947a:	2303      	movs	r3, #3
 800947c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009480:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009484:	2b01      	cmp	r3, #1
 8009486:	d905      	bls.n	8009494 <find_volume+0x178>
 8009488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800948a:	3301      	adds	r3, #1
 800948c:	643b      	str	r3, [r7, #64]	; 0x40
 800948e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009490:	2b03      	cmp	r3, #3
 8009492:	d9e2      	bls.n	800945a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009494:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009498:	2b04      	cmp	r3, #4
 800949a:	d101      	bne.n	80094a0 <find_volume+0x184>
 800949c:	2301      	movs	r3, #1
 800949e:	e17e      	b.n	800979e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80094a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d901      	bls.n	80094ac <find_volume+0x190>
 80094a8:	230d      	movs	r3, #13
 80094aa:	e178      	b.n	800979e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80094ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ae:	3330      	adds	r3, #48	; 0x30
 80094b0:	330b      	adds	r3, #11
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fe fd16 	bl	8007ee4 <ld_word>
 80094b8:	4603      	mov	r3, r0
 80094ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094be:	d001      	beq.n	80094c4 <find_volume+0x1a8>
 80094c0:	230d      	movs	r3, #13
 80094c2:	e16c      	b.n	800979e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	3330      	adds	r3, #48	; 0x30
 80094c8:	3316      	adds	r3, #22
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fe fd0a 	bl	8007ee4 <ld_word>
 80094d0:	4603      	mov	r3, r0
 80094d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80094d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d106      	bne.n	80094e8 <find_volume+0x1cc>
 80094da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094dc:	3330      	adds	r3, #48	; 0x30
 80094de:	3324      	adds	r3, #36	; 0x24
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fe fd17 	bl	8007f14 <ld_dword>
 80094e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80094e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80094ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80094f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fa:	789b      	ldrb	r3, [r3, #2]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d005      	beq.n	800950c <find_volume+0x1f0>
 8009500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009502:	789b      	ldrb	r3, [r3, #2]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d001      	beq.n	800950c <find_volume+0x1f0>
 8009508:	230d      	movs	r3, #13
 800950a:	e148      	b.n	800979e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800950c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950e:	789b      	ldrb	r3, [r3, #2]
 8009510:	461a      	mov	r2, r3
 8009512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009514:	fb02 f303 	mul.w	r3, r2, r3
 8009518:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800951a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009520:	b29a      	uxth	r2, r3
 8009522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009524:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009528:	895b      	ldrh	r3, [r3, #10]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d008      	beq.n	8009540 <find_volume+0x224>
 800952e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009530:	895b      	ldrh	r3, [r3, #10]
 8009532:	461a      	mov	r2, r3
 8009534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009536:	895b      	ldrh	r3, [r3, #10]
 8009538:	3b01      	subs	r3, #1
 800953a:	4013      	ands	r3, r2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d001      	beq.n	8009544 <find_volume+0x228>
 8009540:	230d      	movs	r3, #13
 8009542:	e12c      	b.n	800979e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009546:	3330      	adds	r3, #48	; 0x30
 8009548:	3311      	adds	r3, #17
 800954a:	4618      	mov	r0, r3
 800954c:	f7fe fcca 	bl	8007ee4 <ld_word>
 8009550:	4603      	mov	r3, r0
 8009552:	461a      	mov	r2, r3
 8009554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009556:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	891b      	ldrh	r3, [r3, #8]
 800955c:	f003 030f 	and.w	r3, r3, #15
 8009560:	b29b      	uxth	r3, r3
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <find_volume+0x24e>
 8009566:	230d      	movs	r3, #13
 8009568:	e119      	b.n	800979e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956c:	3330      	adds	r3, #48	; 0x30
 800956e:	3313      	adds	r3, #19
 8009570:	4618      	mov	r0, r3
 8009572:	f7fe fcb7 	bl	8007ee4 <ld_word>
 8009576:	4603      	mov	r3, r0
 8009578:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800957a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800957c:	2b00      	cmp	r3, #0
 800957e:	d106      	bne.n	800958e <find_volume+0x272>
 8009580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009582:	3330      	adds	r3, #48	; 0x30
 8009584:	3320      	adds	r3, #32
 8009586:	4618      	mov	r0, r3
 8009588:	f7fe fcc4 	bl	8007f14 <ld_dword>
 800958c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800958e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009590:	3330      	adds	r3, #48	; 0x30
 8009592:	330e      	adds	r3, #14
 8009594:	4618      	mov	r0, r3
 8009596:	f7fe fca5 	bl	8007ee4 <ld_word>
 800959a:	4603      	mov	r3, r0
 800959c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800959e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <find_volume+0x28c>
 80095a4:	230d      	movs	r3, #13
 80095a6:	e0fa      	b.n	800979e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80095a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80095aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ac:	4413      	add	r3, r2
 80095ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095b0:	8912      	ldrh	r2, [r2, #8]
 80095b2:	0912      	lsrs	r2, r2, #4
 80095b4:	b292      	uxth	r2, r2
 80095b6:	4413      	add	r3, r2
 80095b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80095ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	429a      	cmp	r2, r3
 80095c0:	d204      	bcs.n	80095cc <find_volume+0x2b0>
 80095c2:	230d      	movs	r3, #13
 80095c4:	e0eb      	b.n	800979e <find_volume+0x482>
 80095c6:	bf00      	nop
 80095c8:	20001834 	.word	0x20001834
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80095cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095d4:	8952      	ldrh	r2, [r2, #10]
 80095d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80095da:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <find_volume+0x2ca>
 80095e2:	230d      	movs	r3, #13
 80095e4:	e0db      	b.n	800979e <find_volume+0x482>
		fmt = FS_FAT32;
 80095e6:	2303      	movs	r3, #3
 80095e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d802      	bhi.n	80095fc <find_volume+0x2e0>
 80095f6:	2302      	movs	r3, #2
 80095f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009602:	4293      	cmp	r3, r2
 8009604:	d802      	bhi.n	800960c <find_volume+0x2f0>
 8009606:	2301      	movs	r3, #1
 8009608:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960e:	1c9a      	adds	r2, r3, #2
 8009610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009612:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009616:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009618:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800961a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800961c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800961e:	441a      	add	r2, r3
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009624:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009628:	441a      	add	r2, r3
 800962a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800962e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009632:	2b03      	cmp	r3, #3
 8009634:	d11e      	bne.n	8009674 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009638:	3330      	adds	r3, #48	; 0x30
 800963a:	332a      	adds	r3, #42	; 0x2a
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe fc51 	bl	8007ee4 <ld_word>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <find_volume+0x330>
 8009648:	230d      	movs	r3, #13
 800964a:	e0a8      	b.n	800979e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800964c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964e:	891b      	ldrh	r3, [r3, #8]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <find_volume+0x33c>
 8009654:	230d      	movs	r3, #13
 8009656:	e0a2      	b.n	800979e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965a:	3330      	adds	r3, #48	; 0x30
 800965c:	332c      	adds	r3, #44	; 0x2c
 800965e:	4618      	mov	r0, r3
 8009660:	f7fe fc58 	bl	8007f14 <ld_dword>
 8009664:	4602      	mov	r2, r0
 8009666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009668:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800966a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	647b      	str	r3, [r7, #68]	; 0x44
 8009672:	e01f      	b.n	80096b4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009676:	891b      	ldrh	r3, [r3, #8]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <find_volume+0x364>
 800967c:	230d      	movs	r3, #13
 800967e:	e08e      	b.n	800979e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009682:	6a1a      	ldr	r2, [r3, #32]
 8009684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009686:	441a      	add	r2, r3
 8009688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800968c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009690:	2b02      	cmp	r3, #2
 8009692:	d103      	bne.n	800969c <find_volume+0x380>
 8009694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	e00a      	b.n	80096b2 <find_volume+0x396>
 800969c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969e:	695a      	ldr	r2, [r3, #20]
 80096a0:	4613      	mov	r3, r2
 80096a2:	005b      	lsls	r3, r3, #1
 80096a4:	4413      	add	r3, r2
 80096a6:	085a      	lsrs	r2, r3, #1
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80096b2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80096b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b6:	699a      	ldr	r2, [r3, #24]
 80096b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80096be:	0a5b      	lsrs	r3, r3, #9
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d201      	bcs.n	80096c8 <find_volume+0x3ac>
 80096c4:	230d      	movs	r3, #13
 80096c6:	e06a      	b.n	800979e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80096c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ca:	f04f 32ff 	mov.w	r2, #4294967295
 80096ce:	611a      	str	r2, [r3, #16]
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	691a      	ldr	r2, [r3, #16]
 80096d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80096d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096da:	2280      	movs	r2, #128	; 0x80
 80096dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80096de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096e2:	2b03      	cmp	r3, #3
 80096e4:	d149      	bne.n	800977a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	3330      	adds	r3, #48	; 0x30
 80096ea:	3330      	adds	r3, #48	; 0x30
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe fbf9 	bl	8007ee4 <ld_word>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d140      	bne.n	800977a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80096f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096fa:	3301      	adds	r3, #1
 80096fc:	4619      	mov	r1, r3
 80096fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009700:	f7fe fea0 	bl	8008444 <move_window>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d137      	bne.n	800977a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970c:	2200      	movs	r2, #0
 800970e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009712:	3330      	adds	r3, #48	; 0x30
 8009714:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009718:	4618      	mov	r0, r3
 800971a:	f7fe fbe3 	bl	8007ee4 <ld_word>
 800971e:	4603      	mov	r3, r0
 8009720:	461a      	mov	r2, r3
 8009722:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009726:	429a      	cmp	r2, r3
 8009728:	d127      	bne.n	800977a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	3330      	adds	r3, #48	; 0x30
 800972e:	4618      	mov	r0, r3
 8009730:	f7fe fbf0 	bl	8007f14 <ld_dword>
 8009734:	4603      	mov	r3, r0
 8009736:	4a1c      	ldr	r2, [pc, #112]	; (80097a8 <find_volume+0x48c>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d11e      	bne.n	800977a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800973c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973e:	3330      	adds	r3, #48	; 0x30
 8009740:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009744:	4618      	mov	r0, r3
 8009746:	f7fe fbe5 	bl	8007f14 <ld_dword>
 800974a:	4603      	mov	r3, r0
 800974c:	4a17      	ldr	r2, [pc, #92]	; (80097ac <find_volume+0x490>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d113      	bne.n	800977a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009754:	3330      	adds	r3, #48	; 0x30
 8009756:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800975a:	4618      	mov	r0, r3
 800975c:	f7fe fbda 	bl	8007f14 <ld_dword>
 8009760:	4602      	mov	r2, r0
 8009762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009764:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009768:	3330      	adds	r3, #48	; 0x30
 800976a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe fbd0 	bl	8007f14 <ld_dword>
 8009774:	4602      	mov	r2, r0
 8009776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009778:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009780:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009782:	4b0b      	ldr	r3, [pc, #44]	; (80097b0 <find_volume+0x494>)
 8009784:	881b      	ldrh	r3, [r3, #0]
 8009786:	3301      	adds	r3, #1
 8009788:	b29a      	uxth	r2, r3
 800978a:	4b09      	ldr	r3, [pc, #36]	; (80097b0 <find_volume+0x494>)
 800978c:	801a      	strh	r2, [r3, #0]
 800978e:	4b08      	ldr	r3, [pc, #32]	; (80097b0 <find_volume+0x494>)
 8009790:	881a      	ldrh	r2, [r3, #0]
 8009792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009794:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009796:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009798:	f7fe fdec 	bl	8008374 <clear_lock>
#endif
	return FR_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3758      	adds	r7, #88	; 0x58
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	41615252 	.word	0x41615252
 80097ac:	61417272 	.word	0x61417272
 80097b0:	20001838 	.word	0x20001838

080097b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80097be:	2309      	movs	r3, #9
 80097c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d01c      	beq.n	8009802 <validate+0x4e>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d018      	beq.n	8009802 <validate+0x4e>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d013      	beq.n	8009802 <validate+0x4e>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	889a      	ldrh	r2, [r3, #4]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	88db      	ldrh	r3, [r3, #6]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d10c      	bne.n	8009802 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	785b      	ldrb	r3, [r3, #1]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe fada 	bl	8007da8 <disk_status>
 80097f4:	4603      	mov	r3, r0
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <validate+0x4e>
			res = FR_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d102      	bne.n	800980e <validate+0x5a>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	e000      	b.n	8009810 <validate+0x5c>
 800980e:	2300      	movs	r3, #0
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	6013      	str	r3, [r2, #0]
	return res;
 8009814:	7bfb      	ldrb	r3, [r7, #15]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
	...

08009820 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b088      	sub	sp, #32
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	4613      	mov	r3, r2
 800982c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009832:	f107 0310 	add.w	r3, r7, #16
 8009836:	4618      	mov	r0, r3
 8009838:	f7ff fcd5 	bl	80091e6 <get_ldnumber>
 800983c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	2b00      	cmp	r3, #0
 8009842:	da01      	bge.n	8009848 <f_mount+0x28>
 8009844:	230b      	movs	r3, #11
 8009846:	e02b      	b.n	80098a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009848:	4a17      	ldr	r2, [pc, #92]	; (80098a8 <f_mount+0x88>)
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009850:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d005      	beq.n	8009864 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009858:	69b8      	ldr	r0, [r7, #24]
 800985a:	f7fe fd8b 	bl	8008374 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	2200      	movs	r2, #0
 8009862:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d002      	beq.n	8009870 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	490d      	ldr	r1, [pc, #52]	; (80098a8 <f_mount+0x88>)
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d002      	beq.n	8009886 <f_mount+0x66>
 8009880:	79fb      	ldrb	r3, [r7, #7]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d001      	beq.n	800988a <f_mount+0x6a>
 8009886:	2300      	movs	r3, #0
 8009888:	e00a      	b.n	80098a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800988a:	f107 010c 	add.w	r1, r7, #12
 800988e:	f107 0308 	add.w	r3, r7, #8
 8009892:	2200      	movs	r2, #0
 8009894:	4618      	mov	r0, r3
 8009896:	f7ff fd41 	bl	800931c <find_volume>
 800989a:	4603      	mov	r3, r0
 800989c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800989e:	7dfb      	ldrb	r3, [r7, #23]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3720      	adds	r7, #32
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	20001834 	.word	0x20001834

080098ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b098      	sub	sp, #96	; 0x60
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	4613      	mov	r3, r2
 80098b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d101      	bne.n	80098c4 <f_open+0x18>
 80098c0:	2309      	movs	r3, #9
 80098c2:	e1ad      	b.n	8009c20 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80098c4:	79fb      	ldrb	r3, [r7, #7]
 80098c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80098cc:	79fa      	ldrb	r2, [r7, #7]
 80098ce:	f107 0110 	add.w	r1, r7, #16
 80098d2:	f107 0308 	add.w	r3, r7, #8
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7ff fd20 	bl	800931c <find_volume>
 80098dc:	4603      	mov	r3, r0
 80098de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80098e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f040 8191 	bne.w	8009c0e <f_open+0x362>
		dj.obj.fs = fs;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	f107 0314 	add.w	r3, r7, #20
 80098f6:	4611      	mov	r1, r2
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7ff fc03 	bl	8009104 <follow_path>
 80098fe:	4603      	mov	r3, r0
 8009900:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009904:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009908:	2b00      	cmp	r3, #0
 800990a:	d11a      	bne.n	8009942 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800990c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009910:	b25b      	sxtb	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	da03      	bge.n	800991e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009916:	2306      	movs	r3, #6
 8009918:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800991c:	e011      	b.n	8009942 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800991e:	79fb      	ldrb	r3, [r7, #7]
 8009920:	f023 0301 	bic.w	r3, r3, #1
 8009924:	2b00      	cmp	r3, #0
 8009926:	bf14      	ite	ne
 8009928:	2301      	movne	r3, #1
 800992a:	2300      	moveq	r3, #0
 800992c:	b2db      	uxtb	r3, r3
 800992e:	461a      	mov	r2, r3
 8009930:	f107 0314 	add.w	r3, r7, #20
 8009934:	4611      	mov	r1, r2
 8009936:	4618      	mov	r0, r3
 8009938:	f7fe fbd4 	bl	80080e4 <chk_lock>
 800993c:	4603      	mov	r3, r0
 800993e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	f003 031c 	and.w	r3, r3, #28
 8009948:	2b00      	cmp	r3, #0
 800994a:	d07f      	beq.n	8009a4c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800994c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009950:	2b00      	cmp	r3, #0
 8009952:	d017      	beq.n	8009984 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009954:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009958:	2b04      	cmp	r3, #4
 800995a:	d10e      	bne.n	800997a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800995c:	f7fe fc1e 	bl	800819c <enq_lock>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d006      	beq.n	8009974 <f_open+0xc8>
 8009966:	f107 0314 	add.w	r3, r7, #20
 800996a:	4618      	mov	r0, r3
 800996c:	f7ff fb03 	bl	8008f76 <dir_register>
 8009970:	4603      	mov	r3, r0
 8009972:	e000      	b.n	8009976 <f_open+0xca>
 8009974:	2312      	movs	r3, #18
 8009976:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800997a:	79fb      	ldrb	r3, [r7, #7]
 800997c:	f043 0308 	orr.w	r3, r3, #8
 8009980:	71fb      	strb	r3, [r7, #7]
 8009982:	e010      	b.n	80099a6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009984:	7ebb      	ldrb	r3, [r7, #26]
 8009986:	f003 0311 	and.w	r3, r3, #17
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <f_open+0xea>
					res = FR_DENIED;
 800998e:	2307      	movs	r3, #7
 8009990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009994:	e007      	b.n	80099a6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009996:	79fb      	ldrb	r3, [r7, #7]
 8009998:	f003 0304 	and.w	r3, r3, #4
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <f_open+0xfa>
 80099a0:	2308      	movs	r3, #8
 80099a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80099a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d168      	bne.n	8009a80 <f_open+0x1d4>
 80099ae:	79fb      	ldrb	r3, [r7, #7]
 80099b0:	f003 0308 	and.w	r3, r3, #8
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d063      	beq.n	8009a80 <f_open+0x1d4>
				dw = GET_FATTIME();
 80099b8:	f7fe f998 	bl	8007cec <get_fattime>
 80099bc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80099be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c0:	330e      	adds	r3, #14
 80099c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fe fae3 	bl	8007f90 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80099ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099cc:	3316      	adds	r3, #22
 80099ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fe fadd 	bl	8007f90 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80099d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d8:	330b      	adds	r3, #11
 80099da:	2220      	movs	r2, #32
 80099dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099e2:	4611      	mov	r1, r2
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7ff fa32 	bl	8008e4e <ld_clust>
 80099ea:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80099f0:	2200      	movs	r2, #0
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7ff fa4a 	bl	8008e8c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80099f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fa:	331c      	adds	r3, #28
 80099fc:	2100      	movs	r1, #0
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fe fac6 	bl	8007f90 <st_dword>
					fs->wflag = 1;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	2201      	movs	r2, #1
 8009a08:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d037      	beq.n	8009a80 <f_open+0x1d4>
						dw = fs->winsect;
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a14:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009a16:	f107 0314 	add.w	r3, r7, #20
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fe ff5d 	bl	80088de <remove_chain>
 8009a24:	4603      	mov	r3, r0
 8009a26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009a2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d126      	bne.n	8009a80 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fe fd04 	bl	8008444 <move_window>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a46:	3a01      	subs	r2, #1
 8009a48:	60da      	str	r2, [r3, #12]
 8009a4a:	e019      	b.n	8009a80 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009a4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d115      	bne.n	8009a80 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009a54:	7ebb      	ldrb	r3, [r7, #26]
 8009a56:	f003 0310 	and.w	r3, r3, #16
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d003      	beq.n	8009a66 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009a5e:	2304      	movs	r3, #4
 8009a60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009a64:	e00c      	b.n	8009a80 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009a66:	79fb      	ldrb	r3, [r7, #7]
 8009a68:	f003 0302 	and.w	r3, r3, #2
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d007      	beq.n	8009a80 <f_open+0x1d4>
 8009a70:	7ebb      	ldrb	r3, [r7, #26]
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <f_open+0x1d4>
						res = FR_DENIED;
 8009a7a:	2307      	movs	r3, #7
 8009a7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009a80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d128      	bne.n	8009ada <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009a88:	79fb      	ldrb	r3, [r7, #7]
 8009a8a:	f003 0308 	and.w	r3, r3, #8
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d003      	beq.n	8009a9a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a98:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009aa8:	79fb      	ldrb	r3, [r7, #7]
 8009aaa:	f023 0301 	bic.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	bf14      	ite	ne
 8009ab2:	2301      	movne	r3, #1
 8009ab4:	2300      	moveq	r3, #0
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	461a      	mov	r2, r3
 8009aba:	f107 0314 	add.w	r3, r7, #20
 8009abe:	4611      	mov	r1, r2
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fe fb8d 	bl	80081e0 <inc_lock>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d102      	bne.n	8009ada <f_open+0x22e>
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009ada:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f040 8095 	bne.w	8009c0e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ae8:	4611      	mov	r1, r2
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7ff f9af 	bl	8008e4e <ld_clust>
 8009af0:	4602      	mov	r2, r0
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af8:	331c      	adds	r3, #28
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fe fa0a 	bl	8007f14 <ld_dword>
 8009b00:	4602      	mov	r2, r0
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	88da      	ldrh	r2, [r3, #6]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	79fa      	ldrb	r2, [r7, #7]
 8009b1e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	3330      	adds	r3, #48	; 0x30
 8009b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fe fa74 	bl	800802a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009b42:	79fb      	ldrb	r3, [r7, #7]
 8009b44:	f003 0320 	and.w	r3, r3, #32
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d060      	beq.n	8009c0e <f_open+0x362>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d05c      	beq.n	8009c0e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	895b      	ldrh	r3, [r3, #10]
 8009b60:	025b      	lsls	r3, r3, #9
 8009b62:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	657b      	str	r3, [r7, #84]	; 0x54
 8009b70:	e016      	b.n	8009ba0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fe fd1f 	bl	80085ba <get_fat>
 8009b7c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d802      	bhi.n	8009b8a <f_open+0x2de>
 8009b84:	2302      	movs	r3, #2
 8009b86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b90:	d102      	bne.n	8009b98 <f_open+0x2ec>
 8009b92:	2301      	movs	r3, #1
 8009b94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009b98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	657b      	str	r3, [r7, #84]	; 0x54
 8009ba0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d103      	bne.n	8009bb0 <f_open+0x304>
 8009ba8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d8e0      	bhi.n	8009b72 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bb4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009bb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d127      	bne.n	8009c0e <f_open+0x362>
 8009bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d022      	beq.n	8009c0e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fe fcd5 	bl	800857c <clust2sect>
 8009bd2:	6478      	str	r0, [r7, #68]	; 0x44
 8009bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d103      	bne.n	8009be2 <f_open+0x336>
						res = FR_INT_ERR;
 8009bda:	2302      	movs	r3, #2
 8009bdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009be0:	e015      	b.n	8009c0e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009be4:	0a5a      	lsrs	r2, r3, #9
 8009be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009be8:	441a      	add	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	7858      	ldrb	r0, [r3, #1]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6a1a      	ldr	r2, [r3, #32]
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	f7fe f913 	bl	8007e28 <disk_read>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <f_open+0x362>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009c0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <f_open+0x370>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009c1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3760      	adds	r7, #96	; 0x60
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b08e      	sub	sp, #56	; 0x38
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f107 0214 	add.w	r2, r7, #20
 8009c46:	4611      	mov	r1, r2
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7ff fdb3 	bl	80097b4 <validate>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009c54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d107      	bne.n	8009c6c <f_read+0x44>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	7d5b      	ldrb	r3, [r3, #21]
 8009c60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009c64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <f_read+0x4a>
 8009c6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c70:	e115      	b.n	8009e9e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	7d1b      	ldrb	r3, [r3, #20]
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d101      	bne.n	8009c82 <f_read+0x5a>
 8009c7e:	2307      	movs	r3, #7
 8009c80:	e10d      	b.n	8009e9e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	68da      	ldr	r2, [r3, #12]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	f240 80fe 	bls.w	8009e94 <f_read+0x26c>
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009c9c:	e0fa      	b.n	8009e94 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f040 80c6 	bne.w	8009e38 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	0a5b      	lsrs	r3, r3, #9
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	8952      	ldrh	r2, [r2, #10]
 8009cb6:	3a01      	subs	r2, #1
 8009cb8:	4013      	ands	r3, r2
 8009cba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d12f      	bne.n	8009d22 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d103      	bne.n	8009cd2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	633b      	str	r3, [r7, #48]	; 0x30
 8009cd0:	e013      	b.n	8009cfa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d007      	beq.n	8009cea <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f7fe fef9 	bl	8008ad8 <clmt_clust>
 8009ce6:	6338      	str	r0, [r7, #48]	; 0x30
 8009ce8:	e007      	b.n	8009cfa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	69db      	ldr	r3, [r3, #28]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	f7fe fc61 	bl	80085ba <get_fat>
 8009cf8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d804      	bhi.n	8009d0a <f_read+0xe2>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2202      	movs	r2, #2
 8009d04:	755a      	strb	r2, [r3, #21]
 8009d06:	2302      	movs	r3, #2
 8009d08:	e0c9      	b.n	8009e9e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d10:	d104      	bne.n	8009d1c <f_read+0xf4>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2201      	movs	r2, #1
 8009d16:	755a      	strb	r2, [r3, #21]
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e0c0      	b.n	8009e9e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d20:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	69db      	ldr	r3, [r3, #28]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	4610      	mov	r0, r2
 8009d2c:	f7fe fc26 	bl	800857c <clust2sect>
 8009d30:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d104      	bne.n	8009d42 <f_read+0x11a>
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2202      	movs	r2, #2
 8009d3c:	755a      	strb	r2, [r3, #21]
 8009d3e:	2302      	movs	r3, #2
 8009d40:	e0ad      	b.n	8009e9e <f_read+0x276>
			sect += csect;
 8009d42:	69ba      	ldr	r2, [r7, #24]
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	4413      	add	r3, r2
 8009d48:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	0a5b      	lsrs	r3, r3, #9
 8009d4e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d039      	beq.n	8009dca <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5a:	4413      	add	r3, r2
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	8952      	ldrh	r2, [r2, #10]
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d905      	bls.n	8009d70 <f_read+0x148>
					cc = fs->csize - csect;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	895b      	ldrh	r3, [r3, #10]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	7858      	ldrb	r0, [r3, #1]
 8009d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d76:	69ba      	ldr	r2, [r7, #24]
 8009d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d7a:	f7fe f855 	bl	8007e28 <disk_read>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d004      	beq.n	8009d8e <f_read+0x166>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2201      	movs	r2, #1
 8009d88:	755a      	strb	r2, [r3, #21]
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e087      	b.n	8009e9e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	7d1b      	ldrb	r3, [r3, #20]
 8009d92:	b25b      	sxtb	r3, r3
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	da14      	bge.n	8009dc2 <f_read+0x19a>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6a1a      	ldr	r2, [r3, #32]
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d90d      	bls.n	8009dc2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6a1a      	ldr	r2, [r3, #32]
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	025b      	lsls	r3, r3, #9
 8009db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db2:	18d0      	adds	r0, r2, r3
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	3330      	adds	r3, #48	; 0x30
 8009db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	f7fe f913 	bl	8007fe8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc4:	025b      	lsls	r3, r3, #9
 8009dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009dc8:	e050      	b.n	8009e6c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d02e      	beq.n	8009e32 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	7d1b      	ldrb	r3, [r3, #20]
 8009dd8:	b25b      	sxtb	r3, r3
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	da18      	bge.n	8009e10 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	7858      	ldrb	r0, [r3, #1]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6a1a      	ldr	r2, [r3, #32]
 8009dec:	2301      	movs	r3, #1
 8009dee:	f7fe f83b 	bl	8007e68 <disk_write>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d004      	beq.n	8009e02 <f_read+0x1da>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	755a      	strb	r2, [r3, #21]
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e04d      	b.n	8009e9e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	7d1b      	ldrb	r3, [r3, #20]
 8009e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	7858      	ldrb	r0, [r3, #1]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	69ba      	ldr	r2, [r7, #24]
 8009e1e:	f7fe f803 	bl	8007e28 <disk_read>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d004      	beq.n	8009e32 <f_read+0x20a>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	755a      	strb	r2, [r3, #21]
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e035      	b.n	8009e9e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	69ba      	ldr	r2, [r7, #24]
 8009e36:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	699b      	ldr	r3, [r3, #24]
 8009e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e40:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009e44:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d901      	bls.n	8009e52 <f_read+0x22a>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	699b      	ldr	r3, [r3, #24]
 8009e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e60:	4413      	add	r3, r2
 8009e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e64:	4619      	mov	r1, r3
 8009e66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e68:	f7fe f8be 	bl	8007fe8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e70:	4413      	add	r3, r2
 8009e72:	627b      	str	r3, [r7, #36]	; 0x24
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	699a      	ldr	r2, [r3, #24]
 8009e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7a:	441a      	add	r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	619a      	str	r2, [r3, #24]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e86:	441a      	add	r2, r3
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	601a      	str	r2, [r3, #0]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f47f af01 	bne.w	8009c9e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3738      	adds	r7, #56	; 0x38
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b08c      	sub	sp, #48	; 0x30
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	60f8      	str	r0, [r7, #12]
 8009eae:	60b9      	str	r1, [r7, #8]
 8009eb0:	607a      	str	r2, [r7, #4]
 8009eb2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f107 0210 	add.w	r2, r7, #16
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7ff fc74 	bl	80097b4 <validate>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d107      	bne.n	8009eea <f_write+0x44>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	7d5b      	ldrb	r3, [r3, #21]
 8009ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <f_write+0x4a>
 8009eea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009eee:	e14b      	b.n	800a188 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	7d1b      	ldrb	r3, [r3, #20]
 8009ef4:	f003 0302 	and.w	r3, r3, #2
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d101      	bne.n	8009f00 <f_write+0x5a>
 8009efc:	2307      	movs	r3, #7
 8009efe:	e143      	b.n	800a188 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	699a      	ldr	r2, [r3, #24]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	441a      	add	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	f080 812d 	bcs.w	800a16c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	43db      	mvns	r3, r3
 8009f18:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009f1a:	e127      	b.n	800a16c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f040 80e3 	bne.w	800a0f0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	0a5b      	lsrs	r3, r3, #9
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	8952      	ldrh	r2, [r2, #10]
 8009f34:	3a01      	subs	r2, #1
 8009f36:	4013      	ands	r3, r2
 8009f38:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d143      	bne.n	8009fc8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10c      	bne.n	8009f62 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d11a      	bne.n	8009f8a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2100      	movs	r1, #0
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fe fd25 	bl	80089a8 <create_chain>
 8009f5e:	62b8      	str	r0, [r7, #40]	; 0x28
 8009f60:	e013      	b.n	8009f8a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d007      	beq.n	8009f7a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	699b      	ldr	r3, [r3, #24]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f7fe fdb1 	bl	8008ad8 <clmt_clust>
 8009f76:	62b8      	str	r0, [r7, #40]	; 0x28
 8009f78:	e007      	b.n	8009f8a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	4619      	mov	r1, r3
 8009f82:	4610      	mov	r0, r2
 8009f84:	f7fe fd10 	bl	80089a8 <create_chain>
 8009f88:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 80f2 	beq.w	800a176 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d104      	bne.n	8009fa2 <f_write+0xfc>
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	755a      	strb	r2, [r3, #21]
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	e0f2      	b.n	800a188 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa8:	d104      	bne.n	8009fb4 <f_write+0x10e>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2201      	movs	r2, #1
 8009fae:	755a      	strb	r2, [r3, #21]
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e0e9      	b.n	800a188 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fb8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d102      	bne.n	8009fc8 <f_write+0x122>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fc6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	7d1b      	ldrb	r3, [r3, #20]
 8009fcc:	b25b      	sxtb	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	da18      	bge.n	800a004 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	7858      	ldrb	r0, [r3, #1]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6a1a      	ldr	r2, [r3, #32]
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	f7fd ff41 	bl	8007e68 <disk_write>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d004      	beq.n	8009ff6 <f_write+0x150>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	755a      	strb	r2, [r3, #21]
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e0c8      	b.n	800a188 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	7d1b      	ldrb	r3, [r3, #20]
 8009ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ffe:	b2da      	uxtb	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	4619      	mov	r1, r3
 800a00c:	4610      	mov	r0, r2
 800a00e:	f7fe fab5 	bl	800857c <clust2sect>
 800a012:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d104      	bne.n	800a024 <f_write+0x17e>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2202      	movs	r2, #2
 800a01e:	755a      	strb	r2, [r3, #21]
 800a020:	2302      	movs	r3, #2
 800a022:	e0b1      	b.n	800a188 <f_write+0x2e2>
			sect += csect;
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	4413      	add	r3, r2
 800a02a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	0a5b      	lsrs	r3, r3, #9
 800a030:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d03c      	beq.n	800a0b2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a038:	69ba      	ldr	r2, [r7, #24]
 800a03a:	6a3b      	ldr	r3, [r7, #32]
 800a03c:	4413      	add	r3, r2
 800a03e:	693a      	ldr	r2, [r7, #16]
 800a040:	8952      	ldrh	r2, [r2, #10]
 800a042:	4293      	cmp	r3, r2
 800a044:	d905      	bls.n	800a052 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	895b      	ldrh	r3, [r3, #10]
 800a04a:	461a      	mov	r2, r3
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	7858      	ldrb	r0, [r3, #1]
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	697a      	ldr	r2, [r7, #20]
 800a05a:	69f9      	ldr	r1, [r7, #28]
 800a05c:	f7fd ff04 	bl	8007e68 <disk_write>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d004      	beq.n	800a070 <f_write+0x1ca>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2201      	movs	r2, #1
 800a06a:	755a      	strb	r2, [r3, #21]
 800a06c:	2301      	movs	r3, #1
 800a06e:	e08b      	b.n	800a188 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6a1a      	ldr	r2, [r3, #32]
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	6a3a      	ldr	r2, [r7, #32]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d915      	bls.n	800a0aa <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6a1a      	ldr	r2, [r3, #32]
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	025b      	lsls	r3, r3, #9
 800a08e:	69fa      	ldr	r2, [r7, #28]
 800a090:	4413      	add	r3, r2
 800a092:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a096:	4619      	mov	r1, r3
 800a098:	f7fd ffa6 	bl	8007fe8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	7d1b      	ldrb	r3, [r3, #20]
 800a0a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0a4:	b2da      	uxtb	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	025b      	lsls	r3, r3, #9
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a0b0:	e03f      	b.n	800a132 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d016      	beq.n	800a0ea <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	699a      	ldr	r2, [r3, #24]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d210      	bcs.n	800a0ea <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	7858      	ldrb	r0, [r3, #1]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	f7fd fea7 	bl	8007e28 <disk_read>
 800a0da:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d004      	beq.n	800a0ea <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	755a      	strb	r2, [r3, #21]
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e04e      	b.n	800a188 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a0fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	429a      	cmp	r2, r3
 800a104:	d901      	bls.n	800a10a <f_write+0x264>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a118:	4413      	add	r3, r2
 800a11a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a11c:	69f9      	ldr	r1, [r7, #28]
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fd ff62 	bl	8007fe8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	7d1b      	ldrb	r3, [r3, #20]
 800a128:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a12c:	b2da      	uxtb	r2, r3
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a132:	69fa      	ldr	r2, [r7, #28]
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	4413      	add	r3, r2
 800a138:	61fb      	str	r3, [r7, #28]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	699a      	ldr	r2, [r3, #24]
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	441a      	add	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	619a      	str	r2, [r3, #24]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	68da      	ldr	r2, [r3, #12]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	699b      	ldr	r3, [r3, #24]
 800a14e:	429a      	cmp	r2, r3
 800a150:	bf38      	it	cc
 800a152:	461a      	movcc	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	60da      	str	r2, [r3, #12]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	441a      	add	r2, r3
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f47f aed4 	bne.w	8009f1c <f_write+0x76>
 800a174:	e000      	b.n	800a178 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a176:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	7d1b      	ldrb	r3, [r3, #20]
 800a17c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a180:	b2da      	uxtb	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3730      	adds	r7, #48	; 0x30
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f107 0208 	add.w	r2, r7, #8
 800a19e:	4611      	mov	r1, r2
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7ff fb07 	bl	80097b4 <validate>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a1aa:	7dfb      	ldrb	r3, [r7, #23]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d168      	bne.n	800a282 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	7d1b      	ldrb	r3, [r3, #20]
 800a1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d062      	beq.n	800a282 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	7d1b      	ldrb	r3, [r3, #20]
 800a1c0:	b25b      	sxtb	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	da15      	bge.n	800a1f2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	7858      	ldrb	r0, [r3, #1]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a1a      	ldr	r2, [r3, #32]
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f7fd fe47 	bl	8007e68 <disk_write>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <f_sync+0x54>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e04f      	b.n	800a284 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	7d1b      	ldrb	r3, [r3, #20]
 800a1e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a1f2:	f7fd fd7b 	bl	8007cec <get_fattime>
 800a1f6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fe:	4619      	mov	r1, r3
 800a200:	4610      	mov	r0, r2
 800a202:	f7fe f91f 	bl	8008444 <move_window>
 800a206:	4603      	mov	r3, r0
 800a208:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a20a:	7dfb      	ldrb	r3, [r7, #23]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d138      	bne.n	800a282 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a214:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	330b      	adds	r3, #11
 800a21a:	781a      	ldrb	r2, [r3, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	330b      	adds	r3, #11
 800a220:	f042 0220 	orr.w	r2, r2, #32
 800a224:	b2d2      	uxtb	r2, r2
 800a226:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6818      	ldr	r0, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	461a      	mov	r2, r3
 800a232:	68f9      	ldr	r1, [r7, #12]
 800a234:	f7fe fe2a 	bl	8008e8c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f103 021c 	add.w	r2, r3, #28
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	4619      	mov	r1, r3
 800a244:	4610      	mov	r0, r2
 800a246:	f7fd fea3 	bl	8007f90 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3316      	adds	r3, #22
 800a24e:	6939      	ldr	r1, [r7, #16]
 800a250:	4618      	mov	r0, r3
 800a252:	f7fd fe9d 	bl	8007f90 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	3312      	adds	r3, #18
 800a25a:	2100      	movs	r1, #0
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7fd fe7c 	bl	8007f5a <st_word>
					fs->wflag = 1;
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	2201      	movs	r2, #1
 800a266:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7fe f918 	bl	80084a0 <sync_fs>
 800a270:	4603      	mov	r3, r0
 800a272:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	7d1b      	ldrb	r3, [r3, #20]
 800a278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a27c:	b2da      	uxtb	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a282:	7dfb      	ldrb	r3, [r7, #23]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3718      	adds	r7, #24
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff ff7b 	bl	800a190 <f_sync>
 800a29a:	4603      	mov	r3, r0
 800a29c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a29e:	7bfb      	ldrb	r3, [r7, #15]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d118      	bne.n	800a2d6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f107 0208 	add.w	r2, r7, #8
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7ff fa81 	bl	80097b4 <validate>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a2b6:	7bfb      	ldrb	r3, [r7, #15]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d10c      	bne.n	800a2d6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7fe f81b 	bl	80082fc <dec_lock>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d102      	bne.n	800a2d6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b092      	sub	sp, #72	; 0x48
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a2ec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a2f0:	f107 030c 	add.w	r3, r7, #12
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7ff f810 	bl	800931c <find_volume>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800a302:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a306:	2b00      	cmp	r3, #0
 800a308:	f040 8099 	bne.w	800a43e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a30c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a314:	691a      	ldr	r2, [r3, #16]
 800a316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a318:	695b      	ldr	r3, [r3, #20]
 800a31a:	3b02      	subs	r3, #2
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d804      	bhi.n	800a32a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a322:	691a      	ldr	r2, [r3, #16]
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	e089      	b.n	800a43e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a32a:	2300      	movs	r3, #0
 800a32c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d128      	bne.n	800a388 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a336:	2302      	movs	r3, #2
 800a338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a33e:	f107 0314 	add.w	r3, r7, #20
 800a342:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a344:	4618      	mov	r0, r3
 800a346:	f7fe f938 	bl	80085ba <get_fat>
 800a34a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a352:	d103      	bne.n	800a35c <f_getfree+0x7c>
 800a354:	2301      	movs	r3, #1
 800a356:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a35a:	e063      	b.n	800a424 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d103      	bne.n	800a36a <f_getfree+0x8a>
 800a362:	2302      	movs	r3, #2
 800a364:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a368:	e05c      	b.n	800a424 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d102      	bne.n	800a376 <f_getfree+0x96>
 800a370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a372:	3301      	adds	r3, #1
 800a374:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800a376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a378:	3301      	adds	r3, #1
 800a37a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37e:	695b      	ldr	r3, [r3, #20]
 800a380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a382:	429a      	cmp	r2, r3
 800a384:	d3db      	bcc.n	800a33e <f_getfree+0x5e>
 800a386:	e04d      	b.n	800a424 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a390:	6a1b      	ldr	r3, [r3, #32]
 800a392:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800a394:	2300      	movs	r3, #0
 800a396:	637b      	str	r3, [r7, #52]	; 0x34
 800a398:	2300      	movs	r3, #0
 800a39a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800a39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d113      	bne.n	800a3ca <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a3a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a6:	1c5a      	adds	r2, r3, #1
 800a3a8:	63ba      	str	r2, [r7, #56]	; 0x38
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	f7fe f84a 	bl	8008444 <move_window>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800a3b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d131      	bne.n	800a422 <f_getfree+0x142>
							p = fs->win;
 800a3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c0:	3330      	adds	r3, #48	; 0x30
 800a3c2:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800a3c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3c8:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d10f      	bne.n	800a3f2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a3d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3d4:	f7fd fd86 	bl	8007ee4 <ld_word>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d102      	bne.n	800a3e4 <f_getfree+0x104>
 800a3de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e6:	3302      	adds	r3, #2
 800a3e8:	633b      	str	r3, [r7, #48]	; 0x30
 800a3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ec:	3b02      	subs	r3, #2
 800a3ee:	637b      	str	r3, [r7, #52]	; 0x34
 800a3f0:	e010      	b.n	800a414 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a3f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3f4:	f7fd fd8e 	bl	8007f14 <ld_dword>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d102      	bne.n	800a408 <f_getfree+0x128>
 800a402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a404:	3301      	adds	r3, #1
 800a406:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800a408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40a:	3304      	adds	r3, #4
 800a40c:	633b      	str	r3, [r7, #48]	; 0x30
 800a40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a410:	3b04      	subs	r3, #4
 800a412:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800a414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a416:	3b01      	subs	r3, #1
 800a418:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a41a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1bd      	bne.n	800a39c <f_getfree+0xbc>
 800a420:	e000      	b.n	800a424 <f_getfree+0x144>
							if (res != FR_OK) break;
 800a422:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a428:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a42e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a432:	791a      	ldrb	r2, [r3, #4]
 800a434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a436:	f042 0201 	orr.w	r2, r2, #1
 800a43a:	b2d2      	uxtb	r2, r2
 800a43c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a43e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a442:	4618      	mov	r0, r3
 800a444:	3748      	adds	r7, #72	; 0x48
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	460b      	mov	r3, r1
 800a454:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a456:	78fb      	ldrb	r3, [r7, #3]
 800a458:	2b0a      	cmp	r3, #10
 800a45a:	d103      	bne.n	800a464 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a45c:	210d      	movs	r1, #13
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7ff fff3 	bl	800a44a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	db25      	blt.n	800a4bc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	1c5a      	adds	r2, r3, #1
 800a474:	60fa      	str	r2, [r7, #12]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	4413      	add	r3, r2
 800a47a:	78fa      	ldrb	r2, [r7, #3]
 800a47c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2b3c      	cmp	r3, #60	; 0x3c
 800a482:	dd12      	ble.n	800a4aa <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6818      	ldr	r0, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f103 010c 	add.w	r1, r3, #12
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	f107 0308 	add.w	r3, r7, #8
 800a494:	f7ff fd07 	bl	8009ea6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d101      	bne.n	800a4a4 <putc_bfd+0x5a>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	e001      	b.n	800a4a8 <putc_bfd+0x5e>
 800a4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	1c5a      	adds	r2, r3, #1
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	609a      	str	r2, [r3, #8]
 800a4ba:	e000      	b.n	800a4be <putc_bfd+0x74>
	if (i < 0) return;
 800a4bc:	bf00      	nop
}
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	db16      	blt.n	800a502 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6818      	ldr	r0, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f103 010c 	add.w	r1, r3, #12
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f107 030c 	add.w	r3, r7, #12
 800a4e8:	f7ff fcdd 	bl	8009ea6 <f_write>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d107      	bne.n	800a502 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d102      	bne.n	800a502 <putc_flush+0x3e>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	e001      	b.n	800a506 <putc_flush+0x42>
	return EOF;
 800a502:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a506:	4618      	mov	r0, r3
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a50e:	b480      	push	{r7}
 800a510:	b083      	sub	sp, #12
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	605a      	str	r2, [r3, #4]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	609a      	str	r2, [r3, #8]
}
 800a52c:	bf00      	nop
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b096      	sub	sp, #88	; 0x58
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800a542:	f107 030c 	add.w	r3, r7, #12
 800a546:	6839      	ldr	r1, [r7, #0]
 800a548:	4618      	mov	r0, r3
 800a54a:	f7ff ffe0 	bl	800a50e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a54e:	e009      	b.n	800a564 <f_puts+0x2c>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	607a      	str	r2, [r7, #4]
 800a556:	781a      	ldrb	r2, [r3, #0]
 800a558:	f107 030c 	add.w	r3, r7, #12
 800a55c:	4611      	mov	r1, r2
 800a55e:	4618      	mov	r0, r3
 800a560:	f7ff ff73 	bl	800a44a <putc_bfd>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1f1      	bne.n	800a550 <f_puts+0x18>
	return putc_flush(&pb);
 800a56c:	f107 030c 	add.w	r3, r7, #12
 800a570:	4618      	mov	r0, r3
 800a572:	f7ff ffa7 	bl	800a4c4 <putc_flush>
 800a576:	4603      	mov	r3, r0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3758      	adds	r7, #88	; 0x58
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a580:	b480      	push	{r7}
 800a582:	b087      	sub	sp, #28
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	4613      	mov	r3, r2
 800a58c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a58e:	2301      	movs	r3, #1
 800a590:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a592:	2300      	movs	r3, #0
 800a594:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a596:	4b1f      	ldr	r3, [pc, #124]	; (800a614 <FATFS_LinkDriverEx+0x94>)
 800a598:	7a5b      	ldrb	r3, [r3, #9]
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d131      	bne.n	800a604 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a5a0:	4b1c      	ldr	r3, [pc, #112]	; (800a614 <FATFS_LinkDriverEx+0x94>)
 800a5a2:	7a5b      	ldrb	r3, [r3, #9]
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	4b1a      	ldr	r3, [pc, #104]	; (800a614 <FATFS_LinkDriverEx+0x94>)
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a5ae:	4b19      	ldr	r3, [pc, #100]	; (800a614 <FATFS_LinkDriverEx+0x94>)
 800a5b0:	7a5b      	ldrb	r3, [r3, #9]
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	4a17      	ldr	r2, [pc, #92]	; (800a614 <FATFS_LinkDriverEx+0x94>)
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a5be:	4b15      	ldr	r3, [pc, #84]	; (800a614 <FATFS_LinkDriverEx+0x94>)
 800a5c0:	7a5b      	ldrb	r3, [r3, #9]
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	4b13      	ldr	r3, [pc, #76]	; (800a614 <FATFS_LinkDriverEx+0x94>)
 800a5c8:	4413      	add	r3, r2
 800a5ca:	79fa      	ldrb	r2, [r7, #7]
 800a5cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a5ce:	4b11      	ldr	r3, [pc, #68]	; (800a614 <FATFS_LinkDriverEx+0x94>)
 800a5d0:	7a5b      	ldrb	r3, [r3, #9]
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	1c5a      	adds	r2, r3, #1
 800a5d6:	b2d1      	uxtb	r1, r2
 800a5d8:	4a0e      	ldr	r2, [pc, #56]	; (800a614 <FATFS_LinkDriverEx+0x94>)
 800a5da:	7251      	strb	r1, [r2, #9]
 800a5dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a5de:	7dbb      	ldrb	r3, [r7, #22]
 800a5e0:	3330      	adds	r3, #48	; 0x30
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	223a      	movs	r2, #58	; 0x3a
 800a5ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	3302      	adds	r3, #2
 800a5f4:	222f      	movs	r2, #47	; 0x2f
 800a5f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	3303      	adds	r3, #3
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a600:	2300      	movs	r3, #0
 800a602:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a604:	7dfb      	ldrb	r3, [r7, #23]
}
 800a606:	4618      	mov	r0, r3
 800a608:	371c      	adds	r7, #28
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	2000185c 	.word	0x2000185c

0800a618 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a622:	2200      	movs	r2, #0
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7ff ffaa 	bl	800a580 <FATFS_LinkDriverEx>
 800a62c:	4603      	mov	r3, r0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3708      	adds	r7, #8
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <__cvt>:
 800a636:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a63a:	ec55 4b10 	vmov	r4, r5, d0
 800a63e:	2d00      	cmp	r5, #0
 800a640:	460e      	mov	r6, r1
 800a642:	4619      	mov	r1, r3
 800a644:	462b      	mov	r3, r5
 800a646:	bfbb      	ittet	lt
 800a648:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a64c:	461d      	movlt	r5, r3
 800a64e:	2300      	movge	r3, #0
 800a650:	232d      	movlt	r3, #45	; 0x2d
 800a652:	700b      	strb	r3, [r1, #0]
 800a654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a656:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a65a:	4691      	mov	r9, r2
 800a65c:	f023 0820 	bic.w	r8, r3, #32
 800a660:	bfbc      	itt	lt
 800a662:	4622      	movlt	r2, r4
 800a664:	4614      	movlt	r4, r2
 800a666:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a66a:	d005      	beq.n	800a678 <__cvt+0x42>
 800a66c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a670:	d100      	bne.n	800a674 <__cvt+0x3e>
 800a672:	3601      	adds	r6, #1
 800a674:	2102      	movs	r1, #2
 800a676:	e000      	b.n	800a67a <__cvt+0x44>
 800a678:	2103      	movs	r1, #3
 800a67a:	ab03      	add	r3, sp, #12
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	ab02      	add	r3, sp, #8
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	ec45 4b10 	vmov	d0, r4, r5
 800a686:	4653      	mov	r3, sl
 800a688:	4632      	mov	r2, r6
 800a68a:	f000 fe91 	bl	800b3b0 <_dtoa_r>
 800a68e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a692:	4607      	mov	r7, r0
 800a694:	d102      	bne.n	800a69c <__cvt+0x66>
 800a696:	f019 0f01 	tst.w	r9, #1
 800a69a:	d022      	beq.n	800a6e2 <__cvt+0xac>
 800a69c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6a0:	eb07 0906 	add.w	r9, r7, r6
 800a6a4:	d110      	bne.n	800a6c8 <__cvt+0x92>
 800a6a6:	783b      	ldrb	r3, [r7, #0]
 800a6a8:	2b30      	cmp	r3, #48	; 0x30
 800a6aa:	d10a      	bne.n	800a6c2 <__cvt+0x8c>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	f7f6 fa10 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6b8:	b918      	cbnz	r0, 800a6c2 <__cvt+0x8c>
 800a6ba:	f1c6 0601 	rsb	r6, r6, #1
 800a6be:	f8ca 6000 	str.w	r6, [sl]
 800a6c2:	f8da 3000 	ldr.w	r3, [sl]
 800a6c6:	4499      	add	r9, r3
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	f7f6 fa02 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6d4:	b108      	cbz	r0, 800a6da <__cvt+0xa4>
 800a6d6:	f8cd 900c 	str.w	r9, [sp, #12]
 800a6da:	2230      	movs	r2, #48	; 0x30
 800a6dc:	9b03      	ldr	r3, [sp, #12]
 800a6de:	454b      	cmp	r3, r9
 800a6e0:	d307      	bcc.n	800a6f2 <__cvt+0xbc>
 800a6e2:	9b03      	ldr	r3, [sp, #12]
 800a6e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6e6:	1bdb      	subs	r3, r3, r7
 800a6e8:	4638      	mov	r0, r7
 800a6ea:	6013      	str	r3, [r2, #0]
 800a6ec:	b004      	add	sp, #16
 800a6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6f2:	1c59      	adds	r1, r3, #1
 800a6f4:	9103      	str	r1, [sp, #12]
 800a6f6:	701a      	strb	r2, [r3, #0]
 800a6f8:	e7f0      	b.n	800a6dc <__cvt+0xa6>

0800a6fa <__exponent>:
 800a6fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2900      	cmp	r1, #0
 800a700:	bfb8      	it	lt
 800a702:	4249      	neglt	r1, r1
 800a704:	f803 2b02 	strb.w	r2, [r3], #2
 800a708:	bfb4      	ite	lt
 800a70a:	222d      	movlt	r2, #45	; 0x2d
 800a70c:	222b      	movge	r2, #43	; 0x2b
 800a70e:	2909      	cmp	r1, #9
 800a710:	7042      	strb	r2, [r0, #1]
 800a712:	dd2a      	ble.n	800a76a <__exponent+0x70>
 800a714:	f10d 0207 	add.w	r2, sp, #7
 800a718:	4617      	mov	r7, r2
 800a71a:	260a      	movs	r6, #10
 800a71c:	4694      	mov	ip, r2
 800a71e:	fb91 f5f6 	sdiv	r5, r1, r6
 800a722:	fb06 1415 	mls	r4, r6, r5, r1
 800a726:	3430      	adds	r4, #48	; 0x30
 800a728:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a72c:	460c      	mov	r4, r1
 800a72e:	2c63      	cmp	r4, #99	; 0x63
 800a730:	f102 32ff 	add.w	r2, r2, #4294967295
 800a734:	4629      	mov	r1, r5
 800a736:	dcf1      	bgt.n	800a71c <__exponent+0x22>
 800a738:	3130      	adds	r1, #48	; 0x30
 800a73a:	f1ac 0402 	sub.w	r4, ip, #2
 800a73e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a742:	1c41      	adds	r1, r0, #1
 800a744:	4622      	mov	r2, r4
 800a746:	42ba      	cmp	r2, r7
 800a748:	d30a      	bcc.n	800a760 <__exponent+0x66>
 800a74a:	f10d 0209 	add.w	r2, sp, #9
 800a74e:	eba2 020c 	sub.w	r2, r2, ip
 800a752:	42bc      	cmp	r4, r7
 800a754:	bf88      	it	hi
 800a756:	2200      	movhi	r2, #0
 800a758:	4413      	add	r3, r2
 800a75a:	1a18      	subs	r0, r3, r0
 800a75c:	b003      	add	sp, #12
 800a75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a760:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a764:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a768:	e7ed      	b.n	800a746 <__exponent+0x4c>
 800a76a:	2330      	movs	r3, #48	; 0x30
 800a76c:	3130      	adds	r1, #48	; 0x30
 800a76e:	7083      	strb	r3, [r0, #2]
 800a770:	70c1      	strb	r1, [r0, #3]
 800a772:	1d03      	adds	r3, r0, #4
 800a774:	e7f1      	b.n	800a75a <__exponent+0x60>
	...

0800a778 <_printf_float>:
 800a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	ed2d 8b02 	vpush	{d8}
 800a780:	b08d      	sub	sp, #52	; 0x34
 800a782:	460c      	mov	r4, r1
 800a784:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a788:	4616      	mov	r6, r2
 800a78a:	461f      	mov	r7, r3
 800a78c:	4605      	mov	r5, r0
 800a78e:	f000 fd01 	bl	800b194 <_localeconv_r>
 800a792:	f8d0 a000 	ldr.w	sl, [r0]
 800a796:	4650      	mov	r0, sl
 800a798:	f7f5 fd72 	bl	8000280 <strlen>
 800a79c:	2300      	movs	r3, #0
 800a79e:	930a      	str	r3, [sp, #40]	; 0x28
 800a7a0:	6823      	ldr	r3, [r4, #0]
 800a7a2:	9305      	str	r3, [sp, #20]
 800a7a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a7a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a7ac:	3307      	adds	r3, #7
 800a7ae:	f023 0307 	bic.w	r3, r3, #7
 800a7b2:	f103 0208 	add.w	r2, r3, #8
 800a7b6:	f8c8 2000 	str.w	r2, [r8]
 800a7ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7c2:	9307      	str	r3, [sp, #28]
 800a7c4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a7c8:	ee08 0a10 	vmov	s16, r0
 800a7cc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a7d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7d4:	4b9e      	ldr	r3, [pc, #632]	; (800aa50 <_printf_float+0x2d8>)
 800a7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7da:	f7f6 f9af 	bl	8000b3c <__aeabi_dcmpun>
 800a7de:	bb88      	cbnz	r0, 800a844 <_printf_float+0xcc>
 800a7e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7e4:	4b9a      	ldr	r3, [pc, #616]	; (800aa50 <_printf_float+0x2d8>)
 800a7e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ea:	f7f6 f989 	bl	8000b00 <__aeabi_dcmple>
 800a7ee:	bb48      	cbnz	r0, 800a844 <_printf_float+0xcc>
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	4649      	mov	r1, r9
 800a7f8:	f7f6 f978 	bl	8000aec <__aeabi_dcmplt>
 800a7fc:	b110      	cbz	r0, 800a804 <_printf_float+0x8c>
 800a7fe:	232d      	movs	r3, #45	; 0x2d
 800a800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a804:	4a93      	ldr	r2, [pc, #588]	; (800aa54 <_printf_float+0x2dc>)
 800a806:	4b94      	ldr	r3, [pc, #592]	; (800aa58 <_printf_float+0x2e0>)
 800a808:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a80c:	bf94      	ite	ls
 800a80e:	4690      	movls	r8, r2
 800a810:	4698      	movhi	r8, r3
 800a812:	2303      	movs	r3, #3
 800a814:	6123      	str	r3, [r4, #16]
 800a816:	9b05      	ldr	r3, [sp, #20]
 800a818:	f023 0304 	bic.w	r3, r3, #4
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	f04f 0900 	mov.w	r9, #0
 800a822:	9700      	str	r7, [sp, #0]
 800a824:	4633      	mov	r3, r6
 800a826:	aa0b      	add	r2, sp, #44	; 0x2c
 800a828:	4621      	mov	r1, r4
 800a82a:	4628      	mov	r0, r5
 800a82c:	f000 f9da 	bl	800abe4 <_printf_common>
 800a830:	3001      	adds	r0, #1
 800a832:	f040 8090 	bne.w	800a956 <_printf_float+0x1de>
 800a836:	f04f 30ff 	mov.w	r0, #4294967295
 800a83a:	b00d      	add	sp, #52	; 0x34
 800a83c:	ecbd 8b02 	vpop	{d8}
 800a840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a844:	4642      	mov	r2, r8
 800a846:	464b      	mov	r3, r9
 800a848:	4640      	mov	r0, r8
 800a84a:	4649      	mov	r1, r9
 800a84c:	f7f6 f976 	bl	8000b3c <__aeabi_dcmpun>
 800a850:	b140      	cbz	r0, 800a864 <_printf_float+0xec>
 800a852:	464b      	mov	r3, r9
 800a854:	2b00      	cmp	r3, #0
 800a856:	bfbc      	itt	lt
 800a858:	232d      	movlt	r3, #45	; 0x2d
 800a85a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a85e:	4a7f      	ldr	r2, [pc, #508]	; (800aa5c <_printf_float+0x2e4>)
 800a860:	4b7f      	ldr	r3, [pc, #508]	; (800aa60 <_printf_float+0x2e8>)
 800a862:	e7d1      	b.n	800a808 <_printf_float+0x90>
 800a864:	6863      	ldr	r3, [r4, #4]
 800a866:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a86a:	9206      	str	r2, [sp, #24]
 800a86c:	1c5a      	adds	r2, r3, #1
 800a86e:	d13f      	bne.n	800a8f0 <_printf_float+0x178>
 800a870:	2306      	movs	r3, #6
 800a872:	6063      	str	r3, [r4, #4]
 800a874:	9b05      	ldr	r3, [sp, #20]
 800a876:	6861      	ldr	r1, [r4, #4]
 800a878:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a87c:	2300      	movs	r3, #0
 800a87e:	9303      	str	r3, [sp, #12]
 800a880:	ab0a      	add	r3, sp, #40	; 0x28
 800a882:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a886:	ab09      	add	r3, sp, #36	; 0x24
 800a888:	ec49 8b10 	vmov	d0, r8, r9
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	6022      	str	r2, [r4, #0]
 800a890:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a894:	4628      	mov	r0, r5
 800a896:	f7ff fece 	bl	800a636 <__cvt>
 800a89a:	9b06      	ldr	r3, [sp, #24]
 800a89c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a89e:	2b47      	cmp	r3, #71	; 0x47
 800a8a0:	4680      	mov	r8, r0
 800a8a2:	d108      	bne.n	800a8b6 <_printf_float+0x13e>
 800a8a4:	1cc8      	adds	r0, r1, #3
 800a8a6:	db02      	blt.n	800a8ae <_printf_float+0x136>
 800a8a8:	6863      	ldr	r3, [r4, #4]
 800a8aa:	4299      	cmp	r1, r3
 800a8ac:	dd41      	ble.n	800a932 <_printf_float+0x1ba>
 800a8ae:	f1ab 0302 	sub.w	r3, fp, #2
 800a8b2:	fa5f fb83 	uxtb.w	fp, r3
 800a8b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8ba:	d820      	bhi.n	800a8fe <_printf_float+0x186>
 800a8bc:	3901      	subs	r1, #1
 800a8be:	465a      	mov	r2, fp
 800a8c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a8c4:	9109      	str	r1, [sp, #36]	; 0x24
 800a8c6:	f7ff ff18 	bl	800a6fa <__exponent>
 800a8ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8cc:	1813      	adds	r3, r2, r0
 800a8ce:	2a01      	cmp	r2, #1
 800a8d0:	4681      	mov	r9, r0
 800a8d2:	6123      	str	r3, [r4, #16]
 800a8d4:	dc02      	bgt.n	800a8dc <_printf_float+0x164>
 800a8d6:	6822      	ldr	r2, [r4, #0]
 800a8d8:	07d2      	lsls	r2, r2, #31
 800a8da:	d501      	bpl.n	800a8e0 <_printf_float+0x168>
 800a8dc:	3301      	adds	r3, #1
 800a8de:	6123      	str	r3, [r4, #16]
 800a8e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d09c      	beq.n	800a822 <_printf_float+0xaa>
 800a8e8:	232d      	movs	r3, #45	; 0x2d
 800a8ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8ee:	e798      	b.n	800a822 <_printf_float+0xaa>
 800a8f0:	9a06      	ldr	r2, [sp, #24]
 800a8f2:	2a47      	cmp	r2, #71	; 0x47
 800a8f4:	d1be      	bne.n	800a874 <_printf_float+0xfc>
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1bc      	bne.n	800a874 <_printf_float+0xfc>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e7b9      	b.n	800a872 <_printf_float+0xfa>
 800a8fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a902:	d118      	bne.n	800a936 <_printf_float+0x1be>
 800a904:	2900      	cmp	r1, #0
 800a906:	6863      	ldr	r3, [r4, #4]
 800a908:	dd0b      	ble.n	800a922 <_printf_float+0x1aa>
 800a90a:	6121      	str	r1, [r4, #16]
 800a90c:	b913      	cbnz	r3, 800a914 <_printf_float+0x19c>
 800a90e:	6822      	ldr	r2, [r4, #0]
 800a910:	07d0      	lsls	r0, r2, #31
 800a912:	d502      	bpl.n	800a91a <_printf_float+0x1a2>
 800a914:	3301      	adds	r3, #1
 800a916:	440b      	add	r3, r1
 800a918:	6123      	str	r3, [r4, #16]
 800a91a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a91c:	f04f 0900 	mov.w	r9, #0
 800a920:	e7de      	b.n	800a8e0 <_printf_float+0x168>
 800a922:	b913      	cbnz	r3, 800a92a <_printf_float+0x1b2>
 800a924:	6822      	ldr	r2, [r4, #0]
 800a926:	07d2      	lsls	r2, r2, #31
 800a928:	d501      	bpl.n	800a92e <_printf_float+0x1b6>
 800a92a:	3302      	adds	r3, #2
 800a92c:	e7f4      	b.n	800a918 <_printf_float+0x1a0>
 800a92e:	2301      	movs	r3, #1
 800a930:	e7f2      	b.n	800a918 <_printf_float+0x1a0>
 800a932:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a938:	4299      	cmp	r1, r3
 800a93a:	db05      	blt.n	800a948 <_printf_float+0x1d0>
 800a93c:	6823      	ldr	r3, [r4, #0]
 800a93e:	6121      	str	r1, [r4, #16]
 800a940:	07d8      	lsls	r0, r3, #31
 800a942:	d5ea      	bpl.n	800a91a <_printf_float+0x1a2>
 800a944:	1c4b      	adds	r3, r1, #1
 800a946:	e7e7      	b.n	800a918 <_printf_float+0x1a0>
 800a948:	2900      	cmp	r1, #0
 800a94a:	bfd4      	ite	le
 800a94c:	f1c1 0202 	rsble	r2, r1, #2
 800a950:	2201      	movgt	r2, #1
 800a952:	4413      	add	r3, r2
 800a954:	e7e0      	b.n	800a918 <_printf_float+0x1a0>
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	055a      	lsls	r2, r3, #21
 800a95a:	d407      	bmi.n	800a96c <_printf_float+0x1f4>
 800a95c:	6923      	ldr	r3, [r4, #16]
 800a95e:	4642      	mov	r2, r8
 800a960:	4631      	mov	r1, r6
 800a962:	4628      	mov	r0, r5
 800a964:	47b8      	blx	r7
 800a966:	3001      	adds	r0, #1
 800a968:	d12c      	bne.n	800a9c4 <_printf_float+0x24c>
 800a96a:	e764      	b.n	800a836 <_printf_float+0xbe>
 800a96c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a970:	f240 80e0 	bls.w	800ab34 <_printf_float+0x3bc>
 800a974:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a978:	2200      	movs	r2, #0
 800a97a:	2300      	movs	r3, #0
 800a97c:	f7f6 f8ac 	bl	8000ad8 <__aeabi_dcmpeq>
 800a980:	2800      	cmp	r0, #0
 800a982:	d034      	beq.n	800a9ee <_printf_float+0x276>
 800a984:	4a37      	ldr	r2, [pc, #220]	; (800aa64 <_printf_float+0x2ec>)
 800a986:	2301      	movs	r3, #1
 800a988:	4631      	mov	r1, r6
 800a98a:	4628      	mov	r0, r5
 800a98c:	47b8      	blx	r7
 800a98e:	3001      	adds	r0, #1
 800a990:	f43f af51 	beq.w	800a836 <_printf_float+0xbe>
 800a994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a998:	429a      	cmp	r2, r3
 800a99a:	db02      	blt.n	800a9a2 <_printf_float+0x22a>
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	07d8      	lsls	r0, r3, #31
 800a9a0:	d510      	bpl.n	800a9c4 <_printf_float+0x24c>
 800a9a2:	ee18 3a10 	vmov	r3, s16
 800a9a6:	4652      	mov	r2, sl
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	47b8      	blx	r7
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	f43f af41 	beq.w	800a836 <_printf_float+0xbe>
 800a9b4:	f04f 0800 	mov.w	r8, #0
 800a9b8:	f104 091a 	add.w	r9, r4, #26
 800a9bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	4543      	cmp	r3, r8
 800a9c2:	dc09      	bgt.n	800a9d8 <_printf_float+0x260>
 800a9c4:	6823      	ldr	r3, [r4, #0]
 800a9c6:	079b      	lsls	r3, r3, #30
 800a9c8:	f100 8107 	bmi.w	800abda <_printf_float+0x462>
 800a9cc:	68e0      	ldr	r0, [r4, #12]
 800a9ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d0:	4298      	cmp	r0, r3
 800a9d2:	bfb8      	it	lt
 800a9d4:	4618      	movlt	r0, r3
 800a9d6:	e730      	b.n	800a83a <_printf_float+0xc2>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	464a      	mov	r2, r9
 800a9dc:	4631      	mov	r1, r6
 800a9de:	4628      	mov	r0, r5
 800a9e0:	47b8      	blx	r7
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	f43f af27 	beq.w	800a836 <_printf_float+0xbe>
 800a9e8:	f108 0801 	add.w	r8, r8, #1
 800a9ec:	e7e6      	b.n	800a9bc <_printf_float+0x244>
 800a9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	dc39      	bgt.n	800aa68 <_printf_float+0x2f0>
 800a9f4:	4a1b      	ldr	r2, [pc, #108]	; (800aa64 <_printf_float+0x2ec>)
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	4631      	mov	r1, r6
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	47b8      	blx	r7
 800a9fe:	3001      	adds	r0, #1
 800aa00:	f43f af19 	beq.w	800a836 <_printf_float+0xbe>
 800aa04:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	d102      	bne.n	800aa12 <_printf_float+0x29a>
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	07d9      	lsls	r1, r3, #31
 800aa10:	d5d8      	bpl.n	800a9c4 <_printf_float+0x24c>
 800aa12:	ee18 3a10 	vmov	r3, s16
 800aa16:	4652      	mov	r2, sl
 800aa18:	4631      	mov	r1, r6
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	47b8      	blx	r7
 800aa1e:	3001      	adds	r0, #1
 800aa20:	f43f af09 	beq.w	800a836 <_printf_float+0xbe>
 800aa24:	f04f 0900 	mov.w	r9, #0
 800aa28:	f104 0a1a 	add.w	sl, r4, #26
 800aa2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa2e:	425b      	negs	r3, r3
 800aa30:	454b      	cmp	r3, r9
 800aa32:	dc01      	bgt.n	800aa38 <_printf_float+0x2c0>
 800aa34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa36:	e792      	b.n	800a95e <_printf_float+0x1e6>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	4652      	mov	r2, sl
 800aa3c:	4631      	mov	r1, r6
 800aa3e:	4628      	mov	r0, r5
 800aa40:	47b8      	blx	r7
 800aa42:	3001      	adds	r0, #1
 800aa44:	f43f aef7 	beq.w	800a836 <_printf_float+0xbe>
 800aa48:	f109 0901 	add.w	r9, r9, #1
 800aa4c:	e7ee      	b.n	800aa2c <_printf_float+0x2b4>
 800aa4e:	bf00      	nop
 800aa50:	7fefffff 	.word	0x7fefffff
 800aa54:	0801027c 	.word	0x0801027c
 800aa58:	08010280 	.word	0x08010280
 800aa5c:	08010284 	.word	0x08010284
 800aa60:	08010288 	.word	0x08010288
 800aa64:	0801028c 	.word	0x0801028c
 800aa68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	bfa8      	it	ge
 800aa70:	461a      	movge	r2, r3
 800aa72:	2a00      	cmp	r2, #0
 800aa74:	4691      	mov	r9, r2
 800aa76:	dc37      	bgt.n	800aae8 <_printf_float+0x370>
 800aa78:	f04f 0b00 	mov.w	fp, #0
 800aa7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa80:	f104 021a 	add.w	r2, r4, #26
 800aa84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa86:	9305      	str	r3, [sp, #20]
 800aa88:	eba3 0309 	sub.w	r3, r3, r9
 800aa8c:	455b      	cmp	r3, fp
 800aa8e:	dc33      	bgt.n	800aaf8 <_printf_float+0x380>
 800aa90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa94:	429a      	cmp	r2, r3
 800aa96:	db3b      	blt.n	800ab10 <_printf_float+0x398>
 800aa98:	6823      	ldr	r3, [r4, #0]
 800aa9a:	07da      	lsls	r2, r3, #31
 800aa9c:	d438      	bmi.n	800ab10 <_printf_float+0x398>
 800aa9e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aaa2:	eba2 0903 	sub.w	r9, r2, r3
 800aaa6:	9b05      	ldr	r3, [sp, #20]
 800aaa8:	1ad2      	subs	r2, r2, r3
 800aaaa:	4591      	cmp	r9, r2
 800aaac:	bfa8      	it	ge
 800aaae:	4691      	movge	r9, r2
 800aab0:	f1b9 0f00 	cmp.w	r9, #0
 800aab4:	dc35      	bgt.n	800ab22 <_printf_float+0x3aa>
 800aab6:	f04f 0800 	mov.w	r8, #0
 800aaba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aabe:	f104 0a1a 	add.w	sl, r4, #26
 800aac2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aac6:	1a9b      	subs	r3, r3, r2
 800aac8:	eba3 0309 	sub.w	r3, r3, r9
 800aacc:	4543      	cmp	r3, r8
 800aace:	f77f af79 	ble.w	800a9c4 <_printf_float+0x24c>
 800aad2:	2301      	movs	r3, #1
 800aad4:	4652      	mov	r2, sl
 800aad6:	4631      	mov	r1, r6
 800aad8:	4628      	mov	r0, r5
 800aada:	47b8      	blx	r7
 800aadc:	3001      	adds	r0, #1
 800aade:	f43f aeaa 	beq.w	800a836 <_printf_float+0xbe>
 800aae2:	f108 0801 	add.w	r8, r8, #1
 800aae6:	e7ec      	b.n	800aac2 <_printf_float+0x34a>
 800aae8:	4613      	mov	r3, r2
 800aaea:	4631      	mov	r1, r6
 800aaec:	4642      	mov	r2, r8
 800aaee:	4628      	mov	r0, r5
 800aaf0:	47b8      	blx	r7
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	d1c0      	bne.n	800aa78 <_printf_float+0x300>
 800aaf6:	e69e      	b.n	800a836 <_printf_float+0xbe>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	4631      	mov	r1, r6
 800aafc:	4628      	mov	r0, r5
 800aafe:	9205      	str	r2, [sp, #20]
 800ab00:	47b8      	blx	r7
 800ab02:	3001      	adds	r0, #1
 800ab04:	f43f ae97 	beq.w	800a836 <_printf_float+0xbe>
 800ab08:	9a05      	ldr	r2, [sp, #20]
 800ab0a:	f10b 0b01 	add.w	fp, fp, #1
 800ab0e:	e7b9      	b.n	800aa84 <_printf_float+0x30c>
 800ab10:	ee18 3a10 	vmov	r3, s16
 800ab14:	4652      	mov	r2, sl
 800ab16:	4631      	mov	r1, r6
 800ab18:	4628      	mov	r0, r5
 800ab1a:	47b8      	blx	r7
 800ab1c:	3001      	adds	r0, #1
 800ab1e:	d1be      	bne.n	800aa9e <_printf_float+0x326>
 800ab20:	e689      	b.n	800a836 <_printf_float+0xbe>
 800ab22:	9a05      	ldr	r2, [sp, #20]
 800ab24:	464b      	mov	r3, r9
 800ab26:	4442      	add	r2, r8
 800ab28:	4631      	mov	r1, r6
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	47b8      	blx	r7
 800ab2e:	3001      	adds	r0, #1
 800ab30:	d1c1      	bne.n	800aab6 <_printf_float+0x33e>
 800ab32:	e680      	b.n	800a836 <_printf_float+0xbe>
 800ab34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab36:	2a01      	cmp	r2, #1
 800ab38:	dc01      	bgt.n	800ab3e <_printf_float+0x3c6>
 800ab3a:	07db      	lsls	r3, r3, #31
 800ab3c:	d53a      	bpl.n	800abb4 <_printf_float+0x43c>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	4642      	mov	r2, r8
 800ab42:	4631      	mov	r1, r6
 800ab44:	4628      	mov	r0, r5
 800ab46:	47b8      	blx	r7
 800ab48:	3001      	adds	r0, #1
 800ab4a:	f43f ae74 	beq.w	800a836 <_printf_float+0xbe>
 800ab4e:	ee18 3a10 	vmov	r3, s16
 800ab52:	4652      	mov	r2, sl
 800ab54:	4631      	mov	r1, r6
 800ab56:	4628      	mov	r0, r5
 800ab58:	47b8      	blx	r7
 800ab5a:	3001      	adds	r0, #1
 800ab5c:	f43f ae6b 	beq.w	800a836 <_printf_float+0xbe>
 800ab60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab64:	2200      	movs	r2, #0
 800ab66:	2300      	movs	r3, #0
 800ab68:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ab6c:	f7f5 ffb4 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab70:	b9d8      	cbnz	r0, 800abaa <_printf_float+0x432>
 800ab72:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ab76:	f108 0201 	add.w	r2, r8, #1
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	47b8      	blx	r7
 800ab80:	3001      	adds	r0, #1
 800ab82:	d10e      	bne.n	800aba2 <_printf_float+0x42a>
 800ab84:	e657      	b.n	800a836 <_printf_float+0xbe>
 800ab86:	2301      	movs	r3, #1
 800ab88:	4652      	mov	r2, sl
 800ab8a:	4631      	mov	r1, r6
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	47b8      	blx	r7
 800ab90:	3001      	adds	r0, #1
 800ab92:	f43f ae50 	beq.w	800a836 <_printf_float+0xbe>
 800ab96:	f108 0801 	add.w	r8, r8, #1
 800ab9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	4543      	cmp	r3, r8
 800aba0:	dcf1      	bgt.n	800ab86 <_printf_float+0x40e>
 800aba2:	464b      	mov	r3, r9
 800aba4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aba8:	e6da      	b.n	800a960 <_printf_float+0x1e8>
 800abaa:	f04f 0800 	mov.w	r8, #0
 800abae:	f104 0a1a 	add.w	sl, r4, #26
 800abb2:	e7f2      	b.n	800ab9a <_printf_float+0x422>
 800abb4:	2301      	movs	r3, #1
 800abb6:	4642      	mov	r2, r8
 800abb8:	e7df      	b.n	800ab7a <_printf_float+0x402>
 800abba:	2301      	movs	r3, #1
 800abbc:	464a      	mov	r2, r9
 800abbe:	4631      	mov	r1, r6
 800abc0:	4628      	mov	r0, r5
 800abc2:	47b8      	blx	r7
 800abc4:	3001      	adds	r0, #1
 800abc6:	f43f ae36 	beq.w	800a836 <_printf_float+0xbe>
 800abca:	f108 0801 	add.w	r8, r8, #1
 800abce:	68e3      	ldr	r3, [r4, #12]
 800abd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abd2:	1a5b      	subs	r3, r3, r1
 800abd4:	4543      	cmp	r3, r8
 800abd6:	dcf0      	bgt.n	800abba <_printf_float+0x442>
 800abd8:	e6f8      	b.n	800a9cc <_printf_float+0x254>
 800abda:	f04f 0800 	mov.w	r8, #0
 800abde:	f104 0919 	add.w	r9, r4, #25
 800abe2:	e7f4      	b.n	800abce <_printf_float+0x456>

0800abe4 <_printf_common>:
 800abe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abe8:	4616      	mov	r6, r2
 800abea:	4699      	mov	r9, r3
 800abec:	688a      	ldr	r2, [r1, #8]
 800abee:	690b      	ldr	r3, [r1, #16]
 800abf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abf4:	4293      	cmp	r3, r2
 800abf6:	bfb8      	it	lt
 800abf8:	4613      	movlt	r3, r2
 800abfa:	6033      	str	r3, [r6, #0]
 800abfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac00:	4607      	mov	r7, r0
 800ac02:	460c      	mov	r4, r1
 800ac04:	b10a      	cbz	r2, 800ac0a <_printf_common+0x26>
 800ac06:	3301      	adds	r3, #1
 800ac08:	6033      	str	r3, [r6, #0]
 800ac0a:	6823      	ldr	r3, [r4, #0]
 800ac0c:	0699      	lsls	r1, r3, #26
 800ac0e:	bf42      	ittt	mi
 800ac10:	6833      	ldrmi	r3, [r6, #0]
 800ac12:	3302      	addmi	r3, #2
 800ac14:	6033      	strmi	r3, [r6, #0]
 800ac16:	6825      	ldr	r5, [r4, #0]
 800ac18:	f015 0506 	ands.w	r5, r5, #6
 800ac1c:	d106      	bne.n	800ac2c <_printf_common+0x48>
 800ac1e:	f104 0a19 	add.w	sl, r4, #25
 800ac22:	68e3      	ldr	r3, [r4, #12]
 800ac24:	6832      	ldr	r2, [r6, #0]
 800ac26:	1a9b      	subs	r3, r3, r2
 800ac28:	42ab      	cmp	r3, r5
 800ac2a:	dc26      	bgt.n	800ac7a <_printf_common+0x96>
 800ac2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac30:	1e13      	subs	r3, r2, #0
 800ac32:	6822      	ldr	r2, [r4, #0]
 800ac34:	bf18      	it	ne
 800ac36:	2301      	movne	r3, #1
 800ac38:	0692      	lsls	r2, r2, #26
 800ac3a:	d42b      	bmi.n	800ac94 <_printf_common+0xb0>
 800ac3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac40:	4649      	mov	r1, r9
 800ac42:	4638      	mov	r0, r7
 800ac44:	47c0      	blx	r8
 800ac46:	3001      	adds	r0, #1
 800ac48:	d01e      	beq.n	800ac88 <_printf_common+0xa4>
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	6922      	ldr	r2, [r4, #16]
 800ac4e:	f003 0306 	and.w	r3, r3, #6
 800ac52:	2b04      	cmp	r3, #4
 800ac54:	bf02      	ittt	eq
 800ac56:	68e5      	ldreq	r5, [r4, #12]
 800ac58:	6833      	ldreq	r3, [r6, #0]
 800ac5a:	1aed      	subeq	r5, r5, r3
 800ac5c:	68a3      	ldr	r3, [r4, #8]
 800ac5e:	bf0c      	ite	eq
 800ac60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac64:	2500      	movne	r5, #0
 800ac66:	4293      	cmp	r3, r2
 800ac68:	bfc4      	itt	gt
 800ac6a:	1a9b      	subgt	r3, r3, r2
 800ac6c:	18ed      	addgt	r5, r5, r3
 800ac6e:	2600      	movs	r6, #0
 800ac70:	341a      	adds	r4, #26
 800ac72:	42b5      	cmp	r5, r6
 800ac74:	d11a      	bne.n	800acac <_printf_common+0xc8>
 800ac76:	2000      	movs	r0, #0
 800ac78:	e008      	b.n	800ac8c <_printf_common+0xa8>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	4652      	mov	r2, sl
 800ac7e:	4649      	mov	r1, r9
 800ac80:	4638      	mov	r0, r7
 800ac82:	47c0      	blx	r8
 800ac84:	3001      	adds	r0, #1
 800ac86:	d103      	bne.n	800ac90 <_printf_common+0xac>
 800ac88:	f04f 30ff 	mov.w	r0, #4294967295
 800ac8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac90:	3501      	adds	r5, #1
 800ac92:	e7c6      	b.n	800ac22 <_printf_common+0x3e>
 800ac94:	18e1      	adds	r1, r4, r3
 800ac96:	1c5a      	adds	r2, r3, #1
 800ac98:	2030      	movs	r0, #48	; 0x30
 800ac9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac9e:	4422      	add	r2, r4
 800aca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aca8:	3302      	adds	r3, #2
 800acaa:	e7c7      	b.n	800ac3c <_printf_common+0x58>
 800acac:	2301      	movs	r3, #1
 800acae:	4622      	mov	r2, r4
 800acb0:	4649      	mov	r1, r9
 800acb2:	4638      	mov	r0, r7
 800acb4:	47c0      	blx	r8
 800acb6:	3001      	adds	r0, #1
 800acb8:	d0e6      	beq.n	800ac88 <_printf_common+0xa4>
 800acba:	3601      	adds	r6, #1
 800acbc:	e7d9      	b.n	800ac72 <_printf_common+0x8e>
	...

0800acc0 <_printf_i>:
 800acc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acc4:	7e0f      	ldrb	r7, [r1, #24]
 800acc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acc8:	2f78      	cmp	r7, #120	; 0x78
 800acca:	4691      	mov	r9, r2
 800accc:	4680      	mov	r8, r0
 800acce:	460c      	mov	r4, r1
 800acd0:	469a      	mov	sl, r3
 800acd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acd6:	d807      	bhi.n	800ace8 <_printf_i+0x28>
 800acd8:	2f62      	cmp	r7, #98	; 0x62
 800acda:	d80a      	bhi.n	800acf2 <_printf_i+0x32>
 800acdc:	2f00      	cmp	r7, #0
 800acde:	f000 80d4 	beq.w	800ae8a <_printf_i+0x1ca>
 800ace2:	2f58      	cmp	r7, #88	; 0x58
 800ace4:	f000 80c0 	beq.w	800ae68 <_printf_i+0x1a8>
 800ace8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800acf0:	e03a      	b.n	800ad68 <_printf_i+0xa8>
 800acf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acf6:	2b15      	cmp	r3, #21
 800acf8:	d8f6      	bhi.n	800ace8 <_printf_i+0x28>
 800acfa:	a101      	add	r1, pc, #4	; (adr r1, 800ad00 <_printf_i+0x40>)
 800acfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad00:	0800ad59 	.word	0x0800ad59
 800ad04:	0800ad6d 	.word	0x0800ad6d
 800ad08:	0800ace9 	.word	0x0800ace9
 800ad0c:	0800ace9 	.word	0x0800ace9
 800ad10:	0800ace9 	.word	0x0800ace9
 800ad14:	0800ace9 	.word	0x0800ace9
 800ad18:	0800ad6d 	.word	0x0800ad6d
 800ad1c:	0800ace9 	.word	0x0800ace9
 800ad20:	0800ace9 	.word	0x0800ace9
 800ad24:	0800ace9 	.word	0x0800ace9
 800ad28:	0800ace9 	.word	0x0800ace9
 800ad2c:	0800ae71 	.word	0x0800ae71
 800ad30:	0800ad99 	.word	0x0800ad99
 800ad34:	0800ae2b 	.word	0x0800ae2b
 800ad38:	0800ace9 	.word	0x0800ace9
 800ad3c:	0800ace9 	.word	0x0800ace9
 800ad40:	0800ae93 	.word	0x0800ae93
 800ad44:	0800ace9 	.word	0x0800ace9
 800ad48:	0800ad99 	.word	0x0800ad99
 800ad4c:	0800ace9 	.word	0x0800ace9
 800ad50:	0800ace9 	.word	0x0800ace9
 800ad54:	0800ae33 	.word	0x0800ae33
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	1d1a      	adds	r2, r3, #4
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	602a      	str	r2, [r5, #0]
 800ad60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e09f      	b.n	800aeac <_printf_i+0x1ec>
 800ad6c:	6820      	ldr	r0, [r4, #0]
 800ad6e:	682b      	ldr	r3, [r5, #0]
 800ad70:	0607      	lsls	r7, r0, #24
 800ad72:	f103 0104 	add.w	r1, r3, #4
 800ad76:	6029      	str	r1, [r5, #0]
 800ad78:	d501      	bpl.n	800ad7e <_printf_i+0xbe>
 800ad7a:	681e      	ldr	r6, [r3, #0]
 800ad7c:	e003      	b.n	800ad86 <_printf_i+0xc6>
 800ad7e:	0646      	lsls	r6, r0, #25
 800ad80:	d5fb      	bpl.n	800ad7a <_printf_i+0xba>
 800ad82:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ad86:	2e00      	cmp	r6, #0
 800ad88:	da03      	bge.n	800ad92 <_printf_i+0xd2>
 800ad8a:	232d      	movs	r3, #45	; 0x2d
 800ad8c:	4276      	negs	r6, r6
 800ad8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad92:	485a      	ldr	r0, [pc, #360]	; (800aefc <_printf_i+0x23c>)
 800ad94:	230a      	movs	r3, #10
 800ad96:	e012      	b.n	800adbe <_printf_i+0xfe>
 800ad98:	682b      	ldr	r3, [r5, #0]
 800ad9a:	6820      	ldr	r0, [r4, #0]
 800ad9c:	1d19      	adds	r1, r3, #4
 800ad9e:	6029      	str	r1, [r5, #0]
 800ada0:	0605      	lsls	r5, r0, #24
 800ada2:	d501      	bpl.n	800ada8 <_printf_i+0xe8>
 800ada4:	681e      	ldr	r6, [r3, #0]
 800ada6:	e002      	b.n	800adae <_printf_i+0xee>
 800ada8:	0641      	lsls	r1, r0, #25
 800adaa:	d5fb      	bpl.n	800ada4 <_printf_i+0xe4>
 800adac:	881e      	ldrh	r6, [r3, #0]
 800adae:	4853      	ldr	r0, [pc, #332]	; (800aefc <_printf_i+0x23c>)
 800adb0:	2f6f      	cmp	r7, #111	; 0x6f
 800adb2:	bf0c      	ite	eq
 800adb4:	2308      	moveq	r3, #8
 800adb6:	230a      	movne	r3, #10
 800adb8:	2100      	movs	r1, #0
 800adba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adbe:	6865      	ldr	r5, [r4, #4]
 800adc0:	60a5      	str	r5, [r4, #8]
 800adc2:	2d00      	cmp	r5, #0
 800adc4:	bfa2      	ittt	ge
 800adc6:	6821      	ldrge	r1, [r4, #0]
 800adc8:	f021 0104 	bicge.w	r1, r1, #4
 800adcc:	6021      	strge	r1, [r4, #0]
 800adce:	b90e      	cbnz	r6, 800add4 <_printf_i+0x114>
 800add0:	2d00      	cmp	r5, #0
 800add2:	d04b      	beq.n	800ae6c <_printf_i+0x1ac>
 800add4:	4615      	mov	r5, r2
 800add6:	fbb6 f1f3 	udiv	r1, r6, r3
 800adda:	fb03 6711 	mls	r7, r3, r1, r6
 800adde:	5dc7      	ldrb	r7, [r0, r7]
 800ade0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ade4:	4637      	mov	r7, r6
 800ade6:	42bb      	cmp	r3, r7
 800ade8:	460e      	mov	r6, r1
 800adea:	d9f4      	bls.n	800add6 <_printf_i+0x116>
 800adec:	2b08      	cmp	r3, #8
 800adee:	d10b      	bne.n	800ae08 <_printf_i+0x148>
 800adf0:	6823      	ldr	r3, [r4, #0]
 800adf2:	07de      	lsls	r6, r3, #31
 800adf4:	d508      	bpl.n	800ae08 <_printf_i+0x148>
 800adf6:	6923      	ldr	r3, [r4, #16]
 800adf8:	6861      	ldr	r1, [r4, #4]
 800adfa:	4299      	cmp	r1, r3
 800adfc:	bfde      	ittt	le
 800adfe:	2330      	movle	r3, #48	; 0x30
 800ae00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae08:	1b52      	subs	r2, r2, r5
 800ae0a:	6122      	str	r2, [r4, #16]
 800ae0c:	f8cd a000 	str.w	sl, [sp]
 800ae10:	464b      	mov	r3, r9
 800ae12:	aa03      	add	r2, sp, #12
 800ae14:	4621      	mov	r1, r4
 800ae16:	4640      	mov	r0, r8
 800ae18:	f7ff fee4 	bl	800abe4 <_printf_common>
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	d14a      	bne.n	800aeb6 <_printf_i+0x1f6>
 800ae20:	f04f 30ff 	mov.w	r0, #4294967295
 800ae24:	b004      	add	sp, #16
 800ae26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	f043 0320 	orr.w	r3, r3, #32
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	4833      	ldr	r0, [pc, #204]	; (800af00 <_printf_i+0x240>)
 800ae34:	2778      	movs	r7, #120	; 0x78
 800ae36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	6829      	ldr	r1, [r5, #0]
 800ae3e:	061f      	lsls	r7, r3, #24
 800ae40:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae44:	d402      	bmi.n	800ae4c <_printf_i+0x18c>
 800ae46:	065f      	lsls	r7, r3, #25
 800ae48:	bf48      	it	mi
 800ae4a:	b2b6      	uxthmi	r6, r6
 800ae4c:	07df      	lsls	r7, r3, #31
 800ae4e:	bf48      	it	mi
 800ae50:	f043 0320 	orrmi.w	r3, r3, #32
 800ae54:	6029      	str	r1, [r5, #0]
 800ae56:	bf48      	it	mi
 800ae58:	6023      	strmi	r3, [r4, #0]
 800ae5a:	b91e      	cbnz	r6, 800ae64 <_printf_i+0x1a4>
 800ae5c:	6823      	ldr	r3, [r4, #0]
 800ae5e:	f023 0320 	bic.w	r3, r3, #32
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	2310      	movs	r3, #16
 800ae66:	e7a7      	b.n	800adb8 <_printf_i+0xf8>
 800ae68:	4824      	ldr	r0, [pc, #144]	; (800aefc <_printf_i+0x23c>)
 800ae6a:	e7e4      	b.n	800ae36 <_printf_i+0x176>
 800ae6c:	4615      	mov	r5, r2
 800ae6e:	e7bd      	b.n	800adec <_printf_i+0x12c>
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	6826      	ldr	r6, [r4, #0]
 800ae74:	6961      	ldr	r1, [r4, #20]
 800ae76:	1d18      	adds	r0, r3, #4
 800ae78:	6028      	str	r0, [r5, #0]
 800ae7a:	0635      	lsls	r5, r6, #24
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	d501      	bpl.n	800ae84 <_printf_i+0x1c4>
 800ae80:	6019      	str	r1, [r3, #0]
 800ae82:	e002      	b.n	800ae8a <_printf_i+0x1ca>
 800ae84:	0670      	lsls	r0, r6, #25
 800ae86:	d5fb      	bpl.n	800ae80 <_printf_i+0x1c0>
 800ae88:	8019      	strh	r1, [r3, #0]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	6123      	str	r3, [r4, #16]
 800ae8e:	4615      	mov	r5, r2
 800ae90:	e7bc      	b.n	800ae0c <_printf_i+0x14c>
 800ae92:	682b      	ldr	r3, [r5, #0]
 800ae94:	1d1a      	adds	r2, r3, #4
 800ae96:	602a      	str	r2, [r5, #0]
 800ae98:	681d      	ldr	r5, [r3, #0]
 800ae9a:	6862      	ldr	r2, [r4, #4]
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	4628      	mov	r0, r5
 800aea0:	f7f5 f99e 	bl	80001e0 <memchr>
 800aea4:	b108      	cbz	r0, 800aeaa <_printf_i+0x1ea>
 800aea6:	1b40      	subs	r0, r0, r5
 800aea8:	6060      	str	r0, [r4, #4]
 800aeaa:	6863      	ldr	r3, [r4, #4]
 800aeac:	6123      	str	r3, [r4, #16]
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aeb4:	e7aa      	b.n	800ae0c <_printf_i+0x14c>
 800aeb6:	6923      	ldr	r3, [r4, #16]
 800aeb8:	462a      	mov	r2, r5
 800aeba:	4649      	mov	r1, r9
 800aebc:	4640      	mov	r0, r8
 800aebe:	47d0      	blx	sl
 800aec0:	3001      	adds	r0, #1
 800aec2:	d0ad      	beq.n	800ae20 <_printf_i+0x160>
 800aec4:	6823      	ldr	r3, [r4, #0]
 800aec6:	079b      	lsls	r3, r3, #30
 800aec8:	d413      	bmi.n	800aef2 <_printf_i+0x232>
 800aeca:	68e0      	ldr	r0, [r4, #12]
 800aecc:	9b03      	ldr	r3, [sp, #12]
 800aece:	4298      	cmp	r0, r3
 800aed0:	bfb8      	it	lt
 800aed2:	4618      	movlt	r0, r3
 800aed4:	e7a6      	b.n	800ae24 <_printf_i+0x164>
 800aed6:	2301      	movs	r3, #1
 800aed8:	4632      	mov	r2, r6
 800aeda:	4649      	mov	r1, r9
 800aedc:	4640      	mov	r0, r8
 800aede:	47d0      	blx	sl
 800aee0:	3001      	adds	r0, #1
 800aee2:	d09d      	beq.n	800ae20 <_printf_i+0x160>
 800aee4:	3501      	adds	r5, #1
 800aee6:	68e3      	ldr	r3, [r4, #12]
 800aee8:	9903      	ldr	r1, [sp, #12]
 800aeea:	1a5b      	subs	r3, r3, r1
 800aeec:	42ab      	cmp	r3, r5
 800aeee:	dcf2      	bgt.n	800aed6 <_printf_i+0x216>
 800aef0:	e7eb      	b.n	800aeca <_printf_i+0x20a>
 800aef2:	2500      	movs	r5, #0
 800aef4:	f104 0619 	add.w	r6, r4, #25
 800aef8:	e7f5      	b.n	800aee6 <_printf_i+0x226>
 800aefa:	bf00      	nop
 800aefc:	0801028e 	.word	0x0801028e
 800af00:	0801029f 	.word	0x0801029f

0800af04 <std>:
 800af04:	2300      	movs	r3, #0
 800af06:	b510      	push	{r4, lr}
 800af08:	4604      	mov	r4, r0
 800af0a:	e9c0 3300 	strd	r3, r3, [r0]
 800af0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af12:	6083      	str	r3, [r0, #8]
 800af14:	8181      	strh	r1, [r0, #12]
 800af16:	6643      	str	r3, [r0, #100]	; 0x64
 800af18:	81c2      	strh	r2, [r0, #14]
 800af1a:	6183      	str	r3, [r0, #24]
 800af1c:	4619      	mov	r1, r3
 800af1e:	2208      	movs	r2, #8
 800af20:	305c      	adds	r0, #92	; 0x5c
 800af22:	f000 f92e 	bl	800b182 <memset>
 800af26:	4b0d      	ldr	r3, [pc, #52]	; (800af5c <std+0x58>)
 800af28:	6263      	str	r3, [r4, #36]	; 0x24
 800af2a:	4b0d      	ldr	r3, [pc, #52]	; (800af60 <std+0x5c>)
 800af2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800af2e:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <std+0x60>)
 800af30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af32:	4b0d      	ldr	r3, [pc, #52]	; (800af68 <std+0x64>)
 800af34:	6323      	str	r3, [r4, #48]	; 0x30
 800af36:	4b0d      	ldr	r3, [pc, #52]	; (800af6c <std+0x68>)
 800af38:	6224      	str	r4, [r4, #32]
 800af3a:	429c      	cmp	r4, r3
 800af3c:	d006      	beq.n	800af4c <std+0x48>
 800af3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800af42:	4294      	cmp	r4, r2
 800af44:	d002      	beq.n	800af4c <std+0x48>
 800af46:	33d0      	adds	r3, #208	; 0xd0
 800af48:	429c      	cmp	r4, r3
 800af4a:	d105      	bne.n	800af58 <std+0x54>
 800af4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af54:	f000 b992 	b.w	800b27c <__retarget_lock_init_recursive>
 800af58:	bd10      	pop	{r4, pc}
 800af5a:	bf00      	nop
 800af5c:	0800b0c9 	.word	0x0800b0c9
 800af60:	0800b0eb 	.word	0x0800b0eb
 800af64:	0800b123 	.word	0x0800b123
 800af68:	0800b147 	.word	0x0800b147
 800af6c:	20001868 	.word	0x20001868

0800af70 <stdio_exit_handler>:
 800af70:	4a02      	ldr	r2, [pc, #8]	; (800af7c <stdio_exit_handler+0xc>)
 800af72:	4903      	ldr	r1, [pc, #12]	; (800af80 <stdio_exit_handler+0x10>)
 800af74:	4803      	ldr	r0, [pc, #12]	; (800af84 <stdio_exit_handler+0x14>)
 800af76:	f000 b869 	b.w	800b04c <_fwalk_sglue>
 800af7a:	bf00      	nop
 800af7c:	20000684 	.word	0x20000684
 800af80:	0800cc49 	.word	0x0800cc49
 800af84:	20000690 	.word	0x20000690

0800af88 <cleanup_stdio>:
 800af88:	6841      	ldr	r1, [r0, #4]
 800af8a:	4b0c      	ldr	r3, [pc, #48]	; (800afbc <cleanup_stdio+0x34>)
 800af8c:	4299      	cmp	r1, r3
 800af8e:	b510      	push	{r4, lr}
 800af90:	4604      	mov	r4, r0
 800af92:	d001      	beq.n	800af98 <cleanup_stdio+0x10>
 800af94:	f001 fe58 	bl	800cc48 <_fflush_r>
 800af98:	68a1      	ldr	r1, [r4, #8]
 800af9a:	4b09      	ldr	r3, [pc, #36]	; (800afc0 <cleanup_stdio+0x38>)
 800af9c:	4299      	cmp	r1, r3
 800af9e:	d002      	beq.n	800afa6 <cleanup_stdio+0x1e>
 800afa0:	4620      	mov	r0, r4
 800afa2:	f001 fe51 	bl	800cc48 <_fflush_r>
 800afa6:	68e1      	ldr	r1, [r4, #12]
 800afa8:	4b06      	ldr	r3, [pc, #24]	; (800afc4 <cleanup_stdio+0x3c>)
 800afaa:	4299      	cmp	r1, r3
 800afac:	d004      	beq.n	800afb8 <cleanup_stdio+0x30>
 800afae:	4620      	mov	r0, r4
 800afb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afb4:	f001 be48 	b.w	800cc48 <_fflush_r>
 800afb8:	bd10      	pop	{r4, pc}
 800afba:	bf00      	nop
 800afbc:	20001868 	.word	0x20001868
 800afc0:	200018d0 	.word	0x200018d0
 800afc4:	20001938 	.word	0x20001938

0800afc8 <global_stdio_init.part.0>:
 800afc8:	b510      	push	{r4, lr}
 800afca:	4b0b      	ldr	r3, [pc, #44]	; (800aff8 <global_stdio_init.part.0+0x30>)
 800afcc:	4c0b      	ldr	r4, [pc, #44]	; (800affc <global_stdio_init.part.0+0x34>)
 800afce:	4a0c      	ldr	r2, [pc, #48]	; (800b000 <global_stdio_init.part.0+0x38>)
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	4620      	mov	r0, r4
 800afd4:	2200      	movs	r2, #0
 800afd6:	2104      	movs	r1, #4
 800afd8:	f7ff ff94 	bl	800af04 <std>
 800afdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800afe0:	2201      	movs	r2, #1
 800afe2:	2109      	movs	r1, #9
 800afe4:	f7ff ff8e 	bl	800af04 <std>
 800afe8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800afec:	2202      	movs	r2, #2
 800afee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aff2:	2112      	movs	r1, #18
 800aff4:	f7ff bf86 	b.w	800af04 <std>
 800aff8:	200019a0 	.word	0x200019a0
 800affc:	20001868 	.word	0x20001868
 800b000:	0800af71 	.word	0x0800af71

0800b004 <__sfp_lock_acquire>:
 800b004:	4801      	ldr	r0, [pc, #4]	; (800b00c <__sfp_lock_acquire+0x8>)
 800b006:	f000 b93a 	b.w	800b27e <__retarget_lock_acquire_recursive>
 800b00a:	bf00      	nop
 800b00c:	200019a9 	.word	0x200019a9

0800b010 <__sfp_lock_release>:
 800b010:	4801      	ldr	r0, [pc, #4]	; (800b018 <__sfp_lock_release+0x8>)
 800b012:	f000 b935 	b.w	800b280 <__retarget_lock_release_recursive>
 800b016:	bf00      	nop
 800b018:	200019a9 	.word	0x200019a9

0800b01c <__sinit>:
 800b01c:	b510      	push	{r4, lr}
 800b01e:	4604      	mov	r4, r0
 800b020:	f7ff fff0 	bl	800b004 <__sfp_lock_acquire>
 800b024:	6a23      	ldr	r3, [r4, #32]
 800b026:	b11b      	cbz	r3, 800b030 <__sinit+0x14>
 800b028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b02c:	f7ff bff0 	b.w	800b010 <__sfp_lock_release>
 800b030:	4b04      	ldr	r3, [pc, #16]	; (800b044 <__sinit+0x28>)
 800b032:	6223      	str	r3, [r4, #32]
 800b034:	4b04      	ldr	r3, [pc, #16]	; (800b048 <__sinit+0x2c>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d1f5      	bne.n	800b028 <__sinit+0xc>
 800b03c:	f7ff ffc4 	bl	800afc8 <global_stdio_init.part.0>
 800b040:	e7f2      	b.n	800b028 <__sinit+0xc>
 800b042:	bf00      	nop
 800b044:	0800af89 	.word	0x0800af89
 800b048:	200019a0 	.word	0x200019a0

0800b04c <_fwalk_sglue>:
 800b04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b050:	4607      	mov	r7, r0
 800b052:	4688      	mov	r8, r1
 800b054:	4614      	mov	r4, r2
 800b056:	2600      	movs	r6, #0
 800b058:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b05c:	f1b9 0901 	subs.w	r9, r9, #1
 800b060:	d505      	bpl.n	800b06e <_fwalk_sglue+0x22>
 800b062:	6824      	ldr	r4, [r4, #0]
 800b064:	2c00      	cmp	r4, #0
 800b066:	d1f7      	bne.n	800b058 <_fwalk_sglue+0xc>
 800b068:	4630      	mov	r0, r6
 800b06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b06e:	89ab      	ldrh	r3, [r5, #12]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d907      	bls.n	800b084 <_fwalk_sglue+0x38>
 800b074:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b078:	3301      	adds	r3, #1
 800b07a:	d003      	beq.n	800b084 <_fwalk_sglue+0x38>
 800b07c:	4629      	mov	r1, r5
 800b07e:	4638      	mov	r0, r7
 800b080:	47c0      	blx	r8
 800b082:	4306      	orrs	r6, r0
 800b084:	3568      	adds	r5, #104	; 0x68
 800b086:	e7e9      	b.n	800b05c <_fwalk_sglue+0x10>

0800b088 <siprintf>:
 800b088:	b40e      	push	{r1, r2, r3}
 800b08a:	b500      	push	{lr}
 800b08c:	b09c      	sub	sp, #112	; 0x70
 800b08e:	ab1d      	add	r3, sp, #116	; 0x74
 800b090:	9002      	str	r0, [sp, #8]
 800b092:	9006      	str	r0, [sp, #24]
 800b094:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b098:	4809      	ldr	r0, [pc, #36]	; (800b0c0 <siprintf+0x38>)
 800b09a:	9107      	str	r1, [sp, #28]
 800b09c:	9104      	str	r1, [sp, #16]
 800b09e:	4909      	ldr	r1, [pc, #36]	; (800b0c4 <siprintf+0x3c>)
 800b0a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0a4:	9105      	str	r1, [sp, #20]
 800b0a6:	6800      	ldr	r0, [r0, #0]
 800b0a8:	9301      	str	r3, [sp, #4]
 800b0aa:	a902      	add	r1, sp, #8
 800b0ac:	f001 fc48 	bl	800c940 <_svfiprintf_r>
 800b0b0:	9b02      	ldr	r3, [sp, #8]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	701a      	strb	r2, [r3, #0]
 800b0b6:	b01c      	add	sp, #112	; 0x70
 800b0b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0bc:	b003      	add	sp, #12
 800b0be:	4770      	bx	lr
 800b0c0:	200006dc 	.word	0x200006dc
 800b0c4:	ffff0208 	.word	0xffff0208

0800b0c8 <__sread>:
 800b0c8:	b510      	push	{r4, lr}
 800b0ca:	460c      	mov	r4, r1
 800b0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0d0:	f000 f886 	bl	800b1e0 <_read_r>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	bfab      	itete	ge
 800b0d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0da:	89a3      	ldrhlt	r3, [r4, #12]
 800b0dc:	181b      	addge	r3, r3, r0
 800b0de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0e2:	bfac      	ite	ge
 800b0e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b0e6:	81a3      	strhlt	r3, [r4, #12]
 800b0e8:	bd10      	pop	{r4, pc}

0800b0ea <__swrite>:
 800b0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ee:	461f      	mov	r7, r3
 800b0f0:	898b      	ldrh	r3, [r1, #12]
 800b0f2:	05db      	lsls	r3, r3, #23
 800b0f4:	4605      	mov	r5, r0
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	4616      	mov	r6, r2
 800b0fa:	d505      	bpl.n	800b108 <__swrite+0x1e>
 800b0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b100:	2302      	movs	r3, #2
 800b102:	2200      	movs	r2, #0
 800b104:	f000 f85a 	bl	800b1bc <_lseek_r>
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b10e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b112:	81a3      	strh	r3, [r4, #12]
 800b114:	4632      	mov	r2, r6
 800b116:	463b      	mov	r3, r7
 800b118:	4628      	mov	r0, r5
 800b11a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b11e:	f000 b871 	b.w	800b204 <_write_r>

0800b122 <__sseek>:
 800b122:	b510      	push	{r4, lr}
 800b124:	460c      	mov	r4, r1
 800b126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b12a:	f000 f847 	bl	800b1bc <_lseek_r>
 800b12e:	1c43      	adds	r3, r0, #1
 800b130:	89a3      	ldrh	r3, [r4, #12]
 800b132:	bf15      	itete	ne
 800b134:	6560      	strne	r0, [r4, #84]	; 0x54
 800b136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b13a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b13e:	81a3      	strheq	r3, [r4, #12]
 800b140:	bf18      	it	ne
 800b142:	81a3      	strhne	r3, [r4, #12]
 800b144:	bd10      	pop	{r4, pc}

0800b146 <__sclose>:
 800b146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b14a:	f000 b827 	b.w	800b19c <_close_r>

0800b14e <memmove>:
 800b14e:	4288      	cmp	r0, r1
 800b150:	b510      	push	{r4, lr}
 800b152:	eb01 0402 	add.w	r4, r1, r2
 800b156:	d902      	bls.n	800b15e <memmove+0x10>
 800b158:	4284      	cmp	r4, r0
 800b15a:	4623      	mov	r3, r4
 800b15c:	d807      	bhi.n	800b16e <memmove+0x20>
 800b15e:	1e43      	subs	r3, r0, #1
 800b160:	42a1      	cmp	r1, r4
 800b162:	d008      	beq.n	800b176 <memmove+0x28>
 800b164:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b168:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b16c:	e7f8      	b.n	800b160 <memmove+0x12>
 800b16e:	4402      	add	r2, r0
 800b170:	4601      	mov	r1, r0
 800b172:	428a      	cmp	r2, r1
 800b174:	d100      	bne.n	800b178 <memmove+0x2a>
 800b176:	bd10      	pop	{r4, pc}
 800b178:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b17c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b180:	e7f7      	b.n	800b172 <memmove+0x24>

0800b182 <memset>:
 800b182:	4402      	add	r2, r0
 800b184:	4603      	mov	r3, r0
 800b186:	4293      	cmp	r3, r2
 800b188:	d100      	bne.n	800b18c <memset+0xa>
 800b18a:	4770      	bx	lr
 800b18c:	f803 1b01 	strb.w	r1, [r3], #1
 800b190:	e7f9      	b.n	800b186 <memset+0x4>
	...

0800b194 <_localeconv_r>:
 800b194:	4800      	ldr	r0, [pc, #0]	; (800b198 <_localeconv_r+0x4>)
 800b196:	4770      	bx	lr
 800b198:	200007d0 	.word	0x200007d0

0800b19c <_close_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	4d06      	ldr	r5, [pc, #24]	; (800b1b8 <_close_r+0x1c>)
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	4608      	mov	r0, r1
 800b1a6:	602b      	str	r3, [r5, #0]
 800b1a8:	f7f7 fd81 	bl	8002cae <_close>
 800b1ac:	1c43      	adds	r3, r0, #1
 800b1ae:	d102      	bne.n	800b1b6 <_close_r+0x1a>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	b103      	cbz	r3, 800b1b6 <_close_r+0x1a>
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	200019a4 	.word	0x200019a4

0800b1bc <_lseek_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	4d07      	ldr	r5, [pc, #28]	; (800b1dc <_lseek_r+0x20>)
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	4608      	mov	r0, r1
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	602a      	str	r2, [r5, #0]
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	f7f7 fd96 	bl	8002cfc <_lseek>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_lseek_r+0x1e>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_lseek_r+0x1e>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	200019a4 	.word	0x200019a4

0800b1e0 <_read_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	4d07      	ldr	r5, [pc, #28]	; (800b200 <_read_r+0x20>)
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	4608      	mov	r0, r1
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	602a      	str	r2, [r5, #0]
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	f7f7 fd24 	bl	8002c3c <_read>
 800b1f4:	1c43      	adds	r3, r0, #1
 800b1f6:	d102      	bne.n	800b1fe <_read_r+0x1e>
 800b1f8:	682b      	ldr	r3, [r5, #0]
 800b1fa:	b103      	cbz	r3, 800b1fe <_read_r+0x1e>
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	bd38      	pop	{r3, r4, r5, pc}
 800b200:	200019a4 	.word	0x200019a4

0800b204 <_write_r>:
 800b204:	b538      	push	{r3, r4, r5, lr}
 800b206:	4d07      	ldr	r5, [pc, #28]	; (800b224 <_write_r+0x20>)
 800b208:	4604      	mov	r4, r0
 800b20a:	4608      	mov	r0, r1
 800b20c:	4611      	mov	r1, r2
 800b20e:	2200      	movs	r2, #0
 800b210:	602a      	str	r2, [r5, #0]
 800b212:	461a      	mov	r2, r3
 800b214:	f7f7 fd2f 	bl	8002c76 <_write>
 800b218:	1c43      	adds	r3, r0, #1
 800b21a:	d102      	bne.n	800b222 <_write_r+0x1e>
 800b21c:	682b      	ldr	r3, [r5, #0]
 800b21e:	b103      	cbz	r3, 800b222 <_write_r+0x1e>
 800b220:	6023      	str	r3, [r4, #0]
 800b222:	bd38      	pop	{r3, r4, r5, pc}
 800b224:	200019a4 	.word	0x200019a4

0800b228 <__errno>:
 800b228:	4b01      	ldr	r3, [pc, #4]	; (800b230 <__errno+0x8>)
 800b22a:	6818      	ldr	r0, [r3, #0]
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	200006dc 	.word	0x200006dc

0800b234 <__libc_init_array>:
 800b234:	b570      	push	{r4, r5, r6, lr}
 800b236:	4d0d      	ldr	r5, [pc, #52]	; (800b26c <__libc_init_array+0x38>)
 800b238:	4c0d      	ldr	r4, [pc, #52]	; (800b270 <__libc_init_array+0x3c>)
 800b23a:	1b64      	subs	r4, r4, r5
 800b23c:	10a4      	asrs	r4, r4, #2
 800b23e:	2600      	movs	r6, #0
 800b240:	42a6      	cmp	r6, r4
 800b242:	d109      	bne.n	800b258 <__libc_init_array+0x24>
 800b244:	4d0b      	ldr	r5, [pc, #44]	; (800b274 <__libc_init_array+0x40>)
 800b246:	4c0c      	ldr	r4, [pc, #48]	; (800b278 <__libc_init_array+0x44>)
 800b248:	f002 f87a 	bl	800d340 <_init>
 800b24c:	1b64      	subs	r4, r4, r5
 800b24e:	10a4      	asrs	r4, r4, #2
 800b250:	2600      	movs	r6, #0
 800b252:	42a6      	cmp	r6, r4
 800b254:	d105      	bne.n	800b262 <__libc_init_array+0x2e>
 800b256:	bd70      	pop	{r4, r5, r6, pc}
 800b258:	f855 3b04 	ldr.w	r3, [r5], #4
 800b25c:	4798      	blx	r3
 800b25e:	3601      	adds	r6, #1
 800b260:	e7ee      	b.n	800b240 <__libc_init_array+0xc>
 800b262:	f855 3b04 	ldr.w	r3, [r5], #4
 800b266:	4798      	blx	r3
 800b268:	3601      	adds	r6, #1
 800b26a:	e7f2      	b.n	800b252 <__libc_init_array+0x1e>
 800b26c:	080105f4 	.word	0x080105f4
 800b270:	080105f4 	.word	0x080105f4
 800b274:	080105f4 	.word	0x080105f4
 800b278:	080105f8 	.word	0x080105f8

0800b27c <__retarget_lock_init_recursive>:
 800b27c:	4770      	bx	lr

0800b27e <__retarget_lock_acquire_recursive>:
 800b27e:	4770      	bx	lr

0800b280 <__retarget_lock_release_recursive>:
 800b280:	4770      	bx	lr

0800b282 <memcpy>:
 800b282:	440a      	add	r2, r1
 800b284:	4291      	cmp	r1, r2
 800b286:	f100 33ff 	add.w	r3, r0, #4294967295
 800b28a:	d100      	bne.n	800b28e <memcpy+0xc>
 800b28c:	4770      	bx	lr
 800b28e:	b510      	push	{r4, lr}
 800b290:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b294:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b298:	4291      	cmp	r1, r2
 800b29a:	d1f9      	bne.n	800b290 <memcpy+0xe>
 800b29c:	bd10      	pop	{r4, pc}

0800b29e <quorem>:
 800b29e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a2:	6903      	ldr	r3, [r0, #16]
 800b2a4:	690c      	ldr	r4, [r1, #16]
 800b2a6:	42a3      	cmp	r3, r4
 800b2a8:	4607      	mov	r7, r0
 800b2aa:	db7e      	blt.n	800b3aa <quorem+0x10c>
 800b2ac:	3c01      	subs	r4, #1
 800b2ae:	f101 0814 	add.w	r8, r1, #20
 800b2b2:	f100 0514 	add.w	r5, r0, #20
 800b2b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2ba:	9301      	str	r3, [sp, #4]
 800b2bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b2c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b2cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b2d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b2d4:	d331      	bcc.n	800b33a <quorem+0x9c>
 800b2d6:	f04f 0e00 	mov.w	lr, #0
 800b2da:	4640      	mov	r0, r8
 800b2dc:	46ac      	mov	ip, r5
 800b2de:	46f2      	mov	sl, lr
 800b2e0:	f850 2b04 	ldr.w	r2, [r0], #4
 800b2e4:	b293      	uxth	r3, r2
 800b2e6:	fb06 e303 	mla	r3, r6, r3, lr
 800b2ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b2ee:	0c1a      	lsrs	r2, r3, #16
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	ebaa 0303 	sub.w	r3, sl, r3
 800b2f6:	f8dc a000 	ldr.w	sl, [ip]
 800b2fa:	fa13 f38a 	uxtah	r3, r3, sl
 800b2fe:	fb06 220e 	mla	r2, r6, lr, r2
 800b302:	9300      	str	r3, [sp, #0]
 800b304:	9b00      	ldr	r3, [sp, #0]
 800b306:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b30a:	b292      	uxth	r2, r2
 800b30c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b310:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b314:	f8bd 3000 	ldrh.w	r3, [sp]
 800b318:	4581      	cmp	r9, r0
 800b31a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b31e:	f84c 3b04 	str.w	r3, [ip], #4
 800b322:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b326:	d2db      	bcs.n	800b2e0 <quorem+0x42>
 800b328:	f855 300b 	ldr.w	r3, [r5, fp]
 800b32c:	b92b      	cbnz	r3, 800b33a <quorem+0x9c>
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	3b04      	subs	r3, #4
 800b332:	429d      	cmp	r5, r3
 800b334:	461a      	mov	r2, r3
 800b336:	d32c      	bcc.n	800b392 <quorem+0xf4>
 800b338:	613c      	str	r4, [r7, #16]
 800b33a:	4638      	mov	r0, r7
 800b33c:	f001 f9a6 	bl	800c68c <__mcmp>
 800b340:	2800      	cmp	r0, #0
 800b342:	db22      	blt.n	800b38a <quorem+0xec>
 800b344:	3601      	adds	r6, #1
 800b346:	4629      	mov	r1, r5
 800b348:	2000      	movs	r0, #0
 800b34a:	f858 2b04 	ldr.w	r2, [r8], #4
 800b34e:	f8d1 c000 	ldr.w	ip, [r1]
 800b352:	b293      	uxth	r3, r2
 800b354:	1ac3      	subs	r3, r0, r3
 800b356:	0c12      	lsrs	r2, r2, #16
 800b358:	fa13 f38c 	uxtah	r3, r3, ip
 800b35c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b360:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b364:	b29b      	uxth	r3, r3
 800b366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b36a:	45c1      	cmp	r9, r8
 800b36c:	f841 3b04 	str.w	r3, [r1], #4
 800b370:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b374:	d2e9      	bcs.n	800b34a <quorem+0xac>
 800b376:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b37a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b37e:	b922      	cbnz	r2, 800b38a <quorem+0xec>
 800b380:	3b04      	subs	r3, #4
 800b382:	429d      	cmp	r5, r3
 800b384:	461a      	mov	r2, r3
 800b386:	d30a      	bcc.n	800b39e <quorem+0x100>
 800b388:	613c      	str	r4, [r7, #16]
 800b38a:	4630      	mov	r0, r6
 800b38c:	b003      	add	sp, #12
 800b38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b392:	6812      	ldr	r2, [r2, #0]
 800b394:	3b04      	subs	r3, #4
 800b396:	2a00      	cmp	r2, #0
 800b398:	d1ce      	bne.n	800b338 <quorem+0x9a>
 800b39a:	3c01      	subs	r4, #1
 800b39c:	e7c9      	b.n	800b332 <quorem+0x94>
 800b39e:	6812      	ldr	r2, [r2, #0]
 800b3a0:	3b04      	subs	r3, #4
 800b3a2:	2a00      	cmp	r2, #0
 800b3a4:	d1f0      	bne.n	800b388 <quorem+0xea>
 800b3a6:	3c01      	subs	r4, #1
 800b3a8:	e7eb      	b.n	800b382 <quorem+0xe4>
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	e7ee      	b.n	800b38c <quorem+0xee>
	...

0800b3b0 <_dtoa_r>:
 800b3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b4:	ed2d 8b04 	vpush	{d8-d9}
 800b3b8:	69c5      	ldr	r5, [r0, #28]
 800b3ba:	b093      	sub	sp, #76	; 0x4c
 800b3bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b3c0:	ec57 6b10 	vmov	r6, r7, d0
 800b3c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b3c8:	9107      	str	r1, [sp, #28]
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	920a      	str	r2, [sp, #40]	; 0x28
 800b3ce:	930d      	str	r3, [sp, #52]	; 0x34
 800b3d0:	b975      	cbnz	r5, 800b3f0 <_dtoa_r+0x40>
 800b3d2:	2010      	movs	r0, #16
 800b3d4:	f000 fe2a 	bl	800c02c <malloc>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	61e0      	str	r0, [r4, #28]
 800b3dc:	b920      	cbnz	r0, 800b3e8 <_dtoa_r+0x38>
 800b3de:	4bae      	ldr	r3, [pc, #696]	; (800b698 <_dtoa_r+0x2e8>)
 800b3e0:	21ef      	movs	r1, #239	; 0xef
 800b3e2:	48ae      	ldr	r0, [pc, #696]	; (800b69c <_dtoa_r+0x2ec>)
 800b3e4:	f001 fc68 	bl	800ccb8 <__assert_func>
 800b3e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b3ec:	6005      	str	r5, [r0, #0]
 800b3ee:	60c5      	str	r5, [r0, #12]
 800b3f0:	69e3      	ldr	r3, [r4, #28]
 800b3f2:	6819      	ldr	r1, [r3, #0]
 800b3f4:	b151      	cbz	r1, 800b40c <_dtoa_r+0x5c>
 800b3f6:	685a      	ldr	r2, [r3, #4]
 800b3f8:	604a      	str	r2, [r1, #4]
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	4093      	lsls	r3, r2
 800b3fe:	608b      	str	r3, [r1, #8]
 800b400:	4620      	mov	r0, r4
 800b402:	f000 ff07 	bl	800c214 <_Bfree>
 800b406:	69e3      	ldr	r3, [r4, #28]
 800b408:	2200      	movs	r2, #0
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	1e3b      	subs	r3, r7, #0
 800b40e:	bfbb      	ittet	lt
 800b410:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b414:	9303      	strlt	r3, [sp, #12]
 800b416:	2300      	movge	r3, #0
 800b418:	2201      	movlt	r2, #1
 800b41a:	bfac      	ite	ge
 800b41c:	f8c8 3000 	strge.w	r3, [r8]
 800b420:	f8c8 2000 	strlt.w	r2, [r8]
 800b424:	4b9e      	ldr	r3, [pc, #632]	; (800b6a0 <_dtoa_r+0x2f0>)
 800b426:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b42a:	ea33 0308 	bics.w	r3, r3, r8
 800b42e:	d11b      	bne.n	800b468 <_dtoa_r+0xb8>
 800b430:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b432:	f242 730f 	movw	r3, #9999	; 0x270f
 800b436:	6013      	str	r3, [r2, #0]
 800b438:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b43c:	4333      	orrs	r3, r6
 800b43e:	f000 8593 	beq.w	800bf68 <_dtoa_r+0xbb8>
 800b442:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b444:	b963      	cbnz	r3, 800b460 <_dtoa_r+0xb0>
 800b446:	4b97      	ldr	r3, [pc, #604]	; (800b6a4 <_dtoa_r+0x2f4>)
 800b448:	e027      	b.n	800b49a <_dtoa_r+0xea>
 800b44a:	4b97      	ldr	r3, [pc, #604]	; (800b6a8 <_dtoa_r+0x2f8>)
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	3308      	adds	r3, #8
 800b450:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b452:	6013      	str	r3, [r2, #0]
 800b454:	9800      	ldr	r0, [sp, #0]
 800b456:	b013      	add	sp, #76	; 0x4c
 800b458:	ecbd 8b04 	vpop	{d8-d9}
 800b45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b460:	4b90      	ldr	r3, [pc, #576]	; (800b6a4 <_dtoa_r+0x2f4>)
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	3303      	adds	r3, #3
 800b466:	e7f3      	b.n	800b450 <_dtoa_r+0xa0>
 800b468:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b46c:	2200      	movs	r2, #0
 800b46e:	ec51 0b17 	vmov	r0, r1, d7
 800b472:	eeb0 8a47 	vmov.f32	s16, s14
 800b476:	eef0 8a67 	vmov.f32	s17, s15
 800b47a:	2300      	movs	r3, #0
 800b47c:	f7f5 fb2c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b480:	4681      	mov	r9, r0
 800b482:	b160      	cbz	r0, 800b49e <_dtoa_r+0xee>
 800b484:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b486:	2301      	movs	r3, #1
 800b488:	6013      	str	r3, [r2, #0]
 800b48a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 8568 	beq.w	800bf62 <_dtoa_r+0xbb2>
 800b492:	4b86      	ldr	r3, [pc, #536]	; (800b6ac <_dtoa_r+0x2fc>)
 800b494:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b496:	6013      	str	r3, [r2, #0]
 800b498:	3b01      	subs	r3, #1
 800b49a:	9300      	str	r3, [sp, #0]
 800b49c:	e7da      	b.n	800b454 <_dtoa_r+0xa4>
 800b49e:	aa10      	add	r2, sp, #64	; 0x40
 800b4a0:	a911      	add	r1, sp, #68	; 0x44
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	eeb0 0a48 	vmov.f32	s0, s16
 800b4a8:	eef0 0a68 	vmov.f32	s1, s17
 800b4ac:	f001 f994 	bl	800c7d8 <__d2b>
 800b4b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b4b4:	4682      	mov	sl, r0
 800b4b6:	2d00      	cmp	r5, #0
 800b4b8:	d07f      	beq.n	800b5ba <_dtoa_r+0x20a>
 800b4ba:	ee18 3a90 	vmov	r3, s17
 800b4be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b4c6:	ec51 0b18 	vmov	r0, r1, d8
 800b4ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b4ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b4d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	2200      	movs	r2, #0
 800b4da:	4b75      	ldr	r3, [pc, #468]	; (800b6b0 <_dtoa_r+0x300>)
 800b4dc:	f7f4 fedc 	bl	8000298 <__aeabi_dsub>
 800b4e0:	a367      	add	r3, pc, #412	; (adr r3, 800b680 <_dtoa_r+0x2d0>)
 800b4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e6:	f7f5 f88f 	bl	8000608 <__aeabi_dmul>
 800b4ea:	a367      	add	r3, pc, #412	; (adr r3, 800b688 <_dtoa_r+0x2d8>)
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	f7f4 fed4 	bl	800029c <__adddf3>
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	460f      	mov	r7, r1
 800b4fa:	f7f5 f81b 	bl	8000534 <__aeabi_i2d>
 800b4fe:	a364      	add	r3, pc, #400	; (adr r3, 800b690 <_dtoa_r+0x2e0>)
 800b500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b504:	f7f5 f880 	bl	8000608 <__aeabi_dmul>
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	4630      	mov	r0, r6
 800b50e:	4639      	mov	r1, r7
 800b510:	f7f4 fec4 	bl	800029c <__adddf3>
 800b514:	4606      	mov	r6, r0
 800b516:	460f      	mov	r7, r1
 800b518:	f7f5 fb26 	bl	8000b68 <__aeabi_d2iz>
 800b51c:	2200      	movs	r2, #0
 800b51e:	4683      	mov	fp, r0
 800b520:	2300      	movs	r3, #0
 800b522:	4630      	mov	r0, r6
 800b524:	4639      	mov	r1, r7
 800b526:	f7f5 fae1 	bl	8000aec <__aeabi_dcmplt>
 800b52a:	b148      	cbz	r0, 800b540 <_dtoa_r+0x190>
 800b52c:	4658      	mov	r0, fp
 800b52e:	f7f5 f801 	bl	8000534 <__aeabi_i2d>
 800b532:	4632      	mov	r2, r6
 800b534:	463b      	mov	r3, r7
 800b536:	f7f5 facf 	bl	8000ad8 <__aeabi_dcmpeq>
 800b53a:	b908      	cbnz	r0, 800b540 <_dtoa_r+0x190>
 800b53c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b540:	f1bb 0f16 	cmp.w	fp, #22
 800b544:	d857      	bhi.n	800b5f6 <_dtoa_r+0x246>
 800b546:	4b5b      	ldr	r3, [pc, #364]	; (800b6b4 <_dtoa_r+0x304>)
 800b548:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	ec51 0b18 	vmov	r0, r1, d8
 800b554:	f7f5 faca 	bl	8000aec <__aeabi_dcmplt>
 800b558:	2800      	cmp	r0, #0
 800b55a:	d04e      	beq.n	800b5fa <_dtoa_r+0x24a>
 800b55c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b560:	2300      	movs	r3, #0
 800b562:	930c      	str	r3, [sp, #48]	; 0x30
 800b564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b566:	1b5b      	subs	r3, r3, r5
 800b568:	1e5a      	subs	r2, r3, #1
 800b56a:	bf45      	ittet	mi
 800b56c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b570:	9305      	strmi	r3, [sp, #20]
 800b572:	2300      	movpl	r3, #0
 800b574:	2300      	movmi	r3, #0
 800b576:	9206      	str	r2, [sp, #24]
 800b578:	bf54      	ite	pl
 800b57a:	9305      	strpl	r3, [sp, #20]
 800b57c:	9306      	strmi	r3, [sp, #24]
 800b57e:	f1bb 0f00 	cmp.w	fp, #0
 800b582:	db3c      	blt.n	800b5fe <_dtoa_r+0x24e>
 800b584:	9b06      	ldr	r3, [sp, #24]
 800b586:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b58a:	445b      	add	r3, fp
 800b58c:	9306      	str	r3, [sp, #24]
 800b58e:	2300      	movs	r3, #0
 800b590:	9308      	str	r3, [sp, #32]
 800b592:	9b07      	ldr	r3, [sp, #28]
 800b594:	2b09      	cmp	r3, #9
 800b596:	d868      	bhi.n	800b66a <_dtoa_r+0x2ba>
 800b598:	2b05      	cmp	r3, #5
 800b59a:	bfc4      	itt	gt
 800b59c:	3b04      	subgt	r3, #4
 800b59e:	9307      	strgt	r3, [sp, #28]
 800b5a0:	9b07      	ldr	r3, [sp, #28]
 800b5a2:	f1a3 0302 	sub.w	r3, r3, #2
 800b5a6:	bfcc      	ite	gt
 800b5a8:	2500      	movgt	r5, #0
 800b5aa:	2501      	movle	r5, #1
 800b5ac:	2b03      	cmp	r3, #3
 800b5ae:	f200 8085 	bhi.w	800b6bc <_dtoa_r+0x30c>
 800b5b2:	e8df f003 	tbb	[pc, r3]
 800b5b6:	3b2e      	.short	0x3b2e
 800b5b8:	5839      	.short	0x5839
 800b5ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b5be:	441d      	add	r5, r3
 800b5c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b5c4:	2b20      	cmp	r3, #32
 800b5c6:	bfc1      	itttt	gt
 800b5c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b5cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800b5d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b5d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b5d8:	bfd6      	itet	le
 800b5da:	f1c3 0320 	rsble	r3, r3, #32
 800b5de:	ea48 0003 	orrgt.w	r0, r8, r3
 800b5e2:	fa06 f003 	lslle.w	r0, r6, r3
 800b5e6:	f7f4 ff95 	bl	8000514 <__aeabi_ui2d>
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b5f0:	3d01      	subs	r5, #1
 800b5f2:	920e      	str	r2, [sp, #56]	; 0x38
 800b5f4:	e76f      	b.n	800b4d6 <_dtoa_r+0x126>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e7b3      	b.n	800b562 <_dtoa_r+0x1b2>
 800b5fa:	900c      	str	r0, [sp, #48]	; 0x30
 800b5fc:	e7b2      	b.n	800b564 <_dtoa_r+0x1b4>
 800b5fe:	9b05      	ldr	r3, [sp, #20]
 800b600:	eba3 030b 	sub.w	r3, r3, fp
 800b604:	9305      	str	r3, [sp, #20]
 800b606:	f1cb 0300 	rsb	r3, fp, #0
 800b60a:	9308      	str	r3, [sp, #32]
 800b60c:	2300      	movs	r3, #0
 800b60e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b610:	e7bf      	b.n	800b592 <_dtoa_r+0x1e2>
 800b612:	2300      	movs	r3, #0
 800b614:	9309      	str	r3, [sp, #36]	; 0x24
 800b616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b618:	2b00      	cmp	r3, #0
 800b61a:	dc52      	bgt.n	800b6c2 <_dtoa_r+0x312>
 800b61c:	2301      	movs	r3, #1
 800b61e:	9301      	str	r3, [sp, #4]
 800b620:	9304      	str	r3, [sp, #16]
 800b622:	461a      	mov	r2, r3
 800b624:	920a      	str	r2, [sp, #40]	; 0x28
 800b626:	e00b      	b.n	800b640 <_dtoa_r+0x290>
 800b628:	2301      	movs	r3, #1
 800b62a:	e7f3      	b.n	800b614 <_dtoa_r+0x264>
 800b62c:	2300      	movs	r3, #0
 800b62e:	9309      	str	r3, [sp, #36]	; 0x24
 800b630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b632:	445b      	add	r3, fp
 800b634:	9301      	str	r3, [sp, #4]
 800b636:	3301      	adds	r3, #1
 800b638:	2b01      	cmp	r3, #1
 800b63a:	9304      	str	r3, [sp, #16]
 800b63c:	bfb8      	it	lt
 800b63e:	2301      	movlt	r3, #1
 800b640:	69e0      	ldr	r0, [r4, #28]
 800b642:	2100      	movs	r1, #0
 800b644:	2204      	movs	r2, #4
 800b646:	f102 0614 	add.w	r6, r2, #20
 800b64a:	429e      	cmp	r6, r3
 800b64c:	d93d      	bls.n	800b6ca <_dtoa_r+0x31a>
 800b64e:	6041      	str	r1, [r0, #4]
 800b650:	4620      	mov	r0, r4
 800b652:	f000 fd9f 	bl	800c194 <_Balloc>
 800b656:	9000      	str	r0, [sp, #0]
 800b658:	2800      	cmp	r0, #0
 800b65a:	d139      	bne.n	800b6d0 <_dtoa_r+0x320>
 800b65c:	4b16      	ldr	r3, [pc, #88]	; (800b6b8 <_dtoa_r+0x308>)
 800b65e:	4602      	mov	r2, r0
 800b660:	f240 11af 	movw	r1, #431	; 0x1af
 800b664:	e6bd      	b.n	800b3e2 <_dtoa_r+0x32>
 800b666:	2301      	movs	r3, #1
 800b668:	e7e1      	b.n	800b62e <_dtoa_r+0x27e>
 800b66a:	2501      	movs	r5, #1
 800b66c:	2300      	movs	r3, #0
 800b66e:	9307      	str	r3, [sp, #28]
 800b670:	9509      	str	r5, [sp, #36]	; 0x24
 800b672:	f04f 33ff 	mov.w	r3, #4294967295
 800b676:	9301      	str	r3, [sp, #4]
 800b678:	9304      	str	r3, [sp, #16]
 800b67a:	2200      	movs	r2, #0
 800b67c:	2312      	movs	r3, #18
 800b67e:	e7d1      	b.n	800b624 <_dtoa_r+0x274>
 800b680:	636f4361 	.word	0x636f4361
 800b684:	3fd287a7 	.word	0x3fd287a7
 800b688:	8b60c8b3 	.word	0x8b60c8b3
 800b68c:	3fc68a28 	.word	0x3fc68a28
 800b690:	509f79fb 	.word	0x509f79fb
 800b694:	3fd34413 	.word	0x3fd34413
 800b698:	080102bd 	.word	0x080102bd
 800b69c:	080102d4 	.word	0x080102d4
 800b6a0:	7ff00000 	.word	0x7ff00000
 800b6a4:	080102b9 	.word	0x080102b9
 800b6a8:	080102b0 	.word	0x080102b0
 800b6ac:	0801028d 	.word	0x0801028d
 800b6b0:	3ff80000 	.word	0x3ff80000
 800b6b4:	080103c0 	.word	0x080103c0
 800b6b8:	0801032c 	.word	0x0801032c
 800b6bc:	2301      	movs	r3, #1
 800b6be:	9309      	str	r3, [sp, #36]	; 0x24
 800b6c0:	e7d7      	b.n	800b672 <_dtoa_r+0x2c2>
 800b6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6c4:	9301      	str	r3, [sp, #4]
 800b6c6:	9304      	str	r3, [sp, #16]
 800b6c8:	e7ba      	b.n	800b640 <_dtoa_r+0x290>
 800b6ca:	3101      	adds	r1, #1
 800b6cc:	0052      	lsls	r2, r2, #1
 800b6ce:	e7ba      	b.n	800b646 <_dtoa_r+0x296>
 800b6d0:	69e3      	ldr	r3, [r4, #28]
 800b6d2:	9a00      	ldr	r2, [sp, #0]
 800b6d4:	601a      	str	r2, [r3, #0]
 800b6d6:	9b04      	ldr	r3, [sp, #16]
 800b6d8:	2b0e      	cmp	r3, #14
 800b6da:	f200 80a8 	bhi.w	800b82e <_dtoa_r+0x47e>
 800b6de:	2d00      	cmp	r5, #0
 800b6e0:	f000 80a5 	beq.w	800b82e <_dtoa_r+0x47e>
 800b6e4:	f1bb 0f00 	cmp.w	fp, #0
 800b6e8:	dd38      	ble.n	800b75c <_dtoa_r+0x3ac>
 800b6ea:	4bc0      	ldr	r3, [pc, #768]	; (800b9ec <_dtoa_r+0x63c>)
 800b6ec:	f00b 020f 	and.w	r2, fp, #15
 800b6f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b6f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b6fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b700:	d019      	beq.n	800b736 <_dtoa_r+0x386>
 800b702:	4bbb      	ldr	r3, [pc, #748]	; (800b9f0 <_dtoa_r+0x640>)
 800b704:	ec51 0b18 	vmov	r0, r1, d8
 800b708:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b70c:	f7f5 f8a6 	bl	800085c <__aeabi_ddiv>
 800b710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b714:	f008 080f 	and.w	r8, r8, #15
 800b718:	2503      	movs	r5, #3
 800b71a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b9f0 <_dtoa_r+0x640>
 800b71e:	f1b8 0f00 	cmp.w	r8, #0
 800b722:	d10a      	bne.n	800b73a <_dtoa_r+0x38a>
 800b724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b728:	4632      	mov	r2, r6
 800b72a:	463b      	mov	r3, r7
 800b72c:	f7f5 f896 	bl	800085c <__aeabi_ddiv>
 800b730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b734:	e02b      	b.n	800b78e <_dtoa_r+0x3de>
 800b736:	2502      	movs	r5, #2
 800b738:	e7ef      	b.n	800b71a <_dtoa_r+0x36a>
 800b73a:	f018 0f01 	tst.w	r8, #1
 800b73e:	d008      	beq.n	800b752 <_dtoa_r+0x3a2>
 800b740:	4630      	mov	r0, r6
 800b742:	4639      	mov	r1, r7
 800b744:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b748:	f7f4 ff5e 	bl	8000608 <__aeabi_dmul>
 800b74c:	3501      	adds	r5, #1
 800b74e:	4606      	mov	r6, r0
 800b750:	460f      	mov	r7, r1
 800b752:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b756:	f109 0908 	add.w	r9, r9, #8
 800b75a:	e7e0      	b.n	800b71e <_dtoa_r+0x36e>
 800b75c:	f000 809f 	beq.w	800b89e <_dtoa_r+0x4ee>
 800b760:	f1cb 0600 	rsb	r6, fp, #0
 800b764:	4ba1      	ldr	r3, [pc, #644]	; (800b9ec <_dtoa_r+0x63c>)
 800b766:	4fa2      	ldr	r7, [pc, #648]	; (800b9f0 <_dtoa_r+0x640>)
 800b768:	f006 020f 	and.w	r2, r6, #15
 800b76c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b774:	ec51 0b18 	vmov	r0, r1, d8
 800b778:	f7f4 ff46 	bl	8000608 <__aeabi_dmul>
 800b77c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b780:	1136      	asrs	r6, r6, #4
 800b782:	2300      	movs	r3, #0
 800b784:	2502      	movs	r5, #2
 800b786:	2e00      	cmp	r6, #0
 800b788:	d17e      	bne.n	800b888 <_dtoa_r+0x4d8>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1d0      	bne.n	800b730 <_dtoa_r+0x380>
 800b78e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b790:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 8084 	beq.w	800b8a2 <_dtoa_r+0x4f2>
 800b79a:	4b96      	ldr	r3, [pc, #600]	; (800b9f4 <_dtoa_r+0x644>)
 800b79c:	2200      	movs	r2, #0
 800b79e:	4640      	mov	r0, r8
 800b7a0:	4649      	mov	r1, r9
 800b7a2:	f7f5 f9a3 	bl	8000aec <__aeabi_dcmplt>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d07b      	beq.n	800b8a2 <_dtoa_r+0x4f2>
 800b7aa:	9b04      	ldr	r3, [sp, #16]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d078      	beq.n	800b8a2 <_dtoa_r+0x4f2>
 800b7b0:	9b01      	ldr	r3, [sp, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	dd39      	ble.n	800b82a <_dtoa_r+0x47a>
 800b7b6:	4b90      	ldr	r3, [pc, #576]	; (800b9f8 <_dtoa_r+0x648>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	4640      	mov	r0, r8
 800b7bc:	4649      	mov	r1, r9
 800b7be:	f7f4 ff23 	bl	8000608 <__aeabi_dmul>
 800b7c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7c6:	9e01      	ldr	r6, [sp, #4]
 800b7c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b7cc:	3501      	adds	r5, #1
 800b7ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	f7f4 feae 	bl	8000534 <__aeabi_i2d>
 800b7d8:	4642      	mov	r2, r8
 800b7da:	464b      	mov	r3, r9
 800b7dc:	f7f4 ff14 	bl	8000608 <__aeabi_dmul>
 800b7e0:	4b86      	ldr	r3, [pc, #536]	; (800b9fc <_dtoa_r+0x64c>)
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f7f4 fd5a 	bl	800029c <__adddf3>
 800b7e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b7ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7f0:	9303      	str	r3, [sp, #12]
 800b7f2:	2e00      	cmp	r6, #0
 800b7f4:	d158      	bne.n	800b8a8 <_dtoa_r+0x4f8>
 800b7f6:	4b82      	ldr	r3, [pc, #520]	; (800ba00 <_dtoa_r+0x650>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	f7f4 fd4b 	bl	8000298 <__aeabi_dsub>
 800b802:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b806:	4680      	mov	r8, r0
 800b808:	4689      	mov	r9, r1
 800b80a:	f7f5 f98d 	bl	8000b28 <__aeabi_dcmpgt>
 800b80e:	2800      	cmp	r0, #0
 800b810:	f040 8296 	bne.w	800bd40 <_dtoa_r+0x990>
 800b814:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b818:	4640      	mov	r0, r8
 800b81a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b81e:	4649      	mov	r1, r9
 800b820:	f7f5 f964 	bl	8000aec <__aeabi_dcmplt>
 800b824:	2800      	cmp	r0, #0
 800b826:	f040 8289 	bne.w	800bd3c <_dtoa_r+0x98c>
 800b82a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b82e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b830:	2b00      	cmp	r3, #0
 800b832:	f2c0 814e 	blt.w	800bad2 <_dtoa_r+0x722>
 800b836:	f1bb 0f0e 	cmp.w	fp, #14
 800b83a:	f300 814a 	bgt.w	800bad2 <_dtoa_r+0x722>
 800b83e:	4b6b      	ldr	r3, [pc, #428]	; (800b9ec <_dtoa_r+0x63c>)
 800b840:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b844:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f280 80dc 	bge.w	800ba08 <_dtoa_r+0x658>
 800b850:	9b04      	ldr	r3, [sp, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	f300 80d8 	bgt.w	800ba08 <_dtoa_r+0x658>
 800b858:	f040 826f 	bne.w	800bd3a <_dtoa_r+0x98a>
 800b85c:	4b68      	ldr	r3, [pc, #416]	; (800ba00 <_dtoa_r+0x650>)
 800b85e:	2200      	movs	r2, #0
 800b860:	4640      	mov	r0, r8
 800b862:	4649      	mov	r1, r9
 800b864:	f7f4 fed0 	bl	8000608 <__aeabi_dmul>
 800b868:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b86c:	f7f5 f952 	bl	8000b14 <__aeabi_dcmpge>
 800b870:	9e04      	ldr	r6, [sp, #16]
 800b872:	4637      	mov	r7, r6
 800b874:	2800      	cmp	r0, #0
 800b876:	f040 8245 	bne.w	800bd04 <_dtoa_r+0x954>
 800b87a:	9d00      	ldr	r5, [sp, #0]
 800b87c:	2331      	movs	r3, #49	; 0x31
 800b87e:	f805 3b01 	strb.w	r3, [r5], #1
 800b882:	f10b 0b01 	add.w	fp, fp, #1
 800b886:	e241      	b.n	800bd0c <_dtoa_r+0x95c>
 800b888:	07f2      	lsls	r2, r6, #31
 800b88a:	d505      	bpl.n	800b898 <_dtoa_r+0x4e8>
 800b88c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b890:	f7f4 feba 	bl	8000608 <__aeabi_dmul>
 800b894:	3501      	adds	r5, #1
 800b896:	2301      	movs	r3, #1
 800b898:	1076      	asrs	r6, r6, #1
 800b89a:	3708      	adds	r7, #8
 800b89c:	e773      	b.n	800b786 <_dtoa_r+0x3d6>
 800b89e:	2502      	movs	r5, #2
 800b8a0:	e775      	b.n	800b78e <_dtoa_r+0x3de>
 800b8a2:	9e04      	ldr	r6, [sp, #16]
 800b8a4:	465f      	mov	r7, fp
 800b8a6:	e792      	b.n	800b7ce <_dtoa_r+0x41e>
 800b8a8:	9900      	ldr	r1, [sp, #0]
 800b8aa:	4b50      	ldr	r3, [pc, #320]	; (800b9ec <_dtoa_r+0x63c>)
 800b8ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8b0:	4431      	add	r1, r6
 800b8b2:	9102      	str	r1, [sp, #8]
 800b8b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8b6:	eeb0 9a47 	vmov.f32	s18, s14
 800b8ba:	eef0 9a67 	vmov.f32	s19, s15
 800b8be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b8c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8c6:	2900      	cmp	r1, #0
 800b8c8:	d044      	beq.n	800b954 <_dtoa_r+0x5a4>
 800b8ca:	494e      	ldr	r1, [pc, #312]	; (800ba04 <_dtoa_r+0x654>)
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	f7f4 ffc5 	bl	800085c <__aeabi_ddiv>
 800b8d2:	ec53 2b19 	vmov	r2, r3, d9
 800b8d6:	f7f4 fcdf 	bl	8000298 <__aeabi_dsub>
 800b8da:	9d00      	ldr	r5, [sp, #0]
 800b8dc:	ec41 0b19 	vmov	d9, r0, r1
 800b8e0:	4649      	mov	r1, r9
 800b8e2:	4640      	mov	r0, r8
 800b8e4:	f7f5 f940 	bl	8000b68 <__aeabi_d2iz>
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	f7f4 fe23 	bl	8000534 <__aeabi_i2d>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	4640      	mov	r0, r8
 800b8f4:	4649      	mov	r1, r9
 800b8f6:	f7f4 fccf 	bl	8000298 <__aeabi_dsub>
 800b8fa:	3630      	adds	r6, #48	; 0x30
 800b8fc:	f805 6b01 	strb.w	r6, [r5], #1
 800b900:	ec53 2b19 	vmov	r2, r3, d9
 800b904:	4680      	mov	r8, r0
 800b906:	4689      	mov	r9, r1
 800b908:	f7f5 f8f0 	bl	8000aec <__aeabi_dcmplt>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d164      	bne.n	800b9da <_dtoa_r+0x62a>
 800b910:	4642      	mov	r2, r8
 800b912:	464b      	mov	r3, r9
 800b914:	4937      	ldr	r1, [pc, #220]	; (800b9f4 <_dtoa_r+0x644>)
 800b916:	2000      	movs	r0, #0
 800b918:	f7f4 fcbe 	bl	8000298 <__aeabi_dsub>
 800b91c:	ec53 2b19 	vmov	r2, r3, d9
 800b920:	f7f5 f8e4 	bl	8000aec <__aeabi_dcmplt>
 800b924:	2800      	cmp	r0, #0
 800b926:	f040 80b6 	bne.w	800ba96 <_dtoa_r+0x6e6>
 800b92a:	9b02      	ldr	r3, [sp, #8]
 800b92c:	429d      	cmp	r5, r3
 800b92e:	f43f af7c 	beq.w	800b82a <_dtoa_r+0x47a>
 800b932:	4b31      	ldr	r3, [pc, #196]	; (800b9f8 <_dtoa_r+0x648>)
 800b934:	ec51 0b19 	vmov	r0, r1, d9
 800b938:	2200      	movs	r2, #0
 800b93a:	f7f4 fe65 	bl	8000608 <__aeabi_dmul>
 800b93e:	4b2e      	ldr	r3, [pc, #184]	; (800b9f8 <_dtoa_r+0x648>)
 800b940:	ec41 0b19 	vmov	d9, r0, r1
 800b944:	2200      	movs	r2, #0
 800b946:	4640      	mov	r0, r8
 800b948:	4649      	mov	r1, r9
 800b94a:	f7f4 fe5d 	bl	8000608 <__aeabi_dmul>
 800b94e:	4680      	mov	r8, r0
 800b950:	4689      	mov	r9, r1
 800b952:	e7c5      	b.n	800b8e0 <_dtoa_r+0x530>
 800b954:	ec51 0b17 	vmov	r0, r1, d7
 800b958:	f7f4 fe56 	bl	8000608 <__aeabi_dmul>
 800b95c:	9b02      	ldr	r3, [sp, #8]
 800b95e:	9d00      	ldr	r5, [sp, #0]
 800b960:	930f      	str	r3, [sp, #60]	; 0x3c
 800b962:	ec41 0b19 	vmov	d9, r0, r1
 800b966:	4649      	mov	r1, r9
 800b968:	4640      	mov	r0, r8
 800b96a:	f7f5 f8fd 	bl	8000b68 <__aeabi_d2iz>
 800b96e:	4606      	mov	r6, r0
 800b970:	f7f4 fde0 	bl	8000534 <__aeabi_i2d>
 800b974:	3630      	adds	r6, #48	; 0x30
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	4640      	mov	r0, r8
 800b97c:	4649      	mov	r1, r9
 800b97e:	f7f4 fc8b 	bl	8000298 <__aeabi_dsub>
 800b982:	f805 6b01 	strb.w	r6, [r5], #1
 800b986:	9b02      	ldr	r3, [sp, #8]
 800b988:	429d      	cmp	r5, r3
 800b98a:	4680      	mov	r8, r0
 800b98c:	4689      	mov	r9, r1
 800b98e:	f04f 0200 	mov.w	r2, #0
 800b992:	d124      	bne.n	800b9de <_dtoa_r+0x62e>
 800b994:	4b1b      	ldr	r3, [pc, #108]	; (800ba04 <_dtoa_r+0x654>)
 800b996:	ec51 0b19 	vmov	r0, r1, d9
 800b99a:	f7f4 fc7f 	bl	800029c <__adddf3>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	f7f5 f8bf 	bl	8000b28 <__aeabi_dcmpgt>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d173      	bne.n	800ba96 <_dtoa_r+0x6e6>
 800b9ae:	ec53 2b19 	vmov	r2, r3, d9
 800b9b2:	4914      	ldr	r1, [pc, #80]	; (800ba04 <_dtoa_r+0x654>)
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	f7f4 fc6f 	bl	8000298 <__aeabi_dsub>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	460b      	mov	r3, r1
 800b9be:	4640      	mov	r0, r8
 800b9c0:	4649      	mov	r1, r9
 800b9c2:	f7f5 f893 	bl	8000aec <__aeabi_dcmplt>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	f43f af2f 	beq.w	800b82a <_dtoa_r+0x47a>
 800b9cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b9ce:	1e6b      	subs	r3, r5, #1
 800b9d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b9d6:	2b30      	cmp	r3, #48	; 0x30
 800b9d8:	d0f8      	beq.n	800b9cc <_dtoa_r+0x61c>
 800b9da:	46bb      	mov	fp, r7
 800b9dc:	e04a      	b.n	800ba74 <_dtoa_r+0x6c4>
 800b9de:	4b06      	ldr	r3, [pc, #24]	; (800b9f8 <_dtoa_r+0x648>)
 800b9e0:	f7f4 fe12 	bl	8000608 <__aeabi_dmul>
 800b9e4:	4680      	mov	r8, r0
 800b9e6:	4689      	mov	r9, r1
 800b9e8:	e7bd      	b.n	800b966 <_dtoa_r+0x5b6>
 800b9ea:	bf00      	nop
 800b9ec:	080103c0 	.word	0x080103c0
 800b9f0:	08010398 	.word	0x08010398
 800b9f4:	3ff00000 	.word	0x3ff00000
 800b9f8:	40240000 	.word	0x40240000
 800b9fc:	401c0000 	.word	0x401c0000
 800ba00:	40140000 	.word	0x40140000
 800ba04:	3fe00000 	.word	0x3fe00000
 800ba08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ba0c:	9d00      	ldr	r5, [sp, #0]
 800ba0e:	4642      	mov	r2, r8
 800ba10:	464b      	mov	r3, r9
 800ba12:	4630      	mov	r0, r6
 800ba14:	4639      	mov	r1, r7
 800ba16:	f7f4 ff21 	bl	800085c <__aeabi_ddiv>
 800ba1a:	f7f5 f8a5 	bl	8000b68 <__aeabi_d2iz>
 800ba1e:	9001      	str	r0, [sp, #4]
 800ba20:	f7f4 fd88 	bl	8000534 <__aeabi_i2d>
 800ba24:	4642      	mov	r2, r8
 800ba26:	464b      	mov	r3, r9
 800ba28:	f7f4 fdee 	bl	8000608 <__aeabi_dmul>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	460b      	mov	r3, r1
 800ba30:	4630      	mov	r0, r6
 800ba32:	4639      	mov	r1, r7
 800ba34:	f7f4 fc30 	bl	8000298 <__aeabi_dsub>
 800ba38:	9e01      	ldr	r6, [sp, #4]
 800ba3a:	9f04      	ldr	r7, [sp, #16]
 800ba3c:	3630      	adds	r6, #48	; 0x30
 800ba3e:	f805 6b01 	strb.w	r6, [r5], #1
 800ba42:	9e00      	ldr	r6, [sp, #0]
 800ba44:	1bae      	subs	r6, r5, r6
 800ba46:	42b7      	cmp	r7, r6
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	d134      	bne.n	800bab8 <_dtoa_r+0x708>
 800ba4e:	f7f4 fc25 	bl	800029c <__adddf3>
 800ba52:	4642      	mov	r2, r8
 800ba54:	464b      	mov	r3, r9
 800ba56:	4606      	mov	r6, r0
 800ba58:	460f      	mov	r7, r1
 800ba5a:	f7f5 f865 	bl	8000b28 <__aeabi_dcmpgt>
 800ba5e:	b9c8      	cbnz	r0, 800ba94 <_dtoa_r+0x6e4>
 800ba60:	4642      	mov	r2, r8
 800ba62:	464b      	mov	r3, r9
 800ba64:	4630      	mov	r0, r6
 800ba66:	4639      	mov	r1, r7
 800ba68:	f7f5 f836 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba6c:	b110      	cbz	r0, 800ba74 <_dtoa_r+0x6c4>
 800ba6e:	9b01      	ldr	r3, [sp, #4]
 800ba70:	07db      	lsls	r3, r3, #31
 800ba72:	d40f      	bmi.n	800ba94 <_dtoa_r+0x6e4>
 800ba74:	4651      	mov	r1, sl
 800ba76:	4620      	mov	r0, r4
 800ba78:	f000 fbcc 	bl	800c214 <_Bfree>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba80:	702b      	strb	r3, [r5, #0]
 800ba82:	f10b 0301 	add.w	r3, fp, #1
 800ba86:	6013      	str	r3, [r2, #0]
 800ba88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f43f ace2 	beq.w	800b454 <_dtoa_r+0xa4>
 800ba90:	601d      	str	r5, [r3, #0]
 800ba92:	e4df      	b.n	800b454 <_dtoa_r+0xa4>
 800ba94:	465f      	mov	r7, fp
 800ba96:	462b      	mov	r3, r5
 800ba98:	461d      	mov	r5, r3
 800ba9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba9e:	2a39      	cmp	r2, #57	; 0x39
 800baa0:	d106      	bne.n	800bab0 <_dtoa_r+0x700>
 800baa2:	9a00      	ldr	r2, [sp, #0]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d1f7      	bne.n	800ba98 <_dtoa_r+0x6e8>
 800baa8:	9900      	ldr	r1, [sp, #0]
 800baaa:	2230      	movs	r2, #48	; 0x30
 800baac:	3701      	adds	r7, #1
 800baae:	700a      	strb	r2, [r1, #0]
 800bab0:	781a      	ldrb	r2, [r3, #0]
 800bab2:	3201      	adds	r2, #1
 800bab4:	701a      	strb	r2, [r3, #0]
 800bab6:	e790      	b.n	800b9da <_dtoa_r+0x62a>
 800bab8:	4ba3      	ldr	r3, [pc, #652]	; (800bd48 <_dtoa_r+0x998>)
 800baba:	2200      	movs	r2, #0
 800babc:	f7f4 fda4 	bl	8000608 <__aeabi_dmul>
 800bac0:	2200      	movs	r2, #0
 800bac2:	2300      	movs	r3, #0
 800bac4:	4606      	mov	r6, r0
 800bac6:	460f      	mov	r7, r1
 800bac8:	f7f5 f806 	bl	8000ad8 <__aeabi_dcmpeq>
 800bacc:	2800      	cmp	r0, #0
 800bace:	d09e      	beq.n	800ba0e <_dtoa_r+0x65e>
 800bad0:	e7d0      	b.n	800ba74 <_dtoa_r+0x6c4>
 800bad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bad4:	2a00      	cmp	r2, #0
 800bad6:	f000 80ca 	beq.w	800bc6e <_dtoa_r+0x8be>
 800bada:	9a07      	ldr	r2, [sp, #28]
 800badc:	2a01      	cmp	r2, #1
 800bade:	f300 80ad 	bgt.w	800bc3c <_dtoa_r+0x88c>
 800bae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bae4:	2a00      	cmp	r2, #0
 800bae6:	f000 80a5 	beq.w	800bc34 <_dtoa_r+0x884>
 800baea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800baee:	9e08      	ldr	r6, [sp, #32]
 800baf0:	9d05      	ldr	r5, [sp, #20]
 800baf2:	9a05      	ldr	r2, [sp, #20]
 800baf4:	441a      	add	r2, r3
 800baf6:	9205      	str	r2, [sp, #20]
 800baf8:	9a06      	ldr	r2, [sp, #24]
 800bafa:	2101      	movs	r1, #1
 800bafc:	441a      	add	r2, r3
 800bafe:	4620      	mov	r0, r4
 800bb00:	9206      	str	r2, [sp, #24]
 800bb02:	f000 fc3d 	bl	800c380 <__i2b>
 800bb06:	4607      	mov	r7, r0
 800bb08:	b165      	cbz	r5, 800bb24 <_dtoa_r+0x774>
 800bb0a:	9b06      	ldr	r3, [sp, #24]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	dd09      	ble.n	800bb24 <_dtoa_r+0x774>
 800bb10:	42ab      	cmp	r3, r5
 800bb12:	9a05      	ldr	r2, [sp, #20]
 800bb14:	bfa8      	it	ge
 800bb16:	462b      	movge	r3, r5
 800bb18:	1ad2      	subs	r2, r2, r3
 800bb1a:	9205      	str	r2, [sp, #20]
 800bb1c:	9a06      	ldr	r2, [sp, #24]
 800bb1e:	1aed      	subs	r5, r5, r3
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	9306      	str	r3, [sp, #24]
 800bb24:	9b08      	ldr	r3, [sp, #32]
 800bb26:	b1f3      	cbz	r3, 800bb66 <_dtoa_r+0x7b6>
 800bb28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f000 80a3 	beq.w	800bc76 <_dtoa_r+0x8c6>
 800bb30:	2e00      	cmp	r6, #0
 800bb32:	dd10      	ble.n	800bb56 <_dtoa_r+0x7a6>
 800bb34:	4639      	mov	r1, r7
 800bb36:	4632      	mov	r2, r6
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f000 fce1 	bl	800c500 <__pow5mult>
 800bb3e:	4652      	mov	r2, sl
 800bb40:	4601      	mov	r1, r0
 800bb42:	4607      	mov	r7, r0
 800bb44:	4620      	mov	r0, r4
 800bb46:	f000 fc31 	bl	800c3ac <__multiply>
 800bb4a:	4651      	mov	r1, sl
 800bb4c:	4680      	mov	r8, r0
 800bb4e:	4620      	mov	r0, r4
 800bb50:	f000 fb60 	bl	800c214 <_Bfree>
 800bb54:	46c2      	mov	sl, r8
 800bb56:	9b08      	ldr	r3, [sp, #32]
 800bb58:	1b9a      	subs	r2, r3, r6
 800bb5a:	d004      	beq.n	800bb66 <_dtoa_r+0x7b6>
 800bb5c:	4651      	mov	r1, sl
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f000 fcce 	bl	800c500 <__pow5mult>
 800bb64:	4682      	mov	sl, r0
 800bb66:	2101      	movs	r1, #1
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f000 fc09 	bl	800c380 <__i2b>
 800bb6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	4606      	mov	r6, r0
 800bb74:	f340 8081 	ble.w	800bc7a <_dtoa_r+0x8ca>
 800bb78:	461a      	mov	r2, r3
 800bb7a:	4601      	mov	r1, r0
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f000 fcbf 	bl	800c500 <__pow5mult>
 800bb82:	9b07      	ldr	r3, [sp, #28]
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	4606      	mov	r6, r0
 800bb88:	dd7a      	ble.n	800bc80 <_dtoa_r+0x8d0>
 800bb8a:	f04f 0800 	mov.w	r8, #0
 800bb8e:	6933      	ldr	r3, [r6, #16]
 800bb90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bb94:	6918      	ldr	r0, [r3, #16]
 800bb96:	f000 fba5 	bl	800c2e4 <__hi0bits>
 800bb9a:	f1c0 0020 	rsb	r0, r0, #32
 800bb9e:	9b06      	ldr	r3, [sp, #24]
 800bba0:	4418      	add	r0, r3
 800bba2:	f010 001f 	ands.w	r0, r0, #31
 800bba6:	f000 8094 	beq.w	800bcd2 <_dtoa_r+0x922>
 800bbaa:	f1c0 0320 	rsb	r3, r0, #32
 800bbae:	2b04      	cmp	r3, #4
 800bbb0:	f340 8085 	ble.w	800bcbe <_dtoa_r+0x90e>
 800bbb4:	9b05      	ldr	r3, [sp, #20]
 800bbb6:	f1c0 001c 	rsb	r0, r0, #28
 800bbba:	4403      	add	r3, r0
 800bbbc:	9305      	str	r3, [sp, #20]
 800bbbe:	9b06      	ldr	r3, [sp, #24]
 800bbc0:	4403      	add	r3, r0
 800bbc2:	4405      	add	r5, r0
 800bbc4:	9306      	str	r3, [sp, #24]
 800bbc6:	9b05      	ldr	r3, [sp, #20]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	dd05      	ble.n	800bbd8 <_dtoa_r+0x828>
 800bbcc:	4651      	mov	r1, sl
 800bbce:	461a      	mov	r2, r3
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	f000 fcef 	bl	800c5b4 <__lshift>
 800bbd6:	4682      	mov	sl, r0
 800bbd8:	9b06      	ldr	r3, [sp, #24]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	dd05      	ble.n	800bbea <_dtoa_r+0x83a>
 800bbde:	4631      	mov	r1, r6
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f000 fce6 	bl	800c5b4 <__lshift>
 800bbe8:	4606      	mov	r6, r0
 800bbea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d072      	beq.n	800bcd6 <_dtoa_r+0x926>
 800bbf0:	4631      	mov	r1, r6
 800bbf2:	4650      	mov	r0, sl
 800bbf4:	f000 fd4a 	bl	800c68c <__mcmp>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	da6c      	bge.n	800bcd6 <_dtoa_r+0x926>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	4651      	mov	r1, sl
 800bc00:	220a      	movs	r2, #10
 800bc02:	4620      	mov	r0, r4
 800bc04:	f000 fb28 	bl	800c258 <__multadd>
 800bc08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc0e:	4682      	mov	sl, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f000 81b0 	beq.w	800bf76 <_dtoa_r+0xbc6>
 800bc16:	2300      	movs	r3, #0
 800bc18:	4639      	mov	r1, r7
 800bc1a:	220a      	movs	r2, #10
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f000 fb1b 	bl	800c258 <__multadd>
 800bc22:	9b01      	ldr	r3, [sp, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	4607      	mov	r7, r0
 800bc28:	f300 8096 	bgt.w	800bd58 <_dtoa_r+0x9a8>
 800bc2c:	9b07      	ldr	r3, [sp, #28]
 800bc2e:	2b02      	cmp	r3, #2
 800bc30:	dc59      	bgt.n	800bce6 <_dtoa_r+0x936>
 800bc32:	e091      	b.n	800bd58 <_dtoa_r+0x9a8>
 800bc34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc3a:	e758      	b.n	800baee <_dtoa_r+0x73e>
 800bc3c:	9b04      	ldr	r3, [sp, #16]
 800bc3e:	1e5e      	subs	r6, r3, #1
 800bc40:	9b08      	ldr	r3, [sp, #32]
 800bc42:	42b3      	cmp	r3, r6
 800bc44:	bfbf      	itttt	lt
 800bc46:	9b08      	ldrlt	r3, [sp, #32]
 800bc48:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bc4a:	9608      	strlt	r6, [sp, #32]
 800bc4c:	1af3      	sublt	r3, r6, r3
 800bc4e:	bfb4      	ite	lt
 800bc50:	18d2      	addlt	r2, r2, r3
 800bc52:	1b9e      	subge	r6, r3, r6
 800bc54:	9b04      	ldr	r3, [sp, #16]
 800bc56:	bfbc      	itt	lt
 800bc58:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bc5a:	2600      	movlt	r6, #0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	bfb7      	itett	lt
 800bc60:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bc64:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bc68:	1a9d      	sublt	r5, r3, r2
 800bc6a:	2300      	movlt	r3, #0
 800bc6c:	e741      	b.n	800baf2 <_dtoa_r+0x742>
 800bc6e:	9e08      	ldr	r6, [sp, #32]
 800bc70:	9d05      	ldr	r5, [sp, #20]
 800bc72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bc74:	e748      	b.n	800bb08 <_dtoa_r+0x758>
 800bc76:	9a08      	ldr	r2, [sp, #32]
 800bc78:	e770      	b.n	800bb5c <_dtoa_r+0x7ac>
 800bc7a:	9b07      	ldr	r3, [sp, #28]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	dc19      	bgt.n	800bcb4 <_dtoa_r+0x904>
 800bc80:	9b02      	ldr	r3, [sp, #8]
 800bc82:	b9bb      	cbnz	r3, 800bcb4 <_dtoa_r+0x904>
 800bc84:	9b03      	ldr	r3, [sp, #12]
 800bc86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc8a:	b99b      	cbnz	r3, 800bcb4 <_dtoa_r+0x904>
 800bc8c:	9b03      	ldr	r3, [sp, #12]
 800bc8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc92:	0d1b      	lsrs	r3, r3, #20
 800bc94:	051b      	lsls	r3, r3, #20
 800bc96:	b183      	cbz	r3, 800bcba <_dtoa_r+0x90a>
 800bc98:	9b05      	ldr	r3, [sp, #20]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	9305      	str	r3, [sp, #20]
 800bc9e:	9b06      	ldr	r3, [sp, #24]
 800bca0:	3301      	adds	r3, #1
 800bca2:	9306      	str	r3, [sp, #24]
 800bca4:	f04f 0801 	mov.w	r8, #1
 800bca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f47f af6f 	bne.w	800bb8e <_dtoa_r+0x7de>
 800bcb0:	2001      	movs	r0, #1
 800bcb2:	e774      	b.n	800bb9e <_dtoa_r+0x7ee>
 800bcb4:	f04f 0800 	mov.w	r8, #0
 800bcb8:	e7f6      	b.n	800bca8 <_dtoa_r+0x8f8>
 800bcba:	4698      	mov	r8, r3
 800bcbc:	e7f4      	b.n	800bca8 <_dtoa_r+0x8f8>
 800bcbe:	d082      	beq.n	800bbc6 <_dtoa_r+0x816>
 800bcc0:	9a05      	ldr	r2, [sp, #20]
 800bcc2:	331c      	adds	r3, #28
 800bcc4:	441a      	add	r2, r3
 800bcc6:	9205      	str	r2, [sp, #20]
 800bcc8:	9a06      	ldr	r2, [sp, #24]
 800bcca:	441a      	add	r2, r3
 800bccc:	441d      	add	r5, r3
 800bcce:	9206      	str	r2, [sp, #24]
 800bcd0:	e779      	b.n	800bbc6 <_dtoa_r+0x816>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	e7f4      	b.n	800bcc0 <_dtoa_r+0x910>
 800bcd6:	9b04      	ldr	r3, [sp, #16]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	dc37      	bgt.n	800bd4c <_dtoa_r+0x99c>
 800bcdc:	9b07      	ldr	r3, [sp, #28]
 800bcde:	2b02      	cmp	r3, #2
 800bce0:	dd34      	ble.n	800bd4c <_dtoa_r+0x99c>
 800bce2:	9b04      	ldr	r3, [sp, #16]
 800bce4:	9301      	str	r3, [sp, #4]
 800bce6:	9b01      	ldr	r3, [sp, #4]
 800bce8:	b963      	cbnz	r3, 800bd04 <_dtoa_r+0x954>
 800bcea:	4631      	mov	r1, r6
 800bcec:	2205      	movs	r2, #5
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f000 fab2 	bl	800c258 <__multadd>
 800bcf4:	4601      	mov	r1, r0
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	4650      	mov	r0, sl
 800bcfa:	f000 fcc7 	bl	800c68c <__mcmp>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	f73f adbb 	bgt.w	800b87a <_dtoa_r+0x4ca>
 800bd04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd06:	9d00      	ldr	r5, [sp, #0]
 800bd08:	ea6f 0b03 	mvn.w	fp, r3
 800bd0c:	f04f 0800 	mov.w	r8, #0
 800bd10:	4631      	mov	r1, r6
 800bd12:	4620      	mov	r0, r4
 800bd14:	f000 fa7e 	bl	800c214 <_Bfree>
 800bd18:	2f00      	cmp	r7, #0
 800bd1a:	f43f aeab 	beq.w	800ba74 <_dtoa_r+0x6c4>
 800bd1e:	f1b8 0f00 	cmp.w	r8, #0
 800bd22:	d005      	beq.n	800bd30 <_dtoa_r+0x980>
 800bd24:	45b8      	cmp	r8, r7
 800bd26:	d003      	beq.n	800bd30 <_dtoa_r+0x980>
 800bd28:	4641      	mov	r1, r8
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f000 fa72 	bl	800c214 <_Bfree>
 800bd30:	4639      	mov	r1, r7
 800bd32:	4620      	mov	r0, r4
 800bd34:	f000 fa6e 	bl	800c214 <_Bfree>
 800bd38:	e69c      	b.n	800ba74 <_dtoa_r+0x6c4>
 800bd3a:	2600      	movs	r6, #0
 800bd3c:	4637      	mov	r7, r6
 800bd3e:	e7e1      	b.n	800bd04 <_dtoa_r+0x954>
 800bd40:	46bb      	mov	fp, r7
 800bd42:	4637      	mov	r7, r6
 800bd44:	e599      	b.n	800b87a <_dtoa_r+0x4ca>
 800bd46:	bf00      	nop
 800bd48:	40240000 	.word	0x40240000
 800bd4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f000 80c8 	beq.w	800bee4 <_dtoa_r+0xb34>
 800bd54:	9b04      	ldr	r3, [sp, #16]
 800bd56:	9301      	str	r3, [sp, #4]
 800bd58:	2d00      	cmp	r5, #0
 800bd5a:	dd05      	ble.n	800bd68 <_dtoa_r+0x9b8>
 800bd5c:	4639      	mov	r1, r7
 800bd5e:	462a      	mov	r2, r5
 800bd60:	4620      	mov	r0, r4
 800bd62:	f000 fc27 	bl	800c5b4 <__lshift>
 800bd66:	4607      	mov	r7, r0
 800bd68:	f1b8 0f00 	cmp.w	r8, #0
 800bd6c:	d05b      	beq.n	800be26 <_dtoa_r+0xa76>
 800bd6e:	6879      	ldr	r1, [r7, #4]
 800bd70:	4620      	mov	r0, r4
 800bd72:	f000 fa0f 	bl	800c194 <_Balloc>
 800bd76:	4605      	mov	r5, r0
 800bd78:	b928      	cbnz	r0, 800bd86 <_dtoa_r+0x9d6>
 800bd7a:	4b83      	ldr	r3, [pc, #524]	; (800bf88 <_dtoa_r+0xbd8>)
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bd82:	f7ff bb2e 	b.w	800b3e2 <_dtoa_r+0x32>
 800bd86:	693a      	ldr	r2, [r7, #16]
 800bd88:	3202      	adds	r2, #2
 800bd8a:	0092      	lsls	r2, r2, #2
 800bd8c:	f107 010c 	add.w	r1, r7, #12
 800bd90:	300c      	adds	r0, #12
 800bd92:	f7ff fa76 	bl	800b282 <memcpy>
 800bd96:	2201      	movs	r2, #1
 800bd98:	4629      	mov	r1, r5
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f000 fc0a 	bl	800c5b4 <__lshift>
 800bda0:	9b00      	ldr	r3, [sp, #0]
 800bda2:	3301      	adds	r3, #1
 800bda4:	9304      	str	r3, [sp, #16]
 800bda6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdaa:	4413      	add	r3, r2
 800bdac:	9308      	str	r3, [sp, #32]
 800bdae:	9b02      	ldr	r3, [sp, #8]
 800bdb0:	f003 0301 	and.w	r3, r3, #1
 800bdb4:	46b8      	mov	r8, r7
 800bdb6:	9306      	str	r3, [sp, #24]
 800bdb8:	4607      	mov	r7, r0
 800bdba:	9b04      	ldr	r3, [sp, #16]
 800bdbc:	4631      	mov	r1, r6
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	4650      	mov	r0, sl
 800bdc2:	9301      	str	r3, [sp, #4]
 800bdc4:	f7ff fa6b 	bl	800b29e <quorem>
 800bdc8:	4641      	mov	r1, r8
 800bdca:	9002      	str	r0, [sp, #8]
 800bdcc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bdd0:	4650      	mov	r0, sl
 800bdd2:	f000 fc5b 	bl	800c68c <__mcmp>
 800bdd6:	463a      	mov	r2, r7
 800bdd8:	9005      	str	r0, [sp, #20]
 800bdda:	4631      	mov	r1, r6
 800bddc:	4620      	mov	r0, r4
 800bdde:	f000 fc71 	bl	800c6c4 <__mdiff>
 800bde2:	68c2      	ldr	r2, [r0, #12]
 800bde4:	4605      	mov	r5, r0
 800bde6:	bb02      	cbnz	r2, 800be2a <_dtoa_r+0xa7a>
 800bde8:	4601      	mov	r1, r0
 800bdea:	4650      	mov	r0, sl
 800bdec:	f000 fc4e 	bl	800c68c <__mcmp>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	9209      	str	r2, [sp, #36]	; 0x24
 800bdf8:	f000 fa0c 	bl	800c214 <_Bfree>
 800bdfc:	9b07      	ldr	r3, [sp, #28]
 800bdfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be00:	9d04      	ldr	r5, [sp, #16]
 800be02:	ea43 0102 	orr.w	r1, r3, r2
 800be06:	9b06      	ldr	r3, [sp, #24]
 800be08:	4319      	orrs	r1, r3
 800be0a:	d110      	bne.n	800be2e <_dtoa_r+0xa7e>
 800be0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800be10:	d029      	beq.n	800be66 <_dtoa_r+0xab6>
 800be12:	9b05      	ldr	r3, [sp, #20]
 800be14:	2b00      	cmp	r3, #0
 800be16:	dd02      	ble.n	800be1e <_dtoa_r+0xa6e>
 800be18:	9b02      	ldr	r3, [sp, #8]
 800be1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800be1e:	9b01      	ldr	r3, [sp, #4]
 800be20:	f883 9000 	strb.w	r9, [r3]
 800be24:	e774      	b.n	800bd10 <_dtoa_r+0x960>
 800be26:	4638      	mov	r0, r7
 800be28:	e7ba      	b.n	800bda0 <_dtoa_r+0x9f0>
 800be2a:	2201      	movs	r2, #1
 800be2c:	e7e1      	b.n	800bdf2 <_dtoa_r+0xa42>
 800be2e:	9b05      	ldr	r3, [sp, #20]
 800be30:	2b00      	cmp	r3, #0
 800be32:	db04      	blt.n	800be3e <_dtoa_r+0xa8e>
 800be34:	9907      	ldr	r1, [sp, #28]
 800be36:	430b      	orrs	r3, r1
 800be38:	9906      	ldr	r1, [sp, #24]
 800be3a:	430b      	orrs	r3, r1
 800be3c:	d120      	bne.n	800be80 <_dtoa_r+0xad0>
 800be3e:	2a00      	cmp	r2, #0
 800be40:	dded      	ble.n	800be1e <_dtoa_r+0xa6e>
 800be42:	4651      	mov	r1, sl
 800be44:	2201      	movs	r2, #1
 800be46:	4620      	mov	r0, r4
 800be48:	f000 fbb4 	bl	800c5b4 <__lshift>
 800be4c:	4631      	mov	r1, r6
 800be4e:	4682      	mov	sl, r0
 800be50:	f000 fc1c 	bl	800c68c <__mcmp>
 800be54:	2800      	cmp	r0, #0
 800be56:	dc03      	bgt.n	800be60 <_dtoa_r+0xab0>
 800be58:	d1e1      	bne.n	800be1e <_dtoa_r+0xa6e>
 800be5a:	f019 0f01 	tst.w	r9, #1
 800be5e:	d0de      	beq.n	800be1e <_dtoa_r+0xa6e>
 800be60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800be64:	d1d8      	bne.n	800be18 <_dtoa_r+0xa68>
 800be66:	9a01      	ldr	r2, [sp, #4]
 800be68:	2339      	movs	r3, #57	; 0x39
 800be6a:	7013      	strb	r3, [r2, #0]
 800be6c:	462b      	mov	r3, r5
 800be6e:	461d      	mov	r5, r3
 800be70:	3b01      	subs	r3, #1
 800be72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800be76:	2a39      	cmp	r2, #57	; 0x39
 800be78:	d06c      	beq.n	800bf54 <_dtoa_r+0xba4>
 800be7a:	3201      	adds	r2, #1
 800be7c:	701a      	strb	r2, [r3, #0]
 800be7e:	e747      	b.n	800bd10 <_dtoa_r+0x960>
 800be80:	2a00      	cmp	r2, #0
 800be82:	dd07      	ble.n	800be94 <_dtoa_r+0xae4>
 800be84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800be88:	d0ed      	beq.n	800be66 <_dtoa_r+0xab6>
 800be8a:	9a01      	ldr	r2, [sp, #4]
 800be8c:	f109 0301 	add.w	r3, r9, #1
 800be90:	7013      	strb	r3, [r2, #0]
 800be92:	e73d      	b.n	800bd10 <_dtoa_r+0x960>
 800be94:	9b04      	ldr	r3, [sp, #16]
 800be96:	9a08      	ldr	r2, [sp, #32]
 800be98:	f803 9c01 	strb.w	r9, [r3, #-1]
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d043      	beq.n	800bf28 <_dtoa_r+0xb78>
 800bea0:	4651      	mov	r1, sl
 800bea2:	2300      	movs	r3, #0
 800bea4:	220a      	movs	r2, #10
 800bea6:	4620      	mov	r0, r4
 800bea8:	f000 f9d6 	bl	800c258 <__multadd>
 800beac:	45b8      	cmp	r8, r7
 800beae:	4682      	mov	sl, r0
 800beb0:	f04f 0300 	mov.w	r3, #0
 800beb4:	f04f 020a 	mov.w	r2, #10
 800beb8:	4641      	mov	r1, r8
 800beba:	4620      	mov	r0, r4
 800bebc:	d107      	bne.n	800bece <_dtoa_r+0xb1e>
 800bebe:	f000 f9cb 	bl	800c258 <__multadd>
 800bec2:	4680      	mov	r8, r0
 800bec4:	4607      	mov	r7, r0
 800bec6:	9b04      	ldr	r3, [sp, #16]
 800bec8:	3301      	adds	r3, #1
 800beca:	9304      	str	r3, [sp, #16]
 800becc:	e775      	b.n	800bdba <_dtoa_r+0xa0a>
 800bece:	f000 f9c3 	bl	800c258 <__multadd>
 800bed2:	4639      	mov	r1, r7
 800bed4:	4680      	mov	r8, r0
 800bed6:	2300      	movs	r3, #0
 800bed8:	220a      	movs	r2, #10
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 f9bc 	bl	800c258 <__multadd>
 800bee0:	4607      	mov	r7, r0
 800bee2:	e7f0      	b.n	800bec6 <_dtoa_r+0xb16>
 800bee4:	9b04      	ldr	r3, [sp, #16]
 800bee6:	9301      	str	r3, [sp, #4]
 800bee8:	9d00      	ldr	r5, [sp, #0]
 800beea:	4631      	mov	r1, r6
 800beec:	4650      	mov	r0, sl
 800beee:	f7ff f9d6 	bl	800b29e <quorem>
 800bef2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bef6:	9b00      	ldr	r3, [sp, #0]
 800bef8:	f805 9b01 	strb.w	r9, [r5], #1
 800befc:	1aea      	subs	r2, r5, r3
 800befe:	9b01      	ldr	r3, [sp, #4]
 800bf00:	4293      	cmp	r3, r2
 800bf02:	dd07      	ble.n	800bf14 <_dtoa_r+0xb64>
 800bf04:	4651      	mov	r1, sl
 800bf06:	2300      	movs	r3, #0
 800bf08:	220a      	movs	r2, #10
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	f000 f9a4 	bl	800c258 <__multadd>
 800bf10:	4682      	mov	sl, r0
 800bf12:	e7ea      	b.n	800beea <_dtoa_r+0xb3a>
 800bf14:	9b01      	ldr	r3, [sp, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	bfc8      	it	gt
 800bf1a:	461d      	movgt	r5, r3
 800bf1c:	9b00      	ldr	r3, [sp, #0]
 800bf1e:	bfd8      	it	le
 800bf20:	2501      	movle	r5, #1
 800bf22:	441d      	add	r5, r3
 800bf24:	f04f 0800 	mov.w	r8, #0
 800bf28:	4651      	mov	r1, sl
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f000 fb41 	bl	800c5b4 <__lshift>
 800bf32:	4631      	mov	r1, r6
 800bf34:	4682      	mov	sl, r0
 800bf36:	f000 fba9 	bl	800c68c <__mcmp>
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	dc96      	bgt.n	800be6c <_dtoa_r+0xabc>
 800bf3e:	d102      	bne.n	800bf46 <_dtoa_r+0xb96>
 800bf40:	f019 0f01 	tst.w	r9, #1
 800bf44:	d192      	bne.n	800be6c <_dtoa_r+0xabc>
 800bf46:	462b      	mov	r3, r5
 800bf48:	461d      	mov	r5, r3
 800bf4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf4e:	2a30      	cmp	r2, #48	; 0x30
 800bf50:	d0fa      	beq.n	800bf48 <_dtoa_r+0xb98>
 800bf52:	e6dd      	b.n	800bd10 <_dtoa_r+0x960>
 800bf54:	9a00      	ldr	r2, [sp, #0]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d189      	bne.n	800be6e <_dtoa_r+0xabe>
 800bf5a:	f10b 0b01 	add.w	fp, fp, #1
 800bf5e:	2331      	movs	r3, #49	; 0x31
 800bf60:	e796      	b.n	800be90 <_dtoa_r+0xae0>
 800bf62:	4b0a      	ldr	r3, [pc, #40]	; (800bf8c <_dtoa_r+0xbdc>)
 800bf64:	f7ff ba99 	b.w	800b49a <_dtoa_r+0xea>
 800bf68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	f47f aa6d 	bne.w	800b44a <_dtoa_r+0x9a>
 800bf70:	4b07      	ldr	r3, [pc, #28]	; (800bf90 <_dtoa_r+0xbe0>)
 800bf72:	f7ff ba92 	b.w	800b49a <_dtoa_r+0xea>
 800bf76:	9b01      	ldr	r3, [sp, #4]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	dcb5      	bgt.n	800bee8 <_dtoa_r+0xb38>
 800bf7c:	9b07      	ldr	r3, [sp, #28]
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	f73f aeb1 	bgt.w	800bce6 <_dtoa_r+0x936>
 800bf84:	e7b0      	b.n	800bee8 <_dtoa_r+0xb38>
 800bf86:	bf00      	nop
 800bf88:	0801032c 	.word	0x0801032c
 800bf8c:	0801028c 	.word	0x0801028c
 800bf90:	080102b0 	.word	0x080102b0

0800bf94 <_free_r>:
 800bf94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf96:	2900      	cmp	r1, #0
 800bf98:	d044      	beq.n	800c024 <_free_r+0x90>
 800bf9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf9e:	9001      	str	r0, [sp, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f1a1 0404 	sub.w	r4, r1, #4
 800bfa6:	bfb8      	it	lt
 800bfa8:	18e4      	addlt	r4, r4, r3
 800bfaa:	f000 f8e7 	bl	800c17c <__malloc_lock>
 800bfae:	4a1e      	ldr	r2, [pc, #120]	; (800c028 <_free_r+0x94>)
 800bfb0:	9801      	ldr	r0, [sp, #4]
 800bfb2:	6813      	ldr	r3, [r2, #0]
 800bfb4:	b933      	cbnz	r3, 800bfc4 <_free_r+0x30>
 800bfb6:	6063      	str	r3, [r4, #4]
 800bfb8:	6014      	str	r4, [r2, #0]
 800bfba:	b003      	add	sp, #12
 800bfbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfc0:	f000 b8e2 	b.w	800c188 <__malloc_unlock>
 800bfc4:	42a3      	cmp	r3, r4
 800bfc6:	d908      	bls.n	800bfda <_free_r+0x46>
 800bfc8:	6825      	ldr	r5, [r4, #0]
 800bfca:	1961      	adds	r1, r4, r5
 800bfcc:	428b      	cmp	r3, r1
 800bfce:	bf01      	itttt	eq
 800bfd0:	6819      	ldreq	r1, [r3, #0]
 800bfd2:	685b      	ldreq	r3, [r3, #4]
 800bfd4:	1949      	addeq	r1, r1, r5
 800bfd6:	6021      	streq	r1, [r4, #0]
 800bfd8:	e7ed      	b.n	800bfb6 <_free_r+0x22>
 800bfda:	461a      	mov	r2, r3
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	b10b      	cbz	r3, 800bfe4 <_free_r+0x50>
 800bfe0:	42a3      	cmp	r3, r4
 800bfe2:	d9fa      	bls.n	800bfda <_free_r+0x46>
 800bfe4:	6811      	ldr	r1, [r2, #0]
 800bfe6:	1855      	adds	r5, r2, r1
 800bfe8:	42a5      	cmp	r5, r4
 800bfea:	d10b      	bne.n	800c004 <_free_r+0x70>
 800bfec:	6824      	ldr	r4, [r4, #0]
 800bfee:	4421      	add	r1, r4
 800bff0:	1854      	adds	r4, r2, r1
 800bff2:	42a3      	cmp	r3, r4
 800bff4:	6011      	str	r1, [r2, #0]
 800bff6:	d1e0      	bne.n	800bfba <_free_r+0x26>
 800bff8:	681c      	ldr	r4, [r3, #0]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	6053      	str	r3, [r2, #4]
 800bffe:	440c      	add	r4, r1
 800c000:	6014      	str	r4, [r2, #0]
 800c002:	e7da      	b.n	800bfba <_free_r+0x26>
 800c004:	d902      	bls.n	800c00c <_free_r+0x78>
 800c006:	230c      	movs	r3, #12
 800c008:	6003      	str	r3, [r0, #0]
 800c00a:	e7d6      	b.n	800bfba <_free_r+0x26>
 800c00c:	6825      	ldr	r5, [r4, #0]
 800c00e:	1961      	adds	r1, r4, r5
 800c010:	428b      	cmp	r3, r1
 800c012:	bf04      	itt	eq
 800c014:	6819      	ldreq	r1, [r3, #0]
 800c016:	685b      	ldreq	r3, [r3, #4]
 800c018:	6063      	str	r3, [r4, #4]
 800c01a:	bf04      	itt	eq
 800c01c:	1949      	addeq	r1, r1, r5
 800c01e:	6021      	streq	r1, [r4, #0]
 800c020:	6054      	str	r4, [r2, #4]
 800c022:	e7ca      	b.n	800bfba <_free_r+0x26>
 800c024:	b003      	add	sp, #12
 800c026:	bd30      	pop	{r4, r5, pc}
 800c028:	200019ac 	.word	0x200019ac

0800c02c <malloc>:
 800c02c:	4b02      	ldr	r3, [pc, #8]	; (800c038 <malloc+0xc>)
 800c02e:	4601      	mov	r1, r0
 800c030:	6818      	ldr	r0, [r3, #0]
 800c032:	f000 b823 	b.w	800c07c <_malloc_r>
 800c036:	bf00      	nop
 800c038:	200006dc 	.word	0x200006dc

0800c03c <sbrk_aligned>:
 800c03c:	b570      	push	{r4, r5, r6, lr}
 800c03e:	4e0e      	ldr	r6, [pc, #56]	; (800c078 <sbrk_aligned+0x3c>)
 800c040:	460c      	mov	r4, r1
 800c042:	6831      	ldr	r1, [r6, #0]
 800c044:	4605      	mov	r5, r0
 800c046:	b911      	cbnz	r1, 800c04e <sbrk_aligned+0x12>
 800c048:	f000 fe26 	bl	800cc98 <_sbrk_r>
 800c04c:	6030      	str	r0, [r6, #0]
 800c04e:	4621      	mov	r1, r4
 800c050:	4628      	mov	r0, r5
 800c052:	f000 fe21 	bl	800cc98 <_sbrk_r>
 800c056:	1c43      	adds	r3, r0, #1
 800c058:	d00a      	beq.n	800c070 <sbrk_aligned+0x34>
 800c05a:	1cc4      	adds	r4, r0, #3
 800c05c:	f024 0403 	bic.w	r4, r4, #3
 800c060:	42a0      	cmp	r0, r4
 800c062:	d007      	beq.n	800c074 <sbrk_aligned+0x38>
 800c064:	1a21      	subs	r1, r4, r0
 800c066:	4628      	mov	r0, r5
 800c068:	f000 fe16 	bl	800cc98 <_sbrk_r>
 800c06c:	3001      	adds	r0, #1
 800c06e:	d101      	bne.n	800c074 <sbrk_aligned+0x38>
 800c070:	f04f 34ff 	mov.w	r4, #4294967295
 800c074:	4620      	mov	r0, r4
 800c076:	bd70      	pop	{r4, r5, r6, pc}
 800c078:	200019b0 	.word	0x200019b0

0800c07c <_malloc_r>:
 800c07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c080:	1ccd      	adds	r5, r1, #3
 800c082:	f025 0503 	bic.w	r5, r5, #3
 800c086:	3508      	adds	r5, #8
 800c088:	2d0c      	cmp	r5, #12
 800c08a:	bf38      	it	cc
 800c08c:	250c      	movcc	r5, #12
 800c08e:	2d00      	cmp	r5, #0
 800c090:	4607      	mov	r7, r0
 800c092:	db01      	blt.n	800c098 <_malloc_r+0x1c>
 800c094:	42a9      	cmp	r1, r5
 800c096:	d905      	bls.n	800c0a4 <_malloc_r+0x28>
 800c098:	230c      	movs	r3, #12
 800c09a:	603b      	str	r3, [r7, #0]
 800c09c:	2600      	movs	r6, #0
 800c09e:	4630      	mov	r0, r6
 800c0a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c178 <_malloc_r+0xfc>
 800c0a8:	f000 f868 	bl	800c17c <__malloc_lock>
 800c0ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c0b0:	461c      	mov	r4, r3
 800c0b2:	bb5c      	cbnz	r4, 800c10c <_malloc_r+0x90>
 800c0b4:	4629      	mov	r1, r5
 800c0b6:	4638      	mov	r0, r7
 800c0b8:	f7ff ffc0 	bl	800c03c <sbrk_aligned>
 800c0bc:	1c43      	adds	r3, r0, #1
 800c0be:	4604      	mov	r4, r0
 800c0c0:	d155      	bne.n	800c16e <_malloc_r+0xf2>
 800c0c2:	f8d8 4000 	ldr.w	r4, [r8]
 800c0c6:	4626      	mov	r6, r4
 800c0c8:	2e00      	cmp	r6, #0
 800c0ca:	d145      	bne.n	800c158 <_malloc_r+0xdc>
 800c0cc:	2c00      	cmp	r4, #0
 800c0ce:	d048      	beq.n	800c162 <_malloc_r+0xe6>
 800c0d0:	6823      	ldr	r3, [r4, #0]
 800c0d2:	4631      	mov	r1, r6
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	eb04 0903 	add.w	r9, r4, r3
 800c0da:	f000 fddd 	bl	800cc98 <_sbrk_r>
 800c0de:	4581      	cmp	r9, r0
 800c0e0:	d13f      	bne.n	800c162 <_malloc_r+0xe6>
 800c0e2:	6821      	ldr	r1, [r4, #0]
 800c0e4:	1a6d      	subs	r5, r5, r1
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	4638      	mov	r0, r7
 800c0ea:	f7ff ffa7 	bl	800c03c <sbrk_aligned>
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	d037      	beq.n	800c162 <_malloc_r+0xe6>
 800c0f2:	6823      	ldr	r3, [r4, #0]
 800c0f4:	442b      	add	r3, r5
 800c0f6:	6023      	str	r3, [r4, #0]
 800c0f8:	f8d8 3000 	ldr.w	r3, [r8]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d038      	beq.n	800c172 <_malloc_r+0xf6>
 800c100:	685a      	ldr	r2, [r3, #4]
 800c102:	42a2      	cmp	r2, r4
 800c104:	d12b      	bne.n	800c15e <_malloc_r+0xe2>
 800c106:	2200      	movs	r2, #0
 800c108:	605a      	str	r2, [r3, #4]
 800c10a:	e00f      	b.n	800c12c <_malloc_r+0xb0>
 800c10c:	6822      	ldr	r2, [r4, #0]
 800c10e:	1b52      	subs	r2, r2, r5
 800c110:	d41f      	bmi.n	800c152 <_malloc_r+0xd6>
 800c112:	2a0b      	cmp	r2, #11
 800c114:	d917      	bls.n	800c146 <_malloc_r+0xca>
 800c116:	1961      	adds	r1, r4, r5
 800c118:	42a3      	cmp	r3, r4
 800c11a:	6025      	str	r5, [r4, #0]
 800c11c:	bf18      	it	ne
 800c11e:	6059      	strne	r1, [r3, #4]
 800c120:	6863      	ldr	r3, [r4, #4]
 800c122:	bf08      	it	eq
 800c124:	f8c8 1000 	streq.w	r1, [r8]
 800c128:	5162      	str	r2, [r4, r5]
 800c12a:	604b      	str	r3, [r1, #4]
 800c12c:	4638      	mov	r0, r7
 800c12e:	f104 060b 	add.w	r6, r4, #11
 800c132:	f000 f829 	bl	800c188 <__malloc_unlock>
 800c136:	f026 0607 	bic.w	r6, r6, #7
 800c13a:	1d23      	adds	r3, r4, #4
 800c13c:	1af2      	subs	r2, r6, r3
 800c13e:	d0ae      	beq.n	800c09e <_malloc_r+0x22>
 800c140:	1b9b      	subs	r3, r3, r6
 800c142:	50a3      	str	r3, [r4, r2]
 800c144:	e7ab      	b.n	800c09e <_malloc_r+0x22>
 800c146:	42a3      	cmp	r3, r4
 800c148:	6862      	ldr	r2, [r4, #4]
 800c14a:	d1dd      	bne.n	800c108 <_malloc_r+0x8c>
 800c14c:	f8c8 2000 	str.w	r2, [r8]
 800c150:	e7ec      	b.n	800c12c <_malloc_r+0xb0>
 800c152:	4623      	mov	r3, r4
 800c154:	6864      	ldr	r4, [r4, #4]
 800c156:	e7ac      	b.n	800c0b2 <_malloc_r+0x36>
 800c158:	4634      	mov	r4, r6
 800c15a:	6876      	ldr	r6, [r6, #4]
 800c15c:	e7b4      	b.n	800c0c8 <_malloc_r+0x4c>
 800c15e:	4613      	mov	r3, r2
 800c160:	e7cc      	b.n	800c0fc <_malloc_r+0x80>
 800c162:	230c      	movs	r3, #12
 800c164:	603b      	str	r3, [r7, #0]
 800c166:	4638      	mov	r0, r7
 800c168:	f000 f80e 	bl	800c188 <__malloc_unlock>
 800c16c:	e797      	b.n	800c09e <_malloc_r+0x22>
 800c16e:	6025      	str	r5, [r4, #0]
 800c170:	e7dc      	b.n	800c12c <_malloc_r+0xb0>
 800c172:	605b      	str	r3, [r3, #4]
 800c174:	deff      	udf	#255	; 0xff
 800c176:	bf00      	nop
 800c178:	200019ac 	.word	0x200019ac

0800c17c <__malloc_lock>:
 800c17c:	4801      	ldr	r0, [pc, #4]	; (800c184 <__malloc_lock+0x8>)
 800c17e:	f7ff b87e 	b.w	800b27e <__retarget_lock_acquire_recursive>
 800c182:	bf00      	nop
 800c184:	200019a8 	.word	0x200019a8

0800c188 <__malloc_unlock>:
 800c188:	4801      	ldr	r0, [pc, #4]	; (800c190 <__malloc_unlock+0x8>)
 800c18a:	f7ff b879 	b.w	800b280 <__retarget_lock_release_recursive>
 800c18e:	bf00      	nop
 800c190:	200019a8 	.word	0x200019a8

0800c194 <_Balloc>:
 800c194:	b570      	push	{r4, r5, r6, lr}
 800c196:	69c6      	ldr	r6, [r0, #28]
 800c198:	4604      	mov	r4, r0
 800c19a:	460d      	mov	r5, r1
 800c19c:	b976      	cbnz	r6, 800c1bc <_Balloc+0x28>
 800c19e:	2010      	movs	r0, #16
 800c1a0:	f7ff ff44 	bl	800c02c <malloc>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	61e0      	str	r0, [r4, #28]
 800c1a8:	b920      	cbnz	r0, 800c1b4 <_Balloc+0x20>
 800c1aa:	4b18      	ldr	r3, [pc, #96]	; (800c20c <_Balloc+0x78>)
 800c1ac:	4818      	ldr	r0, [pc, #96]	; (800c210 <_Balloc+0x7c>)
 800c1ae:	216b      	movs	r1, #107	; 0x6b
 800c1b0:	f000 fd82 	bl	800ccb8 <__assert_func>
 800c1b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1b8:	6006      	str	r6, [r0, #0]
 800c1ba:	60c6      	str	r6, [r0, #12]
 800c1bc:	69e6      	ldr	r6, [r4, #28]
 800c1be:	68f3      	ldr	r3, [r6, #12]
 800c1c0:	b183      	cbz	r3, 800c1e4 <_Balloc+0x50>
 800c1c2:	69e3      	ldr	r3, [r4, #28]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1ca:	b9b8      	cbnz	r0, 800c1fc <_Balloc+0x68>
 800c1cc:	2101      	movs	r1, #1
 800c1ce:	fa01 f605 	lsl.w	r6, r1, r5
 800c1d2:	1d72      	adds	r2, r6, #5
 800c1d4:	0092      	lsls	r2, r2, #2
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f000 fd8c 	bl	800ccf4 <_calloc_r>
 800c1dc:	b160      	cbz	r0, 800c1f8 <_Balloc+0x64>
 800c1de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c1e2:	e00e      	b.n	800c202 <_Balloc+0x6e>
 800c1e4:	2221      	movs	r2, #33	; 0x21
 800c1e6:	2104      	movs	r1, #4
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f000 fd83 	bl	800ccf4 <_calloc_r>
 800c1ee:	69e3      	ldr	r3, [r4, #28]
 800c1f0:	60f0      	str	r0, [r6, #12]
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d1e4      	bne.n	800c1c2 <_Balloc+0x2e>
 800c1f8:	2000      	movs	r0, #0
 800c1fa:	bd70      	pop	{r4, r5, r6, pc}
 800c1fc:	6802      	ldr	r2, [r0, #0]
 800c1fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c202:	2300      	movs	r3, #0
 800c204:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c208:	e7f7      	b.n	800c1fa <_Balloc+0x66>
 800c20a:	bf00      	nop
 800c20c:	080102bd 	.word	0x080102bd
 800c210:	0801033d 	.word	0x0801033d

0800c214 <_Bfree>:
 800c214:	b570      	push	{r4, r5, r6, lr}
 800c216:	69c6      	ldr	r6, [r0, #28]
 800c218:	4605      	mov	r5, r0
 800c21a:	460c      	mov	r4, r1
 800c21c:	b976      	cbnz	r6, 800c23c <_Bfree+0x28>
 800c21e:	2010      	movs	r0, #16
 800c220:	f7ff ff04 	bl	800c02c <malloc>
 800c224:	4602      	mov	r2, r0
 800c226:	61e8      	str	r0, [r5, #28]
 800c228:	b920      	cbnz	r0, 800c234 <_Bfree+0x20>
 800c22a:	4b09      	ldr	r3, [pc, #36]	; (800c250 <_Bfree+0x3c>)
 800c22c:	4809      	ldr	r0, [pc, #36]	; (800c254 <_Bfree+0x40>)
 800c22e:	218f      	movs	r1, #143	; 0x8f
 800c230:	f000 fd42 	bl	800ccb8 <__assert_func>
 800c234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c238:	6006      	str	r6, [r0, #0]
 800c23a:	60c6      	str	r6, [r0, #12]
 800c23c:	b13c      	cbz	r4, 800c24e <_Bfree+0x3a>
 800c23e:	69eb      	ldr	r3, [r5, #28]
 800c240:	6862      	ldr	r2, [r4, #4]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c248:	6021      	str	r1, [r4, #0]
 800c24a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c24e:	bd70      	pop	{r4, r5, r6, pc}
 800c250:	080102bd 	.word	0x080102bd
 800c254:	0801033d 	.word	0x0801033d

0800c258 <__multadd>:
 800c258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c25c:	690d      	ldr	r5, [r1, #16]
 800c25e:	4607      	mov	r7, r0
 800c260:	460c      	mov	r4, r1
 800c262:	461e      	mov	r6, r3
 800c264:	f101 0c14 	add.w	ip, r1, #20
 800c268:	2000      	movs	r0, #0
 800c26a:	f8dc 3000 	ldr.w	r3, [ip]
 800c26e:	b299      	uxth	r1, r3
 800c270:	fb02 6101 	mla	r1, r2, r1, r6
 800c274:	0c1e      	lsrs	r6, r3, #16
 800c276:	0c0b      	lsrs	r3, r1, #16
 800c278:	fb02 3306 	mla	r3, r2, r6, r3
 800c27c:	b289      	uxth	r1, r1
 800c27e:	3001      	adds	r0, #1
 800c280:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c284:	4285      	cmp	r5, r0
 800c286:	f84c 1b04 	str.w	r1, [ip], #4
 800c28a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c28e:	dcec      	bgt.n	800c26a <__multadd+0x12>
 800c290:	b30e      	cbz	r6, 800c2d6 <__multadd+0x7e>
 800c292:	68a3      	ldr	r3, [r4, #8]
 800c294:	42ab      	cmp	r3, r5
 800c296:	dc19      	bgt.n	800c2cc <__multadd+0x74>
 800c298:	6861      	ldr	r1, [r4, #4]
 800c29a:	4638      	mov	r0, r7
 800c29c:	3101      	adds	r1, #1
 800c29e:	f7ff ff79 	bl	800c194 <_Balloc>
 800c2a2:	4680      	mov	r8, r0
 800c2a4:	b928      	cbnz	r0, 800c2b2 <__multadd+0x5a>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	4b0c      	ldr	r3, [pc, #48]	; (800c2dc <__multadd+0x84>)
 800c2aa:	480d      	ldr	r0, [pc, #52]	; (800c2e0 <__multadd+0x88>)
 800c2ac:	21ba      	movs	r1, #186	; 0xba
 800c2ae:	f000 fd03 	bl	800ccb8 <__assert_func>
 800c2b2:	6922      	ldr	r2, [r4, #16]
 800c2b4:	3202      	adds	r2, #2
 800c2b6:	f104 010c 	add.w	r1, r4, #12
 800c2ba:	0092      	lsls	r2, r2, #2
 800c2bc:	300c      	adds	r0, #12
 800c2be:	f7fe ffe0 	bl	800b282 <memcpy>
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	4638      	mov	r0, r7
 800c2c6:	f7ff ffa5 	bl	800c214 <_Bfree>
 800c2ca:	4644      	mov	r4, r8
 800c2cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2d0:	3501      	adds	r5, #1
 800c2d2:	615e      	str	r6, [r3, #20]
 800c2d4:	6125      	str	r5, [r4, #16]
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2dc:	0801032c 	.word	0x0801032c
 800c2e0:	0801033d 	.word	0x0801033d

0800c2e4 <__hi0bits>:
 800c2e4:	0c03      	lsrs	r3, r0, #16
 800c2e6:	041b      	lsls	r3, r3, #16
 800c2e8:	b9d3      	cbnz	r3, 800c320 <__hi0bits+0x3c>
 800c2ea:	0400      	lsls	r0, r0, #16
 800c2ec:	2310      	movs	r3, #16
 800c2ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c2f2:	bf04      	itt	eq
 800c2f4:	0200      	lsleq	r0, r0, #8
 800c2f6:	3308      	addeq	r3, #8
 800c2f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c2fc:	bf04      	itt	eq
 800c2fe:	0100      	lsleq	r0, r0, #4
 800c300:	3304      	addeq	r3, #4
 800c302:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c306:	bf04      	itt	eq
 800c308:	0080      	lsleq	r0, r0, #2
 800c30a:	3302      	addeq	r3, #2
 800c30c:	2800      	cmp	r0, #0
 800c30e:	db05      	blt.n	800c31c <__hi0bits+0x38>
 800c310:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c314:	f103 0301 	add.w	r3, r3, #1
 800c318:	bf08      	it	eq
 800c31a:	2320      	moveq	r3, #32
 800c31c:	4618      	mov	r0, r3
 800c31e:	4770      	bx	lr
 800c320:	2300      	movs	r3, #0
 800c322:	e7e4      	b.n	800c2ee <__hi0bits+0xa>

0800c324 <__lo0bits>:
 800c324:	6803      	ldr	r3, [r0, #0]
 800c326:	f013 0207 	ands.w	r2, r3, #7
 800c32a:	d00c      	beq.n	800c346 <__lo0bits+0x22>
 800c32c:	07d9      	lsls	r1, r3, #31
 800c32e:	d422      	bmi.n	800c376 <__lo0bits+0x52>
 800c330:	079a      	lsls	r2, r3, #30
 800c332:	bf49      	itett	mi
 800c334:	085b      	lsrmi	r3, r3, #1
 800c336:	089b      	lsrpl	r3, r3, #2
 800c338:	6003      	strmi	r3, [r0, #0]
 800c33a:	2201      	movmi	r2, #1
 800c33c:	bf5c      	itt	pl
 800c33e:	6003      	strpl	r3, [r0, #0]
 800c340:	2202      	movpl	r2, #2
 800c342:	4610      	mov	r0, r2
 800c344:	4770      	bx	lr
 800c346:	b299      	uxth	r1, r3
 800c348:	b909      	cbnz	r1, 800c34e <__lo0bits+0x2a>
 800c34a:	0c1b      	lsrs	r3, r3, #16
 800c34c:	2210      	movs	r2, #16
 800c34e:	b2d9      	uxtb	r1, r3
 800c350:	b909      	cbnz	r1, 800c356 <__lo0bits+0x32>
 800c352:	3208      	adds	r2, #8
 800c354:	0a1b      	lsrs	r3, r3, #8
 800c356:	0719      	lsls	r1, r3, #28
 800c358:	bf04      	itt	eq
 800c35a:	091b      	lsreq	r3, r3, #4
 800c35c:	3204      	addeq	r2, #4
 800c35e:	0799      	lsls	r1, r3, #30
 800c360:	bf04      	itt	eq
 800c362:	089b      	lsreq	r3, r3, #2
 800c364:	3202      	addeq	r2, #2
 800c366:	07d9      	lsls	r1, r3, #31
 800c368:	d403      	bmi.n	800c372 <__lo0bits+0x4e>
 800c36a:	085b      	lsrs	r3, r3, #1
 800c36c:	f102 0201 	add.w	r2, r2, #1
 800c370:	d003      	beq.n	800c37a <__lo0bits+0x56>
 800c372:	6003      	str	r3, [r0, #0]
 800c374:	e7e5      	b.n	800c342 <__lo0bits+0x1e>
 800c376:	2200      	movs	r2, #0
 800c378:	e7e3      	b.n	800c342 <__lo0bits+0x1e>
 800c37a:	2220      	movs	r2, #32
 800c37c:	e7e1      	b.n	800c342 <__lo0bits+0x1e>
	...

0800c380 <__i2b>:
 800c380:	b510      	push	{r4, lr}
 800c382:	460c      	mov	r4, r1
 800c384:	2101      	movs	r1, #1
 800c386:	f7ff ff05 	bl	800c194 <_Balloc>
 800c38a:	4602      	mov	r2, r0
 800c38c:	b928      	cbnz	r0, 800c39a <__i2b+0x1a>
 800c38e:	4b05      	ldr	r3, [pc, #20]	; (800c3a4 <__i2b+0x24>)
 800c390:	4805      	ldr	r0, [pc, #20]	; (800c3a8 <__i2b+0x28>)
 800c392:	f240 1145 	movw	r1, #325	; 0x145
 800c396:	f000 fc8f 	bl	800ccb8 <__assert_func>
 800c39a:	2301      	movs	r3, #1
 800c39c:	6144      	str	r4, [r0, #20]
 800c39e:	6103      	str	r3, [r0, #16]
 800c3a0:	bd10      	pop	{r4, pc}
 800c3a2:	bf00      	nop
 800c3a4:	0801032c 	.word	0x0801032c
 800c3a8:	0801033d 	.word	0x0801033d

0800c3ac <__multiply>:
 800c3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b0:	4691      	mov	r9, r2
 800c3b2:	690a      	ldr	r2, [r1, #16]
 800c3b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	bfb8      	it	lt
 800c3bc:	460b      	movlt	r3, r1
 800c3be:	460c      	mov	r4, r1
 800c3c0:	bfbc      	itt	lt
 800c3c2:	464c      	movlt	r4, r9
 800c3c4:	4699      	movlt	r9, r3
 800c3c6:	6927      	ldr	r7, [r4, #16]
 800c3c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c3cc:	68a3      	ldr	r3, [r4, #8]
 800c3ce:	6861      	ldr	r1, [r4, #4]
 800c3d0:	eb07 060a 	add.w	r6, r7, sl
 800c3d4:	42b3      	cmp	r3, r6
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	bfb8      	it	lt
 800c3da:	3101      	addlt	r1, #1
 800c3dc:	f7ff feda 	bl	800c194 <_Balloc>
 800c3e0:	b930      	cbnz	r0, 800c3f0 <__multiply+0x44>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	4b44      	ldr	r3, [pc, #272]	; (800c4f8 <__multiply+0x14c>)
 800c3e6:	4845      	ldr	r0, [pc, #276]	; (800c4fc <__multiply+0x150>)
 800c3e8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c3ec:	f000 fc64 	bl	800ccb8 <__assert_func>
 800c3f0:	f100 0514 	add.w	r5, r0, #20
 800c3f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c3f8:	462b      	mov	r3, r5
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	4543      	cmp	r3, r8
 800c3fe:	d321      	bcc.n	800c444 <__multiply+0x98>
 800c400:	f104 0314 	add.w	r3, r4, #20
 800c404:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c408:	f109 0314 	add.w	r3, r9, #20
 800c40c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c410:	9202      	str	r2, [sp, #8]
 800c412:	1b3a      	subs	r2, r7, r4
 800c414:	3a15      	subs	r2, #21
 800c416:	f022 0203 	bic.w	r2, r2, #3
 800c41a:	3204      	adds	r2, #4
 800c41c:	f104 0115 	add.w	r1, r4, #21
 800c420:	428f      	cmp	r7, r1
 800c422:	bf38      	it	cc
 800c424:	2204      	movcc	r2, #4
 800c426:	9201      	str	r2, [sp, #4]
 800c428:	9a02      	ldr	r2, [sp, #8]
 800c42a:	9303      	str	r3, [sp, #12]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d80c      	bhi.n	800c44a <__multiply+0x9e>
 800c430:	2e00      	cmp	r6, #0
 800c432:	dd03      	ble.n	800c43c <__multiply+0x90>
 800c434:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d05b      	beq.n	800c4f4 <__multiply+0x148>
 800c43c:	6106      	str	r6, [r0, #16]
 800c43e:	b005      	add	sp, #20
 800c440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c444:	f843 2b04 	str.w	r2, [r3], #4
 800c448:	e7d8      	b.n	800c3fc <__multiply+0x50>
 800c44a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c44e:	f1ba 0f00 	cmp.w	sl, #0
 800c452:	d024      	beq.n	800c49e <__multiply+0xf2>
 800c454:	f104 0e14 	add.w	lr, r4, #20
 800c458:	46a9      	mov	r9, r5
 800c45a:	f04f 0c00 	mov.w	ip, #0
 800c45e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c462:	f8d9 1000 	ldr.w	r1, [r9]
 800c466:	fa1f fb82 	uxth.w	fp, r2
 800c46a:	b289      	uxth	r1, r1
 800c46c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c470:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c474:	f8d9 2000 	ldr.w	r2, [r9]
 800c478:	4461      	add	r1, ip
 800c47a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c47e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c482:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c486:	b289      	uxth	r1, r1
 800c488:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c48c:	4577      	cmp	r7, lr
 800c48e:	f849 1b04 	str.w	r1, [r9], #4
 800c492:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c496:	d8e2      	bhi.n	800c45e <__multiply+0xb2>
 800c498:	9a01      	ldr	r2, [sp, #4]
 800c49a:	f845 c002 	str.w	ip, [r5, r2]
 800c49e:	9a03      	ldr	r2, [sp, #12]
 800c4a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c4a4:	3304      	adds	r3, #4
 800c4a6:	f1b9 0f00 	cmp.w	r9, #0
 800c4aa:	d021      	beq.n	800c4f0 <__multiply+0x144>
 800c4ac:	6829      	ldr	r1, [r5, #0]
 800c4ae:	f104 0c14 	add.w	ip, r4, #20
 800c4b2:	46ae      	mov	lr, r5
 800c4b4:	f04f 0a00 	mov.w	sl, #0
 800c4b8:	f8bc b000 	ldrh.w	fp, [ip]
 800c4bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c4c0:	fb09 220b 	mla	r2, r9, fp, r2
 800c4c4:	4452      	add	r2, sl
 800c4c6:	b289      	uxth	r1, r1
 800c4c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c4cc:	f84e 1b04 	str.w	r1, [lr], #4
 800c4d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c4d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c4d8:	f8be 1000 	ldrh.w	r1, [lr]
 800c4dc:	fb09 110a 	mla	r1, r9, sl, r1
 800c4e0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c4e4:	4567      	cmp	r7, ip
 800c4e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c4ea:	d8e5      	bhi.n	800c4b8 <__multiply+0x10c>
 800c4ec:	9a01      	ldr	r2, [sp, #4]
 800c4ee:	50a9      	str	r1, [r5, r2]
 800c4f0:	3504      	adds	r5, #4
 800c4f2:	e799      	b.n	800c428 <__multiply+0x7c>
 800c4f4:	3e01      	subs	r6, #1
 800c4f6:	e79b      	b.n	800c430 <__multiply+0x84>
 800c4f8:	0801032c 	.word	0x0801032c
 800c4fc:	0801033d 	.word	0x0801033d

0800c500 <__pow5mult>:
 800c500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c504:	4615      	mov	r5, r2
 800c506:	f012 0203 	ands.w	r2, r2, #3
 800c50a:	4606      	mov	r6, r0
 800c50c:	460f      	mov	r7, r1
 800c50e:	d007      	beq.n	800c520 <__pow5mult+0x20>
 800c510:	4c25      	ldr	r4, [pc, #148]	; (800c5a8 <__pow5mult+0xa8>)
 800c512:	3a01      	subs	r2, #1
 800c514:	2300      	movs	r3, #0
 800c516:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c51a:	f7ff fe9d 	bl	800c258 <__multadd>
 800c51e:	4607      	mov	r7, r0
 800c520:	10ad      	asrs	r5, r5, #2
 800c522:	d03d      	beq.n	800c5a0 <__pow5mult+0xa0>
 800c524:	69f4      	ldr	r4, [r6, #28]
 800c526:	b97c      	cbnz	r4, 800c548 <__pow5mult+0x48>
 800c528:	2010      	movs	r0, #16
 800c52a:	f7ff fd7f 	bl	800c02c <malloc>
 800c52e:	4602      	mov	r2, r0
 800c530:	61f0      	str	r0, [r6, #28]
 800c532:	b928      	cbnz	r0, 800c540 <__pow5mult+0x40>
 800c534:	4b1d      	ldr	r3, [pc, #116]	; (800c5ac <__pow5mult+0xac>)
 800c536:	481e      	ldr	r0, [pc, #120]	; (800c5b0 <__pow5mult+0xb0>)
 800c538:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c53c:	f000 fbbc 	bl	800ccb8 <__assert_func>
 800c540:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c544:	6004      	str	r4, [r0, #0]
 800c546:	60c4      	str	r4, [r0, #12]
 800c548:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c54c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c550:	b94c      	cbnz	r4, 800c566 <__pow5mult+0x66>
 800c552:	f240 2171 	movw	r1, #625	; 0x271
 800c556:	4630      	mov	r0, r6
 800c558:	f7ff ff12 	bl	800c380 <__i2b>
 800c55c:	2300      	movs	r3, #0
 800c55e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c562:	4604      	mov	r4, r0
 800c564:	6003      	str	r3, [r0, #0]
 800c566:	f04f 0900 	mov.w	r9, #0
 800c56a:	07eb      	lsls	r3, r5, #31
 800c56c:	d50a      	bpl.n	800c584 <__pow5mult+0x84>
 800c56e:	4639      	mov	r1, r7
 800c570:	4622      	mov	r2, r4
 800c572:	4630      	mov	r0, r6
 800c574:	f7ff ff1a 	bl	800c3ac <__multiply>
 800c578:	4639      	mov	r1, r7
 800c57a:	4680      	mov	r8, r0
 800c57c:	4630      	mov	r0, r6
 800c57e:	f7ff fe49 	bl	800c214 <_Bfree>
 800c582:	4647      	mov	r7, r8
 800c584:	106d      	asrs	r5, r5, #1
 800c586:	d00b      	beq.n	800c5a0 <__pow5mult+0xa0>
 800c588:	6820      	ldr	r0, [r4, #0]
 800c58a:	b938      	cbnz	r0, 800c59c <__pow5mult+0x9c>
 800c58c:	4622      	mov	r2, r4
 800c58e:	4621      	mov	r1, r4
 800c590:	4630      	mov	r0, r6
 800c592:	f7ff ff0b 	bl	800c3ac <__multiply>
 800c596:	6020      	str	r0, [r4, #0]
 800c598:	f8c0 9000 	str.w	r9, [r0]
 800c59c:	4604      	mov	r4, r0
 800c59e:	e7e4      	b.n	800c56a <__pow5mult+0x6a>
 800c5a0:	4638      	mov	r0, r7
 800c5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a6:	bf00      	nop
 800c5a8:	08010488 	.word	0x08010488
 800c5ac:	080102bd 	.word	0x080102bd
 800c5b0:	0801033d 	.word	0x0801033d

0800c5b4 <__lshift>:
 800c5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b8:	460c      	mov	r4, r1
 800c5ba:	6849      	ldr	r1, [r1, #4]
 800c5bc:	6923      	ldr	r3, [r4, #16]
 800c5be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5c2:	68a3      	ldr	r3, [r4, #8]
 800c5c4:	4607      	mov	r7, r0
 800c5c6:	4691      	mov	r9, r2
 800c5c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5cc:	f108 0601 	add.w	r6, r8, #1
 800c5d0:	42b3      	cmp	r3, r6
 800c5d2:	db0b      	blt.n	800c5ec <__lshift+0x38>
 800c5d4:	4638      	mov	r0, r7
 800c5d6:	f7ff fddd 	bl	800c194 <_Balloc>
 800c5da:	4605      	mov	r5, r0
 800c5dc:	b948      	cbnz	r0, 800c5f2 <__lshift+0x3e>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	4b28      	ldr	r3, [pc, #160]	; (800c684 <__lshift+0xd0>)
 800c5e2:	4829      	ldr	r0, [pc, #164]	; (800c688 <__lshift+0xd4>)
 800c5e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c5e8:	f000 fb66 	bl	800ccb8 <__assert_func>
 800c5ec:	3101      	adds	r1, #1
 800c5ee:	005b      	lsls	r3, r3, #1
 800c5f0:	e7ee      	b.n	800c5d0 <__lshift+0x1c>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	f100 0114 	add.w	r1, r0, #20
 800c5f8:	f100 0210 	add.w	r2, r0, #16
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	4553      	cmp	r3, sl
 800c600:	db33      	blt.n	800c66a <__lshift+0xb6>
 800c602:	6920      	ldr	r0, [r4, #16]
 800c604:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c608:	f104 0314 	add.w	r3, r4, #20
 800c60c:	f019 091f 	ands.w	r9, r9, #31
 800c610:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c614:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c618:	d02b      	beq.n	800c672 <__lshift+0xbe>
 800c61a:	f1c9 0e20 	rsb	lr, r9, #32
 800c61e:	468a      	mov	sl, r1
 800c620:	2200      	movs	r2, #0
 800c622:	6818      	ldr	r0, [r3, #0]
 800c624:	fa00 f009 	lsl.w	r0, r0, r9
 800c628:	4310      	orrs	r0, r2
 800c62a:	f84a 0b04 	str.w	r0, [sl], #4
 800c62e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c632:	459c      	cmp	ip, r3
 800c634:	fa22 f20e 	lsr.w	r2, r2, lr
 800c638:	d8f3      	bhi.n	800c622 <__lshift+0x6e>
 800c63a:	ebac 0304 	sub.w	r3, ip, r4
 800c63e:	3b15      	subs	r3, #21
 800c640:	f023 0303 	bic.w	r3, r3, #3
 800c644:	3304      	adds	r3, #4
 800c646:	f104 0015 	add.w	r0, r4, #21
 800c64a:	4584      	cmp	ip, r0
 800c64c:	bf38      	it	cc
 800c64e:	2304      	movcc	r3, #4
 800c650:	50ca      	str	r2, [r1, r3]
 800c652:	b10a      	cbz	r2, 800c658 <__lshift+0xa4>
 800c654:	f108 0602 	add.w	r6, r8, #2
 800c658:	3e01      	subs	r6, #1
 800c65a:	4638      	mov	r0, r7
 800c65c:	612e      	str	r6, [r5, #16]
 800c65e:	4621      	mov	r1, r4
 800c660:	f7ff fdd8 	bl	800c214 <_Bfree>
 800c664:	4628      	mov	r0, r5
 800c666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c66a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c66e:	3301      	adds	r3, #1
 800c670:	e7c5      	b.n	800c5fe <__lshift+0x4a>
 800c672:	3904      	subs	r1, #4
 800c674:	f853 2b04 	ldr.w	r2, [r3], #4
 800c678:	f841 2f04 	str.w	r2, [r1, #4]!
 800c67c:	459c      	cmp	ip, r3
 800c67e:	d8f9      	bhi.n	800c674 <__lshift+0xc0>
 800c680:	e7ea      	b.n	800c658 <__lshift+0xa4>
 800c682:	bf00      	nop
 800c684:	0801032c 	.word	0x0801032c
 800c688:	0801033d 	.word	0x0801033d

0800c68c <__mcmp>:
 800c68c:	b530      	push	{r4, r5, lr}
 800c68e:	6902      	ldr	r2, [r0, #16]
 800c690:	690c      	ldr	r4, [r1, #16]
 800c692:	1b12      	subs	r2, r2, r4
 800c694:	d10e      	bne.n	800c6b4 <__mcmp+0x28>
 800c696:	f100 0314 	add.w	r3, r0, #20
 800c69a:	3114      	adds	r1, #20
 800c69c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c6a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c6a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c6a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c6ac:	42a5      	cmp	r5, r4
 800c6ae:	d003      	beq.n	800c6b8 <__mcmp+0x2c>
 800c6b0:	d305      	bcc.n	800c6be <__mcmp+0x32>
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	bd30      	pop	{r4, r5, pc}
 800c6b8:	4283      	cmp	r3, r0
 800c6ba:	d3f3      	bcc.n	800c6a4 <__mcmp+0x18>
 800c6bc:	e7fa      	b.n	800c6b4 <__mcmp+0x28>
 800c6be:	f04f 32ff 	mov.w	r2, #4294967295
 800c6c2:	e7f7      	b.n	800c6b4 <__mcmp+0x28>

0800c6c4 <__mdiff>:
 800c6c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c8:	460c      	mov	r4, r1
 800c6ca:	4606      	mov	r6, r0
 800c6cc:	4611      	mov	r1, r2
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	4690      	mov	r8, r2
 800c6d2:	f7ff ffdb 	bl	800c68c <__mcmp>
 800c6d6:	1e05      	subs	r5, r0, #0
 800c6d8:	d110      	bne.n	800c6fc <__mdiff+0x38>
 800c6da:	4629      	mov	r1, r5
 800c6dc:	4630      	mov	r0, r6
 800c6de:	f7ff fd59 	bl	800c194 <_Balloc>
 800c6e2:	b930      	cbnz	r0, 800c6f2 <__mdiff+0x2e>
 800c6e4:	4b3a      	ldr	r3, [pc, #232]	; (800c7d0 <__mdiff+0x10c>)
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	f240 2137 	movw	r1, #567	; 0x237
 800c6ec:	4839      	ldr	r0, [pc, #228]	; (800c7d4 <__mdiff+0x110>)
 800c6ee:	f000 fae3 	bl	800ccb8 <__assert_func>
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c6f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6fc:	bfa4      	itt	ge
 800c6fe:	4643      	movge	r3, r8
 800c700:	46a0      	movge	r8, r4
 800c702:	4630      	mov	r0, r6
 800c704:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c708:	bfa6      	itte	ge
 800c70a:	461c      	movge	r4, r3
 800c70c:	2500      	movge	r5, #0
 800c70e:	2501      	movlt	r5, #1
 800c710:	f7ff fd40 	bl	800c194 <_Balloc>
 800c714:	b920      	cbnz	r0, 800c720 <__mdiff+0x5c>
 800c716:	4b2e      	ldr	r3, [pc, #184]	; (800c7d0 <__mdiff+0x10c>)
 800c718:	4602      	mov	r2, r0
 800c71a:	f240 2145 	movw	r1, #581	; 0x245
 800c71e:	e7e5      	b.n	800c6ec <__mdiff+0x28>
 800c720:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c724:	6926      	ldr	r6, [r4, #16]
 800c726:	60c5      	str	r5, [r0, #12]
 800c728:	f104 0914 	add.w	r9, r4, #20
 800c72c:	f108 0514 	add.w	r5, r8, #20
 800c730:	f100 0e14 	add.w	lr, r0, #20
 800c734:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c738:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c73c:	f108 0210 	add.w	r2, r8, #16
 800c740:	46f2      	mov	sl, lr
 800c742:	2100      	movs	r1, #0
 800c744:	f859 3b04 	ldr.w	r3, [r9], #4
 800c748:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c74c:	fa11 f88b 	uxtah	r8, r1, fp
 800c750:	b299      	uxth	r1, r3
 800c752:	0c1b      	lsrs	r3, r3, #16
 800c754:	eba8 0801 	sub.w	r8, r8, r1
 800c758:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c75c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c760:	fa1f f888 	uxth.w	r8, r8
 800c764:	1419      	asrs	r1, r3, #16
 800c766:	454e      	cmp	r6, r9
 800c768:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c76c:	f84a 3b04 	str.w	r3, [sl], #4
 800c770:	d8e8      	bhi.n	800c744 <__mdiff+0x80>
 800c772:	1b33      	subs	r3, r6, r4
 800c774:	3b15      	subs	r3, #21
 800c776:	f023 0303 	bic.w	r3, r3, #3
 800c77a:	3304      	adds	r3, #4
 800c77c:	3415      	adds	r4, #21
 800c77e:	42a6      	cmp	r6, r4
 800c780:	bf38      	it	cc
 800c782:	2304      	movcc	r3, #4
 800c784:	441d      	add	r5, r3
 800c786:	4473      	add	r3, lr
 800c788:	469e      	mov	lr, r3
 800c78a:	462e      	mov	r6, r5
 800c78c:	4566      	cmp	r6, ip
 800c78e:	d30e      	bcc.n	800c7ae <__mdiff+0xea>
 800c790:	f10c 0203 	add.w	r2, ip, #3
 800c794:	1b52      	subs	r2, r2, r5
 800c796:	f022 0203 	bic.w	r2, r2, #3
 800c79a:	3d03      	subs	r5, #3
 800c79c:	45ac      	cmp	ip, r5
 800c79e:	bf38      	it	cc
 800c7a0:	2200      	movcc	r2, #0
 800c7a2:	4413      	add	r3, r2
 800c7a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c7a8:	b17a      	cbz	r2, 800c7ca <__mdiff+0x106>
 800c7aa:	6107      	str	r7, [r0, #16]
 800c7ac:	e7a4      	b.n	800c6f8 <__mdiff+0x34>
 800c7ae:	f856 8b04 	ldr.w	r8, [r6], #4
 800c7b2:	fa11 f288 	uxtah	r2, r1, r8
 800c7b6:	1414      	asrs	r4, r2, #16
 800c7b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c7bc:	b292      	uxth	r2, r2
 800c7be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c7c2:	f84e 2b04 	str.w	r2, [lr], #4
 800c7c6:	1421      	asrs	r1, r4, #16
 800c7c8:	e7e0      	b.n	800c78c <__mdiff+0xc8>
 800c7ca:	3f01      	subs	r7, #1
 800c7cc:	e7ea      	b.n	800c7a4 <__mdiff+0xe0>
 800c7ce:	bf00      	nop
 800c7d0:	0801032c 	.word	0x0801032c
 800c7d4:	0801033d 	.word	0x0801033d

0800c7d8 <__d2b>:
 800c7d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7dc:	460f      	mov	r7, r1
 800c7de:	2101      	movs	r1, #1
 800c7e0:	ec59 8b10 	vmov	r8, r9, d0
 800c7e4:	4616      	mov	r6, r2
 800c7e6:	f7ff fcd5 	bl	800c194 <_Balloc>
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	b930      	cbnz	r0, 800c7fc <__d2b+0x24>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	4b24      	ldr	r3, [pc, #144]	; (800c884 <__d2b+0xac>)
 800c7f2:	4825      	ldr	r0, [pc, #148]	; (800c888 <__d2b+0xb0>)
 800c7f4:	f240 310f 	movw	r1, #783	; 0x30f
 800c7f8:	f000 fa5e 	bl	800ccb8 <__assert_func>
 800c7fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c800:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c804:	bb2d      	cbnz	r5, 800c852 <__d2b+0x7a>
 800c806:	9301      	str	r3, [sp, #4]
 800c808:	f1b8 0300 	subs.w	r3, r8, #0
 800c80c:	d026      	beq.n	800c85c <__d2b+0x84>
 800c80e:	4668      	mov	r0, sp
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	f7ff fd87 	bl	800c324 <__lo0bits>
 800c816:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c81a:	b1e8      	cbz	r0, 800c858 <__d2b+0x80>
 800c81c:	f1c0 0320 	rsb	r3, r0, #32
 800c820:	fa02 f303 	lsl.w	r3, r2, r3
 800c824:	430b      	orrs	r3, r1
 800c826:	40c2      	lsrs	r2, r0
 800c828:	6163      	str	r3, [r4, #20]
 800c82a:	9201      	str	r2, [sp, #4]
 800c82c:	9b01      	ldr	r3, [sp, #4]
 800c82e:	61a3      	str	r3, [r4, #24]
 800c830:	2b00      	cmp	r3, #0
 800c832:	bf14      	ite	ne
 800c834:	2202      	movne	r2, #2
 800c836:	2201      	moveq	r2, #1
 800c838:	6122      	str	r2, [r4, #16]
 800c83a:	b1bd      	cbz	r5, 800c86c <__d2b+0x94>
 800c83c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c840:	4405      	add	r5, r0
 800c842:	603d      	str	r5, [r7, #0]
 800c844:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c848:	6030      	str	r0, [r6, #0]
 800c84a:	4620      	mov	r0, r4
 800c84c:	b003      	add	sp, #12
 800c84e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c856:	e7d6      	b.n	800c806 <__d2b+0x2e>
 800c858:	6161      	str	r1, [r4, #20]
 800c85a:	e7e7      	b.n	800c82c <__d2b+0x54>
 800c85c:	a801      	add	r0, sp, #4
 800c85e:	f7ff fd61 	bl	800c324 <__lo0bits>
 800c862:	9b01      	ldr	r3, [sp, #4]
 800c864:	6163      	str	r3, [r4, #20]
 800c866:	3020      	adds	r0, #32
 800c868:	2201      	movs	r2, #1
 800c86a:	e7e5      	b.n	800c838 <__d2b+0x60>
 800c86c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c870:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c874:	6038      	str	r0, [r7, #0]
 800c876:	6918      	ldr	r0, [r3, #16]
 800c878:	f7ff fd34 	bl	800c2e4 <__hi0bits>
 800c87c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c880:	e7e2      	b.n	800c848 <__d2b+0x70>
 800c882:	bf00      	nop
 800c884:	0801032c 	.word	0x0801032c
 800c888:	0801033d 	.word	0x0801033d

0800c88c <__ssputs_r>:
 800c88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c890:	688e      	ldr	r6, [r1, #8]
 800c892:	461f      	mov	r7, r3
 800c894:	42be      	cmp	r6, r7
 800c896:	680b      	ldr	r3, [r1, #0]
 800c898:	4682      	mov	sl, r0
 800c89a:	460c      	mov	r4, r1
 800c89c:	4690      	mov	r8, r2
 800c89e:	d82c      	bhi.n	800c8fa <__ssputs_r+0x6e>
 800c8a0:	898a      	ldrh	r2, [r1, #12]
 800c8a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c8a6:	d026      	beq.n	800c8f6 <__ssputs_r+0x6a>
 800c8a8:	6965      	ldr	r5, [r4, #20]
 800c8aa:	6909      	ldr	r1, [r1, #16]
 800c8ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8b0:	eba3 0901 	sub.w	r9, r3, r1
 800c8b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8b8:	1c7b      	adds	r3, r7, #1
 800c8ba:	444b      	add	r3, r9
 800c8bc:	106d      	asrs	r5, r5, #1
 800c8be:	429d      	cmp	r5, r3
 800c8c0:	bf38      	it	cc
 800c8c2:	461d      	movcc	r5, r3
 800c8c4:	0553      	lsls	r3, r2, #21
 800c8c6:	d527      	bpl.n	800c918 <__ssputs_r+0x8c>
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	f7ff fbd7 	bl	800c07c <_malloc_r>
 800c8ce:	4606      	mov	r6, r0
 800c8d0:	b360      	cbz	r0, 800c92c <__ssputs_r+0xa0>
 800c8d2:	6921      	ldr	r1, [r4, #16]
 800c8d4:	464a      	mov	r2, r9
 800c8d6:	f7fe fcd4 	bl	800b282 <memcpy>
 800c8da:	89a3      	ldrh	r3, [r4, #12]
 800c8dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8e4:	81a3      	strh	r3, [r4, #12]
 800c8e6:	6126      	str	r6, [r4, #16]
 800c8e8:	6165      	str	r5, [r4, #20]
 800c8ea:	444e      	add	r6, r9
 800c8ec:	eba5 0509 	sub.w	r5, r5, r9
 800c8f0:	6026      	str	r6, [r4, #0]
 800c8f2:	60a5      	str	r5, [r4, #8]
 800c8f4:	463e      	mov	r6, r7
 800c8f6:	42be      	cmp	r6, r7
 800c8f8:	d900      	bls.n	800c8fc <__ssputs_r+0x70>
 800c8fa:	463e      	mov	r6, r7
 800c8fc:	6820      	ldr	r0, [r4, #0]
 800c8fe:	4632      	mov	r2, r6
 800c900:	4641      	mov	r1, r8
 800c902:	f7fe fc24 	bl	800b14e <memmove>
 800c906:	68a3      	ldr	r3, [r4, #8]
 800c908:	1b9b      	subs	r3, r3, r6
 800c90a:	60a3      	str	r3, [r4, #8]
 800c90c:	6823      	ldr	r3, [r4, #0]
 800c90e:	4433      	add	r3, r6
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	2000      	movs	r0, #0
 800c914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c918:	462a      	mov	r2, r5
 800c91a:	f000 fa13 	bl	800cd44 <_realloc_r>
 800c91e:	4606      	mov	r6, r0
 800c920:	2800      	cmp	r0, #0
 800c922:	d1e0      	bne.n	800c8e6 <__ssputs_r+0x5a>
 800c924:	6921      	ldr	r1, [r4, #16]
 800c926:	4650      	mov	r0, sl
 800c928:	f7ff fb34 	bl	800bf94 <_free_r>
 800c92c:	230c      	movs	r3, #12
 800c92e:	f8ca 3000 	str.w	r3, [sl]
 800c932:	89a3      	ldrh	r3, [r4, #12]
 800c934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c938:	81a3      	strh	r3, [r4, #12]
 800c93a:	f04f 30ff 	mov.w	r0, #4294967295
 800c93e:	e7e9      	b.n	800c914 <__ssputs_r+0x88>

0800c940 <_svfiprintf_r>:
 800c940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c944:	4698      	mov	r8, r3
 800c946:	898b      	ldrh	r3, [r1, #12]
 800c948:	061b      	lsls	r3, r3, #24
 800c94a:	b09d      	sub	sp, #116	; 0x74
 800c94c:	4607      	mov	r7, r0
 800c94e:	460d      	mov	r5, r1
 800c950:	4614      	mov	r4, r2
 800c952:	d50e      	bpl.n	800c972 <_svfiprintf_r+0x32>
 800c954:	690b      	ldr	r3, [r1, #16]
 800c956:	b963      	cbnz	r3, 800c972 <_svfiprintf_r+0x32>
 800c958:	2140      	movs	r1, #64	; 0x40
 800c95a:	f7ff fb8f 	bl	800c07c <_malloc_r>
 800c95e:	6028      	str	r0, [r5, #0]
 800c960:	6128      	str	r0, [r5, #16]
 800c962:	b920      	cbnz	r0, 800c96e <_svfiprintf_r+0x2e>
 800c964:	230c      	movs	r3, #12
 800c966:	603b      	str	r3, [r7, #0]
 800c968:	f04f 30ff 	mov.w	r0, #4294967295
 800c96c:	e0d0      	b.n	800cb10 <_svfiprintf_r+0x1d0>
 800c96e:	2340      	movs	r3, #64	; 0x40
 800c970:	616b      	str	r3, [r5, #20]
 800c972:	2300      	movs	r3, #0
 800c974:	9309      	str	r3, [sp, #36]	; 0x24
 800c976:	2320      	movs	r3, #32
 800c978:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c97c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c980:	2330      	movs	r3, #48	; 0x30
 800c982:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cb28 <_svfiprintf_r+0x1e8>
 800c986:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c98a:	f04f 0901 	mov.w	r9, #1
 800c98e:	4623      	mov	r3, r4
 800c990:	469a      	mov	sl, r3
 800c992:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c996:	b10a      	cbz	r2, 800c99c <_svfiprintf_r+0x5c>
 800c998:	2a25      	cmp	r2, #37	; 0x25
 800c99a:	d1f9      	bne.n	800c990 <_svfiprintf_r+0x50>
 800c99c:	ebba 0b04 	subs.w	fp, sl, r4
 800c9a0:	d00b      	beq.n	800c9ba <_svfiprintf_r+0x7a>
 800c9a2:	465b      	mov	r3, fp
 800c9a4:	4622      	mov	r2, r4
 800c9a6:	4629      	mov	r1, r5
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	f7ff ff6f 	bl	800c88c <__ssputs_r>
 800c9ae:	3001      	adds	r0, #1
 800c9b0:	f000 80a9 	beq.w	800cb06 <_svfiprintf_r+0x1c6>
 800c9b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9b6:	445a      	add	r2, fp
 800c9b8:	9209      	str	r2, [sp, #36]	; 0x24
 800c9ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	f000 80a1 	beq.w	800cb06 <_svfiprintf_r+0x1c6>
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9ce:	f10a 0a01 	add.w	sl, sl, #1
 800c9d2:	9304      	str	r3, [sp, #16]
 800c9d4:	9307      	str	r3, [sp, #28]
 800c9d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9da:	931a      	str	r3, [sp, #104]	; 0x68
 800c9dc:	4654      	mov	r4, sl
 800c9de:	2205      	movs	r2, #5
 800c9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9e4:	4850      	ldr	r0, [pc, #320]	; (800cb28 <_svfiprintf_r+0x1e8>)
 800c9e6:	f7f3 fbfb 	bl	80001e0 <memchr>
 800c9ea:	9a04      	ldr	r2, [sp, #16]
 800c9ec:	b9d8      	cbnz	r0, 800ca26 <_svfiprintf_r+0xe6>
 800c9ee:	06d0      	lsls	r0, r2, #27
 800c9f0:	bf44      	itt	mi
 800c9f2:	2320      	movmi	r3, #32
 800c9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9f8:	0711      	lsls	r1, r2, #28
 800c9fa:	bf44      	itt	mi
 800c9fc:	232b      	movmi	r3, #43	; 0x2b
 800c9fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca02:	f89a 3000 	ldrb.w	r3, [sl]
 800ca06:	2b2a      	cmp	r3, #42	; 0x2a
 800ca08:	d015      	beq.n	800ca36 <_svfiprintf_r+0xf6>
 800ca0a:	9a07      	ldr	r2, [sp, #28]
 800ca0c:	4654      	mov	r4, sl
 800ca0e:	2000      	movs	r0, #0
 800ca10:	f04f 0c0a 	mov.w	ip, #10
 800ca14:	4621      	mov	r1, r4
 800ca16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca1a:	3b30      	subs	r3, #48	; 0x30
 800ca1c:	2b09      	cmp	r3, #9
 800ca1e:	d94d      	bls.n	800cabc <_svfiprintf_r+0x17c>
 800ca20:	b1b0      	cbz	r0, 800ca50 <_svfiprintf_r+0x110>
 800ca22:	9207      	str	r2, [sp, #28]
 800ca24:	e014      	b.n	800ca50 <_svfiprintf_r+0x110>
 800ca26:	eba0 0308 	sub.w	r3, r0, r8
 800ca2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	9304      	str	r3, [sp, #16]
 800ca32:	46a2      	mov	sl, r4
 800ca34:	e7d2      	b.n	800c9dc <_svfiprintf_r+0x9c>
 800ca36:	9b03      	ldr	r3, [sp, #12]
 800ca38:	1d19      	adds	r1, r3, #4
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	9103      	str	r1, [sp, #12]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	bfbb      	ittet	lt
 800ca42:	425b      	neglt	r3, r3
 800ca44:	f042 0202 	orrlt.w	r2, r2, #2
 800ca48:	9307      	strge	r3, [sp, #28]
 800ca4a:	9307      	strlt	r3, [sp, #28]
 800ca4c:	bfb8      	it	lt
 800ca4e:	9204      	strlt	r2, [sp, #16]
 800ca50:	7823      	ldrb	r3, [r4, #0]
 800ca52:	2b2e      	cmp	r3, #46	; 0x2e
 800ca54:	d10c      	bne.n	800ca70 <_svfiprintf_r+0x130>
 800ca56:	7863      	ldrb	r3, [r4, #1]
 800ca58:	2b2a      	cmp	r3, #42	; 0x2a
 800ca5a:	d134      	bne.n	800cac6 <_svfiprintf_r+0x186>
 800ca5c:	9b03      	ldr	r3, [sp, #12]
 800ca5e:	1d1a      	adds	r2, r3, #4
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	9203      	str	r2, [sp, #12]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	bfb8      	it	lt
 800ca68:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca6c:	3402      	adds	r4, #2
 800ca6e:	9305      	str	r3, [sp, #20]
 800ca70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cb38 <_svfiprintf_r+0x1f8>
 800ca74:	7821      	ldrb	r1, [r4, #0]
 800ca76:	2203      	movs	r2, #3
 800ca78:	4650      	mov	r0, sl
 800ca7a:	f7f3 fbb1 	bl	80001e0 <memchr>
 800ca7e:	b138      	cbz	r0, 800ca90 <_svfiprintf_r+0x150>
 800ca80:	9b04      	ldr	r3, [sp, #16]
 800ca82:	eba0 000a 	sub.w	r0, r0, sl
 800ca86:	2240      	movs	r2, #64	; 0x40
 800ca88:	4082      	lsls	r2, r0
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	3401      	adds	r4, #1
 800ca8e:	9304      	str	r3, [sp, #16]
 800ca90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca94:	4825      	ldr	r0, [pc, #148]	; (800cb2c <_svfiprintf_r+0x1ec>)
 800ca96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca9a:	2206      	movs	r2, #6
 800ca9c:	f7f3 fba0 	bl	80001e0 <memchr>
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d038      	beq.n	800cb16 <_svfiprintf_r+0x1d6>
 800caa4:	4b22      	ldr	r3, [pc, #136]	; (800cb30 <_svfiprintf_r+0x1f0>)
 800caa6:	bb1b      	cbnz	r3, 800caf0 <_svfiprintf_r+0x1b0>
 800caa8:	9b03      	ldr	r3, [sp, #12]
 800caaa:	3307      	adds	r3, #7
 800caac:	f023 0307 	bic.w	r3, r3, #7
 800cab0:	3308      	adds	r3, #8
 800cab2:	9303      	str	r3, [sp, #12]
 800cab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cab6:	4433      	add	r3, r6
 800cab8:	9309      	str	r3, [sp, #36]	; 0x24
 800caba:	e768      	b.n	800c98e <_svfiprintf_r+0x4e>
 800cabc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cac0:	460c      	mov	r4, r1
 800cac2:	2001      	movs	r0, #1
 800cac4:	e7a6      	b.n	800ca14 <_svfiprintf_r+0xd4>
 800cac6:	2300      	movs	r3, #0
 800cac8:	3401      	adds	r4, #1
 800caca:	9305      	str	r3, [sp, #20]
 800cacc:	4619      	mov	r1, r3
 800cace:	f04f 0c0a 	mov.w	ip, #10
 800cad2:	4620      	mov	r0, r4
 800cad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cad8:	3a30      	subs	r2, #48	; 0x30
 800cada:	2a09      	cmp	r2, #9
 800cadc:	d903      	bls.n	800cae6 <_svfiprintf_r+0x1a6>
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d0c6      	beq.n	800ca70 <_svfiprintf_r+0x130>
 800cae2:	9105      	str	r1, [sp, #20]
 800cae4:	e7c4      	b.n	800ca70 <_svfiprintf_r+0x130>
 800cae6:	fb0c 2101 	mla	r1, ip, r1, r2
 800caea:	4604      	mov	r4, r0
 800caec:	2301      	movs	r3, #1
 800caee:	e7f0      	b.n	800cad2 <_svfiprintf_r+0x192>
 800caf0:	ab03      	add	r3, sp, #12
 800caf2:	9300      	str	r3, [sp, #0]
 800caf4:	462a      	mov	r2, r5
 800caf6:	4b0f      	ldr	r3, [pc, #60]	; (800cb34 <_svfiprintf_r+0x1f4>)
 800caf8:	a904      	add	r1, sp, #16
 800cafa:	4638      	mov	r0, r7
 800cafc:	f7fd fe3c 	bl	800a778 <_printf_float>
 800cb00:	1c42      	adds	r2, r0, #1
 800cb02:	4606      	mov	r6, r0
 800cb04:	d1d6      	bne.n	800cab4 <_svfiprintf_r+0x174>
 800cb06:	89ab      	ldrh	r3, [r5, #12]
 800cb08:	065b      	lsls	r3, r3, #25
 800cb0a:	f53f af2d 	bmi.w	800c968 <_svfiprintf_r+0x28>
 800cb0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb10:	b01d      	add	sp, #116	; 0x74
 800cb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb16:	ab03      	add	r3, sp, #12
 800cb18:	9300      	str	r3, [sp, #0]
 800cb1a:	462a      	mov	r2, r5
 800cb1c:	4b05      	ldr	r3, [pc, #20]	; (800cb34 <_svfiprintf_r+0x1f4>)
 800cb1e:	a904      	add	r1, sp, #16
 800cb20:	4638      	mov	r0, r7
 800cb22:	f7fe f8cd 	bl	800acc0 <_printf_i>
 800cb26:	e7eb      	b.n	800cb00 <_svfiprintf_r+0x1c0>
 800cb28:	08010494 	.word	0x08010494
 800cb2c:	0801049e 	.word	0x0801049e
 800cb30:	0800a779 	.word	0x0800a779
 800cb34:	0800c88d 	.word	0x0800c88d
 800cb38:	0801049a 	.word	0x0801049a

0800cb3c <__sflush_r>:
 800cb3c:	898a      	ldrh	r2, [r1, #12]
 800cb3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb42:	4605      	mov	r5, r0
 800cb44:	0710      	lsls	r0, r2, #28
 800cb46:	460c      	mov	r4, r1
 800cb48:	d458      	bmi.n	800cbfc <__sflush_r+0xc0>
 800cb4a:	684b      	ldr	r3, [r1, #4]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	dc05      	bgt.n	800cb5c <__sflush_r+0x20>
 800cb50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	dc02      	bgt.n	800cb5c <__sflush_r+0x20>
 800cb56:	2000      	movs	r0, #0
 800cb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb5e:	2e00      	cmp	r6, #0
 800cb60:	d0f9      	beq.n	800cb56 <__sflush_r+0x1a>
 800cb62:	2300      	movs	r3, #0
 800cb64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb68:	682f      	ldr	r7, [r5, #0]
 800cb6a:	6a21      	ldr	r1, [r4, #32]
 800cb6c:	602b      	str	r3, [r5, #0]
 800cb6e:	d032      	beq.n	800cbd6 <__sflush_r+0x9a>
 800cb70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb72:	89a3      	ldrh	r3, [r4, #12]
 800cb74:	075a      	lsls	r2, r3, #29
 800cb76:	d505      	bpl.n	800cb84 <__sflush_r+0x48>
 800cb78:	6863      	ldr	r3, [r4, #4]
 800cb7a:	1ac0      	subs	r0, r0, r3
 800cb7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb7e:	b10b      	cbz	r3, 800cb84 <__sflush_r+0x48>
 800cb80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb82:	1ac0      	subs	r0, r0, r3
 800cb84:	2300      	movs	r3, #0
 800cb86:	4602      	mov	r2, r0
 800cb88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb8a:	6a21      	ldr	r1, [r4, #32]
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	47b0      	blx	r6
 800cb90:	1c43      	adds	r3, r0, #1
 800cb92:	89a3      	ldrh	r3, [r4, #12]
 800cb94:	d106      	bne.n	800cba4 <__sflush_r+0x68>
 800cb96:	6829      	ldr	r1, [r5, #0]
 800cb98:	291d      	cmp	r1, #29
 800cb9a:	d82b      	bhi.n	800cbf4 <__sflush_r+0xb8>
 800cb9c:	4a29      	ldr	r2, [pc, #164]	; (800cc44 <__sflush_r+0x108>)
 800cb9e:	410a      	asrs	r2, r1
 800cba0:	07d6      	lsls	r6, r2, #31
 800cba2:	d427      	bmi.n	800cbf4 <__sflush_r+0xb8>
 800cba4:	2200      	movs	r2, #0
 800cba6:	6062      	str	r2, [r4, #4]
 800cba8:	04d9      	lsls	r1, r3, #19
 800cbaa:	6922      	ldr	r2, [r4, #16]
 800cbac:	6022      	str	r2, [r4, #0]
 800cbae:	d504      	bpl.n	800cbba <__sflush_r+0x7e>
 800cbb0:	1c42      	adds	r2, r0, #1
 800cbb2:	d101      	bne.n	800cbb8 <__sflush_r+0x7c>
 800cbb4:	682b      	ldr	r3, [r5, #0]
 800cbb6:	b903      	cbnz	r3, 800cbba <__sflush_r+0x7e>
 800cbb8:	6560      	str	r0, [r4, #84]	; 0x54
 800cbba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbbc:	602f      	str	r7, [r5, #0]
 800cbbe:	2900      	cmp	r1, #0
 800cbc0:	d0c9      	beq.n	800cb56 <__sflush_r+0x1a>
 800cbc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbc6:	4299      	cmp	r1, r3
 800cbc8:	d002      	beq.n	800cbd0 <__sflush_r+0x94>
 800cbca:	4628      	mov	r0, r5
 800cbcc:	f7ff f9e2 	bl	800bf94 <_free_r>
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	6360      	str	r0, [r4, #52]	; 0x34
 800cbd4:	e7c0      	b.n	800cb58 <__sflush_r+0x1c>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	4628      	mov	r0, r5
 800cbda:	47b0      	blx	r6
 800cbdc:	1c41      	adds	r1, r0, #1
 800cbde:	d1c8      	bne.n	800cb72 <__sflush_r+0x36>
 800cbe0:	682b      	ldr	r3, [r5, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d0c5      	beq.n	800cb72 <__sflush_r+0x36>
 800cbe6:	2b1d      	cmp	r3, #29
 800cbe8:	d001      	beq.n	800cbee <__sflush_r+0xb2>
 800cbea:	2b16      	cmp	r3, #22
 800cbec:	d101      	bne.n	800cbf2 <__sflush_r+0xb6>
 800cbee:	602f      	str	r7, [r5, #0]
 800cbf0:	e7b1      	b.n	800cb56 <__sflush_r+0x1a>
 800cbf2:	89a3      	ldrh	r3, [r4, #12]
 800cbf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbf8:	81a3      	strh	r3, [r4, #12]
 800cbfa:	e7ad      	b.n	800cb58 <__sflush_r+0x1c>
 800cbfc:	690f      	ldr	r7, [r1, #16]
 800cbfe:	2f00      	cmp	r7, #0
 800cc00:	d0a9      	beq.n	800cb56 <__sflush_r+0x1a>
 800cc02:	0793      	lsls	r3, r2, #30
 800cc04:	680e      	ldr	r6, [r1, #0]
 800cc06:	bf08      	it	eq
 800cc08:	694b      	ldreq	r3, [r1, #20]
 800cc0a:	600f      	str	r7, [r1, #0]
 800cc0c:	bf18      	it	ne
 800cc0e:	2300      	movne	r3, #0
 800cc10:	eba6 0807 	sub.w	r8, r6, r7
 800cc14:	608b      	str	r3, [r1, #8]
 800cc16:	f1b8 0f00 	cmp.w	r8, #0
 800cc1a:	dd9c      	ble.n	800cb56 <__sflush_r+0x1a>
 800cc1c:	6a21      	ldr	r1, [r4, #32]
 800cc1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc20:	4643      	mov	r3, r8
 800cc22:	463a      	mov	r2, r7
 800cc24:	4628      	mov	r0, r5
 800cc26:	47b0      	blx	r6
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	dc06      	bgt.n	800cc3a <__sflush_r+0xfe>
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc32:	81a3      	strh	r3, [r4, #12]
 800cc34:	f04f 30ff 	mov.w	r0, #4294967295
 800cc38:	e78e      	b.n	800cb58 <__sflush_r+0x1c>
 800cc3a:	4407      	add	r7, r0
 800cc3c:	eba8 0800 	sub.w	r8, r8, r0
 800cc40:	e7e9      	b.n	800cc16 <__sflush_r+0xda>
 800cc42:	bf00      	nop
 800cc44:	dfbffffe 	.word	0xdfbffffe

0800cc48 <_fflush_r>:
 800cc48:	b538      	push	{r3, r4, r5, lr}
 800cc4a:	690b      	ldr	r3, [r1, #16]
 800cc4c:	4605      	mov	r5, r0
 800cc4e:	460c      	mov	r4, r1
 800cc50:	b913      	cbnz	r3, 800cc58 <_fflush_r+0x10>
 800cc52:	2500      	movs	r5, #0
 800cc54:	4628      	mov	r0, r5
 800cc56:	bd38      	pop	{r3, r4, r5, pc}
 800cc58:	b118      	cbz	r0, 800cc62 <_fflush_r+0x1a>
 800cc5a:	6a03      	ldr	r3, [r0, #32]
 800cc5c:	b90b      	cbnz	r3, 800cc62 <_fflush_r+0x1a>
 800cc5e:	f7fe f9dd 	bl	800b01c <__sinit>
 800cc62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d0f3      	beq.n	800cc52 <_fflush_r+0xa>
 800cc6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc6c:	07d0      	lsls	r0, r2, #31
 800cc6e:	d404      	bmi.n	800cc7a <_fflush_r+0x32>
 800cc70:	0599      	lsls	r1, r3, #22
 800cc72:	d402      	bmi.n	800cc7a <_fflush_r+0x32>
 800cc74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc76:	f7fe fb02 	bl	800b27e <__retarget_lock_acquire_recursive>
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	4621      	mov	r1, r4
 800cc7e:	f7ff ff5d 	bl	800cb3c <__sflush_r>
 800cc82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc84:	07da      	lsls	r2, r3, #31
 800cc86:	4605      	mov	r5, r0
 800cc88:	d4e4      	bmi.n	800cc54 <_fflush_r+0xc>
 800cc8a:	89a3      	ldrh	r3, [r4, #12]
 800cc8c:	059b      	lsls	r3, r3, #22
 800cc8e:	d4e1      	bmi.n	800cc54 <_fflush_r+0xc>
 800cc90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc92:	f7fe faf5 	bl	800b280 <__retarget_lock_release_recursive>
 800cc96:	e7dd      	b.n	800cc54 <_fflush_r+0xc>

0800cc98 <_sbrk_r>:
 800cc98:	b538      	push	{r3, r4, r5, lr}
 800cc9a:	4d06      	ldr	r5, [pc, #24]	; (800ccb4 <_sbrk_r+0x1c>)
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	4604      	mov	r4, r0
 800cca0:	4608      	mov	r0, r1
 800cca2:	602b      	str	r3, [r5, #0]
 800cca4:	f7f6 f838 	bl	8002d18 <_sbrk>
 800cca8:	1c43      	adds	r3, r0, #1
 800ccaa:	d102      	bne.n	800ccb2 <_sbrk_r+0x1a>
 800ccac:	682b      	ldr	r3, [r5, #0]
 800ccae:	b103      	cbz	r3, 800ccb2 <_sbrk_r+0x1a>
 800ccb0:	6023      	str	r3, [r4, #0]
 800ccb2:	bd38      	pop	{r3, r4, r5, pc}
 800ccb4:	200019a4 	.word	0x200019a4

0800ccb8 <__assert_func>:
 800ccb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccba:	4614      	mov	r4, r2
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	4b09      	ldr	r3, [pc, #36]	; (800cce4 <__assert_func+0x2c>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	68d8      	ldr	r0, [r3, #12]
 800ccc6:	b14c      	cbz	r4, 800ccdc <__assert_func+0x24>
 800ccc8:	4b07      	ldr	r3, [pc, #28]	; (800cce8 <__assert_func+0x30>)
 800ccca:	9100      	str	r1, [sp, #0]
 800cccc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ccd0:	4906      	ldr	r1, [pc, #24]	; (800ccec <__assert_func+0x34>)
 800ccd2:	462b      	mov	r3, r5
 800ccd4:	f000 f872 	bl	800cdbc <fiprintf>
 800ccd8:	f000 f882 	bl	800cde0 <abort>
 800ccdc:	4b04      	ldr	r3, [pc, #16]	; (800ccf0 <__assert_func+0x38>)
 800ccde:	461c      	mov	r4, r3
 800cce0:	e7f3      	b.n	800ccca <__assert_func+0x12>
 800cce2:	bf00      	nop
 800cce4:	200006dc 	.word	0x200006dc
 800cce8:	080104af 	.word	0x080104af
 800ccec:	080104bc 	.word	0x080104bc
 800ccf0:	080104ea 	.word	0x080104ea

0800ccf4 <_calloc_r>:
 800ccf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccf6:	fba1 2402 	umull	r2, r4, r1, r2
 800ccfa:	b94c      	cbnz	r4, 800cd10 <_calloc_r+0x1c>
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	9201      	str	r2, [sp, #4]
 800cd00:	f7ff f9bc 	bl	800c07c <_malloc_r>
 800cd04:	9a01      	ldr	r2, [sp, #4]
 800cd06:	4605      	mov	r5, r0
 800cd08:	b930      	cbnz	r0, 800cd18 <_calloc_r+0x24>
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	b003      	add	sp, #12
 800cd0e:	bd30      	pop	{r4, r5, pc}
 800cd10:	220c      	movs	r2, #12
 800cd12:	6002      	str	r2, [r0, #0]
 800cd14:	2500      	movs	r5, #0
 800cd16:	e7f8      	b.n	800cd0a <_calloc_r+0x16>
 800cd18:	4621      	mov	r1, r4
 800cd1a:	f7fe fa32 	bl	800b182 <memset>
 800cd1e:	e7f4      	b.n	800cd0a <_calloc_r+0x16>

0800cd20 <__ascii_mbtowc>:
 800cd20:	b082      	sub	sp, #8
 800cd22:	b901      	cbnz	r1, 800cd26 <__ascii_mbtowc+0x6>
 800cd24:	a901      	add	r1, sp, #4
 800cd26:	b142      	cbz	r2, 800cd3a <__ascii_mbtowc+0x1a>
 800cd28:	b14b      	cbz	r3, 800cd3e <__ascii_mbtowc+0x1e>
 800cd2a:	7813      	ldrb	r3, [r2, #0]
 800cd2c:	600b      	str	r3, [r1, #0]
 800cd2e:	7812      	ldrb	r2, [r2, #0]
 800cd30:	1e10      	subs	r0, r2, #0
 800cd32:	bf18      	it	ne
 800cd34:	2001      	movne	r0, #1
 800cd36:	b002      	add	sp, #8
 800cd38:	4770      	bx	lr
 800cd3a:	4610      	mov	r0, r2
 800cd3c:	e7fb      	b.n	800cd36 <__ascii_mbtowc+0x16>
 800cd3e:	f06f 0001 	mvn.w	r0, #1
 800cd42:	e7f8      	b.n	800cd36 <__ascii_mbtowc+0x16>

0800cd44 <_realloc_r>:
 800cd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd48:	4680      	mov	r8, r0
 800cd4a:	4614      	mov	r4, r2
 800cd4c:	460e      	mov	r6, r1
 800cd4e:	b921      	cbnz	r1, 800cd5a <_realloc_r+0x16>
 800cd50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd54:	4611      	mov	r1, r2
 800cd56:	f7ff b991 	b.w	800c07c <_malloc_r>
 800cd5a:	b92a      	cbnz	r2, 800cd68 <_realloc_r+0x24>
 800cd5c:	f7ff f91a 	bl	800bf94 <_free_r>
 800cd60:	4625      	mov	r5, r4
 800cd62:	4628      	mov	r0, r5
 800cd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd68:	f000 f841 	bl	800cdee <_malloc_usable_size_r>
 800cd6c:	4284      	cmp	r4, r0
 800cd6e:	4607      	mov	r7, r0
 800cd70:	d802      	bhi.n	800cd78 <_realloc_r+0x34>
 800cd72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd76:	d812      	bhi.n	800cd9e <_realloc_r+0x5a>
 800cd78:	4621      	mov	r1, r4
 800cd7a:	4640      	mov	r0, r8
 800cd7c:	f7ff f97e 	bl	800c07c <_malloc_r>
 800cd80:	4605      	mov	r5, r0
 800cd82:	2800      	cmp	r0, #0
 800cd84:	d0ed      	beq.n	800cd62 <_realloc_r+0x1e>
 800cd86:	42bc      	cmp	r4, r7
 800cd88:	4622      	mov	r2, r4
 800cd8a:	4631      	mov	r1, r6
 800cd8c:	bf28      	it	cs
 800cd8e:	463a      	movcs	r2, r7
 800cd90:	f7fe fa77 	bl	800b282 <memcpy>
 800cd94:	4631      	mov	r1, r6
 800cd96:	4640      	mov	r0, r8
 800cd98:	f7ff f8fc 	bl	800bf94 <_free_r>
 800cd9c:	e7e1      	b.n	800cd62 <_realloc_r+0x1e>
 800cd9e:	4635      	mov	r5, r6
 800cda0:	e7df      	b.n	800cd62 <_realloc_r+0x1e>

0800cda2 <__ascii_wctomb>:
 800cda2:	b149      	cbz	r1, 800cdb8 <__ascii_wctomb+0x16>
 800cda4:	2aff      	cmp	r2, #255	; 0xff
 800cda6:	bf85      	ittet	hi
 800cda8:	238a      	movhi	r3, #138	; 0x8a
 800cdaa:	6003      	strhi	r3, [r0, #0]
 800cdac:	700a      	strbls	r2, [r1, #0]
 800cdae:	f04f 30ff 	movhi.w	r0, #4294967295
 800cdb2:	bf98      	it	ls
 800cdb4:	2001      	movls	r0, #1
 800cdb6:	4770      	bx	lr
 800cdb8:	4608      	mov	r0, r1
 800cdba:	4770      	bx	lr

0800cdbc <fiprintf>:
 800cdbc:	b40e      	push	{r1, r2, r3}
 800cdbe:	b503      	push	{r0, r1, lr}
 800cdc0:	4601      	mov	r1, r0
 800cdc2:	ab03      	add	r3, sp, #12
 800cdc4:	4805      	ldr	r0, [pc, #20]	; (800cddc <fiprintf+0x20>)
 800cdc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdca:	6800      	ldr	r0, [r0, #0]
 800cdcc:	9301      	str	r3, [sp, #4]
 800cdce:	f000 f83f 	bl	800ce50 <_vfiprintf_r>
 800cdd2:	b002      	add	sp, #8
 800cdd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdd8:	b003      	add	sp, #12
 800cdda:	4770      	bx	lr
 800cddc:	200006dc 	.word	0x200006dc

0800cde0 <abort>:
 800cde0:	b508      	push	{r3, lr}
 800cde2:	2006      	movs	r0, #6
 800cde4:	f000 fa0c 	bl	800d200 <raise>
 800cde8:	2001      	movs	r0, #1
 800cdea:	f7f5 ff1d 	bl	8002c28 <_exit>

0800cdee <_malloc_usable_size_r>:
 800cdee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdf2:	1f18      	subs	r0, r3, #4
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	bfbc      	itt	lt
 800cdf8:	580b      	ldrlt	r3, [r1, r0]
 800cdfa:	18c0      	addlt	r0, r0, r3
 800cdfc:	4770      	bx	lr

0800cdfe <__sfputc_r>:
 800cdfe:	6893      	ldr	r3, [r2, #8]
 800ce00:	3b01      	subs	r3, #1
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	b410      	push	{r4}
 800ce06:	6093      	str	r3, [r2, #8]
 800ce08:	da08      	bge.n	800ce1c <__sfputc_r+0x1e>
 800ce0a:	6994      	ldr	r4, [r2, #24]
 800ce0c:	42a3      	cmp	r3, r4
 800ce0e:	db01      	blt.n	800ce14 <__sfputc_r+0x16>
 800ce10:	290a      	cmp	r1, #10
 800ce12:	d103      	bne.n	800ce1c <__sfputc_r+0x1e>
 800ce14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce18:	f000 b934 	b.w	800d084 <__swbuf_r>
 800ce1c:	6813      	ldr	r3, [r2, #0]
 800ce1e:	1c58      	adds	r0, r3, #1
 800ce20:	6010      	str	r0, [r2, #0]
 800ce22:	7019      	strb	r1, [r3, #0]
 800ce24:	4608      	mov	r0, r1
 800ce26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <__sfputs_r>:
 800ce2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce2e:	4606      	mov	r6, r0
 800ce30:	460f      	mov	r7, r1
 800ce32:	4614      	mov	r4, r2
 800ce34:	18d5      	adds	r5, r2, r3
 800ce36:	42ac      	cmp	r4, r5
 800ce38:	d101      	bne.n	800ce3e <__sfputs_r+0x12>
 800ce3a:	2000      	movs	r0, #0
 800ce3c:	e007      	b.n	800ce4e <__sfputs_r+0x22>
 800ce3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce42:	463a      	mov	r2, r7
 800ce44:	4630      	mov	r0, r6
 800ce46:	f7ff ffda 	bl	800cdfe <__sfputc_r>
 800ce4a:	1c43      	adds	r3, r0, #1
 800ce4c:	d1f3      	bne.n	800ce36 <__sfputs_r+0xa>
 800ce4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce50 <_vfiprintf_r>:
 800ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce54:	460d      	mov	r5, r1
 800ce56:	b09d      	sub	sp, #116	; 0x74
 800ce58:	4614      	mov	r4, r2
 800ce5a:	4698      	mov	r8, r3
 800ce5c:	4606      	mov	r6, r0
 800ce5e:	b118      	cbz	r0, 800ce68 <_vfiprintf_r+0x18>
 800ce60:	6a03      	ldr	r3, [r0, #32]
 800ce62:	b90b      	cbnz	r3, 800ce68 <_vfiprintf_r+0x18>
 800ce64:	f7fe f8da 	bl	800b01c <__sinit>
 800ce68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce6a:	07d9      	lsls	r1, r3, #31
 800ce6c:	d405      	bmi.n	800ce7a <_vfiprintf_r+0x2a>
 800ce6e:	89ab      	ldrh	r3, [r5, #12]
 800ce70:	059a      	lsls	r2, r3, #22
 800ce72:	d402      	bmi.n	800ce7a <_vfiprintf_r+0x2a>
 800ce74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce76:	f7fe fa02 	bl	800b27e <__retarget_lock_acquire_recursive>
 800ce7a:	89ab      	ldrh	r3, [r5, #12]
 800ce7c:	071b      	lsls	r3, r3, #28
 800ce7e:	d501      	bpl.n	800ce84 <_vfiprintf_r+0x34>
 800ce80:	692b      	ldr	r3, [r5, #16]
 800ce82:	b99b      	cbnz	r3, 800ceac <_vfiprintf_r+0x5c>
 800ce84:	4629      	mov	r1, r5
 800ce86:	4630      	mov	r0, r6
 800ce88:	f000 f93a 	bl	800d100 <__swsetup_r>
 800ce8c:	b170      	cbz	r0, 800ceac <_vfiprintf_r+0x5c>
 800ce8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce90:	07dc      	lsls	r4, r3, #31
 800ce92:	d504      	bpl.n	800ce9e <_vfiprintf_r+0x4e>
 800ce94:	f04f 30ff 	mov.w	r0, #4294967295
 800ce98:	b01d      	add	sp, #116	; 0x74
 800ce9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce9e:	89ab      	ldrh	r3, [r5, #12]
 800cea0:	0598      	lsls	r0, r3, #22
 800cea2:	d4f7      	bmi.n	800ce94 <_vfiprintf_r+0x44>
 800cea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cea6:	f7fe f9eb 	bl	800b280 <__retarget_lock_release_recursive>
 800ceaa:	e7f3      	b.n	800ce94 <_vfiprintf_r+0x44>
 800ceac:	2300      	movs	r3, #0
 800ceae:	9309      	str	r3, [sp, #36]	; 0x24
 800ceb0:	2320      	movs	r3, #32
 800ceb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ceb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ceba:	2330      	movs	r3, #48	; 0x30
 800cebc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d070 <_vfiprintf_r+0x220>
 800cec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cec4:	f04f 0901 	mov.w	r9, #1
 800cec8:	4623      	mov	r3, r4
 800ceca:	469a      	mov	sl, r3
 800cecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ced0:	b10a      	cbz	r2, 800ced6 <_vfiprintf_r+0x86>
 800ced2:	2a25      	cmp	r2, #37	; 0x25
 800ced4:	d1f9      	bne.n	800ceca <_vfiprintf_r+0x7a>
 800ced6:	ebba 0b04 	subs.w	fp, sl, r4
 800ceda:	d00b      	beq.n	800cef4 <_vfiprintf_r+0xa4>
 800cedc:	465b      	mov	r3, fp
 800cede:	4622      	mov	r2, r4
 800cee0:	4629      	mov	r1, r5
 800cee2:	4630      	mov	r0, r6
 800cee4:	f7ff ffa2 	bl	800ce2c <__sfputs_r>
 800cee8:	3001      	adds	r0, #1
 800ceea:	f000 80a9 	beq.w	800d040 <_vfiprintf_r+0x1f0>
 800ceee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cef0:	445a      	add	r2, fp
 800cef2:	9209      	str	r2, [sp, #36]	; 0x24
 800cef4:	f89a 3000 	ldrb.w	r3, [sl]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f000 80a1 	beq.w	800d040 <_vfiprintf_r+0x1f0>
 800cefe:	2300      	movs	r3, #0
 800cf00:	f04f 32ff 	mov.w	r2, #4294967295
 800cf04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf08:	f10a 0a01 	add.w	sl, sl, #1
 800cf0c:	9304      	str	r3, [sp, #16]
 800cf0e:	9307      	str	r3, [sp, #28]
 800cf10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf14:	931a      	str	r3, [sp, #104]	; 0x68
 800cf16:	4654      	mov	r4, sl
 800cf18:	2205      	movs	r2, #5
 800cf1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf1e:	4854      	ldr	r0, [pc, #336]	; (800d070 <_vfiprintf_r+0x220>)
 800cf20:	f7f3 f95e 	bl	80001e0 <memchr>
 800cf24:	9a04      	ldr	r2, [sp, #16]
 800cf26:	b9d8      	cbnz	r0, 800cf60 <_vfiprintf_r+0x110>
 800cf28:	06d1      	lsls	r1, r2, #27
 800cf2a:	bf44      	itt	mi
 800cf2c:	2320      	movmi	r3, #32
 800cf2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf32:	0713      	lsls	r3, r2, #28
 800cf34:	bf44      	itt	mi
 800cf36:	232b      	movmi	r3, #43	; 0x2b
 800cf38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf3c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf40:	2b2a      	cmp	r3, #42	; 0x2a
 800cf42:	d015      	beq.n	800cf70 <_vfiprintf_r+0x120>
 800cf44:	9a07      	ldr	r2, [sp, #28]
 800cf46:	4654      	mov	r4, sl
 800cf48:	2000      	movs	r0, #0
 800cf4a:	f04f 0c0a 	mov.w	ip, #10
 800cf4e:	4621      	mov	r1, r4
 800cf50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf54:	3b30      	subs	r3, #48	; 0x30
 800cf56:	2b09      	cmp	r3, #9
 800cf58:	d94d      	bls.n	800cff6 <_vfiprintf_r+0x1a6>
 800cf5a:	b1b0      	cbz	r0, 800cf8a <_vfiprintf_r+0x13a>
 800cf5c:	9207      	str	r2, [sp, #28]
 800cf5e:	e014      	b.n	800cf8a <_vfiprintf_r+0x13a>
 800cf60:	eba0 0308 	sub.w	r3, r0, r8
 800cf64:	fa09 f303 	lsl.w	r3, r9, r3
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	9304      	str	r3, [sp, #16]
 800cf6c:	46a2      	mov	sl, r4
 800cf6e:	e7d2      	b.n	800cf16 <_vfiprintf_r+0xc6>
 800cf70:	9b03      	ldr	r3, [sp, #12]
 800cf72:	1d19      	adds	r1, r3, #4
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	9103      	str	r1, [sp, #12]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	bfbb      	ittet	lt
 800cf7c:	425b      	neglt	r3, r3
 800cf7e:	f042 0202 	orrlt.w	r2, r2, #2
 800cf82:	9307      	strge	r3, [sp, #28]
 800cf84:	9307      	strlt	r3, [sp, #28]
 800cf86:	bfb8      	it	lt
 800cf88:	9204      	strlt	r2, [sp, #16]
 800cf8a:	7823      	ldrb	r3, [r4, #0]
 800cf8c:	2b2e      	cmp	r3, #46	; 0x2e
 800cf8e:	d10c      	bne.n	800cfaa <_vfiprintf_r+0x15a>
 800cf90:	7863      	ldrb	r3, [r4, #1]
 800cf92:	2b2a      	cmp	r3, #42	; 0x2a
 800cf94:	d134      	bne.n	800d000 <_vfiprintf_r+0x1b0>
 800cf96:	9b03      	ldr	r3, [sp, #12]
 800cf98:	1d1a      	adds	r2, r3, #4
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	9203      	str	r2, [sp, #12]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	bfb8      	it	lt
 800cfa2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfa6:	3402      	adds	r4, #2
 800cfa8:	9305      	str	r3, [sp, #20]
 800cfaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d080 <_vfiprintf_r+0x230>
 800cfae:	7821      	ldrb	r1, [r4, #0]
 800cfb0:	2203      	movs	r2, #3
 800cfb2:	4650      	mov	r0, sl
 800cfb4:	f7f3 f914 	bl	80001e0 <memchr>
 800cfb8:	b138      	cbz	r0, 800cfca <_vfiprintf_r+0x17a>
 800cfba:	9b04      	ldr	r3, [sp, #16]
 800cfbc:	eba0 000a 	sub.w	r0, r0, sl
 800cfc0:	2240      	movs	r2, #64	; 0x40
 800cfc2:	4082      	lsls	r2, r0
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	3401      	adds	r4, #1
 800cfc8:	9304      	str	r3, [sp, #16]
 800cfca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfce:	4829      	ldr	r0, [pc, #164]	; (800d074 <_vfiprintf_r+0x224>)
 800cfd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfd4:	2206      	movs	r2, #6
 800cfd6:	f7f3 f903 	bl	80001e0 <memchr>
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d03f      	beq.n	800d05e <_vfiprintf_r+0x20e>
 800cfde:	4b26      	ldr	r3, [pc, #152]	; (800d078 <_vfiprintf_r+0x228>)
 800cfe0:	bb1b      	cbnz	r3, 800d02a <_vfiprintf_r+0x1da>
 800cfe2:	9b03      	ldr	r3, [sp, #12]
 800cfe4:	3307      	adds	r3, #7
 800cfe6:	f023 0307 	bic.w	r3, r3, #7
 800cfea:	3308      	adds	r3, #8
 800cfec:	9303      	str	r3, [sp, #12]
 800cfee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cff0:	443b      	add	r3, r7
 800cff2:	9309      	str	r3, [sp, #36]	; 0x24
 800cff4:	e768      	b.n	800cec8 <_vfiprintf_r+0x78>
 800cff6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cffa:	460c      	mov	r4, r1
 800cffc:	2001      	movs	r0, #1
 800cffe:	e7a6      	b.n	800cf4e <_vfiprintf_r+0xfe>
 800d000:	2300      	movs	r3, #0
 800d002:	3401      	adds	r4, #1
 800d004:	9305      	str	r3, [sp, #20]
 800d006:	4619      	mov	r1, r3
 800d008:	f04f 0c0a 	mov.w	ip, #10
 800d00c:	4620      	mov	r0, r4
 800d00e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d012:	3a30      	subs	r2, #48	; 0x30
 800d014:	2a09      	cmp	r2, #9
 800d016:	d903      	bls.n	800d020 <_vfiprintf_r+0x1d0>
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d0c6      	beq.n	800cfaa <_vfiprintf_r+0x15a>
 800d01c:	9105      	str	r1, [sp, #20]
 800d01e:	e7c4      	b.n	800cfaa <_vfiprintf_r+0x15a>
 800d020:	fb0c 2101 	mla	r1, ip, r1, r2
 800d024:	4604      	mov	r4, r0
 800d026:	2301      	movs	r3, #1
 800d028:	e7f0      	b.n	800d00c <_vfiprintf_r+0x1bc>
 800d02a:	ab03      	add	r3, sp, #12
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	462a      	mov	r2, r5
 800d030:	4b12      	ldr	r3, [pc, #72]	; (800d07c <_vfiprintf_r+0x22c>)
 800d032:	a904      	add	r1, sp, #16
 800d034:	4630      	mov	r0, r6
 800d036:	f7fd fb9f 	bl	800a778 <_printf_float>
 800d03a:	4607      	mov	r7, r0
 800d03c:	1c78      	adds	r0, r7, #1
 800d03e:	d1d6      	bne.n	800cfee <_vfiprintf_r+0x19e>
 800d040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d042:	07d9      	lsls	r1, r3, #31
 800d044:	d405      	bmi.n	800d052 <_vfiprintf_r+0x202>
 800d046:	89ab      	ldrh	r3, [r5, #12]
 800d048:	059a      	lsls	r2, r3, #22
 800d04a:	d402      	bmi.n	800d052 <_vfiprintf_r+0x202>
 800d04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d04e:	f7fe f917 	bl	800b280 <__retarget_lock_release_recursive>
 800d052:	89ab      	ldrh	r3, [r5, #12]
 800d054:	065b      	lsls	r3, r3, #25
 800d056:	f53f af1d 	bmi.w	800ce94 <_vfiprintf_r+0x44>
 800d05a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d05c:	e71c      	b.n	800ce98 <_vfiprintf_r+0x48>
 800d05e:	ab03      	add	r3, sp, #12
 800d060:	9300      	str	r3, [sp, #0]
 800d062:	462a      	mov	r2, r5
 800d064:	4b05      	ldr	r3, [pc, #20]	; (800d07c <_vfiprintf_r+0x22c>)
 800d066:	a904      	add	r1, sp, #16
 800d068:	4630      	mov	r0, r6
 800d06a:	f7fd fe29 	bl	800acc0 <_printf_i>
 800d06e:	e7e4      	b.n	800d03a <_vfiprintf_r+0x1ea>
 800d070:	08010494 	.word	0x08010494
 800d074:	0801049e 	.word	0x0801049e
 800d078:	0800a779 	.word	0x0800a779
 800d07c:	0800ce2d 	.word	0x0800ce2d
 800d080:	0801049a 	.word	0x0801049a

0800d084 <__swbuf_r>:
 800d084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d086:	460e      	mov	r6, r1
 800d088:	4614      	mov	r4, r2
 800d08a:	4605      	mov	r5, r0
 800d08c:	b118      	cbz	r0, 800d096 <__swbuf_r+0x12>
 800d08e:	6a03      	ldr	r3, [r0, #32]
 800d090:	b90b      	cbnz	r3, 800d096 <__swbuf_r+0x12>
 800d092:	f7fd ffc3 	bl	800b01c <__sinit>
 800d096:	69a3      	ldr	r3, [r4, #24]
 800d098:	60a3      	str	r3, [r4, #8]
 800d09a:	89a3      	ldrh	r3, [r4, #12]
 800d09c:	071a      	lsls	r2, r3, #28
 800d09e:	d525      	bpl.n	800d0ec <__swbuf_r+0x68>
 800d0a0:	6923      	ldr	r3, [r4, #16]
 800d0a2:	b31b      	cbz	r3, 800d0ec <__swbuf_r+0x68>
 800d0a4:	6823      	ldr	r3, [r4, #0]
 800d0a6:	6922      	ldr	r2, [r4, #16]
 800d0a8:	1a98      	subs	r0, r3, r2
 800d0aa:	6963      	ldr	r3, [r4, #20]
 800d0ac:	b2f6      	uxtb	r6, r6
 800d0ae:	4283      	cmp	r3, r0
 800d0b0:	4637      	mov	r7, r6
 800d0b2:	dc04      	bgt.n	800d0be <__swbuf_r+0x3a>
 800d0b4:	4621      	mov	r1, r4
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	f7ff fdc6 	bl	800cc48 <_fflush_r>
 800d0bc:	b9e0      	cbnz	r0, 800d0f8 <__swbuf_r+0x74>
 800d0be:	68a3      	ldr	r3, [r4, #8]
 800d0c0:	3b01      	subs	r3, #1
 800d0c2:	60a3      	str	r3, [r4, #8]
 800d0c4:	6823      	ldr	r3, [r4, #0]
 800d0c6:	1c5a      	adds	r2, r3, #1
 800d0c8:	6022      	str	r2, [r4, #0]
 800d0ca:	701e      	strb	r6, [r3, #0]
 800d0cc:	6962      	ldr	r2, [r4, #20]
 800d0ce:	1c43      	adds	r3, r0, #1
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d004      	beq.n	800d0de <__swbuf_r+0x5a>
 800d0d4:	89a3      	ldrh	r3, [r4, #12]
 800d0d6:	07db      	lsls	r3, r3, #31
 800d0d8:	d506      	bpl.n	800d0e8 <__swbuf_r+0x64>
 800d0da:	2e0a      	cmp	r6, #10
 800d0dc:	d104      	bne.n	800d0e8 <__swbuf_r+0x64>
 800d0de:	4621      	mov	r1, r4
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	f7ff fdb1 	bl	800cc48 <_fflush_r>
 800d0e6:	b938      	cbnz	r0, 800d0f8 <__swbuf_r+0x74>
 800d0e8:	4638      	mov	r0, r7
 800d0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0ec:	4621      	mov	r1, r4
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	f000 f806 	bl	800d100 <__swsetup_r>
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	d0d5      	beq.n	800d0a4 <__swbuf_r+0x20>
 800d0f8:	f04f 37ff 	mov.w	r7, #4294967295
 800d0fc:	e7f4      	b.n	800d0e8 <__swbuf_r+0x64>
	...

0800d100 <__swsetup_r>:
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	4b2a      	ldr	r3, [pc, #168]	; (800d1ac <__swsetup_r+0xac>)
 800d104:	4605      	mov	r5, r0
 800d106:	6818      	ldr	r0, [r3, #0]
 800d108:	460c      	mov	r4, r1
 800d10a:	b118      	cbz	r0, 800d114 <__swsetup_r+0x14>
 800d10c:	6a03      	ldr	r3, [r0, #32]
 800d10e:	b90b      	cbnz	r3, 800d114 <__swsetup_r+0x14>
 800d110:	f7fd ff84 	bl	800b01c <__sinit>
 800d114:	89a3      	ldrh	r3, [r4, #12]
 800d116:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d11a:	0718      	lsls	r0, r3, #28
 800d11c:	d422      	bmi.n	800d164 <__swsetup_r+0x64>
 800d11e:	06d9      	lsls	r1, r3, #27
 800d120:	d407      	bmi.n	800d132 <__swsetup_r+0x32>
 800d122:	2309      	movs	r3, #9
 800d124:	602b      	str	r3, [r5, #0]
 800d126:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d12a:	81a3      	strh	r3, [r4, #12]
 800d12c:	f04f 30ff 	mov.w	r0, #4294967295
 800d130:	e034      	b.n	800d19c <__swsetup_r+0x9c>
 800d132:	0758      	lsls	r0, r3, #29
 800d134:	d512      	bpl.n	800d15c <__swsetup_r+0x5c>
 800d136:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d138:	b141      	cbz	r1, 800d14c <__swsetup_r+0x4c>
 800d13a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d13e:	4299      	cmp	r1, r3
 800d140:	d002      	beq.n	800d148 <__swsetup_r+0x48>
 800d142:	4628      	mov	r0, r5
 800d144:	f7fe ff26 	bl	800bf94 <_free_r>
 800d148:	2300      	movs	r3, #0
 800d14a:	6363      	str	r3, [r4, #52]	; 0x34
 800d14c:	89a3      	ldrh	r3, [r4, #12]
 800d14e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d152:	81a3      	strh	r3, [r4, #12]
 800d154:	2300      	movs	r3, #0
 800d156:	6063      	str	r3, [r4, #4]
 800d158:	6923      	ldr	r3, [r4, #16]
 800d15a:	6023      	str	r3, [r4, #0]
 800d15c:	89a3      	ldrh	r3, [r4, #12]
 800d15e:	f043 0308 	orr.w	r3, r3, #8
 800d162:	81a3      	strh	r3, [r4, #12]
 800d164:	6923      	ldr	r3, [r4, #16]
 800d166:	b94b      	cbnz	r3, 800d17c <__swsetup_r+0x7c>
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d16e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d172:	d003      	beq.n	800d17c <__swsetup_r+0x7c>
 800d174:	4621      	mov	r1, r4
 800d176:	4628      	mov	r0, r5
 800d178:	f000 f884 	bl	800d284 <__smakebuf_r>
 800d17c:	89a0      	ldrh	r0, [r4, #12]
 800d17e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d182:	f010 0301 	ands.w	r3, r0, #1
 800d186:	d00a      	beq.n	800d19e <__swsetup_r+0x9e>
 800d188:	2300      	movs	r3, #0
 800d18a:	60a3      	str	r3, [r4, #8]
 800d18c:	6963      	ldr	r3, [r4, #20]
 800d18e:	425b      	negs	r3, r3
 800d190:	61a3      	str	r3, [r4, #24]
 800d192:	6923      	ldr	r3, [r4, #16]
 800d194:	b943      	cbnz	r3, 800d1a8 <__swsetup_r+0xa8>
 800d196:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d19a:	d1c4      	bne.n	800d126 <__swsetup_r+0x26>
 800d19c:	bd38      	pop	{r3, r4, r5, pc}
 800d19e:	0781      	lsls	r1, r0, #30
 800d1a0:	bf58      	it	pl
 800d1a2:	6963      	ldrpl	r3, [r4, #20]
 800d1a4:	60a3      	str	r3, [r4, #8]
 800d1a6:	e7f4      	b.n	800d192 <__swsetup_r+0x92>
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	e7f7      	b.n	800d19c <__swsetup_r+0x9c>
 800d1ac:	200006dc 	.word	0x200006dc

0800d1b0 <_raise_r>:
 800d1b0:	291f      	cmp	r1, #31
 800d1b2:	b538      	push	{r3, r4, r5, lr}
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	460d      	mov	r5, r1
 800d1b8:	d904      	bls.n	800d1c4 <_raise_r+0x14>
 800d1ba:	2316      	movs	r3, #22
 800d1bc:	6003      	str	r3, [r0, #0]
 800d1be:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c2:	bd38      	pop	{r3, r4, r5, pc}
 800d1c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d1c6:	b112      	cbz	r2, 800d1ce <_raise_r+0x1e>
 800d1c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1cc:	b94b      	cbnz	r3, 800d1e2 <_raise_r+0x32>
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f000 f830 	bl	800d234 <_getpid_r>
 800d1d4:	462a      	mov	r2, r5
 800d1d6:	4601      	mov	r1, r0
 800d1d8:	4620      	mov	r0, r4
 800d1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1de:	f000 b817 	b.w	800d210 <_kill_r>
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d00a      	beq.n	800d1fc <_raise_r+0x4c>
 800d1e6:	1c59      	adds	r1, r3, #1
 800d1e8:	d103      	bne.n	800d1f2 <_raise_r+0x42>
 800d1ea:	2316      	movs	r3, #22
 800d1ec:	6003      	str	r3, [r0, #0]
 800d1ee:	2001      	movs	r0, #1
 800d1f0:	e7e7      	b.n	800d1c2 <_raise_r+0x12>
 800d1f2:	2400      	movs	r4, #0
 800d1f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	4798      	blx	r3
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	e7e0      	b.n	800d1c2 <_raise_r+0x12>

0800d200 <raise>:
 800d200:	4b02      	ldr	r3, [pc, #8]	; (800d20c <raise+0xc>)
 800d202:	4601      	mov	r1, r0
 800d204:	6818      	ldr	r0, [r3, #0]
 800d206:	f7ff bfd3 	b.w	800d1b0 <_raise_r>
 800d20a:	bf00      	nop
 800d20c:	200006dc 	.word	0x200006dc

0800d210 <_kill_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	4d07      	ldr	r5, [pc, #28]	; (800d230 <_kill_r+0x20>)
 800d214:	2300      	movs	r3, #0
 800d216:	4604      	mov	r4, r0
 800d218:	4608      	mov	r0, r1
 800d21a:	4611      	mov	r1, r2
 800d21c:	602b      	str	r3, [r5, #0]
 800d21e:	f7f5 fcf3 	bl	8002c08 <_kill>
 800d222:	1c43      	adds	r3, r0, #1
 800d224:	d102      	bne.n	800d22c <_kill_r+0x1c>
 800d226:	682b      	ldr	r3, [r5, #0]
 800d228:	b103      	cbz	r3, 800d22c <_kill_r+0x1c>
 800d22a:	6023      	str	r3, [r4, #0]
 800d22c:	bd38      	pop	{r3, r4, r5, pc}
 800d22e:	bf00      	nop
 800d230:	200019a4 	.word	0x200019a4

0800d234 <_getpid_r>:
 800d234:	f7f5 bce0 	b.w	8002bf8 <_getpid>

0800d238 <__swhatbuf_r>:
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	460c      	mov	r4, r1
 800d23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d240:	2900      	cmp	r1, #0
 800d242:	b096      	sub	sp, #88	; 0x58
 800d244:	4615      	mov	r5, r2
 800d246:	461e      	mov	r6, r3
 800d248:	da0d      	bge.n	800d266 <__swhatbuf_r+0x2e>
 800d24a:	89a3      	ldrh	r3, [r4, #12]
 800d24c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d250:	f04f 0100 	mov.w	r1, #0
 800d254:	bf0c      	ite	eq
 800d256:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d25a:	2340      	movne	r3, #64	; 0x40
 800d25c:	2000      	movs	r0, #0
 800d25e:	6031      	str	r1, [r6, #0]
 800d260:	602b      	str	r3, [r5, #0]
 800d262:	b016      	add	sp, #88	; 0x58
 800d264:	bd70      	pop	{r4, r5, r6, pc}
 800d266:	466a      	mov	r2, sp
 800d268:	f000 f848 	bl	800d2fc <_fstat_r>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	dbec      	blt.n	800d24a <__swhatbuf_r+0x12>
 800d270:	9901      	ldr	r1, [sp, #4]
 800d272:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d276:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d27a:	4259      	negs	r1, r3
 800d27c:	4159      	adcs	r1, r3
 800d27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d282:	e7eb      	b.n	800d25c <__swhatbuf_r+0x24>

0800d284 <__smakebuf_r>:
 800d284:	898b      	ldrh	r3, [r1, #12]
 800d286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d288:	079d      	lsls	r5, r3, #30
 800d28a:	4606      	mov	r6, r0
 800d28c:	460c      	mov	r4, r1
 800d28e:	d507      	bpl.n	800d2a0 <__smakebuf_r+0x1c>
 800d290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	6123      	str	r3, [r4, #16]
 800d298:	2301      	movs	r3, #1
 800d29a:	6163      	str	r3, [r4, #20]
 800d29c:	b002      	add	sp, #8
 800d29e:	bd70      	pop	{r4, r5, r6, pc}
 800d2a0:	ab01      	add	r3, sp, #4
 800d2a2:	466a      	mov	r2, sp
 800d2a4:	f7ff ffc8 	bl	800d238 <__swhatbuf_r>
 800d2a8:	9900      	ldr	r1, [sp, #0]
 800d2aa:	4605      	mov	r5, r0
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f7fe fee5 	bl	800c07c <_malloc_r>
 800d2b2:	b948      	cbnz	r0, 800d2c8 <__smakebuf_r+0x44>
 800d2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b8:	059a      	lsls	r2, r3, #22
 800d2ba:	d4ef      	bmi.n	800d29c <__smakebuf_r+0x18>
 800d2bc:	f023 0303 	bic.w	r3, r3, #3
 800d2c0:	f043 0302 	orr.w	r3, r3, #2
 800d2c4:	81a3      	strh	r3, [r4, #12]
 800d2c6:	e7e3      	b.n	800d290 <__smakebuf_r+0xc>
 800d2c8:	89a3      	ldrh	r3, [r4, #12]
 800d2ca:	6020      	str	r0, [r4, #0]
 800d2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2d0:	81a3      	strh	r3, [r4, #12]
 800d2d2:	9b00      	ldr	r3, [sp, #0]
 800d2d4:	6163      	str	r3, [r4, #20]
 800d2d6:	9b01      	ldr	r3, [sp, #4]
 800d2d8:	6120      	str	r0, [r4, #16]
 800d2da:	b15b      	cbz	r3, 800d2f4 <__smakebuf_r+0x70>
 800d2dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	f000 f81d 	bl	800d320 <_isatty_r>
 800d2e6:	b128      	cbz	r0, 800d2f4 <__smakebuf_r+0x70>
 800d2e8:	89a3      	ldrh	r3, [r4, #12]
 800d2ea:	f023 0303 	bic.w	r3, r3, #3
 800d2ee:	f043 0301 	orr.w	r3, r3, #1
 800d2f2:	81a3      	strh	r3, [r4, #12]
 800d2f4:	89a3      	ldrh	r3, [r4, #12]
 800d2f6:	431d      	orrs	r5, r3
 800d2f8:	81a5      	strh	r5, [r4, #12]
 800d2fa:	e7cf      	b.n	800d29c <__smakebuf_r+0x18>

0800d2fc <_fstat_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	4d07      	ldr	r5, [pc, #28]	; (800d31c <_fstat_r+0x20>)
 800d300:	2300      	movs	r3, #0
 800d302:	4604      	mov	r4, r0
 800d304:	4608      	mov	r0, r1
 800d306:	4611      	mov	r1, r2
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	f7f5 fcdc 	bl	8002cc6 <_fstat>
 800d30e:	1c43      	adds	r3, r0, #1
 800d310:	d102      	bne.n	800d318 <_fstat_r+0x1c>
 800d312:	682b      	ldr	r3, [r5, #0]
 800d314:	b103      	cbz	r3, 800d318 <_fstat_r+0x1c>
 800d316:	6023      	str	r3, [r4, #0]
 800d318:	bd38      	pop	{r3, r4, r5, pc}
 800d31a:	bf00      	nop
 800d31c:	200019a4 	.word	0x200019a4

0800d320 <_isatty_r>:
 800d320:	b538      	push	{r3, r4, r5, lr}
 800d322:	4d06      	ldr	r5, [pc, #24]	; (800d33c <_isatty_r+0x1c>)
 800d324:	2300      	movs	r3, #0
 800d326:	4604      	mov	r4, r0
 800d328:	4608      	mov	r0, r1
 800d32a:	602b      	str	r3, [r5, #0]
 800d32c:	f7f5 fcdb 	bl	8002ce6 <_isatty>
 800d330:	1c43      	adds	r3, r0, #1
 800d332:	d102      	bne.n	800d33a <_isatty_r+0x1a>
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	b103      	cbz	r3, 800d33a <_isatty_r+0x1a>
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	bd38      	pop	{r3, r4, r5, pc}
 800d33c:	200019a4 	.word	0x200019a4

0800d340 <_init>:
 800d340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d342:	bf00      	nop
 800d344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d346:	bc08      	pop	{r3}
 800d348:	469e      	mov	lr, r3
 800d34a:	4770      	bx	lr

0800d34c <_fini>:
 800d34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d34e:	bf00      	nop
 800d350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d352:	bc08      	pop	{r3}
 800d354:	469e      	mov	lr, r3
 800d356:	4770      	bx	lr

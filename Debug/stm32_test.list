
stm32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d87c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022c4  0800da20  0800da20  0001da20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fce4  0800fce4  00020a68  2**0
                  CONTENTS
  4 .ARM          00000008  0800fce4  0800fce4  0001fce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fcec  0800fcec  00020a68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fcec  0800fcec  0001fcec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fcf0  0800fcf0  0001fcf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a68  20000000  0800fcf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019230  20000a68  0801075c  00020a68  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019c98  0801075c  00029c98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a68  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a98  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d41a  00000000  00000000  00020adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000461f  00000000  00000000  0003def5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad0  00000000  00000000  00042518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014d5  00000000  00000000  00043fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e794  00000000  00000000  000454bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000257c4  00000000  00000000  00063c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a90e0  00000000  00000000  00089415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000082bc  00000000  00000000  001324f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013a7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000a68 	.word	0x20000a68
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800da04 	.word	0x0800da04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000a6c 	.word	0x20000a6c
 80001dc:	0800da04 	.word	0x0800da04

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b970 	b.w	8000f10 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9e08      	ldr	r6, [sp, #32]
 8000c4e:	460d      	mov	r5, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	460f      	mov	r7, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4694      	mov	ip, r2
 8000c5c:	d965      	bls.n	8000d2a <__udivmoddi4+0xe2>
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	b143      	cbz	r3, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c68:	f1c3 0220 	rsb	r2, r3, #32
 8000c6c:	409f      	lsls	r7, r3
 8000c6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c72:	4317      	orrs	r7, r2
 8000c74:	409c      	lsls	r4, r3
 8000c76:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7a:	fa1f f58c 	uxth.w	r5, ip
 8000c7e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c82:	0c22      	lsrs	r2, r4, #16
 8000c84:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c8c:	fb01 f005 	mul.w	r0, r1, r5
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c9c:	f080 811c 	bcs.w	8000ed8 <__udivmoddi4+0x290>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f240 8119 	bls.w	8000ed8 <__udivmoddi4+0x290>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4462      	add	r2, ip
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cba:	fb00 f505 	mul.w	r5, r0, r5
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d90a      	bls.n	8000cd8 <__udivmoddi4+0x90>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x294>
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x294>
 8000cd4:	4464      	add	r4, ip
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11e      	cbz	r6, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40dc      	lsrs	r4, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0xbc>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f000 80ed 	beq.w	8000ed2 <__udivmoddi4+0x28a>
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	fab3 f183 	clz	r1, r3
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	d149      	bne.n	8000da0 <__udivmoddi4+0x158>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	d302      	bcc.n	8000d16 <__udivmoddi4+0xce>
 8000d10:	4282      	cmp	r2, r0
 8000d12:	f200 80f8 	bhi.w	8000f06 <__udivmoddi4+0x2be>
 8000d16:	1a84      	subs	r4, r0, r2
 8000d18:	eb65 0203 	sbc.w	r2, r5, r3
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	4617      	mov	r7, r2
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d0e2      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	e9c6 4700 	strd	r4, r7, [r6]
 8000d28:	e7df      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d2a:	b902      	cbnz	r2, 8000d2e <__udivmoddi4+0xe6>
 8000d2c:	deff      	udf	#255	; 0xff
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8090 	bne.w	8000e58 <__udivmoddi4+0x210>
 8000d38:	1a8a      	subs	r2, r1, r2
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2101      	movs	r1, #1
 8000d44:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d48:	fb07 2015 	mls	r0, r7, r5, r2
 8000d4c:	0c22      	lsrs	r2, r4, #16
 8000d4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d52:	fb0e f005 	mul.w	r0, lr, r5
 8000d56:	4290      	cmp	r0, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x124>
 8000d5a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d5e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x122>
 8000d64:	4290      	cmp	r0, r2
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2b8>
 8000d6a:	4645      	mov	r5, r8
 8000d6c:	1a12      	subs	r2, r2, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d74:	fb07 2210 	mls	r2, r7, r0, r2
 8000d78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x14e>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x14c>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2c2>
 8000d94:	4610      	mov	r0, r2
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d9e:	e79f      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000da0:	f1c1 0720 	rsb	r7, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa05 f401 	lsl.w	r4, r5, r1
 8000db2:	fa20 f307 	lsr.w	r3, r0, r7
 8000db6:	40fd      	lsrs	r5, r7
 8000db8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dca:	0c1c      	lsrs	r4, r3, #16
 8000dcc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dd4:	42a5      	cmp	r5, r4
 8000dd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dda:	fa00 f001 	lsl.w	r0, r0, r1
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b0>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2b4>
 8000dec:	42a5      	cmp	r5, r4
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2b4>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4464      	add	r4, ip
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	b29d      	uxth	r5, r3
 8000dfc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e00:	fb09 4413 	mls	r4, r9, r3, r4
 8000e04:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e08:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1da>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e26:	fba3 9502 	umull	r9, r5, r3, r2
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46ae      	mov	lr, r5
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x29c>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x298>
 8000e38:	b156      	cbz	r6, 8000e50 <__udivmoddi4+0x208>
 8000e3a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e3e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e42:	fa04 f707 	lsl.w	r7, r4, r7
 8000e46:	40ca      	lsrs	r2, r1
 8000e48:	40cc      	lsrs	r4, r1
 8000e4a:	4317      	orrs	r7, r2
 8000e4c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e58:	f1c3 0120 	rsb	r1, r3, #32
 8000e5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e60:	fa20 f201 	lsr.w	r2, r0, r1
 8000e64:	fa25 f101 	lsr.w	r1, r5, r1
 8000e68:	409d      	lsls	r5, r3
 8000e6a:	432a      	orrs	r2, r5
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1510 	mls	r5, r7, r0, r1
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e82:	fb00 f50e 	mul.w	r5, r0, lr
 8000e86:	428d      	cmp	r5, r1
 8000e88:	fa04 f403 	lsl.w	r4, r4, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x258>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e98:	428d      	cmp	r5, r1
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1b49      	subs	r1, r1, r5
 8000ea2:	b292      	uxth	r2, r2
 8000ea4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ea8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	fb05 f10e 	mul.w	r1, r5, lr
 8000eb4:	4291      	cmp	r1, r2
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x282>
 8000eb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ebc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec6:	3d02      	subs	r5, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	1a52      	subs	r2, r2, r1
 8000ecc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0xfc>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xa2>
 8000ed8:	4639      	mov	r1, r7
 8000eda:	e6e6      	b.n	8000caa <__udivmoddi4+0x62>
 8000edc:	4610      	mov	r0, r2
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x90>
 8000ee0:	4548      	cmp	r0, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f0>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eec:	3b01      	subs	r3, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f0>
 8000ef0:	4645      	mov	r5, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x282>
 8000ef4:	462b      	mov	r3, r5
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1da>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x258>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b0>
 8000f00:	3d02      	subs	r5, #2
 8000f02:	4462      	add	r2, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x124>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e70a      	b.n	8000d20 <__udivmoddi4+0xd8>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x14e>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <adc_int_init>:
#include "encoder.h"

ADC_HandleTypeDef *hadc1_new;
I2C_HandleTypeDef *hi2c2_new;

void adc_int_init(ADC_HandleTypeDef *hadc1) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	hadc1_new=hadc1;
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <adc_int_init+0x1c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000a84 	.word	0x20000a84

08000f34 <adc_ext_init>:

void adc_ext_init(I2C_HandleTypeDef *hi2c2) {
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	hi2c2_new=hi2c2;
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <adc_ext_init+0x1c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000a88 	.word	0x20000a88

08000f54 <adc_select_ch>:


void adc_select_ch(uint32_t channel) { //trzeba wywolywac za kazdym razem przed konwersją adc bo inaczej będzie tylko ch0!!!!!!!!
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	//wartości channel = ADC_CHANNEL_0, 1, 2, 3
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc1_new, &sConfig) != HAL_OK)
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <adc_select_ch+0x44>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f107 0208 	add.w	r2, r7, #8
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f003 ff35 	bl	8004df0 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <adc_select_ch+0x3c>
	{
	Error_Handler();
 8000f8c:	f001 fa74 	bl	8002478 <Error_Handler>
	}
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000a84 	.word	0x20000a84

08000f9c <getValueAdcExtCh0>:
    //send_uart(adcStr);
}



float getValueAdcExtCh0(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af02      	add	r7, sp, #8
	#define ADS1115_ADDRESS 0x48
	unsigned char ADSwrite[6];
	int16_t reading;
	volatile float voltage;
	const float voltageConv = 6.114 / 32768.0;
 8000fa2:	4b24      	ldr	r3, [pc, #144]	; (8001034 <getValueAdcExtCh0+0x98>)
 8000fa4:	613b      	str	r3, [r7, #16]
	ADSwrite[0] = 0x01;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	723b      	strb	r3, [r7, #8]
	ADSwrite[1] = 0xC1; //11000001
 8000faa:	23c1      	movs	r3, #193	; 0xc1
 8000fac:	727b      	strb	r3, [r7, #9]
	ADSwrite[2] = 0x83; //10000011 LSB
 8000fae:	2383      	movs	r3, #131	; 0x83
 8000fb0:	72bb      	strb	r3, [r7, #10]

	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 8000fb2:	4b21      	ldr	r3, [pc, #132]	; (8001038 <getValueAdcExtCh0+0x9c>)
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	f107 0208 	add.w	r2, r7, #8
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	2190      	movs	r1, #144	; 0x90
 8000fc2:	f004 fd67 	bl	8005a94 <HAL_I2C_Master_Transmit>
	ADSwrite[0] = 0x00;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <getValueAdcExtCh0+0x9c>)
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	f107 0208 	add.w	r2, r7, #8
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	2190      	movs	r1, #144	; 0x90
 8000fda:	f004 fd5b 	bl	8005a94 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000fde:	2014      	movs	r0, #20
 8000fe0:	f003 fd52 	bl	8004a88 <HAL_Delay>

	HAL_I2C_Master_Receive(hi2c2_new, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <getValueAdcExtCh0+0x9c>)
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	f107 0208 	add.w	r2, r7, #8
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	2190      	movs	r1, #144	; 0x90
 8000ff4:	f004 fe4c 	bl	8005c90 <HAL_I2C_Master_Receive>
	reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 8000ff8:	7a3b      	ldrb	r3, [r7, #8]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	7a7b      	ldrb	r3, [r7, #9]
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	82fb      	strh	r3, [r7, #22]
	if(reading < 0) {
 8001006:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800100a:	2b00      	cmp	r3, #0
 800100c:	da01      	bge.n	8001012 <getValueAdcExtCh0+0x76>
		reading = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	82fb      	strh	r3, [r7, #22]
	}
	return voltage = reading * voltageConv;
 8001012:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001026:	edc7 7a01 	vstr	s15, [r7, #4]
//	char str[20];
//	sprintf(str, "ext_ch0=%.3f V\n\r", voltage);
//	send_uart(str);

}
 800102a:	eeb0 0a67 	vmov.f32	s0, s15
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	3943a5e3 	.word	0x3943a5e3
 8001038:	20000a88 	.word	0x20000a88

0800103c <getValueAdcExtCh1>:
float getValueAdcExtCh1(void) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af02      	add	r7, sp, #8
#define ADS1115_ADDRESS 0x48
	unsigned char ADSwrite[6];
	int16_t reading;
	volatile float voltage;
	const float voltageConv = 6.114 / 32768.0;
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <getValueAdcExtCh1+0x98>)
 8001044:	613b      	str	r3, [r7, #16]
	ADSwrite[0] = 0x01;
 8001046:	2301      	movs	r3, #1
 8001048:	723b      	strb	r3, [r7, #8]
	ADSwrite[1] =  0xD1; //11000001
 800104a:	23d1      	movs	r3, #209	; 0xd1
 800104c:	727b      	strb	r3, [r7, #9]
	ADSwrite[2] = 0x83; //10000011 LSB
 800104e:	2383      	movs	r3, #131	; 0x83
 8001050:	72bb      	strb	r3, [r7, #10]

	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <getValueAdcExtCh1+0x9c>)
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	f107 0208 	add.w	r2, r7, #8
 800105a:	2364      	movs	r3, #100	; 0x64
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2303      	movs	r3, #3
 8001060:	2190      	movs	r1, #144	; 0x90
 8001062:	f004 fd17 	bl	8005a94 <HAL_I2C_Master_Transmit>
	ADSwrite[0] = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <getValueAdcExtCh1+0x9c>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	f107 0208 	add.w	r2, r7, #8
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	2190      	movs	r1, #144	; 0x90
 800107a:	f004 fd0b 	bl	8005a94 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800107e:	2014      	movs	r0, #20
 8001080:	f003 fd02 	bl	8004a88 <HAL_Delay>

	HAL_I2C_Master_Receive(hi2c2_new, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <getValueAdcExtCh1+0x9c>)
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	f107 0208 	add.w	r2, r7, #8
 800108c:	2364      	movs	r3, #100	; 0x64
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2302      	movs	r3, #2
 8001092:	2190      	movs	r1, #144	; 0x90
 8001094:	f004 fdfc 	bl	8005c90 <HAL_I2C_Master_Receive>
	reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 8001098:	7a3b      	ldrb	r3, [r7, #8]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	7a7b      	ldrb	r3, [r7, #9]
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	82fb      	strh	r3, [r7, #22]
	if(reading < 0) {
 80010a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da01      	bge.n	80010b2 <getValueAdcExtCh1+0x76>
		reading = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	82fb      	strh	r3, [r7, #22]
	}
	return voltage = reading * voltageConv;
 80010b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010be:	edd7 7a04 	vldr	s15, [r7, #16]
 80010c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c6:	edc7 7a01 	vstr	s15, [r7, #4]
}
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	3943a5e3 	.word	0x3943a5e3
 80010d8:	20000a88 	.word	0x20000a88

080010dc <getValueAdcExtCh2>:
float getValueAdcExtCh2(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af02      	add	r7, sp, #8
#define ADS1115_ADDRESS 0x48
	unsigned char ADSwrite[6];
	int16_t reading;
	volatile float voltage;
	const float voltageConv = 6.114 / 32768.0;
 80010e2:	4b24      	ldr	r3, [pc, #144]	; (8001174 <getValueAdcExtCh2+0x98>)
 80010e4:	613b      	str	r3, [r7, #16]
	ADSwrite[0] = 0x01;
 80010e6:	2301      	movs	r3, #1
 80010e8:	723b      	strb	r3, [r7, #8]
	ADSwrite[1] = 0xE1; //11000001
 80010ea:	23e1      	movs	r3, #225	; 0xe1
 80010ec:	727b      	strb	r3, [r7, #9]
	ADSwrite[2] = 0x83; //10000011 LSB
 80010ee:	2383      	movs	r3, #131	; 0x83
 80010f0:	72bb      	strb	r3, [r7, #10]

	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <getValueAdcExtCh2+0x9c>)
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	f107 0208 	add.w	r2, r7, #8
 80010fa:	2364      	movs	r3, #100	; 0x64
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2303      	movs	r3, #3
 8001100:	2190      	movs	r1, #144	; 0x90
 8001102:	f004 fcc7 	bl	8005a94 <HAL_I2C_Master_Transmit>
	ADSwrite[0] = 0x00;
 8001106:	2300      	movs	r3, #0
 8001108:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <getValueAdcExtCh2+0x9c>)
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	f107 0208 	add.w	r2, r7, #8
 8001112:	2364      	movs	r3, #100	; 0x64
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	2190      	movs	r1, #144	; 0x90
 800111a:	f004 fcbb 	bl	8005a94 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800111e:	2014      	movs	r0, #20
 8001120:	f003 fcb2 	bl	8004a88 <HAL_Delay>

	HAL_I2C_Master_Receive(hi2c2_new, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <getValueAdcExtCh2+0x9c>)
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	f107 0208 	add.w	r2, r7, #8
 800112c:	2364      	movs	r3, #100	; 0x64
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2302      	movs	r3, #2
 8001132:	2190      	movs	r1, #144	; 0x90
 8001134:	f004 fdac 	bl	8005c90 <HAL_I2C_Master_Receive>
	reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 8001138:	7a3b      	ldrb	r3, [r7, #8]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	7a7b      	ldrb	r3, [r7, #9]
 8001140:	b21b      	sxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	82fb      	strh	r3, [r7, #22]
	if(reading < 0) {
 8001146:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800114a:	2b00      	cmp	r3, #0
 800114c:	da01      	bge.n	8001152 <getValueAdcExtCh2+0x76>
		reading = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	82fb      	strh	r3, [r7, #22]
	}
	return voltage = reading * voltageConv;
 8001152:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800115e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001166:	edc7 7a01 	vstr	s15, [r7, #4]
}
 800116a:	eeb0 0a67 	vmov.f32	s0, s15
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	3943a5e3 	.word	0x3943a5e3
 8001178:	20000a88 	.word	0x20000a88

0800117c <getValueAdcExtCh3>:
float getValueAdcExtCh3(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af02      	add	r7, sp, #8
#define ADS1115_ADDRESS 0x48
	unsigned char ADSwrite[6];
	int16_t reading;
	volatile float voltage;
	const float voltageConv = 6.114 / 32768.0;
 8001182:	4b24      	ldr	r3, [pc, #144]	; (8001214 <getValueAdcExtCh3+0x98>)
 8001184:	613b      	str	r3, [r7, #16]
	ADSwrite[0] = 0x01;
 8001186:	2301      	movs	r3, #1
 8001188:	723b      	strb	r3, [r7, #8]
	ADSwrite[1] = 0xF1; //11000001
 800118a:	23f1      	movs	r3, #241	; 0xf1
 800118c:	727b      	strb	r3, [r7, #9]
	ADSwrite[2] = 0x83; //10000011 LSB
 800118e:	2383      	movs	r3, #131	; 0x83
 8001190:	72bb      	strb	r3, [r7, #10]

	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <getValueAdcExtCh3+0x9c>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	f107 0208 	add.w	r2, r7, #8
 800119a:	2364      	movs	r3, #100	; 0x64
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2303      	movs	r3, #3
 80011a0:	2190      	movs	r1, #144	; 0x90
 80011a2:	f004 fc77 	bl	8005a94 <HAL_I2C_Master_Transmit>
	ADSwrite[0] = 0x00;
 80011a6:	2300      	movs	r3, #0
 80011a8:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <getValueAdcExtCh3+0x9c>)
 80011ac:	6818      	ldr	r0, [r3, #0]
 80011ae:	f107 0208 	add.w	r2, r7, #8
 80011b2:	2364      	movs	r3, #100	; 0x64
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	2190      	movs	r1, #144	; 0x90
 80011ba:	f004 fc6b 	bl	8005a94 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80011be:	2014      	movs	r0, #20
 80011c0:	f003 fc62 	bl	8004a88 <HAL_Delay>

	HAL_I2C_Master_Receive(hi2c2_new, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <getValueAdcExtCh3+0x9c>)
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	f107 0208 	add.w	r2, r7, #8
 80011cc:	2364      	movs	r3, #100	; 0x64
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2302      	movs	r3, #2
 80011d2:	2190      	movs	r1, #144	; 0x90
 80011d4:	f004 fd5c 	bl	8005c90 <HAL_I2C_Master_Receive>
	reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 80011d8:	7a3b      	ldrb	r3, [r7, #8]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b21a      	sxth	r2, r3
 80011de:	7a7b      	ldrb	r3, [r7, #9]
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	82fb      	strh	r3, [r7, #22]
	if(reading < 0) {
 80011e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	da01      	bge.n	80011f2 <getValueAdcExtCh3+0x76>
		reading = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	82fb      	strh	r3, [r7, #22]
	}
	return voltage = reading * voltageConv;
 80011f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001206:	edc7 7a01 	vstr	s15, [r7, #4]
}
 800120a:	eeb0 0a67 	vmov.f32	s0, s15
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	3943a5e3 	.word	0x3943a5e3
 8001218:	20000a88 	.word	0x20000a88

0800121c <getValueAdcIntCh0>:
float getValueAdcIntCh0(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
	uint32_t value;
	adc_select_ch(ADC_CHANNEL_0);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff fe96 	bl	8000f54 <adc_select_ch>
	HAL_ADC_Start(hadc1_new);
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <getValueAdcIntCh0+0x60>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f003 fc93 	bl	8004b58 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1_new, HAL_MAX_DELAY);
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <getValueAdcIntCh0+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f04f 31ff 	mov.w	r1, #4294967295
 800123a:	4618      	mov	r0, r3
 800123c:	f003 fd40 	bl	8004cc0 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(hadc1_new);
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <getValueAdcIntCh0+0x60>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f003 fdc6 	bl	8004dd6 <HAL_ADC_GetValue>
 800124a:	6078      	str	r0, [r7, #4]
	float voltage = 3.3f * value / 4096.0f;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001256:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001280 <getValueAdcIntCh0+0x64>
 800125a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800125e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001284 <getValueAdcIntCh0+0x68>
 8001262:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001266:	edc7 7a00 	vstr	s15, [r7]
	//sprintf(adcStr, "a3=%lu (%.3f V)\n\r", value, voltage);
	return voltage;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	ee07 3a90 	vmov	s15, r3
	//send_uart(adcStr);
}
 8001270:	eeb0 0a67 	vmov.f32	s0, s15
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000a84 	.word	0x20000a84
 8001280:	40533333 	.word	0x40533333
 8001284:	45800000 	.word	0x45800000

08001288 <getValueAdcIntCh1>:
float getValueAdcIntCh1(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
	uint32_t value;
	adc_select_ch(ADC_CHANNEL_1);
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff fe60 	bl	8000f54 <adc_select_ch>
	HAL_ADC_Start(hadc1_new);
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <getValueAdcIntCh1+0x60>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f003 fc5d 	bl	8004b58 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1_new, HAL_MAX_DELAY);
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <getValueAdcIntCh1+0x60>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f04f 31ff 	mov.w	r1, #4294967295
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fd0a 	bl	8004cc0 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(hadc1_new);
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <getValueAdcIntCh1+0x60>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 fd90 	bl	8004dd6 <HAL_ADC_GetValue>
 80012b6:	6078      	str	r0, [r7, #4]
	float voltage = 3.3f * value / 4096.0f;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80012ec <getValueAdcIntCh1+0x64>
 80012c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ca:	eddf 6a09 	vldr	s13, [pc, #36]	; 80012f0 <getValueAdcIntCh1+0x68>
 80012ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d2:	edc7 7a00 	vstr	s15, [r7]
	//sprintf(adcStr, "a3=%lu (%.3f V)\n\r", value, voltage);
	return voltage;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	ee07 3a90 	vmov	s15, r3
	//send_uart(adcStr);
}
 80012dc:	eeb0 0a67 	vmov.f32	s0, s15
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000a84 	.word	0x20000a84
 80012ec:	40533333 	.word	0x40533333
 80012f0:	45800000 	.word	0x45800000

080012f4 <getValueAdcIntCh2>:
float getValueAdcIntCh2(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	uint32_t value;
	adc_select_ch(ADC_CHANNEL_2);
 80012fa:	2002      	movs	r0, #2
 80012fc:	f7ff fe2a 	bl	8000f54 <adc_select_ch>
	HAL_ADC_Start(hadc1_new);
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <getValueAdcIntCh2+0x60>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fc27 	bl	8004b58 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1_new, HAL_MAX_DELAY);
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <getValueAdcIntCh2+0x60>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f04f 31ff 	mov.w	r1, #4294967295
 8001312:	4618      	mov	r0, r3
 8001314:	f003 fcd4 	bl	8004cc0 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(hadc1_new);
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <getValueAdcIntCh2+0x60>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fd5a 	bl	8004dd6 <HAL_ADC_GetValue>
 8001322:	6078      	str	r0, [r7, #4]
	float voltage = 3.3f * value / 4096.0f;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001358 <getValueAdcIntCh2+0x64>
 8001332:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001336:	eddf 6a09 	vldr	s13, [pc, #36]	; 800135c <getValueAdcIntCh2+0x68>
 800133a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800133e:	edc7 7a00 	vstr	s15, [r7]
	//sprintf(adcStr, "a3=%lu (%.3f V)\n\r", value, voltage);
	return voltage;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	ee07 3a90 	vmov	s15, r3
	//send_uart(adcStr);
}
 8001348:	eeb0 0a67 	vmov.f32	s0, s15
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000a84 	.word	0x20000a84
 8001358:	40533333 	.word	0x40533333
 800135c:	45800000 	.word	0x45800000

08001360 <getValueAdcIntCh3>:
float getValueAdcIntCh3(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	uint32_t value;
	adc_select_ch(ADC_CHANNEL_3);
 8001366:	2003      	movs	r0, #3
 8001368:	f7ff fdf4 	bl	8000f54 <adc_select_ch>
	HAL_ADC_Start(hadc1_new);
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <getValueAdcIntCh3+0x60>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f003 fbf1 	bl	8004b58 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1_new, HAL_MAX_DELAY);
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <getValueAdcIntCh3+0x60>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f04f 31ff 	mov.w	r1, #4294967295
 800137e:	4618      	mov	r0, r3
 8001380:	f003 fc9e 	bl	8004cc0 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(hadc1_new);
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <getValueAdcIntCh3+0x60>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f003 fd24 	bl	8004dd6 <HAL_ADC_GetValue>
 800138e:	6078      	str	r0, [r7, #4]
	float voltage = 3.3f * value / 4096.0f;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800139a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80013c4 <getValueAdcIntCh3+0x64>
 800139e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013a2:	eddf 6a09 	vldr	s13, [pc, #36]	; 80013c8 <getValueAdcIntCh3+0x68>
 80013a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013aa:	edc7 7a00 	vstr	s15, [r7]
	//sprintf(adcStr, "a3=%lu (%.3f V)\n\r", value, voltage);
	return voltage;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	ee07 3a90 	vmov	s15, r3
	//send_uart(adcStr);
}
 80013b4:	eeb0 0a67 	vmov.f32	s0, s15
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000a84 	.word	0x20000a84
 80013c4:	40533333 	.word	0x40533333
 80013c8:	45800000 	.word	0x45800000

080013cc <getValueDs1>:
#include "encoder.h"

TIM_HandleTypeDef *htim10_new;


float getValueDs1(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
	wire_reset();
 80013d2:	f000 f8eb 	bl	80015ac <wire_reset>
		wire_write(0xcc);
 80013d6:	20cc      	movs	r0, #204	; 0xcc
 80013d8:	f000 f964 	bl	80016a4 <wire_write>
		wire_write(0x44);
 80013dc:	2044      	movs	r0, #68	; 0x44
 80013de:	f000 f961 	bl	80016a4 <wire_write>
		HAL_Delay(95);
 80013e2:	205f      	movs	r0, #95	; 0x5f
 80013e4:	f003 fb50 	bl	8004a88 <HAL_Delay>
		wire_reset();
 80013e8:	f000 f8e0 	bl	80015ac <wire_reset>
		wire_write(0xcc);
 80013ec:	20cc      	movs	r0, #204	; 0xcc
 80013ee:	f000 f959 	bl	80016a4 <wire_write>
		wire_write(0xbe);
 80013f2:	20be      	movs	r0, #190	; 0xbe
 80013f4:	f000 f956 	bl	80016a4 <wire_write>
		int i;
		uint8_t rom_code[9];
		for (i = 0; i < 9; i++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e00b      	b.n	8001416 <getValueDs1+0x4a>
		  rom_code[i] = wire_read();
 80013fe:	f000 f96d 	bl	80016dc <wire_read>
 8001402:	4603      	mov	r3, r0
 8001404:	4619      	mov	r1, r3
 8001406:	1d3a      	adds	r2, r7, #4
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	4413      	add	r3, r2
 800140c:	460a      	mov	r2, r1
 800140e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 9; i++)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3301      	adds	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b08      	cmp	r3, #8
 800141a:	ddf0      	ble.n	80013fe <getValueDs1+0x32>
		float temp= ((rom_code[1]<<8) | (rom_code[0]));
 800141c:	797b      	ldrb	r3, [r7, #5]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	793a      	ldrb	r2, [r7, #4]
 8001422:	4313      	orrs	r3, r2
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142c:	edc7 7a04 	vstr	s15, [r7, #16]

		//send_uart_float(temp);
		return temp = temp/16.0f;
 8001430:	ed97 7a04 	vldr	s14, [r7, #16]
 8001434:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800143c:	edc7 7a04 	vstr	s15, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	ee07 3a90 	vmov	s15, r3
}
 8001446:	eeb0 0a67 	vmov.f32	s0, s15
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <getValueDs2>:

float getValueDs2(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
	wire_reset();
 8001456:	f000 f8a9 	bl	80015ac <wire_reset>
		wire_write(0xcc);
 800145a:	20cc      	movs	r0, #204	; 0xcc
 800145c:	f000 f922 	bl	80016a4 <wire_write>
		wire_write(0x44);
 8001460:	2044      	movs	r0, #68	; 0x44
 8001462:	f000 f91f 	bl	80016a4 <wire_write>
		HAL_Delay(95);
 8001466:	205f      	movs	r0, #95	; 0x5f
 8001468:	f003 fb0e 	bl	8004a88 <HAL_Delay>
		wire_reset();
 800146c:	f000 f89e 	bl	80015ac <wire_reset>
		wire_write(0xcc);
 8001470:	20cc      	movs	r0, #204	; 0xcc
 8001472:	f000 f917 	bl	80016a4 <wire_write>
		wire_write(0xbe);
 8001476:	20be      	movs	r0, #190	; 0xbe
 8001478:	f000 f914 	bl	80016a4 <wire_write>
		int i;
		uint8_t rom_code[9];
		for (i = 0; i < 9; i++)
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e00b      	b.n	800149a <getValueDs2+0x4a>
		  rom_code[i] = wire_read();
 8001482:	f000 f92b 	bl	80016dc <wire_read>
 8001486:	4603      	mov	r3, r0
 8001488:	4619      	mov	r1, r3
 800148a:	1d3a      	adds	r2, r7, #4
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	4413      	add	r3, r2
 8001490:	460a      	mov	r2, r1
 8001492:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 9; i++)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3301      	adds	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b08      	cmp	r3, #8
 800149e:	ddf0      	ble.n	8001482 <getValueDs2+0x32>
		float temp= ((rom_code[1]<<8) | (rom_code[0]));
 80014a0:	797b      	ldrb	r3, [r7, #5]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	793a      	ldrb	r2, [r7, #4]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	ee07 3a90 	vmov	s15, r3
 80014ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b0:	edc7 7a04 	vstr	s15, [r7, #16]


		return temp = temp/16.0f;
 80014b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80014b8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80014bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c0:	edc7 7a04 	vstr	s15, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	ee07 3a90 	vmov	s15, r3

}
 80014ca:	eeb0 0a67 	vmov.f32	s0, s15
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <getValueDs3>:

float getValueDs3(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
	wire_reset();
 80014da:	f000 f867 	bl	80015ac <wire_reset>
		wire_write(0xcc);
 80014de:	20cc      	movs	r0, #204	; 0xcc
 80014e0:	f000 f8e0 	bl	80016a4 <wire_write>
		wire_write(0x44);
 80014e4:	2044      	movs	r0, #68	; 0x44
 80014e6:	f000 f8dd 	bl	80016a4 <wire_write>
		HAL_Delay(95);
 80014ea:	205f      	movs	r0, #95	; 0x5f
 80014ec:	f003 facc 	bl	8004a88 <HAL_Delay>
		wire_reset();
 80014f0:	f000 f85c 	bl	80015ac <wire_reset>
		wire_write(0xcc);
 80014f4:	20cc      	movs	r0, #204	; 0xcc
 80014f6:	f000 f8d5 	bl	80016a4 <wire_write>
		wire_write(0xbe);
 80014fa:	20be      	movs	r0, #190	; 0xbe
 80014fc:	f000 f8d2 	bl	80016a4 <wire_write>
		int i;
		uint8_t rom_code[9];
		for (i = 0; i < 9; i++)
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e00b      	b.n	800151e <getValueDs3+0x4a>
		  rom_code[i] = wire_read();
 8001506:	f000 f8e9 	bl	80016dc <wire_read>
 800150a:	4603      	mov	r3, r0
 800150c:	4619      	mov	r1, r3
 800150e:	1d3a      	adds	r2, r7, #4
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	4413      	add	r3, r2
 8001514:	460a      	mov	r2, r1
 8001516:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 9; i++)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3301      	adds	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2b08      	cmp	r3, #8
 8001522:	ddf0      	ble.n	8001506 <getValueDs3+0x32>
		float temp= ((rom_code[1]<<8) | (rom_code[0]));
 8001524:	797b      	ldrb	r3, [r7, #5]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	793a      	ldrb	r2, [r7, #4]
 800152a:	4313      	orrs	r3, r2
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001534:	edc7 7a04 	vstr	s15, [r7, #16]


		return temp = temp/16.0f;
 8001538:	ed97 7a04 	vldr	s14, [r7, #16]
 800153c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001540:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001544:	edc7 7a04 	vstr	s15, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	ee07 3a90 	vmov	s15, r3
}
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <ds18_init>:


void ds18_init(TIM_HandleTypeDef *htim10) {
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	htim10_new=htim10;
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <ds18_init+0x1c>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000a8c 	.word	0x20000a8c

08001578 <delay_us>:


void delay_us(uint32_t us)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim10_new, 0);
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <delay_us+0x30>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
	  while (__HAL_TIM_GET_COUNTER(htim10_new) < us) {}
 800158a:	bf00      	nop
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <delay_us+0x30>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	d8f8      	bhi.n	800158c <delay_us+0x14>
}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	20000a8c 	.word	0x20000a8c

080015ac <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2102      	movs	r1, #2
 80015b6:	4811      	ldr	r0, [pc, #68]	; (80015fc <wire_reset+0x50>)
 80015b8:	f004 f8f6 	bl	80057a8 <HAL_GPIO_WritePin>
  delay_us(480);
 80015bc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80015c0:	f7ff ffda 	bl	8001578 <delay_us>
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2102      	movs	r1, #2
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <wire_reset+0x50>)
 80015ca:	f004 f8ed 	bl	80057a8 <HAL_GPIO_WritePin>
  delay_us(70);
 80015ce:	2046      	movs	r0, #70	; 0x46
 80015d0:	f7ff ffd2 	bl	8001578 <delay_us>
  rc = HAL_GPIO_ReadPin(DSO_DATA_GPIO_Port, DSO_DATA_Pin);
 80015d4:	2102      	movs	r1, #2
 80015d6:	4809      	ldr	r0, [pc, #36]	; (80015fc <wire_reset+0x50>)
 80015d8:	f004 f8ce 	bl	8005778 <HAL_GPIO_ReadPin>
 80015dc:	4603      	mov	r3, r0
 80015de:	607b      	str	r3, [r7, #4]
  delay_us(410);
 80015e0:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80015e4:	f7ff ffc8 	bl	8001578 <delay_us>

  if (rc == 0)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <wire_reset+0x46>
    return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e000      	b.n	80015f4 <wire_reset+0x48>
  else
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40020400 	.word	0x40020400

08001600 <write_bit>:

void write_bit(int value)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if (value) {
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d010      	beq.n	8001630 <write_bit+0x30>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2102      	movs	r1, #2
 8001612:	4811      	ldr	r0, [pc, #68]	; (8001658 <write_bit+0x58>)
 8001614:	f004 f8c8 	bl	80057a8 <HAL_GPIO_WritePin>
    delay_us(6);
 8001618:	2006      	movs	r0, #6
 800161a:	f7ff ffad 	bl	8001578 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2102      	movs	r1, #2
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <write_bit+0x58>)
 8001624:	f004 f8c0 	bl	80057a8 <HAL_GPIO_WritePin>
    delay_us(64);
 8001628:	2040      	movs	r0, #64	; 0x40
 800162a:	f7ff ffa5 	bl	8001578 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 800162e:	e00f      	b.n	8001650 <write_bit+0x50>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	2102      	movs	r1, #2
 8001634:	4808      	ldr	r0, [pc, #32]	; (8001658 <write_bit+0x58>)
 8001636:	f004 f8b7 	bl	80057a8 <HAL_GPIO_WritePin>
    delay_us(60);
 800163a:	203c      	movs	r0, #60	; 0x3c
 800163c:	f7ff ff9c 	bl	8001578 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	2102      	movs	r1, #2
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <write_bit+0x58>)
 8001646:	f004 f8af 	bl	80057a8 <HAL_GPIO_WritePin>
    delay_us(10);
 800164a:	200a      	movs	r0, #10
 800164c:	f7ff ff94 	bl	8001578 <delay_us>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40020400 	.word	0x40020400

0800165c <read_bit>:


int read_bit(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2102      	movs	r1, #2
 8001666:	480e      	ldr	r0, [pc, #56]	; (80016a0 <read_bit+0x44>)
 8001668:	f004 f89e 	bl	80057a8 <HAL_GPIO_WritePin>
  delay_us(6);
 800166c:	2006      	movs	r0, #6
 800166e:	f7ff ff83 	bl	8001578 <delay_us>
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8001672:	2201      	movs	r2, #1
 8001674:	2102      	movs	r1, #2
 8001676:	480a      	ldr	r0, [pc, #40]	; (80016a0 <read_bit+0x44>)
 8001678:	f004 f896 	bl	80057a8 <HAL_GPIO_WritePin>
  delay_us(9);
 800167c:	2009      	movs	r0, #9
 800167e:	f7ff ff7b 	bl	8001578 <delay_us>
  rc = HAL_GPIO_ReadPin(DSO_DATA_GPIO_Port, DSO_DATA_Pin);
 8001682:	2102      	movs	r1, #2
 8001684:	4806      	ldr	r0, [pc, #24]	; (80016a0 <read_bit+0x44>)
 8001686:	f004 f877 	bl	8005778 <HAL_GPIO_ReadPin>
 800168a:	4603      	mov	r3, r0
 800168c:	607b      	str	r3, [r7, #4]
  delay_us(55);
 800168e:	2037      	movs	r0, #55	; 0x37
 8001690:	f7ff ff72 	bl	8001578 <delay_us>
  return rc;
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40020400 	.word	0x40020400

080016a4 <wire_write>:

void wire_write(uint8_t byte)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	e00b      	b.n	80016cc <wire_write+0x28>
    write_bit(byte & 0x01);
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ffa0 	bl	8001600 <write_bit>
    byte >>= 1;
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	085b      	lsrs	r3, r3, #1
 80016c4:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3301      	adds	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b07      	cmp	r3, #7
 80016d0:	ddf0      	ble.n	80016b4 <wire_write+0x10>
  }
}
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <wire_read>:

uint8_t wire_read(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	e00e      	b.n	800170a <wire_read+0x2e>
    value >>= 1;
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	085b      	lsrs	r3, r3, #1
 80016f0:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 80016f2:	f7ff ffb3 	bl	800165c <read_bit>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <wire_read+0x28>
      value |= 0x80;
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001702:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2b07      	cmp	r3, #7
 800170e:	dded      	ble.n	80016ec <wire_read+0x10>
  }
  return value;
 8001710:	79fb      	ldrb	r3, [r7, #7]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <encSetRange>:


TIM_HandleTypeDef *htim1_new;


void encSetRange(uint16_t min, uint16_t max) {
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	460a      	mov	r2, r1
 8001726:	80fb      	strh	r3, [r7, #6]
 8001728:	4613      	mov	r3, r2
 800172a:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(htim1_new, max);
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <encSetRange+0x30>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	88ba      	ldrh	r2, [r7, #4]
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <encSetRange+0x30>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	88ba      	ldrh	r2, [r7, #4]
 800173c:	60da      	str	r2, [r3, #12]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000a90 	.word	0x20000a90

08001750 <encSetPos>:

void encSetPos(uint16_t encPos) {
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim1_new, encPos);
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <encSetPos+0x20>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	88fa      	ldrh	r2, [r7, #6]
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	20000a90 	.word	0x20000a90

08001774 <encoderGet>:

uint32_t encoderGet(void) {
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(htim1_new);
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <encoderGet+0x18>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000a90 	.word	0x20000a90

08001790 <encoderInit>:

void encoderInit(TIM_HandleTypeDef *htim1) {
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	htim1_new=htim1;
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <encoderInit+0x1c>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6013      	str	r3, [r2, #0]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000a90 	.word	0x20000a90

080017b0 <entrySelected>:

bool entrySelected(int16_t id) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
    if (encoderGet() == id) {
 80017ba:	f7ff ffdb 	bl	8001774 <encoderGet>
 80017be:	4602      	mov	r2, r0
 80017c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d101      	bne.n	80017cc <entrySelected+0x1c>
        return true;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <entrySelected+0x1e>
    }
    return false;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <entryClicked>:

bool entryClicked(int16_t id) {
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	80fb      	strh	r3, [r7, #6]
    if (encoderGet() == id && isClicked()) {
 80017e0:	f7ff ffc8 	bl	8001774 <encoderGet>
 80017e4:	4602      	mov	r2, r0
 80017e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d106      	bne.n	80017fc <entryClicked+0x26>
 80017ee:	f000 f8b3 	bl	8001958 <isClicked>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <entryClicked+0x26>
        return true;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <entryClicked+0x28>
    }
    return false;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <send_uart>:
int8_t ch2przerwanie=0;
int8_t ch3przerwanie=0;
int8_t ch4przerwanie=0;


void send_uart(char *string) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7fe fd45 	bl	80002a0 <strlen>
 8001816:	4603      	mov	r3, r0
 8001818:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart6, (uint8_t *)string, len, HAL_MAX_DELAY);
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	b29a      	uxth	r2, r3
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4803      	ldr	r0, [pc, #12]	; (8001834 <send_uart+0x2c>)
 8001826:	f007 ff9e 	bl	8009766 <HAL_UART_Transmit>
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000d1c 	.word	0x20000d1c

08001838 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) {
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10d      	bne.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_TIM_Base_Stop_IT(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f006 fe88 	bl	8008560 <HAL_TIM_Base_Stop_IT>
		if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)==GPIO_PIN_RESET) {
 8001850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001854:	4807      	ldr	r0, [pc, #28]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001856:	f003 ff8f 	bl	8005778 <HAL_GPIO_ReadPin>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x2e>
			sendToUart=1;
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]

			}
		}
	}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40014800 	.word	0x40014800
 8001874:	40020400 	.word	0x40020400
 8001878:	20000d60 	.word	0x20000d60

0800187c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t pulse;
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7f1b      	ldrb	r3, [r3, #28]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d10d      	bne.n	80018a8 <HAL_TIM_OC_DelayElapsedCallback+0x2c>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800188c:	2100      	movs	r1, #0
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f007 fb6c 	bl	8008f6c <HAL_TIM_ReadCapturedValue>
 8001894:	60f8      	str	r0, [r7, #12]
    ch1przerwanie=1;
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (pulse + 2659)); //to wartosc pulse dla kazdego timera
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	f602 2263 	addw	r2, r2, #2659	; 0xa63
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7f1b      	ldrb	r3, [r3, #28]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d10e      	bne.n	80018ce <HAL_TIM_OC_DelayElapsedCallback+0x52>
  pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80018b0:	2104      	movs	r1, #4
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f007 fb5a 	bl	8008f6c <HAL_TIM_ReadCapturedValue>
 80018b8:	60f8      	str	r0, [r7, #12]
  ch2przerwanie=1;
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
  /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (pulse + 9318));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80018ca:	3326      	adds	r3, #38	; 0x26
 80018cc:	6393      	str	r3, [r2, #56]	; 0x38
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7f1b      	ldrb	r3, [r3, #28]
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d10e      	bne.n	80018f4 <HAL_TIM_OC_DelayElapsedCallback+0x78>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80018d6:	2108      	movs	r1, #8
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f007 fb47 	bl	8008f6c <HAL_TIM_ReadCapturedValue>
 80018de:	60f8      	str	r0, [r7, #12]
    ch3przerwanie=1;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, (pulse + 36000));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80018f0:	33a0      	adds	r3, #160	; 0xa0
 80018f2:	63d3      	str	r3, [r2, #60]	; 0x3c
    }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7f1b      	ldrb	r3, [r3, #28]
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d10f      	bne.n	800191c <HAL_TIM_OC_DelayElapsedCallback+0xa0>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80018fc:	210c      	movs	r1, #12
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f007 fb34 	bl	8008f6c <HAL_TIM_ReadCapturedValue>
 8001904:	60f8      	str	r0, [r7, #12]
    ch4przerwanie=1;
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, (pulse + 67000));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001916:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800191a:	6413      	str	r3, [r2, #64]	; 0x40
    }
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000d61 	.word	0x20000d61
 8001928:	20000d62 	.word	0x20000d62
 800192c:	20000d63 	.word	0x20000d63
 8001930:	20000d64 	.word	0x20000d64

08001934 <HAL_GPIO_EXTI_Callback>:


char charAr[50];


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
	  if(GPIO_Pin == ENC_BTN_Pin) {
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001944:	d102      	bne.n	800194c <HAL_GPIO_EXTI_Callback+0x18>
		  HAL_TIM_Base_Start_IT(&htim11);
 8001946:	4803      	ldr	r0, [pc, #12]	; (8001954 <HAL_GPIO_EXTI_Callback+0x20>)
 8001948:	f006 fda8 	bl	800849c <HAL_TIM_Base_Start_IT>
	  }
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000cd4 	.word	0x20000cd4

08001958 <isClicked>:


bool isClicked(void) {
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
	if(sendToUart==1) {
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <isClicked+0x24>)
 800195e:	f993 3000 	ldrsb.w	r3, [r3]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d104      	bne.n	8001970 <isClicked+0x18>
		sendToUart=0;
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <isClicked+0x24>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
		return true;
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <isClicked+0x1a>
	}
	else {
		return false;
 8001970:	2300      	movs	r3, #0
	}
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	20000d60 	.word	0x20000d60

08001980 <send_uart_uint32>:

void send_uart_uint32(uint32_t value) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
    char buffer[20];
    snprintf(buffer, sizeof(buffer), "%lu \n\r", value);
 8001988:	f107 000c 	add.w	r0, r7, #12
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <send_uart_uint32+0x3c>)
 8001990:	2114      	movs	r1, #20
 8001992:	f009 fe81 	bl	800b698 <sniprintf>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fc80 	bl	80002a0 <strlen>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f107 010c 	add.w	r1, r7, #12
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <send_uart_uint32+0x40>)
 80019ae:	f007 feda 	bl	8009766 <HAL_UART_Transmit>
}
 80019b2:	bf00      	nop
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	0800da20 	.word	0x0800da20
 80019c0:	20000d1c 	.word	0x20000d1c

080019c4 <getRtcString>:
    snprintf(buffer, sizeof(buffer), "%0.2f \n\r", value);
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
}
RTC_TimeTypeDef time;
RTC_DateTypeDef date;
char* getRtcString(void)  {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b09c      	sub	sp, #112	; 0x70
 80019c8:	af02      	add	r7, sp, #8
	static char dateTime[100];
	char rtcTimeStr[50];
	char rtcDateStr[50];
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80019ca:	2200      	movs	r2, #0
 80019cc:	4918      	ldr	r1, [pc, #96]	; (8001a30 <getRtcString+0x6c>)
 80019ce:	4819      	ldr	r0, [pc, #100]	; (8001a34 <getRtcString+0x70>)
 80019d0:	f005 fe9a 	bl	8007708 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80019d4:	2200      	movs	r2, #0
 80019d6:	4918      	ldr	r1, [pc, #96]	; (8001a38 <getRtcString+0x74>)
 80019d8:	4816      	ldr	r0, [pc, #88]	; (8001a34 <getRtcString+0x70>)
 80019da:	f005 ff77 	bl	80078cc <HAL_RTC_GetDate>
	sprintf(rtcTimeStr, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <getRtcString+0x6c>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <getRtcString+0x6c>)
 80019e6:	785b      	ldrb	r3, [r3, #1]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <getRtcString+0x6c>)
 80019ec:	789b      	ldrb	r3, [r3, #2]
 80019ee:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	460b      	mov	r3, r1
 80019f6:	4911      	ldr	r1, [pc, #68]	; (8001a3c <getRtcString+0x78>)
 80019f8:	f009 fe82 	bl	800b700 <siprintf>
	sprintf(rtcDateStr, "%02d/%02d/%02d", date.Date, date.Month, date.Year);
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <getRtcString+0x74>)
 80019fe:	789b      	ldrb	r3, [r3, #2]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <getRtcString+0x74>)
 8001a04:	785b      	ldrb	r3, [r3, #1]
 8001a06:	4619      	mov	r1, r3
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <getRtcString+0x74>)
 8001a0a:	78db      	ldrb	r3, [r3, #3]
 8001a0c:	4638      	mov	r0, r7
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	460b      	mov	r3, r1
 8001a12:	490b      	ldr	r1, [pc, #44]	; (8001a40 <getRtcString+0x7c>)
 8001a14:	f009 fe74 	bl	800b700 <siprintf>
	sprintf(dateTime, "%s %s", rtcTimeStr, rtcDateStr);
 8001a18:	463b      	mov	r3, r7
 8001a1a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a1e:	4909      	ldr	r1, [pc, #36]	; (8001a44 <getRtcString+0x80>)
 8001a20:	4809      	ldr	r0, [pc, #36]	; (8001a48 <getRtcString+0x84>)
 8001a22:	f009 fe6d 	bl	800b700 <siprintf>

	return dateTime;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <getRtcString+0x84>)
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3768      	adds	r7, #104	; 0x68
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000d68 	.word	0x20000d68
 8001a34:	20000b84 	.word	0x20000b84
 8001a38:	20000d7c 	.word	0x20000d7c
 8001a3c:	0800da34 	.word	0x0800da34
 8001a40:	0800da44 	.word	0x0800da44
 8001a44:	0800da54 	.word	0x0800da54
 8001a48:	20000d80 	.word	0x20000d80

08001a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	f5ad 6d08 	sub.w	sp, sp, #2176	; 0x880
 8001a52:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a54:	f002 ffa6 	bl	80049a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a58:	f000 f96e 	bl	8001d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5c:	f000 fc7c 	bl	8002358 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a60:	f000 f9d4 	bl	8001e0c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001a64:	f000 fa24 	bl	8001eb0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001a68:	f000 fa50 	bl	8001f0c <MX_I2C2_Init>
  MX_SPI1_Init();
 8001a6c:	f000 fad6 	bl	800201c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001a70:	f000 fb0a 	bl	8002088 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8001a74:	f000 fc46 	bl	8002304 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001a78:	f000 fbfc 	bl	8002274 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001a7c:	f000 fc1e 	bl	80022bc <MX_TIM11_Init>
  MX_TIM2_Init();
 8001a80:	f000 fb58 	bl	8002134 <MX_TIM2_Init>
  MX_FATFS_Init();
 8001a84:	f008 f9e4 	bl	8009e50 <MX_FATFS_Init>
  MX_RTC_Init();
 8001a88:	f000 fa6e 	bl	8001f68 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  encoderInit(&htim1);
 8001a8c:	4896      	ldr	r0, [pc, #600]	; (8001ce8 <main+0x29c>)
 8001a8e:	f7ff fe7f 	bl	8001790 <encoderInit>

  ds18_init(&htim10);
 8001a92:	4896      	ldr	r0, [pc, #600]	; (8001cec <main+0x2a0>)
 8001a94:	f7ff fd60 	bl	8001558 <ds18_init>
  adc_int_init(&hadc1);
 8001a98:	4895      	ldr	r0, [pc, #596]	; (8001cf0 <main+0x2a4>)
 8001a9a:	f7ff fa3b 	bl	8000f14 <adc_int_init>
  adc_ext_init(&hi2c2);
 8001a9e:	4895      	ldr	r0, [pc, #596]	; (8001cf4 <main+0x2a8>)
 8001aa0:	f7ff fa48 	bl	8000f34 <adc_ext_init>
  huart_ds_init(&huart6);
 8001aa4:	4894      	ldr	r0, [pc, #592]	; (8001cf8 <main+0x2ac>)
 8001aa6:	f000 fcf1 	bl	800248c <huart_ds_init>
  sendRtcHandler(&hrtc);
 8001aaa:	4894      	ldr	r0, [pc, #592]	; (8001cfc <main+0x2b0>)
 8001aac:	f000 fcfe 	bl	80024ac <sendRtcHandler>
  HAL_TIM_Base_Start(&htim10);
 8001ab0:	488e      	ldr	r0, [pc, #568]	; (8001cec <main+0x2a0>)
 8001ab2:	f006 fc99 	bl	80083e8 <HAL_TIM_Base_Start>
  displayInit();
 8001ab6:	f001 fa77 	bl	8002fa8 <displayInit>
  wire_reset();
 8001aba:	f7ff fd77 	bl	80015ac <wire_reset>

  CircularBuffer_Init(&cb);
 8001abe:	4890      	ldr	r0, [pc, #576]	; (8001d00 <main+0x2b4>)
 8001ac0:	f001 fa78 	bl	8002fb4 <CircularBuffer_Init>
  sd_init();
 8001ac4:	f001 fb20 	bl	8003108 <sd_init>
  send_uart("total: ");
 8001ac8:	488e      	ldr	r0, [pc, #568]	; (8001d04 <main+0x2b8>)
 8001aca:	f7ff fe9d 	bl	8001808 <send_uart>
  send_uart_uint32(sd_totalspace());
 8001ace:	f001 fb7d 	bl	80031cc <sd_totalspace>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff53 	bl	8001980 <send_uart_uint32>
  send_uart("\n\rfree: ");
 8001ada:	488b      	ldr	r0, [pc, #556]	; (8001d08 <main+0x2bc>)
 8001adc:	f7ff fe94 	bl	8001808 <send_uart>
  send_uart_uint32(sd_freespace());
 8001ae0:	f001 fb3e 	bl	8003160 <sd_freespace>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff4a 	bl	8001980 <send_uart_uint32>
  send_uart("\n\r");
 8001aec:	4887      	ldr	r0, [pc, #540]	; (8001d0c <main+0x2c0>)
 8001aee:	f7ff fe8b 	bl	8001808 <send_uart>

  bool debug=true;
 8001af2:	2301      	movs	r3, #1
 8001af4:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001af8:	213c      	movs	r1, #60	; 0x3c
 8001afa:	487b      	ldr	r0, [pc, #492]	; (8001ce8 <main+0x29c>)
 8001afc:	f006 ff5c 	bl	80089b8 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001b00:	2100      	movs	r1, #0
 8001b02:	4883      	ldr	r0, [pc, #524]	; (8001d10 <main+0x2c4>)
 8001b04:	f006 fdb4 	bl	8008670 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001b08:	2104      	movs	r1, #4
 8001b0a:	4881      	ldr	r0, [pc, #516]	; (8001d10 <main+0x2c4>)
 8001b0c:	f006 fdb0 	bl	8008670 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001b10:	2108      	movs	r1, #8
 8001b12:	487f      	ldr	r0, [pc, #508]	; (8001d10 <main+0x2c4>)
 8001b14:	f006 fdac 	bl	8008670 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001b18:	210c      	movs	r1, #12
 8001b1a:	487d      	ldr	r0, [pc, #500]	; (8001d10 <main+0x2c4>)
 8001b1c:	f006 fda8 	bl	8008670 <HAL_TIM_OC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(debug) {
 8001b20:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80db 	beq.w	8001ce0 <main+0x294>
		  bool needToWrite=false;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
		  if(ch1przerwanie==1) {
 8001b30:	4b78      	ldr	r3, [pc, #480]	; (8001d14 <main+0x2c8>)
 8001b32:	f993 3000 	ldrsb.w	r3, [r3]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d107      	bne.n	8001b4a <main+0xfe>
			  ch1Enable();
 8001b3a:	f000 ff4d 	bl	80029d8 <ch1Enable>
			  ch1przerwanie=0;
 8001b3e:	4b75      	ldr	r3, [pc, #468]	; (8001d14 <main+0x2c8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
			  needToWrite=true;
 8001b44:	2301      	movs	r3, #1
 8001b46:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
		  }
		  if(ch2przerwanie==1) {
 8001b4a:	4b73      	ldr	r3, [pc, #460]	; (8001d18 <main+0x2cc>)
 8001b4c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d107      	bne.n	8001b64 <main+0x118>
			  ch2przerwanie=0;
 8001b54:	4b70      	ldr	r3, [pc, #448]	; (8001d18 <main+0x2cc>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
			  ch2Enable();
 8001b5a:	f000 ff9d 	bl	8002a98 <ch2Enable>
			  needToWrite=true;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
		  }
		  if(ch3przerwanie==1) {
 8001b64:	4b6d      	ldr	r3, [pc, #436]	; (8001d1c <main+0x2d0>)
 8001b66:	f993 3000 	ldrsb.w	r3, [r3]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d107      	bne.n	8001b7e <main+0x132>
			  ch3przerwanie=0;
 8001b6e:	4b6b      	ldr	r3, [pc, #428]	; (8001d1c <main+0x2d0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
			  ch3Enable();
 8001b74:	f000 fff0 	bl	8002b58 <ch3Enable>
			  needToWrite=true;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
			  }
		  if(ch4przerwanie==1) {
 8001b7e:	4b68      	ldr	r3, [pc, #416]	; (8001d20 <main+0x2d4>)
 8001b80:	f993 3000 	ldrsb.w	r3, [r3]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d107      	bne.n	8001b98 <main+0x14c>
			  ch4przerwanie=0;
 8001b88:	4b65      	ldr	r3, [pc, #404]	; (8001d20 <main+0x2d4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
			  ch4Enable();
 8001b8e:	f001 f843 	bl	8002c18 <ch4Enable>
			  needToWrite=true;
 8001b92:	2301      	movs	r3, #1
 8001b94:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
		  }
		  if(needToWrite) {
 8001b98:	f897 3877 	ldrb.w	r3, [r7, #2167]	; 0x877
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 809f 	beq.w	8001ce0 <main+0x294>
			  char* dateTimeStr = getRtcString();
 8001ba2:	f7ff ff0f 	bl	80019c4 <getRtcString>
 8001ba6:	f8c7 0868 	str.w	r0, [r7, #2152]	; 0x868
			  char finalResults[2048] = "";
 8001baa:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8001bae:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f009 feb0 	bl	800b924 <memset>
			  char temp[100];
			  bool allNulls=true;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f887 3876 	strb.w	r3, [r7, #2166]	; 0x876
			  snprintf(finalResults, sizeof(finalResults), "%s,", dateTimeStr);
 8001bca:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001bce:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8001bd2:	4a54      	ldr	r2, [pc, #336]	; (8001d24 <main+0x2d8>)
 8001bd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bd8:	f009 fd5e 	bl	800b698 <sniprintf>

			  for (int i = 0; i < 11; i++) {
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 3870 	str.w	r3, [r7, #2160]	; 0x870
 8001be2:	e054      	b.n	8001c8e <main+0x242>
				  if (sensors[i].hasValue) {
 8001be4:	4a50      	ldr	r2, [pc, #320]	; (8001d28 <main+0x2dc>)
 8001be6:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001bea:	015b      	lsls	r3, r3, #5
 8001bec:	4413      	add	r3, r2
 8001bee:	331c      	adds	r3, #28
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d016      	beq.n	8001c24 <main+0x1d8>
					  snprintf(temp, sizeof(temp), "%f", sensors[i].lastValue);
 8001bf6:	4a4c      	ldr	r2, [pc, #304]	; (8001d28 <main+0x2dc>)
 8001bf8:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001bfc:	015b      	lsls	r3, r3, #5
 8001bfe:	4413      	add	r3, r2
 8001c00:	3318      	adds	r3, #24
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fcb7 	bl	8000578 <__aeabi_f2d>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4638      	mov	r0, r7
 8001c10:	e9cd 2300 	strd	r2, r3, [sp]
 8001c14:	4a45      	ldr	r2, [pc, #276]	; (8001d2c <main+0x2e0>)
 8001c16:	2164      	movs	r1, #100	; 0x64
 8001c18:	f009 fd3e 	bl	800b698 <sniprintf>
					  allNulls=false;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f887 3876 	strb.w	r3, [r7, #2166]	; 0x876
 8001c22:	e005      	b.n	8001c30 <main+0x1e4>
				  } else {
					  snprintf(temp, sizeof(temp), "");
 8001c24:	463b      	mov	r3, r7
 8001c26:	4a42      	ldr	r2, [pc, #264]	; (8001d30 <main+0x2e4>)
 8001c28:	2164      	movs	r1, #100	; 0x64
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f009 fd34 	bl	800b698 <sniprintf>
				  }
				  strncat(finalResults, temp, sizeof(finalResults) - strlen(finalResults) - 1);
 8001c30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fb33 	bl	80002a0 <strlen>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8001c40:	3307      	adds	r3, #7
 8001c42:	4639      	mov	r1, r7
 8001c44:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f009 fe73 	bl	800b934 <strncat>

				  // Dodaj przecinek, chyba że to ostatni element
				  if (i < 10) {
 8001c4e:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001c52:	2b09      	cmp	r3, #9
 8001c54:	dc0e      	bgt.n	8001c74 <main+0x228>
					  strncat(finalResults, ",", sizeof(finalResults) - strlen(finalResults) - 1);
 8001c56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fb20 	bl	80002a0 <strlen>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8001c66:	3307      	adds	r3, #7
 8001c68:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4931      	ldr	r1, [pc, #196]	; (8001d34 <main+0x2e8>)
 8001c70:	f009 fe60 	bl	800b934 <strncat>
				  }
				  sensors[i].hasValue = false; // Resetowanie flagi
 8001c74:	4a2c      	ldr	r2, [pc, #176]	; (8001d28 <main+0x2dc>)
 8001c76:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001c7a:	015b      	lsls	r3, r3, #5
 8001c7c:	4413      	add	r3, r2
 8001c7e:	331c      	adds	r3, #28
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 11; i++) {
 8001c84:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001c88:	3301      	adds	r3, #1
 8001c8a:	f8c7 3870 	str.w	r3, [r7, #2160]	; 0x870
 8001c8e:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001c92:	2b0a      	cmp	r3, #10
 8001c94:	dda6      	ble.n	8001be4 <main+0x198>
			  }
			      strncat(finalResults, "\n\r", sizeof(finalResults) - strlen(finalResults) - 1);
 8001c96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fb00 	bl	80002a0 <strlen>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8001ca6:	3307      	adds	r3, #7
 8001ca8:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001cac:	461a      	mov	r2, r3
 8001cae:	4917      	ldr	r1, [pc, #92]	; (8001d0c <main+0x2c0>)
 8001cb0:	f009 fe40 	bl	800b934 <strncat>
			      if(!allNulls) {
 8001cb4:	f897 3876 	ldrb.w	r3, [r7, #2166]	; 0x876
 8001cb8:	f083 0301 	eor.w	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <main+0x282>
			    	  CircularBuffer_Add(&cb, finalResults);
 8001cc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <main+0x2b4>)
 8001cca:	f001 f98b 	bl	8002fe4 <CircularBuffer_Add>
			      }
			      volatile const char *dataFromBuff = CircularBuffer_Read(&cb);
 8001cce:	480c      	ldr	r0, [pc, #48]	; (8001d00 <main+0x2b4>)
 8001cd0:	f001 f9da 	bl	8003088 <CircularBuffer_Read>
 8001cd4:	f8c7 0864 	str.w	r0, [r7, #2148]	; 0x864
				  send_uart(dataFromBuff);
 8001cd8:	f8d7 0864 	ldr.w	r0, [r7, #2148]	; 0x864
 8001cdc:	f7ff fd94 	bl	8001808 <send_uart>
			      //send_uart(finalResults);
		  }
	  }
	displayMenu();
 8001ce0:	f001 f93a 	bl	8002f58 <displayMenu>
	  if(debug) {
 8001ce4:	e71c      	b.n	8001b20 <main+0xd4>
 8001ce6:	bf00      	nop
 8001ce8:	20000bfc 	.word	0x20000bfc
 8001cec:	20000c8c 	.word	0x20000c8c
 8001cf0:	20000a94 	.word	0x20000a94
 8001cf4:	20000b30 	.word	0x20000b30
 8001cf8:	20000d1c 	.word	0x20000d1c
 8001cfc:	20000b84 	.word	0x20000b84
 8001d00:	20000e04 	.word	0x20000e04
 8001d04:	0800da5c 	.word	0x0800da5c
 8001d08:	0800da64 	.word	0x0800da64
 8001d0c:	0800da70 	.word	0x0800da70
 8001d10:	20000c44 	.word	0x20000c44
 8001d14:	20000d61 	.word	0x20000d61
 8001d18:	20000d62 	.word	0x20000d62
 8001d1c:	20000d63 	.word	0x20000d63
 8001d20:	20000d64 	.word	0x20000d64
 8001d24:	0800da74 	.word	0x0800da74
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	0800da78 	.word	0x0800da78
 8001d30:	0800da7c 	.word	0x0800da7c
 8001d34:	0800da80 	.word	0x0800da80

08001d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b094      	sub	sp, #80	; 0x50
 8001d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d3e:	f107 0320 	add.w	r3, r7, #32
 8001d42:	2230      	movs	r2, #48	; 0x30
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f009 fdec 	bl	800b924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <SystemClock_Config+0xcc>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <SystemClock_Config+0xcc>)
 8001d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6c:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <SystemClock_Config+0xcc>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <SystemClock_Config+0xd0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a21      	ldr	r2, [pc, #132]	; (8001e08 <SystemClock_Config+0xd0>)
 8001d82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <SystemClock_Config+0xd0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001d94:	230a      	movs	r3, #10
 8001d96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d9c:	2310      	movs	r3, #16
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001da0:	2301      	movs	r3, #1
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da4:	2302      	movs	r3, #2
 8001da6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001da8:	2300      	movs	r3, #0
 8001daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dac:	2308      	movs	r3, #8
 8001dae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001db0:	2350      	movs	r3, #80	; 0x50
 8001db2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001db4:	2302      	movs	r3, #2
 8001db6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001db8:	2304      	movs	r3, #4
 8001dba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dbc:	f107 0320 	add.w	r3, r7, #32
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f004 fe49 	bl	8006a58 <HAL_RCC_OscConfig>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001dcc:	f000 fb54 	bl	8002478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	2102      	movs	r1, #2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f005 f8ab 	bl	8006f48 <HAL_RCC_ClockConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001df8:	f000 fb3e 	bl	8002478 <Error_Handler>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3750      	adds	r7, #80	; 0x50
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40007000 	.word	0x40007000

08001e0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e12:	463b      	mov	r3, r7
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e1e:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e20:	4a21      	ldr	r2, [pc, #132]	; (8001ea8 <MX_ADC1_Init+0x9c>)
 8001e22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e24:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e4c:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e4e:	4a17      	ldr	r2, [pc, #92]	; (8001eac <MX_ADC1_Init+0xa0>)
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e6e:	f002 fe2f 	bl	8004ad0 <HAL_ADC_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e78:	f000 fafe 	bl	8002478 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e80:	2301      	movs	r3, #1
 8001e82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001e84:	2302      	movs	r3, #2
 8001e86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e88:	463b      	mov	r3, r7
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_ADC1_Init+0x98>)
 8001e8e:	f002 ffaf 	bl	8004df0 <HAL_ADC_ConfigChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e98:	f000 faee 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000a94 	.word	0x20000a94
 8001ea8:	40012000 	.word	0x40012000
 8001eac:	0f000001 	.word	0x0f000001

08001eb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001eb6:	4a13      	ldr	r2, [pc, #76]	; (8001f04 <MX_I2C1_Init+0x54>)
 8001eb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001ebc:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <MX_I2C1_Init+0x58>)
 8001ebe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001ece:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ed2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eec:	4804      	ldr	r0, [pc, #16]	; (8001f00 <MX_I2C1_Init+0x50>)
 8001eee:	f003 fc8d 	bl	800580c <HAL_I2C_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ef8:	f000 fabe 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000adc 	.word	0x20000adc
 8001f04:	40005400 	.word	0x40005400
 8001f08:	000186a0 	.word	0x000186a0

08001f0c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <MX_I2C2_Init+0x50>)
 8001f12:	4a13      	ldr	r2, [pc, #76]	; (8001f60 <MX_I2C2_Init+0x54>)
 8001f14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_I2C2_Init+0x50>)
 8001f18:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <MX_I2C2_Init+0x58>)
 8001f1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <MX_I2C2_Init+0x50>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_I2C2_Init+0x50>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_I2C2_Init+0x50>)
 8001f2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f2e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <MX_I2C2_Init+0x50>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_I2C2_Init+0x50>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <MX_I2C2_Init+0x50>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_I2C2_Init+0x50>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f48:	4804      	ldr	r0, [pc, #16]	; (8001f5c <MX_I2C2_Init+0x50>)
 8001f4a:	f003 fc5f 	bl	800580c <HAL_I2C_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f54:	f000 fa90 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000b30 	.word	0x20000b30
 8001f60:	40005800 	.word	0x40005800
 8001f64:	000186a0 	.word	0x000186a0

08001f68 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f80:	4b24      	ldr	r3, [pc, #144]	; (8002014 <MX_RTC_Init+0xac>)
 8001f82:	4a25      	ldr	r2, [pc, #148]	; (8002018 <MX_RTC_Init+0xb0>)
 8001f84:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f86:	4b23      	ldr	r3, [pc, #140]	; (8002014 <MX_RTC_Init+0xac>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f8c:	4b21      	ldr	r3, [pc, #132]	; (8002014 <MX_RTC_Init+0xac>)
 8001f8e:	227f      	movs	r2, #127	; 0x7f
 8001f90:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <MX_RTC_Init+0xac>)
 8001f94:	22ff      	movs	r2, #255	; 0xff
 8001f96:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f98:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <MX_RTC_Init+0xac>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <MX_RTC_Init+0xac>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <MX_RTC_Init+0xac>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001faa:	481a      	ldr	r0, [pc, #104]	; (8002014 <MX_RTC_Init+0xac>)
 8001fac:	f005 fa9c 	bl	80074e8 <HAL_RTC_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001fb6:	f000 fa5f 	bl	8002478 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	480f      	ldr	r0, [pc, #60]	; (8002014 <MX_RTC_Init+0xac>)
 8001fd6:	f005 fafd 	bl	80075d4 <HAL_RTC_SetTime>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001fe0:	f000 fa4a 	bl	8002478 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8001fe8:	2312      	movs	r3, #18
 8001fea:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 8001fec:	2306      	movs	r3, #6
 8001fee:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001ff0:	2323      	movs	r3, #35	; 0x23
 8001ff2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4806      	ldr	r0, [pc, #24]	; (8002014 <MX_RTC_Init+0xac>)
 8001ffc:	f005 fbe2 	bl	80077c4 <HAL_RTC_SetDate>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002006:	f000 fa37 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000b84 	.word	0x20000b84
 8002018:	40002800 	.word	0x40002800

0800201c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002020:	4b17      	ldr	r3, [pc, #92]	; (8002080 <MX_SPI1_Init+0x64>)
 8002022:	4a18      	ldr	r2, [pc, #96]	; (8002084 <MX_SPI1_Init+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <MX_SPI1_Init+0x64>)
 8002028:	f44f 7282 	mov.w	r2, #260	; 0x104
 800202c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <MX_SPI1_Init+0x64>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <MX_SPI1_Init+0x64>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <MX_SPI1_Init+0x64>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <MX_SPI1_Init+0x64>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <MX_SPI1_Init+0x64>)
 8002048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800204c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <MX_SPI1_Init+0x64>)
 8002050:	2220      	movs	r2, #32
 8002052:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <MX_SPI1_Init+0x64>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <MX_SPI1_Init+0x64>)
 800205c:	2200      	movs	r2, #0
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <MX_SPI1_Init+0x64>)
 8002062:	2200      	movs	r2, #0
 8002064:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <MX_SPI1_Init+0x64>)
 8002068:	220a      	movs	r2, #10
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800206c:	4804      	ldr	r0, [pc, #16]	; (8002080 <MX_SPI1_Init+0x64>)
 800206e:	f005 fd39 	bl	8007ae4 <HAL_SPI_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002078:	f000 f9fe 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000ba4 	.word	0x20000ba4
 8002084:	40013000 	.word	0x40013000

08002088 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08c      	sub	sp, #48	; 0x30
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	2224      	movs	r2, #36	; 0x24
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f009 fc44 	bl	800b924 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <MX_TIM1_Init+0xa4>)
 80020a6:	4a22      	ldr	r2, [pc, #136]	; (8002130 <MX_TIM1_Init+0xa8>)
 80020a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <MX_TIM1_Init+0xa4>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <MX_TIM1_Init+0xa4>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40;
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <MX_TIM1_Init+0xa4>)
 80020b8:	2228      	movs	r2, #40	; 0x28
 80020ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <MX_TIM1_Init+0xa4>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	; (800212c <MX_TIM1_Init+0xa4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <MX_TIM1_Init+0xa4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80020ce:	2301      	movs	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020d6:	2301      	movs	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80020de:	230f      	movs	r3, #15
 80020e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020e6:	2301      	movs	r3, #1
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020ea:	2300      	movs	r3, #0
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80020ee:	230f      	movs	r3, #15
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	4619      	mov	r1, r3
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <MX_TIM1_Init+0xa4>)
 80020fa:	f006 fbb7 	bl	800886c <HAL_TIM_Encoder_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8002104:	f000 f9b8 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	4619      	mov	r1, r3
 8002114:	4805      	ldr	r0, [pc, #20]	; (800212c <MX_TIM1_Init+0xa4>)
 8002116:	f007 fa57 	bl	80095c8 <HAL_TIMEx_MasterConfigSynchronization>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002120:	f000 f9aa 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	3730      	adds	r7, #48	; 0x30
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000bfc 	.word	0x20000bfc
 8002130:	40010000 	.word	0x40010000

08002134 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08e      	sub	sp, #56	; 0x38
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800213a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002148:	f107 0320 	add.w	r3, r7, #32
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
 8002160:	615a      	str	r2, [r3, #20]
 8002162:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002164:	4b41      	ldr	r3, [pc, #260]	; (800226c <MX_TIM2_Init+0x138>)
 8002166:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800216a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12000;
 800216c:	4b3f      	ldr	r3, [pc, #252]	; (800226c <MX_TIM2_Init+0x138>)
 800216e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002172:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002174:	4b3d      	ldr	r3, [pc, #244]	; (800226c <MX_TIM2_Init+0x138>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800217a:	4b3c      	ldr	r3, [pc, #240]	; (800226c <MX_TIM2_Init+0x138>)
 800217c:	f04f 32ff 	mov.w	r2, #4294967295
 8002180:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002182:	4b3a      	ldr	r3, [pc, #232]	; (800226c <MX_TIM2_Init+0x138>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002188:	4b38      	ldr	r3, [pc, #224]	; (800226c <MX_TIM2_Init+0x138>)
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800218e:	4837      	ldr	r0, [pc, #220]	; (800226c <MX_TIM2_Init+0x138>)
 8002190:	f006 f8da 	bl	8008348 <HAL_TIM_Base_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800219a:	f000 f96d 	bl	8002478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021a8:	4619      	mov	r1, r3
 80021aa:	4830      	ldr	r0, [pc, #192]	; (800226c <MX_TIM2_Init+0x138>)
 80021ac:	f006 fe16 	bl	8008ddc <HAL_TIM_ConfigClockSource>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80021b6:	f000 f95f 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80021ba:	482c      	ldr	r0, [pc, #176]	; (800226c <MX_TIM2_Init+0x138>)
 80021bc:	f006 f9ff 	bl	80085be <HAL_TIM_OC_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80021c6:	f000 f957 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021d2:	f107 0320 	add.w	r3, r7, #32
 80021d6:	4619      	mov	r1, r3
 80021d8:	4824      	ldr	r0, [pc, #144]	; (800226c <MX_TIM2_Init+0x138>)
 80021da:	f007 f9f5 	bl	80095c8 <HAL_TIMEx_MasterConfigSynchronization>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80021e4:	f000 f948 	bl	8002478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80021e8:	2330      	movs	r3, #48	; 0x30
 80021ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6659;
 80021ec:	f641 2303 	movw	r3, #6659	; 0x1a03
 80021f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	2200      	movs	r2, #0
 80021fe:	4619      	mov	r1, r3
 8002200:	481a      	ldr	r0, [pc, #104]	; (800226c <MX_TIM2_Init+0x138>)
 8002202:	f006 fd8f 	bl	8008d24 <HAL_TIM_OC_ConfigChannel>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800220c:	f000 f934 	bl	8002478 <Error_Handler>
  }
  sConfigOC.Pulse = 13500;
 8002210:	f243 43bc 	movw	r3, #13500	; 0x34bc
 8002214:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	2204      	movs	r2, #4
 800221a:	4619      	mov	r1, r3
 800221c:	4813      	ldr	r0, [pc, #76]	; (800226c <MX_TIM2_Init+0x138>)
 800221e:	f006 fd81 	bl	8008d24 <HAL_TIM_OC_ConfigChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8002228:	f000 f926 	bl	8002478 <Error_Handler>
  }
  sConfigOC.Pulse = 36000;
 800222c:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 8002230:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	2208      	movs	r2, #8
 8002236:	4619      	mov	r1, r3
 8002238:	480c      	ldr	r0, [pc, #48]	; (800226c <MX_TIM2_Init+0x138>)
 800223a:	f006 fd73 	bl	8008d24 <HAL_TIM_OC_ConfigChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 8002244:	f000 f918 	bl	8002478 <Error_Handler>
  }
  sConfigOC.Pulse = 67000;
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <MX_TIM2_Init+0x13c>)
 800224a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	220c      	movs	r2, #12
 8002250:	4619      	mov	r1, r3
 8002252:	4806      	ldr	r0, [pc, #24]	; (800226c <MX_TIM2_Init+0x138>)
 8002254:	f006 fd66 	bl	8008d24 <HAL_TIM_OC_ConfigChannel>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 800225e:	f000 f90b 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	3738      	adds	r7, #56	; 0x38
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000c44 	.word	0x20000c44
 8002270:	000105b8 	.word	0x000105b8

08002274 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <MX_TIM10_Init+0x40>)
 800227a:	4a0f      	ldr	r2, [pc, #60]	; (80022b8 <MX_TIM10_Init+0x44>)
 800227c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <MX_TIM10_Init+0x40>)
 8002280:	224f      	movs	r2, #79	; 0x4f
 8002282:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <MX_TIM10_Init+0x40>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <MX_TIM10_Init+0x40>)
 800228c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002290:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <MX_TIM10_Init+0x40>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <MX_TIM10_Init+0x40>)
 800229a:	2200      	movs	r2, #0
 800229c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <MX_TIM10_Init+0x40>)
 80022a0:	f006 f852 	bl	8008348 <HAL_TIM_Base_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80022aa:	f000 f8e5 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000c8c 	.word	0x20000c8c
 80022b8:	40014400 	.word	0x40014400

080022bc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80022c0:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <MX_TIM11_Init+0x40>)
 80022c2:	4a0f      	ldr	r2, [pc, #60]	; (8002300 <MX_TIM11_Init+0x44>)
 80022c4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10;
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <MX_TIM11_Init+0x40>)
 80022c8:	220a      	movs	r2, #10
 80022ca:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <MX_TIM11_Init+0x40>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <MX_TIM11_Init+0x40>)
 80022d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <MX_TIM11_Init+0x40>)
 80022dc:	2200      	movs	r2, #0
 80022de:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MX_TIM11_Init+0x40>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80022e6:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_TIM11_Init+0x40>)
 80022e8:	f006 f82e 	bl	8008348 <HAL_TIM_Base_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80022f2:	f000 f8c1 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000cd4 	.word	0x20000cd4
 8002300:	40014800 	.word	0x40014800

08002304 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <MX_USART6_UART_Init+0x4c>)
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <MX_USART6_UART_Init+0x50>)
 800230c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <MX_USART6_UART_Init+0x4c>)
 8002310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002314:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <MX_USART6_UART_Init+0x4c>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <MX_USART6_UART_Init+0x4c>)
 800231e:	2200      	movs	r2, #0
 8002320:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <MX_USART6_UART_Init+0x4c>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <MX_USART6_UART_Init+0x4c>)
 800232a:	220c      	movs	r2, #12
 800232c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <MX_USART6_UART_Init+0x4c>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <MX_USART6_UART_Init+0x4c>)
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800233a:	4805      	ldr	r0, [pc, #20]	; (8002350 <MX_USART6_UART_Init+0x4c>)
 800233c:	f007 f9c6 	bl	80096cc <HAL_UART_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002346:	f000 f897 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000d1c 	.word	0x20000d1c
 8002354:	40011400 	.word	0x40011400

08002358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235e:	f107 030c 	add.w	r3, r7, #12
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	4b3e      	ldr	r3, [pc, #248]	; (800246c <MX_GPIO_Init+0x114>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a3d      	ldr	r2, [pc, #244]	; (800246c <MX_GPIO_Init+0x114>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b3b      	ldr	r3, [pc, #236]	; (800246c <MX_GPIO_Init+0x114>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	4b37      	ldr	r3, [pc, #220]	; (800246c <MX_GPIO_Init+0x114>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a36      	ldr	r2, [pc, #216]	; (800246c <MX_GPIO_Init+0x114>)
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b34      	ldr	r3, [pc, #208]	; (800246c <MX_GPIO_Init+0x114>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_SD_Pin|LED5_Pin, GPIO_PIN_RESET);
 80023a6:	2200      	movs	r2, #0
 80023a8:	f248 0110 	movw	r1, #32784	; 0x8010
 80023ac:	4830      	ldr	r0, [pc, #192]	; (8002470 <MX_GPIO_Init+0x118>)
 80023ae:	f003 f9fb 	bl	80057a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	2102      	movs	r1, #2
 80023b6:	482f      	ldr	r0, [pc, #188]	; (8002474 <MX_GPIO_Init+0x11c>)
 80023b8:	f003 f9f6 	bl	80057a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|LED4_Pin|LED3_Pin, GPIO_PIN_RESET);
 80023bc:	2200      	movs	r2, #0
 80023be:	f243 0118 	movw	r1, #12312	; 0x3018
 80023c2:	482c      	ldr	r0, [pc, #176]	; (8002474 <MX_GPIO_Init+0x11c>)
 80023c4:	f003 f9f0 	bl	80057a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_SD_Pin LED5_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin|LED5_Pin;
 80023c8:	f248 0310 	movw	r3, #32784	; 0x8010
 80023cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ce:	2301      	movs	r3, #1
 80023d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 030c 	add.w	r3, r7, #12
 80023de:	4619      	mov	r1, r3
 80023e0:	4823      	ldr	r0, [pc, #140]	; (8002470 <MX_GPIO_Init+0x118>)
 80023e2:	f003 f845 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSO_DATA_Pin */
  GPIO_InitStruct.Pin = DSO_DATA_Pin;
 80023e6:	2302      	movs	r3, #2
 80023e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80023ea:	2311      	movs	r3, #17
 80023ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ee:	2301      	movs	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DSO_DATA_GPIO_Port, &GPIO_InitStruct);
 80023f6:	f107 030c 	add.w	r3, r7, #12
 80023fa:	4619      	mov	r1, r3
 80023fc:	481d      	ldr	r0, [pc, #116]	; (8002474 <MX_GPIO_Init+0x11c>)
 80023fe:	f003 f837 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pin : DET_SD_Pin */
  GPIO_InitStruct.Pin = DET_SD_Pin;
 8002402:	2304      	movs	r3, #4
 8002404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800240a:	2302      	movs	r3, #2
 800240c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DET_SD_GPIO_Port, &GPIO_InitStruct);
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	4619      	mov	r1, r3
 8002414:	4817      	ldr	r0, [pc, #92]	; (8002474 <MX_GPIO_Init+0x11c>)
 8002416:	f003 f82b 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED4_Pin|LED3_Pin;
 800241a:	f243 0318 	movw	r3, #12312	; 0x3018
 800241e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002420:	2301      	movs	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002428:	2300      	movs	r3, #0
 800242a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	4619      	mov	r1, r3
 8002432:	4810      	ldr	r0, [pc, #64]	; (8002474 <MX_GPIO_Init+0x11c>)
 8002434:	f003 f81c 	bl	8005470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BTN_Pin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8002438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800243e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	4619      	mov	r1, r3
 800244e:	4809      	ldr	r0, [pc, #36]	; (8002474 <MX_GPIO_Init+0x11c>)
 8002450:	f003 f80e 	bl	8005470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	2017      	movs	r0, #23
 800245a:	f002 ffd2 	bl	8005402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800245e:	2017      	movs	r0, #23
 8002460:	f002 ffeb 	bl	800543a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002464:	bf00      	nop
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40023800 	.word	0x40023800
 8002470:	40020000 	.word	0x40020000
 8002474:	40020400 	.word	0x40020400

08002478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800247c:	b672      	cpsid	i
}
 800247e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  send_uart("error handler loop"); //dodane
 8002480:	4801      	ldr	r0, [pc, #4]	; (8002488 <Error_Handler+0x10>)
 8002482:	f7ff f9c1 	bl	8001808 <send_uart>
 8002486:	e7fb      	b.n	8002480 <Error_Handler+0x8>
 8002488:	0800da84 	.word	0x0800da84

0800248c <huart_ds_init>:
volatile Screen screen = MAIN_MENU; //instancja enuma Screen, aktualny stan menu
int sensorAdcExt=0;
UART_HandleTypeDef *huart6_new;
RTC_HandleTypeDef *hrtc_new;

void huart_ds_init(UART_HandleTypeDef *huart6) {
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	huart6_new=huart6;
 8002494:	4a04      	ldr	r2, [pc, #16]	; (80024a8 <huart_ds_init+0x1c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000de8 	.word	0x20000de8

080024ac <sendRtcHandler>:

void sendRtcHandler(RTC_HandleTypeDef *hrtc) {
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	hrtc_new=hrtc;
 80024b4:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <sendRtcHandler+0x1c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000dec 	.word	0x20000dec

080024cc <backButton>:

void backButton(uint8_t back_pos, uint8_t target_screen, uint16_t encoder_pos) { //usunac encoder_pos bo nieuzywane
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
 80024d6:	460b      	mov	r3, r1
 80024d8:	71bb      	strb	r3, [r7, #6]
 80024da:	4613      	mov	r3, r2
 80024dc:	80bb      	strh	r3, [r7, #4]
	ssd1306_SetCursor(0, 56);
 80024de:	2138      	movs	r1, #56	; 0x38
 80024e0:	2000      	movs	r0, #0
 80024e2:	f002 fa15 	bl	8004910 <ssd1306_SetCursor>
	ssd1306_WriteString("COFNIJ", Font_6x8, entrySelected(back_pos) ? Black : White);
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f960 	bl	80017b0 <entrySelected>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f083 0301 	eor.w	r3, r3, #1
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <backButton+0x5c>)
 80024fa:	ca06      	ldmia	r2, {r1, r2}
 80024fc:	480b      	ldr	r0, [pc, #44]	; (800252c <backButton+0x60>)
 80024fe:	f002 f9e1 	bl	80048c4 <ssd1306_WriteString>
	if(entryClicked(back_pos)) {
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	b21b      	sxth	r3, r3
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff f965 	bl	80017d6 <entryClicked>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <backButton+0x52>
		encSetPos(0);
 8002512:	2000      	movs	r0, #0
 8002514:	f7ff f91c 	bl	8001750 <encSetPos>
		//confirm=true;
		screen = target_screen;
 8002518:	4a05      	ldr	r2, [pc, #20]	; (8002530 <backButton+0x64>)
 800251a:	79bb      	ldrb	r3, [r7, #6]
 800251c:	7013      	strb	r3, [r2, #0]
	}
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	2000086c 	.word	0x2000086c
 800252c:	0800da98 	.word	0x0800da98
 8002530:	20000de4 	.word	0x20000de4

08002534 <listAllItemsFromMenu>:

void listAllItemsFromMenu(Menu *menu) {
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < menu->entry_count; ++i) { //-> bo entry_count na stercie cpu jest (heap)
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	e031      	b.n	80025a6 <listAllItemsFromMenu+0x72>
			ssd1306_SetCursor(0, i*10);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	0092      	lsls	r2, r2, #2
 800254a:	4413      	add	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	4619      	mov	r1, r3
 8002552:	2000      	movs	r0, #0
 8002554:	f002 f9dc 	bl	8004910 <ssd1306_SetCursor>
			if(entryClicked(i)) {
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	b21b      	sxth	r3, r3
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff f93a 	bl	80017d6 <entryClicked>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <listAllItemsFromMenu+0x44>
				screen = menu->entries[i].entry;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	3201      	adds	r2, #1
 800256e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <listAllItemsFromMenu+0x88>)
 8002574:	701a      	strb	r2, [r3, #0]
				break;
 8002576:	e01c      	b.n	80025b2 <listAllItemsFromMenu+0x7e>
			}
			ssd1306_WriteString(menu->entries[i].entry_string, Font_7x10, entrySelected(i) ? Black : White);
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	3301      	adds	r3, #1
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	685c      	ldr	r4, [r3, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	b21b      	sxth	r3, r3
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff f911 	bl	80017b0 <entrySelected>
 800258e:	4603      	mov	r3, r0
 8002590:	f083 0301 	eor.w	r3, r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <listAllItemsFromMenu+0x8c>)
 8002598:	ca06      	ldmia	r2, {r1, r2}
 800259a:	4620      	mov	r0, r4
 800259c:	f002 f992 	bl	80048c4 <ssd1306_WriteString>
	for (int i = 0; i < menu->entry_count; ++i) { //-> bo entry_count na stercie cpu jest (heap)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	dbc8      	blt.n	8002542 <listAllItemsFromMenu+0xe>
		  }
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd90      	pop	{r4, r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000de4 	.word	0x20000de4
 80025c0:	20000874 	.word	0x20000874

080025c4 <drawMainMenu>:

void drawMainMenu(Menu *menu) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	encSetRange(0, 4);
 80025cc:	2104      	movs	r1, #4
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7ff f8a4 	bl	800171c <encSetRange>
	listAllItemsFromMenu(menu);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ffad 	bl	8002534 <listAllItemsFromMenu>
	uint32_t encVal = encoderGet();
 80025da:	f7ff f8cb 	bl	8001774 <encoderGet>
 80025de:	60f8      	str	r0, [r7, #12]
	char charArVal[4];
	sprintf(charArVal, "%lu", encVal);
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	490f      	ldr	r1, [pc, #60]	; (8002624 <drawMainMenu+0x60>)
 80025e8:	4618      	mov	r0, r3
 80025ea:	f009 f889 	bl	800b700 <siprintf>
	ssd1306_SetCursor(0, 44);
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	2000      	movs	r0, #0
 80025f2:	f002 f98d 	bl	8004910 <ssd1306_SetCursor>
	ssd1306_WriteString(charArVal, Font_7x10, White);
 80025f6:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <drawMainMenu+0x64>)
 80025f8:	f107 0008 	add.w	r0, r7, #8
 80025fc:	2301      	movs	r3, #1
 80025fe:	ca06      	ldmia	r2, {r1, r2}
 8002600:	f002 f960 	bl	80048c4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 54);
 8002604:	2136      	movs	r1, #54	; 0x36
 8002606:	2000      	movs	r0, #0
 8002608:	f002 f982 	bl	8004910 <ssd1306_SetCursor>
	ssd1306_WriteString(getRtcString(), Font_7x10, White);
 800260c:	f7ff f9da 	bl	80019c4 <getRtcString>
 8002610:	4a05      	ldr	r2, [pc, #20]	; (8002628 <drawMainMenu+0x64>)
 8002612:	2301      	movs	r3, #1
 8002614:	ca06      	ldmia	r2, {r1, r2}
 8002616:	f002 f955 	bl	80048c4 <ssd1306_WriteString>

}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	0800daa0 	.word	0x0800daa0
 8002628:	20000874 	.word	0x20000874

0800262c <drawSensorConfig>:

void drawSensorConfig(Menu *menu) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	encSetRange(0, 3);
 8002634:	2103      	movs	r1, #3
 8002636:	2000      	movs	r0, #0
 8002638:	f7ff f870 	bl	800171c <encSetRange>
	listAllItemsFromMenu(menu);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff79 	bl	8002534 <listAllItemsFromMenu>
	backButton(3, MAIN_MENU, 1);
 8002642:	2201      	movs	r2, #1
 8002644:	2100      	movs	r1, #0
 8002646:	2003      	movs	r0, #3
 8002648:	f7ff ff40 	bl	80024cc <backButton>
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <drawSdConfig>:


volatile bool dataOverwrite=false;
char strDataOverwrite[6];
void drawSdConfig(Menu *menu) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
//	detSd();
	encSetRange(0, 1);
 800265c:	2101      	movs	r1, #1
 800265e:	2000      	movs	r0, #0
 8002660:	f7ff f85c 	bl	800171c <encSetRange>
	ssd1306_SetCursor(0, 0);
 8002664:	2100      	movs	r1, #0
 8002666:	2000      	movs	r0, #0
 8002668:	f002 f952 	bl	8004910 <ssd1306_SetCursor>
	ssd1306_WriteString("SD status:", Font_7x10, White);
 800266c:	4a42      	ldr	r2, [pc, #264]	; (8002778 <drawSdConfig+0x124>)
 800266e:	2301      	movs	r3, #1
 8002670:	ca06      	ldmia	r2, {r1, r2}
 8002672:	4842      	ldr	r0, [pc, #264]	; (800277c <drawSdConfig+0x128>)
 8002674:	f002 f926 	bl	80048c4 <ssd1306_WriteString>
	ssd1306_SetCursor(70, 0);
 8002678:	2100      	movs	r1, #0
 800267a:	2046      	movs	r0, #70	; 0x46
 800267c:	f002 f948 	bl	8004910 <ssd1306_SetCursor>
	if(!sdReady) {
 8002680:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <drawSdConfig+0x12c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	f083 0301 	eor.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d023      	beq.n	80026d6 <drawSdConfig+0x82>
		ssd1306_WriteString(" ERROR", Font_7x10, White);
 800268e:	4a3a      	ldr	r2, [pc, #232]	; (8002778 <drawSdConfig+0x124>)
 8002690:	2301      	movs	r3, #1
 8002692:	ca06      	ldmia	r2, {r1, r2}
 8002694:	483b      	ldr	r0, [pc, #236]	; (8002784 <drawSdConfig+0x130>)
 8002696:	f002 f915 	bl	80048c4 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 10);
 800269a:	210a      	movs	r1, #10
 800269c:	2000      	movs	r0, #0
 800269e:	f002 f937 	bl	8004910 <ssd1306_SetCursor>
		ssd1306_WriteString(getFresultString(fresult), Font_7x10, White);
 80026a2:	4b39      	ldr	r3, [pc, #228]	; (8002788 <drawSdConfig+0x134>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fdc7 	bl	800323c <getFresultString>
 80026ae:	4a32      	ldr	r2, [pc, #200]	; (8002778 <drawSdConfig+0x124>)
 80026b0:	2301      	movs	r3, #1
 80026b2:	ca06      	ldmia	r2, {r1, r2}
 80026b4:	f002 f906 	bl	80048c4 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 20);
 80026b8:	2114      	movs	r1, #20
 80026ba:	2000      	movs	r0, #0
 80026bc:	f002 f928 	bl	8004910 <ssd1306_SetCursor>
		ssd1306_WriteString("Start forbidden", Font_7x10, White);
 80026c0:	4a2d      	ldr	r2, [pc, #180]	; (8002778 <drawSdConfig+0x124>)
 80026c2:	2301      	movs	r3, #1
 80026c4:	ca06      	ldmia	r2, {r1, r2}
 80026c6:	4831      	ldr	r0, [pc, #196]	; (800278c <drawSdConfig+0x138>)
 80026c8:	f002 f8fc 	bl	80048c4 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 30);
 80026cc:	211e      	movs	r1, #30
 80026ce:	2000      	movs	r0, #0
 80026d0:	f002 f91e 	bl	8004910 <ssd1306_SetCursor>
 80026d4:	e047      	b.n	8002766 <drawSdConfig+0x112>
	}
	else {
		ssd1306_WriteString(" OK", Font_7x10, White);
 80026d6:	4a28      	ldr	r2, [pc, #160]	; (8002778 <drawSdConfig+0x124>)
 80026d8:	2301      	movs	r3, #1
 80026da:	ca06      	ldmia	r2, {r1, r2}
 80026dc:	482c      	ldr	r0, [pc, #176]	; (8002790 <drawSdConfig+0x13c>)
 80026de:	f002 f8f1 	bl	80048c4 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 10);
 80026e2:	210a      	movs	r1, #10
 80026e4:	2000      	movs	r0, #0
 80026e6:	f002 f913 	bl	8004910 <ssd1306_SetCursor>
		ssd1306_WriteString("Overwrite: ", Font_7x10, White);
 80026ea:	4a23      	ldr	r2, [pc, #140]	; (8002778 <drawSdConfig+0x124>)
 80026ec:	2301      	movs	r3, #1
 80026ee:	ca06      	ldmia	r2, {r1, r2}
 80026f0:	4828      	ldr	r0, [pc, #160]	; (8002794 <drawSdConfig+0x140>)
 80026f2:	f002 f8e7 	bl	80048c4 <ssd1306_WriteString>
			if(entrySelected(0) && entryClicked(0)) {
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7ff f85a 	bl	80017b0 <entrySelected>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d014      	beq.n	800272c <drawSdConfig+0xd8>
 8002702:	2000      	movs	r0, #0
 8002704:	f7ff f867 	bl	80017d6 <entryClicked>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00e      	beq.n	800272c <drawSdConfig+0xd8>
						if(dataOverwrite==false) {
 800270e:	4b22      	ldr	r3, [pc, #136]	; (8002798 <drawSdConfig+0x144>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f083 0301 	eor.w	r3, r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <drawSdConfig+0xd2>
							dataOverwrite=true;
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <drawSdConfig+0x144>)
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e002      	b.n	800272c <drawSdConfig+0xd8>
						}
						else {
							dataOverwrite=false;
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <drawSdConfig+0x144>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
						}
			}
			ssd1306_SetCursor(75, 10);
 800272c:	210a      	movs	r1, #10
 800272e:	204b      	movs	r0, #75	; 0x4b
 8002730:	f002 f8ee 	bl	8004910 <ssd1306_SetCursor>
			sprintf(strDataOverwrite, "%s", dataOverwrite ? "true" : "false");
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <drawSdConfig+0x144>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <drawSdConfig+0xee>
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <drawSdConfig+0x148>)
 8002740:	e000      	b.n	8002744 <drawSdConfig+0xf0>
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <drawSdConfig+0x14c>)
 8002744:	461a      	mov	r2, r3
 8002746:	4917      	ldr	r1, [pc, #92]	; (80027a4 <drawSdConfig+0x150>)
 8002748:	4817      	ldr	r0, [pc, #92]	; (80027a8 <drawSdConfig+0x154>)
 800274a:	f008 ffd9 	bl	800b700 <siprintf>
			ssd1306_WriteString(strDataOverwrite, Font_7x10, entrySelected(0) ? Black : White);
 800274e:	2000      	movs	r0, #0
 8002750:	f7ff f82e 	bl	80017b0 <entrySelected>
 8002754:	4603      	mov	r3, r0
 8002756:	f083 0301 	eor.w	r3, r3, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	4a06      	ldr	r2, [pc, #24]	; (8002778 <drawSdConfig+0x124>)
 800275e:	ca06      	ldmia	r2, {r1, r2}
 8002760:	4811      	ldr	r0, [pc, #68]	; (80027a8 <drawSdConfig+0x154>)
 8002762:	f002 f8af 	bl	80048c4 <ssd1306_WriteString>
	}


	backButton(1, MAIN_MENU, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	2001      	movs	r0, #1
 800276c:	f7ff feae 	bl	80024cc <backButton>
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000874 	.word	0x20000874
 800277c:	0800daa4 	.word	0x0800daa4
 8002780:	200196f0 	.word	0x200196f0
 8002784:	0800dab0 	.word	0x0800dab0
 8002788:	200196dc 	.word	0x200196dc
 800278c:	0800dab8 	.word	0x0800dab8
 8002790:	0800dac8 	.word	0x0800dac8
 8002794:	0800dacc 	.word	0x0800dacc
 8002798:	20000df0 	.word	0x20000df0
 800279c:	0800dad8 	.word	0x0800dad8
 80027a0:	0800dae0 	.word	0x0800dae0
 80027a4:	0800dae8 	.word	0x0800dae8
 80027a8:	20000df4 	.word	0x20000df4

080027ac <drawSensorConfigAdcExt>:




void drawSensorConfigAdcExt(Menu *menu) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	encSetRange(0, 4);
 80027b4:	2104      	movs	r1, #4
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7fe ffb0 	bl	800171c <encSetRange>
	listAllItemsFromMenu(menu);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff feb9 	bl	8002534 <listAllItemsFromMenu>
	backButton(4, MAIN_MENU, 4);
 80027c2:	2204      	movs	r2, #4
 80027c4:	2100      	movs	r1, #0
 80027c6:	2004      	movs	r0, #4
 80027c8:	f7ff fe80 	bl	80024cc <backButton>
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <drawSensorConfigAdcInt>:
void drawSensorConfigAdcInt(Menu *menu) {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
	encSetRange(0, 4);
 80027dc:	2104      	movs	r1, #4
 80027de:	2000      	movs	r0, #0
 80027e0:	f7fe ff9c 	bl	800171c <encSetRange>
	listAllItemsFromMenu(menu);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff fea5 	bl	8002534 <listAllItemsFromMenu>
	backButton(4, MAIN_MENU, 4);
 80027ea:	2204      	movs	r2, #4
 80027ec:	2100      	movs	r1, #0
 80027ee:	2004      	movs	r0, #4
 80027f0:	f7ff fe6c 	bl	80024cc <backButton>
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <drawSensorConfigDS18>:
void drawSensorConfigDS18(Menu *menu) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	encSetRange(0, 1);
 8002804:	2101      	movs	r1, #1
 8002806:	2000      	movs	r0, #0
 8002808:	f7fe ff88 	bl	800171c <encSetRange>
	listAllItemsFromMenu(menu);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff fe91 	bl	8002534 <listAllItemsFromMenu>
	backButton(3, MAIN_MENU, 3);
 8002812:	2203      	movs	r2, #3
 8002814:	2100      	movs	r1, #0
 8002816:	2003      	movs	r0, #3
 8002818:	f7ff fe58 	bl	80024cc <backButton>
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <drawSensorOptions>:
uint16_t samplingRates[] = {10,50,100,500};
volatile uint8_t  samplingIndex = 0;
volatile int counter=0;
char sampl1str[10]="???";

void drawSensorOptions(uint8_t index) {
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
	ssd1306_WriteString(sensors[index].name, Font_11x18, White);
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	015b      	lsls	r3, r3, #5
 8002832:	4a4e      	ldr	r2, [pc, #312]	; (800296c <drawSensorOptions+0x148>)
 8002834:	1898      	adds	r0, r3, r2
 8002836:	4a4e      	ldr	r2, [pc, #312]	; (8002970 <drawSensorOptions+0x14c>)
 8002838:	2301      	movs	r3, #1
 800283a:	ca06      	ldmia	r2, {r1, r2}
 800283c:	f002 f842 	bl	80048c4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 8002840:	2112      	movs	r1, #18
 8002842:	2000      	movs	r0, #0
 8002844:	f002 f864 	bl	8004910 <ssd1306_SetCursor>
	char isEnabledStr[20];
	if(entrySelected(0) && entryClicked(0)) {
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe ffb1 	bl	80017b0 <entrySelected>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01f      	beq.n	8002894 <drawSensorOptions+0x70>
 8002854:	2000      	movs	r0, #0
 8002856:	f7fe ffbe 	bl	80017d6 <entryClicked>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d019      	beq.n	8002894 <drawSensorOptions+0x70>
		if(sensors[index].isEnabled==false) {
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	4a42      	ldr	r2, [pc, #264]	; (800296c <drawSensorOptions+0x148>)
 8002864:	015b      	lsls	r3, r3, #5
 8002866:	4413      	add	r3, r2
 8002868:	3314      	adds	r3, #20
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	f083 0301 	eor.w	r3, r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <drawSensorOptions+0x62>
			sensors[index].isEnabled=true;
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	4a3c      	ldr	r2, [pc, #240]	; (800296c <drawSensorOptions+0x148>)
 800287a:	015b      	lsls	r3, r3, #5
 800287c:	4413      	add	r3, r2
 800287e:	3314      	adds	r3, #20
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	e006      	b.n	8002894 <drawSensorOptions+0x70>
		}
		else {
			sensors[index].isEnabled=false;
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	4a38      	ldr	r2, [pc, #224]	; (800296c <drawSensorOptions+0x148>)
 800288a:	015b      	lsls	r3, r3, #5
 800288c:	4413      	add	r3, r2
 800288e:	3314      	adds	r3, #20
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
		}
	}
	sprintf(isEnabledStr, "enabled: %s", sensors[index].isEnabled ? "true" : "false");
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	4a35      	ldr	r2, [pc, #212]	; (800296c <drawSensorOptions+0x148>)
 8002898:	015b      	lsls	r3, r3, #5
 800289a:	4413      	add	r3, r2
 800289c:	3314      	adds	r3, #20
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <drawSensorOptions+0x84>
 80028a4:	4a33      	ldr	r2, [pc, #204]	; (8002974 <drawSensorOptions+0x150>)
 80028a6:	e000      	b.n	80028aa <drawSensorOptions+0x86>
 80028a8:	4a33      	ldr	r2, [pc, #204]	; (8002978 <drawSensorOptions+0x154>)
 80028aa:	f107 030c 	add.w	r3, r7, #12
 80028ae:	4933      	ldr	r1, [pc, #204]	; (800297c <drawSensorOptions+0x158>)
 80028b0:	4618      	mov	r0, r3
 80028b2:	f008 ff25 	bl	800b700 <siprintf>
	ssd1306_WriteString(isEnabledStr, Font_7x10, entrySelected(0) ? Black : White);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7fe ff7a 	bl	80017b0 <entrySelected>
 80028bc:	4603      	mov	r3, r0
 80028be:	f083 0301 	eor.w	r3, r3, #1
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	4a2e      	ldr	r2, [pc, #184]	; (8002980 <drawSensorOptions+0x15c>)
 80028c6:	f107 000c 	add.w	r0, r7, #12
 80028ca:	ca06      	ldmia	r2, {r1, r2}
 80028cc:	f001 fffa 	bl	80048c4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 28);
 80028d0:	211c      	movs	r1, #28
 80028d2:	2000      	movs	r0, #0
 80028d4:	f002 f81c 	bl	8004910 <ssd1306_SetCursor>
	ssd1306_WriteString("period [ms]: ", Font_7x10, White);
 80028d8:	4a29      	ldr	r2, [pc, #164]	; (8002980 <drawSensorOptions+0x15c>)
 80028da:	2301      	movs	r3, #1
 80028dc:	ca06      	ldmia	r2, {r1, r2}
 80028de:	4829      	ldr	r0, [pc, #164]	; (8002984 <drawSensorOptions+0x160>)
 80028e0:	f001 fff0 	bl	80048c4 <ssd1306_WriteString>
	ssd1306_SetCursor(90, 28);
 80028e4:	211c      	movs	r1, #28
 80028e6:	205a      	movs	r0, #90	; 0x5a
 80028e8:	f002 f812 	bl	8004910 <ssd1306_SetCursor>
	sprintf(sampl1str, "%d\n\r", sensors[index].samplingRate);
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	4a1f      	ldr	r2, [pc, #124]	; (800296c <drawSensorOptions+0x148>)
 80028f0:	015b      	lsls	r3, r3, #5
 80028f2:	4413      	add	r3, r2
 80028f4:	3316      	adds	r3, #22
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	4923      	ldr	r1, [pc, #140]	; (8002988 <drawSensorOptions+0x164>)
 80028fc:	4823      	ldr	r0, [pc, #140]	; (800298c <drawSensorOptions+0x168>)
 80028fe:	f008 feff 	bl	800b700 <siprintf>
	ssd1306_WriteString(sampl1str, Font_7x10, entrySelected(1) ? Black : White);
 8002902:	2001      	movs	r0, #1
 8002904:	f7fe ff54 	bl	80017b0 <entrySelected>
 8002908:	4603      	mov	r3, r0
 800290a:	f083 0301 	eor.w	r3, r3, #1
 800290e:	b2db      	uxtb	r3, r3
 8002910:	4a1b      	ldr	r2, [pc, #108]	; (8002980 <drawSensorOptions+0x15c>)
 8002912:	ca06      	ldmia	r2, {r1, r2}
 8002914:	481d      	ldr	r0, [pc, #116]	; (800298c <drawSensorOptions+0x168>)
 8002916:	f001 ffd5 	bl	80048c4 <ssd1306_WriteString>
	if(entrySelected(1) && entryClicked(1)) { //tu sie dzieje cos dziwnego
 800291a:	2001      	movs	r0, #1
 800291c:	f7fe ff48 	bl	80017b0 <entrySelected>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d01e      	beq.n	8002964 <drawSensorOptions+0x140>
 8002926:	2001      	movs	r0, #1
 8002928:	f7fe ff55 	bl	80017d6 <entryClicked>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d018      	beq.n	8002964 <drawSensorOptions+0x140>
		//send_uart("klikniete\n\r");
		counter++;
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <drawSensorOptions+0x16c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3301      	adds	r3, #1
 8002938:	4a15      	ldr	r2, [pc, #84]	; (8002990 <drawSensorOptions+0x16c>)
 800293a:	6013      	str	r3, [r2, #0]
		if(counter>4) {
 800293c:	4b14      	ldr	r3, [pc, #80]	; (8002990 <drawSensorOptions+0x16c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b04      	cmp	r3, #4
 8002942:	dd02      	ble.n	800294a <drawSensorOptions+0x126>
			counter=1;
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <drawSensorOptions+0x16c>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]
		}
		sensors[index].samplingRate = samplingRates[counter-1];
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <drawSensorOptions+0x16c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	1e5a      	subs	r2, r3, #1
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	4910      	ldr	r1, [pc, #64]	; (8002994 <drawSensorOptions+0x170>)
 8002954:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <drawSensorOptions+0x148>)
 800295a:	015b      	lsls	r3, r3, #5
 800295c:	4413      	add	r3, r2
 800295e:	3316      	adds	r3, #22
 8002960:	460a      	mov	r2, r1
 8002962:	801a      	strh	r2, [r3, #0]
	}

}
 8002964:	bf00      	nop
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000000 	.word	0x20000000
 8002970:	2000087c 	.word	0x2000087c
 8002974:	0800dad8 	.word	0x0800dad8
 8002978:	0800dae0 	.word	0x0800dae0
 800297c:	0800daec 	.word	0x0800daec
 8002980:	20000874 	.word	0x20000874
 8002984:	0800daf8 	.word	0x0800daf8
 8002988:	0800db08 	.word	0x0800db08
 800298c:	20000270 	.word	0x20000270
 8002990:	20000dfc 	.word	0x20000dfc
 8002994:	20000268 	.word	0x20000268

08002998 <drawSensorConfigGeneric>:


void drawSensorConfigGeneric(Menu *menu) {
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	encSetRange(0, 2);
 80029a0:	2102      	movs	r1, #2
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7fe feba 	bl	800171c <encSetRange>
	ssd1306_SetCursor(0, 0);
 80029a8:	2100      	movs	r1, #0
 80029aa:	2000      	movs	r0, #0
 80029ac:	f001 ffb0 	bl	8004910 <ssd1306_SetCursor>
	drawSensorOptions(screen-SENSOR_CONFIG_ADC_EXT0);
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <drawSensorConfigGeneric+0x3c>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	3b0a      	subs	r3, #10
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff32 	bl	8002824 <drawSensorOptions>
	backButton(2, MAIN_MENU, 2);
 80029c0:	2202      	movs	r2, #2
 80029c2:	2100      	movs	r1, #0
 80029c4:	2002      	movs	r0, #2
 80029c6:	f7ff fd81 	bl	80024cc <backButton>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000de4 	.word	0x20000de4

080029d8 <ch1Enable>:
volatile char result[1000]="";
volatile float value;
volatile char temp[50];
void ch1Enable(void) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0


	for(int i=0; i<11; i++) {
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	e04a      	b.n	8002a7a <ch1Enable+0xa2>
		if(sensors[i].samplingRate==10 && sensors[i].isEnabled) {
 80029e4:	4a29      	ldr	r2, [pc, #164]	; (8002a8c <ch1Enable+0xb4>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	015b      	lsls	r3, r3, #5
 80029ea:	4413      	add	r3, r2
 80029ec:	3316      	adds	r3, #22
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	2b0a      	cmp	r3, #10
 80029f2:	d13f      	bne.n	8002a74 <ch1Enable+0x9c>
 80029f4:	4a25      	ldr	r2, [pc, #148]	; (8002a8c <ch1Enable+0xb4>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	015b      	lsls	r3, r3, #5
 80029fa:	4413      	add	r3, r2
 80029fc:	3314      	adds	r3, #20
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d037      	beq.n	8002a74 <ch1Enable+0x9c>
			for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002a04:	2300      	movs	r3, #0
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	e031      	b.n	8002a6e <ch1Enable+0x96>
				if(strcmp(sensors[i].name, mapSensors[j].sensorName)==0) { //zamiast tego
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	015b      	lsls	r3, r3, #5
 8002a0e:	4a1f      	ldr	r2, [pc, #124]	; (8002a8c <ch1Enable+0xb4>)
 8002a10:	1898      	adds	r0, r3, r2
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <ch1Enable+0xb8>)
 8002a1e:	4413      	add	r3, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	f7fd fbdd 	bl	80001e0 <strcmp>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d11d      	bne.n	8002a68 <ch1Enable+0x90>
					value = mapSensors[j].function();
 8002a2c:	4918      	ldr	r1, [pc, #96]	; (8002a90 <ch1Enable+0xb8>)
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	3314      	adds	r3, #20
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4798      	blx	r3
 8002a40:	eef0 7a40 	vmov.f32	s15, s0
 8002a44:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <ch1Enable+0xbc>)
 8002a46:	edc3 7a00 	vstr	s15, [r3]
					sensors[i].lastValue=value;
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <ch1Enable+0xbc>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	490f      	ldr	r1, [pc, #60]	; (8002a8c <ch1Enable+0xb4>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	015b      	lsls	r3, r3, #5
 8002a54:	440b      	add	r3, r1
 8002a56:	3318      	adds	r3, #24
 8002a58:	601a      	str	r2, [r3, #0]
					sensors[i].hasValue=true;
 8002a5a:	4a0c      	ldr	r2, [pc, #48]	; (8002a8c <ch1Enable+0xb4>)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	015b      	lsls	r3, r3, #5
 8002a60:	4413      	add	r3, r2
 8002a62:	331c      	adds	r3, #28
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b0a      	cmp	r3, #10
 8002a72:	d9ca      	bls.n	8002a0a <ch1Enable+0x32>
	for(int i=0; i<11; i++) {
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3301      	adds	r3, #1
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b0a      	cmp	r3, #10
 8002a7e:	ddb1      	ble.n	80029e4 <ch1Enable+0xc>
			}
		}
		else {
		}
	}
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	20000160 	.word	0x20000160
 8002a94:	20000e00 	.word	0x20000e00

08002a98 <ch2Enable>:

void ch2Enable(void) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
	for(int i=0; i<11; i++) {
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	607b      	str	r3, [r7, #4]
 8002aa2:	e04a      	b.n	8002b3a <ch2Enable+0xa2>
			if(sensors[i].samplingRate==50 && sensors[i].isEnabled) {
 8002aa4:	4a29      	ldr	r2, [pc, #164]	; (8002b4c <ch2Enable+0xb4>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	015b      	lsls	r3, r3, #5
 8002aaa:	4413      	add	r3, r2
 8002aac:	3316      	adds	r3, #22
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	2b32      	cmp	r3, #50	; 0x32
 8002ab2:	d13f      	bne.n	8002b34 <ch2Enable+0x9c>
 8002ab4:	4a25      	ldr	r2, [pc, #148]	; (8002b4c <ch2Enable+0xb4>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	015b      	lsls	r3, r3, #5
 8002aba:	4413      	add	r3, r2
 8002abc:	3314      	adds	r3, #20
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d037      	beq.n	8002b34 <ch2Enable+0x9c>
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	e031      	b.n	8002b2e <ch2Enable+0x96>
					if(strcmp(sensors[i].name, mapSensors[j].sensorName)==0) { //zamiast tego
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	015b      	lsls	r3, r3, #5
 8002ace:	4a1f      	ldr	r2, [pc, #124]	; (8002b4c <ch2Enable+0xb4>)
 8002ad0:	1898      	adds	r0, r3, r2
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <ch2Enable+0xb8>)
 8002ade:	4413      	add	r3, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f7fd fb7d 	bl	80001e0 <strcmp>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d11d      	bne.n	8002b28 <ch2Enable+0x90>
						value = mapSensors[j].function();
 8002aec:	4918      	ldr	r1, [pc, #96]	; (8002b50 <ch2Enable+0xb8>)
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	3314      	adds	r3, #20
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4798      	blx	r3
 8002b00:	eef0 7a40 	vmov.f32	s15, s0
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <ch2Enable+0xbc>)
 8002b06:	edc3 7a00 	vstr	s15, [r3]
						sensors[i].lastValue=value;
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <ch2Enable+0xbc>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	490f      	ldr	r1, [pc, #60]	; (8002b4c <ch2Enable+0xb4>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	015b      	lsls	r3, r3, #5
 8002b14:	440b      	add	r3, r1
 8002b16:	3318      	adds	r3, #24
 8002b18:	601a      	str	r2, [r3, #0]
						sensors[i].hasValue=true;
 8002b1a:	4a0c      	ldr	r2, [pc, #48]	; (8002b4c <ch2Enable+0xb4>)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	015b      	lsls	r3, r3, #5
 8002b20:	4413      	add	r3, r2
 8002b22:	331c      	adds	r3, #28
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b0a      	cmp	r3, #10
 8002b32:	d9ca      	bls.n	8002aca <ch2Enable+0x32>
	for(int i=0; i<11; i++) {
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3301      	adds	r3, #1
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b0a      	cmp	r3, #10
 8002b3e:	ddb1      	ble.n	8002aa4 <ch2Enable+0xc>
			else {

			}

		}
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	20000160 	.word	0x20000160
 8002b54:	20000e00 	.word	0x20000e00

08002b58 <ch3Enable>:

void ch3Enable(void) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
	for(int i=0; i<11; i++) {
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	e04a      	b.n	8002bfa <ch3Enable+0xa2>
			if(sensors[i].samplingRate==100 && sensors[i].isEnabled) {
 8002b64:	4a29      	ldr	r2, [pc, #164]	; (8002c0c <ch3Enable+0xb4>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	015b      	lsls	r3, r3, #5
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3316      	adds	r3, #22
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	2b64      	cmp	r3, #100	; 0x64
 8002b72:	d13f      	bne.n	8002bf4 <ch3Enable+0x9c>
 8002b74:	4a25      	ldr	r2, [pc, #148]	; (8002c0c <ch3Enable+0xb4>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	015b      	lsls	r3, r3, #5
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3314      	adds	r3, #20
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d037      	beq.n	8002bf4 <ch3Enable+0x9c>
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002b84:	2300      	movs	r3, #0
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	e031      	b.n	8002bee <ch3Enable+0x96>
					if(strcmp(sensors[i].name, mapSensors[j].sensorName)==0) { //zamiast tego
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	015b      	lsls	r3, r3, #5
 8002b8e:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <ch3Enable+0xb4>)
 8002b90:	1898      	adds	r0, r3, r2
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4a1c      	ldr	r2, [pc, #112]	; (8002c10 <ch3Enable+0xb8>)
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f7fd fb1d 	bl	80001e0 <strcmp>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d11d      	bne.n	8002be8 <ch3Enable+0x90>
						value = mapSensors[j].function();
 8002bac:	4918      	ldr	r1, [pc, #96]	; (8002c10 <ch3Enable+0xb8>)
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	440b      	add	r3, r1
 8002bba:	3314      	adds	r3, #20
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4798      	blx	r3
 8002bc0:	eef0 7a40 	vmov.f32	s15, s0
 8002bc4:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <ch3Enable+0xbc>)
 8002bc6:	edc3 7a00 	vstr	s15, [r3]
						sensors[i].lastValue=value;
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <ch3Enable+0xbc>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	490f      	ldr	r1, [pc, #60]	; (8002c0c <ch3Enable+0xb4>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	015b      	lsls	r3, r3, #5
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3318      	adds	r3, #24
 8002bd8:	601a      	str	r2, [r3, #0]
						sensors[i].hasValue=true;
 8002bda:	4a0c      	ldr	r2, [pc, #48]	; (8002c0c <ch3Enable+0xb4>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	015b      	lsls	r3, r3, #5
 8002be0:	4413      	add	r3, r2
 8002be2:	331c      	adds	r3, #28
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	3301      	adds	r3, #1
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b0a      	cmp	r3, #10
 8002bf2:	d9ca      	bls.n	8002b8a <ch3Enable+0x32>
	for(int i=0; i<11; i++) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b0a      	cmp	r3, #10
 8002bfe:	ddb1      	ble.n	8002b64 <ch3Enable+0xc>
			else {

			}

		}
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	20000160 	.word	0x20000160
 8002c14:	20000e00 	.word	0x20000e00

08002c18 <ch4Enable>:

void ch4Enable(void) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
	for(int i=0; i<11; i++) {
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	e04b      	b.n	8002cbc <ch4Enable+0xa4>
			if(sensors[i].samplingRate==500 && sensors[i].isEnabled) {
 8002c24:	4a29      	ldr	r2, [pc, #164]	; (8002ccc <ch4Enable+0xb4>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	015b      	lsls	r3, r3, #5
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3316      	adds	r3, #22
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c34:	d13f      	bne.n	8002cb6 <ch4Enable+0x9e>
 8002c36:	4a25      	ldr	r2, [pc, #148]	; (8002ccc <ch4Enable+0xb4>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	015b      	lsls	r3, r3, #5
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3314      	adds	r3, #20
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d037      	beq.n	8002cb6 <ch4Enable+0x9e>
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002c46:	2300      	movs	r3, #0
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	e031      	b.n	8002cb0 <ch4Enable+0x98>
					if(strcmp(sensors[i].name, mapSensors[j].sensorName)==0) { //zamiast tego
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	015b      	lsls	r3, r3, #5
 8002c50:	4a1e      	ldr	r2, [pc, #120]	; (8002ccc <ch4Enable+0xb4>)
 8002c52:	1898      	adds	r0, r3, r2
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <ch4Enable+0xb8>)
 8002c60:	4413      	add	r3, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	f7fd fabc 	bl	80001e0 <strcmp>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d11d      	bne.n	8002caa <ch4Enable+0x92>
						value = mapSensors[j].function();
 8002c6e:	4918      	ldr	r1, [pc, #96]	; (8002cd0 <ch4Enable+0xb8>)
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3314      	adds	r3, #20
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4798      	blx	r3
 8002c82:	eef0 7a40 	vmov.f32	s15, s0
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <ch4Enable+0xbc>)
 8002c88:	edc3 7a00 	vstr	s15, [r3]
						sensors[i].lastValue=value;
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <ch4Enable+0xbc>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	490e      	ldr	r1, [pc, #56]	; (8002ccc <ch4Enable+0xb4>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	015b      	lsls	r3, r3, #5
 8002c96:	440b      	add	r3, r1
 8002c98:	3318      	adds	r3, #24
 8002c9a:	601a      	str	r2, [r3, #0]
						sensors[i].hasValue=true;
 8002c9c:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <ch4Enable+0xb4>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	015b      	lsls	r3, r3, #5
 8002ca2:	4413      	add	r3, r2
 8002ca4:	331c      	adds	r3, #28
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b0a      	cmp	r3, #10
 8002cb4:	d9ca      	bls.n	8002c4c <ch4Enable+0x34>
	for(int i=0; i<11; i++) {
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b0a      	cmp	r3, #10
 8002cc0:	ddb0      	ble.n	8002c24 <ch4Enable+0xc>
			else {

			}

		}
}
 8002cc2:	bf00      	nop
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000160 	.word	0x20000160
 8002cd4:	20000e00 	.word	0x20000e00

08002cd8 <debugAdcInt>:


void debugAdcInt(Menu *menu) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08c      	sub	sp, #48	; 0x30
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	encSetRange(0,1);
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7fe fd1a 	bl	800171c <encSetRange>
	ssd1306_SetCursor(0, 0);
 8002ce8:	2100      	movs	r1, #0
 8002cea:	2000      	movs	r0, #0
 8002cec:	f001 fe10 	bl	8004910 <ssd1306_SetCursor>
	char str[40];
	sprintf(str, "int_ch0=%.3f V", getValueAdcIntCh0());
 8002cf0:	f7fe fa94 	bl	800121c <getValueAdcIntCh0>
 8002cf4:	ee10 3a10 	vmov	r3, s0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fc3d 	bl	8000578 <__aeabi_f2d>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	f107 0008 	add.w	r0, r7, #8
 8002d06:	493b      	ldr	r1, [pc, #236]	; (8002df4 <debugAdcInt+0x11c>)
 8002d08:	f008 fcfa 	bl	800b700 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8002d0c:	4a3a      	ldr	r2, [pc, #232]	; (8002df8 <debugAdcInt+0x120>)
 8002d0e:	f107 0008 	add.w	r0, r7, #8
 8002d12:	2301      	movs	r3, #1
 8002d14:	ca06      	ldmia	r2, {r1, r2}
 8002d16:	f001 fdd5 	bl	80048c4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 10);
 8002d1a:	210a      	movs	r1, #10
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f001 fdf7 	bl	8004910 <ssd1306_SetCursor>
	sprintf(str, "int_ch1=%.3f V", getValueAdcIntCh1());
 8002d22:	f7fe fab1 	bl	8001288 <getValueAdcIntCh1>
 8002d26:	ee10 3a10 	vmov	r3, s0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd fc24 	bl	8000578 <__aeabi_f2d>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	f107 0008 	add.w	r0, r7, #8
 8002d38:	4930      	ldr	r1, [pc, #192]	; (8002dfc <debugAdcInt+0x124>)
 8002d3a:	f008 fce1 	bl	800b700 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8002d3e:	4a2e      	ldr	r2, [pc, #184]	; (8002df8 <debugAdcInt+0x120>)
 8002d40:	f107 0008 	add.w	r0, r7, #8
 8002d44:	2301      	movs	r3, #1
 8002d46:	ca06      	ldmia	r2, {r1, r2}
 8002d48:	f001 fdbc 	bl	80048c4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 8002d4c:	2114      	movs	r1, #20
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f001 fdde 	bl	8004910 <ssd1306_SetCursor>
	sprintf(str, "int_ch2=%.3f V", getValueAdcIntCh2());
 8002d54:	f7fe face 	bl	80012f4 <getValueAdcIntCh2>
 8002d58:	ee10 3a10 	vmov	r3, s0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fc0b 	bl	8000578 <__aeabi_f2d>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	f107 0008 	add.w	r0, r7, #8
 8002d6a:	4925      	ldr	r1, [pc, #148]	; (8002e00 <debugAdcInt+0x128>)
 8002d6c:	f008 fcc8 	bl	800b700 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8002d70:	4a21      	ldr	r2, [pc, #132]	; (8002df8 <debugAdcInt+0x120>)
 8002d72:	f107 0008 	add.w	r0, r7, #8
 8002d76:	2301      	movs	r3, #1
 8002d78:	ca06      	ldmia	r2, {r1, r2}
 8002d7a:	f001 fda3 	bl	80048c4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 30);
 8002d7e:	211e      	movs	r1, #30
 8002d80:	2000      	movs	r0, #0
 8002d82:	f001 fdc5 	bl	8004910 <ssd1306_SetCursor>
	sprintf(str, "int_ch3=%.3f V", getValueAdcIntCh3());
 8002d86:	f7fe faeb 	bl	8001360 <getValueAdcIntCh3>
 8002d8a:	ee10 3a10 	vmov	r3, s0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fbf2 	bl	8000578 <__aeabi_f2d>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	f107 0008 	add.w	r0, r7, #8
 8002d9c:	4919      	ldr	r1, [pc, #100]	; (8002e04 <debugAdcInt+0x12c>)
 8002d9e:	f008 fcaf 	bl	800b700 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8002da2:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <debugAdcInt+0x120>)
 8002da4:	f107 0008 	add.w	r0, r7, #8
 8002da8:	2301      	movs	r3, #1
 8002daa:	ca06      	ldmia	r2, {r1, r2}
 8002dac:	f001 fd8a 	bl	80048c4 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 50);
 8002db0:	2132      	movs	r1, #50	; 0x32
 8002db2:	2000      	movs	r0, #0
 8002db4:	f001 fdac 	bl	8004910 <ssd1306_SetCursor>
	sprintf(str, "ds18_2=%.2f C", getValueDs2());
 8002db8:	f7fe fb4a 	bl	8001450 <getValueDs2>
 8002dbc:	ee10 3a10 	vmov	r3, s0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fbd9 	bl	8000578 <__aeabi_f2d>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	f107 0008 	add.w	r0, r7, #8
 8002dce:	490e      	ldr	r1, [pc, #56]	; (8002e08 <debugAdcInt+0x130>)
 8002dd0:	f008 fc96 	bl	800b700 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8002dd4:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <debugAdcInt+0x120>)
 8002dd6:	f107 0008 	add.w	r0, r7, #8
 8002dda:	2301      	movs	r3, #1
 8002ddc:	ca06      	ldmia	r2, {r1, r2}
 8002dde:	f001 fd71 	bl	80048c4 <ssd1306_WriteString>
	backButton(1, MAIN_MENU, 1);
 8002de2:	2201      	movs	r2, #1
 8002de4:	2100      	movs	r1, #0
 8002de6:	2001      	movs	r0, #1
 8002de8:	f7ff fb70 	bl	80024cc <backButton>
}
 8002dec:	bf00      	nop
 8002dee:	3730      	adds	r7, #48	; 0x30
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	0800db10 	.word	0x0800db10
 8002df8:	20000874 	.word	0x20000874
 8002dfc:	0800db20 	.word	0x0800db20
 8002e00:	0800db30 	.word	0x0800db30
 8002e04:	0800db40 	.word	0x0800db40
 8002e08:	0800db50 	.word	0x0800db50

08002e0c <debugAdcExt>:

void debugAdcExt(Menu *menu) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08c      	sub	sp, #48	; 0x30
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	char str[40];
	sprintf(str, "ext_ch0=%.3f V", getValueAdcExtCh0());
 8002e14:	f7fe f8c2 	bl	8000f9c <getValueAdcExtCh0>
 8002e18:	ee10 3a10 	vmov	r3, s0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fbab 	bl	8000578 <__aeabi_f2d>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	f107 0008 	add.w	r0, r7, #8
 8002e2a:	4931      	ldr	r1, [pc, #196]	; (8002ef0 <debugAdcExt+0xe4>)
 8002e2c:	f008 fc68 	bl	800b700 <siprintf>
	ssd1306_SetCursor(0, 0);
 8002e30:	2100      	movs	r1, #0
 8002e32:	2000      	movs	r0, #0
 8002e34:	f001 fd6c 	bl	8004910 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8002e38:	4a2e      	ldr	r2, [pc, #184]	; (8002ef4 <debugAdcExt+0xe8>)
 8002e3a:	f107 0008 	add.w	r0, r7, #8
 8002e3e:	2301      	movs	r3, #1
 8002e40:	ca06      	ldmia	r2, {r1, r2}
 8002e42:	f001 fd3f 	bl	80048c4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 10);
 8002e46:	210a      	movs	r1, #10
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f001 fd61 	bl	8004910 <ssd1306_SetCursor>
	sprintf(str, "ext_ch1=%.3f V", getValueAdcExtCh1());
 8002e4e:	f7fe f8f5 	bl	800103c <getValueAdcExtCh1>
 8002e52:	ee10 3a10 	vmov	r3, s0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fb8e 	bl	8000578 <__aeabi_f2d>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	f107 0008 	add.w	r0, r7, #8
 8002e64:	4924      	ldr	r1, [pc, #144]	; (8002ef8 <debugAdcExt+0xec>)
 8002e66:	f008 fc4b 	bl	800b700 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8002e6a:	4a22      	ldr	r2, [pc, #136]	; (8002ef4 <debugAdcExt+0xe8>)
 8002e6c:	f107 0008 	add.w	r0, r7, #8
 8002e70:	2301      	movs	r3, #1
 8002e72:	ca06      	ldmia	r2, {r1, r2}
 8002e74:	f001 fd26 	bl	80048c4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 8002e78:	2114      	movs	r1, #20
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f001 fd48 	bl	8004910 <ssd1306_SetCursor>
	sprintf(str, "ext_ch2=%.3f V", getValueAdcExtCh2());
 8002e80:	f7fe f92c 	bl	80010dc <getValueAdcExtCh2>
 8002e84:	ee10 3a10 	vmov	r3, s0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd fb75 	bl	8000578 <__aeabi_f2d>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	f107 0008 	add.w	r0, r7, #8
 8002e96:	4919      	ldr	r1, [pc, #100]	; (8002efc <debugAdcExt+0xf0>)
 8002e98:	f008 fc32 	bl	800b700 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8002e9c:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <debugAdcExt+0xe8>)
 8002e9e:	f107 0008 	add.w	r0, r7, #8
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	ca06      	ldmia	r2, {r1, r2}
 8002ea6:	f001 fd0d 	bl	80048c4 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 30);
 8002eaa:	211e      	movs	r1, #30
 8002eac:	2000      	movs	r0, #0
 8002eae:	f001 fd2f 	bl	8004910 <ssd1306_SetCursor>
	sprintf(str, "ext_ch3=%.3f V", getValueAdcExtCh3());
 8002eb2:	f7fe f963 	bl	800117c <getValueAdcExtCh3>
 8002eb6:	ee10 3a10 	vmov	r3, s0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd fb5c 	bl	8000578 <__aeabi_f2d>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	f107 0008 	add.w	r0, r7, #8
 8002ec8:	490d      	ldr	r1, [pc, #52]	; (8002f00 <debugAdcExt+0xf4>)
 8002eca:	f008 fc19 	bl	800b700 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8002ece:	4a09      	ldr	r2, [pc, #36]	; (8002ef4 <debugAdcExt+0xe8>)
 8002ed0:	f107 0008 	add.w	r0, r7, #8
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	ca06      	ldmia	r2, {r1, r2}
 8002ed8:	f001 fcf4 	bl	80048c4 <ssd1306_WriteString>

	backButton(1, MAIN_MENU, 1);
 8002edc:	2201      	movs	r2, #1
 8002ede:	2100      	movs	r1, #0
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f7ff faf3 	bl	80024cc <backButton>
}
 8002ee6:	bf00      	nop
 8002ee8:	3730      	adds	r7, #48	; 0x30
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	0800db60 	.word	0x0800db60
 8002ef4:	20000874 	.word	0x20000874
 8002ef8:	0800db70 	.word	0x0800db70
 8002efc:	0800db80 	.word	0x0800db80
 8002f00:	0800db90 	.word	0x0800db90

08002f04 <testAllSensors>:

void testAllSensors(Menu *menu) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	int numSensors = sizeof(sensors) / sizeof(sensors[0]);
 8002f0c:	230b      	movs	r3, #11
 8002f0e:	60bb      	str	r3, [r7, #8]
	    for (int i = 0; i < numSensors; ++i) {
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	e010      	b.n	8002f38 <testAllSensors+0x34>
	        sensors[i].isEnabled = true;
 8002f16:	4a0f      	ldr	r2, [pc, #60]	; (8002f54 <testAllSensors+0x50>)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	015b      	lsls	r3, r3, #5
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3314      	adds	r3, #20
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]
	        sensors[i].samplingRate = 10;
 8002f24:	4a0b      	ldr	r2, [pc, #44]	; (8002f54 <testAllSensors+0x50>)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	015b      	lsls	r3, r3, #5
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3316      	adds	r3, #22
 8002f2e:	220a      	movs	r2, #10
 8002f30:	801a      	strh	r2, [r3, #0]
	    for (int i = 0; i < numSensors; ++i) {
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3301      	adds	r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	dbea      	blt.n	8002f16 <testAllSensors+0x12>
	    }
	backButton(1, MAIN_MENU, 1);
 8002f40:	2201      	movs	r2, #1
 8002f42:	2100      	movs	r1, #0
 8002f44:	2001      	movs	r0, #1
 8002f46:	f7ff fac1 	bl	80024cc <backButton>
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000000 	.word	0x20000000

08002f58 <displayMenu>:
	[ONOFF_MEASURE] = {testAllSensors, 0, {}},
	[DEBUG_ADC_INT] = {debugAdcInt, 0, {}},
	[DEBUG_ADC_EXT] = {debugAdcExt, 0, {}}
};

void displayMenu(void) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f001 fb89 	bl	8004674 <ssd1306_Fill>

	menu[screen].function(&menu[screen]);
 8002f62:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <displayMenu+0x48>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <displayMenu+0x4c>)
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	440b      	add	r3, r1
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4413      	add	r3, r2
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <displayMenu+0x48>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	4619      	mov	r1, r3
 8002f80:	460b      	mov	r3, r1
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	440b      	add	r3, r1
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4906      	ldr	r1, [pc, #24]	; (8002fa4 <displayMenu+0x4c>)
 8002f8a:	440b      	add	r3, r1
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	4790      	blx	r2
	ssd1306_UpdateScreen();
 8002f90:	f001 fb94 	bl	80046bc <ssd1306_UpdateScreen>
	//clearEncButton();
	HAL_Delay(1);
 8002f94:	2001      	movs	r0, #1
 8002f96:	f001 fd77 	bl	8004a88 <HAL_Delay>

}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000de4 	.word	0x20000de4
 8002fa4:	2000027c 	.word	0x2000027c

08002fa8 <displayInit>:
#include "ssd1306_tests.h"
#include "ssd1306.h"



void displayInit(void) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8002fac:	f001 faf8 	bl	80045a0 <ssd1306_Init>
}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <CircularBuffer_Init>:
    int tail;
} CircularBuffer;



void CircularBuffer_Init(CircularBuffer* cb) {
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
    cb->head = 0;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
    cb->tail = 0;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <CircularBuffer_Add>:

volatile CircularBuffer cb;

void CircularBuffer_Add(CircularBuffer* cb, char* str) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
    strncpy(cb->data[cb->head], str, STR_SIZE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8002ff4:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8002ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ffc:	fb02 f303 	mul.w	r3, r2, r3
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003008:	6839      	ldr	r1, [r7, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f008 fca5 	bl	800b95a <strncpy>
    cb->head = (cb->head + 1) % BUF_SIZE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003016:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	4b19      	ldr	r3, [pc, #100]	; (8003084 <CircularBuffer_Add+0xa0>)
 800301e:	fb83 1302 	smull	r1, r3, r3, r2
 8003022:	1159      	asrs	r1, r3, #5
 8003024:	17d3      	asrs	r3, r2, #31
 8003026:	1acb      	subs	r3, r1, r3
 8003028:	2164      	movs	r1, #100	; 0x64
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	f502 32c0 	add.w	r2, r2, #98304	; 0x18000
 8003036:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
    if (cb->head == cb->tail) {
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003040:	f8d3 26a0 	ldr.w	r2, [r3, #1696]	; 0x6a0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800304a:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 800304e:	429a      	cmp	r2, r3
 8003050:	d114      	bne.n	800307c <CircularBuffer_Add+0x98>
        cb->tail = (cb->tail + 1) % BUF_SIZE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003058:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	4b09      	ldr	r3, [pc, #36]	; (8003084 <CircularBuffer_Add+0xa0>)
 8003060:	fb83 1302 	smull	r1, r3, r3, r2
 8003064:	1159      	asrs	r1, r3, #5
 8003066:	17d3      	asrs	r3, r2, #31
 8003068:	1acb      	subs	r3, r1, r3
 800306a:	2164      	movs	r1, #100	; 0x64
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	f502 32c0 	add.w	r2, r2, #98304	; 0x18000
 8003078:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
    }
}
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	51eb851f 	.word	0x51eb851f

08003088 <CircularBuffer_Read>:

char* CircularBuffer_Read(CircularBuffer* cb) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
    if (cb->head == cb->tail) {
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003096:	f8d3 26a0 	ldr.w	r2, [r3, #1696]	; 0x6a0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80030a0:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d104      	bne.n	80030b2 <CircularBuffer_Read+0x2a>
        printf("bufor jest pusty\n");
 80030a8:	4815      	ldr	r0, [pc, #84]	; (8003100 <CircularBuffer_Read+0x78>)
 80030aa:	f008 faed 	bl	800b688 <puts>
        return NULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e021      	b.n	80030f6 <CircularBuffer_Read+0x6e>
    }
    char* str = cb->data[cb->tail];
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80030b8:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 80030bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030c0:	fb02 f303 	mul.w	r3, r2, r3
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
    cb->tail = (cb->tail + 1) % BUF_SIZE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80030d0:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <CircularBuffer_Read+0x7c>)
 80030d8:	fb83 1302 	smull	r1, r3, r3, r2
 80030dc:	1159      	asrs	r1, r3, #5
 80030de:	17d3      	asrs	r3, r2, #31
 80030e0:	1acb      	subs	r3, r1, r3
 80030e2:	2164      	movs	r1, #100	; 0x64
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	f502 32c0 	add.w	r2, r2, #98304	; 0x18000
 80030f0:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
    return str;
 80030f4:	68fb      	ldr	r3, [r7, #12]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	0800dcb4 	.word	0x0800dcb4
 8003104:	51eb851f 	.word	0x51eb851f

08003108 <sd_init>:
// functions
void sd_demount() {
	f_mount(NULL, "", 0);
}

void sd_init() {
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 800310c:	2201      	movs	r2, #1
 800310e:	490e      	ldr	r1, [pc, #56]	; (8003148 <sd_init+0x40>)
 8003110:	480e      	ldr	r0, [pc, #56]	; (800314c <sd_init+0x44>)
 8003112:	f007 fbe5 	bl	800a8e0 <f_mount>
 8003116:	4603      	mov	r3, r0
 8003118:	461a      	mov	r2, r3
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <sd_init+0x48>)
 800311c:	701a      	strb	r2, [r3, #0]

	if(fresult==FR_OK) {
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <sd_init+0x48>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <sd_init+0x2e>
		sdReady = true;
 8003128:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <sd_init+0x4c>)
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]
		send_uart("sd status: FR_OK\n\r");
 800312e:	480a      	ldr	r0, [pc, #40]	; (8003158 <sd_init+0x50>)
 8003130:	f7fe fb6a 	bl	8001808 <send_uart>
	}
	else {
		sdReady = false;
		send_uart("sd status: SD ERR\n\r");
	}
}
 8003134:	e005      	b.n	8003142 <sd_init+0x3a>
		sdReady = false;
 8003136:	4b07      	ldr	r3, [pc, #28]	; (8003154 <sd_init+0x4c>)
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
		send_uart("sd status: SD ERR\n\r");
 800313c:	4807      	ldr	r0, [pc, #28]	; (800315c <sd_init+0x54>)
 800313e:	f7fe fb63 	bl	8001808 <send_uart>
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	0800dccc 	.word	0x0800dccc
 800314c:	200194ac 	.word	0x200194ac
 8003150:	200196dc 	.word	0x200196dc
 8003154:	200196f0 	.word	0x200196f0
 8003158:	0800dcd0 	.word	0x0800dcd0
 800315c:	0800dce4 	.word	0x0800dce4

08003160 <sd_freespace>:

uint32_t sd_freespace() {
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
	if(sdReady) {
 8003164:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <sd_freespace+0x54>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d020      	beq.n	80031ae <sd_freespace+0x4e>
		f_getfree("", &fre_clust, &pfs);
 800316c:	4a12      	ldr	r2, [pc, #72]	; (80031b8 <sd_freespace+0x58>)
 800316e:	4913      	ldr	r1, [pc, #76]	; (80031bc <sd_freespace+0x5c>)
 8003170:	4813      	ldr	r0, [pc, #76]	; (80031c0 <sd_freespace+0x60>)
 8003172:	f007 fbfb 	bl	800a96c <f_getfree>
		return free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <sd_freespace+0x58>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	895b      	ldrh	r3, [r3, #10]
 800317c:	461a      	mov	r2, r3
 800317e:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <sd_freespace+0x5c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f9d4 	bl	8000534 <__aeabi_ui2d>
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <sd_freespace+0x64>)
 8003192:	f7fd fa49 	bl	8000628 <__aeabi_dmul>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f7fd fd1b 	bl	8000bd8 <__aeabi_d2uiz>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <sd_freespace+0x68>)
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <sd_freespace+0x68>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	e000      	b.n	80031b0 <sd_freespace+0x50>
	}
	else {
		return 0;
 80031ae:	2300      	movs	r3, #0
	}

}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	200196f0 	.word	0x200196f0
 80031b8:	200196e0 	.word	0x200196e0
 80031bc:	200196e4 	.word	0x200196e4
 80031c0:	0800dcc8 	.word	0x0800dcc8
 80031c4:	3fe00000 	.word	0x3fe00000
 80031c8:	200196ec 	.word	0x200196ec

080031cc <sd_totalspace>:

uint32_t sd_totalspace() {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
	if(sdReady) {
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <sd_totalspace+0x58>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d021      	beq.n	800321c <sd_totalspace+0x50>
		f_getfree("", &fre_clust, &pfs);
 80031d8:	4a13      	ldr	r2, [pc, #76]	; (8003228 <sd_totalspace+0x5c>)
 80031da:	4914      	ldr	r1, [pc, #80]	; (800322c <sd_totalspace+0x60>)
 80031dc:	4814      	ldr	r0, [pc, #80]	; (8003230 <sd_totalspace+0x64>)
 80031de:	f007 fbc5 	bl	800a96c <f_getfree>
		return total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <sd_totalspace+0x5c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	3b02      	subs	r3, #2
 80031ea:	4a0f      	ldr	r2, [pc, #60]	; (8003228 <sd_totalspace+0x5c>)
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	8952      	ldrh	r2, [r2, #10]
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd f99d 	bl	8000534 <__aeabi_ui2d>
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <sd_totalspace+0x68>)
 8003200:	f7fd fa12 	bl	8000628 <__aeabi_dmul>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4610      	mov	r0, r2
 800320a:	4619      	mov	r1, r3
 800320c:	f7fd fce4 	bl	8000bd8 <__aeabi_d2uiz>
 8003210:	4603      	mov	r3, r0
 8003212:	4a09      	ldr	r2, [pc, #36]	; (8003238 <sd_totalspace+0x6c>)
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <sd_totalspace+0x6c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	e000      	b.n	800321e <sd_totalspace+0x52>
	}
	else {
		return 0;
 800321c:	2300      	movs	r3, #0
	}

}
 800321e:	4618      	mov	r0, r3
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	200196f0 	.word	0x200196f0
 8003228:	200196e0 	.word	0x200196e0
 800322c:	200196e4 	.word	0x200196e4
 8003230:	0800dcc8 	.word	0x0800dcc8
 8003234:	3fe00000 	.word	0x3fe00000
 8003238:	200196e8 	.word	0x200196e8

0800323c <getFresultString>:
		send_uart("<closing file>\n\r");
	}
}

const char* getFresultString(FRESULT fr)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	71fb      	strb	r3, [r7, #7]
    switch (fr)
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	2b13      	cmp	r3, #19
 800324a:	d853      	bhi.n	80032f4 <getFresultString+0xb8>
 800324c:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <getFresultString+0x18>)
 800324e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003252:	bf00      	nop
 8003254:	080032a5 	.word	0x080032a5
 8003258:	080032a9 	.word	0x080032a9
 800325c:	080032ad 	.word	0x080032ad
 8003260:	080032b1 	.word	0x080032b1
 8003264:	080032b5 	.word	0x080032b5
 8003268:	080032b9 	.word	0x080032b9
 800326c:	080032bd 	.word	0x080032bd
 8003270:	080032c1 	.word	0x080032c1
 8003274:	080032c5 	.word	0x080032c5
 8003278:	080032c9 	.word	0x080032c9
 800327c:	080032cd 	.word	0x080032cd
 8003280:	080032d1 	.word	0x080032d1
 8003284:	080032d5 	.word	0x080032d5
 8003288:	080032d9 	.word	0x080032d9
 800328c:	080032dd 	.word	0x080032dd
 8003290:	080032e1 	.word	0x080032e1
 8003294:	080032e5 	.word	0x080032e5
 8003298:	080032e9 	.word	0x080032e9
 800329c:	080032ed 	.word	0x080032ed
 80032a0:	080032f1 	.word	0x080032f1
    {
        case FR_OK:                   return "FR_OK";
 80032a4:	4b17      	ldr	r3, [pc, #92]	; (8003304 <getFresultString+0xc8>)
 80032a6:	e026      	b.n	80032f6 <getFresultString+0xba>
        case FR_DISK_ERR:             return "FR_DISK_ERR";
 80032a8:	4b17      	ldr	r3, [pc, #92]	; (8003308 <getFresultString+0xcc>)
 80032aa:	e024      	b.n	80032f6 <getFresultString+0xba>
        case FR_INT_ERR:              return "FR_INT_ERR";
 80032ac:	4b17      	ldr	r3, [pc, #92]	; (800330c <getFresultString+0xd0>)
 80032ae:	e022      	b.n	80032f6 <getFresultString+0xba>
        case FR_NOT_READY:            return "FR_NOT_READY";
 80032b0:	4b17      	ldr	r3, [pc, #92]	; (8003310 <getFresultString+0xd4>)
 80032b2:	e020      	b.n	80032f6 <getFresultString+0xba>
        case FR_NO_FILE:              return "FR_NO_FILE";
 80032b4:	4b17      	ldr	r3, [pc, #92]	; (8003314 <getFresultString+0xd8>)
 80032b6:	e01e      	b.n	80032f6 <getFresultString+0xba>
        case FR_NO_PATH:              return "FR_NO_PATH";
 80032b8:	4b17      	ldr	r3, [pc, #92]	; (8003318 <getFresultString+0xdc>)
 80032ba:	e01c      	b.n	80032f6 <getFresultString+0xba>
        case FR_INVALID_NAME:         return "FR_INVALID_NAME";
 80032bc:	4b17      	ldr	r3, [pc, #92]	; (800331c <getFresultString+0xe0>)
 80032be:	e01a      	b.n	80032f6 <getFresultString+0xba>
        case FR_DENIED:               return "FR_DENIED";
 80032c0:	4b17      	ldr	r3, [pc, #92]	; (8003320 <getFresultString+0xe4>)
 80032c2:	e018      	b.n	80032f6 <getFresultString+0xba>
        case FR_EXIST:                return "FR_EXIST";
 80032c4:	4b17      	ldr	r3, [pc, #92]	; (8003324 <getFresultString+0xe8>)
 80032c6:	e016      	b.n	80032f6 <getFresultString+0xba>
        case FR_INVALID_OBJECT:       return "FR_INVALID_OBJECT";
 80032c8:	4b17      	ldr	r3, [pc, #92]	; (8003328 <getFresultString+0xec>)
 80032ca:	e014      	b.n	80032f6 <getFresultString+0xba>
        case FR_WRITE_PROTECTED:      return "FR_WRITE_PROTECTED";
 80032cc:	4b17      	ldr	r3, [pc, #92]	; (800332c <getFresultString+0xf0>)
 80032ce:	e012      	b.n	80032f6 <getFresultString+0xba>
        case FR_INVALID_DRIVE:        return "FR_INVALID_DRIVE";
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <getFresultString+0xf4>)
 80032d2:	e010      	b.n	80032f6 <getFresultString+0xba>
        case FR_NOT_ENABLED:          return "FR_NOT_ENABLED";
 80032d4:	4b17      	ldr	r3, [pc, #92]	; (8003334 <getFresultString+0xf8>)
 80032d6:	e00e      	b.n	80032f6 <getFresultString+0xba>
        case FR_NO_FILESYSTEM:        return "FR_NO_FILESYSTEM";
 80032d8:	4b17      	ldr	r3, [pc, #92]	; (8003338 <getFresultString+0xfc>)
 80032da:	e00c      	b.n	80032f6 <getFresultString+0xba>
        case FR_MKFS_ABORTED:         return "FR_MKFS_ABORTED";
 80032dc:	4b17      	ldr	r3, [pc, #92]	; (800333c <getFresultString+0x100>)
 80032de:	e00a      	b.n	80032f6 <getFresultString+0xba>
        case FR_TIMEOUT:              return "FR_TIMEOUT";
 80032e0:	4b17      	ldr	r3, [pc, #92]	; (8003340 <getFresultString+0x104>)
 80032e2:	e008      	b.n	80032f6 <getFresultString+0xba>
        case FR_LOCKED:               return "FR_LOCKED";
 80032e4:	4b17      	ldr	r3, [pc, #92]	; (8003344 <getFresultString+0x108>)
 80032e6:	e006      	b.n	80032f6 <getFresultString+0xba>
        case FR_NOT_ENOUGH_CORE:      return "FR_NOT_ENOUGH_CORE";
 80032e8:	4b17      	ldr	r3, [pc, #92]	; (8003348 <getFresultString+0x10c>)
 80032ea:	e004      	b.n	80032f6 <getFresultString+0xba>
        case FR_TOO_MANY_OPEN_FILES:  return "FR_TOO_MANY_OPEN_FILES";
 80032ec:	4b17      	ldr	r3, [pc, #92]	; (800334c <getFresultString+0x110>)
 80032ee:	e002      	b.n	80032f6 <getFresultString+0xba>
        case FR_INVALID_PARAMETER:    return "FR_INVALID_PARAMETER";
 80032f0:	4b17      	ldr	r3, [pc, #92]	; (8003350 <getFresultString+0x114>)
 80032f2:	e000      	b.n	80032f6 <getFresultString+0xba>
        default:                      return "Unknown Error";
 80032f4:	4b17      	ldr	r3, [pc, #92]	; (8003354 <getFresultString+0x118>)
    }
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	0800dd54 	.word	0x0800dd54
 8003308:	0800dd5c 	.word	0x0800dd5c
 800330c:	0800dd68 	.word	0x0800dd68
 8003310:	0800dd74 	.word	0x0800dd74
 8003314:	0800dd84 	.word	0x0800dd84
 8003318:	0800dd90 	.word	0x0800dd90
 800331c:	0800dd9c 	.word	0x0800dd9c
 8003320:	0800ddac 	.word	0x0800ddac
 8003324:	0800ddb8 	.word	0x0800ddb8
 8003328:	0800ddc4 	.word	0x0800ddc4
 800332c:	0800ddd8 	.word	0x0800ddd8
 8003330:	0800ddec 	.word	0x0800ddec
 8003334:	0800de00 	.word	0x0800de00
 8003338:	0800de10 	.word	0x0800de10
 800333c:	0800de24 	.word	0x0800de24
 8003340:	0800de34 	.word	0x0800de34
 8003344:	0800de40 	.word	0x0800de40
 8003348:	0800de4c 	.word	0x0800de4c
 800334c:	0800de60 	.word	0x0800de60
 8003350:	0800de78 	.word	0x0800de78
 8003354:	0800de90 	.word	0x0800de90

08003358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <HAL_MspInit+0x4c>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	4a0f      	ldr	r2, [pc, #60]	; (80033a4 <HAL_MspInit+0x4c>)
 8003368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800336c:	6453      	str	r3, [r2, #68]	; 0x44
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <HAL_MspInit+0x4c>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003376:	607b      	str	r3, [r7, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	603b      	str	r3, [r7, #0]
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_MspInit+0x4c>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <HAL_MspInit+0x4c>)
 8003384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003388:	6413      	str	r3, [r2, #64]	; 0x40
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_MspInit+0x4c>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800

080033a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b0:	f107 0314 	add.w	r3, r7, #20
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a17      	ldr	r2, [pc, #92]	; (8003424 <HAL_ADC_MspInit+0x7c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d127      	bne.n	800341a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	4b16      	ldr	r3, [pc, #88]	; (8003428 <HAL_ADC_MspInit+0x80>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	4a15      	ldr	r2, [pc, #84]	; (8003428 <HAL_ADC_MspInit+0x80>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d8:	6453      	str	r3, [r2, #68]	; 0x44
 80033da:	4b13      	ldr	r3, [pc, #76]	; (8003428 <HAL_ADC_MspInit+0x80>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <HAL_ADC_MspInit+0x80>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	4a0e      	ldr	r2, [pc, #56]	; (8003428 <HAL_ADC_MspInit+0x80>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6313      	str	r3, [r2, #48]	; 0x30
 80033f6:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <HAL_ADC_MspInit+0x80>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN0_INT_Pin|ADC1_IN1_INT_Pin|ADC1_IN2_INT_Pin|ADC1_IN3_INT_Pin;
 8003402:	230f      	movs	r3, #15
 8003404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003406:	2303      	movs	r3, #3
 8003408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340e:	f107 0314 	add.w	r3, r7, #20
 8003412:	4619      	mov	r1, r3
 8003414:	4805      	ldr	r0, [pc, #20]	; (800342c <HAL_ADC_MspInit+0x84>)
 8003416:	f002 f82b 	bl	8005470 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800341a:	bf00      	nop
 800341c:	3728      	adds	r7, #40	; 0x28
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40012000 	.word	0x40012000
 8003428:	40023800 	.word	0x40023800
 800342c:	40020000 	.word	0x40020000

08003430 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08c      	sub	sp, #48	; 0x30
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003438:	f107 031c 	add.w	r3, r7, #28
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a3b      	ldr	r2, [pc, #236]	; (800353c <HAL_I2C_MspInit+0x10c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d12c      	bne.n	80034ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	4b3a      	ldr	r3, [pc, #232]	; (8003540 <HAL_I2C_MspInit+0x110>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a39      	ldr	r2, [pc, #228]	; (8003540 <HAL_I2C_MspInit+0x110>)
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
 8003462:	4b37      	ldr	r3, [pc, #220]	; (8003540 <HAL_I2C_MspInit+0x110>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
 800346e:	23c0      	movs	r3, #192	; 0xc0
 8003470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003472:	2312      	movs	r3, #18
 8003474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800347a:	2303      	movs	r3, #3
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800347e:	2304      	movs	r3, #4
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003482:	f107 031c 	add.w	r3, r7, #28
 8003486:	4619      	mov	r1, r3
 8003488:	482e      	ldr	r0, [pc, #184]	; (8003544 <HAL_I2C_MspInit+0x114>)
 800348a:	f001 fff1 	bl	8005470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	4b2b      	ldr	r3, [pc, #172]	; (8003540 <HAL_I2C_MspInit+0x110>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	4a2a      	ldr	r2, [pc, #168]	; (8003540 <HAL_I2C_MspInit+0x110>)
 8003498:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800349c:	6413      	str	r3, [r2, #64]	; 0x40
 800349e:	4b28      	ldr	r3, [pc, #160]	; (8003540 <HAL_I2C_MspInit+0x110>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80034aa:	e042      	b.n	8003532 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a25      	ldr	r2, [pc, #148]	; (8003548 <HAL_I2C_MspInit+0x118>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d13d      	bne.n	8003532 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	4b21      	ldr	r3, [pc, #132]	; (8003540 <HAL_I2C_MspInit+0x110>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	4a20      	ldr	r2, [pc, #128]	; (8003540 <HAL_I2C_MspInit+0x110>)
 80034c0:	f043 0302 	orr.w	r3, r3, #2
 80034c4:	6313      	str	r3, [r2, #48]	; 0x30
 80034c6:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <HAL_I2C_MspInit+0x110>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SCL_ADS_Pin;
 80034d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034d8:	2312      	movs	r3, #18
 80034da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e0:	2303      	movs	r3, #3
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80034e4:	2304      	movs	r3, #4
 80034e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCL_ADS_GPIO_Port, &GPIO_InitStruct);
 80034e8:	f107 031c 	add.w	r3, r7, #28
 80034ec:	4619      	mov	r1, r3
 80034ee:	4815      	ldr	r0, [pc, #84]	; (8003544 <HAL_I2C_MspInit+0x114>)
 80034f0:	f001 ffbe 	bl	8005470 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDA_ADS_Pin;
 80034f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034fa:	2312      	movs	r3, #18
 80034fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003502:	2303      	movs	r3, #3
 8003504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003506:	2309      	movs	r3, #9
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDA_ADS_GPIO_Port, &GPIO_InitStruct);
 800350a:	f107 031c 	add.w	r3, r7, #28
 800350e:	4619      	mov	r1, r3
 8003510:	480c      	ldr	r0, [pc, #48]	; (8003544 <HAL_I2C_MspInit+0x114>)
 8003512:	f001 ffad 	bl	8005470 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_I2C_MspInit+0x110>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <HAL_I2C_MspInit+0x110>)
 8003520:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003524:	6413      	str	r3, [r2, #64]	; 0x40
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_I2C_MspInit+0x110>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
}
 8003532:	bf00      	nop
 8003534:	3730      	adds	r7, #48	; 0x30
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40005400 	.word	0x40005400
 8003540:	40023800 	.word	0x40023800
 8003544:	40020400 	.word	0x40020400
 8003548:	40005800 	.word	0x40005800

0800354c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003554:	f107 0308 	add.w	r3, r7, #8
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	60da      	str	r2, [r3, #12]
 8003562:	611a      	str	r2, [r3, #16]
 8003564:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a0c      	ldr	r2, [pc, #48]	; (800359c <HAL_RTC_MspInit+0x50>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d111      	bne.n	8003594 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003570:	2302      	movs	r3, #2
 8003572:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003578:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800357a:	f107 0308 	add.w	r3, r7, #8
 800357e:	4618      	mov	r0, r3
 8003580:	f003 fec2 	bl	8007308 <HAL_RCCEx_PeriphCLKConfig>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800358a:	f7fe ff75 	bl	8002478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800358e:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <HAL_RTC_MspInit+0x54>)
 8003590:	2201      	movs	r2, #1
 8003592:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003594:	bf00      	nop
 8003596:	3720      	adds	r7, #32
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40002800 	.word	0x40002800
 80035a0:	42470e3c 	.word	0x42470e3c

080035a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	60da      	str	r2, [r3, #12]
 80035ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a21      	ldr	r2, [pc, #132]	; (8003648 <HAL_SPI_MspInit+0xa4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d13b      	bne.n	800363e <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	4b20      	ldr	r3, [pc, #128]	; (800364c <HAL_SPI_MspInit+0xa8>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	4a1f      	ldr	r2, [pc, #124]	; (800364c <HAL_SPI_MspInit+0xa8>)
 80035d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035d4:	6453      	str	r3, [r2, #68]	; 0x44
 80035d6:	4b1d      	ldr	r3, [pc, #116]	; (800364c <HAL_SPI_MspInit+0xa8>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	4b19      	ldr	r3, [pc, #100]	; (800364c <HAL_SPI_MspInit+0xa8>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	4a18      	ldr	r2, [pc, #96]	; (800364c <HAL_SPI_MspInit+0xa8>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	6313      	str	r3, [r2, #48]	; 0x30
 80035f2:	4b16      	ldr	r3, [pc, #88]	; (800364c <HAL_SPI_MspInit+0xa8>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_SD_Pin;
 80035fe:	2320      	movs	r3, #32
 8003600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003602:	2302      	movs	r3, #2
 8003604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360a:	2303      	movs	r3, #3
 800360c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800360e:	2305      	movs	r3, #5
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCK_SD_GPIO_Port, &GPIO_InitStruct);
 8003612:	f107 0314 	add.w	r3, r7, #20
 8003616:	4619      	mov	r1, r3
 8003618:	480d      	ldr	r0, [pc, #52]	; (8003650 <HAL_SPI_MspInit+0xac>)
 800361a:	f001 ff29 	bl	8005470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_SD_Pin|MOSI_SD_Pin;
 800361e:	23c0      	movs	r3, #192	; 0xc0
 8003620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003622:	2302      	movs	r3, #2
 8003624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003626:	2301      	movs	r3, #1
 8003628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800362a:	2303      	movs	r3, #3
 800362c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800362e:	2305      	movs	r3, #5
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003632:	f107 0314 	add.w	r3, r7, #20
 8003636:	4619      	mov	r1, r3
 8003638:	4805      	ldr	r0, [pc, #20]	; (8003650 <HAL_SPI_MspInit+0xac>)
 800363a:	f001 ff19 	bl	8005470 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800363e:	bf00      	nop
 8003640:	3728      	adds	r7, #40	; 0x28
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40013000 	.word	0x40013000
 800364c:	40023800 	.word	0x40023800
 8003650:	40020000 	.word	0x40020000

08003654 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a21      	ldr	r2, [pc, #132]	; (80036f8 <HAL_TIM_Encoder_MspInit+0xa4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d13c      	bne.n	80036f0 <HAL_TIM_Encoder_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	4b20      	ldr	r3, [pc, #128]	; (80036fc <HAL_TIM_Encoder_MspInit+0xa8>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <HAL_TIM_Encoder_MspInit+0xa8>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6453      	str	r3, [r2, #68]	; 0x44
 8003686:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_TIM_Encoder_MspInit+0xa8>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_TIM_Encoder_MspInit+0xa8>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	4a18      	ldr	r2, [pc, #96]	; (80036fc <HAL_TIM_Encoder_MspInit+0xa8>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6313      	str	r3, [r2, #48]	; 0x30
 80036a2:	4b16      	ldr	r3, [pc, #88]	; (80036fc <HAL_TIM_Encoder_MspInit+0xa8>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80036ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b4:	2302      	movs	r3, #2
 80036b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036bc:	2300      	movs	r3, #0
 80036be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036c0:	2301      	movs	r3, #1
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	4619      	mov	r1, r3
 80036ca:	480d      	ldr	r0, [pc, #52]	; (8003700 <HAL_TIM_Encoder_MspInit+0xac>)
 80036cc:	f001 fed0 	bl	8005470 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80036d0:	2200      	movs	r2, #0
 80036d2:	2100      	movs	r1, #0
 80036d4:	2019      	movs	r0, #25
 80036d6:	f001 fe94 	bl	8005402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80036da:	2019      	movs	r0, #25
 80036dc:	f001 fead 	bl	800543a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80036e0:	2200      	movs	r2, #0
 80036e2:	2100      	movs	r1, #0
 80036e4:	201a      	movs	r0, #26
 80036e6:	f001 fe8c 	bl	8005402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80036ea:	201a      	movs	r0, #26
 80036ec:	f001 fea5 	bl	800543a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80036f0:	bf00      	nop
 80036f2:	3728      	adds	r7, #40	; 0x28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40023800 	.word	0x40023800
 8003700:	40020000 	.word	0x40020000

08003704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003714:	d116      	bne.n	8003744 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	4b28      	ldr	r3, [pc, #160]	; (80037bc <HAL_TIM_Base_MspInit+0xb8>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	4a27      	ldr	r2, [pc, #156]	; (80037bc <HAL_TIM_Base_MspInit+0xb8>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	6413      	str	r3, [r2, #64]	; 0x40
 8003726:	4b25      	ldr	r3, [pc, #148]	; (80037bc <HAL_TIM_Base_MspInit+0xb8>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003732:	2200      	movs	r2, #0
 8003734:	2100      	movs	r1, #0
 8003736:	201c      	movs	r0, #28
 8003738:	f001 fe63 	bl	8005402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800373c:	201c      	movs	r0, #28
 800373e:	f001 fe7c 	bl	800543a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003742:	e036      	b.n	80037b2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1d      	ldr	r2, [pc, #116]	; (80037c0 <HAL_TIM_Base_MspInit+0xbc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d116      	bne.n	800377c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <HAL_TIM_Base_MspInit+0xb8>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	4a19      	ldr	r2, [pc, #100]	; (80037bc <HAL_TIM_Base_MspInit+0xb8>)
 8003758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375c:	6453      	str	r3, [r2, #68]	; 0x44
 800375e:	4b17      	ldr	r3, [pc, #92]	; (80037bc <HAL_TIM_Base_MspInit+0xb8>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800376a:	2200      	movs	r2, #0
 800376c:	2100      	movs	r1, #0
 800376e:	2019      	movs	r0, #25
 8003770:	f001 fe47 	bl	8005402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003774:	2019      	movs	r0, #25
 8003776:	f001 fe60 	bl	800543a <HAL_NVIC_EnableIRQ>
}
 800377a:	e01a      	b.n	80037b2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a10      	ldr	r2, [pc, #64]	; (80037c4 <HAL_TIM_Base_MspInit+0xc0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d115      	bne.n	80037b2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <HAL_TIM_Base_MspInit+0xb8>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	4a0b      	ldr	r2, [pc, #44]	; (80037bc <HAL_TIM_Base_MspInit+0xb8>)
 8003790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003794:	6453      	str	r3, [r2, #68]	; 0x44
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_TIM_Base_MspInit+0xb8>)
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80037a2:	2200      	movs	r2, #0
 80037a4:	2100      	movs	r1, #0
 80037a6:	201a      	movs	r0, #26
 80037a8:	f001 fe2b 	bl	8005402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80037ac:	201a      	movs	r0, #26
 80037ae:	f001 fe44 	bl	800543a <HAL_NVIC_EnableIRQ>
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40014400 	.word	0x40014400
 80037c4:	40014800 	.word	0x40014800

080037c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a19      	ldr	r2, [pc, #100]	; (800384c <HAL_UART_MspInit+0x84>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d12c      	bne.n	8003844 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	4b18      	ldr	r3, [pc, #96]	; (8003850 <HAL_UART_MspInit+0x88>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	4a17      	ldr	r2, [pc, #92]	; (8003850 <HAL_UART_MspInit+0x88>)
 80037f4:	f043 0320 	orr.w	r3, r3, #32
 80037f8:	6453      	str	r3, [r2, #68]	; 0x44
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_UART_MspInit+0x88>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_UART_MspInit+0x88>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4a10      	ldr	r2, [pc, #64]	; (8003850 <HAL_UART_MspInit+0x88>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6313      	str	r3, [r2, #48]	; 0x30
 8003816:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <HAL_UART_MspInit+0x88>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003822:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003828:	2302      	movs	r3, #2
 800382a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382c:	2300      	movs	r3, #0
 800382e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003830:	2303      	movs	r3, #3
 8003832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003834:	2308      	movs	r3, #8
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003838:	f107 0314 	add.w	r3, r7, #20
 800383c:	4619      	mov	r1, r3
 800383e:	4805      	ldr	r0, [pc, #20]	; (8003854 <HAL_UART_MspInit+0x8c>)
 8003840:	f001 fe16 	bl	8005470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003844:	bf00      	nop
 8003846:	3728      	adds	r7, #40	; 0x28
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40011400 	.word	0x40011400
 8003850:	40023800 	.word	0x40023800
 8003854:	40020000 	.word	0x40020000

08003858 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <SDTimer_Handler+0x40>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d006      	beq.n	8003874 <SDTimer_Handler+0x1c>
    Timer1--;
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <SDTimer_Handler+0x40>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b2da      	uxtb	r2, r3
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <SDTimer_Handler+0x40>)
 8003872:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <SDTimer_Handler+0x44>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d006      	beq.n	800388c <SDTimer_Handler+0x34>
    Timer2--;
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <SDTimer_Handler+0x44>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b2da      	uxtb	r2, r3
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <SDTimer_Handler+0x44>)
 800388a:	701a      	strb	r2, [r3, #0]
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	200196f2 	.word	0x200196f2
 800389c:	200196f3 	.word	0x200196f3

080038a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038a4:	e7fe      	b.n	80038a4 <NMI_Handler+0x4>

080038a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038a6:	b480      	push	{r7}
 80038a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038aa:	e7fe      	b.n	80038aa <HardFault_Handler+0x4>

080038ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <MemManage_Handler+0x4>

080038b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038b6:	e7fe      	b.n	80038b6 <BusFault_Handler+0x4>

080038b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038bc:	e7fe      	b.n	80038bc <UsageFault_Handler+0x4>

080038be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038da:	b480      	push	{r7}
 80038dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <SysTick_Handler+0x30>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	4b08      	ldr	r3, [pc, #32]	; (8003918 <SysTick_Handler+0x30>)
 80038f8:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <SysTick_Handler+0x30>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b09      	cmp	r3, #9
 8003902:	d904      	bls.n	800390e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <SysTick_Handler+0x30>)
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800390a:	f7ff ffa5 	bl	8003858 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800390e:	f001 f89b 	bl	8004a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	200196f1 	.word	0x200196f1

0800391c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8003920:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003924:	f001 ff5a 	bl	80057dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}

0800392c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003930:	4803      	ldr	r0, [pc, #12]	; (8003940 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003932:	f005 f8ef 	bl	8008b14 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003936:	4803      	ldr	r0, [pc, #12]	; (8003944 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003938:	f005 f8ec 	bl	8008b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800393c:	bf00      	nop
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000bfc 	.word	0x20000bfc
 8003944:	20000c8c 	.word	0x20000c8c

08003948 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800394c:	4803      	ldr	r0, [pc, #12]	; (800395c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800394e:	f005 f8e1 	bl	8008b14 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003952:	4803      	ldr	r0, [pc, #12]	; (8003960 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003954:	f005 f8de 	bl	8008b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003958:	bf00      	nop
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20000bfc 	.word	0x20000bfc
 8003960:	20000cd4 	.word	0x20000cd4

08003964 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003968:	4802      	ldr	r0, [pc, #8]	; (8003974 <TIM2_IRQHandler+0x10>)
 800396a:	f005 f8d3 	bl	8008b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000c44 	.word	0x20000c44

08003978 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return 1;
 800397c:	2301      	movs	r3, #1
}
 800397e:	4618      	mov	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <_kill>:

int _kill(int pid, int sig)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003992:	f008 f83f 	bl	800ba14 <__errno>
 8003996:	4603      	mov	r3, r0
 8003998:	2216      	movs	r2, #22
 800399a:	601a      	str	r2, [r3, #0]
  return -1;
 800399c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <_exit>:

void _exit (int status)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039b0:	f04f 31ff 	mov.w	r1, #4294967295
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ffe7 	bl	8003988 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039ba:	e7fe      	b.n	80039ba <_exit+0x12>

080039bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e00a      	b.n	80039e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039ce:	f3af 8000 	nop.w
 80039d2:	4601      	mov	r1, r0
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	60ba      	str	r2, [r7, #8]
 80039da:	b2ca      	uxtb	r2, r1
 80039dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	3301      	adds	r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	dbf0      	blt.n	80039ce <_read+0x12>
  }

  return len;
 80039ec:	687b      	ldr	r3, [r7, #4]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b086      	sub	sp, #24
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	e009      	b.n	8003a1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	60ba      	str	r2, [r7, #8]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	dbf1      	blt.n	8003a08 <_write+0x12>
  }
  return len;
 8003a24:	687b      	ldr	r3, [r7, #4]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <_close>:

int _close(int file)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a56:	605a      	str	r2, [r3, #4]
  return 0;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <_isatty>:

int _isatty(int file)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a6e:	2301      	movs	r3, #1
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003aa0:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <_sbrk+0x5c>)
 8003aa2:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <_sbrk+0x60>)
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003aac:	4b13      	ldr	r3, [pc, #76]	; (8003afc <_sbrk+0x64>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ab4:	4b11      	ldr	r3, [pc, #68]	; (8003afc <_sbrk+0x64>)
 8003ab6:	4a12      	ldr	r2, [pc, #72]	; (8003b00 <_sbrk+0x68>)
 8003ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aba:	4b10      	ldr	r3, [pc, #64]	; (8003afc <_sbrk+0x64>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d207      	bcs.n	8003ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ac8:	f007 ffa4 	bl	800ba14 <__errno>
 8003acc:	4603      	mov	r3, r0
 8003ace:	220c      	movs	r2, #12
 8003ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad6:	e009      	b.n	8003aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ad8:	4b08      	ldr	r3, [pc, #32]	; (8003afc <_sbrk+0x64>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ade:	4b07      	ldr	r3, [pc, #28]	; (8003afc <_sbrk+0x64>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	4a05      	ldr	r2, [pc, #20]	; (8003afc <_sbrk+0x64>)
 8003ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003aea:	68fb      	ldr	r3, [r7, #12]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20020000 	.word	0x20020000
 8003af8:	00000400 	.word	0x00000400
 8003afc:	200196f4 	.word	0x200196f4
 8003b00:	20019c98 	.word	0x20019c98

08003b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <SystemInit+0x20>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	4a05      	ldr	r2, [pc, #20]	; (8003b24 <SystemInit+0x20>)
 8003b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003b30:	f000 ff9e 	bl	8004a70 <HAL_GetTick>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <SPI_Timer_On+0x20>)
 8003b38:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003b3a:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <SPI_Timer_On+0x24>)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6013      	str	r3, [r2, #0]
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	200196fc 	.word	0x200196fc
 8003b4c:	20019700 	.word	0x20019700

08003b50 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003b54:	f000 ff8c 	bl	8004a70 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <SPI_Timer_Status+0x24>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	1ad2      	subs	r2, r2, r3
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <SPI_Timer_Status+0x28>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	bf34      	ite	cc
 8003b68:	2301      	movcc	r3, #1
 8003b6a:	2300      	movcs	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	200196fc 	.word	0x200196fc
 8003b78:	20019700 	.word	0x20019700

08003b7c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003b86:	f107 020f 	add.w	r2, r7, #15
 8003b8a:	1df9      	adds	r1, r7, #7
 8003b8c:	2332      	movs	r3, #50	; 0x32
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	2301      	movs	r3, #1
 8003b92:	4804      	ldr	r0, [pc, #16]	; (8003ba4 <xchg_spi+0x28>)
 8003b94:	f004 f96b 	bl	8007e6e <HAL_SPI_TransmitReceive>
    return rxDat;
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000ba4 	.word	0x20000ba4

08003ba8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003ba8:	b590      	push	{r4, r7, lr}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e00a      	b.n	8003bce <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	18d4      	adds	r4, r2, r3
 8003bbe:	20ff      	movs	r0, #255	; 0xff
 8003bc0:	f7ff ffdc 	bl	8003b7c <xchg_spi>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d3f0      	bcc.n	8003bb8 <rcvr_spi_multi+0x10>
	}
}
 8003bd6:	bf00      	nop
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd90      	pop	{r4, r7, pc}

08003be0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4803      	ldr	r0, [pc, #12]	; (8003c04 <xmit_spi_multi+0x24>)
 8003bf6:	f003 fffe 	bl	8007bf6 <HAL_SPI_Transmit>
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000ba4 	.word	0x20000ba4

08003c08 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003c10:	f000 ff2e 	bl	8004a70 <HAL_GetTick>
 8003c14:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003c1a:	20ff      	movs	r0, #255	; 0xff
 8003c1c:	f7ff ffae 	bl	8003b7c <xchg_spi>
 8003c20:	4603      	mov	r3, r0
 8003c22:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	2bff      	cmp	r3, #255	; 0xff
 8003c28:	d007      	beq.n	8003c3a <wait_ready+0x32>
 8003c2a:	f000 ff21 	bl	8004a70 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d8ef      	bhi.n	8003c1a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	2bff      	cmp	r3, #255	; 0xff
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003c54:	2201      	movs	r2, #1
 8003c56:	2110      	movs	r1, #16
 8003c58:	4803      	ldr	r0, [pc, #12]	; (8003c68 <despiselect+0x18>)
 8003c5a:	f001 fda5 	bl	80057a8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003c5e:	20ff      	movs	r0, #255	; 0xff
 8003c60:	f7ff ff8c 	bl	8003b7c <xchg_spi>

}
 8003c64:	bf00      	nop
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40020000 	.word	0x40020000

08003c6c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003c70:	2200      	movs	r2, #0
 8003c72:	2110      	movs	r1, #16
 8003c74:	4809      	ldr	r0, [pc, #36]	; (8003c9c <spiselect+0x30>)
 8003c76:	f001 fd97 	bl	80057a8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003c7a:	20ff      	movs	r0, #255	; 0xff
 8003c7c:	f7ff ff7e 	bl	8003b7c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003c80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c84:	f7ff ffc0 	bl	8003c08 <wait_ready>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <spiselect+0x26>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e002      	b.n	8003c98 <spiselect+0x2c>

	despiselect();
 8003c92:	f7ff ffdd 	bl	8003c50 <despiselect>
	return 0;	/* Timeout */
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40020000 	.word	0x40020000

08003ca0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003caa:	20c8      	movs	r0, #200	; 0xc8
 8003cac:	f7ff ff3c 	bl	8003b28 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003cb0:	20ff      	movs	r0, #255	; 0xff
 8003cb2:	f7ff ff63 	bl	8003b7c <xchg_spi>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	2bff      	cmp	r3, #255	; 0xff
 8003cbe:	d104      	bne.n	8003cca <rcvr_datablock+0x2a>
 8003cc0:	f7ff ff46 	bl	8003b50 <SPI_Timer_Status>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f2      	bne.n	8003cb0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	2bfe      	cmp	r3, #254	; 0xfe
 8003cce:	d001      	beq.n	8003cd4 <rcvr_datablock+0x34>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e00a      	b.n	8003cea <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003cd4:	6839      	ldr	r1, [r7, #0]
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff ff66 	bl	8003ba8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003cdc:	20ff      	movs	r0, #255	; 0xff
 8003cde:	f7ff ff4d 	bl	8003b7c <xchg_spi>
 8003ce2:	20ff      	movs	r0, #255	; 0xff
 8003ce4:	f7ff ff4a 	bl	8003b7c <xchg_spi>

	return 1;						/* Function succeeded */
 8003ce8:	2301      	movs	r3, #1
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003cfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d02:	f7ff ff81 	bl	8003c08 <wait_ready>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <xmit_datablock+0x1e>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e01e      	b.n	8003d4e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ff32 	bl	8003b7c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	2bfd      	cmp	r3, #253	; 0xfd
 8003d1c:	d016      	beq.n	8003d4c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003d1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff ff5c 	bl	8003be0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003d28:	20ff      	movs	r0, #255	; 0xff
 8003d2a:	f7ff ff27 	bl	8003b7c <xchg_spi>
 8003d2e:	20ff      	movs	r0, #255	; 0xff
 8003d30:	f7ff ff24 	bl	8003b7c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003d34:	20ff      	movs	r0, #255	; 0xff
 8003d36:	f7ff ff21 	bl	8003b7c <xchg_spi>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	2b05      	cmp	r3, #5
 8003d46:	d001      	beq.n	8003d4c <xmit_datablock+0x5a>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e000      	b.n	8003d4e <xmit_datablock+0x5c>
	}
	return 1;
 8003d4c:	2301      	movs	r3, #1
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	6039      	str	r1, [r7, #0]
 8003d60:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	da0e      	bge.n	8003d88 <send_cmd+0x32>
		cmd &= 0x7F;
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d70:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003d72:	2100      	movs	r1, #0
 8003d74:	2037      	movs	r0, #55	; 0x37
 8003d76:	f7ff ffee 	bl	8003d56 <send_cmd>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003d7e:	7bbb      	ldrb	r3, [r7, #14]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d901      	bls.n	8003d88 <send_cmd+0x32>
 8003d84:	7bbb      	ldrb	r3, [r7, #14]
 8003d86:	e051      	b.n	8003e2c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	2b0c      	cmp	r3, #12
 8003d8c:	d008      	beq.n	8003da0 <send_cmd+0x4a>
		despiselect();
 8003d8e:	f7ff ff5f 	bl	8003c50 <despiselect>
		if (!spiselect()) return 0xFF;
 8003d92:	f7ff ff6b 	bl	8003c6c <spiselect>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <send_cmd+0x4a>
 8003d9c:	23ff      	movs	r3, #255	; 0xff
 8003d9e:	e045      	b.n	8003e2c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff fee7 	bl	8003b7c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	0e1b      	lsrs	r3, r3, #24
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fee1 	bl	8003b7c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	0c1b      	lsrs	r3, r3, #16
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fedb 	bl	8003b7c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fed5 	bl	8003b7c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fed0 	bl	8003b7c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <send_cmd+0x94>
 8003de6:	2395      	movs	r3, #149	; 0x95
 8003de8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d101      	bne.n	8003df4 <send_cmd+0x9e>
 8003df0:	2387      	movs	r3, #135	; 0x87
 8003df2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fec0 	bl	8003b7c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	2b0c      	cmp	r3, #12
 8003e00:	d102      	bne.n	8003e08 <send_cmd+0xb2>
 8003e02:	20ff      	movs	r0, #255	; 0xff
 8003e04:	f7ff feba 	bl	8003b7c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003e08:	230a      	movs	r3, #10
 8003e0a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003e0c:	20ff      	movs	r0, #255	; 0xff
 8003e0e:	f7ff feb5 	bl	8003b7c <xchg_spi>
 8003e12:	4603      	mov	r3, r0
 8003e14:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003e16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	da05      	bge.n	8003e2a <send_cmd+0xd4>
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <send_cmd+0xb6>

	return res;							/* Return received response */
 8003e2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003e34:	b590      	push	{r4, r7, lr}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <USER_SPI_initialize+0x14>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0d6      	b.n	8003ff6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003e48:	4b6d      	ldr	r3, [pc, #436]	; (8004000 <USER_SPI_initialize+0x1cc>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <USER_SPI_initialize+0x2a>
 8003e56:	4b6a      	ldr	r3, [pc, #424]	; (8004000 <USER_SPI_initialize+0x1cc>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	e0cb      	b.n	8003ff6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003e5e:	4b69      	ldr	r3, [pc, #420]	; (8004004 <USER_SPI_initialize+0x1d0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003e68:	4b66      	ldr	r3, [pc, #408]	; (8004004 <USER_SPI_initialize+0x1d0>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003e70:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003e72:	230a      	movs	r3, #10
 8003e74:	73fb      	strb	r3, [r7, #15]
 8003e76:	e005      	b.n	8003e84 <USER_SPI_initialize+0x50>
 8003e78:	20ff      	movs	r0, #255	; 0xff
 8003e7a:	f7ff fe7f 	bl	8003b7c <xchg_spi>
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f6      	bne.n	8003e78 <USER_SPI_initialize+0x44>

	ty = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003e8e:	2100      	movs	r1, #0
 8003e90:	2000      	movs	r0, #0
 8003e92:	f7ff ff60 	bl	8003d56 <send_cmd>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	f040 808b 	bne.w	8003fb4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003e9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ea2:	f7ff fe41 	bl	8003b28 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003ea6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003eaa:	2008      	movs	r0, #8
 8003eac:	f7ff ff53 	bl	8003d56 <send_cmd>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d151      	bne.n	8003f5a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
 8003eba:	e00d      	b.n	8003ed8 <USER_SPI_initialize+0xa4>
 8003ebc:	7bfc      	ldrb	r4, [r7, #15]
 8003ebe:	20ff      	movs	r0, #255	; 0xff
 8003ec0:	f7ff fe5c 	bl	8003b7c <xchg_spi>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f104 0310 	add.w	r3, r4, #16
 8003ecc:	443b      	add	r3, r7
 8003ece:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d9ee      	bls.n	8003ebc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003ede:	7abb      	ldrb	r3, [r7, #10]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d167      	bne.n	8003fb4 <USER_SPI_initialize+0x180>
 8003ee4:	7afb      	ldrb	r3, [r7, #11]
 8003ee6:	2baa      	cmp	r3, #170	; 0xaa
 8003ee8:	d164      	bne.n	8003fb4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003eea:	bf00      	nop
 8003eec:	f7ff fe30 	bl	8003b50 <SPI_Timer_Status>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <USER_SPI_initialize+0xd2>
 8003ef6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003efa:	20a9      	movs	r0, #169	; 0xa9
 8003efc:	f7ff ff2b 	bl	8003d56 <send_cmd>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f2      	bne.n	8003eec <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003f06:	f7ff fe23 	bl	8003b50 <SPI_Timer_Status>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d051      	beq.n	8003fb4 <USER_SPI_initialize+0x180>
 8003f10:	2100      	movs	r1, #0
 8003f12:	203a      	movs	r0, #58	; 0x3a
 8003f14:	f7ff ff1f 	bl	8003d56 <send_cmd>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d14a      	bne.n	8003fb4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	73fb      	strb	r3, [r7, #15]
 8003f22:	e00d      	b.n	8003f40 <USER_SPI_initialize+0x10c>
 8003f24:	7bfc      	ldrb	r4, [r7, #15]
 8003f26:	20ff      	movs	r0, #255	; 0xff
 8003f28:	f7ff fe28 	bl	8003b7c <xchg_spi>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f104 0310 	add.w	r3, r4, #16
 8003f34:	443b      	add	r3, r7
 8003f36:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d9ee      	bls.n	8003f24 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003f46:	7a3b      	ldrb	r3, [r7, #8]
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <USER_SPI_initialize+0x120>
 8003f50:	230c      	movs	r3, #12
 8003f52:	e000      	b.n	8003f56 <USER_SPI_initialize+0x122>
 8003f54:	2304      	movs	r3, #4
 8003f56:	737b      	strb	r3, [r7, #13]
 8003f58:	e02c      	b.n	8003fb4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	20a9      	movs	r0, #169	; 0xa9
 8003f5e:	f7ff fefa 	bl	8003d56 <send_cmd>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d804      	bhi.n	8003f72 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003f68:	2302      	movs	r3, #2
 8003f6a:	737b      	strb	r3, [r7, #13]
 8003f6c:	23a9      	movs	r3, #169	; 0xa9
 8003f6e:	73bb      	strb	r3, [r7, #14]
 8003f70:	e003      	b.n	8003f7a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003f72:	2301      	movs	r3, #1
 8003f74:	737b      	strb	r3, [r7, #13]
 8003f76:	2301      	movs	r3, #1
 8003f78:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003f7a:	bf00      	nop
 8003f7c:	f7ff fde8 	bl	8003b50 <SPI_Timer_Status>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <USER_SPI_initialize+0x162>
 8003f86:	7bbb      	ldrb	r3, [r7, #14]
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff fee3 	bl	8003d56 <send_cmd>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f2      	bne.n	8003f7c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003f96:	f7ff fddb 	bl	8003b50 <SPI_Timer_Status>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <USER_SPI_initialize+0x17c>
 8003fa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fa4:	2010      	movs	r0, #16
 8003fa6:	f7ff fed6 	bl	8003d56 <send_cmd>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <USER_SPI_initialize+0x180>
				ty = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <USER_SPI_initialize+0x1d4>)
 8003fb6:	7b7b      	ldrb	r3, [r7, #13]
 8003fb8:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003fba:	f7ff fe49 	bl	8003c50 <despiselect>

	if (ty) {			/* OK */
 8003fbe:	7b7b      	ldrb	r3, [r7, #13]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d012      	beq.n	8003fea <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <USER_SPI_initialize+0x1d0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <USER_SPI_initialize+0x1d0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0210 	orr.w	r2, r2, #16
 8003fd6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003fd8:	4b09      	ldr	r3, [pc, #36]	; (8004000 <USER_SPI_initialize+0x1cc>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <USER_SPI_initialize+0x1cc>)
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e002      	b.n	8003ff0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <USER_SPI_initialize+0x1cc>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003ff0:	4b03      	ldr	r3, [pc, #12]	; (8004000 <USER_SPI_initialize+0x1cc>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	b2db      	uxtb	r3, r3
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd90      	pop	{r4, r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000868 	.word	0x20000868
 8004004:	20000ba4 	.word	0x20000ba4
 8004008:	200196f8 	.word	0x200196f8

0800400c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <USER_SPI_status+0x14>
 800401c:	2301      	movs	r3, #1
 800401e:	e002      	b.n	8004026 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004020:	4b04      	ldr	r3, [pc, #16]	; (8004034 <USER_SPI_status+0x28>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b2db      	uxtb	r3, r3
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	20000868 	.word	0x20000868

08004038 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	4603      	mov	r3, r0
 8004046:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <USER_SPI_read+0x1c>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <USER_SPI_read+0x20>
 8004054:	2304      	movs	r3, #4
 8004056:	e04d      	b.n	80040f4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004058:	4b28      	ldr	r3, [pc, #160]	; (80040fc <USER_SPI_read+0xc4>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <USER_SPI_read+0x32>
 8004066:	2303      	movs	r3, #3
 8004068:	e044      	b.n	80040f4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800406a:	4b25      	ldr	r3, [pc, #148]	; (8004100 <USER_SPI_read+0xc8>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <USER_SPI_read+0x44>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	025b      	lsls	r3, r3, #9
 800407a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d111      	bne.n	80040a6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	2011      	movs	r0, #17
 8004086:	f7ff fe66 	bl	8003d56 <send_cmd>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d129      	bne.n	80040e4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004090:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004094:	68b8      	ldr	r0, [r7, #8]
 8004096:	f7ff fe03 	bl	8003ca0 <rcvr_datablock>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d021      	beq.n	80040e4 <USER_SPI_read+0xac>
			count = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	e01e      	b.n	80040e4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	2012      	movs	r0, #18
 80040aa:	f7ff fe54 	bl	8003d56 <send_cmd>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d117      	bne.n	80040e4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80040b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040b8:	68b8      	ldr	r0, [r7, #8]
 80040ba:	f7ff fdf1 	bl	8003ca0 <rcvr_datablock>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <USER_SPI_read+0xa2>
				buff += 512;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80040ca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1ed      	bne.n	80040b4 <USER_SPI_read+0x7c>
 80040d8:	e000      	b.n	80040dc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80040da:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80040dc:	2100      	movs	r1, #0
 80040de:	200c      	movs	r0, #12
 80040e0:	f7ff fe39 	bl	8003d56 <send_cmd>
		}
	}
	despiselect();
 80040e4:	f7ff fdb4 	bl	8003c50 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bf14      	ite	ne
 80040ee:	2301      	movne	r3, #1
 80040f0:	2300      	moveq	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000868 	.word	0x20000868
 8004100:	200196f8 	.word	0x200196f8

08004104 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	4603      	mov	r3, r0
 8004112:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <USER_SPI_write+0x1c>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <USER_SPI_write+0x20>
 8004120:	2304      	movs	r3, #4
 8004122:	e063      	b.n	80041ec <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004124:	4b33      	ldr	r3, [pc, #204]	; (80041f4 <USER_SPI_write+0xf0>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <USER_SPI_write+0x32>
 8004132:	2303      	movs	r3, #3
 8004134:	e05a      	b.n	80041ec <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004136:	4b2f      	ldr	r3, [pc, #188]	; (80041f4 <USER_SPI_write+0xf0>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <USER_SPI_write+0x44>
 8004144:	2302      	movs	r3, #2
 8004146:	e051      	b.n	80041ec <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004148:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <USER_SPI_write+0xf4>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <USER_SPI_write+0x56>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	025b      	lsls	r3, r3, #9
 8004158:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d110      	bne.n	8004182 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	2018      	movs	r0, #24
 8004164:	f7ff fdf7 	bl	8003d56 <send_cmd>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d136      	bne.n	80041dc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800416e:	21fe      	movs	r1, #254	; 0xfe
 8004170:	68b8      	ldr	r0, [r7, #8]
 8004172:	f7ff fdbe 	bl	8003cf2 <xmit_datablock>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d02f      	beq.n	80041dc <USER_SPI_write+0xd8>
			count = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	e02c      	b.n	80041dc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004182:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <USER_SPI_write+0xf4>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	f003 0306 	and.w	r3, r3, #6
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <USER_SPI_write+0x92>
 800418e:	6839      	ldr	r1, [r7, #0]
 8004190:	2097      	movs	r0, #151	; 0x97
 8004192:	f7ff fde0 	bl	8003d56 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	2019      	movs	r0, #25
 800419a:	f7ff fddc 	bl	8003d56 <send_cmd>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d11b      	bne.n	80041dc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80041a4:	21fc      	movs	r1, #252	; 0xfc
 80041a6:	68b8      	ldr	r0, [r7, #8]
 80041a8:	f7ff fda3 	bl	8003cf2 <xmit_datablock>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <USER_SPI_write+0xc4>
				buff += 512;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80041b8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	3b01      	subs	r3, #1
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1ee      	bne.n	80041a4 <USER_SPI_write+0xa0>
 80041c6:	e000      	b.n	80041ca <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80041c8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80041ca:	21fd      	movs	r1, #253	; 0xfd
 80041cc:	2000      	movs	r0, #0
 80041ce:	f7ff fd90 	bl	8003cf2 <xmit_datablock>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <USER_SPI_write+0xd8>
 80041d8:	2301      	movs	r3, #1
 80041da:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80041dc:	f7ff fd38 	bl	8003c50 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bf14      	ite	ne
 80041e6:	2301      	movne	r3, #1
 80041e8:	2300      	moveq	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000868 	.word	0x20000868
 80041f8:	200196f8 	.word	0x200196f8

080041fc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08c      	sub	sp, #48	; 0x30
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	603a      	str	r2, [r7, #0]
 8004206:	71fb      	strb	r3, [r7, #7]
 8004208:	460b      	mov	r3, r1
 800420a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <USER_SPI_ioctl+0x1a>
 8004212:	2304      	movs	r3, #4
 8004214:	e15a      	b.n	80044cc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004216:	4baf      	ldr	r3, [pc, #700]	; (80044d4 <USER_SPI_ioctl+0x2d8>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <USER_SPI_ioctl+0x2c>
 8004224:	2303      	movs	r3, #3
 8004226:	e151      	b.n	80044cc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800422e:	79bb      	ldrb	r3, [r7, #6]
 8004230:	2b04      	cmp	r3, #4
 8004232:	f200 8136 	bhi.w	80044a2 <USER_SPI_ioctl+0x2a6>
 8004236:	a201      	add	r2, pc, #4	; (adr r2, 800423c <USER_SPI_ioctl+0x40>)
 8004238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423c:	08004251 	.word	0x08004251
 8004240:	08004265 	.word	0x08004265
 8004244:	080044a3 	.word	0x080044a3
 8004248:	08004311 	.word	0x08004311
 800424c:	08004407 	.word	0x08004407
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004250:	f7ff fd0c 	bl	8003c6c <spiselect>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8127 	beq.w	80044aa <USER_SPI_ioctl+0x2ae>
 800425c:	2300      	movs	r3, #0
 800425e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004262:	e122      	b.n	80044aa <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004264:	2100      	movs	r1, #0
 8004266:	2009      	movs	r0, #9
 8004268:	f7ff fd75 	bl	8003d56 <send_cmd>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	f040 811d 	bne.w	80044ae <USER_SPI_ioctl+0x2b2>
 8004274:	f107 030c 	add.w	r3, r7, #12
 8004278:	2110      	movs	r1, #16
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fd10 	bl	8003ca0 <rcvr_datablock>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 8113 	beq.w	80044ae <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004288:	7b3b      	ldrb	r3, [r7, #12]
 800428a:	099b      	lsrs	r3, r3, #6
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b01      	cmp	r3, #1
 8004290:	d111      	bne.n	80042b6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004292:	7d7b      	ldrb	r3, [r7, #21]
 8004294:	461a      	mov	r2, r3
 8004296:	7d3b      	ldrb	r3, [r7, #20]
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	4413      	add	r3, r2
 800429c:	461a      	mov	r2, r3
 800429e:	7cfb      	ldrb	r3, [r7, #19]
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80042a6:	4413      	add	r3, r2
 80042a8:	3301      	adds	r3, #1
 80042aa:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	029a      	lsls	r2, r3, #10
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	e028      	b.n	8004308 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80042b6:	7c7b      	ldrb	r3, [r7, #17]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	7dbb      	ldrb	r3, [r7, #22]
 80042c0:	09db      	lsrs	r3, r3, #7
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	4413      	add	r3, r2
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	7d7b      	ldrb	r3, [r7, #21]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f003 0306 	and.w	r3, r3, #6
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	3302      	adds	r3, #2
 80042da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80042de:	7d3b      	ldrb	r3, [r7, #20]
 80042e0:	099b      	lsrs	r3, r3, #6
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	441a      	add	r2, r3
 80042ec:	7cbb      	ldrb	r3, [r7, #18]
 80042ee:	029b      	lsls	r3, r3, #10
 80042f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042f4:	4413      	add	r3, r2
 80042f6:	3301      	adds	r3, #1
 80042f8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80042fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80042fe:	3b09      	subs	r3, #9
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	409a      	lsls	r2, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800430e:	e0ce      	b.n	80044ae <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004310:	4b71      	ldr	r3, [pc, #452]	; (80044d8 <USER_SPI_ioctl+0x2dc>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d031      	beq.n	8004380 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800431c:	2100      	movs	r1, #0
 800431e:	208d      	movs	r0, #141	; 0x8d
 8004320:	f7ff fd19 	bl	8003d56 <send_cmd>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 80c3 	bne.w	80044b2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800432c:	20ff      	movs	r0, #255	; 0xff
 800432e:	f7ff fc25 	bl	8003b7c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004332:	f107 030c 	add.w	r3, r7, #12
 8004336:	2110      	movs	r1, #16
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff fcb1 	bl	8003ca0 <rcvr_datablock>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80b6 	beq.w	80044b2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004346:	2330      	movs	r3, #48	; 0x30
 8004348:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800434c:	e007      	b.n	800435e <USER_SPI_ioctl+0x162>
 800434e:	20ff      	movs	r0, #255	; 0xff
 8004350:	f7ff fc14 	bl	8003b7c <xchg_spi>
 8004354:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004358:	3b01      	subs	r3, #1
 800435a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800435e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f3      	bne.n	800434e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004366:	7dbb      	ldrb	r3, [r7, #22]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	b2db      	uxtb	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	2310      	movs	r3, #16
 8004370:	fa03 f202 	lsl.w	r2, r3, r2
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800437e:	e098      	b.n	80044b2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004380:	2100      	movs	r1, #0
 8004382:	2009      	movs	r0, #9
 8004384:	f7ff fce7 	bl	8003d56 <send_cmd>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 8091 	bne.w	80044b2 <USER_SPI_ioctl+0x2b6>
 8004390:	f107 030c 	add.w	r3, r7, #12
 8004394:	2110      	movs	r1, #16
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff fc82 	bl	8003ca0 <rcvr_datablock>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 8087 	beq.w	80044b2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80043a4:	4b4c      	ldr	r3, [pc, #304]	; (80044d8 <USER_SPI_ioctl+0x2dc>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d012      	beq.n	80043d6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80043b0:	7dbb      	ldrb	r3, [r7, #22]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80043b8:	7dfa      	ldrb	r2, [r7, #23]
 80043ba:	09d2      	lsrs	r2, r2, #7
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	4413      	add	r3, r2
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	7e7b      	ldrb	r3, [r7, #25]
 80043c4:	099b      	lsrs	r3, r3, #6
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	e013      	b.n	80043fe <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80043d6:	7dbb      	ldrb	r3, [r7, #22]
 80043d8:	109b      	asrs	r3, r3, #2
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	3301      	adds	r3, #1
 80043e2:	7dfa      	ldrb	r2, [r7, #23]
 80043e4:	00d2      	lsls	r2, r2, #3
 80043e6:	f002 0218 	and.w	r2, r2, #24
 80043ea:	7df9      	ldrb	r1, [r7, #23]
 80043ec:	0949      	lsrs	r1, r1, #5
 80043ee:	b2c9      	uxtb	r1, r1
 80043f0:	440a      	add	r2, r1
 80043f2:	3201      	adds	r2, #1
 80043f4:	fb02 f303 	mul.w	r3, r2, r3
 80043f8:	461a      	mov	r2, r3
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004404:	e055      	b.n	80044b2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004406:	4b34      	ldr	r3, [pc, #208]	; (80044d8 <USER_SPI_ioctl+0x2dc>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	f003 0306 	and.w	r3, r3, #6
 800440e:	2b00      	cmp	r3, #0
 8004410:	d051      	beq.n	80044b6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004412:	f107 020c 	add.w	r2, r7, #12
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	210b      	movs	r1, #11
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff feee 	bl	80041fc <USER_SPI_ioctl>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d149      	bne.n	80044ba <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004426:	7b3b      	ldrb	r3, [r7, #12]
 8004428:	099b      	lsrs	r3, r3, #6
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d104      	bne.n	800443a <USER_SPI_ioctl+0x23e>
 8004430:	7dbb      	ldrb	r3, [r7, #22]
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d041      	beq.n	80044be <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	623b      	str	r3, [r7, #32]
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800444a:	4b23      	ldr	r3, [pc, #140]	; (80044d8 <USER_SPI_ioctl+0x2dc>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d105      	bne.n	8004462 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	025b      	lsls	r3, r3, #9
 800445a:	62bb      	str	r3, [r7, #40]	; 0x28
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	025b      	lsls	r3, r3, #9
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004464:	2020      	movs	r0, #32
 8004466:	f7ff fc76 	bl	8003d56 <send_cmd>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d128      	bne.n	80044c2 <USER_SPI_ioctl+0x2c6>
 8004470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004472:	2021      	movs	r0, #33	; 0x21
 8004474:	f7ff fc6f 	bl	8003d56 <send_cmd>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d121      	bne.n	80044c2 <USER_SPI_ioctl+0x2c6>
 800447e:	2100      	movs	r1, #0
 8004480:	2026      	movs	r0, #38	; 0x26
 8004482:	f7ff fc68 	bl	8003d56 <send_cmd>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d11a      	bne.n	80044c2 <USER_SPI_ioctl+0x2c6>
 800448c:	f247 5030 	movw	r0, #30000	; 0x7530
 8004490:	f7ff fbba 	bl	8003c08 <wait_ready>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d013      	beq.n	80044c2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800449a:	2300      	movs	r3, #0
 800449c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80044a0:	e00f      	b.n	80044c2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80044a2:	2304      	movs	r3, #4
 80044a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80044a8:	e00c      	b.n	80044c4 <USER_SPI_ioctl+0x2c8>
		break;
 80044aa:	bf00      	nop
 80044ac:	e00a      	b.n	80044c4 <USER_SPI_ioctl+0x2c8>
		break;
 80044ae:	bf00      	nop
 80044b0:	e008      	b.n	80044c4 <USER_SPI_ioctl+0x2c8>
		break;
 80044b2:	bf00      	nop
 80044b4:	e006      	b.n	80044c4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80044b6:	bf00      	nop
 80044b8:	e004      	b.n	80044c4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80044ba:	bf00      	nop
 80044bc:	e002      	b.n	80044c4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80044be:	bf00      	nop
 80044c0:	e000      	b.n	80044c4 <USER_SPI_ioctl+0x2c8>
		break;
 80044c2:	bf00      	nop
	}

	despiselect();
 80044c4:	f7ff fbc4 	bl	8003c50 <despiselect>

	return res;
 80044c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3730      	adds	r7, #48	; 0x30
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20000868 	.word	0x20000868
 80044d8:	200196f8 	.word	0x200196f8

080044dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80044dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044e0:	480d      	ldr	r0, [pc, #52]	; (8004518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044e2:	490e      	ldr	r1, [pc, #56]	; (800451c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044e4:	4a0e      	ldr	r2, [pc, #56]	; (8004520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044e8:	e002      	b.n	80044f0 <LoopCopyDataInit>

080044ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044ee:	3304      	adds	r3, #4

080044f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044f4:	d3f9      	bcc.n	80044ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044f6:	4a0b      	ldr	r2, [pc, #44]	; (8004524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044f8:	4c0b      	ldr	r4, [pc, #44]	; (8004528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80044fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044fc:	e001      	b.n	8004502 <LoopFillZerobss>

080044fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004500:	3204      	adds	r2, #4

08004502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004504:	d3fb      	bcc.n	80044fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004506:	f7ff fafd 	bl	8003b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800450a:	f007 fa89 	bl	800ba20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800450e:	f7fd fa9d 	bl	8001a4c <main>
  bx  lr    
 8004512:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800451c:	20000a68 	.word	0x20000a68
  ldr r2, =_sidata
 8004520:	0800fcf4 	.word	0x0800fcf4
  ldr r2, =_sbss
 8004524:	20000a68 	.word	0x20000a68
  ldr r4, =_ebss
 8004528:	20019c98 	.word	0x20019c98

0800452c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800452c:	e7fe      	b.n	800452c <ADC_IRQHandler>

0800452e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800452e:	b480      	push	{r7}
 8004530:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004532:	bf00      	nop
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af04      	add	r7, sp, #16
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004546:	f04f 33ff 	mov.w	r3, #4294967295
 800454a:	9302      	str	r3, [sp, #8]
 800454c:	2301      	movs	r3, #1
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	1dfb      	adds	r3, r7, #7
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	2301      	movs	r3, #1
 8004556:	2200      	movs	r2, #0
 8004558:	2178      	movs	r1, #120	; 0x78
 800455a:	4803      	ldr	r0, [pc, #12]	; (8004568 <ssd1306_WriteCommand+0x2c>)
 800455c:	f001 fdbe 	bl	80060dc <HAL_I2C_Mem_Write>
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000adc 	.word	0x20000adc

0800456c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af04      	add	r7, sp, #16
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f04f 32ff 	mov.w	r2, #4294967295
 800457e:	9202      	str	r2, [sp, #8]
 8004580:	9301      	str	r3, [sp, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	2301      	movs	r3, #1
 8004588:	2240      	movs	r2, #64	; 0x40
 800458a:	2178      	movs	r1, #120	; 0x78
 800458c:	4803      	ldr	r0, [pc, #12]	; (800459c <ssd1306_WriteData+0x30>)
 800458e:	f001 fda5 	bl	80060dc <HAL_I2C_Mem_Write>
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000adc 	.word	0x20000adc

080045a0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80045a4:	f7ff ffc3 	bl	800452e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80045a8:	2064      	movs	r0, #100	; 0x64
 80045aa:	f000 fa6d 	bl	8004a88 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80045ae:	2000      	movs	r0, #0
 80045b0:	f000 f9da 	bl	8004968 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80045b4:	2020      	movs	r0, #32
 80045b6:	f7ff ffc1 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80045ba:	2000      	movs	r0, #0
 80045bc:	f7ff ffbe 	bl	800453c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80045c0:	20b0      	movs	r0, #176	; 0xb0
 80045c2:	f7ff ffbb 	bl	800453c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80045c6:	20c8      	movs	r0, #200	; 0xc8
 80045c8:	f7ff ffb8 	bl	800453c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80045cc:	2000      	movs	r0, #0
 80045ce:	f7ff ffb5 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80045d2:	2010      	movs	r0, #16
 80045d4:	f7ff ffb2 	bl	800453c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80045d8:	2040      	movs	r0, #64	; 0x40
 80045da:	f7ff ffaf 	bl	800453c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80045de:	20ff      	movs	r0, #255	; 0xff
 80045e0:	f000 f9ae 	bl	8004940 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80045e4:	20a1      	movs	r0, #161	; 0xa1
 80045e6:	f7ff ffa9 	bl	800453c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80045ea:	20a6      	movs	r0, #166	; 0xa6
 80045ec:	f7ff ffa6 	bl	800453c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80045f0:	20a8      	movs	r0, #168	; 0xa8
 80045f2:	f7ff ffa3 	bl	800453c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80045f6:	203f      	movs	r0, #63	; 0x3f
 80045f8:	f7ff ffa0 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80045fc:	20a4      	movs	r0, #164	; 0xa4
 80045fe:	f7ff ff9d 	bl	800453c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004602:	20d3      	movs	r0, #211	; 0xd3
 8004604:	f7ff ff9a 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004608:	2000      	movs	r0, #0
 800460a:	f7ff ff97 	bl	800453c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800460e:	20d5      	movs	r0, #213	; 0xd5
 8004610:	f7ff ff94 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004614:	20f0      	movs	r0, #240	; 0xf0
 8004616:	f7ff ff91 	bl	800453c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800461a:	20d9      	movs	r0, #217	; 0xd9
 800461c:	f7ff ff8e 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004620:	2022      	movs	r0, #34	; 0x22
 8004622:	f7ff ff8b 	bl	800453c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004626:	20da      	movs	r0, #218	; 0xda
 8004628:	f7ff ff88 	bl	800453c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800462c:	2012      	movs	r0, #18
 800462e:	f7ff ff85 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004632:	20db      	movs	r0, #219	; 0xdb
 8004634:	f7ff ff82 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004638:	2020      	movs	r0, #32
 800463a:	f7ff ff7f 	bl	800453c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800463e:	208d      	movs	r0, #141	; 0x8d
 8004640:	f7ff ff7c 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004644:	2014      	movs	r0, #20
 8004646:	f7ff ff79 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800464a:	2001      	movs	r0, #1
 800464c:	f000 f98c 	bl	8004968 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004650:	2000      	movs	r0, #0
 8004652:	f000 f80f 	bl	8004674 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004656:	f000 f831 	bl	80046bc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800465a:	4b05      	ldr	r3, [pc, #20]	; (8004670 <ssd1306_Init+0xd0>)
 800465c:	2200      	movs	r2, #0
 800465e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004660:	4b03      	ldr	r3, [pc, #12]	; (8004670 <ssd1306_Init+0xd0>)
 8004662:	2200      	movs	r2, #0
 8004664:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004666:	4b02      	ldr	r3, [pc, #8]	; (8004670 <ssd1306_Init+0xd0>)
 8004668:	2201      	movs	r2, #1
 800466a:	711a      	strb	r2, [r3, #4]
}
 800466c:	bf00      	nop
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20019b04 	.word	0x20019b04

08004674 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	e00d      	b.n	80046a0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <ssd1306_Fill+0x1a>
 800468a:	2100      	movs	r1, #0
 800468c:	e000      	b.n	8004690 <ssd1306_Fill+0x1c>
 800468e:	21ff      	movs	r1, #255	; 0xff
 8004690:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <ssd1306_Fill+0x44>)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	460a      	mov	r2, r1
 8004698:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3301      	adds	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a6:	d3ed      	bcc.n	8004684 <ssd1306_Fill+0x10>
    }
}
 80046a8:	bf00      	nop
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20019704 	.word	0x20019704

080046bc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80046c2:	2300      	movs	r3, #0
 80046c4:	71fb      	strb	r3, [r7, #7]
 80046c6:	e016      	b.n	80046f6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	3b50      	subs	r3, #80	; 0x50
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff ff34 	bl	800453c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80046d4:	2000      	movs	r0, #0
 80046d6:	f7ff ff31 	bl	800453c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80046da:	2010      	movs	r0, #16
 80046dc:	f7ff ff2e 	bl	800453c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	01db      	lsls	r3, r3, #7
 80046e4:	4a08      	ldr	r2, [pc, #32]	; (8004708 <ssd1306_UpdateScreen+0x4c>)
 80046e6:	4413      	add	r3, r2
 80046e8:	2180      	movs	r1, #128	; 0x80
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff ff3e 	bl	800456c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	3301      	adds	r3, #1
 80046f4:	71fb      	strb	r3, [r7, #7]
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	2b07      	cmp	r3, #7
 80046fa:	d9e5      	bls.n	80046c8 <ssd1306_UpdateScreen+0xc>
    }
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20019704 	.word	0x20019704

0800470c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	71fb      	strb	r3, [r7, #7]
 8004716:	460b      	mov	r3, r1
 8004718:	71bb      	strb	r3, [r7, #6]
 800471a:	4613      	mov	r3, r2
 800471c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800471e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004722:	2b00      	cmp	r3, #0
 8004724:	db3d      	blt.n	80047a2 <ssd1306_DrawPixel+0x96>
 8004726:	79bb      	ldrb	r3, [r7, #6]
 8004728:	2b3f      	cmp	r3, #63	; 0x3f
 800472a:	d83a      	bhi.n	80047a2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800472c:	797b      	ldrb	r3, [r7, #5]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d11a      	bne.n	8004768 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004732:	79fa      	ldrb	r2, [r7, #7]
 8004734:	79bb      	ldrb	r3, [r7, #6]
 8004736:	08db      	lsrs	r3, r3, #3
 8004738:	b2d8      	uxtb	r0, r3
 800473a:	4603      	mov	r3, r0
 800473c:	01db      	lsls	r3, r3, #7
 800473e:	4413      	add	r3, r2
 8004740:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <ssd1306_DrawPixel+0xa4>)
 8004742:	5cd3      	ldrb	r3, [r2, r3]
 8004744:	b25a      	sxtb	r2, r3
 8004746:	79bb      	ldrb	r3, [r7, #6]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	2101      	movs	r1, #1
 800474e:	fa01 f303 	lsl.w	r3, r1, r3
 8004752:	b25b      	sxtb	r3, r3
 8004754:	4313      	orrs	r3, r2
 8004756:	b259      	sxtb	r1, r3
 8004758:	79fa      	ldrb	r2, [r7, #7]
 800475a:	4603      	mov	r3, r0
 800475c:	01db      	lsls	r3, r3, #7
 800475e:	4413      	add	r3, r2
 8004760:	b2c9      	uxtb	r1, r1
 8004762:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <ssd1306_DrawPixel+0xa4>)
 8004764:	54d1      	strb	r1, [r2, r3]
 8004766:	e01d      	b.n	80047a4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004768:	79fa      	ldrb	r2, [r7, #7]
 800476a:	79bb      	ldrb	r3, [r7, #6]
 800476c:	08db      	lsrs	r3, r3, #3
 800476e:	b2d8      	uxtb	r0, r3
 8004770:	4603      	mov	r3, r0
 8004772:	01db      	lsls	r3, r3, #7
 8004774:	4413      	add	r3, r2
 8004776:	4a0e      	ldr	r2, [pc, #56]	; (80047b0 <ssd1306_DrawPixel+0xa4>)
 8004778:	5cd3      	ldrb	r3, [r2, r3]
 800477a:	b25a      	sxtb	r2, r3
 800477c:	79bb      	ldrb	r3, [r7, #6]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	2101      	movs	r1, #1
 8004784:	fa01 f303 	lsl.w	r3, r1, r3
 8004788:	b25b      	sxtb	r3, r3
 800478a:	43db      	mvns	r3, r3
 800478c:	b25b      	sxtb	r3, r3
 800478e:	4013      	ands	r3, r2
 8004790:	b259      	sxtb	r1, r3
 8004792:	79fa      	ldrb	r2, [r7, #7]
 8004794:	4603      	mov	r3, r0
 8004796:	01db      	lsls	r3, r3, #7
 8004798:	4413      	add	r3, r2
 800479a:	b2c9      	uxtb	r1, r1
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <ssd1306_DrawPixel+0xa4>)
 800479e:	54d1      	strb	r1, [r2, r3]
 80047a0:	e000      	b.n	80047a4 <ssd1306_DrawPixel+0x98>
        return;
 80047a2:	bf00      	nop
    }
}
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20019704 	.word	0x20019704

080047b4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80047b4:	b590      	push	{r4, r7, lr}
 80047b6:	b089      	sub	sp, #36	; 0x24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4604      	mov	r4, r0
 80047bc:	1d38      	adds	r0, r7, #4
 80047be:	e880 0006 	stmia.w	r0, {r1, r2}
 80047c2:	461a      	mov	r2, r3
 80047c4:	4623      	mov	r3, r4
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	4613      	mov	r3, r2
 80047ca:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	2b1f      	cmp	r3, #31
 80047d0:	d902      	bls.n	80047d8 <ssd1306_WriteChar+0x24>
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	2b7e      	cmp	r3, #126	; 0x7e
 80047d6:	d901      	bls.n	80047dc <ssd1306_WriteChar+0x28>
        return 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	e06d      	b.n	80048b8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80047dc:	4b38      	ldr	r3, [pc, #224]	; (80048c0 <ssd1306_WriteChar+0x10c>)
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	793b      	ldrb	r3, [r7, #4]
 80047e4:	4413      	add	r3, r2
 80047e6:	2b80      	cmp	r3, #128	; 0x80
 80047e8:	dc06      	bgt.n	80047f8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80047ea:	4b35      	ldr	r3, [pc, #212]	; (80048c0 <ssd1306_WriteChar+0x10c>)
 80047ec:	885b      	ldrh	r3, [r3, #2]
 80047ee:	461a      	mov	r2, r3
 80047f0:	797b      	ldrb	r3, [r7, #5]
 80047f2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80047f4:	2b40      	cmp	r3, #64	; 0x40
 80047f6:	dd01      	ble.n	80047fc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e05d      	b.n	80048b8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80047fc:	2300      	movs	r3, #0
 80047fe:	61fb      	str	r3, [r7, #28]
 8004800:	e04c      	b.n	800489c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	3b20      	subs	r3, #32
 8004808:	7979      	ldrb	r1, [r7, #5]
 800480a:	fb01 f303 	mul.w	r3, r1, r3
 800480e:	4619      	mov	r1, r3
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	440b      	add	r3, r1
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	4413      	add	r3, r2
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800481c:	2300      	movs	r3, #0
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	e034      	b.n	800488c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d012      	beq.n	8004858 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004832:	4b23      	ldr	r3, [pc, #140]	; (80048c0 <ssd1306_WriteChar+0x10c>)
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b2da      	uxtb	r2, r3
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	b2db      	uxtb	r3, r3
 800483c:	4413      	add	r3, r2
 800483e:	b2d8      	uxtb	r0, r3
 8004840:	4b1f      	ldr	r3, [pc, #124]	; (80048c0 <ssd1306_WriteChar+0x10c>)
 8004842:	885b      	ldrh	r3, [r3, #2]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	4413      	add	r3, r2
 800484c:	b2db      	uxtb	r3, r3
 800484e:	7bba      	ldrb	r2, [r7, #14]
 8004850:	4619      	mov	r1, r3
 8004852:	f7ff ff5b 	bl	800470c <ssd1306_DrawPixel>
 8004856:	e016      	b.n	8004886 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004858:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <ssd1306_WriteChar+0x10c>)
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	b2da      	uxtb	r2, r3
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	4413      	add	r3, r2
 8004864:	b2d8      	uxtb	r0, r3
 8004866:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <ssd1306_WriteChar+0x10c>)
 8004868:	885b      	ldrh	r3, [r3, #2]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	4413      	add	r3, r2
 8004872:	b2d9      	uxtb	r1, r3
 8004874:	7bbb      	ldrb	r3, [r7, #14]
 8004876:	2b00      	cmp	r3, #0
 8004878:	bf0c      	ite	eq
 800487a:	2301      	moveq	r3, #1
 800487c:	2300      	movne	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	f7ff ff43 	bl	800470c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	3301      	adds	r3, #1
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	793b      	ldrb	r3, [r7, #4]
 800488e:	461a      	mov	r2, r3
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	4293      	cmp	r3, r2
 8004894:	d3c5      	bcc.n	8004822 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3301      	adds	r3, #1
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	797b      	ldrb	r3, [r7, #5]
 800489e:	461a      	mov	r2, r3
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d3ad      	bcc.n	8004802 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <ssd1306_WriteChar+0x10c>)
 80048a8:	881a      	ldrh	r2, [r3, #0]
 80048aa:	793b      	ldrb	r3, [r7, #4]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	4413      	add	r3, r2
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <ssd1306_WriteChar+0x10c>)
 80048b4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3724      	adds	r7, #36	; 0x24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd90      	pop	{r4, r7, pc}
 80048c0:	20019b04 	.word	0x20019b04

080048c4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	1d38      	adds	r0, r7, #4
 80048ce:	e880 0006 	stmia.w	r0, {r1, r2}
 80048d2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80048d4:	e012      	b.n	80048fc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	7818      	ldrb	r0, [r3, #0]
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	1d3a      	adds	r2, r7, #4
 80048de:	ca06      	ldmia	r2, {r1, r2}
 80048e0:	f7ff ff68 	bl	80047b4 <ssd1306_WriteChar>
 80048e4:	4603      	mov	r3, r0
 80048e6:	461a      	mov	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d002      	beq.n	80048f6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	e008      	b.n	8004908 <ssd1306_WriteString+0x44>
        }
        str++;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3301      	adds	r3, #1
 80048fa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e8      	bne.n	80048d6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	781b      	ldrb	r3, [r3, #0]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	460a      	mov	r2, r1
 800491a:	71fb      	strb	r3, [r7, #7]
 800491c:	4613      	mov	r3, r2
 800491e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	b29a      	uxth	r2, r3
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <ssd1306_SetCursor+0x2c>)
 8004926:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004928:	79bb      	ldrb	r3, [r7, #6]
 800492a:	b29a      	uxth	r2, r3
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <ssd1306_SetCursor+0x2c>)
 800492e:	805a      	strh	r2, [r3, #2]
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	20019b04 	.word	0x20019b04

08004940 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800494a:	2381      	movs	r3, #129	; 0x81
 800494c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fdf3 	bl	800453c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff fdef 	bl	800453c <ssd1306_WriteCommand>
}
 800495e:	bf00      	nop
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004978:	23af      	movs	r3, #175	; 0xaf
 800497a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800497c:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <ssd1306_SetDisplayOn+0x38>)
 800497e:	2201      	movs	r2, #1
 8004980:	715a      	strb	r2, [r3, #5]
 8004982:	e004      	b.n	800498e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004984:	23ae      	movs	r3, #174	; 0xae
 8004986:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <ssd1306_SetDisplayOn+0x38>)
 800498a:	2200      	movs	r2, #0
 800498c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff fdd3 	bl	800453c <ssd1306_WriteCommand>
}
 8004996:	bf00      	nop
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20019b04 	.word	0x20019b04

080049a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049a8:	4b0e      	ldr	r3, [pc, #56]	; (80049e4 <HAL_Init+0x40>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a0d      	ldr	r2, [pc, #52]	; (80049e4 <HAL_Init+0x40>)
 80049ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_Init+0x40>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a0a      	ldr	r2, [pc, #40]	; (80049e4 <HAL_Init+0x40>)
 80049ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049c0:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <HAL_Init+0x40>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a07      	ldr	r2, [pc, #28]	; (80049e4 <HAL_Init+0x40>)
 80049c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049cc:	2003      	movs	r0, #3
 80049ce:	f000 fd0d 	bl	80053ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049d2:	200f      	movs	r0, #15
 80049d4:	f000 f808 	bl	80049e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049d8:	f7fe fcbe 	bl	8003358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40023c00 	.word	0x40023c00

080049e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049f0:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <HAL_InitTick+0x54>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <HAL_InitTick+0x58>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	4619      	mov	r1, r3
 80049fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fd25 	bl	8005456 <HAL_SYSTICK_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e00e      	b.n	8004a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b0f      	cmp	r3, #15
 8004a1a:	d80a      	bhi.n	8004a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	f04f 30ff 	mov.w	r0, #4294967295
 8004a24:	f000 fced 	bl	8005402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a28:	4a06      	ldr	r2, [pc, #24]	; (8004a44 <HAL_InitTick+0x5c>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e000      	b.n	8004a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20000864 	.word	0x20000864
 8004a40:	20000888 	.word	0x20000888
 8004a44:	20000884 	.word	0x20000884

08004a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <HAL_IncTick+0x20>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <HAL_IncTick+0x24>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4413      	add	r3, r2
 8004a58:	4a04      	ldr	r2, [pc, #16]	; (8004a6c <HAL_IncTick+0x24>)
 8004a5a:	6013      	str	r3, [r2, #0]
}
 8004a5c:	bf00      	nop
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	20000888 	.word	0x20000888
 8004a6c:	20019b0c 	.word	0x20019b0c

08004a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  return uwTick;
 8004a74:	4b03      	ldr	r3, [pc, #12]	; (8004a84 <HAL_GetTick+0x14>)
 8004a76:	681b      	ldr	r3, [r3, #0]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	20019b0c 	.word	0x20019b0c

08004a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a90:	f7ff ffee 	bl	8004a70 <HAL_GetTick>
 8004a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d005      	beq.n	8004aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <HAL_Delay+0x44>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004aae:	bf00      	nop
 8004ab0:	f7ff ffde 	bl	8004a70 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d8f7      	bhi.n	8004ab0 <HAL_Delay+0x28>
  {
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000888 	.word	0x20000888

08004ad0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e033      	b.n	8004b4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fe fc5a 	bl	80033a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d118      	bne.n	8004b40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b16:	f023 0302 	bic.w	r3, r3, #2
 8004b1a:	f043 0202 	orr.w	r2, r3, #2
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fa96 	bl	8005054 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	f023 0303 	bic.w	r3, r3, #3
 8004b36:	f043 0201 	orr.w	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40
 8004b3e:	e001      	b.n	8004b44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d101      	bne.n	8004b72 <HAL_ADC_Start+0x1a>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e097      	b.n	8004ca2 <HAL_ADC_Start+0x14a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d018      	beq.n	8004bba <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b98:	4b45      	ldr	r3, [pc, #276]	; (8004cb0 <HAL_ADC_Start+0x158>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a45      	ldr	r2, [pc, #276]	; (8004cb4 <HAL_ADC_Start+0x15c>)
 8004b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba2:	0c9a      	lsrs	r2, r3, #18
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	4413      	add	r3, r2
 8004baa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004bac:	e002      	b.n	8004bb4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f9      	bne.n	8004bae <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d15f      	bne.n	8004c88 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004bd0:	f023 0301 	bic.w	r3, r3, #1
 8004bd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d007      	beq.n	8004bfa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bf2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c06:	d106      	bne.n	8004c16 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0c:	f023 0206 	bic.w	r2, r3, #6
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	645a      	str	r2, [r3, #68]	; 0x44
 8004c14:	e002      	b.n	8004c1c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c24:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <HAL_ADC_Start+0x160>)
 8004c26:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004c30:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10f      	bne.n	8004c5e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d129      	bne.n	8004ca0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	e020      	b.n	8004ca0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <HAL_ADC_Start+0x164>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d11b      	bne.n	8004ca0 <HAL_ADC_Start+0x148>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d114      	bne.n	8004ca0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c84:	609a      	str	r2, [r3, #8]
 8004c86:	e00b      	b.n	8004ca0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	f043 0210 	orr.w	r2, r3, #16
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	f043 0201 	orr.w	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000864 	.word	0x20000864
 8004cb4:	431bde83 	.word	0x431bde83
 8004cb8:	40012300 	.word	0x40012300
 8004cbc:	40012000 	.word	0x40012000

08004cc0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cdc:	d113      	bne.n	8004d06 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cec:	d10b      	bne.n	8004d06 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e063      	b.n	8004dce <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004d06:	f7ff feb3 	bl	8004a70 <HAL_GetTick>
 8004d0a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004d0c:	e021      	b.n	8004d52 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d01d      	beq.n	8004d52 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <HAL_ADC_PollForConversion+0x6c>
 8004d1c:	f7ff fea8 	bl	8004a70 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d212      	bcs.n	8004d52 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d00b      	beq.n	8004d52 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f043 0204 	orr.w	r2, r3, #4
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e03d      	b.n	8004dce <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d1d6      	bne.n	8004d0e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0212 	mvn.w	r2, #18
 8004d68:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d123      	bne.n	8004dcc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d11f      	bne.n	8004dcc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d006      	beq.n	8004da8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d111      	bne.n	8004dcc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d105      	bne.n	8004dcc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	f043 0201 	orr.w	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_ADC_ConfigChannel+0x1c>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e113      	b.n	8005034 <HAL_ADC_ConfigChannel+0x244>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b09      	cmp	r3, #9
 8004e1a:	d925      	bls.n	8004e68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68d9      	ldr	r1, [r3, #12]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	4413      	add	r3, r2
 8004e30:	3b1e      	subs	r3, #30
 8004e32:	2207      	movs	r2, #7
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43da      	mvns	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	400a      	ands	r2, r1
 8004e40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68d9      	ldr	r1, [r3, #12]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	4618      	mov	r0, r3
 8004e54:	4603      	mov	r3, r0
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	4403      	add	r3, r0
 8004e5a:	3b1e      	subs	r3, #30
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	60da      	str	r2, [r3, #12]
 8004e66:	e022      	b.n	8004eae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6919      	ldr	r1, [r3, #16]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	4613      	mov	r3, r2
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	4413      	add	r3, r2
 8004e7c:	2207      	movs	r2, #7
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43da      	mvns	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	400a      	ands	r2, r1
 8004e8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6919      	ldr	r1, [r3, #16]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	4403      	add	r3, r0
 8004ea4:	409a      	lsls	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b06      	cmp	r3, #6
 8004eb4:	d824      	bhi.n	8004f00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	3b05      	subs	r3, #5
 8004ec8:	221f      	movs	r2, #31
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43da      	mvns	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	400a      	ands	r2, r1
 8004ed6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	3b05      	subs	r3, #5
 8004ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	635a      	str	r2, [r3, #52]	; 0x34
 8004efe:	e04c      	b.n	8004f9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b0c      	cmp	r3, #12
 8004f06:	d824      	bhi.n	8004f52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	3b23      	subs	r3, #35	; 0x23
 8004f1a:	221f      	movs	r2, #31
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43da      	mvns	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	400a      	ands	r2, r1
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	4618      	mov	r0, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	3b23      	subs	r3, #35	; 0x23
 8004f44:	fa00 f203 	lsl.w	r2, r0, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8004f50:	e023      	b.n	8004f9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	3b41      	subs	r3, #65	; 0x41
 8004f64:	221f      	movs	r2, #31
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	43da      	mvns	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	400a      	ands	r2, r1
 8004f72:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	4618      	mov	r0, r3
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3b41      	subs	r3, #65	; 0x41
 8004f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f9a:	4b29      	ldr	r3, [pc, #164]	; (8005040 <HAL_ADC_ConfigChannel+0x250>)
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a28      	ldr	r2, [pc, #160]	; (8005044 <HAL_ADC_ConfigChannel+0x254>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d10f      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x1d8>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b12      	cmp	r3, #18
 8004fae:	d10b      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <HAL_ADC_ConfigChannel+0x254>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d12b      	bne.n	800502a <HAL_ADC_ConfigChannel+0x23a>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <HAL_ADC_ConfigChannel+0x258>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d003      	beq.n	8004fe4 <HAL_ADC_ConfigChannel+0x1f4>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b11      	cmp	r3, #17
 8004fe2:	d122      	bne.n	800502a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a11      	ldr	r2, [pc, #68]	; (8005048 <HAL_ADC_ConfigChannel+0x258>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d111      	bne.n	800502a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005006:	4b11      	ldr	r3, [pc, #68]	; (800504c <HAL_ADC_ConfigChannel+0x25c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a11      	ldr	r2, [pc, #68]	; (8005050 <HAL_ADC_ConfigChannel+0x260>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	0c9a      	lsrs	r2, r3, #18
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800501c:	e002      	b.n	8005024 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	3b01      	subs	r3, #1
 8005022:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f9      	bne.n	800501e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	40012300 	.word	0x40012300
 8005044:	40012000 	.word	0x40012000
 8005048:	10000012 	.word	0x10000012
 800504c:	20000864 	.word	0x20000864
 8005050:	431bde83 	.word	0x431bde83

08005054 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800505c:	4b79      	ldr	r3, [pc, #484]	; (8005244 <ADC_Init+0x1f0>)
 800505e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	431a      	orrs	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005088:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6859      	ldr	r1, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	021a      	lsls	r2, r3, #8
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80050ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6859      	ldr	r1, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6899      	ldr	r1, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	4a58      	ldr	r2, [pc, #352]	; (8005248 <ADC_Init+0x1f4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d022      	beq.n	8005132 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6899      	ldr	r1, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800511c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6899      	ldr	r1, [r3, #8]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	e00f      	b.n	8005152 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005140:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005150:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0202 	bic.w	r2, r2, #2
 8005160:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6899      	ldr	r1, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	7e1b      	ldrb	r3, [r3, #24]
 800516c:	005a      	lsls	r2, r3, #1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01b      	beq.n	80051b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800518e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800519e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6859      	ldr	r1, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	3b01      	subs	r3, #1
 80051ac:	035a      	lsls	r2, r3, #13
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
 80051b6:	e007      	b.n	80051c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80051d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	051a      	lsls	r2, r3, #20
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80051fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6899      	ldr	r1, [r3, #8]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800520a:	025a      	lsls	r2, r3, #9
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005222:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6899      	ldr	r1, [r3, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	029a      	lsls	r2, r3, #10
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	609a      	str	r2, [r3, #8]
}
 8005238:	bf00      	nop
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	40012300 	.word	0x40012300
 8005248:	0f000001 	.word	0x0f000001

0800524c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800525c:	4b0c      	ldr	r3, [pc, #48]	; (8005290 <__NVIC_SetPriorityGrouping+0x44>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005268:	4013      	ands	r3, r2
 800526a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800527c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800527e:	4a04      	ldr	r2, [pc, #16]	; (8005290 <__NVIC_SetPriorityGrouping+0x44>)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	60d3      	str	r3, [r2, #12]
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	e000ed00 	.word	0xe000ed00

08005294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005298:	4b04      	ldr	r3, [pc, #16]	; (80052ac <__NVIC_GetPriorityGrouping+0x18>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	0a1b      	lsrs	r3, r3, #8
 800529e:	f003 0307 	and.w	r3, r3, #7
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	e000ed00 	.word	0xe000ed00

080052b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	db0b      	blt.n	80052da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	f003 021f 	and.w	r2, r3, #31
 80052c8:	4907      	ldr	r1, [pc, #28]	; (80052e8 <__NVIC_EnableIRQ+0x38>)
 80052ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	2001      	movs	r0, #1
 80052d2:	fa00 f202 	lsl.w	r2, r0, r2
 80052d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	e000e100 	.word	0xe000e100

080052ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	6039      	str	r1, [r7, #0]
 80052f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	db0a      	blt.n	8005316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	b2da      	uxtb	r2, r3
 8005304:	490c      	ldr	r1, [pc, #48]	; (8005338 <__NVIC_SetPriority+0x4c>)
 8005306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530a:	0112      	lsls	r2, r2, #4
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	440b      	add	r3, r1
 8005310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005314:	e00a      	b.n	800532c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	b2da      	uxtb	r2, r3
 800531a:	4908      	ldr	r1, [pc, #32]	; (800533c <__NVIC_SetPriority+0x50>)
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	3b04      	subs	r3, #4
 8005324:	0112      	lsls	r2, r2, #4
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	440b      	add	r3, r1
 800532a:	761a      	strb	r2, [r3, #24]
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	e000e100 	.word	0xe000e100
 800533c:	e000ed00 	.word	0xe000ed00

08005340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005340:	b480      	push	{r7}
 8005342:	b089      	sub	sp, #36	; 0x24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f1c3 0307 	rsb	r3, r3, #7
 800535a:	2b04      	cmp	r3, #4
 800535c:	bf28      	it	cs
 800535e:	2304      	movcs	r3, #4
 8005360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	3304      	adds	r3, #4
 8005366:	2b06      	cmp	r3, #6
 8005368:	d902      	bls.n	8005370 <NVIC_EncodePriority+0x30>
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	3b03      	subs	r3, #3
 800536e:	e000      	b.n	8005372 <NVIC_EncodePriority+0x32>
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005374:	f04f 32ff 	mov.w	r2, #4294967295
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43da      	mvns	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	401a      	ands	r2, r3
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005388:	f04f 31ff 	mov.w	r1, #4294967295
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	fa01 f303 	lsl.w	r3, r1, r3
 8005392:	43d9      	mvns	r1, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005398:	4313      	orrs	r3, r2
         );
}
 800539a:	4618      	mov	r0, r3
 800539c:	3724      	adds	r7, #36	; 0x24
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053b8:	d301      	bcc.n	80053be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053ba:	2301      	movs	r3, #1
 80053bc:	e00f      	b.n	80053de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053be:	4a0a      	ldr	r2, [pc, #40]	; (80053e8 <SysTick_Config+0x40>)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053c6:	210f      	movs	r1, #15
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295
 80053cc:	f7ff ff8e 	bl	80052ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053d0:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <SysTick_Config+0x40>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053d6:	4b04      	ldr	r3, [pc, #16]	; (80053e8 <SysTick_Config+0x40>)
 80053d8:	2207      	movs	r2, #7
 80053da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	e000e010 	.word	0xe000e010

080053ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff ff29 	bl	800524c <__NVIC_SetPriorityGrouping>
}
 80053fa:	bf00      	nop
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005402:	b580      	push	{r7, lr}
 8005404:	b086      	sub	sp, #24
 8005406:	af00      	add	r7, sp, #0
 8005408:	4603      	mov	r3, r0
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
 800540e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005414:	f7ff ff3e 	bl	8005294 <__NVIC_GetPriorityGrouping>
 8005418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	68b9      	ldr	r1, [r7, #8]
 800541e:	6978      	ldr	r0, [r7, #20]
 8005420:	f7ff ff8e 	bl	8005340 <NVIC_EncodePriority>
 8005424:	4602      	mov	r2, r0
 8005426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800542a:	4611      	mov	r1, r2
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff ff5d 	bl	80052ec <__NVIC_SetPriority>
}
 8005432:	bf00      	nop
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	4603      	mov	r3, r0
 8005442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff ff31 	bl	80052b0 <__NVIC_EnableIRQ>
}
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b082      	sub	sp, #8
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff ffa2 	bl	80053a8 <SysTick_Config>
 8005464:	4603      	mov	r3, r0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005470:	b480      	push	{r7}
 8005472:	b089      	sub	sp, #36	; 0x24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800547e:	2300      	movs	r3, #0
 8005480:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005482:	2300      	movs	r3, #0
 8005484:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
 800548a:	e159      	b.n	8005740 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800548c:	2201      	movs	r2, #1
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4013      	ands	r3, r2
 800549e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	f040 8148 	bne.w	800573a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d005      	beq.n	80054c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d130      	bne.n	8005524 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	2203      	movs	r2, #3
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	43db      	mvns	r3, r3
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	4013      	ands	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054f8:	2201      	movs	r2, #1
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	43db      	mvns	r3, r3
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	4013      	ands	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	f003 0201 	and.w	r2, r3, #1
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4313      	orrs	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f003 0303 	and.w	r3, r3, #3
 800552c:	2b03      	cmp	r3, #3
 800552e:	d017      	beq.n	8005560 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	2203      	movs	r2, #3
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	4013      	ands	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4313      	orrs	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d123      	bne.n	80055b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	08da      	lsrs	r2, r3, #3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3208      	adds	r2, #8
 8005574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005578:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	220f      	movs	r2, #15
 8005584:	fa02 f303 	lsl.w	r3, r2, r3
 8005588:	43db      	mvns	r3, r3
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4013      	ands	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	08da      	lsrs	r2, r3, #3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3208      	adds	r2, #8
 80055ae:	69b9      	ldr	r1, [r7, #24]
 80055b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	2203      	movs	r2, #3
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	43db      	mvns	r3, r3
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	4013      	ands	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f003 0203 	and.w	r2, r3, #3
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4313      	orrs	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 80a2 	beq.w	800573a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	4b57      	ldr	r3, [pc, #348]	; (8005758 <HAL_GPIO_Init+0x2e8>)
 80055fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fe:	4a56      	ldr	r2, [pc, #344]	; (8005758 <HAL_GPIO_Init+0x2e8>)
 8005600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005604:	6453      	str	r3, [r2, #68]	; 0x44
 8005606:	4b54      	ldr	r3, [pc, #336]	; (8005758 <HAL_GPIO_Init+0x2e8>)
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005612:	4a52      	ldr	r2, [pc, #328]	; (800575c <HAL_GPIO_Init+0x2ec>)
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	089b      	lsrs	r3, r3, #2
 8005618:	3302      	adds	r3, #2
 800561a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800561e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	220f      	movs	r2, #15
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	43db      	mvns	r3, r3
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	4013      	ands	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a49      	ldr	r2, [pc, #292]	; (8005760 <HAL_GPIO_Init+0x2f0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d019      	beq.n	8005672 <HAL_GPIO_Init+0x202>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a48      	ldr	r2, [pc, #288]	; (8005764 <HAL_GPIO_Init+0x2f4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <HAL_GPIO_Init+0x1fe>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a47      	ldr	r2, [pc, #284]	; (8005768 <HAL_GPIO_Init+0x2f8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00d      	beq.n	800566a <HAL_GPIO_Init+0x1fa>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a46      	ldr	r2, [pc, #280]	; (800576c <HAL_GPIO_Init+0x2fc>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d007      	beq.n	8005666 <HAL_GPIO_Init+0x1f6>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a45      	ldr	r2, [pc, #276]	; (8005770 <HAL_GPIO_Init+0x300>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d101      	bne.n	8005662 <HAL_GPIO_Init+0x1f2>
 800565e:	2304      	movs	r3, #4
 8005660:	e008      	b.n	8005674 <HAL_GPIO_Init+0x204>
 8005662:	2307      	movs	r3, #7
 8005664:	e006      	b.n	8005674 <HAL_GPIO_Init+0x204>
 8005666:	2303      	movs	r3, #3
 8005668:	e004      	b.n	8005674 <HAL_GPIO_Init+0x204>
 800566a:	2302      	movs	r3, #2
 800566c:	e002      	b.n	8005674 <HAL_GPIO_Init+0x204>
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <HAL_GPIO_Init+0x204>
 8005672:	2300      	movs	r3, #0
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	f002 0203 	and.w	r2, r2, #3
 800567a:	0092      	lsls	r2, r2, #2
 800567c:	4093      	lsls	r3, r2
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	4313      	orrs	r3, r2
 8005682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005684:	4935      	ldr	r1, [pc, #212]	; (800575c <HAL_GPIO_Init+0x2ec>)
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	089b      	lsrs	r3, r3, #2
 800568a:	3302      	adds	r3, #2
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005692:	4b38      	ldr	r3, [pc, #224]	; (8005774 <HAL_GPIO_Init+0x304>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	43db      	mvns	r3, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4013      	ands	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056b6:	4a2f      	ldr	r2, [pc, #188]	; (8005774 <HAL_GPIO_Init+0x304>)
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056bc:	4b2d      	ldr	r3, [pc, #180]	; (8005774 <HAL_GPIO_Init+0x304>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	43db      	mvns	r3, r3
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4013      	ands	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056e0:	4a24      	ldr	r2, [pc, #144]	; (8005774 <HAL_GPIO_Init+0x304>)
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056e6:	4b23      	ldr	r3, [pc, #140]	; (8005774 <HAL_GPIO_Init+0x304>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	43db      	mvns	r3, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4013      	ands	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800570a:	4a1a      	ldr	r2, [pc, #104]	; (8005774 <HAL_GPIO_Init+0x304>)
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005710:	4b18      	ldr	r3, [pc, #96]	; (8005774 <HAL_GPIO_Init+0x304>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	43db      	mvns	r3, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4013      	ands	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005734:	4a0f      	ldr	r2, [pc, #60]	; (8005774 <HAL_GPIO_Init+0x304>)
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3301      	adds	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	2b0f      	cmp	r3, #15
 8005744:	f67f aea2 	bls.w	800548c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005748:	bf00      	nop
 800574a:	bf00      	nop
 800574c:	3724      	adds	r7, #36	; 0x24
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40023800 	.word	0x40023800
 800575c:	40013800 	.word	0x40013800
 8005760:	40020000 	.word	0x40020000
 8005764:	40020400 	.word	0x40020400
 8005768:	40020800 	.word	0x40020800
 800576c:	40020c00 	.word	0x40020c00
 8005770:	40021000 	.word	0x40021000
 8005774:	40013c00 	.word	0x40013c00

08005778 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	887b      	ldrh	r3, [r7, #2]
 800578a:	4013      	ands	r3, r2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005790:	2301      	movs	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]
 8005794:	e001      	b.n	800579a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005796:	2300      	movs	r3, #0
 8005798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800579a:	7bfb      	ldrb	r3, [r7, #15]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	807b      	strh	r3, [r7, #2]
 80057b4:	4613      	mov	r3, r2
 80057b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057b8:	787b      	ldrb	r3, [r7, #1]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057be:	887a      	ldrh	r2, [r7, #2]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057c4:	e003      	b.n	80057ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057c6:	887b      	ldrh	r3, [r7, #2]
 80057c8:	041a      	lsls	r2, r3, #16
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	619a      	str	r2, [r3, #24]
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	4603      	mov	r3, r0
 80057e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057e6:	4b08      	ldr	r3, [pc, #32]	; (8005808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d006      	beq.n	8005800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057f2:	4a05      	ldr	r2, [pc, #20]	; (8005808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057f4:	88fb      	ldrh	r3, [r7, #6]
 80057f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057f8:	88fb      	ldrh	r3, [r7, #6]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fc f89a 	bl	8001934 <HAL_GPIO_EXTI_Callback>
  }
}
 8005800:	bf00      	nop
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40013c00 	.word	0x40013c00

0800580c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e12b      	b.n	8005a76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fd fdfc 	bl	8003430 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2224      	movs	r2, #36	; 0x24
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0201 	bic.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800585e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800586e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005870:	f001 fd22 	bl	80072b8 <HAL_RCC_GetPCLK1Freq>
 8005874:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	4a81      	ldr	r2, [pc, #516]	; (8005a80 <HAL_I2C_Init+0x274>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d807      	bhi.n	8005890 <HAL_I2C_Init+0x84>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4a80      	ldr	r2, [pc, #512]	; (8005a84 <HAL_I2C_Init+0x278>)
 8005884:	4293      	cmp	r3, r2
 8005886:	bf94      	ite	ls
 8005888:	2301      	movls	r3, #1
 800588a:	2300      	movhi	r3, #0
 800588c:	b2db      	uxtb	r3, r3
 800588e:	e006      	b.n	800589e <HAL_I2C_Init+0x92>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4a7d      	ldr	r2, [pc, #500]	; (8005a88 <HAL_I2C_Init+0x27c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	bf94      	ite	ls
 8005898:	2301      	movls	r3, #1
 800589a:	2300      	movhi	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e0e7      	b.n	8005a76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4a78      	ldr	r2, [pc, #480]	; (8005a8c <HAL_I2C_Init+0x280>)
 80058aa:	fba2 2303 	umull	r2, r3, r2, r3
 80058ae:	0c9b      	lsrs	r3, r3, #18
 80058b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4a6a      	ldr	r2, [pc, #424]	; (8005a80 <HAL_I2C_Init+0x274>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d802      	bhi.n	80058e0 <HAL_I2C_Init+0xd4>
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	3301      	adds	r3, #1
 80058de:	e009      	b.n	80058f4 <HAL_I2C_Init+0xe8>
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058e6:	fb02 f303 	mul.w	r3, r2, r3
 80058ea:	4a69      	ldr	r2, [pc, #420]	; (8005a90 <HAL_I2C_Init+0x284>)
 80058ec:	fba2 2303 	umull	r2, r3, r2, r3
 80058f0:	099b      	lsrs	r3, r3, #6
 80058f2:	3301      	adds	r3, #1
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	430b      	orrs	r3, r1
 80058fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005906:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	495c      	ldr	r1, [pc, #368]	; (8005a80 <HAL_I2C_Init+0x274>)
 8005910:	428b      	cmp	r3, r1
 8005912:	d819      	bhi.n	8005948 <HAL_I2C_Init+0x13c>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	1e59      	subs	r1, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005922:	1c59      	adds	r1, r3, #1
 8005924:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005928:	400b      	ands	r3, r1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <HAL_I2C_Init+0x138>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	1e59      	subs	r1, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	fbb1 f3f3 	udiv	r3, r1, r3
 800593c:	3301      	adds	r3, #1
 800593e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005942:	e051      	b.n	80059e8 <HAL_I2C_Init+0x1dc>
 8005944:	2304      	movs	r3, #4
 8005946:	e04f      	b.n	80059e8 <HAL_I2C_Init+0x1dc>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d111      	bne.n	8005974 <HAL_I2C_Init+0x168>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	1e58      	subs	r0, r3, #1
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6859      	ldr	r1, [r3, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	440b      	add	r3, r1
 800595e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005962:	3301      	adds	r3, #1
 8005964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005968:	2b00      	cmp	r3, #0
 800596a:	bf0c      	ite	eq
 800596c:	2301      	moveq	r3, #1
 800596e:	2300      	movne	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	e012      	b.n	800599a <HAL_I2C_Init+0x18e>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	1e58      	subs	r0, r3, #1
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6859      	ldr	r1, [r3, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	0099      	lsls	r1, r3, #2
 8005984:	440b      	add	r3, r1
 8005986:	fbb0 f3f3 	udiv	r3, r0, r3
 800598a:	3301      	adds	r3, #1
 800598c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005990:	2b00      	cmp	r3, #0
 8005992:	bf0c      	ite	eq
 8005994:	2301      	moveq	r3, #1
 8005996:	2300      	movne	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_I2C_Init+0x196>
 800599e:	2301      	movs	r3, #1
 80059a0:	e022      	b.n	80059e8 <HAL_I2C_Init+0x1dc>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10e      	bne.n	80059c8 <HAL_I2C_Init+0x1bc>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1e58      	subs	r0, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6859      	ldr	r1, [r3, #4]
 80059b2:	460b      	mov	r3, r1
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	440b      	add	r3, r1
 80059b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80059bc:	3301      	adds	r3, #1
 80059be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c6:	e00f      	b.n	80059e8 <HAL_I2C_Init+0x1dc>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	1e58      	subs	r0, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6859      	ldr	r1, [r3, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	0099      	lsls	r1, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	fbb0 f3f3 	udiv	r3, r0, r3
 80059de:	3301      	adds	r3, #1
 80059e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	6809      	ldr	r1, [r1, #0]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69da      	ldr	r2, [r3, #28]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6911      	ldr	r1, [r2, #16]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	68d2      	ldr	r2, [r2, #12]
 8005a22:	4311      	orrs	r1, r2
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695a      	ldr	r2, [r3, #20]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	000186a0 	.word	0x000186a0
 8005a84:	001e847f 	.word	0x001e847f
 8005a88:	003d08ff 	.word	0x003d08ff
 8005a8c:	431bde83 	.word	0x431bde83
 8005a90:	10624dd3 	.word	0x10624dd3

08005a94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	607a      	str	r2, [r7, #4]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	817b      	strh	r3, [r7, #10]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005aa8:	f7fe ffe2 	bl	8004a70 <HAL_GetTick>
 8005aac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	f040 80e0 	bne.w	8005c7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	2319      	movs	r3, #25
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	4970      	ldr	r1, [pc, #448]	; (8005c88 <HAL_I2C_Master_Transmit+0x1f4>)
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fde8 	bl	800669c <I2C_WaitOnFlagUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e0d3      	b.n	8005c7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_I2C_Master_Transmit+0x50>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e0cc      	b.n	8005c7e <HAL_I2C_Master_Transmit+0x1ea>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d007      	beq.n	8005b0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0201 	orr.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2221      	movs	r2, #33	; 0x21
 8005b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2210      	movs	r2, #16
 8005b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	893a      	ldrh	r2, [r7, #8]
 8005b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4a50      	ldr	r2, [pc, #320]	; (8005c8c <HAL_I2C_Master_Transmit+0x1f8>)
 8005b4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b4c:	8979      	ldrh	r1, [r7, #10]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	6a3a      	ldr	r2, [r7, #32]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 fbbc 	bl	80062d0 <I2C_MasterRequestWrite>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e08d      	b.n	8005c7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b62:	2300      	movs	r3, #0
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b78:	e066      	b.n	8005c48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	6a39      	ldr	r1, [r7, #32]
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 fe62 	bl	8006848 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00d      	beq.n	8005ba6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d107      	bne.n	8005ba2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e06b      	b.n	8005c7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	781a      	ldrb	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d11b      	bne.n	8005c1c <HAL_I2C_Master_Transmit+0x188>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d017      	beq.n	8005c1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	781a      	ldrb	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	6a39      	ldr	r1, [r7, #32]
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 fe52 	bl	80068ca <I2C_WaitOnBTFFlagUntilTimeout>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00d      	beq.n	8005c48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d107      	bne.n	8005c44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e01a      	b.n	8005c7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d194      	bne.n	8005b7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2220      	movs	r2, #32
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e000      	b.n	8005c7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c7c:	2302      	movs	r3, #2
  }
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	00100002 	.word	0x00100002
 8005c8c:	ffff0000 	.word	0xffff0000

08005c90 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08c      	sub	sp, #48	; 0x30
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	607a      	str	r2, [r7, #4]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	817b      	strh	r3, [r7, #10]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ca4:	f7fe fee4 	bl	8004a70 <HAL_GetTick>
 8005ca8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	f040 820b 	bne.w	80060ce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	2319      	movs	r3, #25
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	497c      	ldr	r1, [pc, #496]	; (8005eb4 <HAL_I2C_Master_Receive+0x224>)
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 fcea 	bl	800669c <I2C_WaitOnFlagUntilTimeout>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e1fe      	b.n	80060d0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_I2C_Master_Receive+0x50>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e1f7      	b.n	80060d0 <HAL_I2C_Master_Receive+0x440>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d007      	beq.n	8005d06 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f042 0201 	orr.w	r2, r2, #1
 8005d04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2222      	movs	r2, #34	; 0x22
 8005d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2210      	movs	r2, #16
 8005d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	893a      	ldrh	r2, [r7, #8]
 8005d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4a5c      	ldr	r2, [pc, #368]	; (8005eb8 <HAL_I2C_Master_Receive+0x228>)
 8005d46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d48:	8979      	ldrh	r1, [r7, #10]
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 fb40 	bl	80063d4 <I2C_MasterRequestRead>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e1b8      	b.n	80060d0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d113      	bne.n	8005d8e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d66:	2300      	movs	r3, #0
 8005d68:	623b      	str	r3, [r7, #32]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	623b      	str	r3, [r7, #32]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	623b      	str	r3, [r7, #32]
 8005d7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	e18c      	b.n	80060a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d11b      	bne.n	8005dce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005da4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	61fb      	str	r3, [r7, #28]
 8005dba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e16c      	b.n	80060a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d11b      	bne.n	8005e0e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005df4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df6:	2300      	movs	r3, #0
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	61bb      	str	r3, [r7, #24]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	e14c      	b.n	80060a8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	617b      	str	r3, [r7, #20]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	617b      	str	r3, [r7, #20]
 8005e32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e34:	e138      	b.n	80060a8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	f200 80f1 	bhi.w	8006022 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d123      	bne.n	8005e90 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 fd7d 	bl	800694c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e139      	b.n	80060d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e8e:	e10b      	b.n	80060a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d14e      	bne.n	8005f36 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	4906      	ldr	r1, [pc, #24]	; (8005ebc <HAL_I2C_Master_Receive+0x22c>)
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f000 fbfa 	bl	800669c <I2C_WaitOnFlagUntilTimeout>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d008      	beq.n	8005ec0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e10e      	b.n	80060d0 <HAL_I2C_Master_Receive+0x440>
 8005eb2:	bf00      	nop
 8005eb4:	00100002 	.word	0x00100002
 8005eb8:	ffff0000 	.word	0xffff0000
 8005ebc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ece:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f34:	e0b8      	b.n	80060a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	4966      	ldr	r1, [pc, #408]	; (80060d8 <HAL_I2C_Master_Receive+0x448>)
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 fbab 	bl	800669c <I2C_WaitOnFlagUntilTimeout>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e0bf      	b.n	80060d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691a      	ldr	r2, [r3, #16]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	2200      	movs	r2, #0
 8005f9a:	494f      	ldr	r1, [pc, #316]	; (80060d8 <HAL_I2C_Master_Receive+0x448>)
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 fb7d 	bl	800669c <I2C_WaitOnFlagUntilTimeout>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e091      	b.n	80060d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600a:	3b01      	subs	r3, #1
 800600c:	b29a      	uxth	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006020:	e042      	b.n	80060a8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006024:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 fc90 	bl	800694c <I2C_WaitOnRXNEFlagUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e04c      	b.n	80060d0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b04      	cmp	r3, #4
 8006074:	d118      	bne.n	80060a8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f47f aec2 	bne.w	8005e36 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	e000      	b.n	80060d0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80060ce:	2302      	movs	r3, #2
  }
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3728      	adds	r7, #40	; 0x28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	00010004 	.word	0x00010004

080060dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af02      	add	r7, sp, #8
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	4608      	mov	r0, r1
 80060e6:	4611      	mov	r1, r2
 80060e8:	461a      	mov	r2, r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	817b      	strh	r3, [r7, #10]
 80060ee:	460b      	mov	r3, r1
 80060f0:	813b      	strh	r3, [r7, #8]
 80060f2:	4613      	mov	r3, r2
 80060f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060f6:	f7fe fcbb 	bl	8004a70 <HAL_GetTick>
 80060fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b20      	cmp	r3, #32
 8006106:	f040 80d9 	bne.w	80062bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	2319      	movs	r3, #25
 8006110:	2201      	movs	r2, #1
 8006112:	496d      	ldr	r1, [pc, #436]	; (80062c8 <HAL_I2C_Mem_Write+0x1ec>)
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 fac1 	bl	800669c <I2C_WaitOnFlagUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006120:	2302      	movs	r3, #2
 8006122:	e0cc      	b.n	80062be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_I2C_Mem_Write+0x56>
 800612e:	2302      	movs	r3, #2
 8006130:	e0c5      	b.n	80062be <HAL_I2C_Mem_Write+0x1e2>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b01      	cmp	r3, #1
 8006146:	d007      	beq.n	8006158 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006166:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2221      	movs	r2, #33	; 0x21
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2240      	movs	r2, #64	; 0x40
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a3a      	ldr	r2, [r7, #32]
 8006182:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006188:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4a4d      	ldr	r2, [pc, #308]	; (80062cc <HAL_I2C_Mem_Write+0x1f0>)
 8006198:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800619a:	88f8      	ldrh	r0, [r7, #6]
 800619c:	893a      	ldrh	r2, [r7, #8]
 800619e:	8979      	ldrh	r1, [r7, #10]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	9301      	str	r3, [sp, #4]
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	4603      	mov	r3, r0
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 f9e0 	bl	8006570 <I2C_RequestMemoryWrite>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d052      	beq.n	800625c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e081      	b.n	80062be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 fb42 	bl	8006848 <I2C_WaitOnTXEFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00d      	beq.n	80061e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d107      	bne.n	80061e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e06b      	b.n	80062be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	781a      	ldrb	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006200:	3b01      	subs	r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620c:	b29b      	uxth	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b04      	cmp	r3, #4
 8006222:	d11b      	bne.n	800625c <HAL_I2C_Mem_Write+0x180>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006228:	2b00      	cmp	r3, #0
 800622a:	d017      	beq.n	800625c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	781a      	ldrb	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1aa      	bne.n	80061ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 fb2e 	bl	80068ca <I2C_WaitOnBTFFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00d      	beq.n	8006290 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	2b04      	cmp	r3, #4
 800627a:	d107      	bne.n	800628c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800628a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e016      	b.n	80062be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e000      	b.n	80062be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80062bc:	2302      	movs	r3, #2
  }
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	00100002 	.word	0x00100002
 80062cc:	ffff0000 	.word	0xffff0000

080062d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	607a      	str	r2, [r7, #4]
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	460b      	mov	r3, r1
 80062de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d006      	beq.n	80062fa <I2C_MasterRequestWrite+0x2a>
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d003      	beq.n	80062fa <I2C_MasterRequestWrite+0x2a>
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062f8:	d108      	bne.n	800630c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	e00b      	b.n	8006324 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006310:	2b12      	cmp	r3, #18
 8006312:	d107      	bne.n	8006324 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006322:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 f9b3 	bl	800669c <I2C_WaitOnFlagUntilTimeout>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00d      	beq.n	8006358 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800634a:	d103      	bne.n	8006354 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006352:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e035      	b.n	80063c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006360:	d108      	bne.n	8006374 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006362:	897b      	ldrh	r3, [r7, #10]
 8006364:	b2db      	uxtb	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006370:	611a      	str	r2, [r3, #16]
 8006372:	e01b      	b.n	80063ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006374:	897b      	ldrh	r3, [r7, #10]
 8006376:	11db      	asrs	r3, r3, #7
 8006378:	b2db      	uxtb	r3, r3
 800637a:	f003 0306 	and.w	r3, r3, #6
 800637e:	b2db      	uxtb	r3, r3
 8006380:	f063 030f 	orn	r3, r3, #15
 8006384:	b2da      	uxtb	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	490e      	ldr	r1, [pc, #56]	; (80063cc <I2C_MasterRequestWrite+0xfc>)
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f9d9 	bl	800674a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e010      	b.n	80063c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80063a2:	897b      	ldrh	r3, [r7, #10]
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	4907      	ldr	r1, [pc, #28]	; (80063d0 <I2C_MasterRequestWrite+0x100>)
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 f9c9 	bl	800674a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e000      	b.n	80063c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	00010008 	.word	0x00010008
 80063d0:	00010002 	.word	0x00010002

080063d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af02      	add	r7, sp, #8
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	607a      	str	r2, [r7, #4]
 80063de:	603b      	str	r3, [r7, #0]
 80063e0:	460b      	mov	r3, r1
 80063e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d006      	beq.n	800640e <I2C_MasterRequestRead+0x3a>
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d003      	beq.n	800640e <I2C_MasterRequestRead+0x3a>
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800640c:	d108      	bne.n	8006420 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	e00b      	b.n	8006438 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	2b11      	cmp	r3, #17
 8006426:	d107      	bne.n	8006438 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006436:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f929 	bl	800669c <I2C_WaitOnFlagUntilTimeout>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00d      	beq.n	800646c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800645e:	d103      	bne.n	8006468 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006466:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e079      	b.n	8006560 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006474:	d108      	bne.n	8006488 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006476:	897b      	ldrh	r3, [r7, #10]
 8006478:	b2db      	uxtb	r3, r3
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	b2da      	uxtb	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	611a      	str	r2, [r3, #16]
 8006486:	e05f      	b.n	8006548 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006488:	897b      	ldrh	r3, [r7, #10]
 800648a:	11db      	asrs	r3, r3, #7
 800648c:	b2db      	uxtb	r3, r3
 800648e:	f003 0306 	and.w	r3, r3, #6
 8006492:	b2db      	uxtb	r3, r3
 8006494:	f063 030f 	orn	r3, r3, #15
 8006498:	b2da      	uxtb	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	4930      	ldr	r1, [pc, #192]	; (8006568 <I2C_MasterRequestRead+0x194>)
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 f94f 	bl	800674a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e054      	b.n	8006560 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80064b6:	897b      	ldrh	r3, [r7, #10]
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	4929      	ldr	r1, [pc, #164]	; (800656c <I2C_MasterRequestRead+0x198>)
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 f93f 	bl	800674a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e044      	b.n	8006560 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064d6:	2300      	movs	r3, #0
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 f8c7 	bl	800669c <I2C_WaitOnFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00d      	beq.n	8006530 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006522:	d103      	bne.n	800652c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800652a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e017      	b.n	8006560 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006530:	897b      	ldrh	r3, [r7, #10]
 8006532:	11db      	asrs	r3, r3, #7
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f003 0306 	and.w	r3, r3, #6
 800653a:	b2db      	uxtb	r3, r3
 800653c:	f063 030e 	orn	r3, r3, #14
 8006540:	b2da      	uxtb	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	4907      	ldr	r1, [pc, #28]	; (800656c <I2C_MasterRequestRead+0x198>)
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 f8fb 	bl	800674a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	00010008 	.word	0x00010008
 800656c:	00010002 	.word	0x00010002

08006570 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b088      	sub	sp, #32
 8006574:	af02      	add	r7, sp, #8
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	4608      	mov	r0, r1
 800657a:	4611      	mov	r1, r2
 800657c:	461a      	mov	r2, r3
 800657e:	4603      	mov	r3, r0
 8006580:	817b      	strh	r3, [r7, #10]
 8006582:	460b      	mov	r3, r1
 8006584:	813b      	strh	r3, [r7, #8]
 8006586:	4613      	mov	r3, r2
 8006588:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006598:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 f878 	bl	800669c <I2C_WaitOnFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00d      	beq.n	80065ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065c0:	d103      	bne.n	80065ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e05f      	b.n	800668e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065ce:	897b      	ldrh	r3, [r7, #10]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	461a      	mov	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	6a3a      	ldr	r2, [r7, #32]
 80065e2:	492d      	ldr	r1, [pc, #180]	; (8006698 <I2C_RequestMemoryWrite+0x128>)
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 f8b0 	bl	800674a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e04c      	b.n	800668e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f4:	2300      	movs	r3, #0
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800660a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660c:	6a39      	ldr	r1, [r7, #32]
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 f91a 	bl	8006848 <I2C_WaitOnTXEFlagUntilTimeout>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00d      	beq.n	8006636 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	2b04      	cmp	r3, #4
 8006620:	d107      	bne.n	8006632 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006630:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e02b      	b.n	800668e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006636:	88fb      	ldrh	r3, [r7, #6]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d105      	bne.n	8006648 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800663c:	893b      	ldrh	r3, [r7, #8]
 800663e:	b2da      	uxtb	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	611a      	str	r2, [r3, #16]
 8006646:	e021      	b.n	800668c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006648:	893b      	ldrh	r3, [r7, #8]
 800664a:	0a1b      	lsrs	r3, r3, #8
 800664c:	b29b      	uxth	r3, r3
 800664e:	b2da      	uxtb	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006658:	6a39      	ldr	r1, [r7, #32]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f8f4 	bl	8006848 <I2C_WaitOnTXEFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00d      	beq.n	8006682 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	2b04      	cmp	r3, #4
 800666c:	d107      	bne.n	800667e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800667c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e005      	b.n	800668e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006682:	893b      	ldrh	r3, [r7, #8]
 8006684:	b2da      	uxtb	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	00010002 	.word	0x00010002

0800669c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066ac:	e025      	b.n	80066fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b4:	d021      	beq.n	80066fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b6:	f7fe f9db 	bl	8004a70 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d302      	bcc.n	80066cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d116      	bne.n	80066fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	f043 0220 	orr.w	r2, r3, #32
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e023      	b.n	8006742 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	0c1b      	lsrs	r3, r3, #16
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b01      	cmp	r3, #1
 8006702:	d10d      	bne.n	8006720 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	43da      	mvns	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4013      	ands	r3, r2
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	bf0c      	ite	eq
 8006716:	2301      	moveq	r3, #1
 8006718:	2300      	movne	r3, #0
 800671a:	b2db      	uxtb	r3, r3
 800671c:	461a      	mov	r2, r3
 800671e:	e00c      	b.n	800673a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	43da      	mvns	r2, r3
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4013      	ands	r3, r2
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	bf0c      	ite	eq
 8006732:	2301      	moveq	r3, #1
 8006734:	2300      	movne	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	79fb      	ldrb	r3, [r7, #7]
 800673c:	429a      	cmp	r2, r3
 800673e:	d0b6      	beq.n	80066ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	60b9      	str	r1, [r7, #8]
 8006754:	607a      	str	r2, [r7, #4]
 8006756:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006758:	e051      	b.n	80067fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006768:	d123      	bne.n	80067b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006778:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006782:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2220      	movs	r2, #32
 800678e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679e:	f043 0204 	orr.w	r2, r3, #4
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e046      	b.n	8006840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b8:	d021      	beq.n	80067fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ba:	f7fe f959 	bl	8004a70 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d302      	bcc.n	80067d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d116      	bne.n	80067fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2220      	movs	r2, #32
 80067da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	f043 0220 	orr.w	r2, r3, #32
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e020      	b.n	8006840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	0c1b      	lsrs	r3, r3, #16
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	d10c      	bne.n	8006822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	43da      	mvns	r2, r3
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	4013      	ands	r3, r2
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	bf14      	ite	ne
 800681a:	2301      	movne	r3, #1
 800681c:	2300      	moveq	r3, #0
 800681e:	b2db      	uxtb	r3, r3
 8006820:	e00b      	b.n	800683a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	43da      	mvns	r2, r3
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	4013      	ands	r3, r2
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	bf14      	ite	ne
 8006834:	2301      	movne	r3, #1
 8006836:	2300      	moveq	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d18d      	bne.n	800675a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006854:	e02d      	b.n	80068b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 f8ce 	bl	80069f8 <I2C_IsAcknowledgeFailed>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e02d      	b.n	80068c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686c:	d021      	beq.n	80068b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686e:	f7fe f8ff 	bl	8004a70 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	429a      	cmp	r2, r3
 800687c:	d302      	bcc.n	8006884 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d116      	bne.n	80068b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2220      	movs	r2, #32
 800688e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	f043 0220 	orr.w	r2, r3, #32
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e007      	b.n	80068c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068bc:	2b80      	cmp	r3, #128	; 0x80
 80068be:	d1ca      	bne.n	8006856 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068d6:	e02d      	b.n	8006934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 f88d 	bl	80069f8 <I2C_IsAcknowledgeFailed>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e02d      	b.n	8006944 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ee:	d021      	beq.n	8006934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f0:	f7fe f8be 	bl	8004a70 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d302      	bcc.n	8006906 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d116      	bne.n	8006934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	f043 0220 	orr.w	r2, r3, #32
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e007      	b.n	8006944 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	2b04      	cmp	r3, #4
 8006940:	d1ca      	bne.n	80068d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006958:	e042      	b.n	80069e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b10      	cmp	r3, #16
 8006966:	d119      	bne.n	800699c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f06f 0210 	mvn.w	r2, #16
 8006970:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e029      	b.n	80069f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800699c:	f7fe f868 	bl	8004a70 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d302      	bcc.n	80069b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d116      	bne.n	80069e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	f043 0220 	orr.w	r2, r3, #32
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e007      	b.n	80069f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ea:	2b40      	cmp	r3, #64	; 0x40
 80069ec:	d1b5      	bne.n	800695a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a0e:	d11b      	bne.n	8006a48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a34:	f043 0204 	orr.w	r2, r3, #4
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
	...

08006a58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e267      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d075      	beq.n	8006b62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a76:	4b88      	ldr	r3, [pc, #544]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 030c 	and.w	r3, r3, #12
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d00c      	beq.n	8006a9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a82:	4b85      	ldr	r3, [pc, #532]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a8a:	2b08      	cmp	r3, #8
 8006a8c:	d112      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a8e:	4b82      	ldr	r3, [pc, #520]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a9a:	d10b      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a9c:	4b7e      	ldr	r3, [pc, #504]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d05b      	beq.n	8006b60 <HAL_RCC_OscConfig+0x108>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d157      	bne.n	8006b60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e242      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006abc:	d106      	bne.n	8006acc <HAL_RCC_OscConfig+0x74>
 8006abe:	4b76      	ldr	r3, [pc, #472]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a75      	ldr	r2, [pc, #468]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ac8:	6013      	str	r3, [r2, #0]
 8006aca:	e01d      	b.n	8006b08 <HAL_RCC_OscConfig+0xb0>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ad4:	d10c      	bne.n	8006af0 <HAL_RCC_OscConfig+0x98>
 8006ad6:	4b70      	ldr	r3, [pc, #448]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a6f      	ldr	r2, [pc, #444]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	4b6d      	ldr	r3, [pc, #436]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a6c      	ldr	r2, [pc, #432]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	e00b      	b.n	8006b08 <HAL_RCC_OscConfig+0xb0>
 8006af0:	4b69      	ldr	r3, [pc, #420]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a68      	ldr	r2, [pc, #416]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	4b66      	ldr	r3, [pc, #408]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a65      	ldr	r2, [pc, #404]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d013      	beq.n	8006b38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b10:	f7fd ffae 	bl	8004a70 <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b18:	f7fd ffaa 	bl	8004a70 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b64      	cmp	r3, #100	; 0x64
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e207      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b2a:	4b5b      	ldr	r3, [pc, #364]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0f0      	beq.n	8006b18 <HAL_RCC_OscConfig+0xc0>
 8006b36:	e014      	b.n	8006b62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b38:	f7fd ff9a 	bl	8004a70 <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b40:	f7fd ff96 	bl	8004a70 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b64      	cmp	r3, #100	; 0x64
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e1f3      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b52:	4b51      	ldr	r3, [pc, #324]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1f0      	bne.n	8006b40 <HAL_RCC_OscConfig+0xe8>
 8006b5e:	e000      	b.n	8006b62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d063      	beq.n	8006c36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b6e:	4b4a      	ldr	r3, [pc, #296]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f003 030c 	and.w	r3, r3, #12
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00b      	beq.n	8006b92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b7a:	4b47      	ldr	r3, [pc, #284]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d11c      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b86:	4b44      	ldr	r3, [pc, #272]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d116      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b92:	4b41      	ldr	r3, [pc, #260]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d005      	beq.n	8006baa <HAL_RCC_OscConfig+0x152>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d001      	beq.n	8006baa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e1c7      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006baa:	4b3b      	ldr	r3, [pc, #236]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	4937      	ldr	r1, [pc, #220]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bbe:	e03a      	b.n	8006c36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d020      	beq.n	8006c0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bc8:	4b34      	ldr	r3, [pc, #208]	; (8006c9c <HAL_RCC_OscConfig+0x244>)
 8006bca:	2201      	movs	r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bce:	f7fd ff4f 	bl	8004a70 <HAL_GetTick>
 8006bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd4:	e008      	b.n	8006be8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bd6:	f7fd ff4b 	bl	8004a70 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e1a8      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be8:	4b2b      	ldr	r3, [pc, #172]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d0f0      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf4:	4b28      	ldr	r3, [pc, #160]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	4925      	ldr	r1, [pc, #148]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	600b      	str	r3, [r1, #0]
 8006c08:	e015      	b.n	8006c36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c0a:	4b24      	ldr	r3, [pc, #144]	; (8006c9c <HAL_RCC_OscConfig+0x244>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c10:	f7fd ff2e 	bl	8004a70 <HAL_GetTick>
 8006c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c18:	f7fd ff2a 	bl	8004a70 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e187      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c2a:	4b1b      	ldr	r3, [pc, #108]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f0      	bne.n	8006c18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d036      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d016      	beq.n	8006c78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c4a:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <HAL_RCC_OscConfig+0x248>)
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c50:	f7fd ff0e 	bl	8004a70 <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c58:	f7fd ff0a 	bl	8004a70 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e167      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c6a:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0f0      	beq.n	8006c58 <HAL_RCC_OscConfig+0x200>
 8006c76:	e01b      	b.n	8006cb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c78:	4b09      	ldr	r3, [pc, #36]	; (8006ca0 <HAL_RCC_OscConfig+0x248>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c7e:	f7fd fef7 	bl	8004a70 <HAL_GetTick>
 8006c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c84:	e00e      	b.n	8006ca4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c86:	f7fd fef3 	bl	8004a70 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d907      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e150      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
 8006c98:	40023800 	.word	0x40023800
 8006c9c:	42470000 	.word	0x42470000
 8006ca0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca4:	4b88      	ldr	r3, [pc, #544]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1ea      	bne.n	8006c86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 8097 	beq.w	8006dec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cc2:	4b81      	ldr	r3, [pc, #516]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10f      	bne.n	8006cee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60bb      	str	r3, [r7, #8]
 8006cd2:	4b7d      	ldr	r3, [pc, #500]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	4a7c      	ldr	r2, [pc, #496]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8006cde:	4b7a      	ldr	r3, [pc, #488]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce6:	60bb      	str	r3, [r7, #8]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cea:	2301      	movs	r3, #1
 8006cec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cee:	4b77      	ldr	r3, [pc, #476]	; (8006ecc <HAL_RCC_OscConfig+0x474>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d118      	bne.n	8006d2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cfa:	4b74      	ldr	r3, [pc, #464]	; (8006ecc <HAL_RCC_OscConfig+0x474>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a73      	ldr	r2, [pc, #460]	; (8006ecc <HAL_RCC_OscConfig+0x474>)
 8006d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d06:	f7fd feb3 	bl	8004a70 <HAL_GetTick>
 8006d0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d0c:	e008      	b.n	8006d20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d0e:	f7fd feaf 	bl	8004a70 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e10c      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d20:	4b6a      	ldr	r3, [pc, #424]	; (8006ecc <HAL_RCC_OscConfig+0x474>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0f0      	beq.n	8006d0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d106      	bne.n	8006d42 <HAL_RCC_OscConfig+0x2ea>
 8006d34:	4b64      	ldr	r3, [pc, #400]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d38:	4a63      	ldr	r2, [pc, #396]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d3a:	f043 0301 	orr.w	r3, r3, #1
 8006d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d40:	e01c      	b.n	8006d7c <HAL_RCC_OscConfig+0x324>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	2b05      	cmp	r3, #5
 8006d48:	d10c      	bne.n	8006d64 <HAL_RCC_OscConfig+0x30c>
 8006d4a:	4b5f      	ldr	r3, [pc, #380]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4e:	4a5e      	ldr	r2, [pc, #376]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d50:	f043 0304 	orr.w	r3, r3, #4
 8006d54:	6713      	str	r3, [r2, #112]	; 0x70
 8006d56:	4b5c      	ldr	r3, [pc, #368]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5a:	4a5b      	ldr	r2, [pc, #364]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d5c:	f043 0301 	orr.w	r3, r3, #1
 8006d60:	6713      	str	r3, [r2, #112]	; 0x70
 8006d62:	e00b      	b.n	8006d7c <HAL_RCC_OscConfig+0x324>
 8006d64:	4b58      	ldr	r3, [pc, #352]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d68:	4a57      	ldr	r2, [pc, #348]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d6a:	f023 0301 	bic.w	r3, r3, #1
 8006d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d70:	4b55      	ldr	r3, [pc, #340]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d74:	4a54      	ldr	r2, [pc, #336]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006d76:	f023 0304 	bic.w	r3, r3, #4
 8006d7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d015      	beq.n	8006db0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d84:	f7fd fe74 	bl	8004a70 <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d8a:	e00a      	b.n	8006da2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d8c:	f7fd fe70 	bl	8004a70 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e0cb      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006da2:	4b49      	ldr	r3, [pc, #292]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0ee      	beq.n	8006d8c <HAL_RCC_OscConfig+0x334>
 8006dae:	e014      	b.n	8006dda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006db0:	f7fd fe5e 	bl	8004a70 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006db6:	e00a      	b.n	8006dce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db8:	f7fd fe5a 	bl	8004a70 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e0b5      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dce:	4b3e      	ldr	r3, [pc, #248]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1ee      	bne.n	8006db8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d105      	bne.n	8006dec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006de0:	4b39      	ldr	r3, [pc, #228]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de4:	4a38      	ldr	r2, [pc, #224]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 80a1 	beq.w	8006f38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006df6:	4b34      	ldr	r3, [pc, #208]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 030c 	and.w	r3, r3, #12
 8006dfe:	2b08      	cmp	r3, #8
 8006e00:	d05c      	beq.n	8006ebc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d141      	bne.n	8006e8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e0a:	4b31      	ldr	r3, [pc, #196]	; (8006ed0 <HAL_RCC_OscConfig+0x478>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e10:	f7fd fe2e 	bl	8004a70 <HAL_GetTick>
 8006e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e16:	e008      	b.n	8006e2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e18:	f7fd fe2a 	bl	8004a70 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d901      	bls.n	8006e2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e087      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e2a:	4b27      	ldr	r3, [pc, #156]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1f0      	bne.n	8006e18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69da      	ldr	r2, [r3, #28]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	019b      	lsls	r3, r3, #6
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4c:	085b      	lsrs	r3, r3, #1
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	041b      	lsls	r3, r3, #16
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	061b      	lsls	r3, r3, #24
 8006e5a:	491b      	ldr	r1, [pc, #108]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e60:	4b1b      	ldr	r3, [pc, #108]	; (8006ed0 <HAL_RCC_OscConfig+0x478>)
 8006e62:	2201      	movs	r2, #1
 8006e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e66:	f7fd fe03 	bl	8004a70 <HAL_GetTick>
 8006e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e6c:	e008      	b.n	8006e80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e6e:	f7fd fdff 	bl	8004a70 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d901      	bls.n	8006e80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e05c      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e80:	4b11      	ldr	r3, [pc, #68]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0f0      	beq.n	8006e6e <HAL_RCC_OscConfig+0x416>
 8006e8c:	e054      	b.n	8006f38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e8e:	4b10      	ldr	r3, [pc, #64]	; (8006ed0 <HAL_RCC_OscConfig+0x478>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e94:	f7fd fdec 	bl	8004a70 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e9c:	f7fd fde8 	bl	8004a70 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e045      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eae:	4b06      	ldr	r3, [pc, #24]	; (8006ec8 <HAL_RCC_OscConfig+0x470>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f0      	bne.n	8006e9c <HAL_RCC_OscConfig+0x444>
 8006eba:	e03d      	b.n	8006f38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d107      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e038      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
 8006ec8:	40023800 	.word	0x40023800
 8006ecc:	40007000 	.word	0x40007000
 8006ed0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ed4:	4b1b      	ldr	r3, [pc, #108]	; (8006f44 <HAL_RCC_OscConfig+0x4ec>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d028      	beq.n	8006f34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d121      	bne.n	8006f34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d11a      	bne.n	8006f34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f04:	4013      	ands	r3, r2
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d111      	bne.n	8006f34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1a:	085b      	lsrs	r3, r3, #1
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d107      	bne.n	8006f34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d001      	beq.n	8006f38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e000      	b.n	8006f3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	40023800 	.word	0x40023800

08006f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e0cc      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f5c:	4b68      	ldr	r3, [pc, #416]	; (8007100 <HAL_RCC_ClockConfig+0x1b8>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d90c      	bls.n	8006f84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f6a:	4b65      	ldr	r3, [pc, #404]	; (8007100 <HAL_RCC_ClockConfig+0x1b8>)
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f72:	4b63      	ldr	r3, [pc, #396]	; (8007100 <HAL_RCC_ClockConfig+0x1b8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d001      	beq.n	8006f84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e0b8      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d020      	beq.n	8006fd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d005      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f9c:	4b59      	ldr	r3, [pc, #356]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	4a58      	ldr	r2, [pc, #352]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fb4:	4b53      	ldr	r3, [pc, #332]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	4a52      	ldr	r2, [pc, #328]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8006fba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fc0:	4b50      	ldr	r3, [pc, #320]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	494d      	ldr	r1, [pc, #308]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d044      	beq.n	8007068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d107      	bne.n	8006ff6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fe6:	4b47      	ldr	r3, [pc, #284]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d119      	bne.n	8007026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e07f      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d003      	beq.n	8007006 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007002:	2b03      	cmp	r3, #3
 8007004:	d107      	bne.n	8007016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007006:	4b3f      	ldr	r3, [pc, #252]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d109      	bne.n	8007026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e06f      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007016:	4b3b      	ldr	r3, [pc, #236]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e067      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007026:	4b37      	ldr	r3, [pc, #220]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f023 0203 	bic.w	r2, r3, #3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	4934      	ldr	r1, [pc, #208]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8007034:	4313      	orrs	r3, r2
 8007036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007038:	f7fd fd1a 	bl	8004a70 <HAL_GetTick>
 800703c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800703e:	e00a      	b.n	8007056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007040:	f7fd fd16 	bl	8004a70 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	f241 3288 	movw	r2, #5000	; 0x1388
 800704e:	4293      	cmp	r3, r2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e04f      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007056:	4b2b      	ldr	r3, [pc, #172]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 020c 	and.w	r2, r3, #12
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	429a      	cmp	r2, r3
 8007066:	d1eb      	bne.n	8007040 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007068:	4b25      	ldr	r3, [pc, #148]	; (8007100 <HAL_RCC_ClockConfig+0x1b8>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d20c      	bcs.n	8007090 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007076:	4b22      	ldr	r3, [pc, #136]	; (8007100 <HAL_RCC_ClockConfig+0x1b8>)
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800707e:	4b20      	ldr	r3, [pc, #128]	; (8007100 <HAL_RCC_ClockConfig+0x1b8>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	429a      	cmp	r2, r3
 800708a:	d001      	beq.n	8007090 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e032      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d008      	beq.n	80070ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800709c:	4b19      	ldr	r3, [pc, #100]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	4916      	ldr	r1, [pc, #88]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0308 	and.w	r3, r3, #8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d009      	beq.n	80070ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070ba:	4b12      	ldr	r3, [pc, #72]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	490e      	ldr	r1, [pc, #56]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070ce:	f000 f821 	bl	8007114 <HAL_RCC_GetSysClockFreq>
 80070d2:	4602      	mov	r2, r0
 80070d4:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <HAL_RCC_ClockConfig+0x1bc>)
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	091b      	lsrs	r3, r3, #4
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	490a      	ldr	r1, [pc, #40]	; (8007108 <HAL_RCC_ClockConfig+0x1c0>)
 80070e0:	5ccb      	ldrb	r3, [r1, r3]
 80070e2:	fa22 f303 	lsr.w	r3, r2, r3
 80070e6:	4a09      	ldr	r2, [pc, #36]	; (800710c <HAL_RCC_ClockConfig+0x1c4>)
 80070e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070ea:	4b09      	ldr	r3, [pc, #36]	; (8007110 <HAL_RCC_ClockConfig+0x1c8>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fd fc7a 	bl	80049e8 <HAL_InitTick>

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	40023c00 	.word	0x40023c00
 8007104:	40023800 	.word	0x40023800
 8007108:	0800dea0 	.word	0x0800dea0
 800710c:	20000864 	.word	0x20000864
 8007110:	20000884 	.word	0x20000884

08007114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007118:	b090      	sub	sp, #64	; 0x40
 800711a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	637b      	str	r3, [r7, #52]	; 0x34
 8007120:	2300      	movs	r3, #0
 8007122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007124:	2300      	movs	r3, #0
 8007126:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800712c:	4b59      	ldr	r3, [pc, #356]	; (8007294 <HAL_RCC_GetSysClockFreq+0x180>)
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 030c 	and.w	r3, r3, #12
 8007134:	2b08      	cmp	r3, #8
 8007136:	d00d      	beq.n	8007154 <HAL_RCC_GetSysClockFreq+0x40>
 8007138:	2b08      	cmp	r3, #8
 800713a:	f200 80a1 	bhi.w	8007280 <HAL_RCC_GetSysClockFreq+0x16c>
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <HAL_RCC_GetSysClockFreq+0x34>
 8007142:	2b04      	cmp	r3, #4
 8007144:	d003      	beq.n	800714e <HAL_RCC_GetSysClockFreq+0x3a>
 8007146:	e09b      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007148:	4b53      	ldr	r3, [pc, #332]	; (8007298 <HAL_RCC_GetSysClockFreq+0x184>)
 800714a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800714c:	e09b      	b.n	8007286 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800714e:	4b53      	ldr	r3, [pc, #332]	; (800729c <HAL_RCC_GetSysClockFreq+0x188>)
 8007150:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007152:	e098      	b.n	8007286 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007154:	4b4f      	ldr	r3, [pc, #316]	; (8007294 <HAL_RCC_GetSysClockFreq+0x180>)
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800715c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800715e:	4b4d      	ldr	r3, [pc, #308]	; (8007294 <HAL_RCC_GetSysClockFreq+0x180>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d028      	beq.n	80071bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800716a:	4b4a      	ldr	r3, [pc, #296]	; (8007294 <HAL_RCC_GetSysClockFreq+0x180>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	099b      	lsrs	r3, r3, #6
 8007170:	2200      	movs	r2, #0
 8007172:	623b      	str	r3, [r7, #32]
 8007174:	627a      	str	r2, [r7, #36]	; 0x24
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800717c:	2100      	movs	r1, #0
 800717e:	4b47      	ldr	r3, [pc, #284]	; (800729c <HAL_RCC_GetSysClockFreq+0x188>)
 8007180:	fb03 f201 	mul.w	r2, r3, r1
 8007184:	2300      	movs	r3, #0
 8007186:	fb00 f303 	mul.w	r3, r0, r3
 800718a:	4413      	add	r3, r2
 800718c:	4a43      	ldr	r2, [pc, #268]	; (800729c <HAL_RCC_GetSysClockFreq+0x188>)
 800718e:	fba0 1202 	umull	r1, r2, r0, r2
 8007192:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007194:	460a      	mov	r2, r1
 8007196:	62ba      	str	r2, [r7, #40]	; 0x28
 8007198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800719a:	4413      	add	r3, r2
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800719e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a0:	2200      	movs	r2, #0
 80071a2:	61bb      	str	r3, [r7, #24]
 80071a4:	61fa      	str	r2, [r7, #28]
 80071a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80071ae:	f7f9 fd33 	bl	8000c18 <__aeabi_uldivmod>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	4613      	mov	r3, r2
 80071b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ba:	e053      	b.n	8007264 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071bc:	4b35      	ldr	r3, [pc, #212]	; (8007294 <HAL_RCC_GetSysClockFreq+0x180>)
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	099b      	lsrs	r3, r3, #6
 80071c2:	2200      	movs	r2, #0
 80071c4:	613b      	str	r3, [r7, #16]
 80071c6:	617a      	str	r2, [r7, #20]
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80071ce:	f04f 0b00 	mov.w	fp, #0
 80071d2:	4652      	mov	r2, sl
 80071d4:	465b      	mov	r3, fp
 80071d6:	f04f 0000 	mov.w	r0, #0
 80071da:	f04f 0100 	mov.w	r1, #0
 80071de:	0159      	lsls	r1, r3, #5
 80071e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071e4:	0150      	lsls	r0, r2, #5
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	ebb2 080a 	subs.w	r8, r2, sl
 80071ee:	eb63 090b 	sbc.w	r9, r3, fp
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80071fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007202:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007206:	ebb2 0408 	subs.w	r4, r2, r8
 800720a:	eb63 0509 	sbc.w	r5, r3, r9
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	f04f 0300 	mov.w	r3, #0
 8007216:	00eb      	lsls	r3, r5, #3
 8007218:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800721c:	00e2      	lsls	r2, r4, #3
 800721e:	4614      	mov	r4, r2
 8007220:	461d      	mov	r5, r3
 8007222:	eb14 030a 	adds.w	r3, r4, sl
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	eb45 030b 	adc.w	r3, r5, fp
 800722c:	607b      	str	r3, [r7, #4]
 800722e:	f04f 0200 	mov.w	r2, #0
 8007232:	f04f 0300 	mov.w	r3, #0
 8007236:	e9d7 4500 	ldrd	r4, r5, [r7]
 800723a:	4629      	mov	r1, r5
 800723c:	028b      	lsls	r3, r1, #10
 800723e:	4621      	mov	r1, r4
 8007240:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007244:	4621      	mov	r1, r4
 8007246:	028a      	lsls	r2, r1, #10
 8007248:	4610      	mov	r0, r2
 800724a:	4619      	mov	r1, r3
 800724c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724e:	2200      	movs	r2, #0
 8007250:	60bb      	str	r3, [r7, #8]
 8007252:	60fa      	str	r2, [r7, #12]
 8007254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007258:	f7f9 fcde 	bl	8000c18 <__aeabi_uldivmod>
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	4613      	mov	r3, r2
 8007262:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007264:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <HAL_RCC_GetSysClockFreq+0x180>)
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	0c1b      	lsrs	r3, r3, #16
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	3301      	adds	r3, #1
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007274:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007278:	fbb2 f3f3 	udiv	r3, r2, r3
 800727c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800727e:	e002      	b.n	8007286 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007280:	4b05      	ldr	r3, [pc, #20]	; (8007298 <HAL_RCC_GetSysClockFreq+0x184>)
 8007282:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007288:	4618      	mov	r0, r3
 800728a:	3740      	adds	r7, #64	; 0x40
 800728c:	46bd      	mov	sp, r7
 800728e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007292:	bf00      	nop
 8007294:	40023800 	.word	0x40023800
 8007298:	00f42400 	.word	0x00f42400
 800729c:	017d7840 	.word	0x017d7840

080072a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072a4:	4b03      	ldr	r3, [pc, #12]	; (80072b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80072a6:	681b      	ldr	r3, [r3, #0]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	20000864 	.word	0x20000864

080072b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072bc:	f7ff fff0 	bl	80072a0 <HAL_RCC_GetHCLKFreq>
 80072c0:	4602      	mov	r2, r0
 80072c2:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	0a9b      	lsrs	r3, r3, #10
 80072c8:	f003 0307 	and.w	r3, r3, #7
 80072cc:	4903      	ldr	r1, [pc, #12]	; (80072dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80072ce:	5ccb      	ldrb	r3, [r1, r3]
 80072d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	40023800 	.word	0x40023800
 80072dc:	0800deb0 	.word	0x0800deb0

080072e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80072e4:	f7ff ffdc 	bl	80072a0 <HAL_RCC_GetHCLKFreq>
 80072e8:	4602      	mov	r2, r0
 80072ea:	4b05      	ldr	r3, [pc, #20]	; (8007300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	0b5b      	lsrs	r3, r3, #13
 80072f0:	f003 0307 	and.w	r3, r3, #7
 80072f4:	4903      	ldr	r1, [pc, #12]	; (8007304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072f6:	5ccb      	ldrb	r3, [r1, r3]
 80072f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	40023800 	.word	0x40023800
 8007304:	0800deb0 	.word	0x0800deb0

08007308 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800732c:	2b00      	cmp	r3, #0
 800732e:	d038      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007330:	4b68      	ldr	r3, [pc, #416]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007336:	f7fd fb9b 	bl	8004a70 <HAL_GetTick>
 800733a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800733c:	e008      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800733e:	f7fd fb97 	bl	8004a70 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	2b02      	cmp	r3, #2
 800734a:	d901      	bls.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e0bd      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007350:	4b61      	ldr	r3, [pc, #388]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1f0      	bne.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	019b      	lsls	r3, r3, #6
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	071b      	lsls	r3, r3, #28
 800736e:	495a      	ldr	r1, [pc, #360]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007370:	4313      	orrs	r3, r2
 8007372:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007376:	4b57      	ldr	r3, [pc, #348]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007378:	2201      	movs	r2, #1
 800737a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800737c:	f7fd fb78 	bl	8004a70 <HAL_GetTick>
 8007380:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007382:	e008      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007384:	f7fd fb74 	bl	8004a70 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d901      	bls.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e09a      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007396:	4b50      	ldr	r3, [pc, #320]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0f0      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 8083 	beq.w	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80073b0:	2300      	movs	r3, #0
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	4b48      	ldr	r3, [pc, #288]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b8:	4a47      	ldr	r2, [pc, #284]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073be:	6413      	str	r3, [r2, #64]	; 0x40
 80073c0:	4b45      	ldr	r3, [pc, #276]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073c8:	60fb      	str	r3, [r7, #12]
 80073ca:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80073cc:	4b43      	ldr	r3, [pc, #268]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a42      	ldr	r2, [pc, #264]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073d8:	f7fd fb4a 	bl	8004a70 <HAL_GetTick>
 80073dc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073de:	e008      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80073e0:	f7fd fb46 	bl	8004a70 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d901      	bls.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e06c      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073f2:	4b3a      	ldr	r3, [pc, #232]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0f0      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073fe:	4b36      	ldr	r3, [pc, #216]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007406:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d02f      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	429a      	cmp	r2, r3
 800741a:	d028      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800741c:	4b2e      	ldr	r3, [pc, #184]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800741e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007424:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007426:	4b2e      	ldr	r3, [pc, #184]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007428:	2201      	movs	r2, #1
 800742a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800742c:	4b2c      	ldr	r3, [pc, #176]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007432:	4a29      	ldr	r2, [pc, #164]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007438:	4b27      	ldr	r3, [pc, #156]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800743a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b01      	cmp	r3, #1
 8007442:	d114      	bne.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007444:	f7fd fb14 	bl	8004a70 <HAL_GetTick>
 8007448:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800744a:	e00a      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800744c:	f7fd fb10 	bl	8004a70 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	f241 3288 	movw	r2, #5000	; 0x1388
 800745a:	4293      	cmp	r3, r2
 800745c:	d901      	bls.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e034      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007462:	4b1d      	ldr	r3, [pc, #116]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0ee      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800747a:	d10d      	bne.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800747c:	4b16      	ldr	r3, [pc, #88]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800748c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007490:	4911      	ldr	r1, [pc, #68]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007492:	4313      	orrs	r3, r2
 8007494:	608b      	str	r3, [r1, #8]
 8007496:	e005      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007498:	4b0f      	ldr	r3, [pc, #60]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	4a0e      	ldr	r2, [pc, #56]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800749e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80074a2:	6093      	str	r3, [r2, #8]
 80074a4:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074b0:	4909      	ldr	r1, [pc, #36]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0308 	and.w	r3, r3, #8
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	7d1a      	ldrb	r2, [r3, #20]
 80074c6:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80074c8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	42470068 	.word	0x42470068
 80074d8:	40023800 	.word	0x40023800
 80074dc:	40007000 	.word	0x40007000
 80074e0:	42470e40 	.word	0x42470e40
 80074e4:	424711e0 	.word	0x424711e0

080074e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e066      	b.n	80075cc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	7f5b      	ldrb	r3, [r3, #29]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b00      	cmp	r3, #0
 8007506:	d105      	bne.n	8007514 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fc f81c 	bl	800354c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	22ca      	movs	r2, #202	; 0xca
 8007520:	625a      	str	r2, [r3, #36]	; 0x24
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2253      	movs	r2, #83	; 0x53
 8007528:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fa45 	bl	80079ba <RTC_EnterInitMode>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d12c      	bne.n	8007594 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	6812      	ldr	r2, [r2, #0]
 8007544:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800754c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6899      	ldr	r1, [r3, #8]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	431a      	orrs	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	431a      	orrs	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	68d2      	ldr	r2, [r2, #12]
 8007574:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6919      	ldr	r1, [r3, #16]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	041a      	lsls	r2, r3, #16
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fa4c 	bl	8007a28 <RTC_ExitInitMode>
 8007590:	4603      	mov	r3, r0
 8007592:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d113      	bne.n	80075c2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075a8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	699a      	ldr	r2, [r3, #24]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	22ff      	movs	r2, #255	; 0xff
 80075c8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80075d4:	b590      	push	{r4, r7, lr}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	7f1b      	ldrb	r3, [r3, #28]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_RTC_SetTime+0x1c>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e087      	b.n	8007700 <HAL_RTC_SetTime+0x12c>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2202      	movs	r2, #2
 80075fa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d126      	bne.n	8007650 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760c:	2b00      	cmp	r3, #0
 800760e:	d102      	bne.n	8007616 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2200      	movs	r2, #0
 8007614:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fa29 	bl	8007a72 <RTC_ByteToBcd2>
 8007620:	4603      	mov	r3, r0
 8007622:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	785b      	ldrb	r3, [r3, #1]
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fa22 	bl	8007a72 <RTC_ByteToBcd2>
 800762e:	4603      	mov	r3, r0
 8007630:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007632:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	789b      	ldrb	r3, [r3, #2]
 8007638:	4618      	mov	r0, r3
 800763a:	f000 fa1a 	bl	8007a72 <RTC_ByteToBcd2>
 800763e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007640:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	78db      	ldrb	r3, [r3, #3]
 8007648:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800764a:	4313      	orrs	r3, r2
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	e018      	b.n	8007682 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800765a:	2b00      	cmp	r3, #0
 800765c:	d102      	bne.n	8007664 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2200      	movs	r2, #0
 8007662:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	785b      	ldrb	r3, [r3, #1]
 800766e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007670:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007676:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	78db      	ldrb	r3, [r3, #3]
 800767c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	22ca      	movs	r2, #202	; 0xca
 8007688:	625a      	str	r2, [r3, #36]	; 0x24
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2253      	movs	r2, #83	; 0x53
 8007690:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 f991 	bl	80079ba <RTC_EnterInitMode>
 8007698:	4603      	mov	r3, r0
 800769a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800769c:	7cfb      	ldrb	r3, [r7, #19]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d120      	bne.n	80076e4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80076ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80076b0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6899      	ldr	r1, [r3, #8]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	431a      	orrs	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 f9a4 	bl	8007a28 <RTC_ExitInitMode>
 80076e0:	4603      	mov	r3, r0
 80076e2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80076e4:	7cfb      	ldrb	r3, [r7, #19]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d102      	bne.n	80076f0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	22ff      	movs	r2, #255	; 0xff
 80076f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	771a      	strb	r2, [r3, #28]

  return status;
 80076fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8007700:	4618      	mov	r0, r3
 8007702:	371c      	adds	r7, #28
 8007704:	46bd      	mov	sp, r7
 8007706:	bd90      	pop	{r4, r7, pc}

08007708 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800773a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800773e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	0c1b      	lsrs	r3, r3, #16
 8007744:	b2db      	uxtb	r3, r3
 8007746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800774a:	b2da      	uxtb	r2, r3
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	0a1b      	lsrs	r3, r3, #8
 8007754:	b2db      	uxtb	r3, r3
 8007756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800775a:	b2da      	uxtb	r2, r3
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007768:	b2da      	uxtb	r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	0d9b      	lsrs	r3, r3, #22
 8007772:	b2db      	uxtb	r3, r3
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	b2da      	uxtb	r2, r3
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d11a      	bne.n	80077ba <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f98f 	bl	8007aac <RTC_Bcd2ToByte>
 800778e:	4603      	mov	r3, r0
 8007790:	461a      	mov	r2, r3
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	785b      	ldrb	r3, [r3, #1]
 800779a:	4618      	mov	r0, r3
 800779c:	f000 f986 	bl	8007aac <RTC_Bcd2ToByte>
 80077a0:	4603      	mov	r3, r0
 80077a2:	461a      	mov	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	789b      	ldrb	r3, [r3, #2]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 f97d 	bl	8007aac <RTC_Bcd2ToByte>
 80077b2:	4603      	mov	r3, r0
 80077b4:	461a      	mov	r2, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80077c4:	b590      	push	{r4, r7, lr}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	7f1b      	ldrb	r3, [r3, #28]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d101      	bne.n	80077e0 <HAL_RTC_SetDate+0x1c>
 80077dc:	2302      	movs	r3, #2
 80077de:	e071      	b.n	80078c4 <HAL_RTC_SetDate+0x100>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2201      	movs	r2, #1
 80077e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2202      	movs	r2, #2
 80077ea:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10e      	bne.n	8007810 <HAL_RTC_SetDate+0x4c>
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	785b      	ldrb	r3, [r3, #1]
 80077f6:	f003 0310 	and.w	r3, r3, #16
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d008      	beq.n	8007810 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	785b      	ldrb	r3, [r3, #1]
 8007802:	f023 0310 	bic.w	r3, r3, #16
 8007806:	b2db      	uxtb	r3, r3
 8007808:	330a      	adds	r3, #10
 800780a:	b2da      	uxtb	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d11c      	bne.n	8007850 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	78db      	ldrb	r3, [r3, #3]
 800781a:	4618      	mov	r0, r3
 800781c:	f000 f929 	bl	8007a72 <RTC_ByteToBcd2>
 8007820:	4603      	mov	r3, r0
 8007822:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	4618      	mov	r0, r3
 800782a:	f000 f922 	bl	8007a72 <RTC_ByteToBcd2>
 800782e:	4603      	mov	r3, r0
 8007830:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007832:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	789b      	ldrb	r3, [r3, #2]
 8007838:	4618      	mov	r0, r3
 800783a:	f000 f91a 	bl	8007a72 <RTC_ByteToBcd2>
 800783e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007840:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800784a:	4313      	orrs	r3, r2
 800784c:	617b      	str	r3, [r7, #20]
 800784e:	e00e      	b.n	800786e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	78db      	ldrb	r3, [r3, #3]
 8007854:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800785c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007862:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800786a:	4313      	orrs	r3, r2
 800786c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	22ca      	movs	r2, #202	; 0xca
 8007874:	625a      	str	r2, [r3, #36]	; 0x24
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2253      	movs	r2, #83	; 0x53
 800787c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f89b 	bl	80079ba <RTC_EnterInitMode>
 8007884:	4603      	mov	r3, r0
 8007886:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007888:	7cfb      	ldrb	r3, [r7, #19]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10c      	bne.n	80078a8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007898:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800789c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 f8c2 	bl	8007a28 <RTC_ExitInitMode>
 80078a4:	4603      	mov	r3, r0
 80078a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80078a8:	7cfb      	ldrb	r3, [r7, #19]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d102      	bne.n	80078b4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	22ff      	movs	r2, #255	; 0xff
 80078ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	771a      	strb	r2, [r3, #28]

  return status;
 80078c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	371c      	adds	r7, #28
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd90      	pop	{r4, r7, pc}

080078cc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80078e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80078ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	0c1b      	lsrs	r3, r3, #16
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	0a1b      	lsrs	r3, r3, #8
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	f003 031f 	and.w	r3, r3, #31
 8007900:	b2da      	uxtb	r2, r3
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	b2db      	uxtb	r3, r3
 800790a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800790e:	b2da      	uxtb	r2, r3
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	0b5b      	lsrs	r3, r3, #13
 8007918:	b2db      	uxtb	r3, r3
 800791a:	f003 0307 	and.w	r3, r3, #7
 800791e:	b2da      	uxtb	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d11a      	bne.n	8007960 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	78db      	ldrb	r3, [r3, #3]
 800792e:	4618      	mov	r0, r3
 8007930:	f000 f8bc 	bl	8007aac <RTC_Bcd2ToByte>
 8007934:	4603      	mov	r3, r0
 8007936:	461a      	mov	r2, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	785b      	ldrb	r3, [r3, #1]
 8007940:	4618      	mov	r0, r3
 8007942:	f000 f8b3 	bl	8007aac <RTC_Bcd2ToByte>
 8007946:	4603      	mov	r3, r0
 8007948:	461a      	mov	r2, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	789b      	ldrb	r3, [r3, #2]
 8007952:	4618      	mov	r0, r3
 8007954:	f000 f8aa 	bl	8007aac <RTC_Bcd2ToByte>
 8007958:	4603      	mov	r3, r0
 800795a:	461a      	mov	r2, r3
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007984:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007986:	f7fd f873 	bl	8004a70 <HAL_GetTick>
 800798a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800798c:	e009      	b.n	80079a2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800798e:	f7fd f86f 	bl	8004a70 <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800799c:	d901      	bls.n	80079a2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e007      	b.n	80079b2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f003 0320 	and.w	r3, r3, #32
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0ee      	beq.n	800798e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d122      	bne.n	8007a1e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68da      	ldr	r2, [r3, #12]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079e6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80079e8:	f7fd f842 	bl	8004a70 <HAL_GetTick>
 80079ec:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80079ee:	e00c      	b.n	8007a0a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80079f0:	f7fd f83e 	bl	8004a70 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079fe:	d904      	bls.n	8007a0a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2204      	movs	r2, #4
 8007a04:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d102      	bne.n	8007a1e <RTC_EnterInitMode+0x64>
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d1e8      	bne.n	80079f0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a42:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f003 0320 	and.w	r3, r3, #32
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7ff ff89 	bl	800796a <HAL_RTC_WaitForSynchro>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d004      	beq.n	8007a68 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2204      	movs	r2, #4
 8007a62:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	4603      	mov	r3, r0
 8007a7a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007a80:	e005      	b.n	8007a8e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
 8007a84:	3301      	adds	r3, #1
 8007a86:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007a88:	79fb      	ldrb	r3, [r7, #7]
 8007a8a:	3b0a      	subs	r3, #10
 8007a8c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	2b09      	cmp	r3, #9
 8007a92:	d8f6      	bhi.n	8007a82 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	b2db      	uxtb	r3, r3
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007aba:	79fb      	ldrb	r3, [r7, #7]
 8007abc:	091b      	lsrs	r3, r3, #4
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	0092      	lsls	r2, r2, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	f003 030f 	and.w	r3, r3, #15
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	b2db      	uxtb	r3, r3
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e07b      	b.n	8007bee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d108      	bne.n	8007b10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b06:	d009      	beq.n	8007b1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	61da      	str	r2, [r3, #28]
 8007b0e:	e005      	b.n	8007b1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d106      	bne.n	8007b3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7fb fd34 	bl	80035a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b64:	431a      	orrs	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba0:	ea42 0103 	orr.w	r1, r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	0c1b      	lsrs	r3, r3, #16
 8007bba:	f003 0104 	and.w	r1, r3, #4
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	f003 0210 	and.w	r2, r3, #16
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69da      	ldr	r2, [r3, #28]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b088      	sub	sp, #32
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	603b      	str	r3, [r7, #0]
 8007c02:	4613      	mov	r3, r2
 8007c04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d101      	bne.n	8007c18 <HAL_SPI_Transmit+0x22>
 8007c14:	2302      	movs	r3, #2
 8007c16:	e126      	b.n	8007e66 <HAL_SPI_Transmit+0x270>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c20:	f7fc ff26 	bl	8004a70 <HAL_GetTick>
 8007c24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007c26:	88fb      	ldrh	r3, [r7, #6]
 8007c28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d002      	beq.n	8007c3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c36:	2302      	movs	r3, #2
 8007c38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c3a:	e10b      	b.n	8007e54 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <HAL_SPI_Transmit+0x52>
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d102      	bne.n	8007c4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c4c:	e102      	b.n	8007e54 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2203      	movs	r2, #3
 8007c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	88fa      	ldrh	r2, [r7, #6]
 8007c66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	88fa      	ldrh	r2, [r7, #6]
 8007c6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c94:	d10f      	bne.n	8007cb6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ca4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc0:	2b40      	cmp	r3, #64	; 0x40
 8007cc2:	d007      	beq.n	8007cd4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cdc:	d14b      	bne.n	8007d76 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <HAL_SPI_Transmit+0xf6>
 8007ce6:	8afb      	ldrh	r3, [r7, #22]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d13e      	bne.n	8007d6a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf0:	881a      	ldrh	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfc:	1c9a      	adds	r2, r3, #2
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d10:	e02b      	b.n	8007d6a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d112      	bne.n	8007d46 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d24:	881a      	ldrh	r2, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d30:	1c9a      	adds	r2, r3, #2
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	86da      	strh	r2, [r3, #54]	; 0x36
 8007d44:	e011      	b.n	8007d6a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d46:	f7fc fe93 	bl	8004a70 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d803      	bhi.n	8007d5e <HAL_SPI_Transmit+0x168>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5c:	d102      	bne.n	8007d64 <HAL_SPI_Transmit+0x16e>
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d102      	bne.n	8007d6a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d68:	e074      	b.n	8007e54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1ce      	bne.n	8007d12 <HAL_SPI_Transmit+0x11c>
 8007d74:	e04c      	b.n	8007e10 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d002      	beq.n	8007d84 <HAL_SPI_Transmit+0x18e>
 8007d7e:	8afb      	ldrh	r3, [r7, #22]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d140      	bne.n	8007e06 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	330c      	adds	r3, #12
 8007d8e:	7812      	ldrb	r2, [r2, #0]
 8007d90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d96:	1c5a      	adds	r2, r3, #1
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	3b01      	subs	r3, #1
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007daa:	e02c      	b.n	8007e06 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d113      	bne.n	8007de2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	330c      	adds	r3, #12
 8007dc4:	7812      	ldrb	r2, [r2, #0]
 8007dc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	86da      	strh	r2, [r3, #54]	; 0x36
 8007de0:	e011      	b.n	8007e06 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007de2:	f7fc fe45 	bl	8004a70 <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d803      	bhi.n	8007dfa <HAL_SPI_Transmit+0x204>
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df8:	d102      	bne.n	8007e00 <HAL_SPI_Transmit+0x20a>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d102      	bne.n	8007e06 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e04:	e026      	b.n	8007e54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1cd      	bne.n	8007dac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 fa55 	bl	80082c4 <SPI_EndRxTxTransaction>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2220      	movs	r2, #32
 8007e24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10a      	bne.n	8007e44 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e2e:	2300      	movs	r3, #0
 8007e30:	613b      	str	r3, [r7, #16]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	613b      	str	r3, [r7, #16]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	613b      	str	r3, [r7, #16]
 8007e42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	77fb      	strb	r3, [r7, #31]
 8007e50:	e000      	b.n	8007e54 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007e52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e64:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3720      	adds	r7, #32
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b08c      	sub	sp, #48	; 0x30
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	607a      	str	r2, [r7, #4]
 8007e7a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d101      	bne.n	8007e94 <HAL_SPI_TransmitReceive+0x26>
 8007e90:	2302      	movs	r3, #2
 8007e92:	e18a      	b.n	80081aa <HAL_SPI_TransmitReceive+0x33c>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e9c:	f7fc fde8 	bl	8004a70 <HAL_GetTick>
 8007ea0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007eb2:	887b      	ldrh	r3, [r7, #2]
 8007eb4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007eb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d00f      	beq.n	8007ede <HAL_SPI_TransmitReceive+0x70>
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ec4:	d107      	bne.n	8007ed6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d103      	bne.n	8007ed6 <HAL_SPI_TransmitReceive+0x68>
 8007ece:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	d003      	beq.n	8007ede <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007edc:	e15b      	b.n	8008196 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d005      	beq.n	8007ef0 <HAL_SPI_TransmitReceive+0x82>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <HAL_SPI_TransmitReceive+0x82>
 8007eea:	887b      	ldrh	r3, [r7, #2]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d103      	bne.n	8007ef8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007ef6:	e14e      	b.n	8008196 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b04      	cmp	r3, #4
 8007f02:	d003      	beq.n	8007f0c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2205      	movs	r2, #5
 8007f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	887a      	ldrh	r2, [r7, #2]
 8007f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	887a      	ldrh	r2, [r7, #2]
 8007f22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	887a      	ldrh	r2, [r7, #2]
 8007f2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	887a      	ldrh	r2, [r7, #2]
 8007f34:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4c:	2b40      	cmp	r3, #64	; 0x40
 8007f4e:	d007      	beq.n	8007f60 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f68:	d178      	bne.n	800805c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <HAL_SPI_TransmitReceive+0x10a>
 8007f72:	8b7b      	ldrh	r3, [r7, #26]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d166      	bne.n	8008046 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7c:	881a      	ldrh	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f88:	1c9a      	adds	r2, r3, #2
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	3b01      	subs	r3, #1
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f9c:	e053      	b.n	8008046 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d11b      	bne.n	8007fe4 <HAL_SPI_TransmitReceive+0x176>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d016      	beq.n	8007fe4 <HAL_SPI_TransmitReceive+0x176>
 8007fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d113      	bne.n	8007fe4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc0:	881a      	ldrh	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fcc:	1c9a      	adds	r2, r3, #2
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d119      	bne.n	8008026 <HAL_SPI_TransmitReceive+0x1b8>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d014      	beq.n	8008026 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008006:	b292      	uxth	r2, r2
 8008008:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800e:	1c9a      	adds	r2, r3, #2
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008022:	2301      	movs	r3, #1
 8008024:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008026:	f7fc fd23 	bl	8004a70 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008032:	429a      	cmp	r2, r3
 8008034:	d807      	bhi.n	8008046 <HAL_SPI_TransmitReceive+0x1d8>
 8008036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803c:	d003      	beq.n	8008046 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008044:	e0a7      	b.n	8008196 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800804a:	b29b      	uxth	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1a6      	bne.n	8007f9e <HAL_SPI_TransmitReceive+0x130>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008054:	b29b      	uxth	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1a1      	bne.n	8007f9e <HAL_SPI_TransmitReceive+0x130>
 800805a:	e07c      	b.n	8008156 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <HAL_SPI_TransmitReceive+0x1fc>
 8008064:	8b7b      	ldrh	r3, [r7, #26]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d16b      	bne.n	8008142 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	330c      	adds	r3, #12
 8008074:	7812      	ldrb	r2, [r2, #0]
 8008076:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807c:	1c5a      	adds	r2, r3, #1
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008086:	b29b      	uxth	r3, r3
 8008088:	3b01      	subs	r3, #1
 800808a:	b29a      	uxth	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008090:	e057      	b.n	8008142 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	2b02      	cmp	r3, #2
 800809e:	d11c      	bne.n	80080da <HAL_SPI_TransmitReceive+0x26c>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d017      	beq.n	80080da <HAL_SPI_TransmitReceive+0x26c>
 80080aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d114      	bne.n	80080da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	330c      	adds	r3, #12
 80080ba:	7812      	ldrb	r2, [r2, #0]
 80080bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	3b01      	subs	r3, #1
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d119      	bne.n	800811c <HAL_SPI_TransmitReceive+0x2ae>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d014      	beq.n	800811c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68da      	ldr	r2, [r3, #12]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	b2d2      	uxtb	r2, r2
 80080fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008104:	1c5a      	adds	r2, r3, #1
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800810e:	b29b      	uxth	r3, r3
 8008110:	3b01      	subs	r3, #1
 8008112:	b29a      	uxth	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008118:	2301      	movs	r3, #1
 800811a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800811c:	f7fc fca8 	bl	8004a70 <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008128:	429a      	cmp	r2, r3
 800812a:	d803      	bhi.n	8008134 <HAL_SPI_TransmitReceive+0x2c6>
 800812c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008132:	d102      	bne.n	800813a <HAL_SPI_TransmitReceive+0x2cc>
 8008134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008136:	2b00      	cmp	r3, #0
 8008138:	d103      	bne.n	8008142 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008140:	e029      	b.n	8008196 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008146:	b29b      	uxth	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1a2      	bne.n	8008092 <HAL_SPI_TransmitReceive+0x224>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008150:	b29b      	uxth	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d19d      	bne.n	8008092 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008158:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 f8b2 	bl	80082c4 <SPI_EndRxTxTransaction>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d006      	beq.n	8008174 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2220      	movs	r2, #32
 8008170:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008172:	e010      	b.n	8008196 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10b      	bne.n	8008194 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800817c:	2300      	movs	r3, #0
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	e000      	b.n	8008196 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008194:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3730      	adds	r7, #48	; 0x30
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
	...

080081b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	603b      	str	r3, [r7, #0]
 80081c0:	4613      	mov	r3, r2
 80081c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80081c4:	f7fc fc54 	bl	8004a70 <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081cc:	1a9b      	subs	r3, r3, r2
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	4413      	add	r3, r2
 80081d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80081d4:	f7fc fc4c 	bl	8004a70 <HAL_GetTick>
 80081d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80081da:	4b39      	ldr	r3, [pc, #228]	; (80082c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	015b      	lsls	r3, r3, #5
 80081e0:	0d1b      	lsrs	r3, r3, #20
 80081e2:	69fa      	ldr	r2, [r7, #28]
 80081e4:	fb02 f303 	mul.w	r3, r2, r3
 80081e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081ea:	e054      	b.n	8008296 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f2:	d050      	beq.n	8008296 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081f4:	f7fc fc3c 	bl	8004a70 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	69fa      	ldr	r2, [r7, #28]
 8008200:	429a      	cmp	r2, r3
 8008202:	d902      	bls.n	800820a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d13d      	bne.n	8008286 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008218:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008222:	d111      	bne.n	8008248 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800822c:	d004      	beq.n	8008238 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008236:	d107      	bne.n	8008248 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008246:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008250:	d10f      	bne.n	8008272 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008270:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e017      	b.n	80082b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	3b01      	subs	r3, #1
 8008294:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	689a      	ldr	r2, [r3, #8]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4013      	ands	r3, r2
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	bf0c      	ite	eq
 80082a6:	2301      	moveq	r3, #1
 80082a8:	2300      	movne	r3, #0
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	461a      	mov	r2, r3
 80082ae:	79fb      	ldrb	r3, [r7, #7]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d19b      	bne.n	80081ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3720      	adds	r7, #32
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20000864 	.word	0x20000864

080082c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af02      	add	r7, sp, #8
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80082d0:	4b1b      	ldr	r3, [pc, #108]	; (8008340 <SPI_EndRxTxTransaction+0x7c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a1b      	ldr	r2, [pc, #108]	; (8008344 <SPI_EndRxTxTransaction+0x80>)
 80082d6:	fba2 2303 	umull	r2, r3, r2, r3
 80082da:	0d5b      	lsrs	r3, r3, #21
 80082dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082e0:	fb02 f303 	mul.w	r3, r2, r3
 80082e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082ee:	d112      	bne.n	8008316 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2200      	movs	r2, #0
 80082f8:	2180      	movs	r1, #128	; 0x80
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff ff5a 	bl	80081b4 <SPI_WaitFlagStateUntilTimeout>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d016      	beq.n	8008334 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830a:	f043 0220 	orr.w	r2, r3, #32
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e00f      	b.n	8008336 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00a      	beq.n	8008332 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	3b01      	subs	r3, #1
 8008320:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832c:	2b80      	cmp	r3, #128	; 0x80
 800832e:	d0f2      	beq.n	8008316 <SPI_EndRxTxTransaction+0x52>
 8008330:	e000      	b.n	8008334 <SPI_EndRxTxTransaction+0x70>
        break;
 8008332:	bf00      	nop
  }

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	20000864 	.word	0x20000864
 8008344:	165e9f81 	.word	0x165e9f81

08008348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e041      	b.n	80083de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d106      	bne.n	8008374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7fb f9c8 	bl	8003704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3304      	adds	r3, #4
 8008384:	4619      	mov	r1, r3
 8008386:	4610      	mov	r0, r2
 8008388:	f000 fe52 	bl	8009030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d001      	beq.n	8008400 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e03c      	b.n	800847a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2202      	movs	r2, #2
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a1e      	ldr	r2, [pc, #120]	; (8008488 <HAL_TIM_Base_Start+0xa0>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d018      	beq.n	8008444 <HAL_TIM_Base_Start+0x5c>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800841a:	d013      	beq.n	8008444 <HAL_TIM_Base_Start+0x5c>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a1a      	ldr	r2, [pc, #104]	; (800848c <HAL_TIM_Base_Start+0xa4>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d00e      	beq.n	8008444 <HAL_TIM_Base_Start+0x5c>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a19      	ldr	r2, [pc, #100]	; (8008490 <HAL_TIM_Base_Start+0xa8>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d009      	beq.n	8008444 <HAL_TIM_Base_Start+0x5c>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a17      	ldr	r2, [pc, #92]	; (8008494 <HAL_TIM_Base_Start+0xac>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d004      	beq.n	8008444 <HAL_TIM_Base_Start+0x5c>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a16      	ldr	r2, [pc, #88]	; (8008498 <HAL_TIM_Base_Start+0xb0>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d111      	bne.n	8008468 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f003 0307 	and.w	r3, r3, #7
 800844e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b06      	cmp	r3, #6
 8008454:	d010      	beq.n	8008478 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f042 0201 	orr.w	r2, r2, #1
 8008464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008466:	e007      	b.n	8008478 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f042 0201 	orr.w	r2, r2, #1
 8008476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	40010000 	.word	0x40010000
 800848c:	40000400 	.word	0x40000400
 8008490:	40000800 	.word	0x40000800
 8008494:	40000c00 	.word	0x40000c00
 8008498:	40014000 	.word	0x40014000

0800849c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d001      	beq.n	80084b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e044      	b.n	800853e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68da      	ldr	r2, [r3, #12]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f042 0201 	orr.w	r2, r2, #1
 80084ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a1e      	ldr	r2, [pc, #120]	; (800854c <HAL_TIM_Base_Start_IT+0xb0>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d018      	beq.n	8008508 <HAL_TIM_Base_Start_IT+0x6c>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084de:	d013      	beq.n	8008508 <HAL_TIM_Base_Start_IT+0x6c>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a1a      	ldr	r2, [pc, #104]	; (8008550 <HAL_TIM_Base_Start_IT+0xb4>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00e      	beq.n	8008508 <HAL_TIM_Base_Start_IT+0x6c>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a19      	ldr	r2, [pc, #100]	; (8008554 <HAL_TIM_Base_Start_IT+0xb8>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d009      	beq.n	8008508 <HAL_TIM_Base_Start_IT+0x6c>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a17      	ldr	r2, [pc, #92]	; (8008558 <HAL_TIM_Base_Start_IT+0xbc>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d004      	beq.n	8008508 <HAL_TIM_Base_Start_IT+0x6c>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a16      	ldr	r2, [pc, #88]	; (800855c <HAL_TIM_Base_Start_IT+0xc0>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d111      	bne.n	800852c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b06      	cmp	r3, #6
 8008518:	d010      	beq.n	800853c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f042 0201 	orr.w	r2, r2, #1
 8008528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800852a:	e007      	b.n	800853c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f042 0201 	orr.w	r2, r2, #1
 800853a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	40010000 	.word	0x40010000
 8008550:	40000400 	.word	0x40000400
 8008554:	40000800 	.word	0x40000800
 8008558:	40000c00 	.word	0x40000c00
 800855c:	40014000 	.word	0x40014000

08008560 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f022 0201 	bic.w	r2, r2, #1
 8008576:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6a1a      	ldr	r2, [r3, #32]
 800857e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008582:	4013      	ands	r3, r2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10f      	bne.n	80085a8 <HAL_TIM_Base_Stop_IT+0x48>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6a1a      	ldr	r2, [r3, #32]
 800858e:	f240 4344 	movw	r3, #1092	; 0x444
 8008592:	4013      	ands	r3, r2
 8008594:	2b00      	cmp	r3, #0
 8008596:	d107      	bne.n	80085a8 <HAL_TIM_Base_Stop_IT+0x48>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f022 0201 	bic.w	r2, r2, #1
 80085a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b082      	sub	sp, #8
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d101      	bne.n	80085d0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e041      	b.n	8008654 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d106      	bne.n	80085ea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f839 	bl	800865c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2202      	movs	r2, #2
 80085ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3304      	adds	r3, #4
 80085fa:	4619      	mov	r1, r3
 80085fc:	4610      	mov	r0, r2
 80085fe:	f000 fd17 	bl	8009030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d109      	bne.n	8008698 <HAL_TIM_OC_Start_IT+0x28>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b01      	cmp	r3, #1
 800868e:	bf14      	ite	ne
 8008690:	2301      	movne	r3, #1
 8008692:	2300      	moveq	r3, #0
 8008694:	b2db      	uxtb	r3, r3
 8008696:	e022      	b.n	80086de <HAL_TIM_OC_Start_IT+0x6e>
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2b04      	cmp	r3, #4
 800869c:	d109      	bne.n	80086b2 <HAL_TIM_OC_Start_IT+0x42>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	bf14      	ite	ne
 80086aa:	2301      	movne	r3, #1
 80086ac:	2300      	moveq	r3, #0
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	e015      	b.n	80086de <HAL_TIM_OC_Start_IT+0x6e>
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b08      	cmp	r3, #8
 80086b6:	d109      	bne.n	80086cc <HAL_TIM_OC_Start_IT+0x5c>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	bf14      	ite	ne
 80086c4:	2301      	movne	r3, #1
 80086c6:	2300      	moveq	r3, #0
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	e008      	b.n	80086de <HAL_TIM_OC_Start_IT+0x6e>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	bf14      	ite	ne
 80086d8:	2301      	movne	r3, #1
 80086da:	2300      	moveq	r3, #0
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e0b3      	b.n	800884e <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d104      	bne.n	80086f6 <HAL_TIM_OC_Start_IT+0x86>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2202      	movs	r2, #2
 80086f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086f4:	e013      	b.n	800871e <HAL_TIM_OC_Start_IT+0xae>
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	d104      	bne.n	8008706 <HAL_TIM_OC_Start_IT+0x96>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2202      	movs	r2, #2
 8008700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008704:	e00b      	b.n	800871e <HAL_TIM_OC_Start_IT+0xae>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b08      	cmp	r3, #8
 800870a:	d104      	bne.n	8008716 <HAL_TIM_OC_Start_IT+0xa6>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008714:	e003      	b.n	800871e <HAL_TIM_OC_Start_IT+0xae>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2202      	movs	r2, #2
 800871a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	2b0c      	cmp	r3, #12
 8008722:	d841      	bhi.n	80087a8 <HAL_TIM_OC_Start_IT+0x138>
 8008724:	a201      	add	r2, pc, #4	; (adr r2, 800872c <HAL_TIM_OC_Start_IT+0xbc>)
 8008726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872a:	bf00      	nop
 800872c:	08008761 	.word	0x08008761
 8008730:	080087a9 	.word	0x080087a9
 8008734:	080087a9 	.word	0x080087a9
 8008738:	080087a9 	.word	0x080087a9
 800873c:	08008773 	.word	0x08008773
 8008740:	080087a9 	.word	0x080087a9
 8008744:	080087a9 	.word	0x080087a9
 8008748:	080087a9 	.word	0x080087a9
 800874c:	08008785 	.word	0x08008785
 8008750:	080087a9 	.word	0x080087a9
 8008754:	080087a9 	.word	0x080087a9
 8008758:	080087a9 	.word	0x080087a9
 800875c:	08008797 	.word	0x08008797
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68da      	ldr	r2, [r3, #12]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0202 	orr.w	r2, r2, #2
 800876e:	60da      	str	r2, [r3, #12]
      break;
 8008770:	e01d      	b.n	80087ae <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68da      	ldr	r2, [r3, #12]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f042 0204 	orr.w	r2, r2, #4
 8008780:	60da      	str	r2, [r3, #12]
      break;
 8008782:	e014      	b.n	80087ae <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f042 0208 	orr.w	r2, r2, #8
 8008792:	60da      	str	r2, [r3, #12]
      break;
 8008794:	e00b      	b.n	80087ae <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68da      	ldr	r2, [r3, #12]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f042 0210 	orr.w	r2, r2, #16
 80087a4:	60da      	str	r2, [r3, #12]
      break;
 80087a6:	e002      	b.n	80087ae <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	73fb      	strb	r3, [r7, #15]
      break;
 80087ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d14b      	bne.n	800884c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2201      	movs	r2, #1
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 fedd 	bl	800957c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a24      	ldr	r2, [pc, #144]	; (8008858 <HAL_TIM_OC_Start_IT+0x1e8>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d107      	bne.n	80087dc <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087da:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a1d      	ldr	r2, [pc, #116]	; (8008858 <HAL_TIM_OC_Start_IT+0x1e8>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d018      	beq.n	8008818 <HAL_TIM_OC_Start_IT+0x1a8>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ee:	d013      	beq.n	8008818 <HAL_TIM_OC_Start_IT+0x1a8>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a19      	ldr	r2, [pc, #100]	; (800885c <HAL_TIM_OC_Start_IT+0x1ec>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d00e      	beq.n	8008818 <HAL_TIM_OC_Start_IT+0x1a8>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a18      	ldr	r2, [pc, #96]	; (8008860 <HAL_TIM_OC_Start_IT+0x1f0>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d009      	beq.n	8008818 <HAL_TIM_OC_Start_IT+0x1a8>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a16      	ldr	r2, [pc, #88]	; (8008864 <HAL_TIM_OC_Start_IT+0x1f4>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d004      	beq.n	8008818 <HAL_TIM_OC_Start_IT+0x1a8>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a15      	ldr	r2, [pc, #84]	; (8008868 <HAL_TIM_OC_Start_IT+0x1f8>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d111      	bne.n	800883c <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	f003 0307 	and.w	r3, r3, #7
 8008822:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b06      	cmp	r3, #6
 8008828:	d010      	beq.n	800884c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f042 0201 	orr.w	r2, r2, #1
 8008838:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800883a:	e007      	b.n	800884c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f042 0201 	orr.w	r2, r2, #1
 800884a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800884c:	7bfb      	ldrb	r3, [r7, #15]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	40010000 	.word	0x40010000
 800885c:	40000400 	.word	0x40000400
 8008860:	40000800 	.word	0x40000800
 8008864:	40000c00 	.word	0x40000c00
 8008868:	40014000 	.word	0x40014000

0800886c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e097      	b.n	80089b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d106      	bne.n	800889a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7fa fedd 	bl	8003654 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2202      	movs	r2, #2
 800889e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	6812      	ldr	r2, [r2, #0]
 80088ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088b0:	f023 0307 	bic.w	r3, r3, #7
 80088b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	3304      	adds	r3, #4
 80088be:	4619      	mov	r1, r3
 80088c0:	4610      	mov	r0, r2
 80088c2:	f000 fbb5 	bl	8009030 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6a1b      	ldr	r3, [r3, #32]
 80088dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ee:	f023 0303 	bic.w	r3, r3, #3
 80088f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	689a      	ldr	r2, [r3, #8]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	021b      	lsls	r3, r3, #8
 80088fe:	4313      	orrs	r3, r2
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800890c:	f023 030c 	bic.w	r3, r3, #12
 8008910:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800891c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	68da      	ldr	r2, [r3, #12]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	021b      	lsls	r3, r3, #8
 8008928:	4313      	orrs	r3, r2
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	4313      	orrs	r3, r2
 800892e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	011a      	lsls	r2, r3, #4
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	031b      	lsls	r3, r3, #12
 800893c:	4313      	orrs	r3, r2
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	4313      	orrs	r3, r2
 8008942:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800894a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008952:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	011b      	lsls	r3, r3, #4
 800895e:	4313      	orrs	r3, r2
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	4313      	orrs	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2201      	movs	r2, #1
 800899a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3718      	adds	r7, #24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d110      	bne.n	8008a0a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d102      	bne.n	80089f4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80089ee:	7b7b      	ldrb	r3, [r7, #13]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d001      	beq.n	80089f8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e089      	b.n	8008b0c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2202      	movs	r2, #2
 8008a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a08:	e031      	b.n	8008a6e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	d110      	bne.n	8008a32 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d102      	bne.n	8008a1c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a16:	7b3b      	ldrb	r3, [r7, #12]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d001      	beq.n	8008a20 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e075      	b.n	8008b0c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a30:	e01d      	b.n	8008a6e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d108      	bne.n	8008a4a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d105      	bne.n	8008a4a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a3e:	7b7b      	ldrb	r3, [r7, #13]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d102      	bne.n	8008a4a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a44:	7b3b      	ldrb	r3, [r7, #12]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d001      	beq.n	8008a4e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e05e      	b.n	8008b0c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2202      	movs	r2, #2
 8008a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2202      	movs	r2, #2
 8008a5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2202      	movs	r2, #2
 8008a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2202      	movs	r2, #2
 8008a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <HAL_TIM_Encoder_Start_IT+0xc4>
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d010      	beq.n	8008a9c <HAL_TIM_Encoder_Start_IT+0xe4>
 8008a7a:	e01f      	b.n	8008abc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2201      	movs	r2, #1
 8008a82:	2100      	movs	r1, #0
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 fd79 	bl	800957c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68da      	ldr	r2, [r3, #12]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f042 0202 	orr.w	r2, r2, #2
 8008a98:	60da      	str	r2, [r3, #12]
      break;
 8008a9a:	e02e      	b.n	8008afa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	2104      	movs	r1, #4
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 fd69 	bl	800957c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f042 0204 	orr.w	r2, r2, #4
 8008ab8:	60da      	str	r2, [r3, #12]
      break;
 8008aba:	e01e      	b.n	8008afa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 fd59 	bl	800957c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	2104      	movs	r1, #4
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 fd52 	bl	800957c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f042 0202 	orr.w	r2, r2, #2
 8008ae6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68da      	ldr	r2, [r3, #12]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f042 0204 	orr.w	r2, r2, #4
 8008af6:	60da      	str	r2, [r3, #12]
      break;
 8008af8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f042 0201 	orr.w	r2, r2, #1
 8008b08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d122      	bne.n	8008b70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f003 0302 	and.w	r3, r3, #2
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d11b      	bne.n	8008b70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f06f 0202 	mvn.w	r2, #2
 8008b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	f003 0303 	and.w	r3, r3, #3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fa4c 	bl	8008ff4 <HAL_TIM_IC_CaptureCallback>
 8008b5c:	e005      	b.n	8008b6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7f8 fe8c 	bl	800187c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fa4f 	bl	8009008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	f003 0304 	and.w	r3, r3, #4
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	d122      	bne.n	8008bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	f003 0304 	and.w	r3, r3, #4
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d11b      	bne.n	8008bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f06f 0204 	mvn.w	r2, #4
 8008b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d003      	beq.n	8008bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fa22 	bl	8008ff4 <HAL_TIM_IC_CaptureCallback>
 8008bb0:	e005      	b.n	8008bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7f8 fe62 	bl	800187c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fa25 	bl	8009008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	f003 0308 	and.w	r3, r3, #8
 8008bce:	2b08      	cmp	r3, #8
 8008bd0:	d122      	bne.n	8008c18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	f003 0308 	and.w	r3, r3, #8
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d11b      	bne.n	8008c18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f06f 0208 	mvn.w	r2, #8
 8008be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2204      	movs	r2, #4
 8008bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	f003 0303 	and.w	r3, r3, #3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f9f8 	bl	8008ff4 <HAL_TIM_IC_CaptureCallback>
 8008c04:	e005      	b.n	8008c12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7f8 fe38 	bl	800187c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f9fb 	bl	8009008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	f003 0310 	and.w	r3, r3, #16
 8008c22:	2b10      	cmp	r3, #16
 8008c24:	d122      	bne.n	8008c6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f003 0310 	and.w	r3, r3, #16
 8008c30:	2b10      	cmp	r3, #16
 8008c32:	d11b      	bne.n	8008c6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f06f 0210 	mvn.w	r2, #16
 8008c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2208      	movs	r2, #8
 8008c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f9ce 	bl	8008ff4 <HAL_TIM_IC_CaptureCallback>
 8008c58:	e005      	b.n	8008c66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7f8 fe0e 	bl	800187c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f9d1 	bl	8009008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d10e      	bne.n	8008c98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f003 0301 	and.w	r3, r3, #1
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d107      	bne.n	8008c98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f06f 0201 	mvn.w	r2, #1
 8008c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7f8 fdd0 	bl	8001838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca2:	2b80      	cmp	r3, #128	; 0x80
 8008ca4:	d10e      	bne.n	8008cc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb0:	2b80      	cmp	r3, #128	; 0x80
 8008cb2:	d107      	bne.n	8008cc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fcfa 	bl	80096b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cce:	2b40      	cmp	r3, #64	; 0x40
 8008cd0:	d10e      	bne.n	8008cf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cdc:	2b40      	cmp	r3, #64	; 0x40
 8008cde:	d107      	bne.n	8008cf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f996 	bl	800901c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	f003 0320 	and.w	r3, r3, #32
 8008cfa:	2b20      	cmp	r3, #32
 8008cfc:	d10e      	bne.n	8008d1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	f003 0320 	and.w	r3, r3, #32
 8008d08:	2b20      	cmp	r3, #32
 8008d0a:	d107      	bne.n	8008d1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f06f 0220 	mvn.w	r2, #32
 8008d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fcc4 	bl	80096a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d1c:	bf00      	nop
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d101      	bne.n	8008d42 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e048      	b.n	8008dd4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b0c      	cmp	r3, #12
 8008d4e:	d839      	bhi.n	8008dc4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8008d50:	a201      	add	r2, pc, #4	; (adr r2, 8008d58 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d56:	bf00      	nop
 8008d58:	08008d8d 	.word	0x08008d8d
 8008d5c:	08008dc5 	.word	0x08008dc5
 8008d60:	08008dc5 	.word	0x08008dc5
 8008d64:	08008dc5 	.word	0x08008dc5
 8008d68:	08008d9b 	.word	0x08008d9b
 8008d6c:	08008dc5 	.word	0x08008dc5
 8008d70:	08008dc5 	.word	0x08008dc5
 8008d74:	08008dc5 	.word	0x08008dc5
 8008d78:	08008da9 	.word	0x08008da9
 8008d7c:	08008dc5 	.word	0x08008dc5
 8008d80:	08008dc5 	.word	0x08008dc5
 8008d84:	08008dc5 	.word	0x08008dc5
 8008d88:	08008db7 	.word	0x08008db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68b9      	ldr	r1, [r7, #8]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 f9cc 	bl	8009130 <TIM_OC1_SetConfig>
      break;
 8008d98:	e017      	b.n	8008dca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68b9      	ldr	r1, [r7, #8]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f000 fa2b 	bl	80091fc <TIM_OC2_SetConfig>
      break;
 8008da6:	e010      	b.n	8008dca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68b9      	ldr	r1, [r7, #8]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fa90 	bl	80092d4 <TIM_OC3_SetConfig>
      break;
 8008db4:	e009      	b.n	8008dca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68b9      	ldr	r1, [r7, #8]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 faf3 	bl	80093a8 <TIM_OC4_SetConfig>
      break;
 8008dc2:	e002      	b.n	8008dca <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8008dc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3718      	adds	r7, #24
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d101      	bne.n	8008df8 <HAL_TIM_ConfigClockSource+0x1c>
 8008df4:	2302      	movs	r3, #2
 8008df6:	e0b4      	b.n	8008f62 <HAL_TIM_ConfigClockSource+0x186>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2202      	movs	r2, #2
 8008e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e30:	d03e      	beq.n	8008eb0 <HAL_TIM_ConfigClockSource+0xd4>
 8008e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e36:	f200 8087 	bhi.w	8008f48 <HAL_TIM_ConfigClockSource+0x16c>
 8008e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e3e:	f000 8086 	beq.w	8008f4e <HAL_TIM_ConfigClockSource+0x172>
 8008e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e46:	d87f      	bhi.n	8008f48 <HAL_TIM_ConfigClockSource+0x16c>
 8008e48:	2b70      	cmp	r3, #112	; 0x70
 8008e4a:	d01a      	beq.n	8008e82 <HAL_TIM_ConfigClockSource+0xa6>
 8008e4c:	2b70      	cmp	r3, #112	; 0x70
 8008e4e:	d87b      	bhi.n	8008f48 <HAL_TIM_ConfigClockSource+0x16c>
 8008e50:	2b60      	cmp	r3, #96	; 0x60
 8008e52:	d050      	beq.n	8008ef6 <HAL_TIM_ConfigClockSource+0x11a>
 8008e54:	2b60      	cmp	r3, #96	; 0x60
 8008e56:	d877      	bhi.n	8008f48 <HAL_TIM_ConfigClockSource+0x16c>
 8008e58:	2b50      	cmp	r3, #80	; 0x50
 8008e5a:	d03c      	beq.n	8008ed6 <HAL_TIM_ConfigClockSource+0xfa>
 8008e5c:	2b50      	cmp	r3, #80	; 0x50
 8008e5e:	d873      	bhi.n	8008f48 <HAL_TIM_ConfigClockSource+0x16c>
 8008e60:	2b40      	cmp	r3, #64	; 0x40
 8008e62:	d058      	beq.n	8008f16 <HAL_TIM_ConfigClockSource+0x13a>
 8008e64:	2b40      	cmp	r3, #64	; 0x40
 8008e66:	d86f      	bhi.n	8008f48 <HAL_TIM_ConfigClockSource+0x16c>
 8008e68:	2b30      	cmp	r3, #48	; 0x30
 8008e6a:	d064      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0x15a>
 8008e6c:	2b30      	cmp	r3, #48	; 0x30
 8008e6e:	d86b      	bhi.n	8008f48 <HAL_TIM_ConfigClockSource+0x16c>
 8008e70:	2b20      	cmp	r3, #32
 8008e72:	d060      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0x15a>
 8008e74:	2b20      	cmp	r3, #32
 8008e76:	d867      	bhi.n	8008f48 <HAL_TIM_ConfigClockSource+0x16c>
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d05c      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0x15a>
 8008e7c:	2b10      	cmp	r3, #16
 8008e7e:	d05a      	beq.n	8008f36 <HAL_TIM_ConfigClockSource+0x15a>
 8008e80:	e062      	b.n	8008f48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6818      	ldr	r0, [r3, #0]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	6899      	ldr	r1, [r3, #8]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	f000 fb53 	bl	800953c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ea4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	609a      	str	r2, [r3, #8]
      break;
 8008eae:	e04f      	b.n	8008f50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6818      	ldr	r0, [r3, #0]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	6899      	ldr	r1, [r3, #8]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f000 fb3c 	bl	800953c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689a      	ldr	r2, [r3, #8]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ed2:	609a      	str	r2, [r3, #8]
      break;
 8008ed4:	e03c      	b.n	8008f50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6818      	ldr	r0, [r3, #0]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	6859      	ldr	r1, [r3, #4]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	f000 fab0 	bl	8009448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2150      	movs	r1, #80	; 0x50
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 fb09 	bl	8009506 <TIM_ITRx_SetConfig>
      break;
 8008ef4:	e02c      	b.n	8008f50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6818      	ldr	r0, [r3, #0]
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	6859      	ldr	r1, [r3, #4]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	461a      	mov	r2, r3
 8008f04:	f000 facf 	bl	80094a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2160      	movs	r1, #96	; 0x60
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 faf9 	bl	8009506 <TIM_ITRx_SetConfig>
      break;
 8008f14:	e01c      	b.n	8008f50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6818      	ldr	r0, [r3, #0]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	6859      	ldr	r1, [r3, #4]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	461a      	mov	r2, r3
 8008f24:	f000 fa90 	bl	8009448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2140      	movs	r1, #64	; 0x40
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 fae9 	bl	8009506 <TIM_ITRx_SetConfig>
      break;
 8008f34:	e00c      	b.n	8008f50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4610      	mov	r0, r2
 8008f42:	f000 fae0 	bl	8009506 <TIM_ITRx_SetConfig>
      break;
 8008f46:	e003      	b.n	8008f50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008f4c:	e000      	b.n	8008f50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008f4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	2b0c      	cmp	r3, #12
 8008f7e:	d831      	bhi.n	8008fe4 <HAL_TIM_ReadCapturedValue+0x78>
 8008f80:	a201      	add	r2, pc, #4	; (adr r2, 8008f88 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f86:	bf00      	nop
 8008f88:	08008fbd 	.word	0x08008fbd
 8008f8c:	08008fe5 	.word	0x08008fe5
 8008f90:	08008fe5 	.word	0x08008fe5
 8008f94:	08008fe5 	.word	0x08008fe5
 8008f98:	08008fc7 	.word	0x08008fc7
 8008f9c:	08008fe5 	.word	0x08008fe5
 8008fa0:	08008fe5 	.word	0x08008fe5
 8008fa4:	08008fe5 	.word	0x08008fe5
 8008fa8:	08008fd1 	.word	0x08008fd1
 8008fac:	08008fe5 	.word	0x08008fe5
 8008fb0:	08008fe5 	.word	0x08008fe5
 8008fb4:	08008fe5 	.word	0x08008fe5
 8008fb8:	08008fdb 	.word	0x08008fdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc2:	60fb      	str	r3, [r7, #12]

      break;
 8008fc4:	e00f      	b.n	8008fe6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fcc:	60fb      	str	r3, [r7, #12]

      break;
 8008fce:	e00a      	b.n	8008fe6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd6:	60fb      	str	r3, [r7, #12]

      break;
 8008fd8:	e005      	b.n	8008fe6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe0:	60fb      	str	r3, [r7, #12]

      break;
 8008fe2:	e000      	b.n	8008fe6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008fe4:	bf00      	nop
  }

  return tmpreg;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a34      	ldr	r2, [pc, #208]	; (8009114 <TIM_Base_SetConfig+0xe4>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d00f      	beq.n	8009068 <TIM_Base_SetConfig+0x38>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800904e:	d00b      	beq.n	8009068 <TIM_Base_SetConfig+0x38>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a31      	ldr	r2, [pc, #196]	; (8009118 <TIM_Base_SetConfig+0xe8>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d007      	beq.n	8009068 <TIM_Base_SetConfig+0x38>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a30      	ldr	r2, [pc, #192]	; (800911c <TIM_Base_SetConfig+0xec>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d003      	beq.n	8009068 <TIM_Base_SetConfig+0x38>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a2f      	ldr	r2, [pc, #188]	; (8009120 <TIM_Base_SetConfig+0xf0>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d108      	bne.n	800907a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800906e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	4313      	orrs	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a25      	ldr	r2, [pc, #148]	; (8009114 <TIM_Base_SetConfig+0xe4>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d01b      	beq.n	80090ba <TIM_Base_SetConfig+0x8a>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009088:	d017      	beq.n	80090ba <TIM_Base_SetConfig+0x8a>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a22      	ldr	r2, [pc, #136]	; (8009118 <TIM_Base_SetConfig+0xe8>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d013      	beq.n	80090ba <TIM_Base_SetConfig+0x8a>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a21      	ldr	r2, [pc, #132]	; (800911c <TIM_Base_SetConfig+0xec>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d00f      	beq.n	80090ba <TIM_Base_SetConfig+0x8a>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a20      	ldr	r2, [pc, #128]	; (8009120 <TIM_Base_SetConfig+0xf0>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d00b      	beq.n	80090ba <TIM_Base_SetConfig+0x8a>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a1f      	ldr	r2, [pc, #124]	; (8009124 <TIM_Base_SetConfig+0xf4>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d007      	beq.n	80090ba <TIM_Base_SetConfig+0x8a>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a1e      	ldr	r2, [pc, #120]	; (8009128 <TIM_Base_SetConfig+0xf8>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d003      	beq.n	80090ba <TIM_Base_SetConfig+0x8a>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a1d      	ldr	r2, [pc, #116]	; (800912c <TIM_Base_SetConfig+0xfc>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d108      	bne.n	80090cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	689a      	ldr	r2, [r3, #8]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a08      	ldr	r2, [pc, #32]	; (8009114 <TIM_Base_SetConfig+0xe4>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d103      	bne.n	8009100 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	691a      	ldr	r2, [r3, #16]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	615a      	str	r2, [r3, #20]
}
 8009106:	bf00      	nop
 8009108:	3714      	adds	r7, #20
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	40010000 	.word	0x40010000
 8009118:	40000400 	.word	0x40000400
 800911c:	40000800 	.word	0x40000800
 8009120:	40000c00 	.word	0x40000c00
 8009124:	40014000 	.word	0x40014000
 8009128:	40014400 	.word	0x40014400
 800912c:	40014800 	.word	0x40014800

08009130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	f023 0201 	bic.w	r2, r3, #1
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800915e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f023 0303 	bic.w	r3, r3, #3
 8009166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	4313      	orrs	r3, r2
 8009170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f023 0302 	bic.w	r3, r3, #2
 8009178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	4313      	orrs	r3, r2
 8009182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a1c      	ldr	r2, [pc, #112]	; (80091f8 <TIM_OC1_SetConfig+0xc8>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d10c      	bne.n	80091a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f023 0308 	bic.w	r3, r3, #8
 8009192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	697a      	ldr	r2, [r7, #20]
 800919a:	4313      	orrs	r3, r2
 800919c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f023 0304 	bic.w	r3, r3, #4
 80091a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a13      	ldr	r2, [pc, #76]	; (80091f8 <TIM_OC1_SetConfig+0xc8>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d111      	bne.n	80091d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	685a      	ldr	r2, [r3, #4]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	621a      	str	r2, [r3, #32]
}
 80091ec:	bf00      	nop
 80091ee:	371c      	adds	r7, #28
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	40010000 	.word	0x40010000

080091fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b087      	sub	sp, #28
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	f023 0210 	bic.w	r2, r3, #16
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800922a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	021b      	lsls	r3, r3, #8
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	4313      	orrs	r3, r2
 800923e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	f023 0320 	bic.w	r3, r3, #32
 8009246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	011b      	lsls	r3, r3, #4
 800924e:	697a      	ldr	r2, [r7, #20]
 8009250:	4313      	orrs	r3, r2
 8009252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a1e      	ldr	r2, [pc, #120]	; (80092d0 <TIM_OC2_SetConfig+0xd4>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d10d      	bne.n	8009278 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	011b      	lsls	r3, r3, #4
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	4313      	orrs	r3, r2
 800926e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009276:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a15      	ldr	r2, [pc, #84]	; (80092d0 <TIM_OC2_SetConfig+0xd4>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d113      	bne.n	80092a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009286:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800928e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	4313      	orrs	r3, r2
 800929a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	621a      	str	r2, [r3, #32]
}
 80092c2:	bf00      	nop
 80092c4:	371c      	adds	r7, #28
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	40010000 	.word	0x40010000

080092d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b087      	sub	sp, #28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	69db      	ldr	r3, [r3, #28]
 80092fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f023 0303 	bic.w	r3, r3, #3
 800930a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	4313      	orrs	r3, r2
 8009314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800931c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	021b      	lsls	r3, r3, #8
 8009324:	697a      	ldr	r2, [r7, #20]
 8009326:	4313      	orrs	r3, r2
 8009328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a1d      	ldr	r2, [pc, #116]	; (80093a4 <TIM_OC3_SetConfig+0xd0>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d10d      	bne.n	800934e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	021b      	lsls	r3, r3, #8
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	4313      	orrs	r3, r2
 8009344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800934c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a14      	ldr	r2, [pc, #80]	; (80093a4 <TIM_OC3_SetConfig+0xd0>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d113      	bne.n	800937e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800935c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	011b      	lsls	r3, r3, #4
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	4313      	orrs	r3, r2
 8009370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	011b      	lsls	r3, r3, #4
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	4313      	orrs	r3, r2
 800937c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	697a      	ldr	r2, [r7, #20]
 8009396:	621a      	str	r2, [r3, #32]
}
 8009398:	bf00      	nop
 800939a:	371c      	adds	r7, #28
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	40010000 	.word	0x40010000

080093a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b087      	sub	sp, #28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	021b      	lsls	r3, r3, #8
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	031b      	lsls	r3, r3, #12
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a10      	ldr	r2, [pc, #64]	; (8009444 <TIM_OC4_SetConfig+0x9c>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d109      	bne.n	800941c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800940e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	019b      	lsls	r3, r3, #6
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	4313      	orrs	r3, r2
 800941a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	693a      	ldr	r2, [r7, #16]
 8009434:	621a      	str	r2, [r3, #32]
}
 8009436:	bf00      	nop
 8009438:	371c      	adds	r7, #28
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	40010000 	.word	0x40010000

08009448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	f023 0201 	bic.w	r2, r3, #1
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	011b      	lsls	r3, r3, #4
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	4313      	orrs	r3, r2
 800947c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f023 030a 	bic.w	r3, r3, #10
 8009484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	4313      	orrs	r3, r2
 800948c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	621a      	str	r2, [r3, #32]
}
 800949a:	bf00      	nop
 800949c:	371c      	adds	r7, #28
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b087      	sub	sp, #28
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	60f8      	str	r0, [r7, #12]
 80094ae:	60b9      	str	r1, [r7, #8]
 80094b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	f023 0210 	bic.w	r2, r3, #16
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6a1b      	ldr	r3, [r3, #32]
 80094c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	031b      	lsls	r3, r3, #12
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	4313      	orrs	r3, r2
 80094da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	011b      	lsls	r3, r3, #4
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	621a      	str	r2, [r3, #32]
}
 80094fa:	bf00      	nop
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009506:	b480      	push	{r7}
 8009508:	b085      	sub	sp, #20
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800951c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4313      	orrs	r3, r2
 8009524:	f043 0307 	orr.w	r3, r3, #7
 8009528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	609a      	str	r2, [r3, #8]
}
 8009530:	bf00      	nop
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
 8009548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	021a      	lsls	r2, r3, #8
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	431a      	orrs	r2, r3
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	4313      	orrs	r3, r2
 8009564:	697a      	ldr	r2, [r7, #20]
 8009566:	4313      	orrs	r3, r2
 8009568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	609a      	str	r2, [r3, #8]
}
 8009570:	bf00      	nop
 8009572:	371c      	adds	r7, #28
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f003 031f 	and.w	r3, r3, #31
 800958e:	2201      	movs	r2, #1
 8009590:	fa02 f303 	lsl.w	r3, r2, r3
 8009594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6a1a      	ldr	r2, [r3, #32]
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	43db      	mvns	r3, r3
 800959e:	401a      	ands	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6a1a      	ldr	r2, [r3, #32]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	f003 031f 	and.w	r3, r3, #31
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	fa01 f303 	lsl.w	r3, r1, r3
 80095b4:	431a      	orrs	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	621a      	str	r2, [r3, #32]
}
 80095ba:	bf00      	nop
 80095bc:	371c      	adds	r7, #28
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
	...

080095c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d101      	bne.n	80095e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095dc:	2302      	movs	r3, #2
 80095de:	e050      	b.n	8009682 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2202      	movs	r2, #2
 80095ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	4313      	orrs	r3, r2
 8009610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a1c      	ldr	r2, [pc, #112]	; (8009690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d018      	beq.n	8009656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800962c:	d013      	beq.n	8009656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a18      	ldr	r2, [pc, #96]	; (8009694 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d00e      	beq.n	8009656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a16      	ldr	r2, [pc, #88]	; (8009698 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d009      	beq.n	8009656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a15      	ldr	r2, [pc, #84]	; (800969c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d004      	beq.n	8009656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a13      	ldr	r2, [pc, #76]	; (80096a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d10c      	bne.n	8009670 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800965c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	4313      	orrs	r3, r2
 8009666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3714      	adds	r7, #20
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	40010000 	.word	0x40010000
 8009694:	40000400 	.word	0x40000400
 8009698:	40000800 	.word	0x40000800
 800969c:	40000c00 	.word	0x40000c00
 80096a0:	40014000 	.word	0x40014000

080096a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e03f      	b.n	800975e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d106      	bne.n	80096f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7fa f868 	bl	80037c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2224      	movs	r2, #36	; 0x24
 80096fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68da      	ldr	r2, [r3, #12]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800970e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f929 	bl	8009968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	691a      	ldr	r2, [r3, #16]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	695a      	ldr	r2, [r3, #20]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68da      	ldr	r2, [r3, #12]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2220      	movs	r2, #32
 8009750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2220      	movs	r2, #32
 8009758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b08a      	sub	sp, #40	; 0x28
 800976a:	af02      	add	r7, sp, #8
 800976c:	60f8      	str	r0, [r7, #12]
 800976e:	60b9      	str	r1, [r7, #8]
 8009770:	603b      	str	r3, [r7, #0]
 8009772:	4613      	mov	r3, r2
 8009774:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009776:	2300      	movs	r3, #0
 8009778:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b20      	cmp	r3, #32
 8009784:	d17c      	bne.n	8009880 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d002      	beq.n	8009792 <HAL_UART_Transmit+0x2c>
 800978c:	88fb      	ldrh	r3, [r7, #6]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d101      	bne.n	8009796 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e075      	b.n	8009882 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800979c:	2b01      	cmp	r3, #1
 800979e:	d101      	bne.n	80097a4 <HAL_UART_Transmit+0x3e>
 80097a0:	2302      	movs	r3, #2
 80097a2:	e06e      	b.n	8009882 <HAL_UART_Transmit+0x11c>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2221      	movs	r2, #33	; 0x21
 80097b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097ba:	f7fb f959 	bl	8004a70 <HAL_GetTick>
 80097be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	88fa      	ldrh	r2, [r7, #6]
 80097c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	88fa      	ldrh	r2, [r7, #6]
 80097ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097d4:	d108      	bne.n	80097e8 <HAL_UART_Transmit+0x82>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d104      	bne.n	80097e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80097de:	2300      	movs	r3, #0
 80097e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	61bb      	str	r3, [r7, #24]
 80097e6:	e003      	b.n	80097f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097ec:	2300      	movs	r3, #0
 80097ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80097f8:	e02a      	b.n	8009850 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	2200      	movs	r2, #0
 8009802:	2180      	movs	r1, #128	; 0x80
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 f840 	bl	800988a <UART_WaitOnFlagUntilTimeout>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d001      	beq.n	8009814 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e036      	b.n	8009882 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10b      	bne.n	8009832 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	881b      	ldrh	r3, [r3, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009828:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	3302      	adds	r3, #2
 800982e:	61bb      	str	r3, [r7, #24]
 8009830:	e007      	b.n	8009842 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	781a      	ldrb	r2, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	3301      	adds	r3, #1
 8009840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009846:	b29b      	uxth	r3, r3
 8009848:	3b01      	subs	r3, #1
 800984a:	b29a      	uxth	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009854:	b29b      	uxth	r3, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1cf      	bne.n	80097fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	2200      	movs	r2, #0
 8009862:	2140      	movs	r1, #64	; 0x40
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 f810 	bl	800988a <UART_WaitOnFlagUntilTimeout>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e006      	b.n	8009882 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2220      	movs	r2, #32
 8009878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	e000      	b.n	8009882 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009880:	2302      	movs	r3, #2
  }
}
 8009882:	4618      	mov	r0, r3
 8009884:	3720      	adds	r7, #32
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b090      	sub	sp, #64	; 0x40
 800988e:	af00      	add	r7, sp, #0
 8009890:	60f8      	str	r0, [r7, #12]
 8009892:	60b9      	str	r1, [r7, #8]
 8009894:	603b      	str	r3, [r7, #0]
 8009896:	4613      	mov	r3, r2
 8009898:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800989a:	e050      	b.n	800993e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800989c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800989e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a2:	d04c      	beq.n	800993e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80098a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d007      	beq.n	80098ba <UART_WaitOnFlagUntilTimeout+0x30>
 80098aa:	f7fb f8e1 	bl	8004a70 <HAL_GetTick>
 80098ae:	4602      	mov	r2, r0
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d241      	bcs.n	800993e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	330c      	adds	r3, #12
 80098c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c4:	e853 3f00 	ldrex	r3, [r3]
 80098c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	330c      	adds	r3, #12
 80098d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098da:	637a      	str	r2, [r7, #52]	; 0x34
 80098dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098e2:	e841 2300 	strex	r3, r2, [r1]
 80098e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80098e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1e5      	bne.n	80098ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3314      	adds	r3, #20
 80098f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	e853 3f00 	ldrex	r3, [r3]
 80098fc:	613b      	str	r3, [r7, #16]
   return(result);
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	f023 0301 	bic.w	r3, r3, #1
 8009904:	63bb      	str	r3, [r7, #56]	; 0x38
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	3314      	adds	r3, #20
 800990c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800990e:	623a      	str	r2, [r7, #32]
 8009910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009912:	69f9      	ldr	r1, [r7, #28]
 8009914:	6a3a      	ldr	r2, [r7, #32]
 8009916:	e841 2300 	strex	r3, r2, [r1]
 800991a:	61bb      	str	r3, [r7, #24]
   return(result);
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1e5      	bne.n	80098ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2220      	movs	r2, #32
 8009926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2220      	movs	r2, #32
 800992e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	e00f      	b.n	800995e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	4013      	ands	r3, r2
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	429a      	cmp	r2, r3
 800994c:	bf0c      	ite	eq
 800994e:	2301      	moveq	r3, #1
 8009950:	2300      	movne	r3, #0
 8009952:	b2db      	uxtb	r3, r3
 8009954:	461a      	mov	r2, r3
 8009956:	79fb      	ldrb	r3, [r7, #7]
 8009958:	429a      	cmp	r2, r3
 800995a:	d09f      	beq.n	800989c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3740      	adds	r7, #64	; 0x40
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
	...

08009968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800996c:	b0c0      	sub	sp, #256	; 0x100
 800996e:	af00      	add	r7, sp, #0
 8009970:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009984:	68d9      	ldr	r1, [r3, #12]
 8009986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	ea40 0301 	orr.w	r3, r0, r1
 8009990:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009996:	689a      	ldr	r2, [r3, #8]
 8009998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	431a      	orrs	r2, r3
 80099a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	431a      	orrs	r2, r3
 80099a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ac:	69db      	ldr	r3, [r3, #28]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80099b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80099c0:	f021 010c 	bic.w	r1, r1, #12
 80099c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80099ce:	430b      	orrs	r3, r1
 80099d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80099d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80099de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099e2:	6999      	ldr	r1, [r3, #24]
 80099e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	ea40 0301 	orr.w	r3, r0, r1
 80099ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80099f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	4b8f      	ldr	r3, [pc, #572]	; (8009c34 <UART_SetConfig+0x2cc>)
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d005      	beq.n	8009a08 <UART_SetConfig+0xa0>
 80099fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	4b8d      	ldr	r3, [pc, #564]	; (8009c38 <UART_SetConfig+0x2d0>)
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d104      	bne.n	8009a12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a08:	f7fd fc6a 	bl	80072e0 <HAL_RCC_GetPCLK2Freq>
 8009a0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009a10:	e003      	b.n	8009a1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a12:	f7fd fc51 	bl	80072b8 <HAL_RCC_GetPCLK1Freq>
 8009a16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a1e:	69db      	ldr	r3, [r3, #28]
 8009a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a24:	f040 810c 	bne.w	8009c40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009a36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009a3a:	4622      	mov	r2, r4
 8009a3c:	462b      	mov	r3, r5
 8009a3e:	1891      	adds	r1, r2, r2
 8009a40:	65b9      	str	r1, [r7, #88]	; 0x58
 8009a42:	415b      	adcs	r3, r3
 8009a44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	eb12 0801 	adds.w	r8, r2, r1
 8009a50:	4629      	mov	r1, r5
 8009a52:	eb43 0901 	adc.w	r9, r3, r1
 8009a56:	f04f 0200 	mov.w	r2, #0
 8009a5a:	f04f 0300 	mov.w	r3, #0
 8009a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a6a:	4690      	mov	r8, r2
 8009a6c:	4699      	mov	r9, r3
 8009a6e:	4623      	mov	r3, r4
 8009a70:	eb18 0303 	adds.w	r3, r8, r3
 8009a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a78:	462b      	mov	r3, r5
 8009a7a:	eb49 0303 	adc.w	r3, r9, r3
 8009a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009a92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009a96:	460b      	mov	r3, r1
 8009a98:	18db      	adds	r3, r3, r3
 8009a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	eb42 0303 	adc.w	r3, r2, r3
 8009aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8009aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009aa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009aac:	f7f7 f8b4 	bl	8000c18 <__aeabi_uldivmod>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4b61      	ldr	r3, [pc, #388]	; (8009c3c <UART_SetConfig+0x2d4>)
 8009ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8009aba:	095b      	lsrs	r3, r3, #5
 8009abc:	011c      	lsls	r4, r3, #4
 8009abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ac8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009acc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009ad0:	4642      	mov	r2, r8
 8009ad2:	464b      	mov	r3, r9
 8009ad4:	1891      	adds	r1, r2, r2
 8009ad6:	64b9      	str	r1, [r7, #72]	; 0x48
 8009ad8:	415b      	adcs	r3, r3
 8009ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009adc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009ae0:	4641      	mov	r1, r8
 8009ae2:	eb12 0a01 	adds.w	sl, r2, r1
 8009ae6:	4649      	mov	r1, r9
 8009ae8:	eb43 0b01 	adc.w	fp, r3, r1
 8009aec:	f04f 0200 	mov.w	r2, #0
 8009af0:	f04f 0300 	mov.w	r3, #0
 8009af4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009af8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b00:	4692      	mov	sl, r2
 8009b02:	469b      	mov	fp, r3
 8009b04:	4643      	mov	r3, r8
 8009b06:	eb1a 0303 	adds.w	r3, sl, r3
 8009b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b0e:	464b      	mov	r3, r9
 8009b10:	eb4b 0303 	adc.w	r3, fp, r3
 8009b14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009b28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	18db      	adds	r3, r3, r3
 8009b30:	643b      	str	r3, [r7, #64]	; 0x40
 8009b32:	4613      	mov	r3, r2
 8009b34:	eb42 0303 	adc.w	r3, r2, r3
 8009b38:	647b      	str	r3, [r7, #68]	; 0x44
 8009b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009b3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009b42:	f7f7 f869 	bl	8000c18 <__aeabi_uldivmod>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	4b3b      	ldr	r3, [pc, #236]	; (8009c3c <UART_SetConfig+0x2d4>)
 8009b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8009b52:	095b      	lsrs	r3, r3, #5
 8009b54:	2264      	movs	r2, #100	; 0x64
 8009b56:	fb02 f303 	mul.w	r3, r2, r3
 8009b5a:	1acb      	subs	r3, r1, r3
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009b62:	4b36      	ldr	r3, [pc, #216]	; (8009c3c <UART_SetConfig+0x2d4>)
 8009b64:	fba3 2302 	umull	r2, r3, r3, r2
 8009b68:	095b      	lsrs	r3, r3, #5
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b70:	441c      	add	r4, r3
 8009b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b76:	2200      	movs	r2, #0
 8009b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009b80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009b84:	4642      	mov	r2, r8
 8009b86:	464b      	mov	r3, r9
 8009b88:	1891      	adds	r1, r2, r2
 8009b8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009b8c:	415b      	adcs	r3, r3
 8009b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b94:	4641      	mov	r1, r8
 8009b96:	1851      	adds	r1, r2, r1
 8009b98:	6339      	str	r1, [r7, #48]	; 0x30
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	414b      	adcs	r3, r1
 8009b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8009ba0:	f04f 0200 	mov.w	r2, #0
 8009ba4:	f04f 0300 	mov.w	r3, #0
 8009ba8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009bac:	4659      	mov	r1, fp
 8009bae:	00cb      	lsls	r3, r1, #3
 8009bb0:	4651      	mov	r1, sl
 8009bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bb6:	4651      	mov	r1, sl
 8009bb8:	00ca      	lsls	r2, r1, #3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	4642      	mov	r2, r8
 8009bc2:	189b      	adds	r3, r3, r2
 8009bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009bc8:	464b      	mov	r3, r9
 8009bca:	460a      	mov	r2, r1
 8009bcc:	eb42 0303 	adc.w	r3, r2, r3
 8009bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009be0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009be8:	460b      	mov	r3, r1
 8009bea:	18db      	adds	r3, r3, r3
 8009bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bee:	4613      	mov	r3, r2
 8009bf0:	eb42 0303 	adc.w	r3, r2, r3
 8009bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009bfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009bfe:	f7f7 f80b 	bl	8000c18 <__aeabi_uldivmod>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	4b0d      	ldr	r3, [pc, #52]	; (8009c3c <UART_SetConfig+0x2d4>)
 8009c08:	fba3 1302 	umull	r1, r3, r3, r2
 8009c0c:	095b      	lsrs	r3, r3, #5
 8009c0e:	2164      	movs	r1, #100	; 0x64
 8009c10:	fb01 f303 	mul.w	r3, r1, r3
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	3332      	adds	r3, #50	; 0x32
 8009c1a:	4a08      	ldr	r2, [pc, #32]	; (8009c3c <UART_SetConfig+0x2d4>)
 8009c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c20:	095b      	lsrs	r3, r3, #5
 8009c22:	f003 0207 	and.w	r2, r3, #7
 8009c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4422      	add	r2, r4
 8009c2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c30:	e106      	b.n	8009e40 <UART_SetConfig+0x4d8>
 8009c32:	bf00      	nop
 8009c34:	40011000 	.word	0x40011000
 8009c38:	40011400 	.word	0x40011400
 8009c3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c44:	2200      	movs	r2, #0
 8009c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009c4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009c52:	4642      	mov	r2, r8
 8009c54:	464b      	mov	r3, r9
 8009c56:	1891      	adds	r1, r2, r2
 8009c58:	6239      	str	r1, [r7, #32]
 8009c5a:	415b      	adcs	r3, r3
 8009c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c62:	4641      	mov	r1, r8
 8009c64:	1854      	adds	r4, r2, r1
 8009c66:	4649      	mov	r1, r9
 8009c68:	eb43 0501 	adc.w	r5, r3, r1
 8009c6c:	f04f 0200 	mov.w	r2, #0
 8009c70:	f04f 0300 	mov.w	r3, #0
 8009c74:	00eb      	lsls	r3, r5, #3
 8009c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c7a:	00e2      	lsls	r2, r4, #3
 8009c7c:	4614      	mov	r4, r2
 8009c7e:	461d      	mov	r5, r3
 8009c80:	4643      	mov	r3, r8
 8009c82:	18e3      	adds	r3, r4, r3
 8009c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009c88:	464b      	mov	r3, r9
 8009c8a:	eb45 0303 	adc.w	r3, r5, r3
 8009c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009ca2:	f04f 0200 	mov.w	r2, #0
 8009ca6:	f04f 0300 	mov.w	r3, #0
 8009caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009cae:	4629      	mov	r1, r5
 8009cb0:	008b      	lsls	r3, r1, #2
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cb8:	4621      	mov	r1, r4
 8009cba:	008a      	lsls	r2, r1, #2
 8009cbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009cc0:	f7f6 ffaa 	bl	8000c18 <__aeabi_uldivmod>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4b60      	ldr	r3, [pc, #384]	; (8009e4c <UART_SetConfig+0x4e4>)
 8009cca:	fba3 2302 	umull	r2, r3, r3, r2
 8009cce:	095b      	lsrs	r3, r3, #5
 8009cd0:	011c      	lsls	r4, r3, #4
 8009cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009cdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ce0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	464b      	mov	r3, r9
 8009ce8:	1891      	adds	r1, r2, r2
 8009cea:	61b9      	str	r1, [r7, #24]
 8009cec:	415b      	adcs	r3, r3
 8009cee:	61fb      	str	r3, [r7, #28]
 8009cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009cf4:	4641      	mov	r1, r8
 8009cf6:	1851      	adds	r1, r2, r1
 8009cf8:	6139      	str	r1, [r7, #16]
 8009cfa:	4649      	mov	r1, r9
 8009cfc:	414b      	adcs	r3, r1
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	f04f 0200 	mov.w	r2, #0
 8009d04:	f04f 0300 	mov.w	r3, #0
 8009d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d0c:	4659      	mov	r1, fp
 8009d0e:	00cb      	lsls	r3, r1, #3
 8009d10:	4651      	mov	r1, sl
 8009d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d16:	4651      	mov	r1, sl
 8009d18:	00ca      	lsls	r2, r1, #3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4603      	mov	r3, r0
 8009d20:	4642      	mov	r2, r8
 8009d22:	189b      	adds	r3, r3, r2
 8009d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d28:	464b      	mov	r3, r9
 8009d2a:	460a      	mov	r2, r1
 8009d2c:	eb42 0303 	adc.w	r3, r2, r3
 8009d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009d40:	f04f 0200 	mov.w	r2, #0
 8009d44:	f04f 0300 	mov.w	r3, #0
 8009d48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009d4c:	4649      	mov	r1, r9
 8009d4e:	008b      	lsls	r3, r1, #2
 8009d50:	4641      	mov	r1, r8
 8009d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d56:	4641      	mov	r1, r8
 8009d58:	008a      	lsls	r2, r1, #2
 8009d5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009d5e:	f7f6 ff5b 	bl	8000c18 <__aeabi_uldivmod>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	4611      	mov	r1, r2
 8009d68:	4b38      	ldr	r3, [pc, #224]	; (8009e4c <UART_SetConfig+0x4e4>)
 8009d6a:	fba3 2301 	umull	r2, r3, r3, r1
 8009d6e:	095b      	lsrs	r3, r3, #5
 8009d70:	2264      	movs	r2, #100	; 0x64
 8009d72:	fb02 f303 	mul.w	r3, r2, r3
 8009d76:	1acb      	subs	r3, r1, r3
 8009d78:	011b      	lsls	r3, r3, #4
 8009d7a:	3332      	adds	r3, #50	; 0x32
 8009d7c:	4a33      	ldr	r2, [pc, #204]	; (8009e4c <UART_SetConfig+0x4e4>)
 8009d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d82:	095b      	lsrs	r3, r3, #5
 8009d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d88:	441c      	add	r4, r3
 8009d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d8e:	2200      	movs	r2, #0
 8009d90:	673b      	str	r3, [r7, #112]	; 0x70
 8009d92:	677a      	str	r2, [r7, #116]	; 0x74
 8009d94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009d98:	4642      	mov	r2, r8
 8009d9a:	464b      	mov	r3, r9
 8009d9c:	1891      	adds	r1, r2, r2
 8009d9e:	60b9      	str	r1, [r7, #8]
 8009da0:	415b      	adcs	r3, r3
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009da8:	4641      	mov	r1, r8
 8009daa:	1851      	adds	r1, r2, r1
 8009dac:	6039      	str	r1, [r7, #0]
 8009dae:	4649      	mov	r1, r9
 8009db0:	414b      	adcs	r3, r1
 8009db2:	607b      	str	r3, [r7, #4]
 8009db4:	f04f 0200 	mov.w	r2, #0
 8009db8:	f04f 0300 	mov.w	r3, #0
 8009dbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009dc0:	4659      	mov	r1, fp
 8009dc2:	00cb      	lsls	r3, r1, #3
 8009dc4:	4651      	mov	r1, sl
 8009dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009dca:	4651      	mov	r1, sl
 8009dcc:	00ca      	lsls	r2, r1, #3
 8009dce:	4610      	mov	r0, r2
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	4642      	mov	r2, r8
 8009dd6:	189b      	adds	r3, r3, r2
 8009dd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dda:	464b      	mov	r3, r9
 8009ddc:	460a      	mov	r2, r1
 8009dde:	eb42 0303 	adc.w	r3, r2, r3
 8009de2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	663b      	str	r3, [r7, #96]	; 0x60
 8009dee:	667a      	str	r2, [r7, #100]	; 0x64
 8009df0:	f04f 0200 	mov.w	r2, #0
 8009df4:	f04f 0300 	mov.w	r3, #0
 8009df8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	008b      	lsls	r3, r1, #2
 8009e00:	4641      	mov	r1, r8
 8009e02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e06:	4641      	mov	r1, r8
 8009e08:	008a      	lsls	r2, r1, #2
 8009e0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009e0e:	f7f6 ff03 	bl	8000c18 <__aeabi_uldivmod>
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	4b0d      	ldr	r3, [pc, #52]	; (8009e4c <UART_SetConfig+0x4e4>)
 8009e18:	fba3 1302 	umull	r1, r3, r3, r2
 8009e1c:	095b      	lsrs	r3, r3, #5
 8009e1e:	2164      	movs	r1, #100	; 0x64
 8009e20:	fb01 f303 	mul.w	r3, r1, r3
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	011b      	lsls	r3, r3, #4
 8009e28:	3332      	adds	r3, #50	; 0x32
 8009e2a:	4a08      	ldr	r2, [pc, #32]	; (8009e4c <UART_SetConfig+0x4e4>)
 8009e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e30:	095b      	lsrs	r3, r3, #5
 8009e32:	f003 020f 	and.w	r2, r3, #15
 8009e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4422      	add	r2, r4
 8009e3e:	609a      	str	r2, [r3, #8]
}
 8009e40:	bf00      	nop
 8009e42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009e46:	46bd      	mov	sp, r7
 8009e48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e4c:	51eb851f 	.word	0x51eb851f

08009e50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009e54:	4904      	ldr	r1, [pc, #16]	; (8009e68 <MX_FATFS_Init+0x18>)
 8009e56:	4805      	ldr	r0, [pc, #20]	; (8009e6c <MX_FATFS_Init+0x1c>)
 8009e58:	f000 fe8a 	bl	800ab70 <FATFS_LinkDriver>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	461a      	mov	r2, r3
 8009e60:	4b03      	ldr	r3, [pc, #12]	; (8009e70 <MX_FATFS_Init+0x20>)
 8009e62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009e64:	bf00      	nop
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	20019b14 	.word	0x20019b14
 8009e6c:	2000088c 	.word	0x2000088c
 8009e70:	20019b10 	.word	0x20019b10

08009e74 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8009e7e:	79fb      	ldrb	r3, [r7, #7]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7f9 ffd7 	bl	8003e34 <USER_SPI_initialize>
 8009e86:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	4603      	mov	r3, r0
 8009e98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8009e9a:	79fb      	ldrb	r3, [r7, #7]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fa f8b5 	bl	800400c <USER_SPI_status>
 8009ea2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60b9      	str	r1, [r7, #8]
 8009eb4:	607a      	str	r2, [r7, #4]
 8009eb6:	603b      	str	r3, [r7, #0]
 8009eb8:	4603      	mov	r3, r0
 8009eba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8009ebc:	7bf8      	ldrb	r0, [r7, #15]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	68b9      	ldr	r1, [r7, #8]
 8009ec4:	f7fa f8b8 	bl	8004038 <USER_SPI_read>
 8009ec8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b084      	sub	sp, #16
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
 8009edc:	603b      	str	r3, [r7, #0]
 8009ede:	4603      	mov	r3, r0
 8009ee0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8009ee2:	7bf8      	ldrb	r0, [r7, #15]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	68b9      	ldr	r1, [r7, #8]
 8009eea:	f7fa f90b 	bl	8004104 <USER_SPI_write>
 8009eee:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	4603      	mov	r3, r0
 8009f00:	603a      	str	r2, [r7, #0]
 8009f02:	71fb      	strb	r3, [r7, #7]
 8009f04:	460b      	mov	r3, r1
 8009f06:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8009f08:	79b9      	ldrb	r1, [r7, #6]
 8009f0a:	79fb      	ldrb	r3, [r7, #7]
 8009f0c:	683a      	ldr	r2, [r7, #0]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fa f974 	bl	80041fc <USER_SPI_ioctl>
 8009f14:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
	...

08009f20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	4603      	mov	r3, r0
 8009f28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009f2a:	79fb      	ldrb	r3, [r7, #7]
 8009f2c:	4a08      	ldr	r2, [pc, #32]	; (8009f50 <disk_status+0x30>)
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	4413      	add	r3, r2
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	79fa      	ldrb	r2, [r7, #7]
 8009f38:	4905      	ldr	r1, [pc, #20]	; (8009f50 <disk_status+0x30>)
 8009f3a:	440a      	add	r2, r1
 8009f3c:	7a12      	ldrb	r2, [r2, #8]
 8009f3e:	4610      	mov	r0, r2
 8009f40:	4798      	blx	r3
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	20019b40 	.word	0x20019b40

08009f54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009f62:	79fb      	ldrb	r3, [r7, #7]
 8009f64:	4a0d      	ldr	r2, [pc, #52]	; (8009f9c <disk_initialize+0x48>)
 8009f66:	5cd3      	ldrb	r3, [r2, r3]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d111      	bne.n	8009f90 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009f6c:	79fb      	ldrb	r3, [r7, #7]
 8009f6e:	4a0b      	ldr	r2, [pc, #44]	; (8009f9c <disk_initialize+0x48>)
 8009f70:	2101      	movs	r1, #1
 8009f72:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009f74:	79fb      	ldrb	r3, [r7, #7]
 8009f76:	4a09      	ldr	r2, [pc, #36]	; (8009f9c <disk_initialize+0x48>)
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	79fa      	ldrb	r2, [r7, #7]
 8009f82:	4906      	ldr	r1, [pc, #24]	; (8009f9c <disk_initialize+0x48>)
 8009f84:	440a      	add	r2, r1
 8009f86:	7a12      	ldrb	r2, [r2, #8]
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20019b40 	.word	0x20019b40

08009fa0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009fa0:	b590      	push	{r4, r7, lr}
 8009fa2:	b087      	sub	sp, #28
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60b9      	str	r1, [r7, #8]
 8009fa8:	607a      	str	r2, [r7, #4]
 8009faa:	603b      	str	r3, [r7, #0]
 8009fac:	4603      	mov	r3, r0
 8009fae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
 8009fb2:	4a0a      	ldr	r2, [pc, #40]	; (8009fdc <disk_read+0x3c>)
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4413      	add	r3, r2
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	689c      	ldr	r4, [r3, #8]
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	4a07      	ldr	r2, [pc, #28]	; (8009fdc <disk_read+0x3c>)
 8009fc0:	4413      	add	r3, r2
 8009fc2:	7a18      	ldrb	r0, [r3, #8]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	68b9      	ldr	r1, [r7, #8]
 8009fca:	47a0      	blx	r4
 8009fcc:	4603      	mov	r3, r0
 8009fce:	75fb      	strb	r3, [r7, #23]
  return res;
 8009fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	371c      	adds	r7, #28
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd90      	pop	{r4, r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20019b40 	.word	0x20019b40

08009fe0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009fe0:	b590      	push	{r4, r7, lr}
 8009fe2:	b087      	sub	sp, #28
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60b9      	str	r1, [r7, #8]
 8009fe8:	607a      	str	r2, [r7, #4]
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	4603      	mov	r3, r0
 8009fee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
 8009ff2:	4a0a      	ldr	r2, [pc, #40]	; (800a01c <disk_write+0x3c>)
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	68dc      	ldr	r4, [r3, #12]
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
 8009ffe:	4a07      	ldr	r2, [pc, #28]	; (800a01c <disk_write+0x3c>)
 800a000:	4413      	add	r3, r2
 800a002:	7a18      	ldrb	r0, [r3, #8]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	68b9      	ldr	r1, [r7, #8]
 800a00a:	47a0      	blx	r4
 800a00c:	4603      	mov	r3, r0
 800a00e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a010:	7dfb      	ldrb	r3, [r7, #23]
}
 800a012:	4618      	mov	r0, r3
 800a014:	371c      	adds	r7, #28
 800a016:	46bd      	mov	sp, r7
 800a018:	bd90      	pop	{r4, r7, pc}
 800a01a:	bf00      	nop
 800a01c:	20019b40 	.word	0x20019b40

0800a020 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	3301      	adds	r3, #1
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a030:	89fb      	ldrh	r3, [r7, #14]
 800a032:	021b      	lsls	r3, r3, #8
 800a034:	b21a      	sxth	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	b21b      	sxth	r3, r3
 800a03c:	4313      	orrs	r3, r2
 800a03e:	b21b      	sxth	r3, r3
 800a040:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a042:	89fb      	ldrh	r3, [r7, #14]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	3303      	adds	r3, #3
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	021b      	lsls	r3, r3, #8
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	3202      	adds	r2, #2
 800a068:	7812      	ldrb	r2, [r2, #0]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	021b      	lsls	r3, r3, #8
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	3201      	adds	r2, #1
 800a076:	7812      	ldrb	r2, [r2, #0]
 800a078:	4313      	orrs	r3, r2
 800a07a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	021b      	lsls	r3, r3, #8
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	7812      	ldrb	r2, [r2, #0]
 800a084:	4313      	orrs	r3, r2
 800a086:	60fb      	str	r3, [r7, #12]
	return rv;
 800a088:	68fb      	ldr	r3, [r7, #12]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
	...

0800a098 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	60fb      	str	r3, [r7, #12]
 800a0a4:	e010      	b.n	800a0c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a0a6:	4a0d      	ldr	r2, [pc, #52]	; (800a0dc <clear_lock+0x44>)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	011b      	lsls	r3, r3, #4
 800a0ac:	4413      	add	r3, r2
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d105      	bne.n	800a0c2 <clear_lock+0x2a>
 800a0b6:	4a09      	ldr	r2, [pc, #36]	; (800a0dc <clear_lock+0x44>)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	011b      	lsls	r3, r3, #4
 800a0bc:	4413      	add	r3, r2
 800a0be:	2200      	movs	r2, #0
 800a0c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	60fb      	str	r3, [r7, #12]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d9eb      	bls.n	800a0a6 <clear_lock+0xe>
	}
}
 800a0ce:	bf00      	nop
 800a0d0:	bf00      	nop
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	20019b20 	.word	0x20019b20

0800a0e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	78db      	ldrb	r3, [r3, #3]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d034      	beq.n	800a15e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	7858      	ldrb	r0, [r3, #1]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a104:	2301      	movs	r3, #1
 800a106:	697a      	ldr	r2, [r7, #20]
 800a108:	f7ff ff6a 	bl	8009fe0 <disk_write>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d002      	beq.n	800a118 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a112:	2301      	movs	r3, #1
 800a114:	73fb      	strb	r3, [r7, #15]
 800a116:	e022      	b.n	800a15e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a1b      	ldr	r3, [r3, #32]
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	1ad2      	subs	r2, r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d217      	bcs.n	800a15e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	789b      	ldrb	r3, [r3, #2]
 800a132:	613b      	str	r3, [r7, #16]
 800a134:	e010      	b.n	800a158 <sync_window+0x78>
					wsect += fs->fsize;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	697a      	ldr	r2, [r7, #20]
 800a13c:	4413      	add	r3, r2
 800a13e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	7858      	ldrb	r0, [r3, #1]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a14a:	2301      	movs	r3, #1
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	f7ff ff47 	bl	8009fe0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	3b01      	subs	r3, #1
 800a156:	613b      	str	r3, [r7, #16]
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d8eb      	bhi.n	800a136 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3718      	adds	r7, #24
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d01b      	beq.n	800a1b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff ffad 	bl	800a0e0 <sync_window>
 800a186:	4603      	mov	r3, r0
 800a188:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d113      	bne.n	800a1b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	7858      	ldrb	r0, [r3, #1]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a19a:	2301      	movs	r3, #1
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	f7ff feff 	bl	8009fa0 <disk_read>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d004      	beq.n	800a1b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a1a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b086      	sub	sp, #24
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d904      	bls.n	800a1e2 <get_fat+0x20>
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d302      	bcc.n	800a1e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	617b      	str	r3, [r7, #20]
 800a1e6:	e08f      	b.n	800a308 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	d062      	beq.n	800a2bc <get_fat+0xfa>
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	dc7c      	bgt.n	800a2f4 <get_fat+0x132>
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d002      	beq.n	800a204 <get_fat+0x42>
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d042      	beq.n	800a288 <get_fat+0xc6>
 800a202:	e077      	b.n	800a2f4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	085b      	lsrs	r3, r3, #1
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	4413      	add	r3, r2
 800a210:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	6a1a      	ldr	r2, [r3, #32]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	0a5b      	lsrs	r3, r3, #9
 800a21a:	4413      	add	r3, r2
 800a21c:	4619      	mov	r1, r3
 800a21e:	6938      	ldr	r0, [r7, #16]
 800a220:	f7ff ffa2 	bl	800a168 <move_window>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d167      	bne.n	800a2fa <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	60fa      	str	r2, [r7, #12]
 800a230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a234:	693a      	ldr	r2, [r7, #16]
 800a236:	4413      	add	r3, r2
 800a238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a23c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	6a1a      	ldr	r2, [r3, #32]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	0a5b      	lsrs	r3, r3, #9
 800a246:	4413      	add	r3, r2
 800a248:	4619      	mov	r1, r3
 800a24a:	6938      	ldr	r0, [r7, #16]
 800a24c:	f7ff ff8c 	bl	800a168 <move_window>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d153      	bne.n	800a2fe <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	4413      	add	r3, r2
 800a260:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a264:	021b      	lsls	r3, r3, #8
 800a266:	461a      	mov	r2, r3
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	f003 0301 	and.w	r3, r3, #1
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <get_fat+0xbc>
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	091b      	lsrs	r3, r3, #4
 800a27c:	e002      	b.n	800a284 <get_fat+0xc2>
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a284:	617b      	str	r3, [r7, #20]
			break;
 800a286:	e03f      	b.n	800a308 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	6a1a      	ldr	r2, [r3, #32]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	0a1b      	lsrs	r3, r3, #8
 800a290:	4413      	add	r3, r2
 800a292:	4619      	mov	r1, r3
 800a294:	6938      	ldr	r0, [r7, #16]
 800a296:	f7ff ff67 	bl	800a168 <move_window>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d130      	bne.n	800a302 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a2ae:	4413      	add	r3, r2
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7ff feb5 	bl	800a020 <ld_word>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	617b      	str	r3, [r7, #20]
			break;
 800a2ba:	e025      	b.n	800a308 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	6a1a      	ldr	r2, [r3, #32]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	09db      	lsrs	r3, r3, #7
 800a2c4:	4413      	add	r3, r2
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	6938      	ldr	r0, [r7, #16]
 800a2ca:	f7ff ff4d 	bl	800a168 <move_window>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d118      	bne.n	800a306 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a2e2:	4413      	add	r3, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7ff feb3 	bl	800a050 <ld_dword>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a2f0:	617b      	str	r3, [r7, #20]
			break;
 800a2f2:	e009      	b.n	800a308 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	617b      	str	r3, [r7, #20]
 800a2f8:	e006      	b.n	800a308 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2fa:	bf00      	nop
 800a2fc:	e004      	b.n	800a308 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2fe:	bf00      	nop
 800a300:	e002      	b.n	800a308 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a302:	bf00      	nop
 800a304:	e000      	b.n	800a308 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a306:	bf00      	nop
		}
	}

	return val;
 800a308:	697b      	ldr	r3, [r7, #20]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a312:	b480      	push	{r7}
 800a314:	b087      	sub	sp, #28
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a31a:	f04f 33ff 	mov.w	r3, #4294967295
 800a31e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d031      	beq.n	800a38c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	617b      	str	r3, [r7, #20]
 800a32e:	e002      	b.n	800a336 <get_ldnumber+0x24>
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	3301      	adds	r3, #1
 800a334:	617b      	str	r3, [r7, #20]
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	2b20      	cmp	r3, #32
 800a33c:	d903      	bls.n	800a346 <get_ldnumber+0x34>
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	2b3a      	cmp	r3, #58	; 0x3a
 800a344:	d1f4      	bne.n	800a330 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	2b3a      	cmp	r3, #58	; 0x3a
 800a34c:	d11c      	bne.n	800a388 <get_ldnumber+0x76>
			tp = *path;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	1c5a      	adds	r2, r3, #1
 800a358:	60fa      	str	r2, [r7, #12]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	3b30      	subs	r3, #48	; 0x30
 800a35e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	2b09      	cmp	r3, #9
 800a364:	d80e      	bhi.n	800a384 <get_ldnumber+0x72>
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d10a      	bne.n	800a384 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d107      	bne.n	800a384 <get_ldnumber+0x72>
					vol = (int)i;
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	3301      	adds	r3, #1
 800a37c:	617b      	str	r3, [r7, #20]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	e002      	b.n	800a38e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a388:	2300      	movs	r3, #0
 800a38a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a38c:	693b      	ldr	r3, [r7, #16]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	371c      	adds	r7, #28
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr
	...

0800a39c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	70da      	strb	r2, [r3, #3]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7ff fed6 	bl	800a168 <move_window>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <check_fs+0x2a>
 800a3c2:	2304      	movs	r3, #4
 800a3c4:	e038      	b.n	800a438 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	3330      	adds	r3, #48	; 0x30
 800a3ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7ff fe26 	bl	800a020 <ld_word>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d001      	beq.n	800a3e4 <check_fs+0x48>
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e029      	b.n	800a438 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3ea:	2be9      	cmp	r3, #233	; 0xe9
 800a3ec:	d009      	beq.n	800a402 <check_fs+0x66>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3f4:	2beb      	cmp	r3, #235	; 0xeb
 800a3f6:	d11e      	bne.n	800a436 <check_fs+0x9a>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a3fe:	2b90      	cmp	r3, #144	; 0x90
 800a400:	d119      	bne.n	800a436 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	3330      	adds	r3, #48	; 0x30
 800a406:	3336      	adds	r3, #54	; 0x36
 800a408:	4618      	mov	r0, r3
 800a40a:	f7ff fe21 	bl	800a050 <ld_dword>
 800a40e:	4603      	mov	r3, r0
 800a410:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a414:	4a0a      	ldr	r2, [pc, #40]	; (800a440 <check_fs+0xa4>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d101      	bne.n	800a41e <check_fs+0x82>
 800a41a:	2300      	movs	r3, #0
 800a41c:	e00c      	b.n	800a438 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	3330      	adds	r3, #48	; 0x30
 800a422:	3352      	adds	r3, #82	; 0x52
 800a424:	4618      	mov	r0, r3
 800a426:	f7ff fe13 	bl	800a050 <ld_dword>
 800a42a:	4603      	mov	r3, r0
 800a42c:	4a05      	ldr	r2, [pc, #20]	; (800a444 <check_fs+0xa8>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d101      	bne.n	800a436 <check_fs+0x9a>
 800a432:	2300      	movs	r3, #0
 800a434:	e000      	b.n	800a438 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a436:	2302      	movs	r3, #2
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	00544146 	.word	0x00544146
 800a444:	33544146 	.word	0x33544146

0800a448 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b096      	sub	sp, #88	; 0x58
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	4613      	mov	r3, r2
 800a454:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f7ff ff58 	bl	800a312 <get_ldnumber>
 800a462:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a466:	2b00      	cmp	r3, #0
 800a468:	da01      	bge.n	800a46e <find_volume+0x26>
 800a46a:	230b      	movs	r3, #11
 800a46c:	e22d      	b.n	800a8ca <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a46e:	4aa1      	ldr	r2, [pc, #644]	; (800a6f4 <find_volume+0x2ac>)
 800a470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a476:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <find_volume+0x3a>
 800a47e:	230c      	movs	r3, #12
 800a480:	e223      	b.n	800a8ca <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a486:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a488:	79fb      	ldrb	r3, [r7, #7]
 800a48a:	f023 0301 	bic.w	r3, r3, #1
 800a48e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d01a      	beq.n	800a4ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49a:	785b      	ldrb	r3, [r3, #1]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7ff fd3f 	bl	8009f20 <disk_status>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a4a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10c      	bne.n	800a4ce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a4b4:	79fb      	ldrb	r3, [r7, #7]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d007      	beq.n	800a4ca <find_volume+0x82>
 800a4ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a4be:	f003 0304 	and.w	r3, r3, #4
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a4c6:	230a      	movs	r3, #10
 800a4c8:	e1ff      	b.n	800a8ca <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e1fd      	b.n	800a8ca <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a4d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4de:	785b      	ldrb	r3, [r3, #1]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff fd37 	bl	8009f54 <disk_initialize>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a4ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a4f0:	f003 0301 	and.w	r3, r3, #1
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	e1e6      	b.n	800a8ca <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a4fc:	79fb      	ldrb	r3, [r7, #7]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d007      	beq.n	800a512 <find_volume+0xca>
 800a502:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a506:	f003 0304 	and.w	r3, r3, #4
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a50e:	230a      	movs	r3, #10
 800a510:	e1db      	b.n	800a8ca <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a516:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a518:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a51a:	f7ff ff3f 	bl	800a39c <check_fs>
 800a51e:	4603      	mov	r3, r0
 800a520:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a524:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d149      	bne.n	800a5c0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a52c:	2300      	movs	r3, #0
 800a52e:	643b      	str	r3, [r7, #64]	; 0x40
 800a530:	e01e      	b.n	800a570 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a534:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a53a:	011b      	lsls	r3, r3, #4
 800a53c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a540:	4413      	add	r3, r2
 800a542:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a546:	3304      	adds	r3, #4
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d006      	beq.n	800a55c <find_volume+0x114>
 800a54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a550:	3308      	adds	r3, #8
 800a552:	4618      	mov	r0, r3
 800a554:	f7ff fd7c 	bl	800a050 <ld_dword>
 800a558:	4602      	mov	r2, r0
 800a55a:	e000      	b.n	800a55e <find_volume+0x116>
 800a55c:	2200      	movs	r2, #0
 800a55e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	3358      	adds	r3, #88	; 0x58
 800a564:	443b      	add	r3, r7
 800a566:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a56a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a56c:	3301      	adds	r3, #1
 800a56e:	643b      	str	r3, [r7, #64]	; 0x40
 800a570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a572:	2b03      	cmp	r3, #3
 800a574:	d9dd      	bls.n	800a532 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a576:	2300      	movs	r3, #0
 800a578:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a57a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d002      	beq.n	800a586 <find_volume+0x13e>
 800a580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a582:	3b01      	subs	r3, #1
 800a584:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	3358      	adds	r3, #88	; 0x58
 800a58c:	443b      	add	r3, r7
 800a58e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a592:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a596:	2b00      	cmp	r3, #0
 800a598:	d005      	beq.n	800a5a6 <find_volume+0x15e>
 800a59a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a59c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a59e:	f7ff fefd 	bl	800a39c <check_fs>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	e000      	b.n	800a5a8 <find_volume+0x160>
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a5ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d905      	bls.n	800a5c0 <find_volume+0x178>
 800a5b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	643b      	str	r3, [r7, #64]	; 0x40
 800a5ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	d9e2      	bls.n	800a586 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a5c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5c4:	2b04      	cmp	r3, #4
 800a5c6:	d101      	bne.n	800a5cc <find_volume+0x184>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e17e      	b.n	800a8ca <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a5cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d901      	bls.n	800a5d8 <find_volume+0x190>
 800a5d4:	230d      	movs	r3, #13
 800a5d6:	e178      	b.n	800a8ca <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5da:	3330      	adds	r3, #48	; 0x30
 800a5dc:	330b      	adds	r3, #11
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7ff fd1e 	bl	800a020 <ld_word>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5ea:	d001      	beq.n	800a5f0 <find_volume+0x1a8>
 800a5ec:	230d      	movs	r3, #13
 800a5ee:	e16c      	b.n	800a8ca <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f2:	3330      	adds	r3, #48	; 0x30
 800a5f4:	3316      	adds	r3, #22
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7ff fd12 	bl	800a020 <ld_word>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a602:	2b00      	cmp	r3, #0
 800a604:	d106      	bne.n	800a614 <find_volume+0x1cc>
 800a606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a608:	3330      	adds	r3, #48	; 0x30
 800a60a:	3324      	adds	r3, #36	; 0x24
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7ff fd1f 	bl	800a050 <ld_dword>
 800a612:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a616:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a618:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a622:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a626:	789b      	ldrb	r3, [r3, #2]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d005      	beq.n	800a638 <find_volume+0x1f0>
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	789b      	ldrb	r3, [r3, #2]
 800a630:	2b02      	cmp	r3, #2
 800a632:	d001      	beq.n	800a638 <find_volume+0x1f0>
 800a634:	230d      	movs	r3, #13
 800a636:	e148      	b.n	800a8ca <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63a:	789b      	ldrb	r3, [r3, #2]
 800a63c:	461a      	mov	r2, r3
 800a63e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a640:	fb02 f303 	mul.w	r3, r2, r3
 800a644:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a650:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	895b      	ldrh	r3, [r3, #10]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d008      	beq.n	800a66c <find_volume+0x224>
 800a65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65c:	895b      	ldrh	r3, [r3, #10]
 800a65e:	461a      	mov	r2, r3
 800a660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a662:	895b      	ldrh	r3, [r3, #10]
 800a664:	3b01      	subs	r3, #1
 800a666:	4013      	ands	r3, r2
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <find_volume+0x228>
 800a66c:	230d      	movs	r3, #13
 800a66e:	e12c      	b.n	800a8ca <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	3330      	adds	r3, #48	; 0x30
 800a674:	3311      	adds	r3, #17
 800a676:	4618      	mov	r0, r3
 800a678:	f7ff fcd2 	bl	800a020 <ld_word>
 800a67c:	4603      	mov	r3, r0
 800a67e:	461a      	mov	r2, r3
 800a680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a682:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a686:	891b      	ldrh	r3, [r3, #8]
 800a688:	f003 030f 	and.w	r3, r3, #15
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d001      	beq.n	800a696 <find_volume+0x24e>
 800a692:	230d      	movs	r3, #13
 800a694:	e119      	b.n	800a8ca <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a698:	3330      	adds	r3, #48	; 0x30
 800a69a:	3313      	adds	r3, #19
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7ff fcbf 	bl	800a020 <ld_word>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a6a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d106      	bne.n	800a6ba <find_volume+0x272>
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ae:	3330      	adds	r3, #48	; 0x30
 800a6b0:	3320      	adds	r3, #32
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7ff fccc 	bl	800a050 <ld_dword>
 800a6b8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	3330      	adds	r3, #48	; 0x30
 800a6be:	330e      	adds	r3, #14
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7ff fcad 	bl	800a020 <ld_word>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a6ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <find_volume+0x28c>
 800a6d0:	230d      	movs	r3, #13
 800a6d2:	e0fa      	b.n	800a8ca <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a6d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a6d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6d8:	4413      	add	r3, r2
 800a6da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6dc:	8912      	ldrh	r2, [r2, #8]
 800a6de:	0912      	lsrs	r2, r2, #4
 800a6e0:	b292      	uxth	r2, r2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a6e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d204      	bcs.n	800a6f8 <find_volume+0x2b0>
 800a6ee:	230d      	movs	r3, #13
 800a6f0:	e0eb      	b.n	800a8ca <find_volume+0x482>
 800a6f2:	bf00      	nop
 800a6f4:	20019b18 	.word	0x20019b18
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a6f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a700:	8952      	ldrh	r2, [r2, #10]
 800a702:	fbb3 f3f2 	udiv	r3, r3, r2
 800a706:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <find_volume+0x2ca>
 800a70e:	230d      	movs	r3, #13
 800a710:	e0db      	b.n	800a8ca <find_volume+0x482>
		fmt = FS_FAT32;
 800a712:	2303      	movs	r3, #3
 800a714:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a71e:	4293      	cmp	r3, r2
 800a720:	d802      	bhi.n	800a728 <find_volume+0x2e0>
 800a722:	2302      	movs	r3, #2
 800a724:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a72e:	4293      	cmp	r3, r2
 800a730:	d802      	bhi.n	800a738 <find_volume+0x2f0>
 800a732:	2301      	movs	r3, #1
 800a734:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73a:	1c9a      	adds	r2, r3, #2
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a742:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a744:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a746:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a74a:	441a      	add	r2, r3
 800a74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a750:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a754:	441a      	add	r2, r3
 800a756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a758:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a75a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d11e      	bne.n	800a7a0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a764:	3330      	adds	r3, #48	; 0x30
 800a766:	332a      	adds	r3, #42	; 0x2a
 800a768:	4618      	mov	r0, r3
 800a76a:	f7ff fc59 	bl	800a020 <ld_word>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <find_volume+0x330>
 800a774:	230d      	movs	r3, #13
 800a776:	e0a8      	b.n	800a8ca <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77a:	891b      	ldrh	r3, [r3, #8]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <find_volume+0x33c>
 800a780:	230d      	movs	r3, #13
 800a782:	e0a2      	b.n	800a8ca <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a786:	3330      	adds	r3, #48	; 0x30
 800a788:	332c      	adds	r3, #44	; 0x2c
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7ff fc60 	bl	800a050 <ld_dword>
 800a790:	4602      	mov	r2, r0
 800a792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a794:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	647b      	str	r3, [r7, #68]	; 0x44
 800a79e:	e01f      	b.n	800a7e0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a2:	891b      	ldrh	r3, [r3, #8]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d101      	bne.n	800a7ac <find_volume+0x364>
 800a7a8:	230d      	movs	r3, #13
 800a7aa:	e08e      	b.n	800a8ca <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ae:	6a1a      	ldr	r2, [r3, #32]
 800a7b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b2:	441a      	add	r2, r3
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a7b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	d103      	bne.n	800a7c8 <find_volume+0x380>
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	e00a      	b.n	800a7de <find_volume+0x396>
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	695a      	ldr	r2, [r3, #20]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	005b      	lsls	r3, r3, #1
 800a7d0:	4413      	add	r3, r2
 800a7d2:	085a      	lsrs	r2, r3, #1
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d6:	695b      	ldr	r3, [r3, #20]
 800a7d8:	f003 0301 	and.w	r3, r3, #1
 800a7dc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a7de:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e2:	699a      	ldr	r2, [r3, #24]
 800a7e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7e6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a7ea:	0a5b      	lsrs	r3, r3, #9
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d201      	bcs.n	800a7f4 <find_volume+0x3ac>
 800a7f0:	230d      	movs	r3, #13
 800a7f2:	e06a      	b.n	800a8ca <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fa:	611a      	str	r2, [r3, #16]
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	691a      	ldr	r2, [r3, #16]
 800a800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a802:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a806:	2280      	movs	r2, #128	; 0x80
 800a808:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a80a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d149      	bne.n	800a8a6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a814:	3330      	adds	r3, #48	; 0x30
 800a816:	3330      	adds	r3, #48	; 0x30
 800a818:	4618      	mov	r0, r3
 800a81a:	f7ff fc01 	bl	800a020 <ld_word>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b01      	cmp	r3, #1
 800a822:	d140      	bne.n	800a8a6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a826:	3301      	adds	r3, #1
 800a828:	4619      	mov	r1, r3
 800a82a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a82c:	f7ff fc9c 	bl	800a168 <move_window>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d137      	bne.n	800a8a6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a838:	2200      	movs	r2, #0
 800a83a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83e:	3330      	adds	r3, #48	; 0x30
 800a840:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a844:	4618      	mov	r0, r3
 800a846:	f7ff fbeb 	bl	800a020 <ld_word>
 800a84a:	4603      	mov	r3, r0
 800a84c:	461a      	mov	r2, r3
 800a84e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a852:	429a      	cmp	r2, r3
 800a854:	d127      	bne.n	800a8a6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a858:	3330      	adds	r3, #48	; 0x30
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7ff fbf8 	bl	800a050 <ld_dword>
 800a860:	4603      	mov	r3, r0
 800a862:	4a1c      	ldr	r2, [pc, #112]	; (800a8d4 <find_volume+0x48c>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d11e      	bne.n	800a8a6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86a:	3330      	adds	r3, #48	; 0x30
 800a86c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a870:	4618      	mov	r0, r3
 800a872:	f7ff fbed 	bl	800a050 <ld_dword>
 800a876:	4603      	mov	r3, r0
 800a878:	4a17      	ldr	r2, [pc, #92]	; (800a8d8 <find_volume+0x490>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d113      	bne.n	800a8a6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a880:	3330      	adds	r3, #48	; 0x30
 800a882:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff fbe2 	bl	800a050 <ld_dword>
 800a88c:	4602      	mov	r2, r0
 800a88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a890:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a894:	3330      	adds	r3, #48	; 0x30
 800a896:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7ff fbd8 	bl	800a050 <ld_dword>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a8ac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a8ae:	4b0b      	ldr	r3, [pc, #44]	; (800a8dc <find_volume+0x494>)
 800a8b0:	881b      	ldrh	r3, [r3, #0]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	4b09      	ldr	r3, [pc, #36]	; (800a8dc <find_volume+0x494>)
 800a8b8:	801a      	strh	r2, [r3, #0]
 800a8ba:	4b08      	ldr	r3, [pc, #32]	; (800a8dc <find_volume+0x494>)
 800a8bc:	881a      	ldrh	r2, [r3, #0]
 800a8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a8c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a8c4:	f7ff fbe8 	bl	800a098 <clear_lock>
#endif
	return FR_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3758      	adds	r7, #88	; 0x58
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	41615252 	.word	0x41615252
 800a8d8:	61417272 	.word	0x61417272
 800a8dc:	20019b1c 	.word	0x20019b1c

0800a8e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b088      	sub	sp, #32
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a8f2:	f107 0310 	add.w	r3, r7, #16
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff fd0b 	bl	800a312 <get_ldnumber>
 800a8fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	2b00      	cmp	r3, #0
 800a902:	da01      	bge.n	800a908 <f_mount+0x28>
 800a904:	230b      	movs	r3, #11
 800a906:	e02b      	b.n	800a960 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a908:	4a17      	ldr	r2, [pc, #92]	; (800a968 <f_mount+0x88>)
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a910:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d005      	beq.n	800a924 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a918:	69b8      	ldr	r0, [r7, #24]
 800a91a:	f7ff fbbd 	bl	800a098 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	2200      	movs	r2, #0
 800a922:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d002      	beq.n	800a930 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	490d      	ldr	r1, [pc, #52]	; (800a968 <f_mount+0x88>)
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <f_mount+0x66>
 800a940:	79fb      	ldrb	r3, [r7, #7]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d001      	beq.n	800a94a <f_mount+0x6a>
 800a946:	2300      	movs	r3, #0
 800a948:	e00a      	b.n	800a960 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a94a:	f107 010c 	add.w	r1, r7, #12
 800a94e:	f107 0308 	add.w	r3, r7, #8
 800a952:	2200      	movs	r2, #0
 800a954:	4618      	mov	r0, r3
 800a956:	f7ff fd77 	bl	800a448 <find_volume>
 800a95a:	4603      	mov	r3, r0
 800a95c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a95e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3720      	adds	r7, #32
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	20019b18 	.word	0x20019b18

0800a96c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b092      	sub	sp, #72	; 0x48
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a978:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a97c:	f107 030c 	add.w	r3, r7, #12
 800a980:	2200      	movs	r2, #0
 800a982:	4618      	mov	r0, r3
 800a984:	f7ff fd60 	bl	800a448 <find_volume>
 800a988:	4603      	mov	r3, r0
 800a98a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800a98e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a992:	2b00      	cmp	r3, #0
 800a994:	f040 8099 	bne.w	800aaca <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a0:	691a      	ldr	r2, [r3, #16]
 800a9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	3b02      	subs	r3, #2
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d804      	bhi.n	800a9b6 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ae:	691a      	ldr	r2, [r3, #16]
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	601a      	str	r2, [r3, #0]
 800a9b4:	e089      	b.n	800aaca <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d128      	bne.n	800aa14 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a9c2:	2302      	movs	r3, #2
 800a9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c8:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a9ca:	f107 0314 	add.w	r3, r7, #20
 800a9ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7ff fbf6 	bl	800a1c2 <get_fat>
 800a9d6:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9de:	d103      	bne.n	800a9e8 <f_getfree+0x7c>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a9e6:	e063      	b.n	800aab0 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d103      	bne.n	800a9f6 <f_getfree+0x8a>
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a9f4:	e05c      	b.n	800aab0 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d102      	bne.n	800aa02 <f_getfree+0x96>
 800a9fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9fe:	3301      	adds	r3, #1
 800aa00:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800aa02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa04:	3301      	adds	r3, #1
 800aa06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0a:	695b      	ldr	r3, [r3, #20]
 800aa0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d3db      	bcc.n	800a9ca <f_getfree+0x5e>
 800aa12:	e04d      	b.n	800aab0 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800aa14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa16:	695b      	ldr	r3, [r3, #20]
 800aa18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	637b      	str	r3, [r7, #52]	; 0x34
 800aa24:	2300      	movs	r3, #0
 800aa26:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800aa28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d113      	bne.n	800aa56 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800aa2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa32:	1c5a      	adds	r2, r3, #1
 800aa34:	63ba      	str	r2, [r7, #56]	; 0x38
 800aa36:	4619      	mov	r1, r3
 800aa38:	f7ff fb96 	bl	800a168 <move_window>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800aa42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d131      	bne.n	800aaae <f_getfree+0x142>
							p = fs->win;
 800aa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4c:	3330      	adds	r3, #48	; 0x30
 800aa4e:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800aa50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa54:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800aa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d10f      	bne.n	800aa7e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800aa5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa60:	f7ff fade 	bl	800a020 <ld_word>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d102      	bne.n	800aa70 <f_getfree+0x104>
 800aa6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800aa70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa72:	3302      	adds	r3, #2
 800aa74:	633b      	str	r3, [r7, #48]	; 0x30
 800aa76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa78:	3b02      	subs	r3, #2
 800aa7a:	637b      	str	r3, [r7, #52]	; 0x34
 800aa7c:	e010      	b.n	800aaa0 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800aa7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa80:	f7ff fae6 	bl	800a050 <ld_dword>
 800aa84:	4603      	mov	r3, r0
 800aa86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d102      	bne.n	800aa94 <f_getfree+0x128>
 800aa8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa90:	3301      	adds	r3, #1
 800aa92:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800aa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa96:	3304      	adds	r3, #4
 800aa98:	633b      	str	r3, [r7, #48]	; 0x30
 800aa9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa9c:	3b04      	subs	r3, #4
 800aa9e:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800aaa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1bd      	bne.n	800aa28 <f_getfree+0xbc>
 800aaac:	e000      	b.n	800aab0 <f_getfree+0x144>
							if (res != FR_OK) break;
 800aaae:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aab4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800aab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aaba:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800aabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabe:	791a      	ldrb	r2, [r3, #4]
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	f042 0201 	orr.w	r2, r2, #1
 800aac6:	b2d2      	uxtb	r2, r2
 800aac8:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800aaca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3748      	adds	r7, #72	; 0x48
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
	...

0800aad8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aad8:	b480      	push	{r7}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	4613      	mov	r3, r2
 800aae4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aae6:	2301      	movs	r3, #1
 800aae8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aaea:	2300      	movs	r3, #0
 800aaec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aaee:	4b1f      	ldr	r3, [pc, #124]	; (800ab6c <FATFS_LinkDriverEx+0x94>)
 800aaf0:	7a5b      	ldrb	r3, [r3, #9]
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d131      	bne.n	800ab5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aaf8:	4b1c      	ldr	r3, [pc, #112]	; (800ab6c <FATFS_LinkDriverEx+0x94>)
 800aafa:	7a5b      	ldrb	r3, [r3, #9]
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	461a      	mov	r2, r3
 800ab00:	4b1a      	ldr	r3, [pc, #104]	; (800ab6c <FATFS_LinkDriverEx+0x94>)
 800ab02:	2100      	movs	r1, #0
 800ab04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ab06:	4b19      	ldr	r3, [pc, #100]	; (800ab6c <FATFS_LinkDriverEx+0x94>)
 800ab08:	7a5b      	ldrb	r3, [r3, #9]
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	4a17      	ldr	r2, [pc, #92]	; (800ab6c <FATFS_LinkDriverEx+0x94>)
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	4413      	add	r3, r2
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ab16:	4b15      	ldr	r3, [pc, #84]	; (800ab6c <FATFS_LinkDriverEx+0x94>)
 800ab18:	7a5b      	ldrb	r3, [r3, #9]
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	4b13      	ldr	r3, [pc, #76]	; (800ab6c <FATFS_LinkDriverEx+0x94>)
 800ab20:	4413      	add	r3, r2
 800ab22:	79fa      	ldrb	r2, [r7, #7]
 800ab24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ab26:	4b11      	ldr	r3, [pc, #68]	; (800ab6c <FATFS_LinkDriverEx+0x94>)
 800ab28:	7a5b      	ldrb	r3, [r3, #9]
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	1c5a      	adds	r2, r3, #1
 800ab2e:	b2d1      	uxtb	r1, r2
 800ab30:	4a0e      	ldr	r2, [pc, #56]	; (800ab6c <FATFS_LinkDriverEx+0x94>)
 800ab32:	7251      	strb	r1, [r2, #9]
 800ab34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ab36:	7dbb      	ldrb	r3, [r7, #22]
 800ab38:	3330      	adds	r3, #48	; 0x30
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	3301      	adds	r3, #1
 800ab44:	223a      	movs	r2, #58	; 0x3a
 800ab46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	3302      	adds	r3, #2
 800ab4c:	222f      	movs	r2, #47	; 0x2f
 800ab4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	3303      	adds	r3, #3
 800ab54:	2200      	movs	r2, #0
 800ab56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	371c      	adds	r7, #28
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	20019b40 	.word	0x20019b40

0800ab70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	6839      	ldr	r1, [r7, #0]
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7ff ffaa 	bl	800aad8 <FATFS_LinkDriverEx>
 800ab84:	4603      	mov	r3, r0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3708      	adds	r7, #8
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <__cvt>:
 800ab8e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab92:	ec55 4b10 	vmov	r4, r5, d0
 800ab96:	2d00      	cmp	r5, #0
 800ab98:	460e      	mov	r6, r1
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	462b      	mov	r3, r5
 800ab9e:	bfbb      	ittet	lt
 800aba0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aba4:	461d      	movlt	r5, r3
 800aba6:	2300      	movge	r3, #0
 800aba8:	232d      	movlt	r3, #45	; 0x2d
 800abaa:	700b      	strb	r3, [r1, #0]
 800abac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800abb2:	4691      	mov	r9, r2
 800abb4:	f023 0820 	bic.w	r8, r3, #32
 800abb8:	bfbc      	itt	lt
 800abba:	4622      	movlt	r2, r4
 800abbc:	4614      	movlt	r4, r2
 800abbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800abc2:	d005      	beq.n	800abd0 <__cvt+0x42>
 800abc4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800abc8:	d100      	bne.n	800abcc <__cvt+0x3e>
 800abca:	3601      	adds	r6, #1
 800abcc:	2102      	movs	r1, #2
 800abce:	e000      	b.n	800abd2 <__cvt+0x44>
 800abd0:	2103      	movs	r1, #3
 800abd2:	ab03      	add	r3, sp, #12
 800abd4:	9301      	str	r3, [sp, #4]
 800abd6:	ab02      	add	r3, sp, #8
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	ec45 4b10 	vmov	d0, r4, r5
 800abde:	4653      	mov	r3, sl
 800abe0:	4632      	mov	r2, r6
 800abe2:	f000 ffdd 	bl	800bba0 <_dtoa_r>
 800abe6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800abea:	4607      	mov	r7, r0
 800abec:	d102      	bne.n	800abf4 <__cvt+0x66>
 800abee:	f019 0f01 	tst.w	r9, #1
 800abf2:	d022      	beq.n	800ac3a <__cvt+0xac>
 800abf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800abf8:	eb07 0906 	add.w	r9, r7, r6
 800abfc:	d110      	bne.n	800ac20 <__cvt+0x92>
 800abfe:	783b      	ldrb	r3, [r7, #0]
 800ac00:	2b30      	cmp	r3, #48	; 0x30
 800ac02:	d10a      	bne.n	800ac1a <__cvt+0x8c>
 800ac04:	2200      	movs	r2, #0
 800ac06:	2300      	movs	r3, #0
 800ac08:	4620      	mov	r0, r4
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	f7f5 ff74 	bl	8000af8 <__aeabi_dcmpeq>
 800ac10:	b918      	cbnz	r0, 800ac1a <__cvt+0x8c>
 800ac12:	f1c6 0601 	rsb	r6, r6, #1
 800ac16:	f8ca 6000 	str.w	r6, [sl]
 800ac1a:	f8da 3000 	ldr.w	r3, [sl]
 800ac1e:	4499      	add	r9, r3
 800ac20:	2200      	movs	r2, #0
 800ac22:	2300      	movs	r3, #0
 800ac24:	4620      	mov	r0, r4
 800ac26:	4629      	mov	r1, r5
 800ac28:	f7f5 ff66 	bl	8000af8 <__aeabi_dcmpeq>
 800ac2c:	b108      	cbz	r0, 800ac32 <__cvt+0xa4>
 800ac2e:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac32:	2230      	movs	r2, #48	; 0x30
 800ac34:	9b03      	ldr	r3, [sp, #12]
 800ac36:	454b      	cmp	r3, r9
 800ac38:	d307      	bcc.n	800ac4a <__cvt+0xbc>
 800ac3a:	9b03      	ldr	r3, [sp, #12]
 800ac3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac3e:	1bdb      	subs	r3, r3, r7
 800ac40:	4638      	mov	r0, r7
 800ac42:	6013      	str	r3, [r2, #0]
 800ac44:	b004      	add	sp, #16
 800ac46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac4a:	1c59      	adds	r1, r3, #1
 800ac4c:	9103      	str	r1, [sp, #12]
 800ac4e:	701a      	strb	r2, [r3, #0]
 800ac50:	e7f0      	b.n	800ac34 <__cvt+0xa6>

0800ac52 <__exponent>:
 800ac52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac54:	4603      	mov	r3, r0
 800ac56:	2900      	cmp	r1, #0
 800ac58:	bfb8      	it	lt
 800ac5a:	4249      	neglt	r1, r1
 800ac5c:	f803 2b02 	strb.w	r2, [r3], #2
 800ac60:	bfb4      	ite	lt
 800ac62:	222d      	movlt	r2, #45	; 0x2d
 800ac64:	222b      	movge	r2, #43	; 0x2b
 800ac66:	2909      	cmp	r1, #9
 800ac68:	7042      	strb	r2, [r0, #1]
 800ac6a:	dd2a      	ble.n	800acc2 <__exponent+0x70>
 800ac6c:	f10d 0207 	add.w	r2, sp, #7
 800ac70:	4617      	mov	r7, r2
 800ac72:	260a      	movs	r6, #10
 800ac74:	4694      	mov	ip, r2
 800ac76:	fb91 f5f6 	sdiv	r5, r1, r6
 800ac7a:	fb06 1415 	mls	r4, r6, r5, r1
 800ac7e:	3430      	adds	r4, #48	; 0x30
 800ac80:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ac84:	460c      	mov	r4, r1
 800ac86:	2c63      	cmp	r4, #99	; 0x63
 800ac88:	f102 32ff 	add.w	r2, r2, #4294967295
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	dcf1      	bgt.n	800ac74 <__exponent+0x22>
 800ac90:	3130      	adds	r1, #48	; 0x30
 800ac92:	f1ac 0402 	sub.w	r4, ip, #2
 800ac96:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ac9a:	1c41      	adds	r1, r0, #1
 800ac9c:	4622      	mov	r2, r4
 800ac9e:	42ba      	cmp	r2, r7
 800aca0:	d30a      	bcc.n	800acb8 <__exponent+0x66>
 800aca2:	f10d 0209 	add.w	r2, sp, #9
 800aca6:	eba2 020c 	sub.w	r2, r2, ip
 800acaa:	42bc      	cmp	r4, r7
 800acac:	bf88      	it	hi
 800acae:	2200      	movhi	r2, #0
 800acb0:	4413      	add	r3, r2
 800acb2:	1a18      	subs	r0, r3, r0
 800acb4:	b003      	add	sp, #12
 800acb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800acbc:	f801 5f01 	strb.w	r5, [r1, #1]!
 800acc0:	e7ed      	b.n	800ac9e <__exponent+0x4c>
 800acc2:	2330      	movs	r3, #48	; 0x30
 800acc4:	3130      	adds	r1, #48	; 0x30
 800acc6:	7083      	strb	r3, [r0, #2]
 800acc8:	70c1      	strb	r1, [r0, #3]
 800acca:	1d03      	adds	r3, r0, #4
 800accc:	e7f1      	b.n	800acb2 <__exponent+0x60>
	...

0800acd0 <_printf_float>:
 800acd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd4:	ed2d 8b02 	vpush	{d8}
 800acd8:	b08d      	sub	sp, #52	; 0x34
 800acda:	460c      	mov	r4, r1
 800acdc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ace0:	4616      	mov	r6, r2
 800ace2:	461f      	mov	r7, r3
 800ace4:	4605      	mov	r5, r0
 800ace6:	f000 fe4b 	bl	800b980 <_localeconv_r>
 800acea:	f8d0 a000 	ldr.w	sl, [r0]
 800acee:	4650      	mov	r0, sl
 800acf0:	f7f5 fad6 	bl	80002a0 <strlen>
 800acf4:	2300      	movs	r3, #0
 800acf6:	930a      	str	r3, [sp, #40]	; 0x28
 800acf8:	6823      	ldr	r3, [r4, #0]
 800acfa:	9305      	str	r3, [sp, #20]
 800acfc:	f8d8 3000 	ldr.w	r3, [r8]
 800ad00:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ad04:	3307      	adds	r3, #7
 800ad06:	f023 0307 	bic.w	r3, r3, #7
 800ad0a:	f103 0208 	add.w	r2, r3, #8
 800ad0e:	f8c8 2000 	str.w	r2, [r8]
 800ad12:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad1a:	9307      	str	r3, [sp, #28]
 800ad1c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad20:	ee08 0a10 	vmov	s16, r0
 800ad24:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ad28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad2c:	4b9e      	ldr	r3, [pc, #632]	; (800afa8 <_printf_float+0x2d8>)
 800ad2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad32:	f7f5 ff13 	bl	8000b5c <__aeabi_dcmpun>
 800ad36:	bb88      	cbnz	r0, 800ad9c <_printf_float+0xcc>
 800ad38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad3c:	4b9a      	ldr	r3, [pc, #616]	; (800afa8 <_printf_float+0x2d8>)
 800ad3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad42:	f7f5 feed 	bl	8000b20 <__aeabi_dcmple>
 800ad46:	bb48      	cbnz	r0, 800ad9c <_printf_float+0xcc>
 800ad48:	2200      	movs	r2, #0
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	4640      	mov	r0, r8
 800ad4e:	4649      	mov	r1, r9
 800ad50:	f7f5 fedc 	bl	8000b0c <__aeabi_dcmplt>
 800ad54:	b110      	cbz	r0, 800ad5c <_printf_float+0x8c>
 800ad56:	232d      	movs	r3, #45	; 0x2d
 800ad58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad5c:	4a93      	ldr	r2, [pc, #588]	; (800afac <_printf_float+0x2dc>)
 800ad5e:	4b94      	ldr	r3, [pc, #592]	; (800afb0 <_printf_float+0x2e0>)
 800ad60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ad64:	bf94      	ite	ls
 800ad66:	4690      	movls	r8, r2
 800ad68:	4698      	movhi	r8, r3
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	6123      	str	r3, [r4, #16]
 800ad6e:	9b05      	ldr	r3, [sp, #20]
 800ad70:	f023 0304 	bic.w	r3, r3, #4
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	f04f 0900 	mov.w	r9, #0
 800ad7a:	9700      	str	r7, [sp, #0]
 800ad7c:	4633      	mov	r3, r6
 800ad7e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ad80:	4621      	mov	r1, r4
 800ad82:	4628      	mov	r0, r5
 800ad84:	f000 f9da 	bl	800b13c <_printf_common>
 800ad88:	3001      	adds	r0, #1
 800ad8a:	f040 8090 	bne.w	800aeae <_printf_float+0x1de>
 800ad8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad92:	b00d      	add	sp, #52	; 0x34
 800ad94:	ecbd 8b02 	vpop	{d8}
 800ad98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9c:	4642      	mov	r2, r8
 800ad9e:	464b      	mov	r3, r9
 800ada0:	4640      	mov	r0, r8
 800ada2:	4649      	mov	r1, r9
 800ada4:	f7f5 feda 	bl	8000b5c <__aeabi_dcmpun>
 800ada8:	b140      	cbz	r0, 800adbc <_printf_float+0xec>
 800adaa:	464b      	mov	r3, r9
 800adac:	2b00      	cmp	r3, #0
 800adae:	bfbc      	itt	lt
 800adb0:	232d      	movlt	r3, #45	; 0x2d
 800adb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800adb6:	4a7f      	ldr	r2, [pc, #508]	; (800afb4 <_printf_float+0x2e4>)
 800adb8:	4b7f      	ldr	r3, [pc, #508]	; (800afb8 <_printf_float+0x2e8>)
 800adba:	e7d1      	b.n	800ad60 <_printf_float+0x90>
 800adbc:	6863      	ldr	r3, [r4, #4]
 800adbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800adc2:	9206      	str	r2, [sp, #24]
 800adc4:	1c5a      	adds	r2, r3, #1
 800adc6:	d13f      	bne.n	800ae48 <_printf_float+0x178>
 800adc8:	2306      	movs	r3, #6
 800adca:	6063      	str	r3, [r4, #4]
 800adcc:	9b05      	ldr	r3, [sp, #20]
 800adce:	6861      	ldr	r1, [r4, #4]
 800add0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800add4:	2300      	movs	r3, #0
 800add6:	9303      	str	r3, [sp, #12]
 800add8:	ab0a      	add	r3, sp, #40	; 0x28
 800adda:	e9cd b301 	strd	fp, r3, [sp, #4]
 800adde:	ab09      	add	r3, sp, #36	; 0x24
 800ade0:	ec49 8b10 	vmov	d0, r8, r9
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	6022      	str	r2, [r4, #0]
 800ade8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800adec:	4628      	mov	r0, r5
 800adee:	f7ff fece 	bl	800ab8e <__cvt>
 800adf2:	9b06      	ldr	r3, [sp, #24]
 800adf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adf6:	2b47      	cmp	r3, #71	; 0x47
 800adf8:	4680      	mov	r8, r0
 800adfa:	d108      	bne.n	800ae0e <_printf_float+0x13e>
 800adfc:	1cc8      	adds	r0, r1, #3
 800adfe:	db02      	blt.n	800ae06 <_printf_float+0x136>
 800ae00:	6863      	ldr	r3, [r4, #4]
 800ae02:	4299      	cmp	r1, r3
 800ae04:	dd41      	ble.n	800ae8a <_printf_float+0x1ba>
 800ae06:	f1ab 0302 	sub.w	r3, fp, #2
 800ae0a:	fa5f fb83 	uxtb.w	fp, r3
 800ae0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae12:	d820      	bhi.n	800ae56 <_printf_float+0x186>
 800ae14:	3901      	subs	r1, #1
 800ae16:	465a      	mov	r2, fp
 800ae18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ae1c:	9109      	str	r1, [sp, #36]	; 0x24
 800ae1e:	f7ff ff18 	bl	800ac52 <__exponent>
 800ae22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae24:	1813      	adds	r3, r2, r0
 800ae26:	2a01      	cmp	r2, #1
 800ae28:	4681      	mov	r9, r0
 800ae2a:	6123      	str	r3, [r4, #16]
 800ae2c:	dc02      	bgt.n	800ae34 <_printf_float+0x164>
 800ae2e:	6822      	ldr	r2, [r4, #0]
 800ae30:	07d2      	lsls	r2, r2, #31
 800ae32:	d501      	bpl.n	800ae38 <_printf_float+0x168>
 800ae34:	3301      	adds	r3, #1
 800ae36:	6123      	str	r3, [r4, #16]
 800ae38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d09c      	beq.n	800ad7a <_printf_float+0xaa>
 800ae40:	232d      	movs	r3, #45	; 0x2d
 800ae42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae46:	e798      	b.n	800ad7a <_printf_float+0xaa>
 800ae48:	9a06      	ldr	r2, [sp, #24]
 800ae4a:	2a47      	cmp	r2, #71	; 0x47
 800ae4c:	d1be      	bne.n	800adcc <_printf_float+0xfc>
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1bc      	bne.n	800adcc <_printf_float+0xfc>
 800ae52:	2301      	movs	r3, #1
 800ae54:	e7b9      	b.n	800adca <_printf_float+0xfa>
 800ae56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ae5a:	d118      	bne.n	800ae8e <_printf_float+0x1be>
 800ae5c:	2900      	cmp	r1, #0
 800ae5e:	6863      	ldr	r3, [r4, #4]
 800ae60:	dd0b      	ble.n	800ae7a <_printf_float+0x1aa>
 800ae62:	6121      	str	r1, [r4, #16]
 800ae64:	b913      	cbnz	r3, 800ae6c <_printf_float+0x19c>
 800ae66:	6822      	ldr	r2, [r4, #0]
 800ae68:	07d0      	lsls	r0, r2, #31
 800ae6a:	d502      	bpl.n	800ae72 <_printf_float+0x1a2>
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	440b      	add	r3, r1
 800ae70:	6123      	str	r3, [r4, #16]
 800ae72:	65a1      	str	r1, [r4, #88]	; 0x58
 800ae74:	f04f 0900 	mov.w	r9, #0
 800ae78:	e7de      	b.n	800ae38 <_printf_float+0x168>
 800ae7a:	b913      	cbnz	r3, 800ae82 <_printf_float+0x1b2>
 800ae7c:	6822      	ldr	r2, [r4, #0]
 800ae7e:	07d2      	lsls	r2, r2, #31
 800ae80:	d501      	bpl.n	800ae86 <_printf_float+0x1b6>
 800ae82:	3302      	adds	r3, #2
 800ae84:	e7f4      	b.n	800ae70 <_printf_float+0x1a0>
 800ae86:	2301      	movs	r3, #1
 800ae88:	e7f2      	b.n	800ae70 <_printf_float+0x1a0>
 800ae8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ae8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae90:	4299      	cmp	r1, r3
 800ae92:	db05      	blt.n	800aea0 <_printf_float+0x1d0>
 800ae94:	6823      	ldr	r3, [r4, #0]
 800ae96:	6121      	str	r1, [r4, #16]
 800ae98:	07d8      	lsls	r0, r3, #31
 800ae9a:	d5ea      	bpl.n	800ae72 <_printf_float+0x1a2>
 800ae9c:	1c4b      	adds	r3, r1, #1
 800ae9e:	e7e7      	b.n	800ae70 <_printf_float+0x1a0>
 800aea0:	2900      	cmp	r1, #0
 800aea2:	bfd4      	ite	le
 800aea4:	f1c1 0202 	rsble	r2, r1, #2
 800aea8:	2201      	movgt	r2, #1
 800aeaa:	4413      	add	r3, r2
 800aeac:	e7e0      	b.n	800ae70 <_printf_float+0x1a0>
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	055a      	lsls	r2, r3, #21
 800aeb2:	d407      	bmi.n	800aec4 <_printf_float+0x1f4>
 800aeb4:	6923      	ldr	r3, [r4, #16]
 800aeb6:	4642      	mov	r2, r8
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4628      	mov	r0, r5
 800aebc:	47b8      	blx	r7
 800aebe:	3001      	adds	r0, #1
 800aec0:	d12c      	bne.n	800af1c <_printf_float+0x24c>
 800aec2:	e764      	b.n	800ad8e <_printf_float+0xbe>
 800aec4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aec8:	f240 80e0 	bls.w	800b08c <_printf_float+0x3bc>
 800aecc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aed0:	2200      	movs	r2, #0
 800aed2:	2300      	movs	r3, #0
 800aed4:	f7f5 fe10 	bl	8000af8 <__aeabi_dcmpeq>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d034      	beq.n	800af46 <_printf_float+0x276>
 800aedc:	4a37      	ldr	r2, [pc, #220]	; (800afbc <_printf_float+0x2ec>)
 800aede:	2301      	movs	r3, #1
 800aee0:	4631      	mov	r1, r6
 800aee2:	4628      	mov	r0, r5
 800aee4:	47b8      	blx	r7
 800aee6:	3001      	adds	r0, #1
 800aee8:	f43f af51 	beq.w	800ad8e <_printf_float+0xbe>
 800aeec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aef0:	429a      	cmp	r2, r3
 800aef2:	db02      	blt.n	800aefa <_printf_float+0x22a>
 800aef4:	6823      	ldr	r3, [r4, #0]
 800aef6:	07d8      	lsls	r0, r3, #31
 800aef8:	d510      	bpl.n	800af1c <_printf_float+0x24c>
 800aefa:	ee18 3a10 	vmov	r3, s16
 800aefe:	4652      	mov	r2, sl
 800af00:	4631      	mov	r1, r6
 800af02:	4628      	mov	r0, r5
 800af04:	47b8      	blx	r7
 800af06:	3001      	adds	r0, #1
 800af08:	f43f af41 	beq.w	800ad8e <_printf_float+0xbe>
 800af0c:	f04f 0800 	mov.w	r8, #0
 800af10:	f104 091a 	add.w	r9, r4, #26
 800af14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af16:	3b01      	subs	r3, #1
 800af18:	4543      	cmp	r3, r8
 800af1a:	dc09      	bgt.n	800af30 <_printf_float+0x260>
 800af1c:	6823      	ldr	r3, [r4, #0]
 800af1e:	079b      	lsls	r3, r3, #30
 800af20:	f100 8107 	bmi.w	800b132 <_printf_float+0x462>
 800af24:	68e0      	ldr	r0, [r4, #12]
 800af26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af28:	4298      	cmp	r0, r3
 800af2a:	bfb8      	it	lt
 800af2c:	4618      	movlt	r0, r3
 800af2e:	e730      	b.n	800ad92 <_printf_float+0xc2>
 800af30:	2301      	movs	r3, #1
 800af32:	464a      	mov	r2, r9
 800af34:	4631      	mov	r1, r6
 800af36:	4628      	mov	r0, r5
 800af38:	47b8      	blx	r7
 800af3a:	3001      	adds	r0, #1
 800af3c:	f43f af27 	beq.w	800ad8e <_printf_float+0xbe>
 800af40:	f108 0801 	add.w	r8, r8, #1
 800af44:	e7e6      	b.n	800af14 <_printf_float+0x244>
 800af46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af48:	2b00      	cmp	r3, #0
 800af4a:	dc39      	bgt.n	800afc0 <_printf_float+0x2f0>
 800af4c:	4a1b      	ldr	r2, [pc, #108]	; (800afbc <_printf_float+0x2ec>)
 800af4e:	2301      	movs	r3, #1
 800af50:	4631      	mov	r1, r6
 800af52:	4628      	mov	r0, r5
 800af54:	47b8      	blx	r7
 800af56:	3001      	adds	r0, #1
 800af58:	f43f af19 	beq.w	800ad8e <_printf_float+0xbe>
 800af5c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800af60:	4313      	orrs	r3, r2
 800af62:	d102      	bne.n	800af6a <_printf_float+0x29a>
 800af64:	6823      	ldr	r3, [r4, #0]
 800af66:	07d9      	lsls	r1, r3, #31
 800af68:	d5d8      	bpl.n	800af1c <_printf_float+0x24c>
 800af6a:	ee18 3a10 	vmov	r3, s16
 800af6e:	4652      	mov	r2, sl
 800af70:	4631      	mov	r1, r6
 800af72:	4628      	mov	r0, r5
 800af74:	47b8      	blx	r7
 800af76:	3001      	adds	r0, #1
 800af78:	f43f af09 	beq.w	800ad8e <_printf_float+0xbe>
 800af7c:	f04f 0900 	mov.w	r9, #0
 800af80:	f104 0a1a 	add.w	sl, r4, #26
 800af84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af86:	425b      	negs	r3, r3
 800af88:	454b      	cmp	r3, r9
 800af8a:	dc01      	bgt.n	800af90 <_printf_float+0x2c0>
 800af8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af8e:	e792      	b.n	800aeb6 <_printf_float+0x1e6>
 800af90:	2301      	movs	r3, #1
 800af92:	4652      	mov	r2, sl
 800af94:	4631      	mov	r1, r6
 800af96:	4628      	mov	r0, r5
 800af98:	47b8      	blx	r7
 800af9a:	3001      	adds	r0, #1
 800af9c:	f43f aef7 	beq.w	800ad8e <_printf_float+0xbe>
 800afa0:	f109 0901 	add.w	r9, r9, #1
 800afa4:	e7ee      	b.n	800af84 <_printf_float+0x2b4>
 800afa6:	bf00      	nop
 800afa8:	7fefffff 	.word	0x7fefffff
 800afac:	0800f970 	.word	0x0800f970
 800afb0:	0800f974 	.word	0x0800f974
 800afb4:	0800f978 	.word	0x0800f978
 800afb8:	0800f97c 	.word	0x0800f97c
 800afbc:	0800f980 	.word	0x0800f980
 800afc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afc4:	429a      	cmp	r2, r3
 800afc6:	bfa8      	it	ge
 800afc8:	461a      	movge	r2, r3
 800afca:	2a00      	cmp	r2, #0
 800afcc:	4691      	mov	r9, r2
 800afce:	dc37      	bgt.n	800b040 <_printf_float+0x370>
 800afd0:	f04f 0b00 	mov.w	fp, #0
 800afd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afd8:	f104 021a 	add.w	r2, r4, #26
 800afdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afde:	9305      	str	r3, [sp, #20]
 800afe0:	eba3 0309 	sub.w	r3, r3, r9
 800afe4:	455b      	cmp	r3, fp
 800afe6:	dc33      	bgt.n	800b050 <_printf_float+0x380>
 800afe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afec:	429a      	cmp	r2, r3
 800afee:	db3b      	blt.n	800b068 <_printf_float+0x398>
 800aff0:	6823      	ldr	r3, [r4, #0]
 800aff2:	07da      	lsls	r2, r3, #31
 800aff4:	d438      	bmi.n	800b068 <_printf_float+0x398>
 800aff6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800affa:	eba2 0903 	sub.w	r9, r2, r3
 800affe:	9b05      	ldr	r3, [sp, #20]
 800b000:	1ad2      	subs	r2, r2, r3
 800b002:	4591      	cmp	r9, r2
 800b004:	bfa8      	it	ge
 800b006:	4691      	movge	r9, r2
 800b008:	f1b9 0f00 	cmp.w	r9, #0
 800b00c:	dc35      	bgt.n	800b07a <_printf_float+0x3aa>
 800b00e:	f04f 0800 	mov.w	r8, #0
 800b012:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b016:	f104 0a1a 	add.w	sl, r4, #26
 800b01a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b01e:	1a9b      	subs	r3, r3, r2
 800b020:	eba3 0309 	sub.w	r3, r3, r9
 800b024:	4543      	cmp	r3, r8
 800b026:	f77f af79 	ble.w	800af1c <_printf_float+0x24c>
 800b02a:	2301      	movs	r3, #1
 800b02c:	4652      	mov	r2, sl
 800b02e:	4631      	mov	r1, r6
 800b030:	4628      	mov	r0, r5
 800b032:	47b8      	blx	r7
 800b034:	3001      	adds	r0, #1
 800b036:	f43f aeaa 	beq.w	800ad8e <_printf_float+0xbe>
 800b03a:	f108 0801 	add.w	r8, r8, #1
 800b03e:	e7ec      	b.n	800b01a <_printf_float+0x34a>
 800b040:	4613      	mov	r3, r2
 800b042:	4631      	mov	r1, r6
 800b044:	4642      	mov	r2, r8
 800b046:	4628      	mov	r0, r5
 800b048:	47b8      	blx	r7
 800b04a:	3001      	adds	r0, #1
 800b04c:	d1c0      	bne.n	800afd0 <_printf_float+0x300>
 800b04e:	e69e      	b.n	800ad8e <_printf_float+0xbe>
 800b050:	2301      	movs	r3, #1
 800b052:	4631      	mov	r1, r6
 800b054:	4628      	mov	r0, r5
 800b056:	9205      	str	r2, [sp, #20]
 800b058:	47b8      	blx	r7
 800b05a:	3001      	adds	r0, #1
 800b05c:	f43f ae97 	beq.w	800ad8e <_printf_float+0xbe>
 800b060:	9a05      	ldr	r2, [sp, #20]
 800b062:	f10b 0b01 	add.w	fp, fp, #1
 800b066:	e7b9      	b.n	800afdc <_printf_float+0x30c>
 800b068:	ee18 3a10 	vmov	r3, s16
 800b06c:	4652      	mov	r2, sl
 800b06e:	4631      	mov	r1, r6
 800b070:	4628      	mov	r0, r5
 800b072:	47b8      	blx	r7
 800b074:	3001      	adds	r0, #1
 800b076:	d1be      	bne.n	800aff6 <_printf_float+0x326>
 800b078:	e689      	b.n	800ad8e <_printf_float+0xbe>
 800b07a:	9a05      	ldr	r2, [sp, #20]
 800b07c:	464b      	mov	r3, r9
 800b07e:	4442      	add	r2, r8
 800b080:	4631      	mov	r1, r6
 800b082:	4628      	mov	r0, r5
 800b084:	47b8      	blx	r7
 800b086:	3001      	adds	r0, #1
 800b088:	d1c1      	bne.n	800b00e <_printf_float+0x33e>
 800b08a:	e680      	b.n	800ad8e <_printf_float+0xbe>
 800b08c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b08e:	2a01      	cmp	r2, #1
 800b090:	dc01      	bgt.n	800b096 <_printf_float+0x3c6>
 800b092:	07db      	lsls	r3, r3, #31
 800b094:	d53a      	bpl.n	800b10c <_printf_float+0x43c>
 800b096:	2301      	movs	r3, #1
 800b098:	4642      	mov	r2, r8
 800b09a:	4631      	mov	r1, r6
 800b09c:	4628      	mov	r0, r5
 800b09e:	47b8      	blx	r7
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	f43f ae74 	beq.w	800ad8e <_printf_float+0xbe>
 800b0a6:	ee18 3a10 	vmov	r3, s16
 800b0aa:	4652      	mov	r2, sl
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	47b8      	blx	r7
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	f43f ae6b 	beq.w	800ad8e <_printf_float+0xbe>
 800b0b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0bc:	2200      	movs	r2, #0
 800b0be:	2300      	movs	r3, #0
 800b0c0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b0c4:	f7f5 fd18 	bl	8000af8 <__aeabi_dcmpeq>
 800b0c8:	b9d8      	cbnz	r0, 800b102 <_printf_float+0x432>
 800b0ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b0ce:	f108 0201 	add.w	r2, r8, #1
 800b0d2:	4631      	mov	r1, r6
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	47b8      	blx	r7
 800b0d8:	3001      	adds	r0, #1
 800b0da:	d10e      	bne.n	800b0fa <_printf_float+0x42a>
 800b0dc:	e657      	b.n	800ad8e <_printf_float+0xbe>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	4652      	mov	r2, sl
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	47b8      	blx	r7
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	f43f ae50 	beq.w	800ad8e <_printf_float+0xbe>
 800b0ee:	f108 0801 	add.w	r8, r8, #1
 800b0f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	4543      	cmp	r3, r8
 800b0f8:	dcf1      	bgt.n	800b0de <_printf_float+0x40e>
 800b0fa:	464b      	mov	r3, r9
 800b0fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b100:	e6da      	b.n	800aeb8 <_printf_float+0x1e8>
 800b102:	f04f 0800 	mov.w	r8, #0
 800b106:	f104 0a1a 	add.w	sl, r4, #26
 800b10a:	e7f2      	b.n	800b0f2 <_printf_float+0x422>
 800b10c:	2301      	movs	r3, #1
 800b10e:	4642      	mov	r2, r8
 800b110:	e7df      	b.n	800b0d2 <_printf_float+0x402>
 800b112:	2301      	movs	r3, #1
 800b114:	464a      	mov	r2, r9
 800b116:	4631      	mov	r1, r6
 800b118:	4628      	mov	r0, r5
 800b11a:	47b8      	blx	r7
 800b11c:	3001      	adds	r0, #1
 800b11e:	f43f ae36 	beq.w	800ad8e <_printf_float+0xbe>
 800b122:	f108 0801 	add.w	r8, r8, #1
 800b126:	68e3      	ldr	r3, [r4, #12]
 800b128:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b12a:	1a5b      	subs	r3, r3, r1
 800b12c:	4543      	cmp	r3, r8
 800b12e:	dcf0      	bgt.n	800b112 <_printf_float+0x442>
 800b130:	e6f8      	b.n	800af24 <_printf_float+0x254>
 800b132:	f04f 0800 	mov.w	r8, #0
 800b136:	f104 0919 	add.w	r9, r4, #25
 800b13a:	e7f4      	b.n	800b126 <_printf_float+0x456>

0800b13c <_printf_common>:
 800b13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b140:	4616      	mov	r6, r2
 800b142:	4699      	mov	r9, r3
 800b144:	688a      	ldr	r2, [r1, #8]
 800b146:	690b      	ldr	r3, [r1, #16]
 800b148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b14c:	4293      	cmp	r3, r2
 800b14e:	bfb8      	it	lt
 800b150:	4613      	movlt	r3, r2
 800b152:	6033      	str	r3, [r6, #0]
 800b154:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b158:	4607      	mov	r7, r0
 800b15a:	460c      	mov	r4, r1
 800b15c:	b10a      	cbz	r2, 800b162 <_printf_common+0x26>
 800b15e:	3301      	adds	r3, #1
 800b160:	6033      	str	r3, [r6, #0]
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	0699      	lsls	r1, r3, #26
 800b166:	bf42      	ittt	mi
 800b168:	6833      	ldrmi	r3, [r6, #0]
 800b16a:	3302      	addmi	r3, #2
 800b16c:	6033      	strmi	r3, [r6, #0]
 800b16e:	6825      	ldr	r5, [r4, #0]
 800b170:	f015 0506 	ands.w	r5, r5, #6
 800b174:	d106      	bne.n	800b184 <_printf_common+0x48>
 800b176:	f104 0a19 	add.w	sl, r4, #25
 800b17a:	68e3      	ldr	r3, [r4, #12]
 800b17c:	6832      	ldr	r2, [r6, #0]
 800b17e:	1a9b      	subs	r3, r3, r2
 800b180:	42ab      	cmp	r3, r5
 800b182:	dc26      	bgt.n	800b1d2 <_printf_common+0x96>
 800b184:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b188:	1e13      	subs	r3, r2, #0
 800b18a:	6822      	ldr	r2, [r4, #0]
 800b18c:	bf18      	it	ne
 800b18e:	2301      	movne	r3, #1
 800b190:	0692      	lsls	r2, r2, #26
 800b192:	d42b      	bmi.n	800b1ec <_printf_common+0xb0>
 800b194:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b198:	4649      	mov	r1, r9
 800b19a:	4638      	mov	r0, r7
 800b19c:	47c0      	blx	r8
 800b19e:	3001      	adds	r0, #1
 800b1a0:	d01e      	beq.n	800b1e0 <_printf_common+0xa4>
 800b1a2:	6823      	ldr	r3, [r4, #0]
 800b1a4:	6922      	ldr	r2, [r4, #16]
 800b1a6:	f003 0306 	and.w	r3, r3, #6
 800b1aa:	2b04      	cmp	r3, #4
 800b1ac:	bf02      	ittt	eq
 800b1ae:	68e5      	ldreq	r5, [r4, #12]
 800b1b0:	6833      	ldreq	r3, [r6, #0]
 800b1b2:	1aed      	subeq	r5, r5, r3
 800b1b4:	68a3      	ldr	r3, [r4, #8]
 800b1b6:	bf0c      	ite	eq
 800b1b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1bc:	2500      	movne	r5, #0
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	bfc4      	itt	gt
 800b1c2:	1a9b      	subgt	r3, r3, r2
 800b1c4:	18ed      	addgt	r5, r5, r3
 800b1c6:	2600      	movs	r6, #0
 800b1c8:	341a      	adds	r4, #26
 800b1ca:	42b5      	cmp	r5, r6
 800b1cc:	d11a      	bne.n	800b204 <_printf_common+0xc8>
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	e008      	b.n	800b1e4 <_printf_common+0xa8>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	4652      	mov	r2, sl
 800b1d6:	4649      	mov	r1, r9
 800b1d8:	4638      	mov	r0, r7
 800b1da:	47c0      	blx	r8
 800b1dc:	3001      	adds	r0, #1
 800b1de:	d103      	bne.n	800b1e8 <_printf_common+0xac>
 800b1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e8:	3501      	adds	r5, #1
 800b1ea:	e7c6      	b.n	800b17a <_printf_common+0x3e>
 800b1ec:	18e1      	adds	r1, r4, r3
 800b1ee:	1c5a      	adds	r2, r3, #1
 800b1f0:	2030      	movs	r0, #48	; 0x30
 800b1f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1f6:	4422      	add	r2, r4
 800b1f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b200:	3302      	adds	r3, #2
 800b202:	e7c7      	b.n	800b194 <_printf_common+0x58>
 800b204:	2301      	movs	r3, #1
 800b206:	4622      	mov	r2, r4
 800b208:	4649      	mov	r1, r9
 800b20a:	4638      	mov	r0, r7
 800b20c:	47c0      	blx	r8
 800b20e:	3001      	adds	r0, #1
 800b210:	d0e6      	beq.n	800b1e0 <_printf_common+0xa4>
 800b212:	3601      	adds	r6, #1
 800b214:	e7d9      	b.n	800b1ca <_printf_common+0x8e>
	...

0800b218 <_printf_i>:
 800b218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b21c:	7e0f      	ldrb	r7, [r1, #24]
 800b21e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b220:	2f78      	cmp	r7, #120	; 0x78
 800b222:	4691      	mov	r9, r2
 800b224:	4680      	mov	r8, r0
 800b226:	460c      	mov	r4, r1
 800b228:	469a      	mov	sl, r3
 800b22a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b22e:	d807      	bhi.n	800b240 <_printf_i+0x28>
 800b230:	2f62      	cmp	r7, #98	; 0x62
 800b232:	d80a      	bhi.n	800b24a <_printf_i+0x32>
 800b234:	2f00      	cmp	r7, #0
 800b236:	f000 80d4 	beq.w	800b3e2 <_printf_i+0x1ca>
 800b23a:	2f58      	cmp	r7, #88	; 0x58
 800b23c:	f000 80c0 	beq.w	800b3c0 <_printf_i+0x1a8>
 800b240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b244:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b248:	e03a      	b.n	800b2c0 <_printf_i+0xa8>
 800b24a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b24e:	2b15      	cmp	r3, #21
 800b250:	d8f6      	bhi.n	800b240 <_printf_i+0x28>
 800b252:	a101      	add	r1, pc, #4	; (adr r1, 800b258 <_printf_i+0x40>)
 800b254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b258:	0800b2b1 	.word	0x0800b2b1
 800b25c:	0800b2c5 	.word	0x0800b2c5
 800b260:	0800b241 	.word	0x0800b241
 800b264:	0800b241 	.word	0x0800b241
 800b268:	0800b241 	.word	0x0800b241
 800b26c:	0800b241 	.word	0x0800b241
 800b270:	0800b2c5 	.word	0x0800b2c5
 800b274:	0800b241 	.word	0x0800b241
 800b278:	0800b241 	.word	0x0800b241
 800b27c:	0800b241 	.word	0x0800b241
 800b280:	0800b241 	.word	0x0800b241
 800b284:	0800b3c9 	.word	0x0800b3c9
 800b288:	0800b2f1 	.word	0x0800b2f1
 800b28c:	0800b383 	.word	0x0800b383
 800b290:	0800b241 	.word	0x0800b241
 800b294:	0800b241 	.word	0x0800b241
 800b298:	0800b3eb 	.word	0x0800b3eb
 800b29c:	0800b241 	.word	0x0800b241
 800b2a0:	0800b2f1 	.word	0x0800b2f1
 800b2a4:	0800b241 	.word	0x0800b241
 800b2a8:	0800b241 	.word	0x0800b241
 800b2ac:	0800b38b 	.word	0x0800b38b
 800b2b0:	682b      	ldr	r3, [r5, #0]
 800b2b2:	1d1a      	adds	r2, r3, #4
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	602a      	str	r2, [r5, #0]
 800b2b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e09f      	b.n	800b404 <_printf_i+0x1ec>
 800b2c4:	6820      	ldr	r0, [r4, #0]
 800b2c6:	682b      	ldr	r3, [r5, #0]
 800b2c8:	0607      	lsls	r7, r0, #24
 800b2ca:	f103 0104 	add.w	r1, r3, #4
 800b2ce:	6029      	str	r1, [r5, #0]
 800b2d0:	d501      	bpl.n	800b2d6 <_printf_i+0xbe>
 800b2d2:	681e      	ldr	r6, [r3, #0]
 800b2d4:	e003      	b.n	800b2de <_printf_i+0xc6>
 800b2d6:	0646      	lsls	r6, r0, #25
 800b2d8:	d5fb      	bpl.n	800b2d2 <_printf_i+0xba>
 800b2da:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b2de:	2e00      	cmp	r6, #0
 800b2e0:	da03      	bge.n	800b2ea <_printf_i+0xd2>
 800b2e2:	232d      	movs	r3, #45	; 0x2d
 800b2e4:	4276      	negs	r6, r6
 800b2e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2ea:	485a      	ldr	r0, [pc, #360]	; (800b454 <_printf_i+0x23c>)
 800b2ec:	230a      	movs	r3, #10
 800b2ee:	e012      	b.n	800b316 <_printf_i+0xfe>
 800b2f0:	682b      	ldr	r3, [r5, #0]
 800b2f2:	6820      	ldr	r0, [r4, #0]
 800b2f4:	1d19      	adds	r1, r3, #4
 800b2f6:	6029      	str	r1, [r5, #0]
 800b2f8:	0605      	lsls	r5, r0, #24
 800b2fa:	d501      	bpl.n	800b300 <_printf_i+0xe8>
 800b2fc:	681e      	ldr	r6, [r3, #0]
 800b2fe:	e002      	b.n	800b306 <_printf_i+0xee>
 800b300:	0641      	lsls	r1, r0, #25
 800b302:	d5fb      	bpl.n	800b2fc <_printf_i+0xe4>
 800b304:	881e      	ldrh	r6, [r3, #0]
 800b306:	4853      	ldr	r0, [pc, #332]	; (800b454 <_printf_i+0x23c>)
 800b308:	2f6f      	cmp	r7, #111	; 0x6f
 800b30a:	bf0c      	ite	eq
 800b30c:	2308      	moveq	r3, #8
 800b30e:	230a      	movne	r3, #10
 800b310:	2100      	movs	r1, #0
 800b312:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b316:	6865      	ldr	r5, [r4, #4]
 800b318:	60a5      	str	r5, [r4, #8]
 800b31a:	2d00      	cmp	r5, #0
 800b31c:	bfa2      	ittt	ge
 800b31e:	6821      	ldrge	r1, [r4, #0]
 800b320:	f021 0104 	bicge.w	r1, r1, #4
 800b324:	6021      	strge	r1, [r4, #0]
 800b326:	b90e      	cbnz	r6, 800b32c <_printf_i+0x114>
 800b328:	2d00      	cmp	r5, #0
 800b32a:	d04b      	beq.n	800b3c4 <_printf_i+0x1ac>
 800b32c:	4615      	mov	r5, r2
 800b32e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b332:	fb03 6711 	mls	r7, r3, r1, r6
 800b336:	5dc7      	ldrb	r7, [r0, r7]
 800b338:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b33c:	4637      	mov	r7, r6
 800b33e:	42bb      	cmp	r3, r7
 800b340:	460e      	mov	r6, r1
 800b342:	d9f4      	bls.n	800b32e <_printf_i+0x116>
 800b344:	2b08      	cmp	r3, #8
 800b346:	d10b      	bne.n	800b360 <_printf_i+0x148>
 800b348:	6823      	ldr	r3, [r4, #0]
 800b34a:	07de      	lsls	r6, r3, #31
 800b34c:	d508      	bpl.n	800b360 <_printf_i+0x148>
 800b34e:	6923      	ldr	r3, [r4, #16]
 800b350:	6861      	ldr	r1, [r4, #4]
 800b352:	4299      	cmp	r1, r3
 800b354:	bfde      	ittt	le
 800b356:	2330      	movle	r3, #48	; 0x30
 800b358:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b35c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b360:	1b52      	subs	r2, r2, r5
 800b362:	6122      	str	r2, [r4, #16]
 800b364:	f8cd a000 	str.w	sl, [sp]
 800b368:	464b      	mov	r3, r9
 800b36a:	aa03      	add	r2, sp, #12
 800b36c:	4621      	mov	r1, r4
 800b36e:	4640      	mov	r0, r8
 800b370:	f7ff fee4 	bl	800b13c <_printf_common>
 800b374:	3001      	adds	r0, #1
 800b376:	d14a      	bne.n	800b40e <_printf_i+0x1f6>
 800b378:	f04f 30ff 	mov.w	r0, #4294967295
 800b37c:	b004      	add	sp, #16
 800b37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	f043 0320 	orr.w	r3, r3, #32
 800b388:	6023      	str	r3, [r4, #0]
 800b38a:	4833      	ldr	r0, [pc, #204]	; (800b458 <_printf_i+0x240>)
 800b38c:	2778      	movs	r7, #120	; 0x78
 800b38e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	6829      	ldr	r1, [r5, #0]
 800b396:	061f      	lsls	r7, r3, #24
 800b398:	f851 6b04 	ldr.w	r6, [r1], #4
 800b39c:	d402      	bmi.n	800b3a4 <_printf_i+0x18c>
 800b39e:	065f      	lsls	r7, r3, #25
 800b3a0:	bf48      	it	mi
 800b3a2:	b2b6      	uxthmi	r6, r6
 800b3a4:	07df      	lsls	r7, r3, #31
 800b3a6:	bf48      	it	mi
 800b3a8:	f043 0320 	orrmi.w	r3, r3, #32
 800b3ac:	6029      	str	r1, [r5, #0]
 800b3ae:	bf48      	it	mi
 800b3b0:	6023      	strmi	r3, [r4, #0]
 800b3b2:	b91e      	cbnz	r6, 800b3bc <_printf_i+0x1a4>
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	f023 0320 	bic.w	r3, r3, #32
 800b3ba:	6023      	str	r3, [r4, #0]
 800b3bc:	2310      	movs	r3, #16
 800b3be:	e7a7      	b.n	800b310 <_printf_i+0xf8>
 800b3c0:	4824      	ldr	r0, [pc, #144]	; (800b454 <_printf_i+0x23c>)
 800b3c2:	e7e4      	b.n	800b38e <_printf_i+0x176>
 800b3c4:	4615      	mov	r5, r2
 800b3c6:	e7bd      	b.n	800b344 <_printf_i+0x12c>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	6826      	ldr	r6, [r4, #0]
 800b3cc:	6961      	ldr	r1, [r4, #20]
 800b3ce:	1d18      	adds	r0, r3, #4
 800b3d0:	6028      	str	r0, [r5, #0]
 800b3d2:	0635      	lsls	r5, r6, #24
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	d501      	bpl.n	800b3dc <_printf_i+0x1c4>
 800b3d8:	6019      	str	r1, [r3, #0]
 800b3da:	e002      	b.n	800b3e2 <_printf_i+0x1ca>
 800b3dc:	0670      	lsls	r0, r6, #25
 800b3de:	d5fb      	bpl.n	800b3d8 <_printf_i+0x1c0>
 800b3e0:	8019      	strh	r1, [r3, #0]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	6123      	str	r3, [r4, #16]
 800b3e6:	4615      	mov	r5, r2
 800b3e8:	e7bc      	b.n	800b364 <_printf_i+0x14c>
 800b3ea:	682b      	ldr	r3, [r5, #0]
 800b3ec:	1d1a      	adds	r2, r3, #4
 800b3ee:	602a      	str	r2, [r5, #0]
 800b3f0:	681d      	ldr	r5, [r3, #0]
 800b3f2:	6862      	ldr	r2, [r4, #4]
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f7f4 ff02 	bl	8000200 <memchr>
 800b3fc:	b108      	cbz	r0, 800b402 <_printf_i+0x1ea>
 800b3fe:	1b40      	subs	r0, r0, r5
 800b400:	6060      	str	r0, [r4, #4]
 800b402:	6863      	ldr	r3, [r4, #4]
 800b404:	6123      	str	r3, [r4, #16]
 800b406:	2300      	movs	r3, #0
 800b408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b40c:	e7aa      	b.n	800b364 <_printf_i+0x14c>
 800b40e:	6923      	ldr	r3, [r4, #16]
 800b410:	462a      	mov	r2, r5
 800b412:	4649      	mov	r1, r9
 800b414:	4640      	mov	r0, r8
 800b416:	47d0      	blx	sl
 800b418:	3001      	adds	r0, #1
 800b41a:	d0ad      	beq.n	800b378 <_printf_i+0x160>
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	079b      	lsls	r3, r3, #30
 800b420:	d413      	bmi.n	800b44a <_printf_i+0x232>
 800b422:	68e0      	ldr	r0, [r4, #12]
 800b424:	9b03      	ldr	r3, [sp, #12]
 800b426:	4298      	cmp	r0, r3
 800b428:	bfb8      	it	lt
 800b42a:	4618      	movlt	r0, r3
 800b42c:	e7a6      	b.n	800b37c <_printf_i+0x164>
 800b42e:	2301      	movs	r3, #1
 800b430:	4632      	mov	r2, r6
 800b432:	4649      	mov	r1, r9
 800b434:	4640      	mov	r0, r8
 800b436:	47d0      	blx	sl
 800b438:	3001      	adds	r0, #1
 800b43a:	d09d      	beq.n	800b378 <_printf_i+0x160>
 800b43c:	3501      	adds	r5, #1
 800b43e:	68e3      	ldr	r3, [r4, #12]
 800b440:	9903      	ldr	r1, [sp, #12]
 800b442:	1a5b      	subs	r3, r3, r1
 800b444:	42ab      	cmp	r3, r5
 800b446:	dcf2      	bgt.n	800b42e <_printf_i+0x216>
 800b448:	e7eb      	b.n	800b422 <_printf_i+0x20a>
 800b44a:	2500      	movs	r5, #0
 800b44c:	f104 0619 	add.w	r6, r4, #25
 800b450:	e7f5      	b.n	800b43e <_printf_i+0x226>
 800b452:	bf00      	nop
 800b454:	0800f982 	.word	0x0800f982
 800b458:	0800f993 	.word	0x0800f993

0800b45c <std>:
 800b45c:	2300      	movs	r3, #0
 800b45e:	b510      	push	{r4, lr}
 800b460:	4604      	mov	r4, r0
 800b462:	e9c0 3300 	strd	r3, r3, [r0]
 800b466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b46a:	6083      	str	r3, [r0, #8]
 800b46c:	8181      	strh	r1, [r0, #12]
 800b46e:	6643      	str	r3, [r0, #100]	; 0x64
 800b470:	81c2      	strh	r2, [r0, #14]
 800b472:	6183      	str	r3, [r0, #24]
 800b474:	4619      	mov	r1, r3
 800b476:	2208      	movs	r2, #8
 800b478:	305c      	adds	r0, #92	; 0x5c
 800b47a:	f000 fa53 	bl	800b924 <memset>
 800b47e:	4b0d      	ldr	r3, [pc, #52]	; (800b4b4 <std+0x58>)
 800b480:	6263      	str	r3, [r4, #36]	; 0x24
 800b482:	4b0d      	ldr	r3, [pc, #52]	; (800b4b8 <std+0x5c>)
 800b484:	62a3      	str	r3, [r4, #40]	; 0x28
 800b486:	4b0d      	ldr	r3, [pc, #52]	; (800b4bc <std+0x60>)
 800b488:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b48a:	4b0d      	ldr	r3, [pc, #52]	; (800b4c0 <std+0x64>)
 800b48c:	6323      	str	r3, [r4, #48]	; 0x30
 800b48e:	4b0d      	ldr	r3, [pc, #52]	; (800b4c4 <std+0x68>)
 800b490:	6224      	str	r4, [r4, #32]
 800b492:	429c      	cmp	r4, r3
 800b494:	d006      	beq.n	800b4a4 <std+0x48>
 800b496:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b49a:	4294      	cmp	r4, r2
 800b49c:	d002      	beq.n	800b4a4 <std+0x48>
 800b49e:	33d0      	adds	r3, #208	; 0xd0
 800b4a0:	429c      	cmp	r4, r3
 800b4a2:	d105      	bne.n	800b4b0 <std+0x54>
 800b4a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4ac:	f000 badc 	b.w	800ba68 <__retarget_lock_init_recursive>
 800b4b0:	bd10      	pop	{r4, pc}
 800b4b2:	bf00      	nop
 800b4b4:	0800b741 	.word	0x0800b741
 800b4b8:	0800b763 	.word	0x0800b763
 800b4bc:	0800b79b 	.word	0x0800b79b
 800b4c0:	0800b7bf 	.word	0x0800b7bf
 800b4c4:	20019b4c 	.word	0x20019b4c

0800b4c8 <stdio_exit_handler>:
 800b4c8:	4a02      	ldr	r2, [pc, #8]	; (800b4d4 <stdio_exit_handler+0xc>)
 800b4ca:	4903      	ldr	r1, [pc, #12]	; (800b4d8 <stdio_exit_handler+0x10>)
 800b4cc:	4803      	ldr	r0, [pc, #12]	; (800b4dc <stdio_exit_handler+0x14>)
 800b4ce:	f000 b869 	b.w	800b5a4 <_fwalk_sglue>
 800b4d2:	bf00      	nop
 800b4d4:	200008a0 	.word	0x200008a0
 800b4d8:	0800d439 	.word	0x0800d439
 800b4dc:	200008ac 	.word	0x200008ac

0800b4e0 <cleanup_stdio>:
 800b4e0:	6841      	ldr	r1, [r0, #4]
 800b4e2:	4b0c      	ldr	r3, [pc, #48]	; (800b514 <cleanup_stdio+0x34>)
 800b4e4:	4299      	cmp	r1, r3
 800b4e6:	b510      	push	{r4, lr}
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	d001      	beq.n	800b4f0 <cleanup_stdio+0x10>
 800b4ec:	f001 ffa4 	bl	800d438 <_fflush_r>
 800b4f0:	68a1      	ldr	r1, [r4, #8]
 800b4f2:	4b09      	ldr	r3, [pc, #36]	; (800b518 <cleanup_stdio+0x38>)
 800b4f4:	4299      	cmp	r1, r3
 800b4f6:	d002      	beq.n	800b4fe <cleanup_stdio+0x1e>
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f001 ff9d 	bl	800d438 <_fflush_r>
 800b4fe:	68e1      	ldr	r1, [r4, #12]
 800b500:	4b06      	ldr	r3, [pc, #24]	; (800b51c <cleanup_stdio+0x3c>)
 800b502:	4299      	cmp	r1, r3
 800b504:	d004      	beq.n	800b510 <cleanup_stdio+0x30>
 800b506:	4620      	mov	r0, r4
 800b508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b50c:	f001 bf94 	b.w	800d438 <_fflush_r>
 800b510:	bd10      	pop	{r4, pc}
 800b512:	bf00      	nop
 800b514:	20019b4c 	.word	0x20019b4c
 800b518:	20019bb4 	.word	0x20019bb4
 800b51c:	20019c1c 	.word	0x20019c1c

0800b520 <global_stdio_init.part.0>:
 800b520:	b510      	push	{r4, lr}
 800b522:	4b0b      	ldr	r3, [pc, #44]	; (800b550 <global_stdio_init.part.0+0x30>)
 800b524:	4c0b      	ldr	r4, [pc, #44]	; (800b554 <global_stdio_init.part.0+0x34>)
 800b526:	4a0c      	ldr	r2, [pc, #48]	; (800b558 <global_stdio_init.part.0+0x38>)
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	4620      	mov	r0, r4
 800b52c:	2200      	movs	r2, #0
 800b52e:	2104      	movs	r1, #4
 800b530:	f7ff ff94 	bl	800b45c <std>
 800b534:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b538:	2201      	movs	r2, #1
 800b53a:	2109      	movs	r1, #9
 800b53c:	f7ff ff8e 	bl	800b45c <std>
 800b540:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b544:	2202      	movs	r2, #2
 800b546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b54a:	2112      	movs	r1, #18
 800b54c:	f7ff bf86 	b.w	800b45c <std>
 800b550:	20019c84 	.word	0x20019c84
 800b554:	20019b4c 	.word	0x20019b4c
 800b558:	0800b4c9 	.word	0x0800b4c9

0800b55c <__sfp_lock_acquire>:
 800b55c:	4801      	ldr	r0, [pc, #4]	; (800b564 <__sfp_lock_acquire+0x8>)
 800b55e:	f000 ba84 	b.w	800ba6a <__retarget_lock_acquire_recursive>
 800b562:	bf00      	nop
 800b564:	20019c8d 	.word	0x20019c8d

0800b568 <__sfp_lock_release>:
 800b568:	4801      	ldr	r0, [pc, #4]	; (800b570 <__sfp_lock_release+0x8>)
 800b56a:	f000 ba7f 	b.w	800ba6c <__retarget_lock_release_recursive>
 800b56e:	bf00      	nop
 800b570:	20019c8d 	.word	0x20019c8d

0800b574 <__sinit>:
 800b574:	b510      	push	{r4, lr}
 800b576:	4604      	mov	r4, r0
 800b578:	f7ff fff0 	bl	800b55c <__sfp_lock_acquire>
 800b57c:	6a23      	ldr	r3, [r4, #32]
 800b57e:	b11b      	cbz	r3, 800b588 <__sinit+0x14>
 800b580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b584:	f7ff bff0 	b.w	800b568 <__sfp_lock_release>
 800b588:	4b04      	ldr	r3, [pc, #16]	; (800b59c <__sinit+0x28>)
 800b58a:	6223      	str	r3, [r4, #32]
 800b58c:	4b04      	ldr	r3, [pc, #16]	; (800b5a0 <__sinit+0x2c>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1f5      	bne.n	800b580 <__sinit+0xc>
 800b594:	f7ff ffc4 	bl	800b520 <global_stdio_init.part.0>
 800b598:	e7f2      	b.n	800b580 <__sinit+0xc>
 800b59a:	bf00      	nop
 800b59c:	0800b4e1 	.word	0x0800b4e1
 800b5a0:	20019c84 	.word	0x20019c84

0800b5a4 <_fwalk_sglue>:
 800b5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a8:	4607      	mov	r7, r0
 800b5aa:	4688      	mov	r8, r1
 800b5ac:	4614      	mov	r4, r2
 800b5ae:	2600      	movs	r6, #0
 800b5b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5b4:	f1b9 0901 	subs.w	r9, r9, #1
 800b5b8:	d505      	bpl.n	800b5c6 <_fwalk_sglue+0x22>
 800b5ba:	6824      	ldr	r4, [r4, #0]
 800b5bc:	2c00      	cmp	r4, #0
 800b5be:	d1f7      	bne.n	800b5b0 <_fwalk_sglue+0xc>
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c6:	89ab      	ldrh	r3, [r5, #12]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d907      	bls.n	800b5dc <_fwalk_sglue+0x38>
 800b5cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	d003      	beq.n	800b5dc <_fwalk_sglue+0x38>
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	47c0      	blx	r8
 800b5da:	4306      	orrs	r6, r0
 800b5dc:	3568      	adds	r5, #104	; 0x68
 800b5de:	e7e9      	b.n	800b5b4 <_fwalk_sglue+0x10>

0800b5e0 <_puts_r>:
 800b5e0:	6a03      	ldr	r3, [r0, #32]
 800b5e2:	b570      	push	{r4, r5, r6, lr}
 800b5e4:	6884      	ldr	r4, [r0, #8]
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	460e      	mov	r6, r1
 800b5ea:	b90b      	cbnz	r3, 800b5f0 <_puts_r+0x10>
 800b5ec:	f7ff ffc2 	bl	800b574 <__sinit>
 800b5f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5f2:	07db      	lsls	r3, r3, #31
 800b5f4:	d405      	bmi.n	800b602 <_puts_r+0x22>
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	0598      	lsls	r0, r3, #22
 800b5fa:	d402      	bmi.n	800b602 <_puts_r+0x22>
 800b5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5fe:	f000 fa34 	bl	800ba6a <__retarget_lock_acquire_recursive>
 800b602:	89a3      	ldrh	r3, [r4, #12]
 800b604:	0719      	lsls	r1, r3, #28
 800b606:	d513      	bpl.n	800b630 <_puts_r+0x50>
 800b608:	6923      	ldr	r3, [r4, #16]
 800b60a:	b18b      	cbz	r3, 800b630 <_puts_r+0x50>
 800b60c:	3e01      	subs	r6, #1
 800b60e:	68a3      	ldr	r3, [r4, #8]
 800b610:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b614:	3b01      	subs	r3, #1
 800b616:	60a3      	str	r3, [r4, #8]
 800b618:	b9e9      	cbnz	r1, 800b656 <_puts_r+0x76>
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	da2e      	bge.n	800b67c <_puts_r+0x9c>
 800b61e:	4622      	mov	r2, r4
 800b620:	210a      	movs	r1, #10
 800b622:	4628      	mov	r0, r5
 800b624:	f000 f8cf 	bl	800b7c6 <__swbuf_r>
 800b628:	3001      	adds	r0, #1
 800b62a:	d007      	beq.n	800b63c <_puts_r+0x5c>
 800b62c:	250a      	movs	r5, #10
 800b62e:	e007      	b.n	800b640 <_puts_r+0x60>
 800b630:	4621      	mov	r1, r4
 800b632:	4628      	mov	r0, r5
 800b634:	f000 f904 	bl	800b840 <__swsetup_r>
 800b638:	2800      	cmp	r0, #0
 800b63a:	d0e7      	beq.n	800b60c <_puts_r+0x2c>
 800b63c:	f04f 35ff 	mov.w	r5, #4294967295
 800b640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b642:	07da      	lsls	r2, r3, #31
 800b644:	d405      	bmi.n	800b652 <_puts_r+0x72>
 800b646:	89a3      	ldrh	r3, [r4, #12]
 800b648:	059b      	lsls	r3, r3, #22
 800b64a:	d402      	bmi.n	800b652 <_puts_r+0x72>
 800b64c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b64e:	f000 fa0d 	bl	800ba6c <__retarget_lock_release_recursive>
 800b652:	4628      	mov	r0, r5
 800b654:	bd70      	pop	{r4, r5, r6, pc}
 800b656:	2b00      	cmp	r3, #0
 800b658:	da04      	bge.n	800b664 <_puts_r+0x84>
 800b65a:	69a2      	ldr	r2, [r4, #24]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	dc06      	bgt.n	800b66e <_puts_r+0x8e>
 800b660:	290a      	cmp	r1, #10
 800b662:	d004      	beq.n	800b66e <_puts_r+0x8e>
 800b664:	6823      	ldr	r3, [r4, #0]
 800b666:	1c5a      	adds	r2, r3, #1
 800b668:	6022      	str	r2, [r4, #0]
 800b66a:	7019      	strb	r1, [r3, #0]
 800b66c:	e7cf      	b.n	800b60e <_puts_r+0x2e>
 800b66e:	4622      	mov	r2, r4
 800b670:	4628      	mov	r0, r5
 800b672:	f000 f8a8 	bl	800b7c6 <__swbuf_r>
 800b676:	3001      	adds	r0, #1
 800b678:	d1c9      	bne.n	800b60e <_puts_r+0x2e>
 800b67a:	e7df      	b.n	800b63c <_puts_r+0x5c>
 800b67c:	6823      	ldr	r3, [r4, #0]
 800b67e:	250a      	movs	r5, #10
 800b680:	1c5a      	adds	r2, r3, #1
 800b682:	6022      	str	r2, [r4, #0]
 800b684:	701d      	strb	r5, [r3, #0]
 800b686:	e7db      	b.n	800b640 <_puts_r+0x60>

0800b688 <puts>:
 800b688:	4b02      	ldr	r3, [pc, #8]	; (800b694 <puts+0xc>)
 800b68a:	4601      	mov	r1, r0
 800b68c:	6818      	ldr	r0, [r3, #0]
 800b68e:	f7ff bfa7 	b.w	800b5e0 <_puts_r>
 800b692:	bf00      	nop
 800b694:	200008f8 	.word	0x200008f8

0800b698 <sniprintf>:
 800b698:	b40c      	push	{r2, r3}
 800b69a:	b530      	push	{r4, r5, lr}
 800b69c:	4b17      	ldr	r3, [pc, #92]	; (800b6fc <sniprintf+0x64>)
 800b69e:	1e0c      	subs	r4, r1, #0
 800b6a0:	681d      	ldr	r5, [r3, #0]
 800b6a2:	b09d      	sub	sp, #116	; 0x74
 800b6a4:	da08      	bge.n	800b6b8 <sniprintf+0x20>
 800b6a6:	238b      	movs	r3, #139	; 0x8b
 800b6a8:	602b      	str	r3, [r5, #0]
 800b6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ae:	b01d      	add	sp, #116	; 0x74
 800b6b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6b4:	b002      	add	sp, #8
 800b6b6:	4770      	bx	lr
 800b6b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b6bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b6c0:	bf14      	ite	ne
 800b6c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b6c6:	4623      	moveq	r3, r4
 800b6c8:	9304      	str	r3, [sp, #16]
 800b6ca:	9307      	str	r3, [sp, #28]
 800b6cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6d0:	9002      	str	r0, [sp, #8]
 800b6d2:	9006      	str	r0, [sp, #24]
 800b6d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b6d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b6da:	ab21      	add	r3, sp, #132	; 0x84
 800b6dc:	a902      	add	r1, sp, #8
 800b6de:	4628      	mov	r0, r5
 800b6e0:	9301      	str	r3, [sp, #4]
 800b6e2:	f001 fd25 	bl	800d130 <_svfiprintf_r>
 800b6e6:	1c43      	adds	r3, r0, #1
 800b6e8:	bfbc      	itt	lt
 800b6ea:	238b      	movlt	r3, #139	; 0x8b
 800b6ec:	602b      	strlt	r3, [r5, #0]
 800b6ee:	2c00      	cmp	r4, #0
 800b6f0:	d0dd      	beq.n	800b6ae <sniprintf+0x16>
 800b6f2:	9b02      	ldr	r3, [sp, #8]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	701a      	strb	r2, [r3, #0]
 800b6f8:	e7d9      	b.n	800b6ae <sniprintf+0x16>
 800b6fa:	bf00      	nop
 800b6fc:	200008f8 	.word	0x200008f8

0800b700 <siprintf>:
 800b700:	b40e      	push	{r1, r2, r3}
 800b702:	b500      	push	{lr}
 800b704:	b09c      	sub	sp, #112	; 0x70
 800b706:	ab1d      	add	r3, sp, #116	; 0x74
 800b708:	9002      	str	r0, [sp, #8]
 800b70a:	9006      	str	r0, [sp, #24]
 800b70c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b710:	4809      	ldr	r0, [pc, #36]	; (800b738 <siprintf+0x38>)
 800b712:	9107      	str	r1, [sp, #28]
 800b714:	9104      	str	r1, [sp, #16]
 800b716:	4909      	ldr	r1, [pc, #36]	; (800b73c <siprintf+0x3c>)
 800b718:	f853 2b04 	ldr.w	r2, [r3], #4
 800b71c:	9105      	str	r1, [sp, #20]
 800b71e:	6800      	ldr	r0, [r0, #0]
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	a902      	add	r1, sp, #8
 800b724:	f001 fd04 	bl	800d130 <_svfiprintf_r>
 800b728:	9b02      	ldr	r3, [sp, #8]
 800b72a:	2200      	movs	r2, #0
 800b72c:	701a      	strb	r2, [r3, #0]
 800b72e:	b01c      	add	sp, #112	; 0x70
 800b730:	f85d eb04 	ldr.w	lr, [sp], #4
 800b734:	b003      	add	sp, #12
 800b736:	4770      	bx	lr
 800b738:	200008f8 	.word	0x200008f8
 800b73c:	ffff0208 	.word	0xffff0208

0800b740 <__sread>:
 800b740:	b510      	push	{r4, lr}
 800b742:	460c      	mov	r4, r1
 800b744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b748:	f000 f940 	bl	800b9cc <_read_r>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	bfab      	itete	ge
 800b750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b752:	89a3      	ldrhlt	r3, [r4, #12]
 800b754:	181b      	addge	r3, r3, r0
 800b756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b75a:	bfac      	ite	ge
 800b75c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b75e:	81a3      	strhlt	r3, [r4, #12]
 800b760:	bd10      	pop	{r4, pc}

0800b762 <__swrite>:
 800b762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b766:	461f      	mov	r7, r3
 800b768:	898b      	ldrh	r3, [r1, #12]
 800b76a:	05db      	lsls	r3, r3, #23
 800b76c:	4605      	mov	r5, r0
 800b76e:	460c      	mov	r4, r1
 800b770:	4616      	mov	r6, r2
 800b772:	d505      	bpl.n	800b780 <__swrite+0x1e>
 800b774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b778:	2302      	movs	r3, #2
 800b77a:	2200      	movs	r2, #0
 800b77c:	f000 f914 	bl	800b9a8 <_lseek_r>
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b78a:	81a3      	strh	r3, [r4, #12]
 800b78c:	4632      	mov	r2, r6
 800b78e:	463b      	mov	r3, r7
 800b790:	4628      	mov	r0, r5
 800b792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b796:	f000 b92b 	b.w	800b9f0 <_write_r>

0800b79a <__sseek>:
 800b79a:	b510      	push	{r4, lr}
 800b79c:	460c      	mov	r4, r1
 800b79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a2:	f000 f901 	bl	800b9a8 <_lseek_r>
 800b7a6:	1c43      	adds	r3, r0, #1
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	bf15      	itete	ne
 800b7ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7b6:	81a3      	strheq	r3, [r4, #12]
 800b7b8:	bf18      	it	ne
 800b7ba:	81a3      	strhne	r3, [r4, #12]
 800b7bc:	bd10      	pop	{r4, pc}

0800b7be <__sclose>:
 800b7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c2:	f000 b8e1 	b.w	800b988 <_close_r>

0800b7c6 <__swbuf_r>:
 800b7c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c8:	460e      	mov	r6, r1
 800b7ca:	4614      	mov	r4, r2
 800b7cc:	4605      	mov	r5, r0
 800b7ce:	b118      	cbz	r0, 800b7d8 <__swbuf_r+0x12>
 800b7d0:	6a03      	ldr	r3, [r0, #32]
 800b7d2:	b90b      	cbnz	r3, 800b7d8 <__swbuf_r+0x12>
 800b7d4:	f7ff fece 	bl	800b574 <__sinit>
 800b7d8:	69a3      	ldr	r3, [r4, #24]
 800b7da:	60a3      	str	r3, [r4, #8]
 800b7dc:	89a3      	ldrh	r3, [r4, #12]
 800b7de:	071a      	lsls	r2, r3, #28
 800b7e0:	d525      	bpl.n	800b82e <__swbuf_r+0x68>
 800b7e2:	6923      	ldr	r3, [r4, #16]
 800b7e4:	b31b      	cbz	r3, 800b82e <__swbuf_r+0x68>
 800b7e6:	6823      	ldr	r3, [r4, #0]
 800b7e8:	6922      	ldr	r2, [r4, #16]
 800b7ea:	1a98      	subs	r0, r3, r2
 800b7ec:	6963      	ldr	r3, [r4, #20]
 800b7ee:	b2f6      	uxtb	r6, r6
 800b7f0:	4283      	cmp	r3, r0
 800b7f2:	4637      	mov	r7, r6
 800b7f4:	dc04      	bgt.n	800b800 <__swbuf_r+0x3a>
 800b7f6:	4621      	mov	r1, r4
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	f001 fe1d 	bl	800d438 <_fflush_r>
 800b7fe:	b9e0      	cbnz	r0, 800b83a <__swbuf_r+0x74>
 800b800:	68a3      	ldr	r3, [r4, #8]
 800b802:	3b01      	subs	r3, #1
 800b804:	60a3      	str	r3, [r4, #8]
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	1c5a      	adds	r2, r3, #1
 800b80a:	6022      	str	r2, [r4, #0]
 800b80c:	701e      	strb	r6, [r3, #0]
 800b80e:	6962      	ldr	r2, [r4, #20]
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	429a      	cmp	r2, r3
 800b814:	d004      	beq.n	800b820 <__swbuf_r+0x5a>
 800b816:	89a3      	ldrh	r3, [r4, #12]
 800b818:	07db      	lsls	r3, r3, #31
 800b81a:	d506      	bpl.n	800b82a <__swbuf_r+0x64>
 800b81c:	2e0a      	cmp	r6, #10
 800b81e:	d104      	bne.n	800b82a <__swbuf_r+0x64>
 800b820:	4621      	mov	r1, r4
 800b822:	4628      	mov	r0, r5
 800b824:	f001 fe08 	bl	800d438 <_fflush_r>
 800b828:	b938      	cbnz	r0, 800b83a <__swbuf_r+0x74>
 800b82a:	4638      	mov	r0, r7
 800b82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b82e:	4621      	mov	r1, r4
 800b830:	4628      	mov	r0, r5
 800b832:	f000 f805 	bl	800b840 <__swsetup_r>
 800b836:	2800      	cmp	r0, #0
 800b838:	d0d5      	beq.n	800b7e6 <__swbuf_r+0x20>
 800b83a:	f04f 37ff 	mov.w	r7, #4294967295
 800b83e:	e7f4      	b.n	800b82a <__swbuf_r+0x64>

0800b840 <__swsetup_r>:
 800b840:	b538      	push	{r3, r4, r5, lr}
 800b842:	4b2a      	ldr	r3, [pc, #168]	; (800b8ec <__swsetup_r+0xac>)
 800b844:	4605      	mov	r5, r0
 800b846:	6818      	ldr	r0, [r3, #0]
 800b848:	460c      	mov	r4, r1
 800b84a:	b118      	cbz	r0, 800b854 <__swsetup_r+0x14>
 800b84c:	6a03      	ldr	r3, [r0, #32]
 800b84e:	b90b      	cbnz	r3, 800b854 <__swsetup_r+0x14>
 800b850:	f7ff fe90 	bl	800b574 <__sinit>
 800b854:	89a3      	ldrh	r3, [r4, #12]
 800b856:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b85a:	0718      	lsls	r0, r3, #28
 800b85c:	d422      	bmi.n	800b8a4 <__swsetup_r+0x64>
 800b85e:	06d9      	lsls	r1, r3, #27
 800b860:	d407      	bmi.n	800b872 <__swsetup_r+0x32>
 800b862:	2309      	movs	r3, #9
 800b864:	602b      	str	r3, [r5, #0]
 800b866:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b86a:	81a3      	strh	r3, [r4, #12]
 800b86c:	f04f 30ff 	mov.w	r0, #4294967295
 800b870:	e034      	b.n	800b8dc <__swsetup_r+0x9c>
 800b872:	0758      	lsls	r0, r3, #29
 800b874:	d512      	bpl.n	800b89c <__swsetup_r+0x5c>
 800b876:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b878:	b141      	cbz	r1, 800b88c <__swsetup_r+0x4c>
 800b87a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b87e:	4299      	cmp	r1, r3
 800b880:	d002      	beq.n	800b888 <__swsetup_r+0x48>
 800b882:	4628      	mov	r0, r5
 800b884:	f000 ff7e 	bl	800c784 <_free_r>
 800b888:	2300      	movs	r3, #0
 800b88a:	6363      	str	r3, [r4, #52]	; 0x34
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b892:	81a3      	strh	r3, [r4, #12]
 800b894:	2300      	movs	r3, #0
 800b896:	6063      	str	r3, [r4, #4]
 800b898:	6923      	ldr	r3, [r4, #16]
 800b89a:	6023      	str	r3, [r4, #0]
 800b89c:	89a3      	ldrh	r3, [r4, #12]
 800b89e:	f043 0308 	orr.w	r3, r3, #8
 800b8a2:	81a3      	strh	r3, [r4, #12]
 800b8a4:	6923      	ldr	r3, [r4, #16]
 800b8a6:	b94b      	cbnz	r3, 800b8bc <__swsetup_r+0x7c>
 800b8a8:	89a3      	ldrh	r3, [r4, #12]
 800b8aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b8ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8b2:	d003      	beq.n	800b8bc <__swsetup_r+0x7c>
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	f001 fe0c 	bl	800d4d4 <__smakebuf_r>
 800b8bc:	89a0      	ldrh	r0, [r4, #12]
 800b8be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8c2:	f010 0301 	ands.w	r3, r0, #1
 800b8c6:	d00a      	beq.n	800b8de <__swsetup_r+0x9e>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	60a3      	str	r3, [r4, #8]
 800b8cc:	6963      	ldr	r3, [r4, #20]
 800b8ce:	425b      	negs	r3, r3
 800b8d0:	61a3      	str	r3, [r4, #24]
 800b8d2:	6923      	ldr	r3, [r4, #16]
 800b8d4:	b943      	cbnz	r3, 800b8e8 <__swsetup_r+0xa8>
 800b8d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b8da:	d1c4      	bne.n	800b866 <__swsetup_r+0x26>
 800b8dc:	bd38      	pop	{r3, r4, r5, pc}
 800b8de:	0781      	lsls	r1, r0, #30
 800b8e0:	bf58      	it	pl
 800b8e2:	6963      	ldrpl	r3, [r4, #20]
 800b8e4:	60a3      	str	r3, [r4, #8]
 800b8e6:	e7f4      	b.n	800b8d2 <__swsetup_r+0x92>
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	e7f7      	b.n	800b8dc <__swsetup_r+0x9c>
 800b8ec:	200008f8 	.word	0x200008f8

0800b8f0 <memmove>:
 800b8f0:	4288      	cmp	r0, r1
 800b8f2:	b510      	push	{r4, lr}
 800b8f4:	eb01 0402 	add.w	r4, r1, r2
 800b8f8:	d902      	bls.n	800b900 <memmove+0x10>
 800b8fa:	4284      	cmp	r4, r0
 800b8fc:	4623      	mov	r3, r4
 800b8fe:	d807      	bhi.n	800b910 <memmove+0x20>
 800b900:	1e43      	subs	r3, r0, #1
 800b902:	42a1      	cmp	r1, r4
 800b904:	d008      	beq.n	800b918 <memmove+0x28>
 800b906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b90a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b90e:	e7f8      	b.n	800b902 <memmove+0x12>
 800b910:	4402      	add	r2, r0
 800b912:	4601      	mov	r1, r0
 800b914:	428a      	cmp	r2, r1
 800b916:	d100      	bne.n	800b91a <memmove+0x2a>
 800b918:	bd10      	pop	{r4, pc}
 800b91a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b91e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b922:	e7f7      	b.n	800b914 <memmove+0x24>

0800b924 <memset>:
 800b924:	4402      	add	r2, r0
 800b926:	4603      	mov	r3, r0
 800b928:	4293      	cmp	r3, r2
 800b92a:	d100      	bne.n	800b92e <memset+0xa>
 800b92c:	4770      	bx	lr
 800b92e:	f803 1b01 	strb.w	r1, [r3], #1
 800b932:	e7f9      	b.n	800b928 <memset+0x4>

0800b934 <strncat>:
 800b934:	b530      	push	{r4, r5, lr}
 800b936:	4604      	mov	r4, r0
 800b938:	7825      	ldrb	r5, [r4, #0]
 800b93a:	4623      	mov	r3, r4
 800b93c:	3401      	adds	r4, #1
 800b93e:	2d00      	cmp	r5, #0
 800b940:	d1fa      	bne.n	800b938 <strncat+0x4>
 800b942:	3a01      	subs	r2, #1
 800b944:	d304      	bcc.n	800b950 <strncat+0x1c>
 800b946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b94a:	f803 4b01 	strb.w	r4, [r3], #1
 800b94e:	b904      	cbnz	r4, 800b952 <strncat+0x1e>
 800b950:	bd30      	pop	{r4, r5, pc}
 800b952:	2a00      	cmp	r2, #0
 800b954:	d1f5      	bne.n	800b942 <strncat+0xe>
 800b956:	701a      	strb	r2, [r3, #0]
 800b958:	e7f3      	b.n	800b942 <strncat+0xe>

0800b95a <strncpy>:
 800b95a:	b510      	push	{r4, lr}
 800b95c:	3901      	subs	r1, #1
 800b95e:	4603      	mov	r3, r0
 800b960:	b132      	cbz	r2, 800b970 <strncpy+0x16>
 800b962:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b966:	f803 4b01 	strb.w	r4, [r3], #1
 800b96a:	3a01      	subs	r2, #1
 800b96c:	2c00      	cmp	r4, #0
 800b96e:	d1f7      	bne.n	800b960 <strncpy+0x6>
 800b970:	441a      	add	r2, r3
 800b972:	2100      	movs	r1, #0
 800b974:	4293      	cmp	r3, r2
 800b976:	d100      	bne.n	800b97a <strncpy+0x20>
 800b978:	bd10      	pop	{r4, pc}
 800b97a:	f803 1b01 	strb.w	r1, [r3], #1
 800b97e:	e7f9      	b.n	800b974 <strncpy+0x1a>

0800b980 <_localeconv_r>:
 800b980:	4800      	ldr	r0, [pc, #0]	; (800b984 <_localeconv_r+0x4>)
 800b982:	4770      	bx	lr
 800b984:	200009ec 	.word	0x200009ec

0800b988 <_close_r>:
 800b988:	b538      	push	{r3, r4, r5, lr}
 800b98a:	4d06      	ldr	r5, [pc, #24]	; (800b9a4 <_close_r+0x1c>)
 800b98c:	2300      	movs	r3, #0
 800b98e:	4604      	mov	r4, r0
 800b990:	4608      	mov	r0, r1
 800b992:	602b      	str	r3, [r5, #0]
 800b994:	f7f8 f84b 	bl	8003a2e <_close>
 800b998:	1c43      	adds	r3, r0, #1
 800b99a:	d102      	bne.n	800b9a2 <_close_r+0x1a>
 800b99c:	682b      	ldr	r3, [r5, #0]
 800b99e:	b103      	cbz	r3, 800b9a2 <_close_r+0x1a>
 800b9a0:	6023      	str	r3, [r4, #0]
 800b9a2:	bd38      	pop	{r3, r4, r5, pc}
 800b9a4:	20019c88 	.word	0x20019c88

0800b9a8 <_lseek_r>:
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	4d07      	ldr	r5, [pc, #28]	; (800b9c8 <_lseek_r+0x20>)
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	4608      	mov	r0, r1
 800b9b0:	4611      	mov	r1, r2
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	602a      	str	r2, [r5, #0]
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	f7f8 f860 	bl	8003a7c <_lseek>
 800b9bc:	1c43      	adds	r3, r0, #1
 800b9be:	d102      	bne.n	800b9c6 <_lseek_r+0x1e>
 800b9c0:	682b      	ldr	r3, [r5, #0]
 800b9c2:	b103      	cbz	r3, 800b9c6 <_lseek_r+0x1e>
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	bd38      	pop	{r3, r4, r5, pc}
 800b9c8:	20019c88 	.word	0x20019c88

0800b9cc <_read_r>:
 800b9cc:	b538      	push	{r3, r4, r5, lr}
 800b9ce:	4d07      	ldr	r5, [pc, #28]	; (800b9ec <_read_r+0x20>)
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	4608      	mov	r0, r1
 800b9d4:	4611      	mov	r1, r2
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	602a      	str	r2, [r5, #0]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	f7f7 ffee 	bl	80039bc <_read>
 800b9e0:	1c43      	adds	r3, r0, #1
 800b9e2:	d102      	bne.n	800b9ea <_read_r+0x1e>
 800b9e4:	682b      	ldr	r3, [r5, #0]
 800b9e6:	b103      	cbz	r3, 800b9ea <_read_r+0x1e>
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	bd38      	pop	{r3, r4, r5, pc}
 800b9ec:	20019c88 	.word	0x20019c88

0800b9f0 <_write_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	4d07      	ldr	r5, [pc, #28]	; (800ba10 <_write_r+0x20>)
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	4608      	mov	r0, r1
 800b9f8:	4611      	mov	r1, r2
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	602a      	str	r2, [r5, #0]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	f7f7 fff9 	bl	80039f6 <_write>
 800ba04:	1c43      	adds	r3, r0, #1
 800ba06:	d102      	bne.n	800ba0e <_write_r+0x1e>
 800ba08:	682b      	ldr	r3, [r5, #0]
 800ba0a:	b103      	cbz	r3, 800ba0e <_write_r+0x1e>
 800ba0c:	6023      	str	r3, [r4, #0]
 800ba0e:	bd38      	pop	{r3, r4, r5, pc}
 800ba10:	20019c88 	.word	0x20019c88

0800ba14 <__errno>:
 800ba14:	4b01      	ldr	r3, [pc, #4]	; (800ba1c <__errno+0x8>)
 800ba16:	6818      	ldr	r0, [r3, #0]
 800ba18:	4770      	bx	lr
 800ba1a:	bf00      	nop
 800ba1c:	200008f8 	.word	0x200008f8

0800ba20 <__libc_init_array>:
 800ba20:	b570      	push	{r4, r5, r6, lr}
 800ba22:	4d0d      	ldr	r5, [pc, #52]	; (800ba58 <__libc_init_array+0x38>)
 800ba24:	4c0d      	ldr	r4, [pc, #52]	; (800ba5c <__libc_init_array+0x3c>)
 800ba26:	1b64      	subs	r4, r4, r5
 800ba28:	10a4      	asrs	r4, r4, #2
 800ba2a:	2600      	movs	r6, #0
 800ba2c:	42a6      	cmp	r6, r4
 800ba2e:	d109      	bne.n	800ba44 <__libc_init_array+0x24>
 800ba30:	4d0b      	ldr	r5, [pc, #44]	; (800ba60 <__libc_init_array+0x40>)
 800ba32:	4c0c      	ldr	r4, [pc, #48]	; (800ba64 <__libc_init_array+0x44>)
 800ba34:	f001 ffe6 	bl	800da04 <_init>
 800ba38:	1b64      	subs	r4, r4, r5
 800ba3a:	10a4      	asrs	r4, r4, #2
 800ba3c:	2600      	movs	r6, #0
 800ba3e:	42a6      	cmp	r6, r4
 800ba40:	d105      	bne.n	800ba4e <__libc_init_array+0x2e>
 800ba42:	bd70      	pop	{r4, r5, r6, pc}
 800ba44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba48:	4798      	blx	r3
 800ba4a:	3601      	adds	r6, #1
 800ba4c:	e7ee      	b.n	800ba2c <__libc_init_array+0xc>
 800ba4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba52:	4798      	blx	r3
 800ba54:	3601      	adds	r6, #1
 800ba56:	e7f2      	b.n	800ba3e <__libc_init_array+0x1e>
 800ba58:	0800fcec 	.word	0x0800fcec
 800ba5c:	0800fcec 	.word	0x0800fcec
 800ba60:	0800fcec 	.word	0x0800fcec
 800ba64:	0800fcf0 	.word	0x0800fcf0

0800ba68 <__retarget_lock_init_recursive>:
 800ba68:	4770      	bx	lr

0800ba6a <__retarget_lock_acquire_recursive>:
 800ba6a:	4770      	bx	lr

0800ba6c <__retarget_lock_release_recursive>:
 800ba6c:	4770      	bx	lr

0800ba6e <memcpy>:
 800ba6e:	440a      	add	r2, r1
 800ba70:	4291      	cmp	r1, r2
 800ba72:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba76:	d100      	bne.n	800ba7a <memcpy+0xc>
 800ba78:	4770      	bx	lr
 800ba7a:	b510      	push	{r4, lr}
 800ba7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba84:	4291      	cmp	r1, r2
 800ba86:	d1f9      	bne.n	800ba7c <memcpy+0xe>
 800ba88:	bd10      	pop	{r4, pc}

0800ba8a <quorem>:
 800ba8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8e:	6903      	ldr	r3, [r0, #16]
 800ba90:	690c      	ldr	r4, [r1, #16]
 800ba92:	42a3      	cmp	r3, r4
 800ba94:	4607      	mov	r7, r0
 800ba96:	db7e      	blt.n	800bb96 <quorem+0x10c>
 800ba98:	3c01      	subs	r4, #1
 800ba9a:	f101 0814 	add.w	r8, r1, #20
 800ba9e:	f100 0514 	add.w	r5, r0, #20
 800baa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800baa6:	9301      	str	r3, [sp, #4]
 800baa8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800baac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bab0:	3301      	adds	r3, #1
 800bab2:	429a      	cmp	r2, r3
 800bab4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bab8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800babc:	fbb2 f6f3 	udiv	r6, r2, r3
 800bac0:	d331      	bcc.n	800bb26 <quorem+0x9c>
 800bac2:	f04f 0e00 	mov.w	lr, #0
 800bac6:	4640      	mov	r0, r8
 800bac8:	46ac      	mov	ip, r5
 800baca:	46f2      	mov	sl, lr
 800bacc:	f850 2b04 	ldr.w	r2, [r0], #4
 800bad0:	b293      	uxth	r3, r2
 800bad2:	fb06 e303 	mla	r3, r6, r3, lr
 800bad6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bada:	0c1a      	lsrs	r2, r3, #16
 800badc:	b29b      	uxth	r3, r3
 800bade:	ebaa 0303 	sub.w	r3, sl, r3
 800bae2:	f8dc a000 	ldr.w	sl, [ip]
 800bae6:	fa13 f38a 	uxtah	r3, r3, sl
 800baea:	fb06 220e 	mla	r2, r6, lr, r2
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	9b00      	ldr	r3, [sp, #0]
 800baf2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800baf6:	b292      	uxth	r2, r2
 800baf8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bafc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb00:	f8bd 3000 	ldrh.w	r3, [sp]
 800bb04:	4581      	cmp	r9, r0
 800bb06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb0a:	f84c 3b04 	str.w	r3, [ip], #4
 800bb0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bb12:	d2db      	bcs.n	800bacc <quorem+0x42>
 800bb14:	f855 300b 	ldr.w	r3, [r5, fp]
 800bb18:	b92b      	cbnz	r3, 800bb26 <quorem+0x9c>
 800bb1a:	9b01      	ldr	r3, [sp, #4]
 800bb1c:	3b04      	subs	r3, #4
 800bb1e:	429d      	cmp	r5, r3
 800bb20:	461a      	mov	r2, r3
 800bb22:	d32c      	bcc.n	800bb7e <quorem+0xf4>
 800bb24:	613c      	str	r4, [r7, #16]
 800bb26:	4638      	mov	r0, r7
 800bb28:	f001 f9a8 	bl	800ce7c <__mcmp>
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	db22      	blt.n	800bb76 <quorem+0xec>
 800bb30:	3601      	adds	r6, #1
 800bb32:	4629      	mov	r1, r5
 800bb34:	2000      	movs	r0, #0
 800bb36:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb3a:	f8d1 c000 	ldr.w	ip, [r1]
 800bb3e:	b293      	uxth	r3, r2
 800bb40:	1ac3      	subs	r3, r0, r3
 800bb42:	0c12      	lsrs	r2, r2, #16
 800bb44:	fa13 f38c 	uxtah	r3, r3, ip
 800bb48:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bb4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb56:	45c1      	cmp	r9, r8
 800bb58:	f841 3b04 	str.w	r3, [r1], #4
 800bb5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bb60:	d2e9      	bcs.n	800bb36 <quorem+0xac>
 800bb62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb6a:	b922      	cbnz	r2, 800bb76 <quorem+0xec>
 800bb6c:	3b04      	subs	r3, #4
 800bb6e:	429d      	cmp	r5, r3
 800bb70:	461a      	mov	r2, r3
 800bb72:	d30a      	bcc.n	800bb8a <quorem+0x100>
 800bb74:	613c      	str	r4, [r7, #16]
 800bb76:	4630      	mov	r0, r6
 800bb78:	b003      	add	sp, #12
 800bb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7e:	6812      	ldr	r2, [r2, #0]
 800bb80:	3b04      	subs	r3, #4
 800bb82:	2a00      	cmp	r2, #0
 800bb84:	d1ce      	bne.n	800bb24 <quorem+0x9a>
 800bb86:	3c01      	subs	r4, #1
 800bb88:	e7c9      	b.n	800bb1e <quorem+0x94>
 800bb8a:	6812      	ldr	r2, [r2, #0]
 800bb8c:	3b04      	subs	r3, #4
 800bb8e:	2a00      	cmp	r2, #0
 800bb90:	d1f0      	bne.n	800bb74 <quorem+0xea>
 800bb92:	3c01      	subs	r4, #1
 800bb94:	e7eb      	b.n	800bb6e <quorem+0xe4>
 800bb96:	2000      	movs	r0, #0
 800bb98:	e7ee      	b.n	800bb78 <quorem+0xee>
 800bb9a:	0000      	movs	r0, r0
 800bb9c:	0000      	movs	r0, r0
	...

0800bba0 <_dtoa_r>:
 800bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	ed2d 8b04 	vpush	{d8-d9}
 800bba8:	69c5      	ldr	r5, [r0, #28]
 800bbaa:	b093      	sub	sp, #76	; 0x4c
 800bbac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bbb0:	ec57 6b10 	vmov	r6, r7, d0
 800bbb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bbb8:	9107      	str	r1, [sp, #28]
 800bbba:	4604      	mov	r4, r0
 800bbbc:	920a      	str	r2, [sp, #40]	; 0x28
 800bbbe:	930d      	str	r3, [sp, #52]	; 0x34
 800bbc0:	b975      	cbnz	r5, 800bbe0 <_dtoa_r+0x40>
 800bbc2:	2010      	movs	r0, #16
 800bbc4:	f000 fe2a 	bl	800c81c <malloc>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	61e0      	str	r0, [r4, #28]
 800bbcc:	b920      	cbnz	r0, 800bbd8 <_dtoa_r+0x38>
 800bbce:	4bae      	ldr	r3, [pc, #696]	; (800be88 <_dtoa_r+0x2e8>)
 800bbd0:	21ef      	movs	r1, #239	; 0xef
 800bbd2:	48ae      	ldr	r0, [pc, #696]	; (800be8c <_dtoa_r+0x2ec>)
 800bbd4:	f001 fcec 	bl	800d5b0 <__assert_func>
 800bbd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bbdc:	6005      	str	r5, [r0, #0]
 800bbde:	60c5      	str	r5, [r0, #12]
 800bbe0:	69e3      	ldr	r3, [r4, #28]
 800bbe2:	6819      	ldr	r1, [r3, #0]
 800bbe4:	b151      	cbz	r1, 800bbfc <_dtoa_r+0x5c>
 800bbe6:	685a      	ldr	r2, [r3, #4]
 800bbe8:	604a      	str	r2, [r1, #4]
 800bbea:	2301      	movs	r3, #1
 800bbec:	4093      	lsls	r3, r2
 800bbee:	608b      	str	r3, [r1, #8]
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f000 ff07 	bl	800ca04 <_Bfree>
 800bbf6:	69e3      	ldr	r3, [r4, #28]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	601a      	str	r2, [r3, #0]
 800bbfc:	1e3b      	subs	r3, r7, #0
 800bbfe:	bfbb      	ittet	lt
 800bc00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bc04:	9303      	strlt	r3, [sp, #12]
 800bc06:	2300      	movge	r3, #0
 800bc08:	2201      	movlt	r2, #1
 800bc0a:	bfac      	ite	ge
 800bc0c:	f8c8 3000 	strge.w	r3, [r8]
 800bc10:	f8c8 2000 	strlt.w	r2, [r8]
 800bc14:	4b9e      	ldr	r3, [pc, #632]	; (800be90 <_dtoa_r+0x2f0>)
 800bc16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bc1a:	ea33 0308 	bics.w	r3, r3, r8
 800bc1e:	d11b      	bne.n	800bc58 <_dtoa_r+0xb8>
 800bc20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc22:	f242 730f 	movw	r3, #9999	; 0x270f
 800bc26:	6013      	str	r3, [r2, #0]
 800bc28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bc2c:	4333      	orrs	r3, r6
 800bc2e:	f000 8593 	beq.w	800c758 <_dtoa_r+0xbb8>
 800bc32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc34:	b963      	cbnz	r3, 800bc50 <_dtoa_r+0xb0>
 800bc36:	4b97      	ldr	r3, [pc, #604]	; (800be94 <_dtoa_r+0x2f4>)
 800bc38:	e027      	b.n	800bc8a <_dtoa_r+0xea>
 800bc3a:	4b97      	ldr	r3, [pc, #604]	; (800be98 <_dtoa_r+0x2f8>)
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	3308      	adds	r3, #8
 800bc40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc42:	6013      	str	r3, [r2, #0]
 800bc44:	9800      	ldr	r0, [sp, #0]
 800bc46:	b013      	add	sp, #76	; 0x4c
 800bc48:	ecbd 8b04 	vpop	{d8-d9}
 800bc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc50:	4b90      	ldr	r3, [pc, #576]	; (800be94 <_dtoa_r+0x2f4>)
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	3303      	adds	r3, #3
 800bc56:	e7f3      	b.n	800bc40 <_dtoa_r+0xa0>
 800bc58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	ec51 0b17 	vmov	r0, r1, d7
 800bc62:	eeb0 8a47 	vmov.f32	s16, s14
 800bc66:	eef0 8a67 	vmov.f32	s17, s15
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	f7f4 ff44 	bl	8000af8 <__aeabi_dcmpeq>
 800bc70:	4681      	mov	r9, r0
 800bc72:	b160      	cbz	r0, 800bc8e <_dtoa_r+0xee>
 800bc74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc76:	2301      	movs	r3, #1
 800bc78:	6013      	str	r3, [r2, #0]
 800bc7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f000 8568 	beq.w	800c752 <_dtoa_r+0xbb2>
 800bc82:	4b86      	ldr	r3, [pc, #536]	; (800be9c <_dtoa_r+0x2fc>)
 800bc84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc86:	6013      	str	r3, [r2, #0]
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	9300      	str	r3, [sp, #0]
 800bc8c:	e7da      	b.n	800bc44 <_dtoa_r+0xa4>
 800bc8e:	aa10      	add	r2, sp, #64	; 0x40
 800bc90:	a911      	add	r1, sp, #68	; 0x44
 800bc92:	4620      	mov	r0, r4
 800bc94:	eeb0 0a48 	vmov.f32	s0, s16
 800bc98:	eef0 0a68 	vmov.f32	s1, s17
 800bc9c:	f001 f994 	bl	800cfc8 <__d2b>
 800bca0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bca4:	4682      	mov	sl, r0
 800bca6:	2d00      	cmp	r5, #0
 800bca8:	d07f      	beq.n	800bdaa <_dtoa_r+0x20a>
 800bcaa:	ee18 3a90 	vmov	r3, s17
 800bcae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcb2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bcb6:	ec51 0b18 	vmov	r0, r1, d8
 800bcba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bcbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bcc2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	2200      	movs	r2, #0
 800bcca:	4b75      	ldr	r3, [pc, #468]	; (800bea0 <_dtoa_r+0x300>)
 800bccc:	f7f4 faf4 	bl	80002b8 <__aeabi_dsub>
 800bcd0:	a367      	add	r3, pc, #412	; (adr r3, 800be70 <_dtoa_r+0x2d0>)
 800bcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd6:	f7f4 fca7 	bl	8000628 <__aeabi_dmul>
 800bcda:	a367      	add	r3, pc, #412	; (adr r3, 800be78 <_dtoa_r+0x2d8>)
 800bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce0:	f7f4 faec 	bl	80002bc <__adddf3>
 800bce4:	4606      	mov	r6, r0
 800bce6:	4628      	mov	r0, r5
 800bce8:	460f      	mov	r7, r1
 800bcea:	f7f4 fc33 	bl	8000554 <__aeabi_i2d>
 800bcee:	a364      	add	r3, pc, #400	; (adr r3, 800be80 <_dtoa_r+0x2e0>)
 800bcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf4:	f7f4 fc98 	bl	8000628 <__aeabi_dmul>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	4639      	mov	r1, r7
 800bd00:	f7f4 fadc 	bl	80002bc <__adddf3>
 800bd04:	4606      	mov	r6, r0
 800bd06:	460f      	mov	r7, r1
 800bd08:	f7f4 ff3e 	bl	8000b88 <__aeabi_d2iz>
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	4683      	mov	fp, r0
 800bd10:	2300      	movs	r3, #0
 800bd12:	4630      	mov	r0, r6
 800bd14:	4639      	mov	r1, r7
 800bd16:	f7f4 fef9 	bl	8000b0c <__aeabi_dcmplt>
 800bd1a:	b148      	cbz	r0, 800bd30 <_dtoa_r+0x190>
 800bd1c:	4658      	mov	r0, fp
 800bd1e:	f7f4 fc19 	bl	8000554 <__aeabi_i2d>
 800bd22:	4632      	mov	r2, r6
 800bd24:	463b      	mov	r3, r7
 800bd26:	f7f4 fee7 	bl	8000af8 <__aeabi_dcmpeq>
 800bd2a:	b908      	cbnz	r0, 800bd30 <_dtoa_r+0x190>
 800bd2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd30:	f1bb 0f16 	cmp.w	fp, #22
 800bd34:	d857      	bhi.n	800bde6 <_dtoa_r+0x246>
 800bd36:	4b5b      	ldr	r3, [pc, #364]	; (800bea4 <_dtoa_r+0x304>)
 800bd38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd40:	ec51 0b18 	vmov	r0, r1, d8
 800bd44:	f7f4 fee2 	bl	8000b0c <__aeabi_dcmplt>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	d04e      	beq.n	800bdea <_dtoa_r+0x24a>
 800bd4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd50:	2300      	movs	r3, #0
 800bd52:	930c      	str	r3, [sp, #48]	; 0x30
 800bd54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd56:	1b5b      	subs	r3, r3, r5
 800bd58:	1e5a      	subs	r2, r3, #1
 800bd5a:	bf45      	ittet	mi
 800bd5c:	f1c3 0301 	rsbmi	r3, r3, #1
 800bd60:	9305      	strmi	r3, [sp, #20]
 800bd62:	2300      	movpl	r3, #0
 800bd64:	2300      	movmi	r3, #0
 800bd66:	9206      	str	r2, [sp, #24]
 800bd68:	bf54      	ite	pl
 800bd6a:	9305      	strpl	r3, [sp, #20]
 800bd6c:	9306      	strmi	r3, [sp, #24]
 800bd6e:	f1bb 0f00 	cmp.w	fp, #0
 800bd72:	db3c      	blt.n	800bdee <_dtoa_r+0x24e>
 800bd74:	9b06      	ldr	r3, [sp, #24]
 800bd76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bd7a:	445b      	add	r3, fp
 800bd7c:	9306      	str	r3, [sp, #24]
 800bd7e:	2300      	movs	r3, #0
 800bd80:	9308      	str	r3, [sp, #32]
 800bd82:	9b07      	ldr	r3, [sp, #28]
 800bd84:	2b09      	cmp	r3, #9
 800bd86:	d868      	bhi.n	800be5a <_dtoa_r+0x2ba>
 800bd88:	2b05      	cmp	r3, #5
 800bd8a:	bfc4      	itt	gt
 800bd8c:	3b04      	subgt	r3, #4
 800bd8e:	9307      	strgt	r3, [sp, #28]
 800bd90:	9b07      	ldr	r3, [sp, #28]
 800bd92:	f1a3 0302 	sub.w	r3, r3, #2
 800bd96:	bfcc      	ite	gt
 800bd98:	2500      	movgt	r5, #0
 800bd9a:	2501      	movle	r5, #1
 800bd9c:	2b03      	cmp	r3, #3
 800bd9e:	f200 8085 	bhi.w	800beac <_dtoa_r+0x30c>
 800bda2:	e8df f003 	tbb	[pc, r3]
 800bda6:	3b2e      	.short	0x3b2e
 800bda8:	5839      	.short	0x5839
 800bdaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bdae:	441d      	add	r5, r3
 800bdb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bdb4:	2b20      	cmp	r3, #32
 800bdb6:	bfc1      	itttt	gt
 800bdb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bdbc:	fa08 f803 	lslgt.w	r8, r8, r3
 800bdc0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bdc4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bdc8:	bfd6      	itet	le
 800bdca:	f1c3 0320 	rsble	r3, r3, #32
 800bdce:	ea48 0003 	orrgt.w	r0, r8, r3
 800bdd2:	fa06 f003 	lslle.w	r0, r6, r3
 800bdd6:	f7f4 fbad 	bl	8000534 <__aeabi_ui2d>
 800bdda:	2201      	movs	r2, #1
 800bddc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bde0:	3d01      	subs	r5, #1
 800bde2:	920e      	str	r2, [sp, #56]	; 0x38
 800bde4:	e76f      	b.n	800bcc6 <_dtoa_r+0x126>
 800bde6:	2301      	movs	r3, #1
 800bde8:	e7b3      	b.n	800bd52 <_dtoa_r+0x1b2>
 800bdea:	900c      	str	r0, [sp, #48]	; 0x30
 800bdec:	e7b2      	b.n	800bd54 <_dtoa_r+0x1b4>
 800bdee:	9b05      	ldr	r3, [sp, #20]
 800bdf0:	eba3 030b 	sub.w	r3, r3, fp
 800bdf4:	9305      	str	r3, [sp, #20]
 800bdf6:	f1cb 0300 	rsb	r3, fp, #0
 800bdfa:	9308      	str	r3, [sp, #32]
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	930b      	str	r3, [sp, #44]	; 0x2c
 800be00:	e7bf      	b.n	800bd82 <_dtoa_r+0x1e2>
 800be02:	2300      	movs	r3, #0
 800be04:	9309      	str	r3, [sp, #36]	; 0x24
 800be06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be08:	2b00      	cmp	r3, #0
 800be0a:	dc52      	bgt.n	800beb2 <_dtoa_r+0x312>
 800be0c:	2301      	movs	r3, #1
 800be0e:	9301      	str	r3, [sp, #4]
 800be10:	9304      	str	r3, [sp, #16]
 800be12:	461a      	mov	r2, r3
 800be14:	920a      	str	r2, [sp, #40]	; 0x28
 800be16:	e00b      	b.n	800be30 <_dtoa_r+0x290>
 800be18:	2301      	movs	r3, #1
 800be1a:	e7f3      	b.n	800be04 <_dtoa_r+0x264>
 800be1c:	2300      	movs	r3, #0
 800be1e:	9309      	str	r3, [sp, #36]	; 0x24
 800be20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be22:	445b      	add	r3, fp
 800be24:	9301      	str	r3, [sp, #4]
 800be26:	3301      	adds	r3, #1
 800be28:	2b01      	cmp	r3, #1
 800be2a:	9304      	str	r3, [sp, #16]
 800be2c:	bfb8      	it	lt
 800be2e:	2301      	movlt	r3, #1
 800be30:	69e0      	ldr	r0, [r4, #28]
 800be32:	2100      	movs	r1, #0
 800be34:	2204      	movs	r2, #4
 800be36:	f102 0614 	add.w	r6, r2, #20
 800be3a:	429e      	cmp	r6, r3
 800be3c:	d93d      	bls.n	800beba <_dtoa_r+0x31a>
 800be3e:	6041      	str	r1, [r0, #4]
 800be40:	4620      	mov	r0, r4
 800be42:	f000 fd9f 	bl	800c984 <_Balloc>
 800be46:	9000      	str	r0, [sp, #0]
 800be48:	2800      	cmp	r0, #0
 800be4a:	d139      	bne.n	800bec0 <_dtoa_r+0x320>
 800be4c:	4b16      	ldr	r3, [pc, #88]	; (800bea8 <_dtoa_r+0x308>)
 800be4e:	4602      	mov	r2, r0
 800be50:	f240 11af 	movw	r1, #431	; 0x1af
 800be54:	e6bd      	b.n	800bbd2 <_dtoa_r+0x32>
 800be56:	2301      	movs	r3, #1
 800be58:	e7e1      	b.n	800be1e <_dtoa_r+0x27e>
 800be5a:	2501      	movs	r5, #1
 800be5c:	2300      	movs	r3, #0
 800be5e:	9307      	str	r3, [sp, #28]
 800be60:	9509      	str	r5, [sp, #36]	; 0x24
 800be62:	f04f 33ff 	mov.w	r3, #4294967295
 800be66:	9301      	str	r3, [sp, #4]
 800be68:	9304      	str	r3, [sp, #16]
 800be6a:	2200      	movs	r2, #0
 800be6c:	2312      	movs	r3, #18
 800be6e:	e7d1      	b.n	800be14 <_dtoa_r+0x274>
 800be70:	636f4361 	.word	0x636f4361
 800be74:	3fd287a7 	.word	0x3fd287a7
 800be78:	8b60c8b3 	.word	0x8b60c8b3
 800be7c:	3fc68a28 	.word	0x3fc68a28
 800be80:	509f79fb 	.word	0x509f79fb
 800be84:	3fd34413 	.word	0x3fd34413
 800be88:	0800f9b1 	.word	0x0800f9b1
 800be8c:	0800f9c8 	.word	0x0800f9c8
 800be90:	7ff00000 	.word	0x7ff00000
 800be94:	0800f9ad 	.word	0x0800f9ad
 800be98:	0800f9a4 	.word	0x0800f9a4
 800be9c:	0800f981 	.word	0x0800f981
 800bea0:	3ff80000 	.word	0x3ff80000
 800bea4:	0800fab8 	.word	0x0800fab8
 800bea8:	0800fa20 	.word	0x0800fa20
 800beac:	2301      	movs	r3, #1
 800beae:	9309      	str	r3, [sp, #36]	; 0x24
 800beb0:	e7d7      	b.n	800be62 <_dtoa_r+0x2c2>
 800beb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beb4:	9301      	str	r3, [sp, #4]
 800beb6:	9304      	str	r3, [sp, #16]
 800beb8:	e7ba      	b.n	800be30 <_dtoa_r+0x290>
 800beba:	3101      	adds	r1, #1
 800bebc:	0052      	lsls	r2, r2, #1
 800bebe:	e7ba      	b.n	800be36 <_dtoa_r+0x296>
 800bec0:	69e3      	ldr	r3, [r4, #28]
 800bec2:	9a00      	ldr	r2, [sp, #0]
 800bec4:	601a      	str	r2, [r3, #0]
 800bec6:	9b04      	ldr	r3, [sp, #16]
 800bec8:	2b0e      	cmp	r3, #14
 800beca:	f200 80a8 	bhi.w	800c01e <_dtoa_r+0x47e>
 800bece:	2d00      	cmp	r5, #0
 800bed0:	f000 80a5 	beq.w	800c01e <_dtoa_r+0x47e>
 800bed4:	f1bb 0f00 	cmp.w	fp, #0
 800bed8:	dd38      	ble.n	800bf4c <_dtoa_r+0x3ac>
 800beda:	4bc0      	ldr	r3, [pc, #768]	; (800c1dc <_dtoa_r+0x63c>)
 800bedc:	f00b 020f 	and.w	r2, fp, #15
 800bee0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bee4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bee8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800beec:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bef0:	d019      	beq.n	800bf26 <_dtoa_r+0x386>
 800bef2:	4bbb      	ldr	r3, [pc, #748]	; (800c1e0 <_dtoa_r+0x640>)
 800bef4:	ec51 0b18 	vmov	r0, r1, d8
 800bef8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800befc:	f7f4 fcbe 	bl	800087c <__aeabi_ddiv>
 800bf00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf04:	f008 080f 	and.w	r8, r8, #15
 800bf08:	2503      	movs	r5, #3
 800bf0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c1e0 <_dtoa_r+0x640>
 800bf0e:	f1b8 0f00 	cmp.w	r8, #0
 800bf12:	d10a      	bne.n	800bf2a <_dtoa_r+0x38a>
 800bf14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf18:	4632      	mov	r2, r6
 800bf1a:	463b      	mov	r3, r7
 800bf1c:	f7f4 fcae 	bl	800087c <__aeabi_ddiv>
 800bf20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf24:	e02b      	b.n	800bf7e <_dtoa_r+0x3de>
 800bf26:	2502      	movs	r5, #2
 800bf28:	e7ef      	b.n	800bf0a <_dtoa_r+0x36a>
 800bf2a:	f018 0f01 	tst.w	r8, #1
 800bf2e:	d008      	beq.n	800bf42 <_dtoa_r+0x3a2>
 800bf30:	4630      	mov	r0, r6
 800bf32:	4639      	mov	r1, r7
 800bf34:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bf38:	f7f4 fb76 	bl	8000628 <__aeabi_dmul>
 800bf3c:	3501      	adds	r5, #1
 800bf3e:	4606      	mov	r6, r0
 800bf40:	460f      	mov	r7, r1
 800bf42:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bf46:	f109 0908 	add.w	r9, r9, #8
 800bf4a:	e7e0      	b.n	800bf0e <_dtoa_r+0x36e>
 800bf4c:	f000 809f 	beq.w	800c08e <_dtoa_r+0x4ee>
 800bf50:	f1cb 0600 	rsb	r6, fp, #0
 800bf54:	4ba1      	ldr	r3, [pc, #644]	; (800c1dc <_dtoa_r+0x63c>)
 800bf56:	4fa2      	ldr	r7, [pc, #648]	; (800c1e0 <_dtoa_r+0x640>)
 800bf58:	f006 020f 	and.w	r2, r6, #15
 800bf5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf64:	ec51 0b18 	vmov	r0, r1, d8
 800bf68:	f7f4 fb5e 	bl	8000628 <__aeabi_dmul>
 800bf6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf70:	1136      	asrs	r6, r6, #4
 800bf72:	2300      	movs	r3, #0
 800bf74:	2502      	movs	r5, #2
 800bf76:	2e00      	cmp	r6, #0
 800bf78:	d17e      	bne.n	800c078 <_dtoa_r+0x4d8>
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1d0      	bne.n	800bf20 <_dtoa_r+0x380>
 800bf7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f000 8084 	beq.w	800c092 <_dtoa_r+0x4f2>
 800bf8a:	4b96      	ldr	r3, [pc, #600]	; (800c1e4 <_dtoa_r+0x644>)
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	4640      	mov	r0, r8
 800bf90:	4649      	mov	r1, r9
 800bf92:	f7f4 fdbb 	bl	8000b0c <__aeabi_dcmplt>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d07b      	beq.n	800c092 <_dtoa_r+0x4f2>
 800bf9a:	9b04      	ldr	r3, [sp, #16]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d078      	beq.n	800c092 <_dtoa_r+0x4f2>
 800bfa0:	9b01      	ldr	r3, [sp, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	dd39      	ble.n	800c01a <_dtoa_r+0x47a>
 800bfa6:	4b90      	ldr	r3, [pc, #576]	; (800c1e8 <_dtoa_r+0x648>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	4640      	mov	r0, r8
 800bfac:	4649      	mov	r1, r9
 800bfae:	f7f4 fb3b 	bl	8000628 <__aeabi_dmul>
 800bfb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfb6:	9e01      	ldr	r6, [sp, #4]
 800bfb8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bfbc:	3501      	adds	r5, #1
 800bfbe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f7f4 fac6 	bl	8000554 <__aeabi_i2d>
 800bfc8:	4642      	mov	r2, r8
 800bfca:	464b      	mov	r3, r9
 800bfcc:	f7f4 fb2c 	bl	8000628 <__aeabi_dmul>
 800bfd0:	4b86      	ldr	r3, [pc, #536]	; (800c1ec <_dtoa_r+0x64c>)
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f7f4 f972 	bl	80002bc <__adddf3>
 800bfd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bfdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfe0:	9303      	str	r3, [sp, #12]
 800bfe2:	2e00      	cmp	r6, #0
 800bfe4:	d158      	bne.n	800c098 <_dtoa_r+0x4f8>
 800bfe6:	4b82      	ldr	r3, [pc, #520]	; (800c1f0 <_dtoa_r+0x650>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	4640      	mov	r0, r8
 800bfec:	4649      	mov	r1, r9
 800bfee:	f7f4 f963 	bl	80002b8 <__aeabi_dsub>
 800bff2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bff6:	4680      	mov	r8, r0
 800bff8:	4689      	mov	r9, r1
 800bffa:	f7f4 fda5 	bl	8000b48 <__aeabi_dcmpgt>
 800bffe:	2800      	cmp	r0, #0
 800c000:	f040 8296 	bne.w	800c530 <_dtoa_r+0x990>
 800c004:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c008:	4640      	mov	r0, r8
 800c00a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c00e:	4649      	mov	r1, r9
 800c010:	f7f4 fd7c 	bl	8000b0c <__aeabi_dcmplt>
 800c014:	2800      	cmp	r0, #0
 800c016:	f040 8289 	bne.w	800c52c <_dtoa_r+0x98c>
 800c01a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c01e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c020:	2b00      	cmp	r3, #0
 800c022:	f2c0 814e 	blt.w	800c2c2 <_dtoa_r+0x722>
 800c026:	f1bb 0f0e 	cmp.w	fp, #14
 800c02a:	f300 814a 	bgt.w	800c2c2 <_dtoa_r+0x722>
 800c02e:	4b6b      	ldr	r3, [pc, #428]	; (800c1dc <_dtoa_r+0x63c>)
 800c030:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c034:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f280 80dc 	bge.w	800c1f8 <_dtoa_r+0x658>
 800c040:	9b04      	ldr	r3, [sp, #16]
 800c042:	2b00      	cmp	r3, #0
 800c044:	f300 80d8 	bgt.w	800c1f8 <_dtoa_r+0x658>
 800c048:	f040 826f 	bne.w	800c52a <_dtoa_r+0x98a>
 800c04c:	4b68      	ldr	r3, [pc, #416]	; (800c1f0 <_dtoa_r+0x650>)
 800c04e:	2200      	movs	r2, #0
 800c050:	4640      	mov	r0, r8
 800c052:	4649      	mov	r1, r9
 800c054:	f7f4 fae8 	bl	8000628 <__aeabi_dmul>
 800c058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c05c:	f7f4 fd6a 	bl	8000b34 <__aeabi_dcmpge>
 800c060:	9e04      	ldr	r6, [sp, #16]
 800c062:	4637      	mov	r7, r6
 800c064:	2800      	cmp	r0, #0
 800c066:	f040 8245 	bne.w	800c4f4 <_dtoa_r+0x954>
 800c06a:	9d00      	ldr	r5, [sp, #0]
 800c06c:	2331      	movs	r3, #49	; 0x31
 800c06e:	f805 3b01 	strb.w	r3, [r5], #1
 800c072:	f10b 0b01 	add.w	fp, fp, #1
 800c076:	e241      	b.n	800c4fc <_dtoa_r+0x95c>
 800c078:	07f2      	lsls	r2, r6, #31
 800c07a:	d505      	bpl.n	800c088 <_dtoa_r+0x4e8>
 800c07c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c080:	f7f4 fad2 	bl	8000628 <__aeabi_dmul>
 800c084:	3501      	adds	r5, #1
 800c086:	2301      	movs	r3, #1
 800c088:	1076      	asrs	r6, r6, #1
 800c08a:	3708      	adds	r7, #8
 800c08c:	e773      	b.n	800bf76 <_dtoa_r+0x3d6>
 800c08e:	2502      	movs	r5, #2
 800c090:	e775      	b.n	800bf7e <_dtoa_r+0x3de>
 800c092:	9e04      	ldr	r6, [sp, #16]
 800c094:	465f      	mov	r7, fp
 800c096:	e792      	b.n	800bfbe <_dtoa_r+0x41e>
 800c098:	9900      	ldr	r1, [sp, #0]
 800c09a:	4b50      	ldr	r3, [pc, #320]	; (800c1dc <_dtoa_r+0x63c>)
 800c09c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0a0:	4431      	add	r1, r6
 800c0a2:	9102      	str	r1, [sp, #8]
 800c0a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0a6:	eeb0 9a47 	vmov.f32	s18, s14
 800c0aa:	eef0 9a67 	vmov.f32	s19, s15
 800c0ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c0b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c0b6:	2900      	cmp	r1, #0
 800c0b8:	d044      	beq.n	800c144 <_dtoa_r+0x5a4>
 800c0ba:	494e      	ldr	r1, [pc, #312]	; (800c1f4 <_dtoa_r+0x654>)
 800c0bc:	2000      	movs	r0, #0
 800c0be:	f7f4 fbdd 	bl	800087c <__aeabi_ddiv>
 800c0c2:	ec53 2b19 	vmov	r2, r3, d9
 800c0c6:	f7f4 f8f7 	bl	80002b8 <__aeabi_dsub>
 800c0ca:	9d00      	ldr	r5, [sp, #0]
 800c0cc:	ec41 0b19 	vmov	d9, r0, r1
 800c0d0:	4649      	mov	r1, r9
 800c0d2:	4640      	mov	r0, r8
 800c0d4:	f7f4 fd58 	bl	8000b88 <__aeabi_d2iz>
 800c0d8:	4606      	mov	r6, r0
 800c0da:	f7f4 fa3b 	bl	8000554 <__aeabi_i2d>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	4640      	mov	r0, r8
 800c0e4:	4649      	mov	r1, r9
 800c0e6:	f7f4 f8e7 	bl	80002b8 <__aeabi_dsub>
 800c0ea:	3630      	adds	r6, #48	; 0x30
 800c0ec:	f805 6b01 	strb.w	r6, [r5], #1
 800c0f0:	ec53 2b19 	vmov	r2, r3, d9
 800c0f4:	4680      	mov	r8, r0
 800c0f6:	4689      	mov	r9, r1
 800c0f8:	f7f4 fd08 	bl	8000b0c <__aeabi_dcmplt>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d164      	bne.n	800c1ca <_dtoa_r+0x62a>
 800c100:	4642      	mov	r2, r8
 800c102:	464b      	mov	r3, r9
 800c104:	4937      	ldr	r1, [pc, #220]	; (800c1e4 <_dtoa_r+0x644>)
 800c106:	2000      	movs	r0, #0
 800c108:	f7f4 f8d6 	bl	80002b8 <__aeabi_dsub>
 800c10c:	ec53 2b19 	vmov	r2, r3, d9
 800c110:	f7f4 fcfc 	bl	8000b0c <__aeabi_dcmplt>
 800c114:	2800      	cmp	r0, #0
 800c116:	f040 80b6 	bne.w	800c286 <_dtoa_r+0x6e6>
 800c11a:	9b02      	ldr	r3, [sp, #8]
 800c11c:	429d      	cmp	r5, r3
 800c11e:	f43f af7c 	beq.w	800c01a <_dtoa_r+0x47a>
 800c122:	4b31      	ldr	r3, [pc, #196]	; (800c1e8 <_dtoa_r+0x648>)
 800c124:	ec51 0b19 	vmov	r0, r1, d9
 800c128:	2200      	movs	r2, #0
 800c12a:	f7f4 fa7d 	bl	8000628 <__aeabi_dmul>
 800c12e:	4b2e      	ldr	r3, [pc, #184]	; (800c1e8 <_dtoa_r+0x648>)
 800c130:	ec41 0b19 	vmov	d9, r0, r1
 800c134:	2200      	movs	r2, #0
 800c136:	4640      	mov	r0, r8
 800c138:	4649      	mov	r1, r9
 800c13a:	f7f4 fa75 	bl	8000628 <__aeabi_dmul>
 800c13e:	4680      	mov	r8, r0
 800c140:	4689      	mov	r9, r1
 800c142:	e7c5      	b.n	800c0d0 <_dtoa_r+0x530>
 800c144:	ec51 0b17 	vmov	r0, r1, d7
 800c148:	f7f4 fa6e 	bl	8000628 <__aeabi_dmul>
 800c14c:	9b02      	ldr	r3, [sp, #8]
 800c14e:	9d00      	ldr	r5, [sp, #0]
 800c150:	930f      	str	r3, [sp, #60]	; 0x3c
 800c152:	ec41 0b19 	vmov	d9, r0, r1
 800c156:	4649      	mov	r1, r9
 800c158:	4640      	mov	r0, r8
 800c15a:	f7f4 fd15 	bl	8000b88 <__aeabi_d2iz>
 800c15e:	4606      	mov	r6, r0
 800c160:	f7f4 f9f8 	bl	8000554 <__aeabi_i2d>
 800c164:	3630      	adds	r6, #48	; 0x30
 800c166:	4602      	mov	r2, r0
 800c168:	460b      	mov	r3, r1
 800c16a:	4640      	mov	r0, r8
 800c16c:	4649      	mov	r1, r9
 800c16e:	f7f4 f8a3 	bl	80002b8 <__aeabi_dsub>
 800c172:	f805 6b01 	strb.w	r6, [r5], #1
 800c176:	9b02      	ldr	r3, [sp, #8]
 800c178:	429d      	cmp	r5, r3
 800c17a:	4680      	mov	r8, r0
 800c17c:	4689      	mov	r9, r1
 800c17e:	f04f 0200 	mov.w	r2, #0
 800c182:	d124      	bne.n	800c1ce <_dtoa_r+0x62e>
 800c184:	4b1b      	ldr	r3, [pc, #108]	; (800c1f4 <_dtoa_r+0x654>)
 800c186:	ec51 0b19 	vmov	r0, r1, d9
 800c18a:	f7f4 f897 	bl	80002bc <__adddf3>
 800c18e:	4602      	mov	r2, r0
 800c190:	460b      	mov	r3, r1
 800c192:	4640      	mov	r0, r8
 800c194:	4649      	mov	r1, r9
 800c196:	f7f4 fcd7 	bl	8000b48 <__aeabi_dcmpgt>
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d173      	bne.n	800c286 <_dtoa_r+0x6e6>
 800c19e:	ec53 2b19 	vmov	r2, r3, d9
 800c1a2:	4914      	ldr	r1, [pc, #80]	; (800c1f4 <_dtoa_r+0x654>)
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	f7f4 f887 	bl	80002b8 <__aeabi_dsub>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	4640      	mov	r0, r8
 800c1b0:	4649      	mov	r1, r9
 800c1b2:	f7f4 fcab 	bl	8000b0c <__aeabi_dcmplt>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	f43f af2f 	beq.w	800c01a <_dtoa_r+0x47a>
 800c1bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c1be:	1e6b      	subs	r3, r5, #1
 800c1c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c1c6:	2b30      	cmp	r3, #48	; 0x30
 800c1c8:	d0f8      	beq.n	800c1bc <_dtoa_r+0x61c>
 800c1ca:	46bb      	mov	fp, r7
 800c1cc:	e04a      	b.n	800c264 <_dtoa_r+0x6c4>
 800c1ce:	4b06      	ldr	r3, [pc, #24]	; (800c1e8 <_dtoa_r+0x648>)
 800c1d0:	f7f4 fa2a 	bl	8000628 <__aeabi_dmul>
 800c1d4:	4680      	mov	r8, r0
 800c1d6:	4689      	mov	r9, r1
 800c1d8:	e7bd      	b.n	800c156 <_dtoa_r+0x5b6>
 800c1da:	bf00      	nop
 800c1dc:	0800fab8 	.word	0x0800fab8
 800c1e0:	0800fa90 	.word	0x0800fa90
 800c1e4:	3ff00000 	.word	0x3ff00000
 800c1e8:	40240000 	.word	0x40240000
 800c1ec:	401c0000 	.word	0x401c0000
 800c1f0:	40140000 	.word	0x40140000
 800c1f4:	3fe00000 	.word	0x3fe00000
 800c1f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c1fc:	9d00      	ldr	r5, [sp, #0]
 800c1fe:	4642      	mov	r2, r8
 800c200:	464b      	mov	r3, r9
 800c202:	4630      	mov	r0, r6
 800c204:	4639      	mov	r1, r7
 800c206:	f7f4 fb39 	bl	800087c <__aeabi_ddiv>
 800c20a:	f7f4 fcbd 	bl	8000b88 <__aeabi_d2iz>
 800c20e:	9001      	str	r0, [sp, #4]
 800c210:	f7f4 f9a0 	bl	8000554 <__aeabi_i2d>
 800c214:	4642      	mov	r2, r8
 800c216:	464b      	mov	r3, r9
 800c218:	f7f4 fa06 	bl	8000628 <__aeabi_dmul>
 800c21c:	4602      	mov	r2, r0
 800c21e:	460b      	mov	r3, r1
 800c220:	4630      	mov	r0, r6
 800c222:	4639      	mov	r1, r7
 800c224:	f7f4 f848 	bl	80002b8 <__aeabi_dsub>
 800c228:	9e01      	ldr	r6, [sp, #4]
 800c22a:	9f04      	ldr	r7, [sp, #16]
 800c22c:	3630      	adds	r6, #48	; 0x30
 800c22e:	f805 6b01 	strb.w	r6, [r5], #1
 800c232:	9e00      	ldr	r6, [sp, #0]
 800c234:	1bae      	subs	r6, r5, r6
 800c236:	42b7      	cmp	r7, r6
 800c238:	4602      	mov	r2, r0
 800c23a:	460b      	mov	r3, r1
 800c23c:	d134      	bne.n	800c2a8 <_dtoa_r+0x708>
 800c23e:	f7f4 f83d 	bl	80002bc <__adddf3>
 800c242:	4642      	mov	r2, r8
 800c244:	464b      	mov	r3, r9
 800c246:	4606      	mov	r6, r0
 800c248:	460f      	mov	r7, r1
 800c24a:	f7f4 fc7d 	bl	8000b48 <__aeabi_dcmpgt>
 800c24e:	b9c8      	cbnz	r0, 800c284 <_dtoa_r+0x6e4>
 800c250:	4642      	mov	r2, r8
 800c252:	464b      	mov	r3, r9
 800c254:	4630      	mov	r0, r6
 800c256:	4639      	mov	r1, r7
 800c258:	f7f4 fc4e 	bl	8000af8 <__aeabi_dcmpeq>
 800c25c:	b110      	cbz	r0, 800c264 <_dtoa_r+0x6c4>
 800c25e:	9b01      	ldr	r3, [sp, #4]
 800c260:	07db      	lsls	r3, r3, #31
 800c262:	d40f      	bmi.n	800c284 <_dtoa_r+0x6e4>
 800c264:	4651      	mov	r1, sl
 800c266:	4620      	mov	r0, r4
 800c268:	f000 fbcc 	bl	800ca04 <_Bfree>
 800c26c:	2300      	movs	r3, #0
 800c26e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c270:	702b      	strb	r3, [r5, #0]
 800c272:	f10b 0301 	add.w	r3, fp, #1
 800c276:	6013      	str	r3, [r2, #0]
 800c278:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	f43f ace2 	beq.w	800bc44 <_dtoa_r+0xa4>
 800c280:	601d      	str	r5, [r3, #0]
 800c282:	e4df      	b.n	800bc44 <_dtoa_r+0xa4>
 800c284:	465f      	mov	r7, fp
 800c286:	462b      	mov	r3, r5
 800c288:	461d      	mov	r5, r3
 800c28a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c28e:	2a39      	cmp	r2, #57	; 0x39
 800c290:	d106      	bne.n	800c2a0 <_dtoa_r+0x700>
 800c292:	9a00      	ldr	r2, [sp, #0]
 800c294:	429a      	cmp	r2, r3
 800c296:	d1f7      	bne.n	800c288 <_dtoa_r+0x6e8>
 800c298:	9900      	ldr	r1, [sp, #0]
 800c29a:	2230      	movs	r2, #48	; 0x30
 800c29c:	3701      	adds	r7, #1
 800c29e:	700a      	strb	r2, [r1, #0]
 800c2a0:	781a      	ldrb	r2, [r3, #0]
 800c2a2:	3201      	adds	r2, #1
 800c2a4:	701a      	strb	r2, [r3, #0]
 800c2a6:	e790      	b.n	800c1ca <_dtoa_r+0x62a>
 800c2a8:	4ba3      	ldr	r3, [pc, #652]	; (800c538 <_dtoa_r+0x998>)
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f7f4 f9bc 	bl	8000628 <__aeabi_dmul>
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	4606      	mov	r6, r0
 800c2b6:	460f      	mov	r7, r1
 800c2b8:	f7f4 fc1e 	bl	8000af8 <__aeabi_dcmpeq>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d09e      	beq.n	800c1fe <_dtoa_r+0x65e>
 800c2c0:	e7d0      	b.n	800c264 <_dtoa_r+0x6c4>
 800c2c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2c4:	2a00      	cmp	r2, #0
 800c2c6:	f000 80ca 	beq.w	800c45e <_dtoa_r+0x8be>
 800c2ca:	9a07      	ldr	r2, [sp, #28]
 800c2cc:	2a01      	cmp	r2, #1
 800c2ce:	f300 80ad 	bgt.w	800c42c <_dtoa_r+0x88c>
 800c2d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2d4:	2a00      	cmp	r2, #0
 800c2d6:	f000 80a5 	beq.w	800c424 <_dtoa_r+0x884>
 800c2da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c2de:	9e08      	ldr	r6, [sp, #32]
 800c2e0:	9d05      	ldr	r5, [sp, #20]
 800c2e2:	9a05      	ldr	r2, [sp, #20]
 800c2e4:	441a      	add	r2, r3
 800c2e6:	9205      	str	r2, [sp, #20]
 800c2e8:	9a06      	ldr	r2, [sp, #24]
 800c2ea:	2101      	movs	r1, #1
 800c2ec:	441a      	add	r2, r3
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	9206      	str	r2, [sp, #24]
 800c2f2:	f000 fc3d 	bl	800cb70 <__i2b>
 800c2f6:	4607      	mov	r7, r0
 800c2f8:	b165      	cbz	r5, 800c314 <_dtoa_r+0x774>
 800c2fa:	9b06      	ldr	r3, [sp, #24]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	dd09      	ble.n	800c314 <_dtoa_r+0x774>
 800c300:	42ab      	cmp	r3, r5
 800c302:	9a05      	ldr	r2, [sp, #20]
 800c304:	bfa8      	it	ge
 800c306:	462b      	movge	r3, r5
 800c308:	1ad2      	subs	r2, r2, r3
 800c30a:	9205      	str	r2, [sp, #20]
 800c30c:	9a06      	ldr	r2, [sp, #24]
 800c30e:	1aed      	subs	r5, r5, r3
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	9306      	str	r3, [sp, #24]
 800c314:	9b08      	ldr	r3, [sp, #32]
 800c316:	b1f3      	cbz	r3, 800c356 <_dtoa_r+0x7b6>
 800c318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	f000 80a3 	beq.w	800c466 <_dtoa_r+0x8c6>
 800c320:	2e00      	cmp	r6, #0
 800c322:	dd10      	ble.n	800c346 <_dtoa_r+0x7a6>
 800c324:	4639      	mov	r1, r7
 800c326:	4632      	mov	r2, r6
 800c328:	4620      	mov	r0, r4
 800c32a:	f000 fce1 	bl	800ccf0 <__pow5mult>
 800c32e:	4652      	mov	r2, sl
 800c330:	4601      	mov	r1, r0
 800c332:	4607      	mov	r7, r0
 800c334:	4620      	mov	r0, r4
 800c336:	f000 fc31 	bl	800cb9c <__multiply>
 800c33a:	4651      	mov	r1, sl
 800c33c:	4680      	mov	r8, r0
 800c33e:	4620      	mov	r0, r4
 800c340:	f000 fb60 	bl	800ca04 <_Bfree>
 800c344:	46c2      	mov	sl, r8
 800c346:	9b08      	ldr	r3, [sp, #32]
 800c348:	1b9a      	subs	r2, r3, r6
 800c34a:	d004      	beq.n	800c356 <_dtoa_r+0x7b6>
 800c34c:	4651      	mov	r1, sl
 800c34e:	4620      	mov	r0, r4
 800c350:	f000 fcce 	bl	800ccf0 <__pow5mult>
 800c354:	4682      	mov	sl, r0
 800c356:	2101      	movs	r1, #1
 800c358:	4620      	mov	r0, r4
 800c35a:	f000 fc09 	bl	800cb70 <__i2b>
 800c35e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c360:	2b00      	cmp	r3, #0
 800c362:	4606      	mov	r6, r0
 800c364:	f340 8081 	ble.w	800c46a <_dtoa_r+0x8ca>
 800c368:	461a      	mov	r2, r3
 800c36a:	4601      	mov	r1, r0
 800c36c:	4620      	mov	r0, r4
 800c36e:	f000 fcbf 	bl	800ccf0 <__pow5mult>
 800c372:	9b07      	ldr	r3, [sp, #28]
 800c374:	2b01      	cmp	r3, #1
 800c376:	4606      	mov	r6, r0
 800c378:	dd7a      	ble.n	800c470 <_dtoa_r+0x8d0>
 800c37a:	f04f 0800 	mov.w	r8, #0
 800c37e:	6933      	ldr	r3, [r6, #16]
 800c380:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c384:	6918      	ldr	r0, [r3, #16]
 800c386:	f000 fba5 	bl	800cad4 <__hi0bits>
 800c38a:	f1c0 0020 	rsb	r0, r0, #32
 800c38e:	9b06      	ldr	r3, [sp, #24]
 800c390:	4418      	add	r0, r3
 800c392:	f010 001f 	ands.w	r0, r0, #31
 800c396:	f000 8094 	beq.w	800c4c2 <_dtoa_r+0x922>
 800c39a:	f1c0 0320 	rsb	r3, r0, #32
 800c39e:	2b04      	cmp	r3, #4
 800c3a0:	f340 8085 	ble.w	800c4ae <_dtoa_r+0x90e>
 800c3a4:	9b05      	ldr	r3, [sp, #20]
 800c3a6:	f1c0 001c 	rsb	r0, r0, #28
 800c3aa:	4403      	add	r3, r0
 800c3ac:	9305      	str	r3, [sp, #20]
 800c3ae:	9b06      	ldr	r3, [sp, #24]
 800c3b0:	4403      	add	r3, r0
 800c3b2:	4405      	add	r5, r0
 800c3b4:	9306      	str	r3, [sp, #24]
 800c3b6:	9b05      	ldr	r3, [sp, #20]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	dd05      	ble.n	800c3c8 <_dtoa_r+0x828>
 800c3bc:	4651      	mov	r1, sl
 800c3be:	461a      	mov	r2, r3
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	f000 fcef 	bl	800cda4 <__lshift>
 800c3c6:	4682      	mov	sl, r0
 800c3c8:	9b06      	ldr	r3, [sp, #24]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	dd05      	ble.n	800c3da <_dtoa_r+0x83a>
 800c3ce:	4631      	mov	r1, r6
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f000 fce6 	bl	800cda4 <__lshift>
 800c3d8:	4606      	mov	r6, r0
 800c3da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d072      	beq.n	800c4c6 <_dtoa_r+0x926>
 800c3e0:	4631      	mov	r1, r6
 800c3e2:	4650      	mov	r0, sl
 800c3e4:	f000 fd4a 	bl	800ce7c <__mcmp>
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	da6c      	bge.n	800c4c6 <_dtoa_r+0x926>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	4651      	mov	r1, sl
 800c3f0:	220a      	movs	r2, #10
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f000 fb28 	bl	800ca48 <__multadd>
 800c3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c3fe:	4682      	mov	sl, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	f000 81b0 	beq.w	800c766 <_dtoa_r+0xbc6>
 800c406:	2300      	movs	r3, #0
 800c408:	4639      	mov	r1, r7
 800c40a:	220a      	movs	r2, #10
 800c40c:	4620      	mov	r0, r4
 800c40e:	f000 fb1b 	bl	800ca48 <__multadd>
 800c412:	9b01      	ldr	r3, [sp, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	4607      	mov	r7, r0
 800c418:	f300 8096 	bgt.w	800c548 <_dtoa_r+0x9a8>
 800c41c:	9b07      	ldr	r3, [sp, #28]
 800c41e:	2b02      	cmp	r3, #2
 800c420:	dc59      	bgt.n	800c4d6 <_dtoa_r+0x936>
 800c422:	e091      	b.n	800c548 <_dtoa_r+0x9a8>
 800c424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c426:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c42a:	e758      	b.n	800c2de <_dtoa_r+0x73e>
 800c42c:	9b04      	ldr	r3, [sp, #16]
 800c42e:	1e5e      	subs	r6, r3, #1
 800c430:	9b08      	ldr	r3, [sp, #32]
 800c432:	42b3      	cmp	r3, r6
 800c434:	bfbf      	itttt	lt
 800c436:	9b08      	ldrlt	r3, [sp, #32]
 800c438:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c43a:	9608      	strlt	r6, [sp, #32]
 800c43c:	1af3      	sublt	r3, r6, r3
 800c43e:	bfb4      	ite	lt
 800c440:	18d2      	addlt	r2, r2, r3
 800c442:	1b9e      	subge	r6, r3, r6
 800c444:	9b04      	ldr	r3, [sp, #16]
 800c446:	bfbc      	itt	lt
 800c448:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c44a:	2600      	movlt	r6, #0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	bfb7      	itett	lt
 800c450:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c454:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c458:	1a9d      	sublt	r5, r3, r2
 800c45a:	2300      	movlt	r3, #0
 800c45c:	e741      	b.n	800c2e2 <_dtoa_r+0x742>
 800c45e:	9e08      	ldr	r6, [sp, #32]
 800c460:	9d05      	ldr	r5, [sp, #20]
 800c462:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c464:	e748      	b.n	800c2f8 <_dtoa_r+0x758>
 800c466:	9a08      	ldr	r2, [sp, #32]
 800c468:	e770      	b.n	800c34c <_dtoa_r+0x7ac>
 800c46a:	9b07      	ldr	r3, [sp, #28]
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	dc19      	bgt.n	800c4a4 <_dtoa_r+0x904>
 800c470:	9b02      	ldr	r3, [sp, #8]
 800c472:	b9bb      	cbnz	r3, 800c4a4 <_dtoa_r+0x904>
 800c474:	9b03      	ldr	r3, [sp, #12]
 800c476:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c47a:	b99b      	cbnz	r3, 800c4a4 <_dtoa_r+0x904>
 800c47c:	9b03      	ldr	r3, [sp, #12]
 800c47e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c482:	0d1b      	lsrs	r3, r3, #20
 800c484:	051b      	lsls	r3, r3, #20
 800c486:	b183      	cbz	r3, 800c4aa <_dtoa_r+0x90a>
 800c488:	9b05      	ldr	r3, [sp, #20]
 800c48a:	3301      	adds	r3, #1
 800c48c:	9305      	str	r3, [sp, #20]
 800c48e:	9b06      	ldr	r3, [sp, #24]
 800c490:	3301      	adds	r3, #1
 800c492:	9306      	str	r3, [sp, #24]
 800c494:	f04f 0801 	mov.w	r8, #1
 800c498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f47f af6f 	bne.w	800c37e <_dtoa_r+0x7de>
 800c4a0:	2001      	movs	r0, #1
 800c4a2:	e774      	b.n	800c38e <_dtoa_r+0x7ee>
 800c4a4:	f04f 0800 	mov.w	r8, #0
 800c4a8:	e7f6      	b.n	800c498 <_dtoa_r+0x8f8>
 800c4aa:	4698      	mov	r8, r3
 800c4ac:	e7f4      	b.n	800c498 <_dtoa_r+0x8f8>
 800c4ae:	d082      	beq.n	800c3b6 <_dtoa_r+0x816>
 800c4b0:	9a05      	ldr	r2, [sp, #20]
 800c4b2:	331c      	adds	r3, #28
 800c4b4:	441a      	add	r2, r3
 800c4b6:	9205      	str	r2, [sp, #20]
 800c4b8:	9a06      	ldr	r2, [sp, #24]
 800c4ba:	441a      	add	r2, r3
 800c4bc:	441d      	add	r5, r3
 800c4be:	9206      	str	r2, [sp, #24]
 800c4c0:	e779      	b.n	800c3b6 <_dtoa_r+0x816>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	e7f4      	b.n	800c4b0 <_dtoa_r+0x910>
 800c4c6:	9b04      	ldr	r3, [sp, #16]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	dc37      	bgt.n	800c53c <_dtoa_r+0x99c>
 800c4cc:	9b07      	ldr	r3, [sp, #28]
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	dd34      	ble.n	800c53c <_dtoa_r+0x99c>
 800c4d2:	9b04      	ldr	r3, [sp, #16]
 800c4d4:	9301      	str	r3, [sp, #4]
 800c4d6:	9b01      	ldr	r3, [sp, #4]
 800c4d8:	b963      	cbnz	r3, 800c4f4 <_dtoa_r+0x954>
 800c4da:	4631      	mov	r1, r6
 800c4dc:	2205      	movs	r2, #5
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f000 fab2 	bl	800ca48 <__multadd>
 800c4e4:	4601      	mov	r1, r0
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	4650      	mov	r0, sl
 800c4ea:	f000 fcc7 	bl	800ce7c <__mcmp>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	f73f adbb 	bgt.w	800c06a <_dtoa_r+0x4ca>
 800c4f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4f6:	9d00      	ldr	r5, [sp, #0]
 800c4f8:	ea6f 0b03 	mvn.w	fp, r3
 800c4fc:	f04f 0800 	mov.w	r8, #0
 800c500:	4631      	mov	r1, r6
 800c502:	4620      	mov	r0, r4
 800c504:	f000 fa7e 	bl	800ca04 <_Bfree>
 800c508:	2f00      	cmp	r7, #0
 800c50a:	f43f aeab 	beq.w	800c264 <_dtoa_r+0x6c4>
 800c50e:	f1b8 0f00 	cmp.w	r8, #0
 800c512:	d005      	beq.n	800c520 <_dtoa_r+0x980>
 800c514:	45b8      	cmp	r8, r7
 800c516:	d003      	beq.n	800c520 <_dtoa_r+0x980>
 800c518:	4641      	mov	r1, r8
 800c51a:	4620      	mov	r0, r4
 800c51c:	f000 fa72 	bl	800ca04 <_Bfree>
 800c520:	4639      	mov	r1, r7
 800c522:	4620      	mov	r0, r4
 800c524:	f000 fa6e 	bl	800ca04 <_Bfree>
 800c528:	e69c      	b.n	800c264 <_dtoa_r+0x6c4>
 800c52a:	2600      	movs	r6, #0
 800c52c:	4637      	mov	r7, r6
 800c52e:	e7e1      	b.n	800c4f4 <_dtoa_r+0x954>
 800c530:	46bb      	mov	fp, r7
 800c532:	4637      	mov	r7, r6
 800c534:	e599      	b.n	800c06a <_dtoa_r+0x4ca>
 800c536:	bf00      	nop
 800c538:	40240000 	.word	0x40240000
 800c53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f000 80c8 	beq.w	800c6d4 <_dtoa_r+0xb34>
 800c544:	9b04      	ldr	r3, [sp, #16]
 800c546:	9301      	str	r3, [sp, #4]
 800c548:	2d00      	cmp	r5, #0
 800c54a:	dd05      	ble.n	800c558 <_dtoa_r+0x9b8>
 800c54c:	4639      	mov	r1, r7
 800c54e:	462a      	mov	r2, r5
 800c550:	4620      	mov	r0, r4
 800c552:	f000 fc27 	bl	800cda4 <__lshift>
 800c556:	4607      	mov	r7, r0
 800c558:	f1b8 0f00 	cmp.w	r8, #0
 800c55c:	d05b      	beq.n	800c616 <_dtoa_r+0xa76>
 800c55e:	6879      	ldr	r1, [r7, #4]
 800c560:	4620      	mov	r0, r4
 800c562:	f000 fa0f 	bl	800c984 <_Balloc>
 800c566:	4605      	mov	r5, r0
 800c568:	b928      	cbnz	r0, 800c576 <_dtoa_r+0x9d6>
 800c56a:	4b83      	ldr	r3, [pc, #524]	; (800c778 <_dtoa_r+0xbd8>)
 800c56c:	4602      	mov	r2, r0
 800c56e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c572:	f7ff bb2e 	b.w	800bbd2 <_dtoa_r+0x32>
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	3202      	adds	r2, #2
 800c57a:	0092      	lsls	r2, r2, #2
 800c57c:	f107 010c 	add.w	r1, r7, #12
 800c580:	300c      	adds	r0, #12
 800c582:	f7ff fa74 	bl	800ba6e <memcpy>
 800c586:	2201      	movs	r2, #1
 800c588:	4629      	mov	r1, r5
 800c58a:	4620      	mov	r0, r4
 800c58c:	f000 fc0a 	bl	800cda4 <__lshift>
 800c590:	9b00      	ldr	r3, [sp, #0]
 800c592:	3301      	adds	r3, #1
 800c594:	9304      	str	r3, [sp, #16]
 800c596:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c59a:	4413      	add	r3, r2
 800c59c:	9308      	str	r3, [sp, #32]
 800c59e:	9b02      	ldr	r3, [sp, #8]
 800c5a0:	f003 0301 	and.w	r3, r3, #1
 800c5a4:	46b8      	mov	r8, r7
 800c5a6:	9306      	str	r3, [sp, #24]
 800c5a8:	4607      	mov	r7, r0
 800c5aa:	9b04      	ldr	r3, [sp, #16]
 800c5ac:	4631      	mov	r1, r6
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	4650      	mov	r0, sl
 800c5b2:	9301      	str	r3, [sp, #4]
 800c5b4:	f7ff fa69 	bl	800ba8a <quorem>
 800c5b8:	4641      	mov	r1, r8
 800c5ba:	9002      	str	r0, [sp, #8]
 800c5bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c5c0:	4650      	mov	r0, sl
 800c5c2:	f000 fc5b 	bl	800ce7c <__mcmp>
 800c5c6:	463a      	mov	r2, r7
 800c5c8:	9005      	str	r0, [sp, #20]
 800c5ca:	4631      	mov	r1, r6
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f000 fc71 	bl	800ceb4 <__mdiff>
 800c5d2:	68c2      	ldr	r2, [r0, #12]
 800c5d4:	4605      	mov	r5, r0
 800c5d6:	bb02      	cbnz	r2, 800c61a <_dtoa_r+0xa7a>
 800c5d8:	4601      	mov	r1, r0
 800c5da:	4650      	mov	r0, sl
 800c5dc:	f000 fc4e 	bl	800ce7c <__mcmp>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	4629      	mov	r1, r5
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	9209      	str	r2, [sp, #36]	; 0x24
 800c5e8:	f000 fa0c 	bl	800ca04 <_Bfree>
 800c5ec:	9b07      	ldr	r3, [sp, #28]
 800c5ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5f0:	9d04      	ldr	r5, [sp, #16]
 800c5f2:	ea43 0102 	orr.w	r1, r3, r2
 800c5f6:	9b06      	ldr	r3, [sp, #24]
 800c5f8:	4319      	orrs	r1, r3
 800c5fa:	d110      	bne.n	800c61e <_dtoa_r+0xa7e>
 800c5fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c600:	d029      	beq.n	800c656 <_dtoa_r+0xab6>
 800c602:	9b05      	ldr	r3, [sp, #20]
 800c604:	2b00      	cmp	r3, #0
 800c606:	dd02      	ble.n	800c60e <_dtoa_r+0xa6e>
 800c608:	9b02      	ldr	r3, [sp, #8]
 800c60a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c60e:	9b01      	ldr	r3, [sp, #4]
 800c610:	f883 9000 	strb.w	r9, [r3]
 800c614:	e774      	b.n	800c500 <_dtoa_r+0x960>
 800c616:	4638      	mov	r0, r7
 800c618:	e7ba      	b.n	800c590 <_dtoa_r+0x9f0>
 800c61a:	2201      	movs	r2, #1
 800c61c:	e7e1      	b.n	800c5e2 <_dtoa_r+0xa42>
 800c61e:	9b05      	ldr	r3, [sp, #20]
 800c620:	2b00      	cmp	r3, #0
 800c622:	db04      	blt.n	800c62e <_dtoa_r+0xa8e>
 800c624:	9907      	ldr	r1, [sp, #28]
 800c626:	430b      	orrs	r3, r1
 800c628:	9906      	ldr	r1, [sp, #24]
 800c62a:	430b      	orrs	r3, r1
 800c62c:	d120      	bne.n	800c670 <_dtoa_r+0xad0>
 800c62e:	2a00      	cmp	r2, #0
 800c630:	dded      	ble.n	800c60e <_dtoa_r+0xa6e>
 800c632:	4651      	mov	r1, sl
 800c634:	2201      	movs	r2, #1
 800c636:	4620      	mov	r0, r4
 800c638:	f000 fbb4 	bl	800cda4 <__lshift>
 800c63c:	4631      	mov	r1, r6
 800c63e:	4682      	mov	sl, r0
 800c640:	f000 fc1c 	bl	800ce7c <__mcmp>
 800c644:	2800      	cmp	r0, #0
 800c646:	dc03      	bgt.n	800c650 <_dtoa_r+0xab0>
 800c648:	d1e1      	bne.n	800c60e <_dtoa_r+0xa6e>
 800c64a:	f019 0f01 	tst.w	r9, #1
 800c64e:	d0de      	beq.n	800c60e <_dtoa_r+0xa6e>
 800c650:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c654:	d1d8      	bne.n	800c608 <_dtoa_r+0xa68>
 800c656:	9a01      	ldr	r2, [sp, #4]
 800c658:	2339      	movs	r3, #57	; 0x39
 800c65a:	7013      	strb	r3, [r2, #0]
 800c65c:	462b      	mov	r3, r5
 800c65e:	461d      	mov	r5, r3
 800c660:	3b01      	subs	r3, #1
 800c662:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c666:	2a39      	cmp	r2, #57	; 0x39
 800c668:	d06c      	beq.n	800c744 <_dtoa_r+0xba4>
 800c66a:	3201      	adds	r2, #1
 800c66c:	701a      	strb	r2, [r3, #0]
 800c66e:	e747      	b.n	800c500 <_dtoa_r+0x960>
 800c670:	2a00      	cmp	r2, #0
 800c672:	dd07      	ble.n	800c684 <_dtoa_r+0xae4>
 800c674:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c678:	d0ed      	beq.n	800c656 <_dtoa_r+0xab6>
 800c67a:	9a01      	ldr	r2, [sp, #4]
 800c67c:	f109 0301 	add.w	r3, r9, #1
 800c680:	7013      	strb	r3, [r2, #0]
 800c682:	e73d      	b.n	800c500 <_dtoa_r+0x960>
 800c684:	9b04      	ldr	r3, [sp, #16]
 800c686:	9a08      	ldr	r2, [sp, #32]
 800c688:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d043      	beq.n	800c718 <_dtoa_r+0xb78>
 800c690:	4651      	mov	r1, sl
 800c692:	2300      	movs	r3, #0
 800c694:	220a      	movs	r2, #10
 800c696:	4620      	mov	r0, r4
 800c698:	f000 f9d6 	bl	800ca48 <__multadd>
 800c69c:	45b8      	cmp	r8, r7
 800c69e:	4682      	mov	sl, r0
 800c6a0:	f04f 0300 	mov.w	r3, #0
 800c6a4:	f04f 020a 	mov.w	r2, #10
 800c6a8:	4641      	mov	r1, r8
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	d107      	bne.n	800c6be <_dtoa_r+0xb1e>
 800c6ae:	f000 f9cb 	bl	800ca48 <__multadd>
 800c6b2:	4680      	mov	r8, r0
 800c6b4:	4607      	mov	r7, r0
 800c6b6:	9b04      	ldr	r3, [sp, #16]
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	9304      	str	r3, [sp, #16]
 800c6bc:	e775      	b.n	800c5aa <_dtoa_r+0xa0a>
 800c6be:	f000 f9c3 	bl	800ca48 <__multadd>
 800c6c2:	4639      	mov	r1, r7
 800c6c4:	4680      	mov	r8, r0
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	220a      	movs	r2, #10
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	f000 f9bc 	bl	800ca48 <__multadd>
 800c6d0:	4607      	mov	r7, r0
 800c6d2:	e7f0      	b.n	800c6b6 <_dtoa_r+0xb16>
 800c6d4:	9b04      	ldr	r3, [sp, #16]
 800c6d6:	9301      	str	r3, [sp, #4]
 800c6d8:	9d00      	ldr	r5, [sp, #0]
 800c6da:	4631      	mov	r1, r6
 800c6dc:	4650      	mov	r0, sl
 800c6de:	f7ff f9d4 	bl	800ba8a <quorem>
 800c6e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c6e6:	9b00      	ldr	r3, [sp, #0]
 800c6e8:	f805 9b01 	strb.w	r9, [r5], #1
 800c6ec:	1aea      	subs	r2, r5, r3
 800c6ee:	9b01      	ldr	r3, [sp, #4]
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	dd07      	ble.n	800c704 <_dtoa_r+0xb64>
 800c6f4:	4651      	mov	r1, sl
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	220a      	movs	r2, #10
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f000 f9a4 	bl	800ca48 <__multadd>
 800c700:	4682      	mov	sl, r0
 800c702:	e7ea      	b.n	800c6da <_dtoa_r+0xb3a>
 800c704:	9b01      	ldr	r3, [sp, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	bfc8      	it	gt
 800c70a:	461d      	movgt	r5, r3
 800c70c:	9b00      	ldr	r3, [sp, #0]
 800c70e:	bfd8      	it	le
 800c710:	2501      	movle	r5, #1
 800c712:	441d      	add	r5, r3
 800c714:	f04f 0800 	mov.w	r8, #0
 800c718:	4651      	mov	r1, sl
 800c71a:	2201      	movs	r2, #1
 800c71c:	4620      	mov	r0, r4
 800c71e:	f000 fb41 	bl	800cda4 <__lshift>
 800c722:	4631      	mov	r1, r6
 800c724:	4682      	mov	sl, r0
 800c726:	f000 fba9 	bl	800ce7c <__mcmp>
 800c72a:	2800      	cmp	r0, #0
 800c72c:	dc96      	bgt.n	800c65c <_dtoa_r+0xabc>
 800c72e:	d102      	bne.n	800c736 <_dtoa_r+0xb96>
 800c730:	f019 0f01 	tst.w	r9, #1
 800c734:	d192      	bne.n	800c65c <_dtoa_r+0xabc>
 800c736:	462b      	mov	r3, r5
 800c738:	461d      	mov	r5, r3
 800c73a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c73e:	2a30      	cmp	r2, #48	; 0x30
 800c740:	d0fa      	beq.n	800c738 <_dtoa_r+0xb98>
 800c742:	e6dd      	b.n	800c500 <_dtoa_r+0x960>
 800c744:	9a00      	ldr	r2, [sp, #0]
 800c746:	429a      	cmp	r2, r3
 800c748:	d189      	bne.n	800c65e <_dtoa_r+0xabe>
 800c74a:	f10b 0b01 	add.w	fp, fp, #1
 800c74e:	2331      	movs	r3, #49	; 0x31
 800c750:	e796      	b.n	800c680 <_dtoa_r+0xae0>
 800c752:	4b0a      	ldr	r3, [pc, #40]	; (800c77c <_dtoa_r+0xbdc>)
 800c754:	f7ff ba99 	b.w	800bc8a <_dtoa_r+0xea>
 800c758:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f47f aa6d 	bne.w	800bc3a <_dtoa_r+0x9a>
 800c760:	4b07      	ldr	r3, [pc, #28]	; (800c780 <_dtoa_r+0xbe0>)
 800c762:	f7ff ba92 	b.w	800bc8a <_dtoa_r+0xea>
 800c766:	9b01      	ldr	r3, [sp, #4]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	dcb5      	bgt.n	800c6d8 <_dtoa_r+0xb38>
 800c76c:	9b07      	ldr	r3, [sp, #28]
 800c76e:	2b02      	cmp	r3, #2
 800c770:	f73f aeb1 	bgt.w	800c4d6 <_dtoa_r+0x936>
 800c774:	e7b0      	b.n	800c6d8 <_dtoa_r+0xb38>
 800c776:	bf00      	nop
 800c778:	0800fa20 	.word	0x0800fa20
 800c77c:	0800f980 	.word	0x0800f980
 800c780:	0800f9a4 	.word	0x0800f9a4

0800c784 <_free_r>:
 800c784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c786:	2900      	cmp	r1, #0
 800c788:	d044      	beq.n	800c814 <_free_r+0x90>
 800c78a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c78e:	9001      	str	r0, [sp, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	f1a1 0404 	sub.w	r4, r1, #4
 800c796:	bfb8      	it	lt
 800c798:	18e4      	addlt	r4, r4, r3
 800c79a:	f000 f8e7 	bl	800c96c <__malloc_lock>
 800c79e:	4a1e      	ldr	r2, [pc, #120]	; (800c818 <_free_r+0x94>)
 800c7a0:	9801      	ldr	r0, [sp, #4]
 800c7a2:	6813      	ldr	r3, [r2, #0]
 800c7a4:	b933      	cbnz	r3, 800c7b4 <_free_r+0x30>
 800c7a6:	6063      	str	r3, [r4, #4]
 800c7a8:	6014      	str	r4, [r2, #0]
 800c7aa:	b003      	add	sp, #12
 800c7ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7b0:	f000 b8e2 	b.w	800c978 <__malloc_unlock>
 800c7b4:	42a3      	cmp	r3, r4
 800c7b6:	d908      	bls.n	800c7ca <_free_r+0x46>
 800c7b8:	6825      	ldr	r5, [r4, #0]
 800c7ba:	1961      	adds	r1, r4, r5
 800c7bc:	428b      	cmp	r3, r1
 800c7be:	bf01      	itttt	eq
 800c7c0:	6819      	ldreq	r1, [r3, #0]
 800c7c2:	685b      	ldreq	r3, [r3, #4]
 800c7c4:	1949      	addeq	r1, r1, r5
 800c7c6:	6021      	streq	r1, [r4, #0]
 800c7c8:	e7ed      	b.n	800c7a6 <_free_r+0x22>
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	b10b      	cbz	r3, 800c7d4 <_free_r+0x50>
 800c7d0:	42a3      	cmp	r3, r4
 800c7d2:	d9fa      	bls.n	800c7ca <_free_r+0x46>
 800c7d4:	6811      	ldr	r1, [r2, #0]
 800c7d6:	1855      	adds	r5, r2, r1
 800c7d8:	42a5      	cmp	r5, r4
 800c7da:	d10b      	bne.n	800c7f4 <_free_r+0x70>
 800c7dc:	6824      	ldr	r4, [r4, #0]
 800c7de:	4421      	add	r1, r4
 800c7e0:	1854      	adds	r4, r2, r1
 800c7e2:	42a3      	cmp	r3, r4
 800c7e4:	6011      	str	r1, [r2, #0]
 800c7e6:	d1e0      	bne.n	800c7aa <_free_r+0x26>
 800c7e8:	681c      	ldr	r4, [r3, #0]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	6053      	str	r3, [r2, #4]
 800c7ee:	440c      	add	r4, r1
 800c7f0:	6014      	str	r4, [r2, #0]
 800c7f2:	e7da      	b.n	800c7aa <_free_r+0x26>
 800c7f4:	d902      	bls.n	800c7fc <_free_r+0x78>
 800c7f6:	230c      	movs	r3, #12
 800c7f8:	6003      	str	r3, [r0, #0]
 800c7fa:	e7d6      	b.n	800c7aa <_free_r+0x26>
 800c7fc:	6825      	ldr	r5, [r4, #0]
 800c7fe:	1961      	adds	r1, r4, r5
 800c800:	428b      	cmp	r3, r1
 800c802:	bf04      	itt	eq
 800c804:	6819      	ldreq	r1, [r3, #0]
 800c806:	685b      	ldreq	r3, [r3, #4]
 800c808:	6063      	str	r3, [r4, #4]
 800c80a:	bf04      	itt	eq
 800c80c:	1949      	addeq	r1, r1, r5
 800c80e:	6021      	streq	r1, [r4, #0]
 800c810:	6054      	str	r4, [r2, #4]
 800c812:	e7ca      	b.n	800c7aa <_free_r+0x26>
 800c814:	b003      	add	sp, #12
 800c816:	bd30      	pop	{r4, r5, pc}
 800c818:	20019c90 	.word	0x20019c90

0800c81c <malloc>:
 800c81c:	4b02      	ldr	r3, [pc, #8]	; (800c828 <malloc+0xc>)
 800c81e:	4601      	mov	r1, r0
 800c820:	6818      	ldr	r0, [r3, #0]
 800c822:	f000 b823 	b.w	800c86c <_malloc_r>
 800c826:	bf00      	nop
 800c828:	200008f8 	.word	0x200008f8

0800c82c <sbrk_aligned>:
 800c82c:	b570      	push	{r4, r5, r6, lr}
 800c82e:	4e0e      	ldr	r6, [pc, #56]	; (800c868 <sbrk_aligned+0x3c>)
 800c830:	460c      	mov	r4, r1
 800c832:	6831      	ldr	r1, [r6, #0]
 800c834:	4605      	mov	r5, r0
 800c836:	b911      	cbnz	r1, 800c83e <sbrk_aligned+0x12>
 800c838:	f000 feaa 	bl	800d590 <_sbrk_r>
 800c83c:	6030      	str	r0, [r6, #0]
 800c83e:	4621      	mov	r1, r4
 800c840:	4628      	mov	r0, r5
 800c842:	f000 fea5 	bl	800d590 <_sbrk_r>
 800c846:	1c43      	adds	r3, r0, #1
 800c848:	d00a      	beq.n	800c860 <sbrk_aligned+0x34>
 800c84a:	1cc4      	adds	r4, r0, #3
 800c84c:	f024 0403 	bic.w	r4, r4, #3
 800c850:	42a0      	cmp	r0, r4
 800c852:	d007      	beq.n	800c864 <sbrk_aligned+0x38>
 800c854:	1a21      	subs	r1, r4, r0
 800c856:	4628      	mov	r0, r5
 800c858:	f000 fe9a 	bl	800d590 <_sbrk_r>
 800c85c:	3001      	adds	r0, #1
 800c85e:	d101      	bne.n	800c864 <sbrk_aligned+0x38>
 800c860:	f04f 34ff 	mov.w	r4, #4294967295
 800c864:	4620      	mov	r0, r4
 800c866:	bd70      	pop	{r4, r5, r6, pc}
 800c868:	20019c94 	.word	0x20019c94

0800c86c <_malloc_r>:
 800c86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c870:	1ccd      	adds	r5, r1, #3
 800c872:	f025 0503 	bic.w	r5, r5, #3
 800c876:	3508      	adds	r5, #8
 800c878:	2d0c      	cmp	r5, #12
 800c87a:	bf38      	it	cc
 800c87c:	250c      	movcc	r5, #12
 800c87e:	2d00      	cmp	r5, #0
 800c880:	4607      	mov	r7, r0
 800c882:	db01      	blt.n	800c888 <_malloc_r+0x1c>
 800c884:	42a9      	cmp	r1, r5
 800c886:	d905      	bls.n	800c894 <_malloc_r+0x28>
 800c888:	230c      	movs	r3, #12
 800c88a:	603b      	str	r3, [r7, #0]
 800c88c:	2600      	movs	r6, #0
 800c88e:	4630      	mov	r0, r6
 800c890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c894:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c968 <_malloc_r+0xfc>
 800c898:	f000 f868 	bl	800c96c <__malloc_lock>
 800c89c:	f8d8 3000 	ldr.w	r3, [r8]
 800c8a0:	461c      	mov	r4, r3
 800c8a2:	bb5c      	cbnz	r4, 800c8fc <_malloc_r+0x90>
 800c8a4:	4629      	mov	r1, r5
 800c8a6:	4638      	mov	r0, r7
 800c8a8:	f7ff ffc0 	bl	800c82c <sbrk_aligned>
 800c8ac:	1c43      	adds	r3, r0, #1
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	d155      	bne.n	800c95e <_malloc_r+0xf2>
 800c8b2:	f8d8 4000 	ldr.w	r4, [r8]
 800c8b6:	4626      	mov	r6, r4
 800c8b8:	2e00      	cmp	r6, #0
 800c8ba:	d145      	bne.n	800c948 <_malloc_r+0xdc>
 800c8bc:	2c00      	cmp	r4, #0
 800c8be:	d048      	beq.n	800c952 <_malloc_r+0xe6>
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	4631      	mov	r1, r6
 800c8c4:	4638      	mov	r0, r7
 800c8c6:	eb04 0903 	add.w	r9, r4, r3
 800c8ca:	f000 fe61 	bl	800d590 <_sbrk_r>
 800c8ce:	4581      	cmp	r9, r0
 800c8d0:	d13f      	bne.n	800c952 <_malloc_r+0xe6>
 800c8d2:	6821      	ldr	r1, [r4, #0]
 800c8d4:	1a6d      	subs	r5, r5, r1
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	4638      	mov	r0, r7
 800c8da:	f7ff ffa7 	bl	800c82c <sbrk_aligned>
 800c8de:	3001      	adds	r0, #1
 800c8e0:	d037      	beq.n	800c952 <_malloc_r+0xe6>
 800c8e2:	6823      	ldr	r3, [r4, #0]
 800c8e4:	442b      	add	r3, r5
 800c8e6:	6023      	str	r3, [r4, #0]
 800c8e8:	f8d8 3000 	ldr.w	r3, [r8]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d038      	beq.n	800c962 <_malloc_r+0xf6>
 800c8f0:	685a      	ldr	r2, [r3, #4]
 800c8f2:	42a2      	cmp	r2, r4
 800c8f4:	d12b      	bne.n	800c94e <_malloc_r+0xe2>
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	605a      	str	r2, [r3, #4]
 800c8fa:	e00f      	b.n	800c91c <_malloc_r+0xb0>
 800c8fc:	6822      	ldr	r2, [r4, #0]
 800c8fe:	1b52      	subs	r2, r2, r5
 800c900:	d41f      	bmi.n	800c942 <_malloc_r+0xd6>
 800c902:	2a0b      	cmp	r2, #11
 800c904:	d917      	bls.n	800c936 <_malloc_r+0xca>
 800c906:	1961      	adds	r1, r4, r5
 800c908:	42a3      	cmp	r3, r4
 800c90a:	6025      	str	r5, [r4, #0]
 800c90c:	bf18      	it	ne
 800c90e:	6059      	strne	r1, [r3, #4]
 800c910:	6863      	ldr	r3, [r4, #4]
 800c912:	bf08      	it	eq
 800c914:	f8c8 1000 	streq.w	r1, [r8]
 800c918:	5162      	str	r2, [r4, r5]
 800c91a:	604b      	str	r3, [r1, #4]
 800c91c:	4638      	mov	r0, r7
 800c91e:	f104 060b 	add.w	r6, r4, #11
 800c922:	f000 f829 	bl	800c978 <__malloc_unlock>
 800c926:	f026 0607 	bic.w	r6, r6, #7
 800c92a:	1d23      	adds	r3, r4, #4
 800c92c:	1af2      	subs	r2, r6, r3
 800c92e:	d0ae      	beq.n	800c88e <_malloc_r+0x22>
 800c930:	1b9b      	subs	r3, r3, r6
 800c932:	50a3      	str	r3, [r4, r2]
 800c934:	e7ab      	b.n	800c88e <_malloc_r+0x22>
 800c936:	42a3      	cmp	r3, r4
 800c938:	6862      	ldr	r2, [r4, #4]
 800c93a:	d1dd      	bne.n	800c8f8 <_malloc_r+0x8c>
 800c93c:	f8c8 2000 	str.w	r2, [r8]
 800c940:	e7ec      	b.n	800c91c <_malloc_r+0xb0>
 800c942:	4623      	mov	r3, r4
 800c944:	6864      	ldr	r4, [r4, #4]
 800c946:	e7ac      	b.n	800c8a2 <_malloc_r+0x36>
 800c948:	4634      	mov	r4, r6
 800c94a:	6876      	ldr	r6, [r6, #4]
 800c94c:	e7b4      	b.n	800c8b8 <_malloc_r+0x4c>
 800c94e:	4613      	mov	r3, r2
 800c950:	e7cc      	b.n	800c8ec <_malloc_r+0x80>
 800c952:	230c      	movs	r3, #12
 800c954:	603b      	str	r3, [r7, #0]
 800c956:	4638      	mov	r0, r7
 800c958:	f000 f80e 	bl	800c978 <__malloc_unlock>
 800c95c:	e797      	b.n	800c88e <_malloc_r+0x22>
 800c95e:	6025      	str	r5, [r4, #0]
 800c960:	e7dc      	b.n	800c91c <_malloc_r+0xb0>
 800c962:	605b      	str	r3, [r3, #4]
 800c964:	deff      	udf	#255	; 0xff
 800c966:	bf00      	nop
 800c968:	20019c90 	.word	0x20019c90

0800c96c <__malloc_lock>:
 800c96c:	4801      	ldr	r0, [pc, #4]	; (800c974 <__malloc_lock+0x8>)
 800c96e:	f7ff b87c 	b.w	800ba6a <__retarget_lock_acquire_recursive>
 800c972:	bf00      	nop
 800c974:	20019c8c 	.word	0x20019c8c

0800c978 <__malloc_unlock>:
 800c978:	4801      	ldr	r0, [pc, #4]	; (800c980 <__malloc_unlock+0x8>)
 800c97a:	f7ff b877 	b.w	800ba6c <__retarget_lock_release_recursive>
 800c97e:	bf00      	nop
 800c980:	20019c8c 	.word	0x20019c8c

0800c984 <_Balloc>:
 800c984:	b570      	push	{r4, r5, r6, lr}
 800c986:	69c6      	ldr	r6, [r0, #28]
 800c988:	4604      	mov	r4, r0
 800c98a:	460d      	mov	r5, r1
 800c98c:	b976      	cbnz	r6, 800c9ac <_Balloc+0x28>
 800c98e:	2010      	movs	r0, #16
 800c990:	f7ff ff44 	bl	800c81c <malloc>
 800c994:	4602      	mov	r2, r0
 800c996:	61e0      	str	r0, [r4, #28]
 800c998:	b920      	cbnz	r0, 800c9a4 <_Balloc+0x20>
 800c99a:	4b18      	ldr	r3, [pc, #96]	; (800c9fc <_Balloc+0x78>)
 800c99c:	4818      	ldr	r0, [pc, #96]	; (800ca00 <_Balloc+0x7c>)
 800c99e:	216b      	movs	r1, #107	; 0x6b
 800c9a0:	f000 fe06 	bl	800d5b0 <__assert_func>
 800c9a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9a8:	6006      	str	r6, [r0, #0]
 800c9aa:	60c6      	str	r6, [r0, #12]
 800c9ac:	69e6      	ldr	r6, [r4, #28]
 800c9ae:	68f3      	ldr	r3, [r6, #12]
 800c9b0:	b183      	cbz	r3, 800c9d4 <_Balloc+0x50>
 800c9b2:	69e3      	ldr	r3, [r4, #28]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9ba:	b9b8      	cbnz	r0, 800c9ec <_Balloc+0x68>
 800c9bc:	2101      	movs	r1, #1
 800c9be:	fa01 f605 	lsl.w	r6, r1, r5
 800c9c2:	1d72      	adds	r2, r6, #5
 800c9c4:	0092      	lsls	r2, r2, #2
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f000 fe10 	bl	800d5ec <_calloc_r>
 800c9cc:	b160      	cbz	r0, 800c9e8 <_Balloc+0x64>
 800c9ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9d2:	e00e      	b.n	800c9f2 <_Balloc+0x6e>
 800c9d4:	2221      	movs	r2, #33	; 0x21
 800c9d6:	2104      	movs	r1, #4
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f000 fe07 	bl	800d5ec <_calloc_r>
 800c9de:	69e3      	ldr	r3, [r4, #28]
 800c9e0:	60f0      	str	r0, [r6, #12]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d1e4      	bne.n	800c9b2 <_Balloc+0x2e>
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	bd70      	pop	{r4, r5, r6, pc}
 800c9ec:	6802      	ldr	r2, [r0, #0]
 800c9ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c9f8:	e7f7      	b.n	800c9ea <_Balloc+0x66>
 800c9fa:	bf00      	nop
 800c9fc:	0800f9b1 	.word	0x0800f9b1
 800ca00:	0800fa31 	.word	0x0800fa31

0800ca04 <_Bfree>:
 800ca04:	b570      	push	{r4, r5, r6, lr}
 800ca06:	69c6      	ldr	r6, [r0, #28]
 800ca08:	4605      	mov	r5, r0
 800ca0a:	460c      	mov	r4, r1
 800ca0c:	b976      	cbnz	r6, 800ca2c <_Bfree+0x28>
 800ca0e:	2010      	movs	r0, #16
 800ca10:	f7ff ff04 	bl	800c81c <malloc>
 800ca14:	4602      	mov	r2, r0
 800ca16:	61e8      	str	r0, [r5, #28]
 800ca18:	b920      	cbnz	r0, 800ca24 <_Bfree+0x20>
 800ca1a:	4b09      	ldr	r3, [pc, #36]	; (800ca40 <_Bfree+0x3c>)
 800ca1c:	4809      	ldr	r0, [pc, #36]	; (800ca44 <_Bfree+0x40>)
 800ca1e:	218f      	movs	r1, #143	; 0x8f
 800ca20:	f000 fdc6 	bl	800d5b0 <__assert_func>
 800ca24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca28:	6006      	str	r6, [r0, #0]
 800ca2a:	60c6      	str	r6, [r0, #12]
 800ca2c:	b13c      	cbz	r4, 800ca3e <_Bfree+0x3a>
 800ca2e:	69eb      	ldr	r3, [r5, #28]
 800ca30:	6862      	ldr	r2, [r4, #4]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca38:	6021      	str	r1, [r4, #0]
 800ca3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca3e:	bd70      	pop	{r4, r5, r6, pc}
 800ca40:	0800f9b1 	.word	0x0800f9b1
 800ca44:	0800fa31 	.word	0x0800fa31

0800ca48 <__multadd>:
 800ca48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca4c:	690d      	ldr	r5, [r1, #16]
 800ca4e:	4607      	mov	r7, r0
 800ca50:	460c      	mov	r4, r1
 800ca52:	461e      	mov	r6, r3
 800ca54:	f101 0c14 	add.w	ip, r1, #20
 800ca58:	2000      	movs	r0, #0
 800ca5a:	f8dc 3000 	ldr.w	r3, [ip]
 800ca5e:	b299      	uxth	r1, r3
 800ca60:	fb02 6101 	mla	r1, r2, r1, r6
 800ca64:	0c1e      	lsrs	r6, r3, #16
 800ca66:	0c0b      	lsrs	r3, r1, #16
 800ca68:	fb02 3306 	mla	r3, r2, r6, r3
 800ca6c:	b289      	uxth	r1, r1
 800ca6e:	3001      	adds	r0, #1
 800ca70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca74:	4285      	cmp	r5, r0
 800ca76:	f84c 1b04 	str.w	r1, [ip], #4
 800ca7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca7e:	dcec      	bgt.n	800ca5a <__multadd+0x12>
 800ca80:	b30e      	cbz	r6, 800cac6 <__multadd+0x7e>
 800ca82:	68a3      	ldr	r3, [r4, #8]
 800ca84:	42ab      	cmp	r3, r5
 800ca86:	dc19      	bgt.n	800cabc <__multadd+0x74>
 800ca88:	6861      	ldr	r1, [r4, #4]
 800ca8a:	4638      	mov	r0, r7
 800ca8c:	3101      	adds	r1, #1
 800ca8e:	f7ff ff79 	bl	800c984 <_Balloc>
 800ca92:	4680      	mov	r8, r0
 800ca94:	b928      	cbnz	r0, 800caa2 <__multadd+0x5a>
 800ca96:	4602      	mov	r2, r0
 800ca98:	4b0c      	ldr	r3, [pc, #48]	; (800cacc <__multadd+0x84>)
 800ca9a:	480d      	ldr	r0, [pc, #52]	; (800cad0 <__multadd+0x88>)
 800ca9c:	21ba      	movs	r1, #186	; 0xba
 800ca9e:	f000 fd87 	bl	800d5b0 <__assert_func>
 800caa2:	6922      	ldr	r2, [r4, #16]
 800caa4:	3202      	adds	r2, #2
 800caa6:	f104 010c 	add.w	r1, r4, #12
 800caaa:	0092      	lsls	r2, r2, #2
 800caac:	300c      	adds	r0, #12
 800caae:	f7fe ffde 	bl	800ba6e <memcpy>
 800cab2:	4621      	mov	r1, r4
 800cab4:	4638      	mov	r0, r7
 800cab6:	f7ff ffa5 	bl	800ca04 <_Bfree>
 800caba:	4644      	mov	r4, r8
 800cabc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cac0:	3501      	adds	r5, #1
 800cac2:	615e      	str	r6, [r3, #20]
 800cac4:	6125      	str	r5, [r4, #16]
 800cac6:	4620      	mov	r0, r4
 800cac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cacc:	0800fa20 	.word	0x0800fa20
 800cad0:	0800fa31 	.word	0x0800fa31

0800cad4 <__hi0bits>:
 800cad4:	0c03      	lsrs	r3, r0, #16
 800cad6:	041b      	lsls	r3, r3, #16
 800cad8:	b9d3      	cbnz	r3, 800cb10 <__hi0bits+0x3c>
 800cada:	0400      	lsls	r0, r0, #16
 800cadc:	2310      	movs	r3, #16
 800cade:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cae2:	bf04      	itt	eq
 800cae4:	0200      	lsleq	r0, r0, #8
 800cae6:	3308      	addeq	r3, #8
 800cae8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800caec:	bf04      	itt	eq
 800caee:	0100      	lsleq	r0, r0, #4
 800caf0:	3304      	addeq	r3, #4
 800caf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800caf6:	bf04      	itt	eq
 800caf8:	0080      	lsleq	r0, r0, #2
 800cafa:	3302      	addeq	r3, #2
 800cafc:	2800      	cmp	r0, #0
 800cafe:	db05      	blt.n	800cb0c <__hi0bits+0x38>
 800cb00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cb04:	f103 0301 	add.w	r3, r3, #1
 800cb08:	bf08      	it	eq
 800cb0a:	2320      	moveq	r3, #32
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	4770      	bx	lr
 800cb10:	2300      	movs	r3, #0
 800cb12:	e7e4      	b.n	800cade <__hi0bits+0xa>

0800cb14 <__lo0bits>:
 800cb14:	6803      	ldr	r3, [r0, #0]
 800cb16:	f013 0207 	ands.w	r2, r3, #7
 800cb1a:	d00c      	beq.n	800cb36 <__lo0bits+0x22>
 800cb1c:	07d9      	lsls	r1, r3, #31
 800cb1e:	d422      	bmi.n	800cb66 <__lo0bits+0x52>
 800cb20:	079a      	lsls	r2, r3, #30
 800cb22:	bf49      	itett	mi
 800cb24:	085b      	lsrmi	r3, r3, #1
 800cb26:	089b      	lsrpl	r3, r3, #2
 800cb28:	6003      	strmi	r3, [r0, #0]
 800cb2a:	2201      	movmi	r2, #1
 800cb2c:	bf5c      	itt	pl
 800cb2e:	6003      	strpl	r3, [r0, #0]
 800cb30:	2202      	movpl	r2, #2
 800cb32:	4610      	mov	r0, r2
 800cb34:	4770      	bx	lr
 800cb36:	b299      	uxth	r1, r3
 800cb38:	b909      	cbnz	r1, 800cb3e <__lo0bits+0x2a>
 800cb3a:	0c1b      	lsrs	r3, r3, #16
 800cb3c:	2210      	movs	r2, #16
 800cb3e:	b2d9      	uxtb	r1, r3
 800cb40:	b909      	cbnz	r1, 800cb46 <__lo0bits+0x32>
 800cb42:	3208      	adds	r2, #8
 800cb44:	0a1b      	lsrs	r3, r3, #8
 800cb46:	0719      	lsls	r1, r3, #28
 800cb48:	bf04      	itt	eq
 800cb4a:	091b      	lsreq	r3, r3, #4
 800cb4c:	3204      	addeq	r2, #4
 800cb4e:	0799      	lsls	r1, r3, #30
 800cb50:	bf04      	itt	eq
 800cb52:	089b      	lsreq	r3, r3, #2
 800cb54:	3202      	addeq	r2, #2
 800cb56:	07d9      	lsls	r1, r3, #31
 800cb58:	d403      	bmi.n	800cb62 <__lo0bits+0x4e>
 800cb5a:	085b      	lsrs	r3, r3, #1
 800cb5c:	f102 0201 	add.w	r2, r2, #1
 800cb60:	d003      	beq.n	800cb6a <__lo0bits+0x56>
 800cb62:	6003      	str	r3, [r0, #0]
 800cb64:	e7e5      	b.n	800cb32 <__lo0bits+0x1e>
 800cb66:	2200      	movs	r2, #0
 800cb68:	e7e3      	b.n	800cb32 <__lo0bits+0x1e>
 800cb6a:	2220      	movs	r2, #32
 800cb6c:	e7e1      	b.n	800cb32 <__lo0bits+0x1e>
	...

0800cb70 <__i2b>:
 800cb70:	b510      	push	{r4, lr}
 800cb72:	460c      	mov	r4, r1
 800cb74:	2101      	movs	r1, #1
 800cb76:	f7ff ff05 	bl	800c984 <_Balloc>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	b928      	cbnz	r0, 800cb8a <__i2b+0x1a>
 800cb7e:	4b05      	ldr	r3, [pc, #20]	; (800cb94 <__i2b+0x24>)
 800cb80:	4805      	ldr	r0, [pc, #20]	; (800cb98 <__i2b+0x28>)
 800cb82:	f240 1145 	movw	r1, #325	; 0x145
 800cb86:	f000 fd13 	bl	800d5b0 <__assert_func>
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	6144      	str	r4, [r0, #20]
 800cb8e:	6103      	str	r3, [r0, #16]
 800cb90:	bd10      	pop	{r4, pc}
 800cb92:	bf00      	nop
 800cb94:	0800fa20 	.word	0x0800fa20
 800cb98:	0800fa31 	.word	0x0800fa31

0800cb9c <__multiply>:
 800cb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba0:	4691      	mov	r9, r2
 800cba2:	690a      	ldr	r2, [r1, #16]
 800cba4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	bfb8      	it	lt
 800cbac:	460b      	movlt	r3, r1
 800cbae:	460c      	mov	r4, r1
 800cbb0:	bfbc      	itt	lt
 800cbb2:	464c      	movlt	r4, r9
 800cbb4:	4699      	movlt	r9, r3
 800cbb6:	6927      	ldr	r7, [r4, #16]
 800cbb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cbbc:	68a3      	ldr	r3, [r4, #8]
 800cbbe:	6861      	ldr	r1, [r4, #4]
 800cbc0:	eb07 060a 	add.w	r6, r7, sl
 800cbc4:	42b3      	cmp	r3, r6
 800cbc6:	b085      	sub	sp, #20
 800cbc8:	bfb8      	it	lt
 800cbca:	3101      	addlt	r1, #1
 800cbcc:	f7ff feda 	bl	800c984 <_Balloc>
 800cbd0:	b930      	cbnz	r0, 800cbe0 <__multiply+0x44>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	4b44      	ldr	r3, [pc, #272]	; (800cce8 <__multiply+0x14c>)
 800cbd6:	4845      	ldr	r0, [pc, #276]	; (800ccec <__multiply+0x150>)
 800cbd8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cbdc:	f000 fce8 	bl	800d5b0 <__assert_func>
 800cbe0:	f100 0514 	add.w	r5, r0, #20
 800cbe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cbe8:	462b      	mov	r3, r5
 800cbea:	2200      	movs	r2, #0
 800cbec:	4543      	cmp	r3, r8
 800cbee:	d321      	bcc.n	800cc34 <__multiply+0x98>
 800cbf0:	f104 0314 	add.w	r3, r4, #20
 800cbf4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cbf8:	f109 0314 	add.w	r3, r9, #20
 800cbfc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cc00:	9202      	str	r2, [sp, #8]
 800cc02:	1b3a      	subs	r2, r7, r4
 800cc04:	3a15      	subs	r2, #21
 800cc06:	f022 0203 	bic.w	r2, r2, #3
 800cc0a:	3204      	adds	r2, #4
 800cc0c:	f104 0115 	add.w	r1, r4, #21
 800cc10:	428f      	cmp	r7, r1
 800cc12:	bf38      	it	cc
 800cc14:	2204      	movcc	r2, #4
 800cc16:	9201      	str	r2, [sp, #4]
 800cc18:	9a02      	ldr	r2, [sp, #8]
 800cc1a:	9303      	str	r3, [sp, #12]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d80c      	bhi.n	800cc3a <__multiply+0x9e>
 800cc20:	2e00      	cmp	r6, #0
 800cc22:	dd03      	ble.n	800cc2c <__multiply+0x90>
 800cc24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d05b      	beq.n	800cce4 <__multiply+0x148>
 800cc2c:	6106      	str	r6, [r0, #16]
 800cc2e:	b005      	add	sp, #20
 800cc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc34:	f843 2b04 	str.w	r2, [r3], #4
 800cc38:	e7d8      	b.n	800cbec <__multiply+0x50>
 800cc3a:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc3e:	f1ba 0f00 	cmp.w	sl, #0
 800cc42:	d024      	beq.n	800cc8e <__multiply+0xf2>
 800cc44:	f104 0e14 	add.w	lr, r4, #20
 800cc48:	46a9      	mov	r9, r5
 800cc4a:	f04f 0c00 	mov.w	ip, #0
 800cc4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cc52:	f8d9 1000 	ldr.w	r1, [r9]
 800cc56:	fa1f fb82 	uxth.w	fp, r2
 800cc5a:	b289      	uxth	r1, r1
 800cc5c:	fb0a 110b 	mla	r1, sl, fp, r1
 800cc60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cc64:	f8d9 2000 	ldr.w	r2, [r9]
 800cc68:	4461      	add	r1, ip
 800cc6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc6e:	fb0a c20b 	mla	r2, sl, fp, ip
 800cc72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cc76:	b289      	uxth	r1, r1
 800cc78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cc7c:	4577      	cmp	r7, lr
 800cc7e:	f849 1b04 	str.w	r1, [r9], #4
 800cc82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc86:	d8e2      	bhi.n	800cc4e <__multiply+0xb2>
 800cc88:	9a01      	ldr	r2, [sp, #4]
 800cc8a:	f845 c002 	str.w	ip, [r5, r2]
 800cc8e:	9a03      	ldr	r2, [sp, #12]
 800cc90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc94:	3304      	adds	r3, #4
 800cc96:	f1b9 0f00 	cmp.w	r9, #0
 800cc9a:	d021      	beq.n	800cce0 <__multiply+0x144>
 800cc9c:	6829      	ldr	r1, [r5, #0]
 800cc9e:	f104 0c14 	add.w	ip, r4, #20
 800cca2:	46ae      	mov	lr, r5
 800cca4:	f04f 0a00 	mov.w	sl, #0
 800cca8:	f8bc b000 	ldrh.w	fp, [ip]
 800ccac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ccb0:	fb09 220b 	mla	r2, r9, fp, r2
 800ccb4:	4452      	add	r2, sl
 800ccb6:	b289      	uxth	r1, r1
 800ccb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ccbc:	f84e 1b04 	str.w	r1, [lr], #4
 800ccc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ccc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ccc8:	f8be 1000 	ldrh.w	r1, [lr]
 800cccc:	fb09 110a 	mla	r1, r9, sl, r1
 800ccd0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ccd4:	4567      	cmp	r7, ip
 800ccd6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ccda:	d8e5      	bhi.n	800cca8 <__multiply+0x10c>
 800ccdc:	9a01      	ldr	r2, [sp, #4]
 800ccde:	50a9      	str	r1, [r5, r2]
 800cce0:	3504      	adds	r5, #4
 800cce2:	e799      	b.n	800cc18 <__multiply+0x7c>
 800cce4:	3e01      	subs	r6, #1
 800cce6:	e79b      	b.n	800cc20 <__multiply+0x84>
 800cce8:	0800fa20 	.word	0x0800fa20
 800ccec:	0800fa31 	.word	0x0800fa31

0800ccf0 <__pow5mult>:
 800ccf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf4:	4615      	mov	r5, r2
 800ccf6:	f012 0203 	ands.w	r2, r2, #3
 800ccfa:	4606      	mov	r6, r0
 800ccfc:	460f      	mov	r7, r1
 800ccfe:	d007      	beq.n	800cd10 <__pow5mult+0x20>
 800cd00:	4c25      	ldr	r4, [pc, #148]	; (800cd98 <__pow5mult+0xa8>)
 800cd02:	3a01      	subs	r2, #1
 800cd04:	2300      	movs	r3, #0
 800cd06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd0a:	f7ff fe9d 	bl	800ca48 <__multadd>
 800cd0e:	4607      	mov	r7, r0
 800cd10:	10ad      	asrs	r5, r5, #2
 800cd12:	d03d      	beq.n	800cd90 <__pow5mult+0xa0>
 800cd14:	69f4      	ldr	r4, [r6, #28]
 800cd16:	b97c      	cbnz	r4, 800cd38 <__pow5mult+0x48>
 800cd18:	2010      	movs	r0, #16
 800cd1a:	f7ff fd7f 	bl	800c81c <malloc>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	61f0      	str	r0, [r6, #28]
 800cd22:	b928      	cbnz	r0, 800cd30 <__pow5mult+0x40>
 800cd24:	4b1d      	ldr	r3, [pc, #116]	; (800cd9c <__pow5mult+0xac>)
 800cd26:	481e      	ldr	r0, [pc, #120]	; (800cda0 <__pow5mult+0xb0>)
 800cd28:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cd2c:	f000 fc40 	bl	800d5b0 <__assert_func>
 800cd30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd34:	6004      	str	r4, [r0, #0]
 800cd36:	60c4      	str	r4, [r0, #12]
 800cd38:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cd3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd40:	b94c      	cbnz	r4, 800cd56 <__pow5mult+0x66>
 800cd42:	f240 2171 	movw	r1, #625	; 0x271
 800cd46:	4630      	mov	r0, r6
 800cd48:	f7ff ff12 	bl	800cb70 <__i2b>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd52:	4604      	mov	r4, r0
 800cd54:	6003      	str	r3, [r0, #0]
 800cd56:	f04f 0900 	mov.w	r9, #0
 800cd5a:	07eb      	lsls	r3, r5, #31
 800cd5c:	d50a      	bpl.n	800cd74 <__pow5mult+0x84>
 800cd5e:	4639      	mov	r1, r7
 800cd60:	4622      	mov	r2, r4
 800cd62:	4630      	mov	r0, r6
 800cd64:	f7ff ff1a 	bl	800cb9c <__multiply>
 800cd68:	4639      	mov	r1, r7
 800cd6a:	4680      	mov	r8, r0
 800cd6c:	4630      	mov	r0, r6
 800cd6e:	f7ff fe49 	bl	800ca04 <_Bfree>
 800cd72:	4647      	mov	r7, r8
 800cd74:	106d      	asrs	r5, r5, #1
 800cd76:	d00b      	beq.n	800cd90 <__pow5mult+0xa0>
 800cd78:	6820      	ldr	r0, [r4, #0]
 800cd7a:	b938      	cbnz	r0, 800cd8c <__pow5mult+0x9c>
 800cd7c:	4622      	mov	r2, r4
 800cd7e:	4621      	mov	r1, r4
 800cd80:	4630      	mov	r0, r6
 800cd82:	f7ff ff0b 	bl	800cb9c <__multiply>
 800cd86:	6020      	str	r0, [r4, #0]
 800cd88:	f8c0 9000 	str.w	r9, [r0]
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	e7e4      	b.n	800cd5a <__pow5mult+0x6a>
 800cd90:	4638      	mov	r0, r7
 800cd92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd96:	bf00      	nop
 800cd98:	0800fb80 	.word	0x0800fb80
 800cd9c:	0800f9b1 	.word	0x0800f9b1
 800cda0:	0800fa31 	.word	0x0800fa31

0800cda4 <__lshift>:
 800cda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cda8:	460c      	mov	r4, r1
 800cdaa:	6849      	ldr	r1, [r1, #4]
 800cdac:	6923      	ldr	r3, [r4, #16]
 800cdae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cdb2:	68a3      	ldr	r3, [r4, #8]
 800cdb4:	4607      	mov	r7, r0
 800cdb6:	4691      	mov	r9, r2
 800cdb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cdbc:	f108 0601 	add.w	r6, r8, #1
 800cdc0:	42b3      	cmp	r3, r6
 800cdc2:	db0b      	blt.n	800cddc <__lshift+0x38>
 800cdc4:	4638      	mov	r0, r7
 800cdc6:	f7ff fddd 	bl	800c984 <_Balloc>
 800cdca:	4605      	mov	r5, r0
 800cdcc:	b948      	cbnz	r0, 800cde2 <__lshift+0x3e>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	4b28      	ldr	r3, [pc, #160]	; (800ce74 <__lshift+0xd0>)
 800cdd2:	4829      	ldr	r0, [pc, #164]	; (800ce78 <__lshift+0xd4>)
 800cdd4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cdd8:	f000 fbea 	bl	800d5b0 <__assert_func>
 800cddc:	3101      	adds	r1, #1
 800cdde:	005b      	lsls	r3, r3, #1
 800cde0:	e7ee      	b.n	800cdc0 <__lshift+0x1c>
 800cde2:	2300      	movs	r3, #0
 800cde4:	f100 0114 	add.w	r1, r0, #20
 800cde8:	f100 0210 	add.w	r2, r0, #16
 800cdec:	4618      	mov	r0, r3
 800cdee:	4553      	cmp	r3, sl
 800cdf0:	db33      	blt.n	800ce5a <__lshift+0xb6>
 800cdf2:	6920      	ldr	r0, [r4, #16]
 800cdf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdf8:	f104 0314 	add.w	r3, r4, #20
 800cdfc:	f019 091f 	ands.w	r9, r9, #31
 800ce00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce08:	d02b      	beq.n	800ce62 <__lshift+0xbe>
 800ce0a:	f1c9 0e20 	rsb	lr, r9, #32
 800ce0e:	468a      	mov	sl, r1
 800ce10:	2200      	movs	r2, #0
 800ce12:	6818      	ldr	r0, [r3, #0]
 800ce14:	fa00 f009 	lsl.w	r0, r0, r9
 800ce18:	4310      	orrs	r0, r2
 800ce1a:	f84a 0b04 	str.w	r0, [sl], #4
 800ce1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce22:	459c      	cmp	ip, r3
 800ce24:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce28:	d8f3      	bhi.n	800ce12 <__lshift+0x6e>
 800ce2a:	ebac 0304 	sub.w	r3, ip, r4
 800ce2e:	3b15      	subs	r3, #21
 800ce30:	f023 0303 	bic.w	r3, r3, #3
 800ce34:	3304      	adds	r3, #4
 800ce36:	f104 0015 	add.w	r0, r4, #21
 800ce3a:	4584      	cmp	ip, r0
 800ce3c:	bf38      	it	cc
 800ce3e:	2304      	movcc	r3, #4
 800ce40:	50ca      	str	r2, [r1, r3]
 800ce42:	b10a      	cbz	r2, 800ce48 <__lshift+0xa4>
 800ce44:	f108 0602 	add.w	r6, r8, #2
 800ce48:	3e01      	subs	r6, #1
 800ce4a:	4638      	mov	r0, r7
 800ce4c:	612e      	str	r6, [r5, #16]
 800ce4e:	4621      	mov	r1, r4
 800ce50:	f7ff fdd8 	bl	800ca04 <_Bfree>
 800ce54:	4628      	mov	r0, r5
 800ce56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce5e:	3301      	adds	r3, #1
 800ce60:	e7c5      	b.n	800cdee <__lshift+0x4a>
 800ce62:	3904      	subs	r1, #4
 800ce64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce68:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce6c:	459c      	cmp	ip, r3
 800ce6e:	d8f9      	bhi.n	800ce64 <__lshift+0xc0>
 800ce70:	e7ea      	b.n	800ce48 <__lshift+0xa4>
 800ce72:	bf00      	nop
 800ce74:	0800fa20 	.word	0x0800fa20
 800ce78:	0800fa31 	.word	0x0800fa31

0800ce7c <__mcmp>:
 800ce7c:	b530      	push	{r4, r5, lr}
 800ce7e:	6902      	ldr	r2, [r0, #16]
 800ce80:	690c      	ldr	r4, [r1, #16]
 800ce82:	1b12      	subs	r2, r2, r4
 800ce84:	d10e      	bne.n	800cea4 <__mcmp+0x28>
 800ce86:	f100 0314 	add.w	r3, r0, #20
 800ce8a:	3114      	adds	r1, #20
 800ce8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ce90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ce94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ce98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ce9c:	42a5      	cmp	r5, r4
 800ce9e:	d003      	beq.n	800cea8 <__mcmp+0x2c>
 800cea0:	d305      	bcc.n	800ceae <__mcmp+0x32>
 800cea2:	2201      	movs	r2, #1
 800cea4:	4610      	mov	r0, r2
 800cea6:	bd30      	pop	{r4, r5, pc}
 800cea8:	4283      	cmp	r3, r0
 800ceaa:	d3f3      	bcc.n	800ce94 <__mcmp+0x18>
 800ceac:	e7fa      	b.n	800cea4 <__mcmp+0x28>
 800ceae:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb2:	e7f7      	b.n	800cea4 <__mcmp+0x28>

0800ceb4 <__mdiff>:
 800ceb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb8:	460c      	mov	r4, r1
 800ceba:	4606      	mov	r6, r0
 800cebc:	4611      	mov	r1, r2
 800cebe:	4620      	mov	r0, r4
 800cec0:	4690      	mov	r8, r2
 800cec2:	f7ff ffdb 	bl	800ce7c <__mcmp>
 800cec6:	1e05      	subs	r5, r0, #0
 800cec8:	d110      	bne.n	800ceec <__mdiff+0x38>
 800ceca:	4629      	mov	r1, r5
 800cecc:	4630      	mov	r0, r6
 800cece:	f7ff fd59 	bl	800c984 <_Balloc>
 800ced2:	b930      	cbnz	r0, 800cee2 <__mdiff+0x2e>
 800ced4:	4b3a      	ldr	r3, [pc, #232]	; (800cfc0 <__mdiff+0x10c>)
 800ced6:	4602      	mov	r2, r0
 800ced8:	f240 2137 	movw	r1, #567	; 0x237
 800cedc:	4839      	ldr	r0, [pc, #228]	; (800cfc4 <__mdiff+0x110>)
 800cede:	f000 fb67 	bl	800d5b0 <__assert_func>
 800cee2:	2301      	movs	r3, #1
 800cee4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceec:	bfa4      	itt	ge
 800ceee:	4643      	movge	r3, r8
 800cef0:	46a0      	movge	r8, r4
 800cef2:	4630      	mov	r0, r6
 800cef4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cef8:	bfa6      	itte	ge
 800cefa:	461c      	movge	r4, r3
 800cefc:	2500      	movge	r5, #0
 800cefe:	2501      	movlt	r5, #1
 800cf00:	f7ff fd40 	bl	800c984 <_Balloc>
 800cf04:	b920      	cbnz	r0, 800cf10 <__mdiff+0x5c>
 800cf06:	4b2e      	ldr	r3, [pc, #184]	; (800cfc0 <__mdiff+0x10c>)
 800cf08:	4602      	mov	r2, r0
 800cf0a:	f240 2145 	movw	r1, #581	; 0x245
 800cf0e:	e7e5      	b.n	800cedc <__mdiff+0x28>
 800cf10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cf14:	6926      	ldr	r6, [r4, #16]
 800cf16:	60c5      	str	r5, [r0, #12]
 800cf18:	f104 0914 	add.w	r9, r4, #20
 800cf1c:	f108 0514 	add.w	r5, r8, #20
 800cf20:	f100 0e14 	add.w	lr, r0, #20
 800cf24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cf28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cf2c:	f108 0210 	add.w	r2, r8, #16
 800cf30:	46f2      	mov	sl, lr
 800cf32:	2100      	movs	r1, #0
 800cf34:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cf3c:	fa11 f88b 	uxtah	r8, r1, fp
 800cf40:	b299      	uxth	r1, r3
 800cf42:	0c1b      	lsrs	r3, r3, #16
 800cf44:	eba8 0801 	sub.w	r8, r8, r1
 800cf48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cf4c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cf50:	fa1f f888 	uxth.w	r8, r8
 800cf54:	1419      	asrs	r1, r3, #16
 800cf56:	454e      	cmp	r6, r9
 800cf58:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cf5c:	f84a 3b04 	str.w	r3, [sl], #4
 800cf60:	d8e8      	bhi.n	800cf34 <__mdiff+0x80>
 800cf62:	1b33      	subs	r3, r6, r4
 800cf64:	3b15      	subs	r3, #21
 800cf66:	f023 0303 	bic.w	r3, r3, #3
 800cf6a:	3304      	adds	r3, #4
 800cf6c:	3415      	adds	r4, #21
 800cf6e:	42a6      	cmp	r6, r4
 800cf70:	bf38      	it	cc
 800cf72:	2304      	movcc	r3, #4
 800cf74:	441d      	add	r5, r3
 800cf76:	4473      	add	r3, lr
 800cf78:	469e      	mov	lr, r3
 800cf7a:	462e      	mov	r6, r5
 800cf7c:	4566      	cmp	r6, ip
 800cf7e:	d30e      	bcc.n	800cf9e <__mdiff+0xea>
 800cf80:	f10c 0203 	add.w	r2, ip, #3
 800cf84:	1b52      	subs	r2, r2, r5
 800cf86:	f022 0203 	bic.w	r2, r2, #3
 800cf8a:	3d03      	subs	r5, #3
 800cf8c:	45ac      	cmp	ip, r5
 800cf8e:	bf38      	it	cc
 800cf90:	2200      	movcc	r2, #0
 800cf92:	4413      	add	r3, r2
 800cf94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cf98:	b17a      	cbz	r2, 800cfba <__mdiff+0x106>
 800cf9a:	6107      	str	r7, [r0, #16]
 800cf9c:	e7a4      	b.n	800cee8 <__mdiff+0x34>
 800cf9e:	f856 8b04 	ldr.w	r8, [r6], #4
 800cfa2:	fa11 f288 	uxtah	r2, r1, r8
 800cfa6:	1414      	asrs	r4, r2, #16
 800cfa8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cfac:	b292      	uxth	r2, r2
 800cfae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cfb2:	f84e 2b04 	str.w	r2, [lr], #4
 800cfb6:	1421      	asrs	r1, r4, #16
 800cfb8:	e7e0      	b.n	800cf7c <__mdiff+0xc8>
 800cfba:	3f01      	subs	r7, #1
 800cfbc:	e7ea      	b.n	800cf94 <__mdiff+0xe0>
 800cfbe:	bf00      	nop
 800cfc0:	0800fa20 	.word	0x0800fa20
 800cfc4:	0800fa31 	.word	0x0800fa31

0800cfc8 <__d2b>:
 800cfc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfcc:	460f      	mov	r7, r1
 800cfce:	2101      	movs	r1, #1
 800cfd0:	ec59 8b10 	vmov	r8, r9, d0
 800cfd4:	4616      	mov	r6, r2
 800cfd6:	f7ff fcd5 	bl	800c984 <_Balloc>
 800cfda:	4604      	mov	r4, r0
 800cfdc:	b930      	cbnz	r0, 800cfec <__d2b+0x24>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	4b24      	ldr	r3, [pc, #144]	; (800d074 <__d2b+0xac>)
 800cfe2:	4825      	ldr	r0, [pc, #148]	; (800d078 <__d2b+0xb0>)
 800cfe4:	f240 310f 	movw	r1, #783	; 0x30f
 800cfe8:	f000 fae2 	bl	800d5b0 <__assert_func>
 800cfec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cff4:	bb2d      	cbnz	r5, 800d042 <__d2b+0x7a>
 800cff6:	9301      	str	r3, [sp, #4]
 800cff8:	f1b8 0300 	subs.w	r3, r8, #0
 800cffc:	d026      	beq.n	800d04c <__d2b+0x84>
 800cffe:	4668      	mov	r0, sp
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	f7ff fd87 	bl	800cb14 <__lo0bits>
 800d006:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d00a:	b1e8      	cbz	r0, 800d048 <__d2b+0x80>
 800d00c:	f1c0 0320 	rsb	r3, r0, #32
 800d010:	fa02 f303 	lsl.w	r3, r2, r3
 800d014:	430b      	orrs	r3, r1
 800d016:	40c2      	lsrs	r2, r0
 800d018:	6163      	str	r3, [r4, #20]
 800d01a:	9201      	str	r2, [sp, #4]
 800d01c:	9b01      	ldr	r3, [sp, #4]
 800d01e:	61a3      	str	r3, [r4, #24]
 800d020:	2b00      	cmp	r3, #0
 800d022:	bf14      	ite	ne
 800d024:	2202      	movne	r2, #2
 800d026:	2201      	moveq	r2, #1
 800d028:	6122      	str	r2, [r4, #16]
 800d02a:	b1bd      	cbz	r5, 800d05c <__d2b+0x94>
 800d02c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d030:	4405      	add	r5, r0
 800d032:	603d      	str	r5, [r7, #0]
 800d034:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d038:	6030      	str	r0, [r6, #0]
 800d03a:	4620      	mov	r0, r4
 800d03c:	b003      	add	sp, #12
 800d03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d046:	e7d6      	b.n	800cff6 <__d2b+0x2e>
 800d048:	6161      	str	r1, [r4, #20]
 800d04a:	e7e7      	b.n	800d01c <__d2b+0x54>
 800d04c:	a801      	add	r0, sp, #4
 800d04e:	f7ff fd61 	bl	800cb14 <__lo0bits>
 800d052:	9b01      	ldr	r3, [sp, #4]
 800d054:	6163      	str	r3, [r4, #20]
 800d056:	3020      	adds	r0, #32
 800d058:	2201      	movs	r2, #1
 800d05a:	e7e5      	b.n	800d028 <__d2b+0x60>
 800d05c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d060:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d064:	6038      	str	r0, [r7, #0]
 800d066:	6918      	ldr	r0, [r3, #16]
 800d068:	f7ff fd34 	bl	800cad4 <__hi0bits>
 800d06c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d070:	e7e2      	b.n	800d038 <__d2b+0x70>
 800d072:	bf00      	nop
 800d074:	0800fa20 	.word	0x0800fa20
 800d078:	0800fa31 	.word	0x0800fa31

0800d07c <__ssputs_r>:
 800d07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d080:	688e      	ldr	r6, [r1, #8]
 800d082:	461f      	mov	r7, r3
 800d084:	42be      	cmp	r6, r7
 800d086:	680b      	ldr	r3, [r1, #0]
 800d088:	4682      	mov	sl, r0
 800d08a:	460c      	mov	r4, r1
 800d08c:	4690      	mov	r8, r2
 800d08e:	d82c      	bhi.n	800d0ea <__ssputs_r+0x6e>
 800d090:	898a      	ldrh	r2, [r1, #12]
 800d092:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d096:	d026      	beq.n	800d0e6 <__ssputs_r+0x6a>
 800d098:	6965      	ldr	r5, [r4, #20]
 800d09a:	6909      	ldr	r1, [r1, #16]
 800d09c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0a0:	eba3 0901 	sub.w	r9, r3, r1
 800d0a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0a8:	1c7b      	adds	r3, r7, #1
 800d0aa:	444b      	add	r3, r9
 800d0ac:	106d      	asrs	r5, r5, #1
 800d0ae:	429d      	cmp	r5, r3
 800d0b0:	bf38      	it	cc
 800d0b2:	461d      	movcc	r5, r3
 800d0b4:	0553      	lsls	r3, r2, #21
 800d0b6:	d527      	bpl.n	800d108 <__ssputs_r+0x8c>
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	f7ff fbd7 	bl	800c86c <_malloc_r>
 800d0be:	4606      	mov	r6, r0
 800d0c0:	b360      	cbz	r0, 800d11c <__ssputs_r+0xa0>
 800d0c2:	6921      	ldr	r1, [r4, #16]
 800d0c4:	464a      	mov	r2, r9
 800d0c6:	f7fe fcd2 	bl	800ba6e <memcpy>
 800d0ca:	89a3      	ldrh	r3, [r4, #12]
 800d0cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0d4:	81a3      	strh	r3, [r4, #12]
 800d0d6:	6126      	str	r6, [r4, #16]
 800d0d8:	6165      	str	r5, [r4, #20]
 800d0da:	444e      	add	r6, r9
 800d0dc:	eba5 0509 	sub.w	r5, r5, r9
 800d0e0:	6026      	str	r6, [r4, #0]
 800d0e2:	60a5      	str	r5, [r4, #8]
 800d0e4:	463e      	mov	r6, r7
 800d0e6:	42be      	cmp	r6, r7
 800d0e8:	d900      	bls.n	800d0ec <__ssputs_r+0x70>
 800d0ea:	463e      	mov	r6, r7
 800d0ec:	6820      	ldr	r0, [r4, #0]
 800d0ee:	4632      	mov	r2, r6
 800d0f0:	4641      	mov	r1, r8
 800d0f2:	f7fe fbfd 	bl	800b8f0 <memmove>
 800d0f6:	68a3      	ldr	r3, [r4, #8]
 800d0f8:	1b9b      	subs	r3, r3, r6
 800d0fa:	60a3      	str	r3, [r4, #8]
 800d0fc:	6823      	ldr	r3, [r4, #0]
 800d0fe:	4433      	add	r3, r6
 800d100:	6023      	str	r3, [r4, #0]
 800d102:	2000      	movs	r0, #0
 800d104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d108:	462a      	mov	r2, r5
 800d10a:	f000 fa97 	bl	800d63c <_realloc_r>
 800d10e:	4606      	mov	r6, r0
 800d110:	2800      	cmp	r0, #0
 800d112:	d1e0      	bne.n	800d0d6 <__ssputs_r+0x5a>
 800d114:	6921      	ldr	r1, [r4, #16]
 800d116:	4650      	mov	r0, sl
 800d118:	f7ff fb34 	bl	800c784 <_free_r>
 800d11c:	230c      	movs	r3, #12
 800d11e:	f8ca 3000 	str.w	r3, [sl]
 800d122:	89a3      	ldrh	r3, [r4, #12]
 800d124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d128:	81a3      	strh	r3, [r4, #12]
 800d12a:	f04f 30ff 	mov.w	r0, #4294967295
 800d12e:	e7e9      	b.n	800d104 <__ssputs_r+0x88>

0800d130 <_svfiprintf_r>:
 800d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d134:	4698      	mov	r8, r3
 800d136:	898b      	ldrh	r3, [r1, #12]
 800d138:	061b      	lsls	r3, r3, #24
 800d13a:	b09d      	sub	sp, #116	; 0x74
 800d13c:	4607      	mov	r7, r0
 800d13e:	460d      	mov	r5, r1
 800d140:	4614      	mov	r4, r2
 800d142:	d50e      	bpl.n	800d162 <_svfiprintf_r+0x32>
 800d144:	690b      	ldr	r3, [r1, #16]
 800d146:	b963      	cbnz	r3, 800d162 <_svfiprintf_r+0x32>
 800d148:	2140      	movs	r1, #64	; 0x40
 800d14a:	f7ff fb8f 	bl	800c86c <_malloc_r>
 800d14e:	6028      	str	r0, [r5, #0]
 800d150:	6128      	str	r0, [r5, #16]
 800d152:	b920      	cbnz	r0, 800d15e <_svfiprintf_r+0x2e>
 800d154:	230c      	movs	r3, #12
 800d156:	603b      	str	r3, [r7, #0]
 800d158:	f04f 30ff 	mov.w	r0, #4294967295
 800d15c:	e0d0      	b.n	800d300 <_svfiprintf_r+0x1d0>
 800d15e:	2340      	movs	r3, #64	; 0x40
 800d160:	616b      	str	r3, [r5, #20]
 800d162:	2300      	movs	r3, #0
 800d164:	9309      	str	r3, [sp, #36]	; 0x24
 800d166:	2320      	movs	r3, #32
 800d168:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d16c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d170:	2330      	movs	r3, #48	; 0x30
 800d172:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d318 <_svfiprintf_r+0x1e8>
 800d176:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d17a:	f04f 0901 	mov.w	r9, #1
 800d17e:	4623      	mov	r3, r4
 800d180:	469a      	mov	sl, r3
 800d182:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d186:	b10a      	cbz	r2, 800d18c <_svfiprintf_r+0x5c>
 800d188:	2a25      	cmp	r2, #37	; 0x25
 800d18a:	d1f9      	bne.n	800d180 <_svfiprintf_r+0x50>
 800d18c:	ebba 0b04 	subs.w	fp, sl, r4
 800d190:	d00b      	beq.n	800d1aa <_svfiprintf_r+0x7a>
 800d192:	465b      	mov	r3, fp
 800d194:	4622      	mov	r2, r4
 800d196:	4629      	mov	r1, r5
 800d198:	4638      	mov	r0, r7
 800d19a:	f7ff ff6f 	bl	800d07c <__ssputs_r>
 800d19e:	3001      	adds	r0, #1
 800d1a0:	f000 80a9 	beq.w	800d2f6 <_svfiprintf_r+0x1c6>
 800d1a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1a6:	445a      	add	r2, fp
 800d1a8:	9209      	str	r2, [sp, #36]	; 0x24
 800d1aa:	f89a 3000 	ldrb.w	r3, [sl]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	f000 80a1 	beq.w	800d2f6 <_svfiprintf_r+0x1c6>
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1be:	f10a 0a01 	add.w	sl, sl, #1
 800d1c2:	9304      	str	r3, [sp, #16]
 800d1c4:	9307      	str	r3, [sp, #28]
 800d1c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1ca:	931a      	str	r3, [sp, #104]	; 0x68
 800d1cc:	4654      	mov	r4, sl
 800d1ce:	2205      	movs	r2, #5
 800d1d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1d4:	4850      	ldr	r0, [pc, #320]	; (800d318 <_svfiprintf_r+0x1e8>)
 800d1d6:	f7f3 f813 	bl	8000200 <memchr>
 800d1da:	9a04      	ldr	r2, [sp, #16]
 800d1dc:	b9d8      	cbnz	r0, 800d216 <_svfiprintf_r+0xe6>
 800d1de:	06d0      	lsls	r0, r2, #27
 800d1e0:	bf44      	itt	mi
 800d1e2:	2320      	movmi	r3, #32
 800d1e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1e8:	0711      	lsls	r1, r2, #28
 800d1ea:	bf44      	itt	mi
 800d1ec:	232b      	movmi	r3, #43	; 0x2b
 800d1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1f2:	f89a 3000 	ldrb.w	r3, [sl]
 800d1f6:	2b2a      	cmp	r3, #42	; 0x2a
 800d1f8:	d015      	beq.n	800d226 <_svfiprintf_r+0xf6>
 800d1fa:	9a07      	ldr	r2, [sp, #28]
 800d1fc:	4654      	mov	r4, sl
 800d1fe:	2000      	movs	r0, #0
 800d200:	f04f 0c0a 	mov.w	ip, #10
 800d204:	4621      	mov	r1, r4
 800d206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d20a:	3b30      	subs	r3, #48	; 0x30
 800d20c:	2b09      	cmp	r3, #9
 800d20e:	d94d      	bls.n	800d2ac <_svfiprintf_r+0x17c>
 800d210:	b1b0      	cbz	r0, 800d240 <_svfiprintf_r+0x110>
 800d212:	9207      	str	r2, [sp, #28]
 800d214:	e014      	b.n	800d240 <_svfiprintf_r+0x110>
 800d216:	eba0 0308 	sub.w	r3, r0, r8
 800d21a:	fa09 f303 	lsl.w	r3, r9, r3
 800d21e:	4313      	orrs	r3, r2
 800d220:	9304      	str	r3, [sp, #16]
 800d222:	46a2      	mov	sl, r4
 800d224:	e7d2      	b.n	800d1cc <_svfiprintf_r+0x9c>
 800d226:	9b03      	ldr	r3, [sp, #12]
 800d228:	1d19      	adds	r1, r3, #4
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	9103      	str	r1, [sp, #12]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	bfbb      	ittet	lt
 800d232:	425b      	neglt	r3, r3
 800d234:	f042 0202 	orrlt.w	r2, r2, #2
 800d238:	9307      	strge	r3, [sp, #28]
 800d23a:	9307      	strlt	r3, [sp, #28]
 800d23c:	bfb8      	it	lt
 800d23e:	9204      	strlt	r2, [sp, #16]
 800d240:	7823      	ldrb	r3, [r4, #0]
 800d242:	2b2e      	cmp	r3, #46	; 0x2e
 800d244:	d10c      	bne.n	800d260 <_svfiprintf_r+0x130>
 800d246:	7863      	ldrb	r3, [r4, #1]
 800d248:	2b2a      	cmp	r3, #42	; 0x2a
 800d24a:	d134      	bne.n	800d2b6 <_svfiprintf_r+0x186>
 800d24c:	9b03      	ldr	r3, [sp, #12]
 800d24e:	1d1a      	adds	r2, r3, #4
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	9203      	str	r2, [sp, #12]
 800d254:	2b00      	cmp	r3, #0
 800d256:	bfb8      	it	lt
 800d258:	f04f 33ff 	movlt.w	r3, #4294967295
 800d25c:	3402      	adds	r4, #2
 800d25e:	9305      	str	r3, [sp, #20]
 800d260:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d328 <_svfiprintf_r+0x1f8>
 800d264:	7821      	ldrb	r1, [r4, #0]
 800d266:	2203      	movs	r2, #3
 800d268:	4650      	mov	r0, sl
 800d26a:	f7f2 ffc9 	bl	8000200 <memchr>
 800d26e:	b138      	cbz	r0, 800d280 <_svfiprintf_r+0x150>
 800d270:	9b04      	ldr	r3, [sp, #16]
 800d272:	eba0 000a 	sub.w	r0, r0, sl
 800d276:	2240      	movs	r2, #64	; 0x40
 800d278:	4082      	lsls	r2, r0
 800d27a:	4313      	orrs	r3, r2
 800d27c:	3401      	adds	r4, #1
 800d27e:	9304      	str	r3, [sp, #16]
 800d280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d284:	4825      	ldr	r0, [pc, #148]	; (800d31c <_svfiprintf_r+0x1ec>)
 800d286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d28a:	2206      	movs	r2, #6
 800d28c:	f7f2 ffb8 	bl	8000200 <memchr>
 800d290:	2800      	cmp	r0, #0
 800d292:	d038      	beq.n	800d306 <_svfiprintf_r+0x1d6>
 800d294:	4b22      	ldr	r3, [pc, #136]	; (800d320 <_svfiprintf_r+0x1f0>)
 800d296:	bb1b      	cbnz	r3, 800d2e0 <_svfiprintf_r+0x1b0>
 800d298:	9b03      	ldr	r3, [sp, #12]
 800d29a:	3307      	adds	r3, #7
 800d29c:	f023 0307 	bic.w	r3, r3, #7
 800d2a0:	3308      	adds	r3, #8
 800d2a2:	9303      	str	r3, [sp, #12]
 800d2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2a6:	4433      	add	r3, r6
 800d2a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d2aa:	e768      	b.n	800d17e <_svfiprintf_r+0x4e>
 800d2ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2b0:	460c      	mov	r4, r1
 800d2b2:	2001      	movs	r0, #1
 800d2b4:	e7a6      	b.n	800d204 <_svfiprintf_r+0xd4>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	3401      	adds	r4, #1
 800d2ba:	9305      	str	r3, [sp, #20]
 800d2bc:	4619      	mov	r1, r3
 800d2be:	f04f 0c0a 	mov.w	ip, #10
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2c8:	3a30      	subs	r2, #48	; 0x30
 800d2ca:	2a09      	cmp	r2, #9
 800d2cc:	d903      	bls.n	800d2d6 <_svfiprintf_r+0x1a6>
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d0c6      	beq.n	800d260 <_svfiprintf_r+0x130>
 800d2d2:	9105      	str	r1, [sp, #20]
 800d2d4:	e7c4      	b.n	800d260 <_svfiprintf_r+0x130>
 800d2d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2da:	4604      	mov	r4, r0
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e7f0      	b.n	800d2c2 <_svfiprintf_r+0x192>
 800d2e0:	ab03      	add	r3, sp, #12
 800d2e2:	9300      	str	r3, [sp, #0]
 800d2e4:	462a      	mov	r2, r5
 800d2e6:	4b0f      	ldr	r3, [pc, #60]	; (800d324 <_svfiprintf_r+0x1f4>)
 800d2e8:	a904      	add	r1, sp, #16
 800d2ea:	4638      	mov	r0, r7
 800d2ec:	f7fd fcf0 	bl	800acd0 <_printf_float>
 800d2f0:	1c42      	adds	r2, r0, #1
 800d2f2:	4606      	mov	r6, r0
 800d2f4:	d1d6      	bne.n	800d2a4 <_svfiprintf_r+0x174>
 800d2f6:	89ab      	ldrh	r3, [r5, #12]
 800d2f8:	065b      	lsls	r3, r3, #25
 800d2fa:	f53f af2d 	bmi.w	800d158 <_svfiprintf_r+0x28>
 800d2fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d300:	b01d      	add	sp, #116	; 0x74
 800d302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d306:	ab03      	add	r3, sp, #12
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	462a      	mov	r2, r5
 800d30c:	4b05      	ldr	r3, [pc, #20]	; (800d324 <_svfiprintf_r+0x1f4>)
 800d30e:	a904      	add	r1, sp, #16
 800d310:	4638      	mov	r0, r7
 800d312:	f7fd ff81 	bl	800b218 <_printf_i>
 800d316:	e7eb      	b.n	800d2f0 <_svfiprintf_r+0x1c0>
 800d318:	0800fb8c 	.word	0x0800fb8c
 800d31c:	0800fb96 	.word	0x0800fb96
 800d320:	0800acd1 	.word	0x0800acd1
 800d324:	0800d07d 	.word	0x0800d07d
 800d328:	0800fb92 	.word	0x0800fb92

0800d32c <__sflush_r>:
 800d32c:	898a      	ldrh	r2, [r1, #12]
 800d32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d332:	4605      	mov	r5, r0
 800d334:	0710      	lsls	r0, r2, #28
 800d336:	460c      	mov	r4, r1
 800d338:	d458      	bmi.n	800d3ec <__sflush_r+0xc0>
 800d33a:	684b      	ldr	r3, [r1, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	dc05      	bgt.n	800d34c <__sflush_r+0x20>
 800d340:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d342:	2b00      	cmp	r3, #0
 800d344:	dc02      	bgt.n	800d34c <__sflush_r+0x20>
 800d346:	2000      	movs	r0, #0
 800d348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d34c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d34e:	2e00      	cmp	r6, #0
 800d350:	d0f9      	beq.n	800d346 <__sflush_r+0x1a>
 800d352:	2300      	movs	r3, #0
 800d354:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d358:	682f      	ldr	r7, [r5, #0]
 800d35a:	6a21      	ldr	r1, [r4, #32]
 800d35c:	602b      	str	r3, [r5, #0]
 800d35e:	d032      	beq.n	800d3c6 <__sflush_r+0x9a>
 800d360:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d362:	89a3      	ldrh	r3, [r4, #12]
 800d364:	075a      	lsls	r2, r3, #29
 800d366:	d505      	bpl.n	800d374 <__sflush_r+0x48>
 800d368:	6863      	ldr	r3, [r4, #4]
 800d36a:	1ac0      	subs	r0, r0, r3
 800d36c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d36e:	b10b      	cbz	r3, 800d374 <__sflush_r+0x48>
 800d370:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d372:	1ac0      	subs	r0, r0, r3
 800d374:	2300      	movs	r3, #0
 800d376:	4602      	mov	r2, r0
 800d378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d37a:	6a21      	ldr	r1, [r4, #32]
 800d37c:	4628      	mov	r0, r5
 800d37e:	47b0      	blx	r6
 800d380:	1c43      	adds	r3, r0, #1
 800d382:	89a3      	ldrh	r3, [r4, #12]
 800d384:	d106      	bne.n	800d394 <__sflush_r+0x68>
 800d386:	6829      	ldr	r1, [r5, #0]
 800d388:	291d      	cmp	r1, #29
 800d38a:	d82b      	bhi.n	800d3e4 <__sflush_r+0xb8>
 800d38c:	4a29      	ldr	r2, [pc, #164]	; (800d434 <__sflush_r+0x108>)
 800d38e:	410a      	asrs	r2, r1
 800d390:	07d6      	lsls	r6, r2, #31
 800d392:	d427      	bmi.n	800d3e4 <__sflush_r+0xb8>
 800d394:	2200      	movs	r2, #0
 800d396:	6062      	str	r2, [r4, #4]
 800d398:	04d9      	lsls	r1, r3, #19
 800d39a:	6922      	ldr	r2, [r4, #16]
 800d39c:	6022      	str	r2, [r4, #0]
 800d39e:	d504      	bpl.n	800d3aa <__sflush_r+0x7e>
 800d3a0:	1c42      	adds	r2, r0, #1
 800d3a2:	d101      	bne.n	800d3a8 <__sflush_r+0x7c>
 800d3a4:	682b      	ldr	r3, [r5, #0]
 800d3a6:	b903      	cbnz	r3, 800d3aa <__sflush_r+0x7e>
 800d3a8:	6560      	str	r0, [r4, #84]	; 0x54
 800d3aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3ac:	602f      	str	r7, [r5, #0]
 800d3ae:	2900      	cmp	r1, #0
 800d3b0:	d0c9      	beq.n	800d346 <__sflush_r+0x1a>
 800d3b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3b6:	4299      	cmp	r1, r3
 800d3b8:	d002      	beq.n	800d3c0 <__sflush_r+0x94>
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	f7ff f9e2 	bl	800c784 <_free_r>
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	6360      	str	r0, [r4, #52]	; 0x34
 800d3c4:	e7c0      	b.n	800d348 <__sflush_r+0x1c>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	47b0      	blx	r6
 800d3cc:	1c41      	adds	r1, r0, #1
 800d3ce:	d1c8      	bne.n	800d362 <__sflush_r+0x36>
 800d3d0:	682b      	ldr	r3, [r5, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d0c5      	beq.n	800d362 <__sflush_r+0x36>
 800d3d6:	2b1d      	cmp	r3, #29
 800d3d8:	d001      	beq.n	800d3de <__sflush_r+0xb2>
 800d3da:	2b16      	cmp	r3, #22
 800d3dc:	d101      	bne.n	800d3e2 <__sflush_r+0xb6>
 800d3de:	602f      	str	r7, [r5, #0]
 800d3e0:	e7b1      	b.n	800d346 <__sflush_r+0x1a>
 800d3e2:	89a3      	ldrh	r3, [r4, #12]
 800d3e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3e8:	81a3      	strh	r3, [r4, #12]
 800d3ea:	e7ad      	b.n	800d348 <__sflush_r+0x1c>
 800d3ec:	690f      	ldr	r7, [r1, #16]
 800d3ee:	2f00      	cmp	r7, #0
 800d3f0:	d0a9      	beq.n	800d346 <__sflush_r+0x1a>
 800d3f2:	0793      	lsls	r3, r2, #30
 800d3f4:	680e      	ldr	r6, [r1, #0]
 800d3f6:	bf08      	it	eq
 800d3f8:	694b      	ldreq	r3, [r1, #20]
 800d3fa:	600f      	str	r7, [r1, #0]
 800d3fc:	bf18      	it	ne
 800d3fe:	2300      	movne	r3, #0
 800d400:	eba6 0807 	sub.w	r8, r6, r7
 800d404:	608b      	str	r3, [r1, #8]
 800d406:	f1b8 0f00 	cmp.w	r8, #0
 800d40a:	dd9c      	ble.n	800d346 <__sflush_r+0x1a>
 800d40c:	6a21      	ldr	r1, [r4, #32]
 800d40e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d410:	4643      	mov	r3, r8
 800d412:	463a      	mov	r2, r7
 800d414:	4628      	mov	r0, r5
 800d416:	47b0      	blx	r6
 800d418:	2800      	cmp	r0, #0
 800d41a:	dc06      	bgt.n	800d42a <__sflush_r+0xfe>
 800d41c:	89a3      	ldrh	r3, [r4, #12]
 800d41e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d422:	81a3      	strh	r3, [r4, #12]
 800d424:	f04f 30ff 	mov.w	r0, #4294967295
 800d428:	e78e      	b.n	800d348 <__sflush_r+0x1c>
 800d42a:	4407      	add	r7, r0
 800d42c:	eba8 0800 	sub.w	r8, r8, r0
 800d430:	e7e9      	b.n	800d406 <__sflush_r+0xda>
 800d432:	bf00      	nop
 800d434:	dfbffffe 	.word	0xdfbffffe

0800d438 <_fflush_r>:
 800d438:	b538      	push	{r3, r4, r5, lr}
 800d43a:	690b      	ldr	r3, [r1, #16]
 800d43c:	4605      	mov	r5, r0
 800d43e:	460c      	mov	r4, r1
 800d440:	b913      	cbnz	r3, 800d448 <_fflush_r+0x10>
 800d442:	2500      	movs	r5, #0
 800d444:	4628      	mov	r0, r5
 800d446:	bd38      	pop	{r3, r4, r5, pc}
 800d448:	b118      	cbz	r0, 800d452 <_fflush_r+0x1a>
 800d44a:	6a03      	ldr	r3, [r0, #32]
 800d44c:	b90b      	cbnz	r3, 800d452 <_fflush_r+0x1a>
 800d44e:	f7fe f891 	bl	800b574 <__sinit>
 800d452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d0f3      	beq.n	800d442 <_fflush_r+0xa>
 800d45a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d45c:	07d0      	lsls	r0, r2, #31
 800d45e:	d404      	bmi.n	800d46a <_fflush_r+0x32>
 800d460:	0599      	lsls	r1, r3, #22
 800d462:	d402      	bmi.n	800d46a <_fflush_r+0x32>
 800d464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d466:	f7fe fb00 	bl	800ba6a <__retarget_lock_acquire_recursive>
 800d46a:	4628      	mov	r0, r5
 800d46c:	4621      	mov	r1, r4
 800d46e:	f7ff ff5d 	bl	800d32c <__sflush_r>
 800d472:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d474:	07da      	lsls	r2, r3, #31
 800d476:	4605      	mov	r5, r0
 800d478:	d4e4      	bmi.n	800d444 <_fflush_r+0xc>
 800d47a:	89a3      	ldrh	r3, [r4, #12]
 800d47c:	059b      	lsls	r3, r3, #22
 800d47e:	d4e1      	bmi.n	800d444 <_fflush_r+0xc>
 800d480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d482:	f7fe faf3 	bl	800ba6c <__retarget_lock_release_recursive>
 800d486:	e7dd      	b.n	800d444 <_fflush_r+0xc>

0800d488 <__swhatbuf_r>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	460c      	mov	r4, r1
 800d48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d490:	2900      	cmp	r1, #0
 800d492:	b096      	sub	sp, #88	; 0x58
 800d494:	4615      	mov	r5, r2
 800d496:	461e      	mov	r6, r3
 800d498:	da0d      	bge.n	800d4b6 <__swhatbuf_r+0x2e>
 800d49a:	89a3      	ldrh	r3, [r4, #12]
 800d49c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d4a0:	f04f 0100 	mov.w	r1, #0
 800d4a4:	bf0c      	ite	eq
 800d4a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d4aa:	2340      	movne	r3, #64	; 0x40
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	6031      	str	r1, [r6, #0]
 800d4b0:	602b      	str	r3, [r5, #0]
 800d4b2:	b016      	add	sp, #88	; 0x58
 800d4b4:	bd70      	pop	{r4, r5, r6, pc}
 800d4b6:	466a      	mov	r2, sp
 800d4b8:	f000 f848 	bl	800d54c <_fstat_r>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	dbec      	blt.n	800d49a <__swhatbuf_r+0x12>
 800d4c0:	9901      	ldr	r1, [sp, #4]
 800d4c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d4c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d4ca:	4259      	negs	r1, r3
 800d4cc:	4159      	adcs	r1, r3
 800d4ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4d2:	e7eb      	b.n	800d4ac <__swhatbuf_r+0x24>

0800d4d4 <__smakebuf_r>:
 800d4d4:	898b      	ldrh	r3, [r1, #12]
 800d4d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4d8:	079d      	lsls	r5, r3, #30
 800d4da:	4606      	mov	r6, r0
 800d4dc:	460c      	mov	r4, r1
 800d4de:	d507      	bpl.n	800d4f0 <__smakebuf_r+0x1c>
 800d4e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d4e4:	6023      	str	r3, [r4, #0]
 800d4e6:	6123      	str	r3, [r4, #16]
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	6163      	str	r3, [r4, #20]
 800d4ec:	b002      	add	sp, #8
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}
 800d4f0:	ab01      	add	r3, sp, #4
 800d4f2:	466a      	mov	r2, sp
 800d4f4:	f7ff ffc8 	bl	800d488 <__swhatbuf_r>
 800d4f8:	9900      	ldr	r1, [sp, #0]
 800d4fa:	4605      	mov	r5, r0
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	f7ff f9b5 	bl	800c86c <_malloc_r>
 800d502:	b948      	cbnz	r0, 800d518 <__smakebuf_r+0x44>
 800d504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d508:	059a      	lsls	r2, r3, #22
 800d50a:	d4ef      	bmi.n	800d4ec <__smakebuf_r+0x18>
 800d50c:	f023 0303 	bic.w	r3, r3, #3
 800d510:	f043 0302 	orr.w	r3, r3, #2
 800d514:	81a3      	strh	r3, [r4, #12]
 800d516:	e7e3      	b.n	800d4e0 <__smakebuf_r+0xc>
 800d518:	89a3      	ldrh	r3, [r4, #12]
 800d51a:	6020      	str	r0, [r4, #0]
 800d51c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d520:	81a3      	strh	r3, [r4, #12]
 800d522:	9b00      	ldr	r3, [sp, #0]
 800d524:	6163      	str	r3, [r4, #20]
 800d526:	9b01      	ldr	r3, [sp, #4]
 800d528:	6120      	str	r0, [r4, #16]
 800d52a:	b15b      	cbz	r3, 800d544 <__smakebuf_r+0x70>
 800d52c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d530:	4630      	mov	r0, r6
 800d532:	f000 f81d 	bl	800d570 <_isatty_r>
 800d536:	b128      	cbz	r0, 800d544 <__smakebuf_r+0x70>
 800d538:	89a3      	ldrh	r3, [r4, #12]
 800d53a:	f023 0303 	bic.w	r3, r3, #3
 800d53e:	f043 0301 	orr.w	r3, r3, #1
 800d542:	81a3      	strh	r3, [r4, #12]
 800d544:	89a3      	ldrh	r3, [r4, #12]
 800d546:	431d      	orrs	r5, r3
 800d548:	81a5      	strh	r5, [r4, #12]
 800d54a:	e7cf      	b.n	800d4ec <__smakebuf_r+0x18>

0800d54c <_fstat_r>:
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	4d07      	ldr	r5, [pc, #28]	; (800d56c <_fstat_r+0x20>)
 800d550:	2300      	movs	r3, #0
 800d552:	4604      	mov	r4, r0
 800d554:	4608      	mov	r0, r1
 800d556:	4611      	mov	r1, r2
 800d558:	602b      	str	r3, [r5, #0]
 800d55a:	f7f6 fa74 	bl	8003a46 <_fstat>
 800d55e:	1c43      	adds	r3, r0, #1
 800d560:	d102      	bne.n	800d568 <_fstat_r+0x1c>
 800d562:	682b      	ldr	r3, [r5, #0]
 800d564:	b103      	cbz	r3, 800d568 <_fstat_r+0x1c>
 800d566:	6023      	str	r3, [r4, #0]
 800d568:	bd38      	pop	{r3, r4, r5, pc}
 800d56a:	bf00      	nop
 800d56c:	20019c88 	.word	0x20019c88

0800d570 <_isatty_r>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	4d06      	ldr	r5, [pc, #24]	; (800d58c <_isatty_r+0x1c>)
 800d574:	2300      	movs	r3, #0
 800d576:	4604      	mov	r4, r0
 800d578:	4608      	mov	r0, r1
 800d57a:	602b      	str	r3, [r5, #0]
 800d57c:	f7f6 fa73 	bl	8003a66 <_isatty>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	d102      	bne.n	800d58a <_isatty_r+0x1a>
 800d584:	682b      	ldr	r3, [r5, #0]
 800d586:	b103      	cbz	r3, 800d58a <_isatty_r+0x1a>
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	bd38      	pop	{r3, r4, r5, pc}
 800d58c:	20019c88 	.word	0x20019c88

0800d590 <_sbrk_r>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	4d06      	ldr	r5, [pc, #24]	; (800d5ac <_sbrk_r+0x1c>)
 800d594:	2300      	movs	r3, #0
 800d596:	4604      	mov	r4, r0
 800d598:	4608      	mov	r0, r1
 800d59a:	602b      	str	r3, [r5, #0]
 800d59c:	f7f6 fa7c 	bl	8003a98 <_sbrk>
 800d5a0:	1c43      	adds	r3, r0, #1
 800d5a2:	d102      	bne.n	800d5aa <_sbrk_r+0x1a>
 800d5a4:	682b      	ldr	r3, [r5, #0]
 800d5a6:	b103      	cbz	r3, 800d5aa <_sbrk_r+0x1a>
 800d5a8:	6023      	str	r3, [r4, #0]
 800d5aa:	bd38      	pop	{r3, r4, r5, pc}
 800d5ac:	20019c88 	.word	0x20019c88

0800d5b0 <__assert_func>:
 800d5b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5b2:	4614      	mov	r4, r2
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	4b09      	ldr	r3, [pc, #36]	; (800d5dc <__assert_func+0x2c>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4605      	mov	r5, r0
 800d5bc:	68d8      	ldr	r0, [r3, #12]
 800d5be:	b14c      	cbz	r4, 800d5d4 <__assert_func+0x24>
 800d5c0:	4b07      	ldr	r3, [pc, #28]	; (800d5e0 <__assert_func+0x30>)
 800d5c2:	9100      	str	r1, [sp, #0]
 800d5c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5c8:	4906      	ldr	r1, [pc, #24]	; (800d5e4 <__assert_func+0x34>)
 800d5ca:	462b      	mov	r3, r5
 800d5cc:	f000 f872 	bl	800d6b4 <fiprintf>
 800d5d0:	f000 f882 	bl	800d6d8 <abort>
 800d5d4:	4b04      	ldr	r3, [pc, #16]	; (800d5e8 <__assert_func+0x38>)
 800d5d6:	461c      	mov	r4, r3
 800d5d8:	e7f3      	b.n	800d5c2 <__assert_func+0x12>
 800d5da:	bf00      	nop
 800d5dc:	200008f8 	.word	0x200008f8
 800d5e0:	0800fba7 	.word	0x0800fba7
 800d5e4:	0800fbb4 	.word	0x0800fbb4
 800d5e8:	0800fbe2 	.word	0x0800fbe2

0800d5ec <_calloc_r>:
 800d5ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5ee:	fba1 2402 	umull	r2, r4, r1, r2
 800d5f2:	b94c      	cbnz	r4, 800d608 <_calloc_r+0x1c>
 800d5f4:	4611      	mov	r1, r2
 800d5f6:	9201      	str	r2, [sp, #4]
 800d5f8:	f7ff f938 	bl	800c86c <_malloc_r>
 800d5fc:	9a01      	ldr	r2, [sp, #4]
 800d5fe:	4605      	mov	r5, r0
 800d600:	b930      	cbnz	r0, 800d610 <_calloc_r+0x24>
 800d602:	4628      	mov	r0, r5
 800d604:	b003      	add	sp, #12
 800d606:	bd30      	pop	{r4, r5, pc}
 800d608:	220c      	movs	r2, #12
 800d60a:	6002      	str	r2, [r0, #0]
 800d60c:	2500      	movs	r5, #0
 800d60e:	e7f8      	b.n	800d602 <_calloc_r+0x16>
 800d610:	4621      	mov	r1, r4
 800d612:	f7fe f987 	bl	800b924 <memset>
 800d616:	e7f4      	b.n	800d602 <_calloc_r+0x16>

0800d618 <__ascii_mbtowc>:
 800d618:	b082      	sub	sp, #8
 800d61a:	b901      	cbnz	r1, 800d61e <__ascii_mbtowc+0x6>
 800d61c:	a901      	add	r1, sp, #4
 800d61e:	b142      	cbz	r2, 800d632 <__ascii_mbtowc+0x1a>
 800d620:	b14b      	cbz	r3, 800d636 <__ascii_mbtowc+0x1e>
 800d622:	7813      	ldrb	r3, [r2, #0]
 800d624:	600b      	str	r3, [r1, #0]
 800d626:	7812      	ldrb	r2, [r2, #0]
 800d628:	1e10      	subs	r0, r2, #0
 800d62a:	bf18      	it	ne
 800d62c:	2001      	movne	r0, #1
 800d62e:	b002      	add	sp, #8
 800d630:	4770      	bx	lr
 800d632:	4610      	mov	r0, r2
 800d634:	e7fb      	b.n	800d62e <__ascii_mbtowc+0x16>
 800d636:	f06f 0001 	mvn.w	r0, #1
 800d63a:	e7f8      	b.n	800d62e <__ascii_mbtowc+0x16>

0800d63c <_realloc_r>:
 800d63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d640:	4680      	mov	r8, r0
 800d642:	4614      	mov	r4, r2
 800d644:	460e      	mov	r6, r1
 800d646:	b921      	cbnz	r1, 800d652 <_realloc_r+0x16>
 800d648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d64c:	4611      	mov	r1, r2
 800d64e:	f7ff b90d 	b.w	800c86c <_malloc_r>
 800d652:	b92a      	cbnz	r2, 800d660 <_realloc_r+0x24>
 800d654:	f7ff f896 	bl	800c784 <_free_r>
 800d658:	4625      	mov	r5, r4
 800d65a:	4628      	mov	r0, r5
 800d65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d660:	f000 f841 	bl	800d6e6 <_malloc_usable_size_r>
 800d664:	4284      	cmp	r4, r0
 800d666:	4607      	mov	r7, r0
 800d668:	d802      	bhi.n	800d670 <_realloc_r+0x34>
 800d66a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d66e:	d812      	bhi.n	800d696 <_realloc_r+0x5a>
 800d670:	4621      	mov	r1, r4
 800d672:	4640      	mov	r0, r8
 800d674:	f7ff f8fa 	bl	800c86c <_malloc_r>
 800d678:	4605      	mov	r5, r0
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d0ed      	beq.n	800d65a <_realloc_r+0x1e>
 800d67e:	42bc      	cmp	r4, r7
 800d680:	4622      	mov	r2, r4
 800d682:	4631      	mov	r1, r6
 800d684:	bf28      	it	cs
 800d686:	463a      	movcs	r2, r7
 800d688:	f7fe f9f1 	bl	800ba6e <memcpy>
 800d68c:	4631      	mov	r1, r6
 800d68e:	4640      	mov	r0, r8
 800d690:	f7ff f878 	bl	800c784 <_free_r>
 800d694:	e7e1      	b.n	800d65a <_realloc_r+0x1e>
 800d696:	4635      	mov	r5, r6
 800d698:	e7df      	b.n	800d65a <_realloc_r+0x1e>

0800d69a <__ascii_wctomb>:
 800d69a:	b149      	cbz	r1, 800d6b0 <__ascii_wctomb+0x16>
 800d69c:	2aff      	cmp	r2, #255	; 0xff
 800d69e:	bf85      	ittet	hi
 800d6a0:	238a      	movhi	r3, #138	; 0x8a
 800d6a2:	6003      	strhi	r3, [r0, #0]
 800d6a4:	700a      	strbls	r2, [r1, #0]
 800d6a6:	f04f 30ff 	movhi.w	r0, #4294967295
 800d6aa:	bf98      	it	ls
 800d6ac:	2001      	movls	r0, #1
 800d6ae:	4770      	bx	lr
 800d6b0:	4608      	mov	r0, r1
 800d6b2:	4770      	bx	lr

0800d6b4 <fiprintf>:
 800d6b4:	b40e      	push	{r1, r2, r3}
 800d6b6:	b503      	push	{r0, r1, lr}
 800d6b8:	4601      	mov	r1, r0
 800d6ba:	ab03      	add	r3, sp, #12
 800d6bc:	4805      	ldr	r0, [pc, #20]	; (800d6d4 <fiprintf+0x20>)
 800d6be:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6c2:	6800      	ldr	r0, [r0, #0]
 800d6c4:	9301      	str	r3, [sp, #4]
 800d6c6:	f000 f83f 	bl	800d748 <_vfiprintf_r>
 800d6ca:	b002      	add	sp, #8
 800d6cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6d0:	b003      	add	sp, #12
 800d6d2:	4770      	bx	lr
 800d6d4:	200008f8 	.word	0x200008f8

0800d6d8 <abort>:
 800d6d8:	b508      	push	{r3, lr}
 800d6da:	2006      	movs	r0, #6
 800d6dc:	f000 f976 	bl	800d9cc <raise>
 800d6e0:	2001      	movs	r0, #1
 800d6e2:	f7f6 f961 	bl	80039a8 <_exit>

0800d6e6 <_malloc_usable_size_r>:
 800d6e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6ea:	1f18      	subs	r0, r3, #4
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	bfbc      	itt	lt
 800d6f0:	580b      	ldrlt	r3, [r1, r0]
 800d6f2:	18c0      	addlt	r0, r0, r3
 800d6f4:	4770      	bx	lr

0800d6f6 <__sfputc_r>:
 800d6f6:	6893      	ldr	r3, [r2, #8]
 800d6f8:	3b01      	subs	r3, #1
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	b410      	push	{r4}
 800d6fe:	6093      	str	r3, [r2, #8]
 800d700:	da08      	bge.n	800d714 <__sfputc_r+0x1e>
 800d702:	6994      	ldr	r4, [r2, #24]
 800d704:	42a3      	cmp	r3, r4
 800d706:	db01      	blt.n	800d70c <__sfputc_r+0x16>
 800d708:	290a      	cmp	r1, #10
 800d70a:	d103      	bne.n	800d714 <__sfputc_r+0x1e>
 800d70c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d710:	f7fe b859 	b.w	800b7c6 <__swbuf_r>
 800d714:	6813      	ldr	r3, [r2, #0]
 800d716:	1c58      	adds	r0, r3, #1
 800d718:	6010      	str	r0, [r2, #0]
 800d71a:	7019      	strb	r1, [r3, #0]
 800d71c:	4608      	mov	r0, r1
 800d71e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d722:	4770      	bx	lr

0800d724 <__sfputs_r>:
 800d724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d726:	4606      	mov	r6, r0
 800d728:	460f      	mov	r7, r1
 800d72a:	4614      	mov	r4, r2
 800d72c:	18d5      	adds	r5, r2, r3
 800d72e:	42ac      	cmp	r4, r5
 800d730:	d101      	bne.n	800d736 <__sfputs_r+0x12>
 800d732:	2000      	movs	r0, #0
 800d734:	e007      	b.n	800d746 <__sfputs_r+0x22>
 800d736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d73a:	463a      	mov	r2, r7
 800d73c:	4630      	mov	r0, r6
 800d73e:	f7ff ffda 	bl	800d6f6 <__sfputc_r>
 800d742:	1c43      	adds	r3, r0, #1
 800d744:	d1f3      	bne.n	800d72e <__sfputs_r+0xa>
 800d746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d748 <_vfiprintf_r>:
 800d748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d74c:	460d      	mov	r5, r1
 800d74e:	b09d      	sub	sp, #116	; 0x74
 800d750:	4614      	mov	r4, r2
 800d752:	4698      	mov	r8, r3
 800d754:	4606      	mov	r6, r0
 800d756:	b118      	cbz	r0, 800d760 <_vfiprintf_r+0x18>
 800d758:	6a03      	ldr	r3, [r0, #32]
 800d75a:	b90b      	cbnz	r3, 800d760 <_vfiprintf_r+0x18>
 800d75c:	f7fd ff0a 	bl	800b574 <__sinit>
 800d760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d762:	07d9      	lsls	r1, r3, #31
 800d764:	d405      	bmi.n	800d772 <_vfiprintf_r+0x2a>
 800d766:	89ab      	ldrh	r3, [r5, #12]
 800d768:	059a      	lsls	r2, r3, #22
 800d76a:	d402      	bmi.n	800d772 <_vfiprintf_r+0x2a>
 800d76c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d76e:	f7fe f97c 	bl	800ba6a <__retarget_lock_acquire_recursive>
 800d772:	89ab      	ldrh	r3, [r5, #12]
 800d774:	071b      	lsls	r3, r3, #28
 800d776:	d501      	bpl.n	800d77c <_vfiprintf_r+0x34>
 800d778:	692b      	ldr	r3, [r5, #16]
 800d77a:	b99b      	cbnz	r3, 800d7a4 <_vfiprintf_r+0x5c>
 800d77c:	4629      	mov	r1, r5
 800d77e:	4630      	mov	r0, r6
 800d780:	f7fe f85e 	bl	800b840 <__swsetup_r>
 800d784:	b170      	cbz	r0, 800d7a4 <_vfiprintf_r+0x5c>
 800d786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d788:	07dc      	lsls	r4, r3, #31
 800d78a:	d504      	bpl.n	800d796 <_vfiprintf_r+0x4e>
 800d78c:	f04f 30ff 	mov.w	r0, #4294967295
 800d790:	b01d      	add	sp, #116	; 0x74
 800d792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d796:	89ab      	ldrh	r3, [r5, #12]
 800d798:	0598      	lsls	r0, r3, #22
 800d79a:	d4f7      	bmi.n	800d78c <_vfiprintf_r+0x44>
 800d79c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d79e:	f7fe f965 	bl	800ba6c <__retarget_lock_release_recursive>
 800d7a2:	e7f3      	b.n	800d78c <_vfiprintf_r+0x44>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d7a8:	2320      	movs	r3, #32
 800d7aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7b2:	2330      	movs	r3, #48	; 0x30
 800d7b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d968 <_vfiprintf_r+0x220>
 800d7b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7bc:	f04f 0901 	mov.w	r9, #1
 800d7c0:	4623      	mov	r3, r4
 800d7c2:	469a      	mov	sl, r3
 800d7c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7c8:	b10a      	cbz	r2, 800d7ce <_vfiprintf_r+0x86>
 800d7ca:	2a25      	cmp	r2, #37	; 0x25
 800d7cc:	d1f9      	bne.n	800d7c2 <_vfiprintf_r+0x7a>
 800d7ce:	ebba 0b04 	subs.w	fp, sl, r4
 800d7d2:	d00b      	beq.n	800d7ec <_vfiprintf_r+0xa4>
 800d7d4:	465b      	mov	r3, fp
 800d7d6:	4622      	mov	r2, r4
 800d7d8:	4629      	mov	r1, r5
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f7ff ffa2 	bl	800d724 <__sfputs_r>
 800d7e0:	3001      	adds	r0, #1
 800d7e2:	f000 80a9 	beq.w	800d938 <_vfiprintf_r+0x1f0>
 800d7e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7e8:	445a      	add	r2, fp
 800d7ea:	9209      	str	r2, [sp, #36]	; 0x24
 800d7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f000 80a1 	beq.w	800d938 <_vfiprintf_r+0x1f0>
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d800:	f10a 0a01 	add.w	sl, sl, #1
 800d804:	9304      	str	r3, [sp, #16]
 800d806:	9307      	str	r3, [sp, #28]
 800d808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d80c:	931a      	str	r3, [sp, #104]	; 0x68
 800d80e:	4654      	mov	r4, sl
 800d810:	2205      	movs	r2, #5
 800d812:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d816:	4854      	ldr	r0, [pc, #336]	; (800d968 <_vfiprintf_r+0x220>)
 800d818:	f7f2 fcf2 	bl	8000200 <memchr>
 800d81c:	9a04      	ldr	r2, [sp, #16]
 800d81e:	b9d8      	cbnz	r0, 800d858 <_vfiprintf_r+0x110>
 800d820:	06d1      	lsls	r1, r2, #27
 800d822:	bf44      	itt	mi
 800d824:	2320      	movmi	r3, #32
 800d826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d82a:	0713      	lsls	r3, r2, #28
 800d82c:	bf44      	itt	mi
 800d82e:	232b      	movmi	r3, #43	; 0x2b
 800d830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d834:	f89a 3000 	ldrb.w	r3, [sl]
 800d838:	2b2a      	cmp	r3, #42	; 0x2a
 800d83a:	d015      	beq.n	800d868 <_vfiprintf_r+0x120>
 800d83c:	9a07      	ldr	r2, [sp, #28]
 800d83e:	4654      	mov	r4, sl
 800d840:	2000      	movs	r0, #0
 800d842:	f04f 0c0a 	mov.w	ip, #10
 800d846:	4621      	mov	r1, r4
 800d848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d84c:	3b30      	subs	r3, #48	; 0x30
 800d84e:	2b09      	cmp	r3, #9
 800d850:	d94d      	bls.n	800d8ee <_vfiprintf_r+0x1a6>
 800d852:	b1b0      	cbz	r0, 800d882 <_vfiprintf_r+0x13a>
 800d854:	9207      	str	r2, [sp, #28]
 800d856:	e014      	b.n	800d882 <_vfiprintf_r+0x13a>
 800d858:	eba0 0308 	sub.w	r3, r0, r8
 800d85c:	fa09 f303 	lsl.w	r3, r9, r3
 800d860:	4313      	orrs	r3, r2
 800d862:	9304      	str	r3, [sp, #16]
 800d864:	46a2      	mov	sl, r4
 800d866:	e7d2      	b.n	800d80e <_vfiprintf_r+0xc6>
 800d868:	9b03      	ldr	r3, [sp, #12]
 800d86a:	1d19      	adds	r1, r3, #4
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	9103      	str	r1, [sp, #12]
 800d870:	2b00      	cmp	r3, #0
 800d872:	bfbb      	ittet	lt
 800d874:	425b      	neglt	r3, r3
 800d876:	f042 0202 	orrlt.w	r2, r2, #2
 800d87a:	9307      	strge	r3, [sp, #28]
 800d87c:	9307      	strlt	r3, [sp, #28]
 800d87e:	bfb8      	it	lt
 800d880:	9204      	strlt	r2, [sp, #16]
 800d882:	7823      	ldrb	r3, [r4, #0]
 800d884:	2b2e      	cmp	r3, #46	; 0x2e
 800d886:	d10c      	bne.n	800d8a2 <_vfiprintf_r+0x15a>
 800d888:	7863      	ldrb	r3, [r4, #1]
 800d88a:	2b2a      	cmp	r3, #42	; 0x2a
 800d88c:	d134      	bne.n	800d8f8 <_vfiprintf_r+0x1b0>
 800d88e:	9b03      	ldr	r3, [sp, #12]
 800d890:	1d1a      	adds	r2, r3, #4
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	9203      	str	r2, [sp, #12]
 800d896:	2b00      	cmp	r3, #0
 800d898:	bfb8      	it	lt
 800d89a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d89e:	3402      	adds	r4, #2
 800d8a0:	9305      	str	r3, [sp, #20]
 800d8a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d978 <_vfiprintf_r+0x230>
 800d8a6:	7821      	ldrb	r1, [r4, #0]
 800d8a8:	2203      	movs	r2, #3
 800d8aa:	4650      	mov	r0, sl
 800d8ac:	f7f2 fca8 	bl	8000200 <memchr>
 800d8b0:	b138      	cbz	r0, 800d8c2 <_vfiprintf_r+0x17a>
 800d8b2:	9b04      	ldr	r3, [sp, #16]
 800d8b4:	eba0 000a 	sub.w	r0, r0, sl
 800d8b8:	2240      	movs	r2, #64	; 0x40
 800d8ba:	4082      	lsls	r2, r0
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	3401      	adds	r4, #1
 800d8c0:	9304      	str	r3, [sp, #16]
 800d8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8c6:	4829      	ldr	r0, [pc, #164]	; (800d96c <_vfiprintf_r+0x224>)
 800d8c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8cc:	2206      	movs	r2, #6
 800d8ce:	f7f2 fc97 	bl	8000200 <memchr>
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	d03f      	beq.n	800d956 <_vfiprintf_r+0x20e>
 800d8d6:	4b26      	ldr	r3, [pc, #152]	; (800d970 <_vfiprintf_r+0x228>)
 800d8d8:	bb1b      	cbnz	r3, 800d922 <_vfiprintf_r+0x1da>
 800d8da:	9b03      	ldr	r3, [sp, #12]
 800d8dc:	3307      	adds	r3, #7
 800d8de:	f023 0307 	bic.w	r3, r3, #7
 800d8e2:	3308      	adds	r3, #8
 800d8e4:	9303      	str	r3, [sp, #12]
 800d8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8e8:	443b      	add	r3, r7
 800d8ea:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ec:	e768      	b.n	800d7c0 <_vfiprintf_r+0x78>
 800d8ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8f2:	460c      	mov	r4, r1
 800d8f4:	2001      	movs	r0, #1
 800d8f6:	e7a6      	b.n	800d846 <_vfiprintf_r+0xfe>
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	3401      	adds	r4, #1
 800d8fc:	9305      	str	r3, [sp, #20]
 800d8fe:	4619      	mov	r1, r3
 800d900:	f04f 0c0a 	mov.w	ip, #10
 800d904:	4620      	mov	r0, r4
 800d906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d90a:	3a30      	subs	r2, #48	; 0x30
 800d90c:	2a09      	cmp	r2, #9
 800d90e:	d903      	bls.n	800d918 <_vfiprintf_r+0x1d0>
 800d910:	2b00      	cmp	r3, #0
 800d912:	d0c6      	beq.n	800d8a2 <_vfiprintf_r+0x15a>
 800d914:	9105      	str	r1, [sp, #20]
 800d916:	e7c4      	b.n	800d8a2 <_vfiprintf_r+0x15a>
 800d918:	fb0c 2101 	mla	r1, ip, r1, r2
 800d91c:	4604      	mov	r4, r0
 800d91e:	2301      	movs	r3, #1
 800d920:	e7f0      	b.n	800d904 <_vfiprintf_r+0x1bc>
 800d922:	ab03      	add	r3, sp, #12
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	462a      	mov	r2, r5
 800d928:	4b12      	ldr	r3, [pc, #72]	; (800d974 <_vfiprintf_r+0x22c>)
 800d92a:	a904      	add	r1, sp, #16
 800d92c:	4630      	mov	r0, r6
 800d92e:	f7fd f9cf 	bl	800acd0 <_printf_float>
 800d932:	4607      	mov	r7, r0
 800d934:	1c78      	adds	r0, r7, #1
 800d936:	d1d6      	bne.n	800d8e6 <_vfiprintf_r+0x19e>
 800d938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d93a:	07d9      	lsls	r1, r3, #31
 800d93c:	d405      	bmi.n	800d94a <_vfiprintf_r+0x202>
 800d93e:	89ab      	ldrh	r3, [r5, #12]
 800d940:	059a      	lsls	r2, r3, #22
 800d942:	d402      	bmi.n	800d94a <_vfiprintf_r+0x202>
 800d944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d946:	f7fe f891 	bl	800ba6c <__retarget_lock_release_recursive>
 800d94a:	89ab      	ldrh	r3, [r5, #12]
 800d94c:	065b      	lsls	r3, r3, #25
 800d94e:	f53f af1d 	bmi.w	800d78c <_vfiprintf_r+0x44>
 800d952:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d954:	e71c      	b.n	800d790 <_vfiprintf_r+0x48>
 800d956:	ab03      	add	r3, sp, #12
 800d958:	9300      	str	r3, [sp, #0]
 800d95a:	462a      	mov	r2, r5
 800d95c:	4b05      	ldr	r3, [pc, #20]	; (800d974 <_vfiprintf_r+0x22c>)
 800d95e:	a904      	add	r1, sp, #16
 800d960:	4630      	mov	r0, r6
 800d962:	f7fd fc59 	bl	800b218 <_printf_i>
 800d966:	e7e4      	b.n	800d932 <_vfiprintf_r+0x1ea>
 800d968:	0800fb8c 	.word	0x0800fb8c
 800d96c:	0800fb96 	.word	0x0800fb96
 800d970:	0800acd1 	.word	0x0800acd1
 800d974:	0800d725 	.word	0x0800d725
 800d978:	0800fb92 	.word	0x0800fb92

0800d97c <_raise_r>:
 800d97c:	291f      	cmp	r1, #31
 800d97e:	b538      	push	{r3, r4, r5, lr}
 800d980:	4604      	mov	r4, r0
 800d982:	460d      	mov	r5, r1
 800d984:	d904      	bls.n	800d990 <_raise_r+0x14>
 800d986:	2316      	movs	r3, #22
 800d988:	6003      	str	r3, [r0, #0]
 800d98a:	f04f 30ff 	mov.w	r0, #4294967295
 800d98e:	bd38      	pop	{r3, r4, r5, pc}
 800d990:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d992:	b112      	cbz	r2, 800d99a <_raise_r+0x1e>
 800d994:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d998:	b94b      	cbnz	r3, 800d9ae <_raise_r+0x32>
 800d99a:	4620      	mov	r0, r4
 800d99c:	f000 f830 	bl	800da00 <_getpid_r>
 800d9a0:	462a      	mov	r2, r5
 800d9a2:	4601      	mov	r1, r0
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9aa:	f000 b817 	b.w	800d9dc <_kill_r>
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d00a      	beq.n	800d9c8 <_raise_r+0x4c>
 800d9b2:	1c59      	adds	r1, r3, #1
 800d9b4:	d103      	bne.n	800d9be <_raise_r+0x42>
 800d9b6:	2316      	movs	r3, #22
 800d9b8:	6003      	str	r3, [r0, #0]
 800d9ba:	2001      	movs	r0, #1
 800d9bc:	e7e7      	b.n	800d98e <_raise_r+0x12>
 800d9be:	2400      	movs	r4, #0
 800d9c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	4798      	blx	r3
 800d9c8:	2000      	movs	r0, #0
 800d9ca:	e7e0      	b.n	800d98e <_raise_r+0x12>

0800d9cc <raise>:
 800d9cc:	4b02      	ldr	r3, [pc, #8]	; (800d9d8 <raise+0xc>)
 800d9ce:	4601      	mov	r1, r0
 800d9d0:	6818      	ldr	r0, [r3, #0]
 800d9d2:	f7ff bfd3 	b.w	800d97c <_raise_r>
 800d9d6:	bf00      	nop
 800d9d8:	200008f8 	.word	0x200008f8

0800d9dc <_kill_r>:
 800d9dc:	b538      	push	{r3, r4, r5, lr}
 800d9de:	4d07      	ldr	r5, [pc, #28]	; (800d9fc <_kill_r+0x20>)
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	4608      	mov	r0, r1
 800d9e6:	4611      	mov	r1, r2
 800d9e8:	602b      	str	r3, [r5, #0]
 800d9ea:	f7f5 ffcd 	bl	8003988 <_kill>
 800d9ee:	1c43      	adds	r3, r0, #1
 800d9f0:	d102      	bne.n	800d9f8 <_kill_r+0x1c>
 800d9f2:	682b      	ldr	r3, [r5, #0]
 800d9f4:	b103      	cbz	r3, 800d9f8 <_kill_r+0x1c>
 800d9f6:	6023      	str	r3, [r4, #0]
 800d9f8:	bd38      	pop	{r3, r4, r5, pc}
 800d9fa:	bf00      	nop
 800d9fc:	20019c88 	.word	0x20019c88

0800da00 <_getpid_r>:
 800da00:	f7f5 bfba 	b.w	8003978 <_getpid>

0800da04 <_init>:
 800da04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da06:	bf00      	nop
 800da08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da0a:	bc08      	pop	{r3}
 800da0c:	469e      	mov	lr, r3
 800da0e:	4770      	bx	lr

0800da10 <_fini>:
 800da10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da12:	bf00      	nop
 800da14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da16:	bc08      	pop	{r3}
 800da18:	469e      	mov	lr, r3
 800da1a:	4770      	bx	lr

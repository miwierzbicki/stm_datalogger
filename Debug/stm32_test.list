
stm32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000330c  0800dc28  0800dc28  0001dc28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f34  08010f34  00030880  2**0
                  CONTENTS
  4 .ARM          00000008  08010f34  08010f34  00020f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f3c  08010f3c  00030880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f3c  08010f3c  00020f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f40  08010f40  00020f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000880  20000000  08010f44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000119c  20000880  080117c4  00030880  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a1c  080117c4  00031a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030880  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000308b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c16a  00000000  00000000  000308f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042b6  00000000  00000000  0004ca5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a20  00000000  00000000  00050d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001446  00000000  00000000  00052738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e285  00000000  00000000  00053b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024715  00000000  00000000  00071e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8e77  00000000  00000000  00096518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007eb4  00000000  00000000  0013f390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00147244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000880 	.word	0x20000880
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dc10 	.word	0x0800dc10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000884 	.word	0x20000884
 80001dc:	0800dc10 	.word	0x0800dc10

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <ds18_init>:

TIM_HandleTypeDef *htim10_new;



void ds18_init(TIM_HandleTypeDef *htim10) {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	htim10_new=htim10;
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <ds18_init+0x1c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2000089c 	.word	0x2000089c

08000f14 <delay_us>:

	return temp = temp/16.0f;
}

void delay_us(uint32_t us)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim10_new, 0);
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <delay_us+0x30>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
	  while (__HAL_TIM_GET_COUNTER(htim10_new) < us) {}
 8000f26:	bf00      	nop
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <delay_us+0x30>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d8f8      	bhi.n	8000f28 <delay_us+0x14>
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	2000089c 	.word	0x2000089c

08000f48 <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2102      	movs	r1, #2
 8000f52:	4811      	ldr	r0, [pc, #68]	; (8000f98 <wire_reset+0x50>)
 8000f54:	f003 fc94 	bl	8004880 <HAL_GPIO_WritePin>
  delay_us(480);
 8000f58:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000f5c:	f7ff ffda 	bl	8000f14 <delay_us>
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2102      	movs	r1, #2
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <wire_reset+0x50>)
 8000f66:	f003 fc8b 	bl	8004880 <HAL_GPIO_WritePin>
  delay_us(70);
 8000f6a:	2046      	movs	r0, #70	; 0x46
 8000f6c:	f7ff ffd2 	bl	8000f14 <delay_us>
  rc = HAL_GPIO_ReadPin(DSO_DATA_GPIO_Port, DSO_DATA_Pin);
 8000f70:	2102      	movs	r1, #2
 8000f72:	4809      	ldr	r0, [pc, #36]	; (8000f98 <wire_reset+0x50>)
 8000f74:	f003 fc6c 	bl	8004850 <HAL_GPIO_ReadPin>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	607b      	str	r3, [r7, #4]
  delay_us(410);
 8000f7c:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000f80:	f7ff ffc8 	bl	8000f14 <delay_us>

  if (rc == 0)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <wire_reset+0x46>
    return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e000      	b.n	8000f90 <wire_reset+0x48>
  else
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40020400 	.word	0x40020400

08000f9c <encSetRange>:


TIM_HandleTypeDef *htim1_new;


void encSetRange(uint16_t min, uint16_t max) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	80fb      	strh	r3, [r7, #6]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(htim1_new, max);
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <encSetRange+0x30>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	88ba      	ldrh	r2, [r7, #4]
 8000fb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <encSetRange+0x30>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	88ba      	ldrh	r2, [r7, #4]
 8000fbc:	60da      	str	r2, [r3, #12]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200008a0 	.word	0x200008a0

08000fd0 <encSetPos>:

void encSetPos(uint16_t encPos) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim1_new, encPos);
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <encSetPos+0x20>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	88fa      	ldrh	r2, [r7, #6]
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	200008a0 	.word	0x200008a0

08000ff4 <encoderGet>:

uint32_t encoderGet(void) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(htim1_new);
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <encoderGet+0x18>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200008a0 	.word	0x200008a0

08001010 <encoderInit>:

void encoderInit(TIM_HandleTypeDef *htim1) {
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	htim1_new=htim1;
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <encoderInit+0x1c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200008a0 	.word	0x200008a0

08001030 <entrySelected>:

bool entrySelected(int16_t id) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
    if (encoderGet() == id) {
 800103a:	f7ff ffdb 	bl	8000ff4 <encoderGet>
 800103e:	4602      	mov	r2, r0
 8001040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001044:	429a      	cmp	r2, r3
 8001046:	d101      	bne.n	800104c <entrySelected+0x1c>
        return true;
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <entrySelected+0x1e>
    }
    return false;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <entryClicked>:

bool entryClicked(int16_t id) {
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	80fb      	strh	r3, [r7, #6]
    if (encoderGet() == id && isClicked()) {
 8001060:	f7ff ffc8 	bl	8000ff4 <encoderGet>
 8001064:	4602      	mov	r2, r0
 8001066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106a:	429a      	cmp	r2, r3
 800106c:	d106      	bne.n	800107c <entryClicked+0x26>
 800106e:	f000 f8b9 	bl	80011e4 <isClicked>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <entryClicked+0x26>
        return true;
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <entryClicked+0x28>
    }
    return false;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <send_uart>:
int8_t ch2przerwanie=0;
int8_t ch3przerwanie=0;
int8_t ch4przerwanie=0;


void send_uart(char *string) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff f8f5 	bl	8000280 <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart6, (uint8_t *)string, len, HAL_MAX_DELAY);
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	b29a      	uxth	r2, r3
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <send_uart+0x2c>)
 80010a6:	f006 ff00 	bl	8007eaa <HAL_UART_Transmit>
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000b2c 	.word	0x20000b2c

080010b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d110      	bne.n	80010ec <HAL_TIM_PeriodElapsedCallback+0x34>
		HAL_TIM_Base_Stop_IT(htim);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f005 fdea 	bl	8006ca4 <HAL_TIM_Base_Stop_IT>
		if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)==GPIO_PIN_RESET) {
 80010d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d4:	4808      	ldr	r0, [pc, #32]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010d6:	f003 fbbb 	bl	8004850 <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d105      	bne.n	80010ec <HAL_TIM_PeriodElapsedCallback+0x34>
			sendToUart=1;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
			send_uart("dupa\n\r");
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80010e8:	f7ff ffce 	bl	8001088 <send_uart>
			}
		}
	}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40014800 	.word	0x40014800
 80010f8:	40020400 	.word	0x40020400
 80010fc:	20000b70 	.word	0x20000b70
 8001100:	0800dc28 	.word	0x0800dc28

08001104 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t pulse;
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7f1b      	ldrb	r3, [r3, #28]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d10e      	bne.n	8001132 <HAL_TIM_OC_DelayElapsedCallback+0x2e>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001114:	2100      	movs	r1, #0
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f006 faca 	bl	80076b0 <HAL_TIM_ReadCapturedValue>
 800111c:	60f8      	str	r0, [r7, #12]
    ch1przerwanie=1;
 800111e:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (pulse + 6659)); //to wartosc pulse dla kazdego timera
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 800112e:	3303      	adds	r3, #3
 8001130:	6353      	str	r3, [r2, #52]	; 0x34
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7f1b      	ldrb	r3, [r3, #28]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d10e      	bne.n	8001158 <HAL_TIM_OC_DelayElapsedCallback+0x54>
  pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800113a:	2104      	movs	r1, #4
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f006 fab7 	bl	80076b0 <HAL_TIM_ReadCapturedValue>
 8001142:	60f8      	str	r0, [r7, #12]
  ch2przerwanie=1;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
  /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (pulse + 13500));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f503 5352 	add.w	r3, r3, #13440	; 0x3480
 8001154:	333c      	adds	r3, #60	; 0x3c
 8001156:	6393      	str	r3, [r2, #56]	; 0x38
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7f1b      	ldrb	r3, [r3, #28]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d10e      	bne.n	800117e <HAL_TIM_OC_DelayElapsedCallback+0x7a>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001160:	2108      	movs	r1, #8
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f006 faa4 	bl	80076b0 <HAL_TIM_ReadCapturedValue>
 8001168:	60f8      	str	r0, [r7, #12]
    ch3przerwanie=1;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, (pulse + 36000));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 800117a:	33a0      	adds	r3, #160	; 0xa0
 800117c:	63d3      	str	r3, [r2, #60]	; 0x3c
    }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7f1b      	ldrb	r3, [r3, #28]
 8001182:	2b08      	cmp	r3, #8
 8001184:	d10f      	bne.n	80011a6 <HAL_TIM_OC_DelayElapsedCallback+0xa2>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001186:	210c      	movs	r1, #12
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f006 fa91 	bl	80076b0 <HAL_TIM_ReadCapturedValue>
 800118e:	60f8      	str	r0, [r7, #12]
    ch4przerwanie=1;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, (pulse + 67000));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 80011a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000b71 	.word	0x20000b71
 80011b4:	20000b72 	.word	0x20000b72
 80011b8:	20000b73 	.word	0x20000b73
 80011bc:	20000b74 	.word	0x20000b74

080011c0 <HAL_GPIO_EXTI_Callback>:
//} //sprawdzic czy nie mozna usunac tego

char charAr[50];


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	80fb      	strh	r3, [r7, #6]
	  if(GPIO_Pin == ENC_BTN_Pin) {
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011d0:	d102      	bne.n	80011d8 <HAL_GPIO_EXTI_Callback+0x18>
		  HAL_TIM_Base_Start_IT(&htim11);
 80011d2:	4803      	ldr	r0, [pc, #12]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x20>)
 80011d4:	f005 fd04 	bl	8006be0 <HAL_TIM_Base_Start_IT>
	  }
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000ae4 	.word	0x20000ae4

080011e4 <isClicked>:


bool isClicked(void) {
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
	if(sendToUart==1) {
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <isClicked+0x24>)
 80011ea:	f993 3000 	ldrsb.w	r3, [r3]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d104      	bne.n	80011fc <isClicked+0x18>
		sendToUart=0;
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <isClicked+0x24>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
		return true;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <isClicked+0x1a>
	}
	else {
		return false;
 80011fc:	2300      	movs	r3, #0
	}
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	20000b70 	.word	0x20000b70

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001212:	f002 fd7f 	bl	8003d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001216:	f000 f89d 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121a:	f000 fbb9 	bl	8001990 <MX_GPIO_Init>
  MX_ADC1_Init();
 800121e:	f000 f903 	bl	8001428 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001222:	f000 f961 	bl	80014e8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001226:	f000 f98d 	bl	8001544 <MX_I2C2_Init>
  MX_SPI1_Init();
 800122a:	f000 fa13 	bl	8001654 <MX_SPI1_Init>
  MX_TIM1_Init();
 800122e:	f000 fa47 	bl	80016c0 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8001232:	f000 fb83 	bl	800193c <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001236:	f000 fb39 	bl	80018ac <MX_TIM10_Init>
  MX_TIM11_Init();
 800123a:	f000 fb5b 	bl	80018f4 <MX_TIM11_Init>
  MX_TIM2_Init();
 800123e:	f000 fa95 	bl	800176c <MX_TIM2_Init>
  MX_FATFS_Init();
 8001242:	f007 f9a7 	bl	8008594 <MX_FATFS_Init>
  MX_RTC_Init();
 8001246:	f000 f9ab 	bl	80015a0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  encoderInit(&htim1);
 800124a:	4839      	ldr	r0, [pc, #228]	; (8001330 <main+0x124>)
 800124c:	f7ff fee0 	bl	8001010 <encoderInit>
  ds18_init(&htim10);
 8001250:	4838      	ldr	r0, [pc, #224]	; (8001334 <main+0x128>)
 8001252:	f7ff fe4f 	bl	8000ef4 <ds18_init>
  huart_ds_init(&huart6);
 8001256:	4838      	ldr	r0, [pc, #224]	; (8001338 <main+0x12c>)
 8001258:	f000 fc4c 	bl	8001af4 <huart_ds_init>
  sendRtcHandler(&hrtc);
 800125c:	4837      	ldr	r0, [pc, #220]	; (800133c <main+0x130>)
 800125e:	f000 fc59 	bl	8001b14 <sendRtcHandler>
  HAL_TIM_Base_Start(&htim10);
 8001262:	4834      	ldr	r0, [pc, #208]	; (8001334 <main+0x128>)
 8001264:	f005 fc62 	bl	8006b2c <HAL_TIM_Base_Start>
  displayInit();
 8001268:	f001 f852 	bl	8002310 <displayInit>
  wire_reset();
 800126c:	f7ff fe6c 	bl	8000f48 <wire_reset>
  buff();
 8001270:	f001 f8d8 	bl	8002424 <buff>
  sd_init();
 8001274:	f001 f926 	bl	80024c4 <sd_init>
  sd_totalspace();
 8001278:	f001 f984 	bl	8002584 <sd_totalspace>
  sd_freespace();
 800127c:	f001 f94c 	bl	8002518 <sd_freespace>
  sd_writefile();
 8001280:	f001 f9f4 	bl	800266c <sd_writefile>
  sd_closefile();
 8001284:	f001 fa16 	bl	80026b4 <sd_closefile>
  sd_readfile();
 8001288:	f001 f9b4 	bl	80025f4 <sd_readfile>
  sd_closefile();
 800128c:	f001 fa12 	bl	80026b4 <sd_closefile>
  sd_demount();
 8001290:	f001 f90c 	bl	80024ac <sd_demount>
  bool debug=true;
 8001294:	2301      	movs	r3, #1
 8001296:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001298:	213c      	movs	r1, #60	; 0x3c
 800129a:	4825      	ldr	r0, [pc, #148]	; (8001330 <main+0x124>)
 800129c:	f005 ff2e 	bl	80070fc <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80012a0:	2100      	movs	r1, #0
 80012a2:	4827      	ldr	r0, [pc, #156]	; (8001340 <main+0x134>)
 80012a4:	f005 fd86 	bl	8006db4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 80012a8:	2104      	movs	r1, #4
 80012aa:	4825      	ldr	r0, [pc, #148]	; (8001340 <main+0x134>)
 80012ac:	f005 fd82 	bl	8006db4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 80012b0:	2108      	movs	r1, #8
 80012b2:	4823      	ldr	r0, [pc, #140]	; (8001340 <main+0x134>)
 80012b4:	f005 fd7e 	bl	8006db4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80012b8:	210c      	movs	r1, #12
 80012ba:	4821      	ldr	r0, [pc, #132]	; (8001340 <main+0x134>)
 80012bc:	f005 fd7a 	bl	8006db4 <HAL_TIM_OC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(debug) {
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d031      	beq.n	800132a <main+0x11e>
		  bool needToWrite=false;
 80012c6:	2300      	movs	r3, #0
 80012c8:	71bb      	strb	r3, [r7, #6]
		  if(ch1przerwanie==1) {
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <main+0x138>)
 80012cc:	f993 3000 	ldrsb.w	r3, [r3]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d106      	bne.n	80012e2 <main+0xd6>
			  //HAL_UART_Transmit(&huart6, (uint8_t *)"ch1 sie wykonal \n\r", strlen("ch1 sie wykonal \n\r"), HAL_MAX_DELAY);
			  ch1Enable();
 80012d4:	f000 fe9e 	bl	8002014 <ch1Enable>
			  ch1przerwanie=0;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <main+0x138>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
			  needToWrite=true;
 80012de:	2301      	movs	r3, #1
 80012e0:	71bb      	strb	r3, [r7, #6]
		  }
		  if(ch2przerwanie==1) { //castowanie na uint8_t bo funkcja oczekuje wlasnie takiego typu
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <main+0x13c>)
 80012e4:	f993 3000 	ldrsb.w	r3, [r3]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d106      	bne.n	80012fa <main+0xee>
			  //HAL_UART_Transmit(&huart6, (uint8_t *)"ch2 sie wykonal \n\r", strlen("ch2 sie wykonal \n\r"), HAL_MAX_DELAY);
			  ch2Enable();
 80012ec:	f000 fec0 	bl	8002070 <ch2Enable>
			  ch2przerwanie=0;
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <main+0x13c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
			  needToWrite=true;
 80012f6:	2301      	movs	r3, #1
 80012f8:	71bb      	strb	r3, [r7, #6]
		  }
		  if(ch3przerwanie==1) {
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <main+0x140>)
 80012fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d106      	bne.n	8001312 <main+0x106>
			  //HAL_UART_Transmit(&huart6, (uint8_t *)"ch3 sie wykonal \n\r", strlen("ch3 sie wykonal \n\r"), HAL_MAX_DELAY);
			  ch3Enable();
 8001304:	f000 fee2 	bl	80020cc <ch3Enable>
			  ch3przerwanie=0;
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <main+0x140>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
			  needToWrite=true;
 800130e:	2301      	movs	r3, #1
 8001310:	71bb      	strb	r3, [r7, #6]
			  }
		  if(ch4przerwanie==1) {
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <main+0x144>)
 8001314:	f993 3000 	ldrsb.w	r3, [r3]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d106      	bne.n	800132a <main+0x11e>
			  //HAL_UART_Transmit(&huart6, (uint8_t *)"ch4 sie wykonal \n\r", strlen("ch4 sie wykonal \n\r"), HAL_MAX_DELAY);
			  ch4Enable();
 800131c:	f000 ff04 	bl	8002128 <ch4Enable>
			  ch4przerwanie=0;
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <main+0x144>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
			  needToWrite=true;
 8001326:	2301      	movs	r3, #1
 8001328:	71bb      	strb	r3, [r7, #6]
//	  HAL_UART_Transmit(&huart6, (uint8_t *)charAr, strlen(charAr), HAL_MAX_DELAY);
//	  prev_value=value;
//	  }


	displayMenu();
 800132a:	f000 ffc9 	bl	80022c0 <displayMenu>
	  if(debug) {
 800132e:	e7c7      	b.n	80012c0 <main+0xb4>
 8001330:	20000a0c 	.word	0x20000a0c
 8001334:	20000a9c 	.word	0x20000a9c
 8001338:	20000b2c 	.word	0x20000b2c
 800133c:	20000994 	.word	0x20000994
 8001340:	20000a54 	.word	0x20000a54
 8001344:	20000b71 	.word	0x20000b71
 8001348:	20000b72 	.word	0x20000b72
 800134c:	20000b73 	.word	0x20000b73
 8001350:	20000b74 	.word	0x20000b74

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	; 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	2230      	movs	r2, #48	; 0x30
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f00a fb73 	bl	800ba4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <SystemClock_Config+0xcc>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	4a27      	ldr	r2, [pc, #156]	; (8001420 <SystemClock_Config+0xcc>)
 8001382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001386:	6413      	str	r3, [r2, #64]	; 0x40
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <SystemClock_Config+0xcc>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <SystemClock_Config+0xd0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a21      	ldr	r2, [pc, #132]	; (8001424 <SystemClock_Config+0xd0>)
 800139e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <SystemClock_Config+0xd0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80013b0:	2306      	movs	r3, #6
 80013b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b8:	2301      	movs	r3, #1
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013bc:	2310      	movs	r3, #16
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c0:	2302      	movs	r3, #2
 80013c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013c8:	2308      	movs	r3, #8
 80013ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80013cc:	2350      	movs	r3, #80	; 0x50
 80013ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013d4:	2304      	movs	r3, #4
 80013d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fedd 	bl	800519c <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013e8:	f000 fb7e 	bl	8001ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2302      	movs	r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	2102      	movs	r1, #2
 8001408:	4618      	mov	r0, r3
 800140a:	f004 f93f 	bl	800568c <HAL_RCC_ClockConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001414:	f000 fb68 	bl	8001ae8 <Error_Handler>
  }
}
 8001418:	bf00      	nop
 800141a:	3750      	adds	r7, #80	; 0x50
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40007000 	.word	0x40007000

08001428 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800142e:	463b      	mov	r3, r7
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800143a:	4b28      	ldr	r3, [pc, #160]	; (80014dc <MX_ADC1_Init+0xb4>)
 800143c:	4a28      	ldr	r2, [pc, #160]	; (80014e0 <MX_ADC1_Init+0xb8>)
 800143e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001440:	4b26      	ldr	r3, [pc, #152]	; (80014dc <MX_ADC1_Init+0xb4>)
 8001442:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001446:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001448:	4b24      	ldr	r3, [pc, #144]	; (80014dc <MX_ADC1_Init+0xb4>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <MX_ADC1_Init+0xb4>)
 8001450:	2201      	movs	r2, #1
 8001452:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001454:	4b21      	ldr	r3, [pc, #132]	; (80014dc <MX_ADC1_Init+0xb4>)
 8001456:	2200      	movs	r2, #0
 8001458:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <MX_ADC1_Init+0xb4>)
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001462:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <MX_ADC1_Init+0xb4>)
 8001464:	2200      	movs	r2, #0
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <MX_ADC1_Init+0xb4>)
 800146a:	4a1e      	ldr	r2, [pc, #120]	; (80014e4 <MX_ADC1_Init+0xbc>)
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <MX_ADC1_Init+0xb4>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <MX_ADC1_Init+0xb4>)
 8001476:	2202      	movs	r2, #2
 8001478:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <MX_ADC1_Init+0xb4>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_ADC1_Init+0xb4>)
 8001484:	2201      	movs	r2, #1
 8001486:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <MX_ADC1_Init+0xb4>)
 800148a:	f002 fcd9 	bl	8003e40 <HAL_ADC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001494:	f000 fb28 	bl	8001ae8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001498:	2300      	movs	r3, #0
 800149a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800149c:	2301      	movs	r3, #1
 800149e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80014a0:	2303      	movs	r3, #3
 80014a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <MX_ADC1_Init+0xb4>)
 80014aa:	f002 fd0d 	bl	8003ec8 <HAL_ADC_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014b4:	f000 fb18 	bl	8001ae8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80014bc:	2302      	movs	r3, #2
 80014be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_ADC1_Init+0xb4>)
 80014c6:	f002 fcff 	bl	8003ec8 <HAL_ADC_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80014d0:	f000 fb0a 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200008a4 	.word	0x200008a4
 80014e0:	40012000 	.word	0x40012000
 80014e4:	0f000001 	.word	0x0f000001

080014e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_I2C1_Init+0x50>)
 80014ee:	4a13      	ldr	r2, [pc, #76]	; (800153c <MX_I2C1_Init+0x54>)
 80014f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_I2C1_Init+0x50>)
 80014f4:	4a12      	ldr	r2, [pc, #72]	; (8001540 <MX_I2C1_Init+0x58>)
 80014f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_I2C1_Init+0x50>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_I2C1_Init+0x50>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_I2C1_Init+0x50>)
 8001506:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800150a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <MX_I2C1_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_I2C1_Init+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <MX_I2C1_Init+0x50>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_I2C1_Init+0x50>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <MX_I2C1_Init+0x50>)
 8001526:	f003 f9dd 	bl	80048e4 <HAL_I2C_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001530:	f000 fada 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200008ec 	.word	0x200008ec
 800153c:	40005400 	.word	0x40005400
 8001540:	000186a0 	.word	0x000186a0

08001544 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_I2C2_Init+0x50>)
 800154a:	4a13      	ldr	r2, [pc, #76]	; (8001598 <MX_I2C2_Init+0x54>)
 800154c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_I2C2_Init+0x50>)
 8001550:	4a12      	ldr	r2, [pc, #72]	; (800159c <MX_I2C2_Init+0x58>)
 8001552:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <MX_I2C2_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_I2C2_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_I2C2_Init+0x50>)
 8001562:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001566:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <MX_I2C2_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_I2C2_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MX_I2C2_Init+0x50>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_I2C2_Init+0x50>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <MX_I2C2_Init+0x50>)
 8001582:	f003 f9af 	bl	80048e4 <HAL_I2C_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800158c:	f000 faac 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000940 	.word	0x20000940
 8001598:	40005800 	.word	0x40005800
 800159c:	000186a0 	.word	0x000186a0

080015a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015b4:	2300      	movs	r3, #0
 80015b6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <MX_RTC_Init+0xac>)
 80015ba:	4a25      	ldr	r2, [pc, #148]	; (8001650 <MX_RTC_Init+0xb0>)
 80015bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <MX_RTC_Init+0xac>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <MX_RTC_Init+0xac>)
 80015c6:	227f      	movs	r2, #127	; 0x7f
 80015c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <MX_RTC_Init+0xac>)
 80015cc:	22ff      	movs	r2, #255	; 0xff
 80015ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <MX_RTC_Init+0xac>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_RTC_Init+0xac>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_RTC_Init+0xac>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015e2:	481a      	ldr	r0, [pc, #104]	; (800164c <MX_RTC_Init+0xac>)
 80015e4:	f004 fb22 	bl	8005c2c <HAL_RTC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80015ee:	f000 fa7b 	bl	8001ae8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80015f2:	2301      	movs	r3, #1
 80015f4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2201      	movs	r2, #1
 800160a:	4619      	mov	r1, r3
 800160c:	480f      	ldr	r0, [pc, #60]	; (800164c <MX_RTC_Init+0xac>)
 800160e:	f004 fb83 	bl	8005d18 <HAL_RTC_SetTime>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001618:	f000 fa66 	bl	8001ae8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800161c:	2303      	movs	r3, #3
 800161e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8001620:	2312      	movs	r3, #18
 8001622:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 8001624:	2306      	movs	r3, #6
 8001626:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001628:	2323      	movs	r3, #35	; 0x23
 800162a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800162c:	463b      	mov	r3, r7
 800162e:	2201      	movs	r2, #1
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <MX_RTC_Init+0xac>)
 8001634:	f004 fc68 	bl	8005f08 <HAL_RTC_SetDate>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800163e:	f000 fa53 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000994 	.word	0x20000994
 8001650:	40002800 	.word	0x40002800

08001654 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_SPI1_Init+0x64>)
 800165a:	4a18      	ldr	r2, [pc, #96]	; (80016bc <MX_SPI1_Init+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001660:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001664:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_SPI1_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_SPI1_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001684:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001688:	2220      	movs	r2, #32
 800168a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_SPI1_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_SPI1_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_SPI1_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_SPI1_Init+0x64>)
 80016a0:	220a      	movs	r2, #10
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_SPI1_Init+0x64>)
 80016a6:	f004 fdbf 	bl	8006228 <HAL_SPI_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016b0:	f000 fa1a 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200009b4 	.word	0x200009b4
 80016bc:	40013000 	.word	0x40013000

080016c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08c      	sub	sp, #48	; 0x30
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	2224      	movs	r2, #36	; 0x24
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f00a f9bd 	bl	800ba4e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016dc:	4b21      	ldr	r3, [pc, #132]	; (8001764 <MX_TIM1_Init+0xa4>)
 80016de:	4a22      	ldr	r2, [pc, #136]	; (8001768 <MX_TIM1_Init+0xa8>)
 80016e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <MX_TIM1_Init+0xa4>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <MX_TIM1_Init+0xa4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40;
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_TIM1_Init+0xa4>)
 80016f0:	2228      	movs	r2, #40	; 0x28
 80016f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_TIM1_Init+0xa4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_TIM1_Init+0xa4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <MX_TIM1_Init+0xa4>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001706:	2301      	movs	r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800170e:	2301      	movs	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001716:	230f      	movs	r3, #15
 8001718:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800171e:	2301      	movs	r3, #1
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001726:	230f      	movs	r3, #15
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	4619      	mov	r1, r3
 8001730:	480c      	ldr	r0, [pc, #48]	; (8001764 <MX_TIM1_Init+0xa4>)
 8001732:	f005 fc3d 	bl	8006fb0 <HAL_TIM_Encoder_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 800173c:	f000 f9d4 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_TIM1_Init+0xa4>)
 800174e:	f006 fadd 	bl	8007d0c <HAL_TIMEx_MasterConfigSynchronization>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001758:	f000 f9c6 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	3730      	adds	r7, #48	; 0x30
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000a0c 	.word	0x20000a0c
 8001768:	40010000 	.word	0x40010000

0800176c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08e      	sub	sp, #56	; 0x38
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	f107 0320 	add.w	r3, r7, #32
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	615a      	str	r2, [r3, #20]
 800179a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800179c:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <MX_TIM2_Init+0x138>)
 800179e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12000;
 80017a4:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <MX_TIM2_Init+0x138>)
 80017a6:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80017aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <MX_TIM2_Init+0x138>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017b2:	4b3c      	ldr	r3, [pc, #240]	; (80018a4 <MX_TIM2_Init+0x138>)
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ba:	4b3a      	ldr	r3, [pc, #232]	; (80018a4 <MX_TIM2_Init+0x138>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <MX_TIM2_Init+0x138>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017c6:	4837      	ldr	r0, [pc, #220]	; (80018a4 <MX_TIM2_Init+0x138>)
 80017c8:	f005 f960 	bl	8006a8c <HAL_TIM_Base_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80017d2:	f000 f989 	bl	8001ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4830      	ldr	r0, [pc, #192]	; (80018a4 <MX_TIM2_Init+0x138>)
 80017e4:	f005 fe9c 	bl	8007520 <HAL_TIM_ConfigClockSource>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80017ee:	f000 f97b 	bl	8001ae8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80017f2:	482c      	ldr	r0, [pc, #176]	; (80018a4 <MX_TIM2_Init+0x138>)
 80017f4:	f005 fa85 	bl	8006d02 <HAL_TIM_OC_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80017fe:	f000 f973 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800180a:	f107 0320 	add.w	r3, r7, #32
 800180e:	4619      	mov	r1, r3
 8001810:	4824      	ldr	r0, [pc, #144]	; (80018a4 <MX_TIM2_Init+0x138>)
 8001812:	f006 fa7b 	bl	8007d0c <HAL_TIMEx_MasterConfigSynchronization>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800181c:	f000 f964 	bl	8001ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001820:	2330      	movs	r3, #48	; 0x30
 8001822:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6659;
 8001824:	f641 2303 	movw	r3, #6659	; 0x1a03
 8001828:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	481a      	ldr	r0, [pc, #104]	; (80018a4 <MX_TIM2_Init+0x138>)
 800183a:	f005 fe15 	bl	8007468 <HAL_TIM_OC_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001844:	f000 f950 	bl	8001ae8 <Error_Handler>
  }
  sConfigOC.Pulse = 13500;
 8001848:	f243 43bc 	movw	r3, #13500	; 0x34bc
 800184c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	2204      	movs	r2, #4
 8001852:	4619      	mov	r1, r3
 8001854:	4813      	ldr	r0, [pc, #76]	; (80018a4 <MX_TIM2_Init+0x138>)
 8001856:	f005 fe07 	bl	8007468 <HAL_TIM_OC_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8001860:	f000 f942 	bl	8001ae8 <Error_Handler>
  }
  sConfigOC.Pulse = 36000;
 8001864:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 8001868:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2208      	movs	r2, #8
 800186e:	4619      	mov	r1, r3
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <MX_TIM2_Init+0x138>)
 8001872:	f005 fdf9 	bl	8007468 <HAL_TIM_OC_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 800187c:	f000 f934 	bl	8001ae8 <Error_Handler>
  }
  sConfigOC.Pulse = 67000;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_TIM2_Init+0x13c>)
 8001882:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	220c      	movs	r2, #12
 8001888:	4619      	mov	r1, r3
 800188a:	4806      	ldr	r0, [pc, #24]	; (80018a4 <MX_TIM2_Init+0x138>)
 800188c:	f005 fdec 	bl	8007468 <HAL_TIM_OC_ConfigChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8001896:	f000 f927 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	3738      	adds	r7, #56	; 0x38
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000a54 	.word	0x20000a54
 80018a8:	000105b8 	.word	0x000105b8

080018ac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80018b0:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_TIM10_Init+0x40>)
 80018b2:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <MX_TIM10_Init+0x44>)
 80018b4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <MX_TIM10_Init+0x40>)
 80018b8:	224f      	movs	r2, #79	; 0x4f
 80018ba:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_TIM10_Init+0x40>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <MX_TIM10_Init+0x40>)
 80018c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_TIM10_Init+0x40>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_TIM10_Init+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_TIM10_Init+0x40>)
 80018d8:	f005 f8d8 	bl	8006a8c <HAL_TIM_Base_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80018e2:	f000 f901 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000a9c 	.word	0x20000a9c
 80018f0:	40014400 	.word	0x40014400

080018f4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_TIM11_Init+0x40>)
 80018fa:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <MX_TIM11_Init+0x44>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10;
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <MX_TIM11_Init+0x40>)
 8001900:	220a      	movs	r2, #10
 8001902:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <MX_TIM11_Init+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <MX_TIM11_Init+0x40>)
 800190c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001910:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <MX_TIM11_Init+0x40>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_TIM11_Init+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_TIM11_Init+0x40>)
 8001920:	f005 f8b4 	bl	8006a8c <HAL_TIM_Base_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800192a:	f000 f8dd 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000ae4 	.word	0x20000ae4
 8001938:	40014800 	.word	0x40014800

0800193c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <MX_USART6_UART_Init+0x50>)
 8001944:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 8001948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800194c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 8001962:	220c      	movs	r2, #12
 8001964:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 8001974:	f006 fa4c 	bl	8007e10 <HAL_UART_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800197e:	f000 f8b3 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000b2c 	.word	0x20000b2c
 800198c:	40011400 	.word	0x40011400

08001990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <MX_GPIO_Init+0x14c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a4b      	ldr	r2, [pc, #300]	; (8001adc <MX_GPIO_Init+0x14c>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b49      	ldr	r3, [pc, #292]	; (8001adc <MX_GPIO_Init+0x14c>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b45      	ldr	r3, [pc, #276]	; (8001adc <MX_GPIO_Init+0x14c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a44      	ldr	r2, [pc, #272]	; (8001adc <MX_GPIO_Init+0x14c>)
 80019cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b42      	ldr	r3, [pc, #264]	; (8001adc <MX_GPIO_Init+0x14c>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <MX_GPIO_Init+0x14c>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a3d      	ldr	r2, [pc, #244]	; (8001adc <MX_GPIO_Init+0x14c>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <MX_GPIO_Init+0x14c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	4b37      	ldr	r3, [pc, #220]	; (8001adc <MX_GPIO_Init+0x14c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a36      	ldr	r2, [pc, #216]	; (8001adc <MX_GPIO_Init+0x14c>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b34      	ldr	r3, [pc, #208]	; (8001adc <MX_GPIO_Init+0x14c>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_SD_Pin|LED5_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	f248 0110 	movw	r1, #32784	; 0x8010
 8001a1c:	4830      	ldr	r0, [pc, #192]	; (8001ae0 <MX_GPIO_Init+0x150>)
 8001a1e:	f002 ff2f 	bl	8004880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	2102      	movs	r1, #2
 8001a26:	482f      	ldr	r0, [pc, #188]	; (8001ae4 <MX_GPIO_Init+0x154>)
 8001a28:	f002 ff2a 	bl	8004880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|LED4_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f243 0118 	movw	r1, #12312	; 0x3018
 8001a32:	482c      	ldr	r0, [pc, #176]	; (8001ae4 <MX_GPIO_Init+0x154>)
 8001a34:	f002 ff24 	bl	8004880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_SD_Pin LED5_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin|LED5_Pin;
 8001a38:	f248 0310 	movw	r3, #32784	; 0x8010
 8001a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4823      	ldr	r0, [pc, #140]	; (8001ae0 <MX_GPIO_Init+0x150>)
 8001a52:	f002 fd79 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSO_DATA_Pin */
  GPIO_InitStruct.Pin = DSO_DATA_Pin;
 8001a56:	2302      	movs	r3, #2
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a5a:	2311      	movs	r3, #17
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DSO_DATA_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	481d      	ldr	r0, [pc, #116]	; (8001ae4 <MX_GPIO_Init+0x154>)
 8001a6e:	f002 fd6b 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pin : DET_SD_Pin */
  GPIO_InitStruct.Pin = DET_SD_Pin;
 8001a72:	2304      	movs	r3, #4
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DET_SD_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4817      	ldr	r0, [pc, #92]	; (8001ae4 <MX_GPIO_Init+0x154>)
 8001a86:	f002 fd5f 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED4_Pin|LED3_Pin;
 8001a8a:	f243 0318 	movw	r3, #12312	; 0x3018
 8001a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4810      	ldr	r0, [pc, #64]	; (8001ae4 <MX_GPIO_Init+0x154>)
 8001aa4:	f002 fd50 	bl	8004548 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BTN_Pin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <MX_GPIO_Init+0x154>)
 8001ac0:	f002 fd42 	bl	8004548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2017      	movs	r0, #23
 8001aca:	f002 fd06 	bl	80044da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ace:	2017      	movs	r0, #23
 8001ad0:	f002 fd1f 	bl	8004512 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	; 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	40020400 	.word	0x40020400

08001ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aec:	b672      	cpsid	i
}
 8001aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <Error_Handler+0x8>
	...

08001af4 <huart_ds_init>:
volatile Screen screen = MAIN_MENU; //instancja enuma Screen, aktualny stan menu
int sensorAdcExt=0;
UART_HandleTypeDef *huart6_new;
RTC_HandleTypeDef *hrtc_new;

void huart_ds_init(UART_HandleTypeDef *huart6) {
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	huart6_new=huart6;
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <huart_ds_init+0x1c>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6013      	str	r3, [r2, #0]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000b78 	.word	0x20000b78

08001b14 <sendRtcHandler>:

void sendRtcHandler(RTC_HandleTypeDef *hrtc) {
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	hrtc_new=hrtc;
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <sendRtcHandler+0x1c>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6013      	str	r3, [r2, #0]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000b7c 	.word	0x20000b7c

08001b34 <backButton>:

void backButton(uint8_t back_pos, uint8_t target_screen, uint16_t encoder_pos) { //usunac encoder_pos bo nieuzywane
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	71bb      	strb	r3, [r7, #6]
 8001b42:	4613      	mov	r3, r2
 8001b44:	80bb      	strh	r3, [r7, #4]
	ssd1306_SetCursor(0, 56);
 8001b46:	2138      	movs	r1, #56	; 0x38
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f002 f899 	bl	8003c80 <ssd1306_SetCursor>
	ssd1306_WriteString("COFNIJ", Font_6x8, entrySelected(back_pos) ? Black : White);
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	b21b      	sxth	r3, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fa6c 	bl	8001030 <entrySelected>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f083 0301 	eor.w	r3, r3, #1
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <backButton+0x5c>)
 8001b62:	ca06      	ldmia	r2, {r1, r2}
 8001b64:	480b      	ldr	r0, [pc, #44]	; (8001b94 <backButton+0x60>)
 8001b66:	f002 f865 	bl	8003c34 <ssd1306_WriteString>
	if(entryClicked(back_pos)) {
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fa71 	bl	8001056 <entryClicked>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d005      	beq.n	8001b86 <backButton+0x52>
		encSetPos(0);
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff fa28 	bl	8000fd0 <encSetPos>
		//confirm=true;
		screen = target_screen;
 8001b80:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <backButton+0x64>)
 8001b82:	79bb      	ldrb	r3, [r7, #6]
 8001b84:	7013      	strb	r3, [r2, #0]
	}
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2000067c 	.word	0x2000067c
 8001b94:	0800dc38 	.word	0x0800dc38
 8001b98:	20000b75 	.word	0x20000b75

08001b9c <listAllItemsFromMenu>:

void listAllItemsFromMenu(Menu *menu) {
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < menu->entry_count; ++i) { //-> bo entry_count na stercie cpu jest (heap)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	e02e      	b.n	8001c08 <listAllItemsFromMenu+0x6c>
			ssd1306_SetCursor(0, i*8);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f002 f863 	bl	8003c80 <ssd1306_SetCursor>
			if(entryClicked(i)) {
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fa49 	bl	8001056 <entryClicked>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <listAllItemsFromMenu+0x3e>
				screen = menu->entries[i].entry;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	3201      	adds	r2, #1
 8001bd0:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <listAllItemsFromMenu+0x80>)
 8001bd6:	701a      	strb	r2, [r3, #0]
				break;
 8001bd8:	e01c      	b.n	8001c14 <listAllItemsFromMenu+0x78>
			}
			ssd1306_WriteString(menu->entries[i].entry_string, Font_6x8, entrySelected(i) ? Black : White);
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3301      	adds	r3, #1
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4413      	add	r3, r2
 8001be4:	685c      	ldr	r4, [r3, #4]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fa20 	bl	8001030 <entrySelected>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f083 0301 	eor.w	r3, r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <listAllItemsFromMenu+0x84>)
 8001bfa:	ca06      	ldmia	r2, {r1, r2}
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	f002 f819 	bl	8003c34 <ssd1306_WriteString>
	for (int i = 0; i < menu->entry_count; ++i) { //-> bo entry_count na stercie cpu jest (heap)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	3301      	adds	r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	dbcb      	blt.n	8001baa <listAllItemsFromMenu+0xe>
		  }
}
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}
 8001c1c:	20000b75 	.word	0x20000b75
 8001c20:	2000067c 	.word	0x2000067c

08001c24 <drawMainMenu>:

void drawMainMenu(Menu *menu) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	encSetRange(0, 39);
 8001c2c:	2127      	movs	r1, #39	; 0x27
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f7ff f9b4 	bl	8000f9c <encSetRange>
	listAllItemsFromMenu(menu);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ffb1 	bl	8001b9c <listAllItemsFromMenu>
	uint32_t encVal = encoderGet();
 8001c3a:	f7ff f9db 	bl	8000ff4 <encoderGet>
 8001c3e:	60f8      	str	r0, [r7, #12]
	char charArVal[4];
	sprintf(charArVal, "%lu", encVal);
 8001c40:	f107 0308 	add.w	r3, r7, #8
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4909      	ldr	r1, [pc, #36]	; (8001c6c <drawMainMenu+0x48>)
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f009 fe83 	bl	800b954 <siprintf>
	ssd1306_SetCursor(0, 30);
 8001c4e:	211e      	movs	r1, #30
 8001c50:	2000      	movs	r0, #0
 8001c52:	f002 f815 	bl	8003c80 <ssd1306_SetCursor>
	ssd1306_WriteString(charArVal, Font_16x24, White);
 8001c56:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <drawMainMenu+0x4c>)
 8001c58:	f107 0008 	add.w	r0, r7, #8
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	ca06      	ldmia	r2, {r1, r2}
 8001c60:	f001 ffe8 	bl	8003c34 <ssd1306_WriteString>

}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	0800dc40 	.word	0x0800dc40
 8001c70:	20000694 	.word	0x20000694

08001c74 <drawSensorConfig>:

void drawSensorConfig(Menu *menu) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	encSetRange(0, 3);
 8001c7c:	2103      	movs	r1, #3
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f7ff f98c 	bl	8000f9c <encSetRange>
	listAllItemsFromMenu(menu);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff89 	bl	8001b9c <listAllItemsFromMenu>
	backButton(3, MAIN_MENU, 1);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2003      	movs	r0, #3
 8001c90:	f7ff ff50 	bl	8001b34 <backButton>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <drawSdConfig>:

volatile bool dataOverwrite=false;
char strDataOverwrite[6];
void drawSdConfig(Menu *menu) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	encSetRange(0, 1);
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f7ff f978 	bl	8000f9c <encSetRange>
	ssd1306_SetCursor(0, 0);
 8001cac:	2100      	movs	r1, #0
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f001 ffe6 	bl	8003c80 <ssd1306_SetCursor>
	ssd1306_WriteString("SD status:", Font_7x10, White);
 8001cb4:	4a34      	ldr	r2, [pc, #208]	; (8001d88 <drawSdConfig+0xec>)
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	ca06      	ldmia	r2, {r1, r2}
 8001cba:	4834      	ldr	r0, [pc, #208]	; (8001d8c <drawSdConfig+0xf0>)
 8001cbc:	f001 ffba 	bl	8003c34 <ssd1306_WriteString>
	ssd1306_SetCursor(70, 0);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2046      	movs	r0, #70	; 0x46
 8001cc4:	f001 ffdc 	bl	8003c80 <ssd1306_SetCursor>
	if(!sdReady) {
 8001cc8:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <drawSdConfig+0xf4>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	f083 0301 	eor.w	r3, r3, #1
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <drawSdConfig+0x48>
		ssd1306_WriteString(" error", Font_7x10, White);
 8001cd6:	4a2c      	ldr	r2, [pc, #176]	; (8001d88 <drawSdConfig+0xec>)
 8001cd8:	2301      	movs	r3, #1
 8001cda:	ca06      	ldmia	r2, {r1, r2}
 8001cdc:	482d      	ldr	r0, [pc, #180]	; (8001d94 <drawSdConfig+0xf8>)
 8001cde:	f001 ffa9 	bl	8003c34 <ssd1306_WriteString>
 8001ce2:	e005      	b.n	8001cf0 <drawSdConfig+0x54>
	}
	else {
		ssd1306_WriteString(" OK", Font_7x10, White);
 8001ce4:	4a28      	ldr	r2, [pc, #160]	; (8001d88 <drawSdConfig+0xec>)
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	ca06      	ldmia	r2, {r1, r2}
 8001cea:	482b      	ldr	r0, [pc, #172]	; (8001d98 <drawSdConfig+0xfc>)
 8001cec:	f001 ffa2 	bl	8003c34 <ssd1306_WriteString>
	}
	ssd1306_SetCursor(0, 10);
 8001cf0:	210a      	movs	r1, #10
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f001 ffc4 	bl	8003c80 <ssd1306_SetCursor>
	ssd1306_WriteString("Overwrite: ", Font_7x10, White);
 8001cf8:	4a23      	ldr	r2, [pc, #140]	; (8001d88 <drawSdConfig+0xec>)
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	ca06      	ldmia	r2, {r1, r2}
 8001cfe:	4827      	ldr	r0, [pc, #156]	; (8001d9c <drawSdConfig+0x100>)
 8001d00:	f001 ff98 	bl	8003c34 <ssd1306_WriteString>
	if(entrySelected(0) && entryClicked(0)) {
 8001d04:	2000      	movs	r0, #0
 8001d06:	f7ff f993 	bl	8001030 <entrySelected>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d014      	beq.n	8001d3a <drawSdConfig+0x9e>
 8001d10:	2000      	movs	r0, #0
 8001d12:	f7ff f9a0 	bl	8001056 <entryClicked>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00e      	beq.n	8001d3a <drawSdConfig+0x9e>
				if(dataOverwrite==false) {
 8001d1c:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <drawSdConfig+0x104>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	f083 0301 	eor.w	r3, r3, #1
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <drawSdConfig+0x98>
					dataOverwrite=true;
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <drawSdConfig+0x104>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	e002      	b.n	8001d3a <drawSdConfig+0x9e>
				}
				else {
					dataOverwrite=false;
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <drawSdConfig+0x104>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
				}
	}
	ssd1306_SetCursor(75, 10);
 8001d3a:	210a      	movs	r1, #10
 8001d3c:	204b      	movs	r0, #75	; 0x4b
 8001d3e:	f001 ff9f 	bl	8003c80 <ssd1306_SetCursor>
	sprintf(strDataOverwrite, "%s", dataOverwrite ? "true" : "false");
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <drawSdConfig+0x104>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <drawSdConfig+0xb4>
 8001d4c:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <drawSdConfig+0x108>)
 8001d4e:	e000      	b.n	8001d52 <drawSdConfig+0xb6>
 8001d50:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <drawSdConfig+0x10c>)
 8001d52:	461a      	mov	r2, r3
 8001d54:	4915      	ldr	r1, [pc, #84]	; (8001dac <drawSdConfig+0x110>)
 8001d56:	4816      	ldr	r0, [pc, #88]	; (8001db0 <drawSdConfig+0x114>)
 8001d58:	f009 fdfc 	bl	800b954 <siprintf>
	ssd1306_WriteString(strDataOverwrite, Font_7x10, entrySelected(0) ? Black : White);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff f967 	bl	8001030 <entrySelected>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f083 0301 	eor.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <drawSdConfig+0xec>)
 8001d6c:	ca06      	ldmia	r2, {r1, r2}
 8001d6e:	4810      	ldr	r0, [pc, #64]	; (8001db0 <drawSdConfig+0x114>)
 8001d70:	f001 ff60 	bl	8003c34 <ssd1306_WriteString>
	backButton(1, MAIN_MENU, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f7ff fedb 	bl	8001b34 <backButton>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000684 	.word	0x20000684
 8001d8c:	0800dc44 	.word	0x0800dc44
 8001d90:	20001474 	.word	0x20001474
 8001d94:	0800dc50 	.word	0x0800dc50
 8001d98:	0800dc58 	.word	0x0800dc58
 8001d9c:	0800dc5c 	.word	0x0800dc5c
 8001da0:	20000b80 	.word	0x20000b80
 8001da4:	0800dc68 	.word	0x0800dc68
 8001da8:	0800dc70 	.word	0x0800dc70
 8001dac:	0800dc78 	.word	0x0800dc78
 8001db0:	20000b84 	.word	0x20000b84

08001db4 <drawSensorConfigAdcExt>:



void drawSensorConfigAdcExt(Menu *menu) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	encSetRange(0, 4);
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f7ff f8ec 	bl	8000f9c <encSetRange>
	listAllItemsFromMenu(menu);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fee9 	bl	8001b9c <listAllItemsFromMenu>
	backButton(4, MAIN_MENU, 4);
 8001dca:	2204      	movs	r2, #4
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2004      	movs	r0, #4
 8001dd0:	f7ff feb0 	bl	8001b34 <backButton>
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <drawSensorConfigAdcInt>:
void drawSensorConfigAdcInt(Menu *menu) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	encSetRange(0, 4);
 8001de4:	2104      	movs	r1, #4
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff f8d8 	bl	8000f9c <encSetRange>
	listAllItemsFromMenu(menu);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff fed5 	bl	8001b9c <listAllItemsFromMenu>
	backButton(4, MAIN_MENU, 4);
 8001df2:	2204      	movs	r2, #4
 8001df4:	2100      	movs	r1, #0
 8001df6:	2004      	movs	r0, #4
 8001df8:	f7ff fe9c 	bl	8001b34 <backButton>
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <drawSensorConfigDS18>:
void drawSensorConfigDS18(Menu *menu) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	encSetRange(0, 1);
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff f8c4 	bl	8000f9c <encSetRange>
	listAllItemsFromMenu(menu);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff fec1 	bl	8001b9c <listAllItemsFromMenu>
	backButton(3, MAIN_MENU, 3);
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2003      	movs	r0, #3
 8001e20:	f7ff fe88 	bl	8001b34 <backButton>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <drawSensorOptions>:
uint16_t samplingRates[] = {10,50,100,500};
volatile uint8_t  samplingIndex = 0;
volatile int counter=0;
char sampl1str[10]="???";

void drawSensorOptions(uint8_t index) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
	ssd1306_WriteString(sensors[index].name, Font_11x18, White);
 8001e36:	79fa      	ldrb	r2, [r7, #7]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <drawSensorOptions+0x178>)
 8001e42:	1898      	adds	r0, r3, r2
 8001e44:	4a58      	ldr	r2, [pc, #352]	; (8001fa8 <drawSensorOptions+0x17c>)
 8001e46:	2301      	movs	r3, #1
 8001e48:	ca06      	ldmia	r2, {r1, r2}
 8001e4a:	f001 fef3 	bl	8003c34 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 8001e4e:	2112      	movs	r1, #18
 8001e50:	2000      	movs	r0, #0
 8001e52:	f001 ff15 	bl	8003c80 <ssd1306_SetCursor>
	char isEnabledStr[20];
	if(entrySelected(0) && entryClicked(0)) {
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff f8ea 	bl	8001030 <entrySelected>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d028      	beq.n	8001eb4 <drawSensorOptions+0x88>
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff f8f7 	bl	8001056 <entryClicked>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d022      	beq.n	8001eb4 <drawSensorOptions+0x88>
		if(sensors[index].isEnabled==false) {
 8001e6e:	79fa      	ldrb	r2, [r7, #7]
 8001e70:	494c      	ldr	r1, [pc, #304]	; (8001fa4 <drawSensorOptions+0x178>)
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	440b      	add	r3, r1
 8001e7c:	3314      	adds	r3, #20
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	f083 0301 	eor.w	r3, r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00a      	beq.n	8001ea0 <drawSensorOptions+0x74>
			sensors[index].isEnabled=true;
 8001e8a:	79fa      	ldrb	r2, [r7, #7]
 8001e8c:	4945      	ldr	r1, [pc, #276]	; (8001fa4 <drawSensorOptions+0x178>)
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	440b      	add	r3, r1
 8001e98:	3314      	adds	r3, #20
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e009      	b.n	8001eb4 <drawSensorOptions+0x88>
		}
		else {
			sensors[index].isEnabled=false;
 8001ea0:	79fa      	ldrb	r2, [r7, #7]
 8001ea2:	4940      	ldr	r1, [pc, #256]	; (8001fa4 <drawSensorOptions+0x178>)
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	440b      	add	r3, r1
 8001eae:	3314      	adds	r3, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
		}
	}
	sprintf(isEnabledStr, "enabled: %s", sensors[index].isEnabled ? "true" : "false");
 8001eb4:	79fa      	ldrb	r2, [r7, #7]
 8001eb6:	493b      	ldr	r1, [pc, #236]	; (8001fa4 <drawSensorOptions+0x178>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3314      	adds	r3, #20
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <drawSensorOptions+0xa2>
 8001eca:	4a38      	ldr	r2, [pc, #224]	; (8001fac <drawSensorOptions+0x180>)
 8001ecc:	e000      	b.n	8001ed0 <drawSensorOptions+0xa4>
 8001ece:	4a38      	ldr	r2, [pc, #224]	; (8001fb0 <drawSensorOptions+0x184>)
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	4937      	ldr	r1, [pc, #220]	; (8001fb4 <drawSensorOptions+0x188>)
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f009 fd3c 	bl	800b954 <siprintf>
	ssd1306_WriteString(isEnabledStr, Font_7x10, entrySelected(0) ? Black : White);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff f8a7 	bl	8001030 <entrySelected>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f083 0301 	eor.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4a33      	ldr	r2, [pc, #204]	; (8001fb8 <drawSensorOptions+0x18c>)
 8001eec:	f107 000c 	add.w	r0, r7, #12
 8001ef0:	ca06      	ldmia	r2, {r1, r2}
 8001ef2:	f001 fe9f 	bl	8003c34 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 28);
 8001ef6:	211c      	movs	r1, #28
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f001 fec1 	bl	8003c80 <ssd1306_SetCursor>
	ssd1306_WriteString("period [ms]: ", Font_7x10, White);
 8001efe:	4a2e      	ldr	r2, [pc, #184]	; (8001fb8 <drawSensorOptions+0x18c>)
 8001f00:	2301      	movs	r3, #1
 8001f02:	ca06      	ldmia	r2, {r1, r2}
 8001f04:	482d      	ldr	r0, [pc, #180]	; (8001fbc <drawSensorOptions+0x190>)
 8001f06:	f001 fe95 	bl	8003c34 <ssd1306_WriteString>
	ssd1306_SetCursor(90, 28);
 8001f0a:	211c      	movs	r1, #28
 8001f0c:	205a      	movs	r0, #90	; 0x5a
 8001f0e:	f001 feb7 	bl	8003c80 <ssd1306_SetCursor>
	sprintf(sampl1str, "%d\n\r", sensors[index].samplingRate);
 8001f12:	79fa      	ldrb	r2, [r7, #7]
 8001f14:	4923      	ldr	r1, [pc, #140]	; (8001fa4 <drawSensorOptions+0x178>)
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	3316      	adds	r3, #22
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4926      	ldr	r1, [pc, #152]	; (8001fc0 <drawSensorOptions+0x194>)
 8001f28:	4826      	ldr	r0, [pc, #152]	; (8001fc4 <drawSensorOptions+0x198>)
 8001f2a:	f009 fd13 	bl	800b954 <siprintf>
	ssd1306_WriteString(sampl1str, Font_7x10, entrySelected(1) ? Black : White);
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f7ff f87e 	bl	8001030 <entrySelected>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f083 0301 	eor.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <drawSensorOptions+0x18c>)
 8001f3e:	ca06      	ldmia	r2, {r1, r2}
 8001f40:	4820      	ldr	r0, [pc, #128]	; (8001fc4 <drawSensorOptions+0x198>)
 8001f42:	f001 fe77 	bl	8003c34 <ssd1306_WriteString>
	if(entrySelected(1) && entryClicked(1)) { //tu sie dzieje cos dziwnego
 8001f46:	2001      	movs	r0, #1
 8001f48:	f7ff f872 	bl	8001030 <entrySelected>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d024      	beq.n	8001f9c <drawSensorOptions+0x170>
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7ff f87f 	bl	8001056 <entryClicked>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d01e      	beq.n	8001f9c <drawSensorOptions+0x170>
		send_uart("klikniete\n\r");
 8001f5e:	481a      	ldr	r0, [pc, #104]	; (8001fc8 <drawSensorOptions+0x19c>)
 8001f60:	f7ff f892 	bl	8001088 <send_uart>
		counter++;
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <drawSensorOptions+0x1a0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	4a18      	ldr	r2, [pc, #96]	; (8001fcc <drawSensorOptions+0x1a0>)
 8001f6c:	6013      	str	r3, [r2, #0]
		if(counter>4) {
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <drawSensorOptions+0x1a0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	dd02      	ble.n	8001f7c <drawSensorOptions+0x150>
			counter=1;
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <drawSensorOptions+0x1a0>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
		}
		sensors[index].samplingRate = samplingRates[counter-1];
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <drawSensorOptions+0x1a0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	79fa      	ldrb	r2, [r7, #7]
 8001f84:	4912      	ldr	r1, [pc, #72]	; (8001fd0 <drawSensorOptions+0x1a4>)
 8001f86:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8001f8a:	4906      	ldr	r1, [pc, #24]	; (8001fa4 <drawSensorOptions+0x178>)
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	3316      	adds	r3, #22
 8001f98:	4602      	mov	r2, r0
 8001f9a:	801a      	strh	r2, [r3, #0]
	}

}
 8001f9c:	bf00      	nop
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	2000068c 	.word	0x2000068c
 8001fac:	0800dc68 	.word	0x0800dc68
 8001fb0:	0800dc70 	.word	0x0800dc70
 8001fb4:	0800dc7c 	.word	0x0800dc7c
 8001fb8:	20000684 	.word	0x20000684
 8001fbc:	0800dc88 	.word	0x0800dc88
 8001fc0:	0800dc98 	.word	0x0800dc98
 8001fc4:	20000110 	.word	0x20000110
 8001fc8:	0800dca0 	.word	0x0800dca0
 8001fcc:	20000b8c 	.word	0x20000b8c
 8001fd0:	20000108 	.word	0x20000108

08001fd4 <drawSensorConfigGeneric>:


void drawSensorConfigGeneric(Menu *menu) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	encSetRange(0, 2);
 8001fdc:	2102      	movs	r1, #2
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7fe ffdc 	bl	8000f9c <encSetRange>
	ssd1306_SetCursor(0, 0);
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f001 fe4a 	bl	8003c80 <ssd1306_SetCursor>
	drawSensorOptions(screen-SENSOR_CONFIG_ADC_EXT0);
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <drawSensorConfigGeneric+0x3c>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	3b08      	subs	r3, #8
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ff18 	bl	8001e2c <drawSensorOptions>
	backButton(2, MAIN_MENU, 2);
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	2100      	movs	r1, #0
 8002000:	2002      	movs	r0, #2
 8002002:	f7ff fd97 	bl	8001b34 <backButton>
//}
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000b75 	.word	0x20000b75

08002014 <ch1Enable>:


void ch1Enable(void) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
	for(int i=0; i<10; i++) {
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	e01b      	b.n	8002058 <ch1Enable+0x44>
		if(sensors[i].samplingRate==10 && sensors[i].isEnabled) {
 8002020:	4911      	ldr	r1, [pc, #68]	; (8002068 <ch1Enable+0x54>)
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	3316      	adds	r3, #22
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	2b0a      	cmp	r3, #10
 8002034:	d10d      	bne.n	8002052 <ch1Enable+0x3e>
 8002036:	490c      	ldr	r1, [pc, #48]	; (8002068 <ch1Enable+0x54>)
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	3314      	adds	r3, #20
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <ch1Enable+0x3e>
		  send_uart("10ms\n\r");
 800204c:	4807      	ldr	r0, [pc, #28]	; (800206c <ch1Enable+0x58>)
 800204e:	f7ff f81b 	bl	8001088 <send_uart>
	for(int i=0; i<10; i++) {
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3301      	adds	r3, #1
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b09      	cmp	r3, #9
 800205c:	dde0      	ble.n	8002020 <ch1Enable+0xc>
		}
	}
}
 800205e:	bf00      	nop
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000000 	.word	0x20000000
 800206c:	0800dcac 	.word	0x0800dcac

08002070 <ch2Enable>:

void ch2Enable(void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
	for(int i=0; i<10; i++) {
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	e01b      	b.n	80020b4 <ch2Enable+0x44>
		if(sensors[i].samplingRate==50 && sensors[i].isEnabled) {
 800207c:	4911      	ldr	r1, [pc, #68]	; (80020c4 <ch2Enable+0x54>)
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	3316      	adds	r3, #22
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	2b32      	cmp	r3, #50	; 0x32
 8002090:	d10d      	bne.n	80020ae <ch2Enable+0x3e>
 8002092:	490c      	ldr	r1, [pc, #48]	; (80020c4 <ch2Enable+0x54>)
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	3314      	adds	r3, #20
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <ch2Enable+0x3e>
		  send_uart("50ms\n\r");
 80020a8:	4807      	ldr	r0, [pc, #28]	; (80020c8 <ch2Enable+0x58>)
 80020aa:	f7fe ffed 	bl	8001088 <send_uart>
	for(int i=0; i<10; i++) {
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3301      	adds	r3, #1
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b09      	cmp	r3, #9
 80020b8:	dde0      	ble.n	800207c <ch2Enable+0xc>
		}
	}
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000000 	.word	0x20000000
 80020c8:	0800dcb4 	.word	0x0800dcb4

080020cc <ch3Enable>:

void ch3Enable(void) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
	for(int i=0; i<10; i++) {
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	e01b      	b.n	8002110 <ch3Enable+0x44>
		if(sensors[i].samplingRate==100 && sensors[i].isEnabled) {
 80020d8:	4911      	ldr	r1, [pc, #68]	; (8002120 <ch3Enable+0x54>)
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	3316      	adds	r3, #22
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d10d      	bne.n	800210a <ch3Enable+0x3e>
 80020ee:	490c      	ldr	r1, [pc, #48]	; (8002120 <ch3Enable+0x54>)
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	3314      	adds	r3, #20
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <ch3Enable+0x3e>
		  send_uart("100ms\n\r");
 8002104:	4807      	ldr	r0, [pc, #28]	; (8002124 <ch3Enable+0x58>)
 8002106:	f7fe ffbf 	bl	8001088 <send_uart>
	for(int i=0; i<10; i++) {
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3301      	adds	r3, #1
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b09      	cmp	r3, #9
 8002114:	dde0      	ble.n	80020d8 <ch3Enable+0xc>
		}
	}
}
 8002116:	bf00      	nop
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000000 	.word	0x20000000
 8002124:	0800dcbc 	.word	0x0800dcbc

08002128 <ch4Enable>:

void ch4Enable(void) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
	for(int i=0; i<10; i++) {
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	e01c      	b.n	800216e <ch4Enable+0x46>
		if(sensors[i].samplingRate==500 && sensors[i].isEnabled) {
 8002134:	4912      	ldr	r1, [pc, #72]	; (8002180 <ch4Enable+0x58>)
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	3316      	adds	r3, #22
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800214a:	d10d      	bne.n	8002168 <ch4Enable+0x40>
 800214c:	490c      	ldr	r1, [pc, #48]	; (8002180 <ch4Enable+0x58>)
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	3314      	adds	r3, #20
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <ch4Enable+0x40>
		  send_uart("500ms\n\r");
 8002162:	4808      	ldr	r0, [pc, #32]	; (8002184 <ch4Enable+0x5c>)
 8002164:	f7fe ff90 	bl	8001088 <send_uart>
	for(int i=0; i<10; i++) {
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3301      	adds	r3, #1
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b09      	cmp	r3, #9
 8002172:	dddf      	ble.n	8002134 <ch4Enable+0xc>
		}
	}
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000000 	.word	0x20000000
 8002184:	0800dcc4 	.word	0x0800dcc4

08002188 <drawOnoffMeasure>:





void drawOnoffMeasure(Menu *menu) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b0ae      	sub	sp, #184	; 0xb8
 800218c:	af02      	add	r7, sp, #8
 800218e:	6078      	str	r0, [r7, #4]
//	ssd1306_WriteString("ds18b20_1 value:", Font_7x10, White);
//	ssd1306_SetCursor(0, 12);
//	sprintf(tempStr, "%.2f \n\r", temp);
//	ssd1306_WriteString(tempStr, Font_16x24, White);
//	HAL_UART_Transmit(huart6_new, tempStr, strlen(tempStr), HAL_MAX_DELAY);
	ssd1306_SetCursor(0, 0);
 8002190:	2100      	movs	r1, #0
 8002192:	2000      	movs	r0, #0
 8002194:	f001 fd74 	bl	8003c80 <ssd1306_SetCursor>
	uint8_t currPos=0;
 8002198:	2300      	movs	r3, #0
 800219a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	char sensorDetailsStr[30];
	for(int i=0; i<11; i++) {
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021a4:	e03c      	b.n	8002220 <drawOnoffMeasure+0x98>
		if(sensors[i].isEnabled) {
 80021a6:	4940      	ldr	r1, [pc, #256]	; (80022a8 <drawOnoffMeasure+0x120>)
 80021a8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	440b      	add	r3, r1
 80021b6:	3314      	adds	r3, #20
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d02b      	beq.n	8002216 <drawOnoffMeasure+0x8e>
			sprintf(sensorDetailsStr, "%s: %d\n\r", sensors[i].name, sensors[i].samplingRate);
 80021be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4a37      	ldr	r2, [pc, #220]	; (80022a8 <drawOnoffMeasure+0x120>)
 80021cc:	1899      	adds	r1, r3, r2
 80021ce:	4836      	ldr	r0, [pc, #216]	; (80022a8 <drawOnoffMeasure+0x120>)
 80021d0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4403      	add	r3, r0
 80021de:	3316      	adds	r3, #22
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80021e6:	460a      	mov	r2, r1
 80021e8:	4930      	ldr	r1, [pc, #192]	; (80022ac <drawOnoffMeasure+0x124>)
 80021ea:	f009 fbb3 	bl	800b954 <siprintf>
			ssd1306_SetCursor(0, currPos+8);
 80021ee:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80021f2:	3308      	adds	r3, #8
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	4619      	mov	r1, r3
 80021f8:	2000      	movs	r0, #0
 80021fa:	f001 fd41 	bl	8003c80 <ssd1306_SetCursor>
			currPos=currPos+8;
 80021fe:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002202:	3308      	adds	r3, #8
 8002204:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			ssd1306_WriteString(sensorDetailsStr, Font_6x8, White); //za mało miejsca na ekranie -> (???)
 8002208:	4a29      	ldr	r2, [pc, #164]	; (80022b0 <drawOnoffMeasure+0x128>)
 800220a:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800220e:	2301      	movs	r3, #1
 8002210:	ca06      	ldmia	r2, {r1, r2}
 8002212:	f001 fd0f 	bl	8003c34 <ssd1306_WriteString>
	for(int i=0; i<11; i++) {
 8002216:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800221a:	3301      	adds	r3, #1
 800221c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002220:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002224:	2b0a      	cmp	r3, #10
 8002226:	ddbe      	ble.n	80021a6 <drawOnoffMeasure+0x1e>
	}

	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;

	HAL_RTC_GetTime(hrtc_new, &time, RTC_FORMAT_BIN);
 8002228:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <drawOnoffMeasure+0x12c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002230:	2200      	movs	r2, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fe0a 	bl	8005e4c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc_new, &date, RTC_FORMAT_BIN);
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <drawOnoffMeasure+0x12c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002240:	2200      	movs	r2, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f003 fee4 	bl	8006010 <HAL_RTC_GetDate>
	char rtcTimeStr[50];
	char rtcDateStr[50];
	//, date: %02d/%02d/%02d, day: %d\n\r date.Date, date.Month, date.Year, date.WeekDay
	sprintf(rtcTimeStr, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 8002248:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800224c:	461a      	mov	r2, r3
 800224e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002252:	4619      	mov	r1, r3
 8002254:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002258:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	460b      	mov	r3, r1
 8002260:	4915      	ldr	r1, [pc, #84]	; (80022b8 <drawOnoffMeasure+0x130>)
 8002262:	f009 fb77 	bl	800b954 <siprintf>
	sprintf(rtcDateStr, "%02d/%02d/%02d", date.Date, date.Month, date.Year);
 8002266:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800226a:	461a      	mov	r2, r3
 800226c:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8002270:	4619      	mov	r1, r3
 8002272:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002276:	f107 0008 	add.w	r0, r7, #8
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	460b      	mov	r3, r1
 800227e:	490f      	ldr	r1, [pc, #60]	; (80022bc <drawOnoffMeasure+0x134>)
 8002280:	f009 fb68 	bl	800b954 <siprintf>
	ssd1306_SetCursor(0, 16);
 8002284:	2110      	movs	r1, #16
 8002286:	2000      	movs	r0, #0
 8002288:	f001 fcfa 	bl	8003c80 <ssd1306_SetCursor>
	//ssd1306_WriteString(rtcTimeStr, Font_7x10, White);
	ssd1306_SetCursor(0, 26);
 800228c:	211a      	movs	r1, #26
 800228e:	2000      	movs	r0, #0
 8002290:	f001 fcf6 	bl	8003c80 <ssd1306_SetCursor>
	//ssd1306_WriteString(rtcDateStr, Font_7x10, White);

	backButton(1, MAIN_MENU, 1);
 8002294:	2201      	movs	r2, #1
 8002296:	2100      	movs	r1, #0
 8002298:	2001      	movs	r0, #1
 800229a:	f7ff fc4b 	bl	8001b34 <backButton>

}
 800229e:	bf00      	nop
 80022a0:	37b0      	adds	r7, #176	; 0xb0
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000000 	.word	0x20000000
 80022ac:	0800dccc 	.word	0x0800dccc
 80022b0:	2000067c 	.word	0x2000067c
 80022b4:	20000b7c 	.word	0x20000b7c
 80022b8:	0800dcd8 	.word	0x0800dcd8
 80022bc:	0800dce8 	.word	0x0800dce8

080022c0 <displayMenu>:
	[SENSOR_CONFIG_DS18_3] = {drawSensorConfigGeneric,0,{}},
	[SD_CONFIG] = {drawSdConfig, 0, {}},
	[ONOFF_MEASURE] = {drawOnoffMeasure, 0, {}}
};

void displayMenu(void) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80022c4:	2000      	movs	r0, #0
 80022c6:	f001 fb8d 	bl	80039e4 <ssd1306_Fill>

	menu[screen].function(&menu[screen]);
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <displayMenu+0x48>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	4619      	mov	r1, r3
 80022d2:	4a0e      	ldr	r2, [pc, #56]	; (800230c <displayMenu+0x4c>)
 80022d4:	460b      	mov	r3, r1
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	440b      	add	r3, r1
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <displayMenu+0x48>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	4619      	mov	r1, r3
 80022e8:	460b      	mov	r3, r1
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4906      	ldr	r1, [pc, #24]	; (800230c <displayMenu+0x4c>)
 80022f2:	440b      	add	r3, r1
 80022f4:	4618      	mov	r0, r3
 80022f6:	4790      	blx	r2
	ssd1306_UpdateScreen();
 80022f8:	f001 fb98 	bl	8003a2c <ssd1306_UpdateScreen>
	//clearEncButton();
	HAL_Delay(1);
 80022fc:	2001      	movs	r0, #1
 80022fe:	f001 fd7b 	bl	8003df8 <HAL_Delay>

}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000b75 	.word	0x20000b75
 800230c:	2000011c 	.word	0x2000011c

08002310 <displayInit>:
#include "ssd1306_tests.h"
#include "ssd1306.h"



void displayInit(void) {
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8002314:	f001 fafc 	bl	8003910 <ssd1306_Init>
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}

0800231c <CircularBuffer_Init>:
	uint8_t buffer[BUFFER_SIZE];
	uint8_t head;
	uint8_t tail;
} CircularBuffer;

void CircularBuffer_Init(CircularBuffer *buffer) {
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
    buffer->head = 0;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    buffer->tail = 0;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <CircularBuffer_Add>:

CircularBuffer myBuffer;


bool CircularBuffer_Add(CircularBuffer *buffer, uint8_t data) {
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	70fb      	strb	r3, [r7, #3]
    // Sprawdź, czy bufor nie jest pełny
    if (((buffer->head + 1) % BUFFER_SIZE) != buffer->tail) {
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <CircularBuffer_Add+0x7c>)
 8002356:	fb83 1302 	smull	r1, r3, r3, r2
 800235a:	1199      	asrs	r1, r3, #6
 800235c:	17d3      	asrs	r3, r2, #31
 800235e:	1acb      	subs	r3, r1, r3
 8002360:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	f892 23e9 	ldrb.w	r2, [r2, #1001]	; 0x3e9
 8002370:	4293      	cmp	r3, r2
 8002372:	d01b      	beq.n	80023ac <CircularBuffer_Add+0x6c>
        buffer->buffer[buffer->head] = data;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 800237a:	4619      	mov	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	545a      	strb	r2, [r3, r1]
        buffer->head = (buffer->head + 1) % BUFFER_SIZE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8002388:	3301      	adds	r3, #1
 800238a:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <CircularBuffer_Add+0x7c>)
 800238c:	fb82 1203 	smull	r1, r2, r2, r3
 8002390:	1191      	asrs	r1, r2, #6
 8002392:	17da      	asrs	r2, r3, #31
 8002394:	1a8a      	subs	r2, r1, r2
 8002396:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800239a:	fb01 f202 	mul.w	r2, r1, r2
 800239e:	1a9a      	subs	r2, r3, r2
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
        return true;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <CircularBuffer_Add+0x6e>
    }
    return false;
 80023ac:	2300      	movs	r3, #0
    // Jeśli bufor jest pełny, można obsłużyć to w odpowiedni sposób (np. zignorować nowe dane lub nadpisać stare)
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	10624dd3 	.word	0x10624dd3

080023c0 <CircularBuffer_Get>:


// Funkcja pobierająca element z bufora
uint8_t CircularBuffer_Get(CircularBuffer *buffer) {
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
    // Sprawdź, czy bufor nie jest pusty
    if (buffer->head != buffer->tail) {
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 23e8 	ldrb.w	r2, [r3, #1000]	; 0x3e8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 33e9 	ldrb.w	r3, [r3, #1001]	; 0x3e9
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d01b      	beq.n	8002410 <CircularBuffer_Get+0x50>
        uint8_t data = buffer->buffer[buffer->tail];
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 33e9 	ldrb.w	r3, [r3, #1001]	; 0x3e9
 80023de:	461a      	mov	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	5c9b      	ldrb	r3, [r3, r2]
 80023e4:	73fb      	strb	r3, [r7, #15]
        buffer->tail = (buffer->tail + 1) % BUFFER_SIZE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 33e9 	ldrb.w	r3, [r3, #1001]	; 0x3e9
 80023ec:	3301      	adds	r3, #1
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <CircularBuffer_Get+0x60>)
 80023f0:	fb82 1203 	smull	r1, r2, r2, r3
 80023f4:	1191      	asrs	r1, r2, #6
 80023f6:	17da      	asrs	r2, r3, #31
 80023f8:	1a8a      	subs	r2, r1, r2
 80023fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023fe:	fb01 f202 	mul.w	r2, r1, r2
 8002402:	1a9a      	subs	r2, r3, r2
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
        return data;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	e000      	b.n	8002412 <CircularBuffer_Get+0x52>
    }
    // Jeśli bufor jest pusty, można obsłużyć to w odpowiedni sposób (np. zwrócić specjalną wartość lub zablokować wykonanie)
    return 0;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	10624dd3 	.word	0x10624dd3

08002424 <buff>:

void buff(void) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0

	CircularBuffer_Init(&myBuffer);
 800242a:	481e      	ldr	r0, [pc, #120]	; (80024a4 <buff+0x80>)
 800242c:	f7ff ff76 	bl	800231c <CircularBuffer_Init>
	// Przykładowe użycie bufora kołowego
	CircularBuffer_Add(&myBuffer, 10);
 8002430:	210a      	movs	r1, #10
 8002432:	481c      	ldr	r0, [pc, #112]	; (80024a4 <buff+0x80>)
 8002434:	f7ff ff84 	bl	8002340 <CircularBuffer_Add>
	//do bufora bedzie dodawana gotowa linijka stringa do .csv
	CircularBuffer_Add(&myBuffer, 20);
 8002438:	2114      	movs	r1, #20
 800243a:	481a      	ldr	r0, [pc, #104]	; (80024a4 <buff+0x80>)
 800243c:	f7ff ff80 	bl	8002340 <CircularBuffer_Add>
	CircularBuffer_Add(&myBuffer, 'B');
 8002440:	2142      	movs	r1, #66	; 0x42
 8002442:	4818      	ldr	r0, [pc, #96]	; (80024a4 <buff+0x80>)
 8002444:	f7ff ff7c 	bl	8002340 <CircularBuffer_Add>
	//uint8_t data = CircularBuffer_Get(&myBuffer);
	char temp[10];
	sprintf(temp, "%u \n\r", CircularBuffer_Get(&myBuffer));
 8002448:	4816      	ldr	r0, [pc, #88]	; (80024a4 <buff+0x80>)
 800244a:	f7ff ffb9 	bl	80023c0 <CircularBuffer_Get>
 800244e:	4603      	mov	r3, r0
 8002450:	461a      	mov	r2, r3
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	4914      	ldr	r1, [pc, #80]	; (80024a8 <buff+0x84>)
 8002456:	4618      	mov	r0, r3
 8002458:	f009 fa7c 	bl	800b954 <siprintf>
	send_uart(temp);
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fe12 	bl	8001088 <send_uart>
	sprintf(temp, "%u \n\r", CircularBuffer_Get(&myBuffer));
 8002464:	480f      	ldr	r0, [pc, #60]	; (80024a4 <buff+0x80>)
 8002466:	f7ff ffab 	bl	80023c0 <CircularBuffer_Get>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	490d      	ldr	r1, [pc, #52]	; (80024a8 <buff+0x84>)
 8002472:	4618      	mov	r0, r3
 8002474:	f009 fa6e 	bl	800b954 <siprintf>
	send_uart(temp);
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fe04 	bl	8001088 <send_uart>
	sprintf(temp, "%u \n\r", CircularBuffer_Get(&myBuffer));
 8002480:	4808      	ldr	r0, [pc, #32]	; (80024a4 <buff+0x80>)
 8002482:	f7ff ff9d 	bl	80023c0 <CircularBuffer_Get>
 8002486:	4603      	mov	r3, r0
 8002488:	461a      	mov	r2, r3
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	4906      	ldr	r1, [pc, #24]	; (80024a8 <buff+0x84>)
 800248e:	4618      	mov	r0, r3
 8002490:	f009 fa60 	bl	800b954 <siprintf>
	send_uart(temp);
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fdf6 	bl	8001088 <send_uart>

}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000b90 	.word	0x20000b90
 80024a8:	0800ddac 	.word	0x0800ddac

080024ac <sd_demount>:
uint32_t total, free_space;

char buffer[128];
bool sdReady = false;
// functions
void sd_demount() {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	f_mount(NULL, "", 0);
 80024b0:	2200      	movs	r2, #0
 80024b2:	4903      	ldr	r1, [pc, #12]	; (80024c0 <sd_demount+0x14>)
 80024b4:	2000      	movs	r0, #0
 80024b6:	f007 fe19 	bl	800a0ec <f_mount>
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	0800ddb4 	.word	0x0800ddb4

080024c4 <sd_init>:

void sd_init() {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 80024c8:	2201      	movs	r2, #1
 80024ca:	490d      	ldr	r1, [pc, #52]	; (8002500 <sd_init+0x3c>)
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <sd_init+0x40>)
 80024ce:	f007 fe0d 	bl	800a0ec <f_mount>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <sd_init+0x44>)
 80024d8:	701a      	strb	r2, [r3, #0]

	if(fresult==FR_OK) {
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <sd_init+0x44>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <sd_init+0x2c>
		sdReady = true;
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <sd_init+0x48>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
		send_uart("sd status: FR_OK\n\r");
 80024e8:	4809      	ldr	r0, [pc, #36]	; (8002510 <sd_init+0x4c>)
 80024ea:	f7fe fdcd 	bl	8001088 <send_uart>
	}
	else {
		sdReady = false;
		send_uart("sd status: sd err\n\r");
	}
}
 80024ee:	e005      	b.n	80024fc <sd_init+0x38>
		sdReady = false;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <sd_init+0x48>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
		send_uart("sd status: sd err\n\r");
 80024f6:	4807      	ldr	r0, [pc, #28]	; (8002514 <sd_init+0x50>)
 80024f8:	f7fe fdc6 	bl	8001088 <send_uart>
}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	0800ddb8 	.word	0x0800ddb8
 8002504:	20000f7c 	.word	0x20000f7c
 8002508:	200013dc 	.word	0x200013dc
 800250c:	20001474 	.word	0x20001474
 8002510:	0800ddbc 	.word	0x0800ddbc
 8002514:	0800ddd0 	.word	0x0800ddd0

08002518 <sd_freespace>:

uint32_t sd_freespace() {
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	if(sdReady) {
 800251c:	4b13      	ldr	r3, [pc, #76]	; (800256c <sd_freespace+0x54>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d020      	beq.n	8002566 <sd_freespace+0x4e>
		f_getfree("", &fre_clust, &pfs);
 8002524:	4a12      	ldr	r2, [pc, #72]	; (8002570 <sd_freespace+0x58>)
 8002526:	4913      	ldr	r1, [pc, #76]	; (8002574 <sd_freespace+0x5c>)
 8002528:	4813      	ldr	r0, [pc, #76]	; (8002578 <sd_freespace+0x60>)
 800252a:	f008 fb3f 	bl	800abac <f_getfree>
		return free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <sd_freespace+0x58>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	895b      	ldrh	r3, [r3, #10]
 8002534:	461a      	mov	r2, r3
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <sd_freespace+0x5c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f7fd ffe8 	bl	8000514 <__aeabi_ui2d>
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <sd_freespace+0x64>)
 800254a:	f7fe f85d 	bl	8000608 <__aeabi_dmul>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	f7fe fb2f 	bl	8000bb8 <__aeabi_d2uiz>
 800255a:	4603      	mov	r3, r0
 800255c:	4a08      	ldr	r2, [pc, #32]	; (8002580 <sd_freespace+0x68>)
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <sd_freespace+0x68>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	e000      	b.n	8002568 <sd_freespace+0x50>
	}
	else {
		return 0;
 8002566:	2300      	movs	r3, #0
	}

}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20001474 	.word	0x20001474
 8002570:	200013e4 	.word	0x200013e4
 8002574:	200013e8 	.word	0x200013e8
 8002578:	0800ddb4 	.word	0x0800ddb4
 800257c:	3fe00000 	.word	0x3fe00000
 8002580:	200013f0 	.word	0x200013f0

08002584 <sd_totalspace>:

uint32_t sd_totalspace() {
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
	if(sdReady) {
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <sd_totalspace+0x58>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d021      	beq.n	80025d4 <sd_totalspace+0x50>
		f_getfree("", &fre_clust, &pfs);
 8002590:	4a13      	ldr	r2, [pc, #76]	; (80025e0 <sd_totalspace+0x5c>)
 8002592:	4914      	ldr	r1, [pc, #80]	; (80025e4 <sd_totalspace+0x60>)
 8002594:	4814      	ldr	r0, [pc, #80]	; (80025e8 <sd_totalspace+0x64>)
 8002596:	f008 fb09 	bl	800abac <f_getfree>
		return total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <sd_totalspace+0x5c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	3b02      	subs	r3, #2
 80025a2:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <sd_totalspace+0x5c>)
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	8952      	ldrh	r2, [r2, #10]
 80025a8:	fb02 f303 	mul.w	r3, r2, r3
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ffb1 	bl	8000514 <__aeabi_ui2d>
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <sd_totalspace+0x68>)
 80025b8:	f7fe f826 	bl	8000608 <__aeabi_dmul>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	f7fe faf8 	bl	8000bb8 <__aeabi_d2uiz>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <sd_totalspace+0x6c>)
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <sd_totalspace+0x6c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	e000      	b.n	80025d6 <sd_totalspace+0x52>
	}
	else {
		return 0;
 80025d4:	2300      	movs	r3, #0
	}

}
 80025d6:	4618      	mov	r0, r3
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20001474 	.word	0x20001474
 80025e0:	200013e4 	.word	0x200013e4
 80025e4:	200013e8 	.word	0x200013e8
 80025e8:	0800ddb4 	.word	0x0800ddb4
 80025ec:	3fe00000 	.word	0x3fe00000
 80025f0:	200013ec 	.word	0x200013ec

080025f4 <sd_readfile>:

void sd_readfile() {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
	if(sdReady) {
 80025f8:	4b13      	ldr	r3, [pc, #76]	; (8002648 <sd_readfile+0x54>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <sd_readfile+0x4e>
	fresult = f_open(&fil, "file1.txt", FA_READ); //tu odczyt
 8002600:	2201      	movs	r2, #1
 8002602:	4912      	ldr	r1, [pc, #72]	; (800264c <sd_readfile+0x58>)
 8002604:	4812      	ldr	r0, [pc, #72]	; (8002650 <sd_readfile+0x5c>)
 8002606:	f007 fdb7 	bl	800a178 <f_open>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <sd_readfile+0x60>)
 8002610:	701a      	strb	r2, [r3, #0]
		if(fresult==FR_OK) {
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <sd_readfile+0x60>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d110      	bne.n	800263c <sd_readfile+0x48>
			send_uart("opening file1.txt, data: \n\r");
 800261a:	480f      	ldr	r0, [pc, #60]	; (8002658 <sd_readfile+0x64>)
 800261c:	f7fe fd34 	bl	8001088 <send_uart>
			f_read(&fil, buffer, f_size(&fil), &br);
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <sd_readfile+0x5c>)
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	4b0d      	ldr	r3, [pc, #52]	; (800265c <sd_readfile+0x68>)
 8002626:	490e      	ldr	r1, [pc, #56]	; (8002660 <sd_readfile+0x6c>)
 8002628:	4809      	ldr	r0, [pc, #36]	; (8002650 <sd_readfile+0x5c>)
 800262a:	f007 ff63 	bl	800a4f4 <f_read>
			send_uart(buffer);
 800262e:	480c      	ldr	r0, [pc, #48]	; (8002660 <sd_readfile+0x6c>)
 8002630:	f7fe fd2a 	bl	8001088 <send_uart>
			send_uart("\n\r");
 8002634:	480b      	ldr	r0, [pc, #44]	; (8002664 <sd_readfile+0x70>)
 8002636:	f7fe fd27 	bl	8001088 <send_uart>
		}
		else {
			send_uart("error while opening file... \n\r");
		}
	}
}
 800263a:	e002      	b.n	8002642 <sd_readfile+0x4e>
			send_uart("error while opening file... \n\r");
 800263c:	480a      	ldr	r0, [pc, #40]	; (8002668 <sd_readfile+0x74>)
 800263e:	f7fe fd23 	bl	8001088 <send_uart>
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20001474 	.word	0x20001474
 800264c:	0800dde4 	.word	0x0800dde4
 8002650:	200011ac 	.word	0x200011ac
 8002654:	200013dc 	.word	0x200013dc
 8002658:	0800ddf0 	.word	0x0800ddf0
 800265c:	200013e0 	.word	0x200013e0
 8002660:	200013f4 	.word	0x200013f4
 8002664:	0800de0c 	.word	0x0800de0c
 8002668:	0800de10 	.word	0x0800de10

0800266c <sd_writefile>:

void sd_writefile() {
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
	if(sdReady) {
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <sd_writefile+0x30>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00f      	beq.n	8002698 <sd_writefile+0x2c>
		fresult = f_open(&fil, "file1.txt", FA_CREATE_ALWAYS | FA_READ | FA_WRITE); // TU ZAPIS
 8002678:	220b      	movs	r2, #11
 800267a:	4909      	ldr	r1, [pc, #36]	; (80026a0 <sd_writefile+0x34>)
 800267c:	4809      	ldr	r0, [pc, #36]	; (80026a4 <sd_writefile+0x38>)
 800267e:	f007 fd7b 	bl	800a178 <f_open>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <sd_writefile+0x3c>)
 8002688:	701a      	strb	r2, [r3, #0]
		/* Writing text */
		f_puts("test test test", &fil);
 800268a:	4906      	ldr	r1, [pc, #24]	; (80026a4 <sd_writefile+0x38>)
 800268c:	4807      	ldr	r0, [pc, #28]	; (80026ac <sd_writefile+0x40>)
 800268e:	f008 fbb9 	bl	800ae04 <f_puts>
		send_uart("file written \n\r");
 8002692:	4807      	ldr	r0, [pc, #28]	; (80026b0 <sd_writefile+0x44>)
 8002694:	f7fe fcf8 	bl	8001088 <send_uart>
	}
}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20001474 	.word	0x20001474
 80026a0:	0800dde4 	.word	0x0800dde4
 80026a4:	200011ac 	.word	0x200011ac
 80026a8:	200013dc 	.word	0x200013dc
 80026ac:	0800de30 	.word	0x0800de30
 80026b0:	0800de40 	.word	0x0800de40

080026b4 <sd_closefile>:

void sd_closefile() {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
	if(sdReady) {
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <sd_closefile+0x24>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <sd_closefile+0x20>
		fresult = f_close(&fil);
 80026c0:	4806      	ldr	r0, [pc, #24]	; (80026dc <sd_closefile+0x28>)
 80026c2:	f008 fa49 	bl	800ab58 <f_close>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <sd_closefile+0x2c>)
 80026cc:	701a      	strb	r2, [r3, #0]
		send_uart("closing file\n\r");
 80026ce:	4805      	ldr	r0, [pc, #20]	; (80026e4 <sd_closefile+0x30>)
 80026d0:	f7fe fcda 	bl	8001088 <send_uart>
	}
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20001474 	.word	0x20001474
 80026dc:	200011ac 	.word	0x200011ac
 80026e0:	200013dc 	.word	0x200013dc
 80026e4:	0800de50 	.word	0x0800de50

080026e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_MspInit+0x4c>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <HAL_MspInit+0x4c>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_MspInit+0x4c>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_MspInit+0x4c>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <HAL_MspInit+0x4c>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_MspInit+0x4c>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800

08002738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <HAL_ADC_MspInit+0x7c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d127      	bne.n	80027aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <HAL_ADC_MspInit+0x80>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <HAL_ADC_MspInit+0x80>)
 8002764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <HAL_ADC_MspInit+0x80>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <HAL_ADC_MspInit+0x80>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <HAL_ADC_MspInit+0x80>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_ADC_MspInit+0x80>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN0_INT_Pin|ADC1_IN1_INT_Pin|ADC1_IN2_INT_Pin|ADC1_IN3_INT_Pin;
 8002792:	230f      	movs	r3, #15
 8002794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002796:	2303      	movs	r3, #3
 8002798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	f107 0314 	add.w	r3, r7, #20
 80027a2:	4619      	mov	r1, r3
 80027a4:	4805      	ldr	r0, [pc, #20]	; (80027bc <HAL_ADC_MspInit+0x84>)
 80027a6:	f001 fecf 	bl	8004548 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027aa:	bf00      	nop
 80027ac:	3728      	adds	r7, #40	; 0x28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40012000 	.word	0x40012000
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40020000 	.word	0x40020000

080027c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	; 0x30
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 031c 	add.w	r3, r7, #28
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a3b      	ldr	r2, [pc, #236]	; (80028cc <HAL_I2C_MspInit+0x10c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d12c      	bne.n	800283c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	4b3a      	ldr	r3, [pc, #232]	; (80028d0 <HAL_I2C_MspInit+0x110>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a39      	ldr	r2, [pc, #228]	; (80028d0 <HAL_I2C_MspInit+0x110>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <HAL_I2C_MspInit+0x110>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	61bb      	str	r3, [r7, #24]
 80027fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
 80027fe:	23c0      	movs	r3, #192	; 0xc0
 8002800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002802:	2312      	movs	r3, #18
 8002804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280a:	2303      	movs	r3, #3
 800280c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800280e:	2304      	movs	r3, #4
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002812:	f107 031c 	add.w	r3, r7, #28
 8002816:	4619      	mov	r1, r3
 8002818:	482e      	ldr	r0, [pc, #184]	; (80028d4 <HAL_I2C_MspInit+0x114>)
 800281a:	f001 fe95 	bl	8004548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_I2C_MspInit+0x110>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a2a      	ldr	r2, [pc, #168]	; (80028d0 <HAL_I2C_MspInit+0x110>)
 8002828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <HAL_I2C_MspInit+0x110>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800283a:	e042      	b.n	80028c2 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <HAL_I2C_MspInit+0x118>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d13d      	bne.n	80028c2 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <HAL_I2C_MspInit+0x110>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <HAL_I2C_MspInit+0x110>)
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <HAL_I2C_MspInit+0x110>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SCL_ADS_Pin;
 8002862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002868:	2312      	movs	r3, #18
 800286a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002874:	2304      	movs	r3, #4
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCL_ADS_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	4815      	ldr	r0, [pc, #84]	; (80028d4 <HAL_I2C_MspInit+0x114>)
 8002880:	f001 fe62 	bl	8004548 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDA_ADS_Pin;
 8002884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800288a:	2312      	movs	r3, #18
 800288c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002892:	2303      	movs	r3, #3
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002896:	2309      	movs	r3, #9
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDA_ADS_GPIO_Port, &GPIO_InitStruct);
 800289a:	f107 031c 	add.w	r3, r7, #28
 800289e:	4619      	mov	r1, r3
 80028a0:	480c      	ldr	r0, [pc, #48]	; (80028d4 <HAL_I2C_MspInit+0x114>)
 80028a2:	f001 fe51 	bl	8004548 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <HAL_I2C_MspInit+0x110>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	4a08      	ldr	r2, [pc, #32]	; (80028d0 <HAL_I2C_MspInit+0x110>)
 80028b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028b4:	6413      	str	r3, [r2, #64]	; 0x40
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_I2C_MspInit+0x110>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
}
 80028c2:	bf00      	nop
 80028c4:	3730      	adds	r7, #48	; 0x30
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40005400 	.word	0x40005400
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40005800 	.word	0x40005800

080028dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028e4:	f107 0308 	add.w	r3, r7, #8
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
 80028f4:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a0c      	ldr	r2, [pc, #48]	; (800292c <HAL_RTC_MspInit+0x50>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d111      	bne.n	8002924 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002900:	2302      	movs	r3, #2
 8002902:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002908:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800290a:	f107 0308 	add.w	r3, r7, #8
 800290e:	4618      	mov	r0, r3
 8002910:	f003 f89c 	bl	8005a4c <HAL_RCCEx_PeriphCLKConfig>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800291a:	f7ff f8e5 	bl	8001ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800291e:	4b04      	ldr	r3, [pc, #16]	; (8002930 <HAL_RTC_MspInit+0x54>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002924:	bf00      	nop
 8002926:	3720      	adds	r7, #32
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40002800 	.word	0x40002800
 8002930:	42470e3c 	.word	0x42470e3c

08002934 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	; 0x28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a19      	ldr	r2, [pc, #100]	; (80029b8 <HAL_SPI_MspInit+0x84>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d12b      	bne.n	80029ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	4b18      	ldr	r3, [pc, #96]	; (80029bc <HAL_SPI_MspInit+0x88>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	4a17      	ldr	r2, [pc, #92]	; (80029bc <HAL_SPI_MspInit+0x88>)
 8002960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002964:	6453      	str	r3, [r2, #68]	; 0x44
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_SPI_MspInit+0x88>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_SPI_MspInit+0x88>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_SPI_MspInit+0x88>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_SPI_MspInit+0x88>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_SD_Pin|MISO_SD_Pin|MOSI_SD_Pin;
 800298e:	23e0      	movs	r3, #224	; 0xe0
 8002990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299a:	2303      	movs	r3, #3
 800299c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800299e:	2305      	movs	r3, #5
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	4619      	mov	r1, r3
 80029a8:	4805      	ldr	r0, [pc, #20]	; (80029c0 <HAL_SPI_MspInit+0x8c>)
 80029aa:	f001 fdcd 	bl	8004548 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029ae:	bf00      	nop
 80029b0:	3728      	adds	r7, #40	; 0x28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40013000 	.word	0x40013000
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40020000 	.word	0x40020000

080029c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	; 0x28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a21      	ldr	r2, [pc, #132]	; (8002a68 <HAL_TIM_Encoder_MspInit+0xa4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d13c      	bne.n	8002a60 <HAL_TIM_Encoder_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xa8>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a1f      	ldr	r2, [pc, #124]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xa8>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xa8>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xa8>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xa8>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <HAL_TIM_Encoder_MspInit+0xa8>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8002a1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a30:	2301      	movs	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	f107 0314 	add.w	r3, r7, #20
 8002a38:	4619      	mov	r1, r3
 8002a3a:	480d      	ldr	r0, [pc, #52]	; (8002a70 <HAL_TIM_Encoder_MspInit+0xac>)
 8002a3c:	f001 fd84 	bl	8004548 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002a40:	2200      	movs	r2, #0
 8002a42:	2100      	movs	r1, #0
 8002a44:	2019      	movs	r0, #25
 8002a46:	f001 fd48 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a4a:	2019      	movs	r0, #25
 8002a4c:	f001 fd61 	bl	8004512 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2100      	movs	r1, #0
 8002a54:	201a      	movs	r0, #26
 8002a56:	f001 fd40 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002a5a:	201a      	movs	r0, #26
 8002a5c:	f001 fd59 	bl	8004512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002a60:	bf00      	nop
 8002a62:	3728      	adds	r7, #40	; 0x28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40010000 	.word	0x40010000
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020000 	.word	0x40020000

08002a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a84:	d116      	bne.n	8002ab4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	4b28      	ldr	r3, [pc, #160]	; (8002b2c <HAL_TIM_Base_MspInit+0xb8>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <HAL_TIM_Base_MspInit+0xb8>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <HAL_TIM_Base_MspInit+0xb8>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	201c      	movs	r0, #28
 8002aa8:	f001 fd17 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002aac:	201c      	movs	r0, #28
 8002aae:	f001 fd30 	bl	8004512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002ab2:	e036      	b.n	8002b22 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <HAL_TIM_Base_MspInit+0xbc>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d116      	bne.n	8002aec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <HAL_TIM_Base_MspInit+0xb8>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <HAL_TIM_Base_MspInit+0xb8>)
 8002ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002acc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ace:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <HAL_TIM_Base_MspInit+0xb8>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2100      	movs	r1, #0
 8002ade:	2019      	movs	r0, #25
 8002ae0:	f001 fcfb 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ae4:	2019      	movs	r0, #25
 8002ae6:	f001 fd14 	bl	8004512 <HAL_NVIC_EnableIRQ>
}
 8002aea:	e01a      	b.n	8002b22 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <HAL_TIM_Base_MspInit+0xc0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d115      	bne.n	8002b22 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <HAL_TIM_Base_MspInit+0xb8>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <HAL_TIM_Base_MspInit+0xb8>)
 8002b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b04:	6453      	str	r3, [r2, #68]	; 0x44
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_TIM_Base_MspInit+0xb8>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2100      	movs	r1, #0
 8002b16:	201a      	movs	r0, #26
 8002b18:	f001 fcdf 	bl	80044da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002b1c:	201a      	movs	r0, #26
 8002b1e:	f001 fcf8 	bl	8004512 <HAL_NVIC_EnableIRQ>
}
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40014400 	.word	0x40014400
 8002b34:	40014800 	.word	0x40014800

08002b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08a      	sub	sp, #40	; 0x28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <HAL_UART_MspInit+0x84>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d12c      	bne.n	8002bb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <HAL_UART_MspInit+0x88>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	4a17      	ldr	r2, [pc, #92]	; (8002bc0 <HAL_UART_MspInit+0x88>)
 8002b64:	f043 0320 	orr.w	r3, r3, #32
 8002b68:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <HAL_UART_MspInit+0x88>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HAL_UART_MspInit+0x88>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	4a10      	ldr	r2, [pc, #64]	; (8002bc0 <HAL_UART_MspInit+0x88>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6313      	str	r3, [r2, #48]	; 0x30
 8002b86:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <HAL_UART_MspInit+0x88>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ba4:	2308      	movs	r3, #8
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	4619      	mov	r1, r3
 8002bae:	4805      	ldr	r0, [pc, #20]	; (8002bc4 <HAL_UART_MspInit+0x8c>)
 8002bb0:	f001 fcca 	bl	8004548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002bb4:	bf00      	nop
 8002bb6:	3728      	adds	r7, #40	; 0x28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40011400 	.word	0x40011400
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020000 	.word	0x40020000

08002bc8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002bcc:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <SDTimer_Handler+0x40>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d006      	beq.n	8002be4 <SDTimer_Handler+0x1c>
    Timer1--;
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <SDTimer_Handler+0x40>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <SDTimer_Handler+0x40>)
 8002be2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <SDTimer_Handler+0x44>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <SDTimer_Handler+0x34>
    Timer2--;
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <SDTimer_Handler+0x44>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <SDTimer_Handler+0x44>)
 8002bfa:	701a      	strb	r2, [r3, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20001476 	.word	0x20001476
 8002c0c:	20001477 	.word	0x20001477

08002c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <NMI_Handler+0x4>

08002c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <HardFault_Handler+0x4>

08002c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <MemManage_Handler+0x4>

08002c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c26:	e7fe      	b.n	8002c26 <BusFault_Handler+0x4>

08002c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c2c:	e7fe      	b.n	8002c2c <UsageFault_Handler+0x4>

08002c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <SysTick_Handler+0x30>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <SysTick_Handler+0x30>)
 8002c68:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <SysTick_Handler+0x30>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b09      	cmp	r3, #9
 8002c72:	d904      	bls.n	8002c7e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <SysTick_Handler+0x30>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8002c7a:	f7ff ffa5 	bl	8002bc8 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c7e:	f001 f89b 	bl	8003db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20001475 	.word	0x20001475

08002c8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8002c90:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c94:	f001 fe0e 	bl	80048b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ca0:	4803      	ldr	r0, [pc, #12]	; (8002cb0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002ca2:	f004 fad9 	bl	8007258 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002ca6:	4803      	ldr	r0, [pc, #12]	; (8002cb4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002ca8:	f004 fad6 	bl	8007258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000a0c 	.word	0x20000a0c
 8002cb4:	20000a9c 	.word	0x20000a9c

08002cb8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cbc:	4803      	ldr	r0, [pc, #12]	; (8002ccc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002cbe:	f004 facb 	bl	8007258 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002cc2:	4803      	ldr	r0, [pc, #12]	; (8002cd0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002cc4:	f004 fac8 	bl	8007258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000a0c 	.word	0x20000a0c
 8002cd0:	20000ae4 	.word	0x20000ae4

08002cd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <TIM2_IRQHandler+0x10>)
 8002cda:	f004 fabd 	bl	8007258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000a54 	.word	0x20000a54

08002ce8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return 1;
 8002cec:	2301      	movs	r3, #1
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <_kill>:

int _kill(int pid, int sig)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d02:	f008 fef7 	bl	800baf4 <__errno>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2216      	movs	r2, #22
 8002d0a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_exit>:

void _exit (int status)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d20:	f04f 31ff 	mov.w	r1, #4294967295
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff ffe7 	bl	8002cf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d2a:	e7fe      	b.n	8002d2a <_exit+0x12>

08002d2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e00a      	b.n	8002d54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d3e:	f3af 8000 	nop.w
 8002d42:	4601      	mov	r1, r0
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	60ba      	str	r2, [r7, #8]
 8002d4a:	b2ca      	uxtb	r2, r1
 8002d4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3301      	adds	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	dbf0      	blt.n	8002d3e <_read+0x12>
  }

  return len;
 8002d5c:	687b      	ldr	r3, [r7, #4]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	e009      	b.n	8002d8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	60ba      	str	r2, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	dbf1      	blt.n	8002d78 <_write+0x12>
  }
  return len;
 8002d94:	687b      	ldr	r3, [r7, #4]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_close>:

int _close(int file)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dc6:	605a      	str	r2, [r3, #4]
  return 0;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <_isatty>:

int _isatty(int file)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dde:	2301      	movs	r3, #1
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <_sbrk+0x5c>)
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <_sbrk+0x60>)
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <_sbrk+0x64>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <_sbrk+0x64>)
 8002e26:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <_sbrk+0x68>)
 8002e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <_sbrk+0x64>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d207      	bcs.n	8002e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e38:	f008 fe5c 	bl	800baf4 <__errno>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	220c      	movs	r2, #12
 8002e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295
 8002e46:	e009      	b.n	8002e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <_sbrk+0x64>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <_sbrk+0x64>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	4a05      	ldr	r2, [pc, #20]	; (8002e6c <_sbrk+0x64>)
 8002e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20020000 	.word	0x20020000
 8002e68:	00000400 	.word	0x00000400
 8002e6c:	20001478 	.word	0x20001478
 8002e70:	20001a20 	.word	0x20001a20

08002e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <SystemInit+0x20>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <SystemInit+0x20>)
 8002e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002ea0:	f000 ff9e 	bl	8003de0 <HAL_GetTick>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4a04      	ldr	r2, [pc, #16]	; (8002eb8 <SPI_Timer_On+0x20>)
 8002ea8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002eaa:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <SPI_Timer_On+0x24>)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6013      	str	r3, [r2, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20001480 	.word	0x20001480
 8002ebc:	20001484 	.word	0x20001484

08002ec0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002ec4:	f000 ff8c 	bl	8003de0 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <SPI_Timer_Status+0x24>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	1ad2      	subs	r2, r2, r3
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <SPI_Timer_Status+0x28>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	bf34      	ite	cc
 8002ed8:	2301      	movcc	r3, #1
 8002eda:	2300      	movcs	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20001480 	.word	0x20001480
 8002ee8:	20001484 	.word	0x20001484

08002eec <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002ef6:	f107 020f 	add.w	r2, r7, #15
 8002efa:	1df9      	adds	r1, r7, #7
 8002efc:	2332      	movs	r3, #50	; 0x32
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	2301      	movs	r3, #1
 8002f02:	4804      	ldr	r0, [pc, #16]	; (8002f14 <xchg_spi+0x28>)
 8002f04:	f003 fb55 	bl	80065b2 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200009b4 	.word	0x200009b4

08002f18 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	e00a      	b.n	8002f3e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	18d4      	adds	r4, r2, r3
 8002f2e:	20ff      	movs	r0, #255	; 0xff
 8002f30:	f7ff ffdc 	bl	8002eec <xchg_spi>
 8002f34:	4603      	mov	r3, r0
 8002f36:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d3f0      	bcc.n	8002f28 <rcvr_spi_multi+0x10>
	}
}
 8002f46:	bf00      	nop
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd90      	pop	{r4, r7, pc}

08002f50 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4803      	ldr	r0, [pc, #12]	; (8002f74 <xmit_spi_multi+0x24>)
 8002f66:	f003 f9e8 	bl	800633a <HAL_SPI_Transmit>
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200009b4 	.word	0x200009b4

08002f78 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002f80:	f000 ff2e 	bl	8003de0 <HAL_GetTick>
 8002f84:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002f8a:	20ff      	movs	r0, #255	; 0xff
 8002f8c:	f7ff ffae 	bl	8002eec <xchg_spi>
 8002f90:	4603      	mov	r3, r0
 8002f92:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	2bff      	cmp	r3, #255	; 0xff
 8002f98:	d007      	beq.n	8002faa <wait_ready+0x32>
 8002f9a:	f000 ff21 	bl	8003de0 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d8ef      	bhi.n	8002f8a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	2bff      	cmp	r3, #255	; 0xff
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	2110      	movs	r1, #16
 8002fc8:	4803      	ldr	r0, [pc, #12]	; (8002fd8 <despiselect+0x18>)
 8002fca:	f001 fc59 	bl	8004880 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002fce:	20ff      	movs	r0, #255	; 0xff
 8002fd0:	f7ff ff8c 	bl	8002eec <xchg_spi>

}
 8002fd4:	bf00      	nop
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40020000 	.word	0x40020000

08002fdc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2110      	movs	r1, #16
 8002fe4:	4809      	ldr	r0, [pc, #36]	; (800300c <spiselect+0x30>)
 8002fe6:	f001 fc4b 	bl	8004880 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002fea:	20ff      	movs	r0, #255	; 0xff
 8002fec:	f7ff ff7e 	bl	8002eec <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002ff0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ff4:	f7ff ffc0 	bl	8002f78 <wait_ready>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <spiselect+0x26>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e002      	b.n	8003008 <spiselect+0x2c>

	despiselect();
 8003002:	f7ff ffdd 	bl	8002fc0 <despiselect>
	return 0;	/* Timeout */
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40020000 	.word	0x40020000

08003010 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800301a:	20c8      	movs	r0, #200	; 0xc8
 800301c:	f7ff ff3c 	bl	8002e98 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003020:	20ff      	movs	r0, #255	; 0xff
 8003022:	f7ff ff63 	bl	8002eec <xchg_spi>
 8003026:	4603      	mov	r3, r0
 8003028:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	2bff      	cmp	r3, #255	; 0xff
 800302e:	d104      	bne.n	800303a <rcvr_datablock+0x2a>
 8003030:	f7ff ff46 	bl	8002ec0 <SPI_Timer_Status>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f2      	bne.n	8003020 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2bfe      	cmp	r3, #254	; 0xfe
 800303e:	d001      	beq.n	8003044 <rcvr_datablock+0x34>
 8003040:	2300      	movs	r3, #0
 8003042:	e00a      	b.n	800305a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ff66 	bl	8002f18 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800304c:	20ff      	movs	r0, #255	; 0xff
 800304e:	f7ff ff4d 	bl	8002eec <xchg_spi>
 8003052:	20ff      	movs	r0, #255	; 0xff
 8003054:	f7ff ff4a 	bl	8002eec <xchg_spi>

	return 1;						/* Function succeeded */
 8003058:	2301      	movs	r3, #1
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	460b      	mov	r3, r1
 800306c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800306e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003072:	f7ff ff81 	bl	8002f78 <wait_ready>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <xmit_datablock+0x1e>
 800307c:	2300      	movs	r3, #0
 800307e:	e01e      	b.n	80030be <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff ff32 	bl	8002eec <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	2bfd      	cmp	r3, #253	; 0xfd
 800308c:	d016      	beq.n	80030bc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800308e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff ff5c 	bl	8002f50 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003098:	20ff      	movs	r0, #255	; 0xff
 800309a:	f7ff ff27 	bl	8002eec <xchg_spi>
 800309e:	20ff      	movs	r0, #255	; 0xff
 80030a0:	f7ff ff24 	bl	8002eec <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80030a4:	20ff      	movs	r0, #255	; 0xff
 80030a6:	f7ff ff21 	bl	8002eec <xchg_spi>
 80030aa:	4603      	mov	r3, r0
 80030ac:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	2b05      	cmp	r3, #5
 80030b6:	d001      	beq.n	80030bc <xmit_datablock+0x5a>
 80030b8:	2300      	movs	r3, #0
 80030ba:	e000      	b.n	80030be <xmit_datablock+0x5c>
	}
	return 1;
 80030bc:	2301      	movs	r3, #1
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	6039      	str	r1, [r7, #0]
 80030d0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	da0e      	bge.n	80030f8 <send_cmd+0x32>
		cmd &= 0x7F;
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030e0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80030e2:	2100      	movs	r1, #0
 80030e4:	2037      	movs	r0, #55	; 0x37
 80030e6:	f7ff ffee 	bl	80030c6 <send_cmd>
 80030ea:	4603      	mov	r3, r0
 80030ec:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80030ee:	7bbb      	ldrb	r3, [r7, #14]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d901      	bls.n	80030f8 <send_cmd+0x32>
 80030f4:	7bbb      	ldrb	r3, [r7, #14]
 80030f6:	e051      	b.n	800319c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	2b0c      	cmp	r3, #12
 80030fc:	d008      	beq.n	8003110 <send_cmd+0x4a>
		despiselect();
 80030fe:	f7ff ff5f 	bl	8002fc0 <despiselect>
		if (!spiselect()) return 0xFF;
 8003102:	f7ff ff6b 	bl	8002fdc <spiselect>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <send_cmd+0x4a>
 800310c:	23ff      	movs	r3, #255	; 0xff
 800310e:	e045      	b.n	800319c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003116:	b2db      	uxtb	r3, r3
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fee7 	bl	8002eec <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	0e1b      	lsrs	r3, r3, #24
 8003122:	b2db      	uxtb	r3, r3
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fee1 	bl	8002eec <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	b2db      	uxtb	r3, r3
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fedb 	bl	8002eec <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	0a1b      	lsrs	r3, r3, #8
 800313a:	b2db      	uxtb	r3, r3
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fed5 	bl	8002eec <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fed0 	bl	8002eec <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <send_cmd+0x94>
 8003156:	2395      	movs	r3, #149	; 0x95
 8003158:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d101      	bne.n	8003164 <send_cmd+0x9e>
 8003160:	2387      	movs	r3, #135	; 0x87
 8003162:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fec0 	bl	8002eec <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d102      	bne.n	8003178 <send_cmd+0xb2>
 8003172:	20ff      	movs	r0, #255	; 0xff
 8003174:	f7ff feba 	bl	8002eec <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003178:	230a      	movs	r3, #10
 800317a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800317c:	20ff      	movs	r0, #255	; 0xff
 800317e:	f7ff feb5 	bl	8002eec <xchg_spi>
 8003182:	4603      	mov	r3, r0
 8003184:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800318a:	2b00      	cmp	r3, #0
 800318c:	da05      	bge.n	800319a <send_cmd+0xd4>
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	3b01      	subs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <send_cmd+0xb6>

	return res;							/* Return received response */
 800319a:	7bbb      	ldrb	r3, [r7, #14]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <USER_SPI_initialize+0x14>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0d6      	b.n	8003366 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80031b8:	4b6d      	ldr	r3, [pc, #436]	; (8003370 <USER_SPI_initialize+0x1cc>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <USER_SPI_initialize+0x2a>
 80031c6:	4b6a      	ldr	r3, [pc, #424]	; (8003370 <USER_SPI_initialize+0x1cc>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	e0cb      	b.n	8003366 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80031ce:	4b69      	ldr	r3, [pc, #420]	; (8003374 <USER_SPI_initialize+0x1d0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80031d8:	4b66      	ldr	r3, [pc, #408]	; (8003374 <USER_SPI_initialize+0x1d0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80031e0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80031e2:	230a      	movs	r3, #10
 80031e4:	73fb      	strb	r3, [r7, #15]
 80031e6:	e005      	b.n	80031f4 <USER_SPI_initialize+0x50>
 80031e8:	20ff      	movs	r0, #255	; 0xff
 80031ea:	f7ff fe7f 	bl	8002eec <xchg_spi>
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f6      	bne.n	80031e8 <USER_SPI_initialize+0x44>

	ty = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80031fe:	2100      	movs	r1, #0
 8003200:	2000      	movs	r0, #0
 8003202:	f7ff ff60 	bl	80030c6 <send_cmd>
 8003206:	4603      	mov	r3, r0
 8003208:	2b01      	cmp	r3, #1
 800320a:	f040 808b 	bne.w	8003324 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800320e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003212:	f7ff fe41 	bl	8002e98 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003216:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800321a:	2008      	movs	r0, #8
 800321c:	f7ff ff53 	bl	80030c6 <send_cmd>
 8003220:	4603      	mov	r3, r0
 8003222:	2b01      	cmp	r3, #1
 8003224:	d151      	bne.n	80032ca <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003226:	2300      	movs	r3, #0
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	e00d      	b.n	8003248 <USER_SPI_initialize+0xa4>
 800322c:	7bfc      	ldrb	r4, [r7, #15]
 800322e:	20ff      	movs	r0, #255	; 0xff
 8003230:	f7ff fe5c 	bl	8002eec <xchg_spi>
 8003234:	4603      	mov	r3, r0
 8003236:	461a      	mov	r2, r3
 8003238:	f104 0310 	add.w	r3, r4, #16
 800323c:	443b      	add	r3, r7
 800323e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	3301      	adds	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d9ee      	bls.n	800322c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800324e:	7abb      	ldrb	r3, [r7, #10]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d167      	bne.n	8003324 <USER_SPI_initialize+0x180>
 8003254:	7afb      	ldrb	r3, [r7, #11]
 8003256:	2baa      	cmp	r3, #170	; 0xaa
 8003258:	d164      	bne.n	8003324 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800325a:	bf00      	nop
 800325c:	f7ff fe30 	bl	8002ec0 <SPI_Timer_Status>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <USER_SPI_initialize+0xd2>
 8003266:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800326a:	20a9      	movs	r0, #169	; 0xa9
 800326c:	f7ff ff2b 	bl	80030c6 <send_cmd>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f2      	bne.n	800325c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003276:	f7ff fe23 	bl	8002ec0 <SPI_Timer_Status>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d051      	beq.n	8003324 <USER_SPI_initialize+0x180>
 8003280:	2100      	movs	r1, #0
 8003282:	203a      	movs	r0, #58	; 0x3a
 8003284:	f7ff ff1f 	bl	80030c6 <send_cmd>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d14a      	bne.n	8003324 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
 8003292:	e00d      	b.n	80032b0 <USER_SPI_initialize+0x10c>
 8003294:	7bfc      	ldrb	r4, [r7, #15]
 8003296:	20ff      	movs	r0, #255	; 0xff
 8003298:	f7ff fe28 	bl	8002eec <xchg_spi>
 800329c:	4603      	mov	r3, r0
 800329e:	461a      	mov	r2, r3
 80032a0:	f104 0310 	add.w	r3, r4, #16
 80032a4:	443b      	add	r3, r7
 80032a6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	3301      	adds	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d9ee      	bls.n	8003294 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80032b6:	7a3b      	ldrb	r3, [r7, #8]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <USER_SPI_initialize+0x120>
 80032c0:	230c      	movs	r3, #12
 80032c2:	e000      	b.n	80032c6 <USER_SPI_initialize+0x122>
 80032c4:	2304      	movs	r3, #4
 80032c6:	737b      	strb	r3, [r7, #13]
 80032c8:	e02c      	b.n	8003324 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80032ca:	2100      	movs	r1, #0
 80032cc:	20a9      	movs	r0, #169	; 0xa9
 80032ce:	f7ff fefa 	bl	80030c6 <send_cmd>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d804      	bhi.n	80032e2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80032d8:	2302      	movs	r3, #2
 80032da:	737b      	strb	r3, [r7, #13]
 80032dc:	23a9      	movs	r3, #169	; 0xa9
 80032de:	73bb      	strb	r3, [r7, #14]
 80032e0:	e003      	b.n	80032ea <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80032e2:	2301      	movs	r3, #1
 80032e4:	737b      	strb	r3, [r7, #13]
 80032e6:	2301      	movs	r3, #1
 80032e8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80032ea:	bf00      	nop
 80032ec:	f7ff fde8 	bl	8002ec0 <SPI_Timer_Status>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <USER_SPI_initialize+0x162>
 80032f6:	7bbb      	ldrb	r3, [r7, #14]
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fee3 	bl	80030c6 <send_cmd>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f2      	bne.n	80032ec <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003306:	f7ff fddb 	bl	8002ec0 <SPI_Timer_Status>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <USER_SPI_initialize+0x17c>
 8003310:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003314:	2010      	movs	r0, #16
 8003316:	f7ff fed6 	bl	80030c6 <send_cmd>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <USER_SPI_initialize+0x180>
				ty = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003324:	4a14      	ldr	r2, [pc, #80]	; (8003378 <USER_SPI_initialize+0x1d4>)
 8003326:	7b7b      	ldrb	r3, [r7, #13]
 8003328:	7013      	strb	r3, [r2, #0]
	despiselect();
 800332a:	f7ff fe49 	bl	8002fc0 <despiselect>

	if (ty) {			/* OK */
 800332e:	7b7b      	ldrb	r3, [r7, #13]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d012      	beq.n	800335a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <USER_SPI_initialize+0x1d0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800333e:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <USER_SPI_initialize+0x1d0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0210 	orr.w	r2, r2, #16
 8003346:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003348:	4b09      	ldr	r3, [pc, #36]	; (8003370 <USER_SPI_initialize+0x1cc>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	b2da      	uxtb	r2, r3
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <USER_SPI_initialize+0x1cc>)
 8003356:	701a      	strb	r2, [r3, #0]
 8003358:	e002      	b.n	8003360 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <USER_SPI_initialize+0x1cc>)
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <USER_SPI_initialize+0x1cc>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	bd90      	pop	{r4, r7, pc}
 800336e:	bf00      	nop
 8003370:	20000678 	.word	0x20000678
 8003374:	200009b4 	.word	0x200009b4
 8003378:	2000147c 	.word	0x2000147c

0800337c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <USER_SPI_status+0x14>
 800338c:	2301      	movs	r3, #1
 800338e:	e002      	b.n	8003396 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <USER_SPI_status+0x28>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b2db      	uxtb	r3, r3
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20000678 	.word	0x20000678

080033a8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	4603      	mov	r3, r0
 80033b6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d102      	bne.n	80033c4 <USER_SPI_read+0x1c>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <USER_SPI_read+0x20>
 80033c4:	2304      	movs	r3, #4
 80033c6:	e04d      	b.n	8003464 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80033c8:	4b28      	ldr	r3, [pc, #160]	; (800346c <USER_SPI_read+0xc4>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <USER_SPI_read+0x32>
 80033d6:	2303      	movs	r3, #3
 80033d8:	e044      	b.n	8003464 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80033da:	4b25      	ldr	r3, [pc, #148]	; (8003470 <USER_SPI_read+0xc8>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <USER_SPI_read+0x44>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	025b      	lsls	r3, r3, #9
 80033ea:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d111      	bne.n	8003416 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	2011      	movs	r0, #17
 80033f6:	f7ff fe66 	bl	80030c6 <send_cmd>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d129      	bne.n	8003454 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003404:	68b8      	ldr	r0, [r7, #8]
 8003406:	f7ff fe03 	bl	8003010 <rcvr_datablock>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d021      	beq.n	8003454 <USER_SPI_read+0xac>
			count = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	e01e      	b.n	8003454 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	2012      	movs	r0, #18
 800341a:	f7ff fe54 	bl	80030c6 <send_cmd>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d117      	bne.n	8003454 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003428:	68b8      	ldr	r0, [r7, #8]
 800342a:	f7ff fdf1 	bl	8003010 <rcvr_datablock>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <USER_SPI_read+0xa2>
				buff += 512;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800343a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	3b01      	subs	r3, #1
 8003440:	603b      	str	r3, [r7, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ed      	bne.n	8003424 <USER_SPI_read+0x7c>
 8003448:	e000      	b.n	800344c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800344a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800344c:	2100      	movs	r1, #0
 800344e:	200c      	movs	r0, #12
 8003450:	f7ff fe39 	bl	80030c6 <send_cmd>
		}
	}
	despiselect();
 8003454:	f7ff fdb4 	bl	8002fc0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	bf14      	ite	ne
 800345e:	2301      	movne	r3, #1
 8003460:	2300      	moveq	r3, #0
 8003462:	b2db      	uxtb	r3, r3
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000678 	.word	0x20000678
 8003470:	2000147c 	.word	0x2000147c

08003474 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	4603      	mov	r3, r0
 8003482:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <USER_SPI_write+0x1c>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <USER_SPI_write+0x20>
 8003490:	2304      	movs	r3, #4
 8003492:	e063      	b.n	800355c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003494:	4b33      	ldr	r3, [pc, #204]	; (8003564 <USER_SPI_write+0xf0>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <USER_SPI_write+0x32>
 80034a2:	2303      	movs	r3, #3
 80034a4:	e05a      	b.n	800355c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80034a6:	4b2f      	ldr	r3, [pc, #188]	; (8003564 <USER_SPI_write+0xf0>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <USER_SPI_write+0x44>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e051      	b.n	800355c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80034b8:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <USER_SPI_write+0xf4>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <USER_SPI_write+0x56>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	025b      	lsls	r3, r3, #9
 80034c8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d110      	bne.n	80034f2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	2018      	movs	r0, #24
 80034d4:	f7ff fdf7 	bl	80030c6 <send_cmd>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d136      	bne.n	800354c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80034de:	21fe      	movs	r1, #254	; 0xfe
 80034e0:	68b8      	ldr	r0, [r7, #8]
 80034e2:	f7ff fdbe 	bl	8003062 <xmit_datablock>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d02f      	beq.n	800354c <USER_SPI_write+0xd8>
			count = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	e02c      	b.n	800354c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <USER_SPI_write+0xf4>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	f003 0306 	and.w	r3, r3, #6
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <USER_SPI_write+0x92>
 80034fe:	6839      	ldr	r1, [r7, #0]
 8003500:	2097      	movs	r0, #151	; 0x97
 8003502:	f7ff fde0 	bl	80030c6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	2019      	movs	r0, #25
 800350a:	f7ff fddc 	bl	80030c6 <send_cmd>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d11b      	bne.n	800354c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003514:	21fc      	movs	r1, #252	; 0xfc
 8003516:	68b8      	ldr	r0, [r7, #8]
 8003518:	f7ff fda3 	bl	8003062 <xmit_datablock>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <USER_SPI_write+0xc4>
				buff += 512;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003528:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	3b01      	subs	r3, #1
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ee      	bne.n	8003514 <USER_SPI_write+0xa0>
 8003536:	e000      	b.n	800353a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003538:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800353a:	21fd      	movs	r1, #253	; 0xfd
 800353c:	2000      	movs	r0, #0
 800353e:	f7ff fd90 	bl	8003062 <xmit_datablock>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <USER_SPI_write+0xd8>
 8003548:	2301      	movs	r3, #1
 800354a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800354c:	f7ff fd38 	bl	8002fc0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20000678 	.word	0x20000678
 8003568:	2000147c 	.word	0x2000147c

0800356c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08c      	sub	sp, #48	; 0x30
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	603a      	str	r2, [r7, #0]
 8003576:	71fb      	strb	r3, [r7, #7]
 8003578:	460b      	mov	r3, r1
 800357a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <USER_SPI_ioctl+0x1a>
 8003582:	2304      	movs	r3, #4
 8003584:	e15a      	b.n	800383c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003586:	4baf      	ldr	r3, [pc, #700]	; (8003844 <USER_SPI_ioctl+0x2d8>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <USER_SPI_ioctl+0x2c>
 8003594:	2303      	movs	r3, #3
 8003596:	e151      	b.n	800383c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800359e:	79bb      	ldrb	r3, [r7, #6]
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	f200 8136 	bhi.w	8003812 <USER_SPI_ioctl+0x2a6>
 80035a6:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <USER_SPI_ioctl+0x40>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035c1 	.word	0x080035c1
 80035b0:	080035d5 	.word	0x080035d5
 80035b4:	08003813 	.word	0x08003813
 80035b8:	08003681 	.word	0x08003681
 80035bc:	08003777 	.word	0x08003777
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80035c0:	f7ff fd0c 	bl	8002fdc <spiselect>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 8127 	beq.w	800381a <USER_SPI_ioctl+0x2ae>
 80035cc:	2300      	movs	r3, #0
 80035ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80035d2:	e122      	b.n	800381a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80035d4:	2100      	movs	r1, #0
 80035d6:	2009      	movs	r0, #9
 80035d8:	f7ff fd75 	bl	80030c6 <send_cmd>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 811d 	bne.w	800381e <USER_SPI_ioctl+0x2b2>
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	2110      	movs	r1, #16
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fd10 	bl	8003010 <rcvr_datablock>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8113 	beq.w	800381e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80035f8:	7b3b      	ldrb	r3, [r7, #12]
 80035fa:	099b      	lsrs	r3, r3, #6
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d111      	bne.n	8003626 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003602:	7d7b      	ldrb	r3, [r7, #21]
 8003604:	461a      	mov	r2, r3
 8003606:	7d3b      	ldrb	r3, [r7, #20]
 8003608:	021b      	lsls	r3, r3, #8
 800360a:	4413      	add	r3, r2
 800360c:	461a      	mov	r2, r3
 800360e:	7cfb      	ldrb	r3, [r7, #19]
 8003610:	041b      	lsls	r3, r3, #16
 8003612:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003616:	4413      	add	r3, r2
 8003618:	3301      	adds	r3, #1
 800361a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	029a      	lsls	r2, r3, #10
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e028      	b.n	8003678 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003626:	7c7b      	ldrb	r3, [r7, #17]
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	b2da      	uxtb	r2, r3
 800362e:	7dbb      	ldrb	r3, [r7, #22]
 8003630:	09db      	lsrs	r3, r3, #7
 8003632:	b2db      	uxtb	r3, r3
 8003634:	4413      	add	r3, r2
 8003636:	b2da      	uxtb	r2, r3
 8003638:	7d7b      	ldrb	r3, [r7, #21]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f003 0306 	and.w	r3, r3, #6
 8003642:	b2db      	uxtb	r3, r3
 8003644:	4413      	add	r3, r2
 8003646:	b2db      	uxtb	r3, r3
 8003648:	3302      	adds	r3, #2
 800364a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800364e:	7d3b      	ldrb	r3, [r7, #20]
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	7cfb      	ldrb	r3, [r7, #19]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	441a      	add	r2, r3
 800365c:	7cbb      	ldrb	r3, [r7, #18]
 800365e:	029b      	lsls	r3, r3, #10
 8003660:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003664:	4413      	add	r3, r2
 8003666:	3301      	adds	r3, #1
 8003668:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800366a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800366e:	3b09      	subs	r3, #9
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	409a      	lsls	r2, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800367e:	e0ce      	b.n	800381e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003680:	4b71      	ldr	r3, [pc, #452]	; (8003848 <USER_SPI_ioctl+0x2dc>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d031      	beq.n	80036f0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800368c:	2100      	movs	r1, #0
 800368e:	208d      	movs	r0, #141	; 0x8d
 8003690:	f7ff fd19 	bl	80030c6 <send_cmd>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	f040 80c3 	bne.w	8003822 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800369c:	20ff      	movs	r0, #255	; 0xff
 800369e:	f7ff fc25 	bl	8002eec <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80036a2:	f107 030c 	add.w	r3, r7, #12
 80036a6:	2110      	movs	r1, #16
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fcb1 	bl	8003010 <rcvr_datablock>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80b6 	beq.w	8003822 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80036b6:	2330      	movs	r3, #48	; 0x30
 80036b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80036bc:	e007      	b.n	80036ce <USER_SPI_ioctl+0x162>
 80036be:	20ff      	movs	r0, #255	; 0xff
 80036c0:	f7ff fc14 	bl	8002eec <xchg_spi>
 80036c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80036c8:	3b01      	subs	r3, #1
 80036ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80036ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f3      	bne.n	80036be <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80036d6:	7dbb      	ldrb	r3, [r7, #22]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	2310      	movs	r3, #16
 80036e0:	fa03 f202 	lsl.w	r2, r3, r2
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80036ee:	e098      	b.n	8003822 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80036f0:	2100      	movs	r1, #0
 80036f2:	2009      	movs	r0, #9
 80036f4:	f7ff fce7 	bl	80030c6 <send_cmd>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f040 8091 	bne.w	8003822 <USER_SPI_ioctl+0x2b6>
 8003700:	f107 030c 	add.w	r3, r7, #12
 8003704:	2110      	movs	r1, #16
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fc82 	bl	8003010 <rcvr_datablock>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8087 	beq.w	8003822 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003714:	4b4c      	ldr	r3, [pc, #304]	; (8003848 <USER_SPI_ioctl+0x2dc>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d012      	beq.n	8003746 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003720:	7dbb      	ldrb	r3, [r7, #22]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003728:	7dfa      	ldrb	r2, [r7, #23]
 800372a:	09d2      	lsrs	r2, r2, #7
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	4413      	add	r3, r2
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	7e7b      	ldrb	r3, [r7, #25]
 8003734:	099b      	lsrs	r3, r3, #6
 8003736:	b2db      	uxtb	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	461a      	mov	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e013      	b.n	800376e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003746:	7dbb      	ldrb	r3, [r7, #22]
 8003748:	109b      	asrs	r3, r3, #2
 800374a:	b29b      	uxth	r3, r3
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	3301      	adds	r3, #1
 8003752:	7dfa      	ldrb	r2, [r7, #23]
 8003754:	00d2      	lsls	r2, r2, #3
 8003756:	f002 0218 	and.w	r2, r2, #24
 800375a:	7df9      	ldrb	r1, [r7, #23]
 800375c:	0949      	lsrs	r1, r1, #5
 800375e:	b2c9      	uxtb	r1, r1
 8003760:	440a      	add	r2, r1
 8003762:	3201      	adds	r2, #1
 8003764:	fb02 f303 	mul.w	r3, r2, r3
 8003768:	461a      	mov	r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003774:	e055      	b.n	8003822 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003776:	4b34      	ldr	r3, [pc, #208]	; (8003848 <USER_SPI_ioctl+0x2dc>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	f003 0306 	and.w	r3, r3, #6
 800377e:	2b00      	cmp	r3, #0
 8003780:	d051      	beq.n	8003826 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003782:	f107 020c 	add.w	r2, r7, #12
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	210b      	movs	r1, #11
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff feee 	bl	800356c <USER_SPI_ioctl>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d149      	bne.n	800382a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003796:	7b3b      	ldrb	r3, [r7, #12]
 8003798:	099b      	lsrs	r3, r3, #6
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d104      	bne.n	80037aa <USER_SPI_ioctl+0x23e>
 80037a0:	7dbb      	ldrb	r3, [r7, #22]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d041      	beq.n	800382e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80037ba:	4b23      	ldr	r3, [pc, #140]	; (8003848 <USER_SPI_ioctl+0x2dc>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d105      	bne.n	80037d2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	025b      	lsls	r3, r3, #9
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	025b      	lsls	r3, r3, #9
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80037d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d4:	2020      	movs	r0, #32
 80037d6:	f7ff fc76 	bl	80030c6 <send_cmd>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d128      	bne.n	8003832 <USER_SPI_ioctl+0x2c6>
 80037e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037e2:	2021      	movs	r0, #33	; 0x21
 80037e4:	f7ff fc6f 	bl	80030c6 <send_cmd>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d121      	bne.n	8003832 <USER_SPI_ioctl+0x2c6>
 80037ee:	2100      	movs	r1, #0
 80037f0:	2026      	movs	r0, #38	; 0x26
 80037f2:	f7ff fc68 	bl	80030c6 <send_cmd>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d11a      	bne.n	8003832 <USER_SPI_ioctl+0x2c6>
 80037fc:	f247 5030 	movw	r0, #30000	; 0x7530
 8003800:	f7ff fbba 	bl	8002f78 <wait_ready>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d013      	beq.n	8003832 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800380a:	2300      	movs	r3, #0
 800380c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003810:	e00f      	b.n	8003832 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003812:	2304      	movs	r3, #4
 8003814:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003818:	e00c      	b.n	8003834 <USER_SPI_ioctl+0x2c8>
		break;
 800381a:	bf00      	nop
 800381c:	e00a      	b.n	8003834 <USER_SPI_ioctl+0x2c8>
		break;
 800381e:	bf00      	nop
 8003820:	e008      	b.n	8003834 <USER_SPI_ioctl+0x2c8>
		break;
 8003822:	bf00      	nop
 8003824:	e006      	b.n	8003834 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003826:	bf00      	nop
 8003828:	e004      	b.n	8003834 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800382a:	bf00      	nop
 800382c:	e002      	b.n	8003834 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <USER_SPI_ioctl+0x2c8>
		break;
 8003832:	bf00      	nop
	}

	despiselect();
 8003834:	f7ff fbc4 	bl	8002fc0 <despiselect>

	return res;
 8003838:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800383c:	4618      	mov	r0, r3
 800383e:	3730      	adds	r7, #48	; 0x30
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000678 	.word	0x20000678
 8003848:	2000147c 	.word	0x2000147c

0800384c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800384c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003884 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003850:	480d      	ldr	r0, [pc, #52]	; (8003888 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003852:	490e      	ldr	r1, [pc, #56]	; (800388c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003854:	4a0e      	ldr	r2, [pc, #56]	; (8003890 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003858:	e002      	b.n	8003860 <LoopCopyDataInit>

0800385a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800385a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800385c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800385e:	3304      	adds	r3, #4

08003860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003864:	d3f9      	bcc.n	800385a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003866:	4a0b      	ldr	r2, [pc, #44]	; (8003894 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003868:	4c0b      	ldr	r4, [pc, #44]	; (8003898 <LoopFillZerobss+0x26>)
  movs r3, #0
 800386a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800386c:	e001      	b.n	8003872 <LoopFillZerobss>

0800386e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800386e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003870:	3204      	adds	r2, #4

08003872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003874:	d3fb      	bcc.n	800386e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003876:	f7ff fafd 	bl	8002e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800387a:	f008 f941 	bl	800bb00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800387e:	f7fd fcc5 	bl	800120c <main>
  bx  lr    
 8003882:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003884:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800388c:	20000880 	.word	0x20000880
  ldr r2, =_sidata
 8003890:	08010f44 	.word	0x08010f44
  ldr r2, =_sbss
 8003894:	20000880 	.word	0x20000880
  ldr r4, =_ebss
 8003898:	20001a1c 	.word	0x20001a1c

0800389c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800389c:	e7fe      	b.n	800389c <ADC_IRQHandler>

0800389e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800389e:	b480      	push	{r7}
 80038a0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80038a2:	bf00      	nop
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af04      	add	r7, sp, #16
 80038b2:	4603      	mov	r3, r0
 80038b4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ba:	9302      	str	r3, [sp, #8]
 80038bc:	2301      	movs	r3, #1
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2301      	movs	r3, #1
 80038c6:	2200      	movs	r2, #0
 80038c8:	2178      	movs	r1, #120	; 0x78
 80038ca:	4803      	ldr	r0, [pc, #12]	; (80038d8 <ssd1306_WriteCommand+0x2c>)
 80038cc:	f001 f94e 	bl	8004b6c <HAL_I2C_Mem_Write>
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	200008ec 	.word	0x200008ec

080038dc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af04      	add	r7, sp, #16
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f04f 32ff 	mov.w	r2, #4294967295
 80038ee:	9202      	str	r2, [sp, #8]
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	2301      	movs	r3, #1
 80038f8:	2240      	movs	r2, #64	; 0x40
 80038fa:	2178      	movs	r1, #120	; 0x78
 80038fc:	4803      	ldr	r0, [pc, #12]	; (800390c <ssd1306_WriteData+0x30>)
 80038fe:	f001 f935 	bl	8004b6c <HAL_I2C_Mem_Write>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	200008ec 	.word	0x200008ec

08003910 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003914:	f7ff ffc3 	bl	800389e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003918:	2064      	movs	r0, #100	; 0x64
 800391a:	f000 fa6d 	bl	8003df8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800391e:	2000      	movs	r0, #0
 8003920:	f000 f9da 	bl	8003cd8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003924:	2020      	movs	r0, #32
 8003926:	f7ff ffc1 	bl	80038ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800392a:	2000      	movs	r0, #0
 800392c:	f7ff ffbe 	bl	80038ac <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003930:	20b0      	movs	r0, #176	; 0xb0
 8003932:	f7ff ffbb 	bl	80038ac <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003936:	20c8      	movs	r0, #200	; 0xc8
 8003938:	f7ff ffb8 	bl	80038ac <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800393c:	2000      	movs	r0, #0
 800393e:	f7ff ffb5 	bl	80038ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003942:	2010      	movs	r0, #16
 8003944:	f7ff ffb2 	bl	80038ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003948:	2040      	movs	r0, #64	; 0x40
 800394a:	f7ff ffaf 	bl	80038ac <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800394e:	20ff      	movs	r0, #255	; 0xff
 8003950:	f000 f9ae 	bl	8003cb0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003954:	20a1      	movs	r0, #161	; 0xa1
 8003956:	f7ff ffa9 	bl	80038ac <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800395a:	20a6      	movs	r0, #166	; 0xa6
 800395c:	f7ff ffa6 	bl	80038ac <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003960:	20a8      	movs	r0, #168	; 0xa8
 8003962:	f7ff ffa3 	bl	80038ac <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003966:	203f      	movs	r0, #63	; 0x3f
 8003968:	f7ff ffa0 	bl	80038ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800396c:	20a4      	movs	r0, #164	; 0xa4
 800396e:	f7ff ff9d 	bl	80038ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003972:	20d3      	movs	r0, #211	; 0xd3
 8003974:	f7ff ff9a 	bl	80038ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003978:	2000      	movs	r0, #0
 800397a:	f7ff ff97 	bl	80038ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800397e:	20d5      	movs	r0, #213	; 0xd5
 8003980:	f7ff ff94 	bl	80038ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003984:	20f0      	movs	r0, #240	; 0xf0
 8003986:	f7ff ff91 	bl	80038ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800398a:	20d9      	movs	r0, #217	; 0xd9
 800398c:	f7ff ff8e 	bl	80038ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003990:	2022      	movs	r0, #34	; 0x22
 8003992:	f7ff ff8b 	bl	80038ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003996:	20da      	movs	r0, #218	; 0xda
 8003998:	f7ff ff88 	bl	80038ac <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800399c:	2012      	movs	r0, #18
 800399e:	f7ff ff85 	bl	80038ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80039a2:	20db      	movs	r0, #219	; 0xdb
 80039a4:	f7ff ff82 	bl	80038ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80039a8:	2020      	movs	r0, #32
 80039aa:	f7ff ff7f 	bl	80038ac <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80039ae:	208d      	movs	r0, #141	; 0x8d
 80039b0:	f7ff ff7c 	bl	80038ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80039b4:	2014      	movs	r0, #20
 80039b6:	f7ff ff79 	bl	80038ac <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80039ba:	2001      	movs	r0, #1
 80039bc:	f000 f98c 	bl	8003cd8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80039c0:	2000      	movs	r0, #0
 80039c2:	f000 f80f 	bl	80039e4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80039c6:	f000 f831 	bl	8003a2c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80039ca:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <ssd1306_Init+0xd0>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <ssd1306_Init+0xd0>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80039d6:	4b02      	ldr	r3, [pc, #8]	; (80039e0 <ssd1306_Init+0xd0>)
 80039d8:	2201      	movs	r2, #1
 80039da:	711a      	strb	r2, [r3, #4]
}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20001888 	.word	0x20001888

080039e4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	e00d      	b.n	8003a10 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <ssd1306_Fill+0x1a>
 80039fa:	2100      	movs	r1, #0
 80039fc:	e000      	b.n	8003a00 <ssd1306_Fill+0x1c>
 80039fe:	21ff      	movs	r1, #255	; 0xff
 8003a00:	4a09      	ldr	r2, [pc, #36]	; (8003a28 <ssd1306_Fill+0x44>)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4413      	add	r3, r2
 8003a06:	460a      	mov	r2, r1
 8003a08:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a16:	d3ed      	bcc.n	80039f4 <ssd1306_Fill+0x10>
    }
}
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20001488 	.word	0x20001488

08003a2c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003a32:	2300      	movs	r3, #0
 8003a34:	71fb      	strb	r3, [r7, #7]
 8003a36:	e016      	b.n	8003a66 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003a38:	79fb      	ldrb	r3, [r7, #7]
 8003a3a:	3b50      	subs	r3, #80	; 0x50
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff ff34 	bl	80038ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7ff ff31 	bl	80038ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003a4a:	2010      	movs	r0, #16
 8003a4c:	f7ff ff2e 	bl	80038ac <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	01db      	lsls	r3, r3, #7
 8003a54:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <ssd1306_UpdateScreen+0x4c>)
 8003a56:	4413      	add	r3, r2
 8003a58:	2180      	movs	r1, #128	; 0x80
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff ff3e 	bl	80038dc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	3301      	adds	r3, #1
 8003a64:	71fb      	strb	r3, [r7, #7]
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	2b07      	cmp	r3, #7
 8003a6a:	d9e5      	bls.n	8003a38 <ssd1306_UpdateScreen+0xc>
    }
}
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20001488 	.word	0x20001488

08003a7c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
 8003a86:	460b      	mov	r3, r1
 8003a88:	71bb      	strb	r3, [r7, #6]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	db3d      	blt.n	8003b12 <ssd1306_DrawPixel+0x96>
 8003a96:	79bb      	ldrb	r3, [r7, #6]
 8003a98:	2b3f      	cmp	r3, #63	; 0x3f
 8003a9a:	d83a      	bhi.n	8003b12 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003a9c:	797b      	ldrb	r3, [r7, #5]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d11a      	bne.n	8003ad8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003aa2:	79fa      	ldrb	r2, [r7, #7]
 8003aa4:	79bb      	ldrb	r3, [r7, #6]
 8003aa6:	08db      	lsrs	r3, r3, #3
 8003aa8:	b2d8      	uxtb	r0, r3
 8003aaa:	4603      	mov	r3, r0
 8003aac:	01db      	lsls	r3, r3, #7
 8003aae:	4413      	add	r3, r2
 8003ab0:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <ssd1306_DrawPixel+0xa4>)
 8003ab2:	5cd3      	ldrb	r3, [r2, r3]
 8003ab4:	b25a      	sxtb	r2, r3
 8003ab6:	79bb      	ldrb	r3, [r7, #6]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	2101      	movs	r1, #1
 8003abe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac2:	b25b      	sxtb	r3, r3
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	b259      	sxtb	r1, r3
 8003ac8:	79fa      	ldrb	r2, [r7, #7]
 8003aca:	4603      	mov	r3, r0
 8003acc:	01db      	lsls	r3, r3, #7
 8003ace:	4413      	add	r3, r2
 8003ad0:	b2c9      	uxtb	r1, r1
 8003ad2:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <ssd1306_DrawPixel+0xa4>)
 8003ad4:	54d1      	strb	r1, [r2, r3]
 8003ad6:	e01d      	b.n	8003b14 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003ad8:	79fa      	ldrb	r2, [r7, #7]
 8003ada:	79bb      	ldrb	r3, [r7, #6]
 8003adc:	08db      	lsrs	r3, r3, #3
 8003ade:	b2d8      	uxtb	r0, r3
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	01db      	lsls	r3, r3, #7
 8003ae4:	4413      	add	r3, r2
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	; (8003b20 <ssd1306_DrawPixel+0xa4>)
 8003ae8:	5cd3      	ldrb	r3, [r2, r3]
 8003aea:	b25a      	sxtb	r2, r3
 8003aec:	79bb      	ldrb	r3, [r7, #6]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	2101      	movs	r1, #1
 8003af4:	fa01 f303 	lsl.w	r3, r1, r3
 8003af8:	b25b      	sxtb	r3, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	b25b      	sxtb	r3, r3
 8003afe:	4013      	ands	r3, r2
 8003b00:	b259      	sxtb	r1, r3
 8003b02:	79fa      	ldrb	r2, [r7, #7]
 8003b04:	4603      	mov	r3, r0
 8003b06:	01db      	lsls	r3, r3, #7
 8003b08:	4413      	add	r3, r2
 8003b0a:	b2c9      	uxtb	r1, r1
 8003b0c:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <ssd1306_DrawPixel+0xa4>)
 8003b0e:	54d1      	strb	r1, [r2, r3]
 8003b10:	e000      	b.n	8003b14 <ssd1306_DrawPixel+0x98>
        return;
 8003b12:	bf00      	nop
    }
}
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20001488 	.word	0x20001488

08003b24 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003b24:	b590      	push	{r4, r7, lr}
 8003b26:	b089      	sub	sp, #36	; 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	1d38      	adds	r0, r7, #4
 8003b2e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003b32:	461a      	mov	r2, r3
 8003b34:	4623      	mov	r3, r4
 8003b36:	73fb      	strb	r3, [r7, #15]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b1f      	cmp	r3, #31
 8003b40:	d902      	bls.n	8003b48 <ssd1306_WriteChar+0x24>
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b7e      	cmp	r3, #126	; 0x7e
 8003b46:	d901      	bls.n	8003b4c <ssd1306_WriteChar+0x28>
        return 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e06d      	b.n	8003c28 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003b4c:	4b38      	ldr	r3, [pc, #224]	; (8003c30 <ssd1306_WriteChar+0x10c>)
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	793b      	ldrb	r3, [r7, #4]
 8003b54:	4413      	add	r3, r2
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	dc06      	bgt.n	8003b68 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003b5a:	4b35      	ldr	r3, [pc, #212]	; (8003c30 <ssd1306_WriteChar+0x10c>)
 8003b5c:	885b      	ldrh	r3, [r3, #2]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	797b      	ldrb	r3, [r7, #5]
 8003b62:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003b64:	2b40      	cmp	r3, #64	; 0x40
 8003b66:	dd01      	ble.n	8003b6c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e05d      	b.n	8003c28 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	e04c      	b.n	8003c0c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	3b20      	subs	r3, #32
 8003b78:	7979      	ldrb	r1, [r7, #5]
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	4619      	mov	r1, r3
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	440b      	add	r3, r1
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	e034      	b.n	8003bfc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d012      	beq.n	8003bc8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003ba2:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <ssd1306_WriteChar+0x10c>)
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	4413      	add	r3, r2
 8003bae:	b2d8      	uxtb	r0, r3
 8003bb0:	4b1f      	ldr	r3, [pc, #124]	; (8003c30 <ssd1306_WriteChar+0x10c>)
 8003bb2:	885b      	ldrh	r3, [r3, #2]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	7bba      	ldrb	r2, [r7, #14]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f7ff ff5b 	bl	8003a7c <ssd1306_DrawPixel>
 8003bc6:	e016      	b.n	8003bf6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003bc8:	4b19      	ldr	r3, [pc, #100]	; (8003c30 <ssd1306_WriteChar+0x10c>)
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	b2d8      	uxtb	r0, r3
 8003bd6:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <ssd1306_WriteChar+0x10c>)
 8003bd8:	885b      	ldrh	r3, [r3, #2]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	4413      	add	r3, r2
 8003be2:	b2d9      	uxtb	r1, r3
 8003be4:	7bbb      	ldrb	r3, [r7, #14]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	f7ff ff43 	bl	8003a7c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	793b      	ldrb	r3, [r7, #4]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d3c5      	bcc.n	8003b92 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	797b      	ldrb	r3, [r7, #5]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d3ad      	bcc.n	8003b72 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <ssd1306_WriteChar+0x10c>)
 8003c18:	881a      	ldrh	r2, [r3, #0]
 8003c1a:	793b      	ldrb	r3, [r7, #4]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <ssd1306_WriteChar+0x10c>)
 8003c24:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3724      	adds	r7, #36	; 0x24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd90      	pop	{r4, r7, pc}
 8003c30:	20001888 	.word	0x20001888

08003c34 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	1d38      	adds	r0, r7, #4
 8003c3e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003c42:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8003c44:	e012      	b.n	8003c6c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	7818      	ldrb	r0, [r3, #0]
 8003c4a:	78fb      	ldrb	r3, [r7, #3]
 8003c4c:	1d3a      	adds	r2, r7, #4
 8003c4e:	ca06      	ldmia	r2, {r1, r2}
 8003c50:	f7ff ff68 	bl	8003b24 <ssd1306_WriteChar>
 8003c54:	4603      	mov	r3, r0
 8003c56:	461a      	mov	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d002      	beq.n	8003c66 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	e008      	b.n	8003c78 <ssd1306_WriteString+0x44>
        }
        str++;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e8      	bne.n	8003c46 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	781b      	ldrb	r3, [r3, #0]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	460a      	mov	r2, r1
 8003c8a:	71fb      	strb	r3, [r7, #7]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <ssd1306_SetCursor+0x2c>)
 8003c96:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003c98:	79bb      	ldrb	r3, [r7, #6]
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	4b03      	ldr	r3, [pc, #12]	; (8003cac <ssd1306_SetCursor+0x2c>)
 8003c9e:	805a      	strh	r2, [r3, #2]
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	20001888 	.word	0x20001888

08003cb0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003cba:	2381      	movs	r3, #129	; 0x81
 8003cbc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fdf3 	bl	80038ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fdef 	bl	80038ac <ssd1306_WriteCommand>
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003ce8:	23af      	movs	r3, #175	; 0xaf
 8003cea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003cec:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <ssd1306_SetDisplayOn+0x38>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	715a      	strb	r2, [r3, #5]
 8003cf2:	e004      	b.n	8003cfe <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003cf4:	23ae      	movs	r3, #174	; 0xae
 8003cf6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <ssd1306_SetDisplayOn+0x38>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fdd3 	bl	80038ac <ssd1306_WriteCommand>
}
 8003d06:	bf00      	nop
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20001888 	.word	0x20001888

08003d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <HAL_Init+0x40>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0d      	ldr	r2, [pc, #52]	; (8003d54 <HAL_Init+0x40>)
 8003d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_Init+0x40>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <HAL_Init+0x40>)
 8003d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d30:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <HAL_Init+0x40>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a07      	ldr	r2, [pc, #28]	; (8003d54 <HAL_Init+0x40>)
 8003d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d3c:	2003      	movs	r0, #3
 8003d3e:	f000 fbc1 	bl	80044c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d42:	200f      	movs	r0, #15
 8003d44:	f000 f808 	bl	8003d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d48:	f7fe fcce 	bl	80026e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023c00 	.word	0x40023c00

08003d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <HAL_InitTick+0x54>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_InitTick+0x58>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fbd9 	bl	800452e <HAL_SYSTICK_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e00e      	b.n	8003da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b0f      	cmp	r3, #15
 8003d8a:	d80a      	bhi.n	8003da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	f000 fba1 	bl	80044da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d98:	4a06      	ldr	r2, [pc, #24]	; (8003db4 <HAL_InitTick+0x5c>)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e000      	b.n	8003da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000674 	.word	0x20000674
 8003db0:	200006a0 	.word	0x200006a0
 8003db4:	2000069c 	.word	0x2000069c

08003db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dbc:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_IncTick+0x20>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_IncTick+0x24>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	4a04      	ldr	r2, [pc, #16]	; (8003ddc <HAL_IncTick+0x24>)
 8003dca:	6013      	str	r3, [r2, #0]
}
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	200006a0 	.word	0x200006a0
 8003ddc:	20001890 	.word	0x20001890

08003de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return uwTick;
 8003de4:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <HAL_GetTick+0x14>)
 8003de6:	681b      	ldr	r3, [r3, #0]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20001890 	.word	0x20001890

08003df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e00:	f7ff ffee 	bl	8003de0 <HAL_GetTick>
 8003e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d005      	beq.n	8003e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e12:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <HAL_Delay+0x44>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e1e:	bf00      	nop
 8003e20:	f7ff ffde 	bl	8003de0 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d8f7      	bhi.n	8003e20 <HAL_Delay+0x28>
  {
  }
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	200006a0 	.word	0x200006a0

08003e40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e033      	b.n	8003ebe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fe fc6a 	bl	8002738 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d118      	bne.n	8003eb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e86:	f023 0302 	bic.w	r3, r3, #2
 8003e8a:	f043 0202 	orr.w	r2, r3, #2
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f94a 	bl	800412c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f023 0303 	bic.w	r3, r3, #3
 8003ea6:	f043 0201 	orr.w	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	641a      	str	r2, [r3, #64]	; 0x40
 8003eae:	e001      	b.n	8003eb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x1c>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e113      	b.n	800410c <HAL_ADC_ConfigChannel+0x244>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b09      	cmp	r3, #9
 8003ef2:	d925      	bls.n	8003f40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68d9      	ldr	r1, [r3, #12]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	4613      	mov	r3, r2
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4413      	add	r3, r2
 8003f08:	3b1e      	subs	r3, #30
 8003f0a:	2207      	movs	r2, #7
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43da      	mvns	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	400a      	ands	r2, r1
 8003f18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68d9      	ldr	r1, [r3, #12]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4403      	add	r3, r0
 8003f32:	3b1e      	subs	r3, #30
 8003f34:	409a      	lsls	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	e022      	b.n	8003f86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6919      	ldr	r1, [r3, #16]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4613      	mov	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4413      	add	r3, r2
 8003f54:	2207      	movs	r2, #7
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43da      	mvns	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	400a      	ands	r2, r1
 8003f62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6919      	ldr	r1, [r3, #16]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	4618      	mov	r0, r3
 8003f76:	4603      	mov	r3, r0
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	4403      	add	r3, r0
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b06      	cmp	r3, #6
 8003f8c:	d824      	bhi.n	8003fd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3b05      	subs	r3, #5
 8003fa0:	221f      	movs	r2, #31
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43da      	mvns	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	400a      	ands	r2, r1
 8003fae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3b05      	subs	r3, #5
 8003fca:	fa00 f203 	lsl.w	r2, r0, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8003fd6:	e04c      	b.n	8004072 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b0c      	cmp	r3, #12
 8003fde:	d824      	bhi.n	800402a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	3b23      	subs	r3, #35	; 0x23
 8003ff2:	221f      	movs	r2, #31
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43da      	mvns	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	400a      	ands	r2, r1
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	b29b      	uxth	r3, r3
 800400e:	4618      	mov	r0, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	3b23      	subs	r3, #35	; 0x23
 800401c:	fa00 f203 	lsl.w	r2, r0, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
 8004028:	e023      	b.n	8004072 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	3b41      	subs	r3, #65	; 0x41
 800403c:	221f      	movs	r2, #31
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43da      	mvns	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	400a      	ands	r2, r1
 800404a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	b29b      	uxth	r3, r3
 8004058:	4618      	mov	r0, r3
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	3b41      	subs	r3, #65	; 0x41
 8004066:	fa00 f203 	lsl.w	r2, r0, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004072:	4b29      	ldr	r3, [pc, #164]	; (8004118 <HAL_ADC_ConfigChannel+0x250>)
 8004074:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a28      	ldr	r2, [pc, #160]	; (800411c <HAL_ADC_ConfigChannel+0x254>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d10f      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x1d8>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b12      	cmp	r3, #18
 8004086:	d10b      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1d      	ldr	r2, [pc, #116]	; (800411c <HAL_ADC_ConfigChannel+0x254>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d12b      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x23a>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <HAL_ADC_ConfigChannel+0x258>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <HAL_ADC_ConfigChannel+0x1f4>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b11      	cmp	r3, #17
 80040ba:	d122      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a11      	ldr	r2, [pc, #68]	; (8004120 <HAL_ADC_ConfigChannel+0x258>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d111      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040de:	4b11      	ldr	r3, [pc, #68]	; (8004124 <HAL_ADC_ConfigChannel+0x25c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a11      	ldr	r2, [pc, #68]	; (8004128 <HAL_ADC_ConfigChannel+0x260>)
 80040e4:	fba2 2303 	umull	r2, r3, r2, r3
 80040e8:	0c9a      	lsrs	r2, r3, #18
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80040f4:	e002      	b.n	80040fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f9      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40012300 	.word	0x40012300
 800411c:	40012000 	.word	0x40012000
 8004120:	10000012 	.word	0x10000012
 8004124:	20000674 	.word	0x20000674
 8004128:	431bde83 	.word	0x431bde83

0800412c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004134:	4b79      	ldr	r3, [pc, #484]	; (800431c <ADC_Init+0x1f0>)
 8004136:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	431a      	orrs	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	021a      	lsls	r2, r3, #8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6859      	ldr	r1, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6899      	ldr	r1, [r3, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	4a58      	ldr	r2, [pc, #352]	; (8004320 <ADC_Init+0x1f4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d022      	beq.n	800420a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6899      	ldr	r1, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6899      	ldr	r1, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	609a      	str	r2, [r3, #8]
 8004208:	e00f      	b.n	800422a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004228:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0202 	bic.w	r2, r2, #2
 8004238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6899      	ldr	r1, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	7e1b      	ldrb	r3, [r3, #24]
 8004244:	005a      	lsls	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01b      	beq.n	8004290 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004266:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004276:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6859      	ldr	r1, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	3b01      	subs	r3, #1
 8004284:	035a      	lsls	r2, r3, #13
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	e007      	b.n	80042a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800429e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80042ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	051a      	lsls	r2, r3, #20
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6899      	ldr	r1, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042e2:	025a      	lsls	r2, r3, #9
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6899      	ldr	r1, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	029a      	lsls	r2, r3, #10
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	609a      	str	r2, [r3, #8]
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	40012300 	.word	0x40012300
 8004320:	0f000001 	.word	0x0f000001

08004324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <__NVIC_SetPriorityGrouping+0x44>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004340:	4013      	ands	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800434c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004356:	4a04      	ldr	r2, [pc, #16]	; (8004368 <__NVIC_SetPriorityGrouping+0x44>)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	60d3      	str	r3, [r2, #12]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	e000ed00 	.word	0xe000ed00

0800436c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <__NVIC_GetPriorityGrouping+0x18>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	0a1b      	lsrs	r3, r3, #8
 8004376:	f003 0307 	and.w	r3, r3, #7
}
 800437a:	4618      	mov	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	e000ed00 	.word	0xe000ed00

08004388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004396:	2b00      	cmp	r3, #0
 8004398:	db0b      	blt.n	80043b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	f003 021f 	and.w	r2, r3, #31
 80043a0:	4907      	ldr	r1, [pc, #28]	; (80043c0 <__NVIC_EnableIRQ+0x38>)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	2001      	movs	r0, #1
 80043aa:	fa00 f202 	lsl.w	r2, r0, r2
 80043ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	e000e100 	.word	0xe000e100

080043c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	6039      	str	r1, [r7, #0]
 80043ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	db0a      	blt.n	80043ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	490c      	ldr	r1, [pc, #48]	; (8004410 <__NVIC_SetPriority+0x4c>)
 80043de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e2:	0112      	lsls	r2, r2, #4
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	440b      	add	r3, r1
 80043e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043ec:	e00a      	b.n	8004404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	4908      	ldr	r1, [pc, #32]	; (8004414 <__NVIC_SetPriority+0x50>)
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	3b04      	subs	r3, #4
 80043fc:	0112      	lsls	r2, r2, #4
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	440b      	add	r3, r1
 8004402:	761a      	strb	r2, [r3, #24]
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	e000e100 	.word	0xe000e100
 8004414:	e000ed00 	.word	0xe000ed00

08004418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004418:	b480      	push	{r7}
 800441a:	b089      	sub	sp, #36	; 0x24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f1c3 0307 	rsb	r3, r3, #7
 8004432:	2b04      	cmp	r3, #4
 8004434:	bf28      	it	cs
 8004436:	2304      	movcs	r3, #4
 8004438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	3304      	adds	r3, #4
 800443e:	2b06      	cmp	r3, #6
 8004440:	d902      	bls.n	8004448 <NVIC_EncodePriority+0x30>
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	3b03      	subs	r3, #3
 8004446:	e000      	b.n	800444a <NVIC_EncodePriority+0x32>
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800444c:	f04f 32ff 	mov.w	r2, #4294967295
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43da      	mvns	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	401a      	ands	r2, r3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004460:	f04f 31ff 	mov.w	r1, #4294967295
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	fa01 f303 	lsl.w	r3, r1, r3
 800446a:	43d9      	mvns	r1, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004470:	4313      	orrs	r3, r2
         );
}
 8004472:	4618      	mov	r0, r3
 8004474:	3724      	adds	r7, #36	; 0x24
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
	...

08004480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3b01      	subs	r3, #1
 800448c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004490:	d301      	bcc.n	8004496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004492:	2301      	movs	r3, #1
 8004494:	e00f      	b.n	80044b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004496:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <SysTick_Config+0x40>)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3b01      	subs	r3, #1
 800449c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800449e:	210f      	movs	r1, #15
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
 80044a4:	f7ff ff8e 	bl	80043c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <SysTick_Config+0x40>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044ae:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <SysTick_Config+0x40>)
 80044b0:	2207      	movs	r2, #7
 80044b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	e000e010 	.word	0xe000e010

080044c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff29 	bl	8004324 <__NVIC_SetPriorityGrouping>
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044da:	b580      	push	{r7, lr}
 80044dc:	b086      	sub	sp, #24
 80044de:	af00      	add	r7, sp, #0
 80044e0:	4603      	mov	r3, r0
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044ec:	f7ff ff3e 	bl	800436c <__NVIC_GetPriorityGrouping>
 80044f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	6978      	ldr	r0, [r7, #20]
 80044f8:	f7ff ff8e 	bl	8004418 <NVIC_EncodePriority>
 80044fc:	4602      	mov	r2, r0
 80044fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff ff5d 	bl	80043c4 <__NVIC_SetPriority>
}
 800450a:	bf00      	nop
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b082      	sub	sp, #8
 8004516:	af00      	add	r7, sp, #0
 8004518:	4603      	mov	r3, r0
 800451a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800451c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff ff31 	bl	8004388 <__NVIC_EnableIRQ>
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff ffa2 	bl	8004480 <SysTick_Config>
 800453c:	4603      	mov	r3, r0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004548:	b480      	push	{r7}
 800454a:	b089      	sub	sp, #36	; 0x24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004556:	2300      	movs	r3, #0
 8004558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	e159      	b.n	8004818 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004564:	2201      	movs	r2, #1
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	429a      	cmp	r2, r3
 800457e:	f040 8148 	bne.w	8004812 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b01      	cmp	r3, #1
 800458c:	d005      	beq.n	800459a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004596:	2b02      	cmp	r3, #2
 8004598:	d130      	bne.n	80045fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	2203      	movs	r2, #3
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4013      	ands	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045d0:	2201      	movs	r2, #1
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 0201 	and.w	r2, r3, #1
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	2b03      	cmp	r3, #3
 8004606:	d017      	beq.n	8004638 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	2203      	movs	r2, #3
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	43db      	mvns	r3, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4013      	ands	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4313      	orrs	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d123      	bne.n	800468c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	08da      	lsrs	r2, r3, #3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3208      	adds	r2, #8
 800464c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	220f      	movs	r2, #15
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	4013      	ands	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4313      	orrs	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	08da      	lsrs	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3208      	adds	r2, #8
 8004686:	69b9      	ldr	r1, [r7, #24]
 8004688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	2203      	movs	r2, #3
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4013      	ands	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 0203 	and.w	r2, r3, #3
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80a2 	beq.w	8004812 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	4b57      	ldr	r3, [pc, #348]	; (8004830 <HAL_GPIO_Init+0x2e8>)
 80046d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d6:	4a56      	ldr	r2, [pc, #344]	; (8004830 <HAL_GPIO_Init+0x2e8>)
 80046d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046dc:	6453      	str	r3, [r2, #68]	; 0x44
 80046de:	4b54      	ldr	r3, [pc, #336]	; (8004830 <HAL_GPIO_Init+0x2e8>)
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046ea:	4a52      	ldr	r2, [pc, #328]	; (8004834 <HAL_GPIO_Init+0x2ec>)
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	3302      	adds	r3, #2
 80046f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	220f      	movs	r2, #15
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4013      	ands	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a49      	ldr	r2, [pc, #292]	; (8004838 <HAL_GPIO_Init+0x2f0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d019      	beq.n	800474a <HAL_GPIO_Init+0x202>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a48      	ldr	r2, [pc, #288]	; (800483c <HAL_GPIO_Init+0x2f4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <HAL_GPIO_Init+0x1fe>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a47      	ldr	r2, [pc, #284]	; (8004840 <HAL_GPIO_Init+0x2f8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00d      	beq.n	8004742 <HAL_GPIO_Init+0x1fa>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a46      	ldr	r2, [pc, #280]	; (8004844 <HAL_GPIO_Init+0x2fc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d007      	beq.n	800473e <HAL_GPIO_Init+0x1f6>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a45      	ldr	r2, [pc, #276]	; (8004848 <HAL_GPIO_Init+0x300>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <HAL_GPIO_Init+0x1f2>
 8004736:	2304      	movs	r3, #4
 8004738:	e008      	b.n	800474c <HAL_GPIO_Init+0x204>
 800473a:	2307      	movs	r3, #7
 800473c:	e006      	b.n	800474c <HAL_GPIO_Init+0x204>
 800473e:	2303      	movs	r3, #3
 8004740:	e004      	b.n	800474c <HAL_GPIO_Init+0x204>
 8004742:	2302      	movs	r3, #2
 8004744:	e002      	b.n	800474c <HAL_GPIO_Init+0x204>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <HAL_GPIO_Init+0x204>
 800474a:	2300      	movs	r3, #0
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	f002 0203 	and.w	r2, r2, #3
 8004752:	0092      	lsls	r2, r2, #2
 8004754:	4093      	lsls	r3, r2
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800475c:	4935      	ldr	r1, [pc, #212]	; (8004834 <HAL_GPIO_Init+0x2ec>)
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	089b      	lsrs	r3, r3, #2
 8004762:	3302      	adds	r3, #2
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800476a:	4b38      	ldr	r3, [pc, #224]	; (800484c <HAL_GPIO_Init+0x304>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	43db      	mvns	r3, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4013      	ands	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800478e:	4a2f      	ldr	r2, [pc, #188]	; (800484c <HAL_GPIO_Init+0x304>)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004794:	4b2d      	ldr	r3, [pc, #180]	; (800484c <HAL_GPIO_Init+0x304>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047b8:	4a24      	ldr	r2, [pc, #144]	; (800484c <HAL_GPIO_Init+0x304>)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047be:	4b23      	ldr	r3, [pc, #140]	; (800484c <HAL_GPIO_Init+0x304>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047e2:	4a1a      	ldr	r2, [pc, #104]	; (800484c <HAL_GPIO_Init+0x304>)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047e8:	4b18      	ldr	r3, [pc, #96]	; (800484c <HAL_GPIO_Init+0x304>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800480c:	4a0f      	ldr	r2, [pc, #60]	; (800484c <HAL_GPIO_Init+0x304>)
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	3301      	adds	r3, #1
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	2b0f      	cmp	r3, #15
 800481c:	f67f aea2 	bls.w	8004564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	3724      	adds	r7, #36	; 0x24
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40023800 	.word	0x40023800
 8004834:	40013800 	.word	0x40013800
 8004838:	40020000 	.word	0x40020000
 800483c:	40020400 	.word	0x40020400
 8004840:	40020800 	.word	0x40020800
 8004844:	40020c00 	.word	0x40020c00
 8004848:	40021000 	.word	0x40021000
 800484c:	40013c00 	.word	0x40013c00

08004850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	887b      	ldrh	r3, [r7, #2]
 8004862:	4013      	ands	r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
 800486c:	e001      	b.n	8004872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004872:	7bfb      	ldrb	r3, [r7, #15]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	807b      	strh	r3, [r7, #2]
 800488c:	4613      	mov	r3, r2
 800488e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004890:	787b      	ldrb	r3, [r7, #1]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004896:	887a      	ldrh	r2, [r7, #2]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800489c:	e003      	b.n	80048a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800489e:	887b      	ldrh	r3, [r7, #2]
 80048a0:	041a      	lsls	r2, r3, #16
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	619a      	str	r2, [r3, #24]
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	88fb      	ldrh	r3, [r7, #6]
 80048c4:	4013      	ands	r3, r2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d006      	beq.n	80048d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048ca:	4a05      	ldr	r2, [pc, #20]	; (80048e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048d0:	88fb      	ldrh	r3, [r7, #6]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fc fc74 	bl	80011c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80048d8:	bf00      	nop
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40013c00 	.word	0x40013c00

080048e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e12b      	b.n	8004b4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fd ff58 	bl	80027c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2224      	movs	r2, #36	; 0x24
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0201 	bic.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004936:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004946:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004948:	f001 f858 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 800494c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4a81      	ldr	r2, [pc, #516]	; (8004b58 <HAL_I2C_Init+0x274>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d807      	bhi.n	8004968 <HAL_I2C_Init+0x84>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4a80      	ldr	r2, [pc, #512]	; (8004b5c <HAL_I2C_Init+0x278>)
 800495c:	4293      	cmp	r3, r2
 800495e:	bf94      	ite	ls
 8004960:	2301      	movls	r3, #1
 8004962:	2300      	movhi	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	e006      	b.n	8004976 <HAL_I2C_Init+0x92>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4a7d      	ldr	r2, [pc, #500]	; (8004b60 <HAL_I2C_Init+0x27c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	bf94      	ite	ls
 8004970:	2301      	movls	r3, #1
 8004972:	2300      	movhi	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e0e7      	b.n	8004b4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4a78      	ldr	r2, [pc, #480]	; (8004b64 <HAL_I2C_Init+0x280>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	0c9b      	lsrs	r3, r3, #18
 8004988:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	4a6a      	ldr	r2, [pc, #424]	; (8004b58 <HAL_I2C_Init+0x274>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d802      	bhi.n	80049b8 <HAL_I2C_Init+0xd4>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	3301      	adds	r3, #1
 80049b6:	e009      	b.n	80049cc <HAL_I2C_Init+0xe8>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	4a69      	ldr	r2, [pc, #420]	; (8004b68 <HAL_I2C_Init+0x284>)
 80049c4:	fba2 2303 	umull	r2, r3, r2, r3
 80049c8:	099b      	lsrs	r3, r3, #6
 80049ca:	3301      	adds	r3, #1
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	430b      	orrs	r3, r1
 80049d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	495c      	ldr	r1, [pc, #368]	; (8004b58 <HAL_I2C_Init+0x274>)
 80049e8:	428b      	cmp	r3, r1
 80049ea:	d819      	bhi.n	8004a20 <HAL_I2C_Init+0x13c>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	1e59      	subs	r1, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80049fa:	1c59      	adds	r1, r3, #1
 80049fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a00:	400b      	ands	r3, r1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_I2C_Init+0x138>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1e59      	subs	r1, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a14:	3301      	adds	r3, #1
 8004a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1a:	e051      	b.n	8004ac0 <HAL_I2C_Init+0x1dc>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	e04f      	b.n	8004ac0 <HAL_I2C_Init+0x1dc>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d111      	bne.n	8004a4c <HAL_I2C_Init+0x168>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	1e58      	subs	r0, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6859      	ldr	r1, [r3, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	440b      	add	r3, r1
 8004a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	e012      	b.n	8004a72 <HAL_I2C_Init+0x18e>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	1e58      	subs	r0, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6859      	ldr	r1, [r3, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	0099      	lsls	r1, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a62:	3301      	adds	r3, #1
 8004a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bf0c      	ite	eq
 8004a6c:	2301      	moveq	r3, #1
 8004a6e:	2300      	movne	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <HAL_I2C_Init+0x196>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e022      	b.n	8004ac0 <HAL_I2C_Init+0x1dc>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10e      	bne.n	8004aa0 <HAL_I2C_Init+0x1bc>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1e58      	subs	r0, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6859      	ldr	r1, [r3, #4]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	440b      	add	r3, r1
 8004a90:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a94:	3301      	adds	r3, #1
 8004a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9e:	e00f      	b.n	8004ac0 <HAL_I2C_Init+0x1dc>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	1e58      	subs	r0, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6859      	ldr	r1, [r3, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	0099      	lsls	r1, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	6809      	ldr	r1, [r1, #0]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004aee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6911      	ldr	r1, [r2, #16]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68d2      	ldr	r2, [r2, #12]
 8004afa:	4311      	orrs	r1, r2
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	430b      	orrs	r3, r1
 8004b02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	000186a0 	.word	0x000186a0
 8004b5c:	001e847f 	.word	0x001e847f
 8004b60:	003d08ff 	.word	0x003d08ff
 8004b64:	431bde83 	.word	0x431bde83
 8004b68:	10624dd3 	.word	0x10624dd3

08004b6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	4608      	mov	r0, r1
 8004b76:	4611      	mov	r1, r2
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	817b      	strh	r3, [r7, #10]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	813b      	strh	r3, [r7, #8]
 8004b82:	4613      	mov	r3, r2
 8004b84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b86:	f7ff f92b 	bl	8003de0 <HAL_GetTick>
 8004b8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	f040 80d9 	bne.w	8004d4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	2319      	movs	r3, #25
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	496d      	ldr	r1, [pc, #436]	; (8004d58 <HAL_I2C_Mem_Write+0x1ec>)
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f971 	bl	8004e8c <I2C_WaitOnFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e0cc      	b.n	8004d4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_I2C_Mem_Write+0x56>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e0c5      	b.n	8004d4e <HAL_I2C_Mem_Write+0x1e2>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d007      	beq.n	8004be8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2221      	movs	r2, #33	; 0x21
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2240      	movs	r2, #64	; 0x40
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a3a      	ldr	r2, [r7, #32]
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4a4d      	ldr	r2, [pc, #308]	; (8004d5c <HAL_I2C_Mem_Write+0x1f0>)
 8004c28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c2a:	88f8      	ldrh	r0, [r7, #6]
 8004c2c:	893a      	ldrh	r2, [r7, #8]
 8004c2e:	8979      	ldrh	r1, [r7, #10]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	9301      	str	r3, [sp, #4]
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	4603      	mov	r3, r0
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f890 	bl	8004d60 <I2C_RequestMemoryWrite>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d052      	beq.n	8004cec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e081      	b.n	8004d4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f9f2 	bl	8005038 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00d      	beq.n	8004c76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d107      	bne.n	8004c72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e06b      	b.n	8004d4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	781a      	ldrb	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d11b      	bne.n	8004cec <HAL_I2C_Mem_Write+0x180>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d017      	beq.n	8004cec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	781a      	ldrb	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1aa      	bne.n	8004c4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f9de 	bl	80050ba <I2C_WaitOnBTFFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00d      	beq.n	8004d20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d107      	bne.n	8004d1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e016      	b.n	8004d4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e000      	b.n	8004d4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
  }
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	00100002 	.word	0x00100002
 8004d5c:	ffff0000 	.word	0xffff0000

08004d60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	4608      	mov	r0, r1
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4603      	mov	r3, r0
 8004d70:	817b      	strh	r3, [r7, #10]
 8004d72:	460b      	mov	r3, r1
 8004d74:	813b      	strh	r3, [r7, #8]
 8004d76:	4613      	mov	r3, r2
 8004d78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f878 	bl	8004e8c <I2C_WaitOnFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00d      	beq.n	8004dbe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db0:	d103      	bne.n	8004dba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e05f      	b.n	8004e7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dbe:	897b      	ldrh	r3, [r7, #10]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	6a3a      	ldr	r2, [r7, #32]
 8004dd2:	492d      	ldr	r1, [pc, #180]	; (8004e88 <I2C_RequestMemoryWrite+0x128>)
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f8b0 	bl	8004f3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e04c      	b.n	8004e7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfc:	6a39      	ldr	r1, [r7, #32]
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f91a 	bl	8005038 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00d      	beq.n	8004e26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d107      	bne.n	8004e22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e02b      	b.n	8004e7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d105      	bne.n	8004e38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e2c:	893b      	ldrh	r3, [r7, #8]
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	611a      	str	r2, [r3, #16]
 8004e36:	e021      	b.n	8004e7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e38:	893b      	ldrh	r3, [r7, #8]
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e48:	6a39      	ldr	r1, [r7, #32]
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f8f4 	bl	8005038 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00d      	beq.n	8004e72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d107      	bne.n	8004e6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e005      	b.n	8004e7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e72:	893b      	ldrh	r3, [r7, #8]
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	00010002 	.word	0x00010002

08004e8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e9c:	e025      	b.n	8004eea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea4:	d021      	beq.n	8004eea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea6:	f7fe ff9b 	bl	8003de0 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d302      	bcc.n	8004ebc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d116      	bne.n	8004eea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f043 0220 	orr.w	r2, r3, #32
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e023      	b.n	8004f32 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	0c1b      	lsrs	r3, r3, #16
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d10d      	bne.n	8004f10 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	43da      	mvns	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4013      	ands	r3, r2
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bf0c      	ite	eq
 8004f06:	2301      	moveq	r3, #1
 8004f08:	2300      	movne	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	e00c      	b.n	8004f2a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	43da      	mvns	r2, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bf0c      	ite	eq
 8004f22:	2301      	moveq	r3, #1
 8004f24:	2300      	movne	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d0b6      	beq.n	8004e9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
 8004f46:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f48:	e051      	b.n	8004fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f58:	d123      	bne.n	8004fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f68:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f72:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f043 0204 	orr.w	r2, r3, #4
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e046      	b.n	8005030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa8:	d021      	beq.n	8004fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004faa:	f7fe ff19 	bl	8003de0 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d302      	bcc.n	8004fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d116      	bne.n	8004fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f043 0220 	orr.w	r2, r3, #32
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e020      	b.n	8005030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	0c1b      	lsrs	r3, r3, #16
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d10c      	bne.n	8005012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	43da      	mvns	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4013      	ands	r3, r2
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	bf14      	ite	ne
 800500a:	2301      	movne	r3, #1
 800500c:	2300      	moveq	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	e00b      	b.n	800502a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	43da      	mvns	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4013      	ands	r3, r2
 800501e:	b29b      	uxth	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	bf14      	ite	ne
 8005024:	2301      	movne	r3, #1
 8005026:	2300      	moveq	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d18d      	bne.n	8004f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005044:	e02d      	b.n	80050a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f878 	bl	800513c <I2C_IsAcknowledgeFailed>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e02d      	b.n	80050b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505c:	d021      	beq.n	80050a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800505e:	f7fe febf 	bl	8003de0 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	429a      	cmp	r2, r3
 800506c:	d302      	bcc.n	8005074 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d116      	bne.n	80050a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e007      	b.n	80050b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ac:	2b80      	cmp	r3, #128	; 0x80
 80050ae:	d1ca      	bne.n	8005046 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050c6:	e02d      	b.n	8005124 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f837 	bl	800513c <I2C_IsAcknowledgeFailed>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e02d      	b.n	8005134 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d021      	beq.n	8005124 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e0:	f7fe fe7e 	bl	8003de0 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d302      	bcc.n	80050f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d116      	bne.n	8005124 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	f043 0220 	orr.w	r2, r3, #32
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e007      	b.n	8005134 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b04      	cmp	r3, #4
 8005130:	d1ca      	bne.n	80050c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800514e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005152:	d11b      	bne.n	800518c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800515c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	f043 0204 	orr.w	r2, r3, #4
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e000      	b.n	800518e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
	...

0800519c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e267      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d075      	beq.n	80052a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051ba:	4b88      	ldr	r3, [pc, #544]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 030c 	and.w	r3, r3, #12
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d00c      	beq.n	80051e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051c6:	4b85      	ldr	r3, [pc, #532]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d112      	bne.n	80051f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051d2:	4b82      	ldr	r3, [pc, #520]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051de:	d10b      	bne.n	80051f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e0:	4b7e      	ldr	r3, [pc, #504]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d05b      	beq.n	80052a4 <HAL_RCC_OscConfig+0x108>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d157      	bne.n	80052a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e242      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005200:	d106      	bne.n	8005210 <HAL_RCC_OscConfig+0x74>
 8005202:	4b76      	ldr	r3, [pc, #472]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a75      	ldr	r2, [pc, #468]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	e01d      	b.n	800524c <HAL_RCC_OscConfig+0xb0>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005218:	d10c      	bne.n	8005234 <HAL_RCC_OscConfig+0x98>
 800521a:	4b70      	ldr	r3, [pc, #448]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a6f      	ldr	r2, [pc, #444]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	4b6d      	ldr	r3, [pc, #436]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a6c      	ldr	r2, [pc, #432]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 800522c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	e00b      	b.n	800524c <HAL_RCC_OscConfig+0xb0>
 8005234:	4b69      	ldr	r3, [pc, #420]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a68      	ldr	r2, [pc, #416]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 800523a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	4b66      	ldr	r3, [pc, #408]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a65      	ldr	r2, [pc, #404]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800524a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d013      	beq.n	800527c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005254:	f7fe fdc4 	bl	8003de0 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800525c:	f7fe fdc0 	bl	8003de0 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b64      	cmp	r3, #100	; 0x64
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e207      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526e:	4b5b      	ldr	r3, [pc, #364]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0xc0>
 800527a:	e014      	b.n	80052a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527c:	f7fe fdb0 	bl	8003de0 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005284:	f7fe fdac 	bl	8003de0 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b64      	cmp	r3, #100	; 0x64
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e1f3      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005296:	4b51      	ldr	r3, [pc, #324]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0xe8>
 80052a2:	e000      	b.n	80052a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d063      	beq.n	800537a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052b2:	4b4a      	ldr	r3, [pc, #296]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00b      	beq.n	80052d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052be:	4b47      	ldr	r3, [pc, #284]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d11c      	bne.n	8005304 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ca:	4b44      	ldr	r3, [pc, #272]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d116      	bne.n	8005304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052d6:	4b41      	ldr	r3, [pc, #260]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <HAL_RCC_OscConfig+0x152>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d001      	beq.n	80052ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e1c7      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ee:	4b3b      	ldr	r3, [pc, #236]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4937      	ldr	r1, [pc, #220]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005302:	e03a      	b.n	800537a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d020      	beq.n	800534e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800530c:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <HAL_RCC_OscConfig+0x244>)
 800530e:	2201      	movs	r2, #1
 8005310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005312:	f7fe fd65 	bl	8003de0 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800531a:	f7fe fd61 	bl	8003de0 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e1a8      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800532c:	4b2b      	ldr	r3, [pc, #172]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0f0      	beq.n	800531a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005338:	4b28      	ldr	r3, [pc, #160]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	4925      	ldr	r1, [pc, #148]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005348:	4313      	orrs	r3, r2
 800534a:	600b      	str	r3, [r1, #0]
 800534c:	e015      	b.n	800537a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800534e:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fe fd44 	bl	8003de0 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800535c:	f7fe fd40 	bl	8003de0 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e187      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800536e:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d036      	beq.n	80053f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d016      	beq.n	80053bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800538e:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <HAL_RCC_OscConfig+0x248>)
 8005390:	2201      	movs	r2, #1
 8005392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005394:	f7fe fd24 	bl	8003de0 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800539c:	f7fe fd20 	bl	8003de0 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e167      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ae:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80053b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0x200>
 80053ba:	e01b      	b.n	80053f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <HAL_RCC_OscConfig+0x248>)
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c2:	f7fe fd0d 	bl	8003de0 <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053c8:	e00e      	b.n	80053e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ca:	f7fe fd09 	bl	8003de0 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d907      	bls.n	80053e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e150      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
 80053dc:	40023800 	.word	0x40023800
 80053e0:	42470000 	.word	0x42470000
 80053e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053e8:	4b88      	ldr	r3, [pc, #544]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80053ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1ea      	bne.n	80053ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8097 	beq.w	8005530 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005402:	2300      	movs	r3, #0
 8005404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005406:	4b81      	ldr	r3, [pc, #516]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10f      	bne.n	8005432 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	4b7d      	ldr	r3, [pc, #500]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	4a7c      	ldr	r2, [pc, #496]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800541c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005420:	6413      	str	r3, [r2, #64]	; 0x40
 8005422:	4b7a      	ldr	r3, [pc, #488]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800542a:	60bb      	str	r3, [r7, #8]
 800542c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800542e:	2301      	movs	r3, #1
 8005430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005432:	4b77      	ldr	r3, [pc, #476]	; (8005610 <HAL_RCC_OscConfig+0x474>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d118      	bne.n	8005470 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800543e:	4b74      	ldr	r3, [pc, #464]	; (8005610 <HAL_RCC_OscConfig+0x474>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a73      	ldr	r2, [pc, #460]	; (8005610 <HAL_RCC_OscConfig+0x474>)
 8005444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800544a:	f7fe fcc9 	bl	8003de0 <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005452:	f7fe fcc5 	bl	8003de0 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e10c      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005464:	4b6a      	ldr	r3, [pc, #424]	; (8005610 <HAL_RCC_OscConfig+0x474>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f0      	beq.n	8005452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d106      	bne.n	8005486 <HAL_RCC_OscConfig+0x2ea>
 8005478:	4b64      	ldr	r3, [pc, #400]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800547a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547c:	4a63      	ldr	r2, [pc, #396]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	6713      	str	r3, [r2, #112]	; 0x70
 8005484:	e01c      	b.n	80054c0 <HAL_RCC_OscConfig+0x324>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	2b05      	cmp	r3, #5
 800548c:	d10c      	bne.n	80054a8 <HAL_RCC_OscConfig+0x30c>
 800548e:	4b5f      	ldr	r3, [pc, #380]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	4a5e      	ldr	r2, [pc, #376]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005494:	f043 0304 	orr.w	r3, r3, #4
 8005498:	6713      	str	r3, [r2, #112]	; 0x70
 800549a:	4b5c      	ldr	r3, [pc, #368]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	4a5b      	ldr	r2, [pc, #364]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054a0:	f043 0301 	orr.w	r3, r3, #1
 80054a4:	6713      	str	r3, [r2, #112]	; 0x70
 80054a6:	e00b      	b.n	80054c0 <HAL_RCC_OscConfig+0x324>
 80054a8:	4b58      	ldr	r3, [pc, #352]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ac:	4a57      	ldr	r2, [pc, #348]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	6713      	str	r3, [r2, #112]	; 0x70
 80054b4:	4b55      	ldr	r3, [pc, #340]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b8:	4a54      	ldr	r2, [pc, #336]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054ba:	f023 0304 	bic.w	r3, r3, #4
 80054be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d015      	beq.n	80054f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c8:	f7fe fc8a 	bl	8003de0 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ce:	e00a      	b.n	80054e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054d0:	f7fe fc86 	bl	8003de0 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	f241 3288 	movw	r2, #5000	; 0x1388
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e0cb      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e6:	4b49      	ldr	r3, [pc, #292]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0ee      	beq.n	80054d0 <HAL_RCC_OscConfig+0x334>
 80054f2:	e014      	b.n	800551e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f4:	f7fe fc74 	bl	8003de0 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054fa:	e00a      	b.n	8005512 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054fc:	f7fe fc70 	bl	8003de0 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f241 3288 	movw	r2, #5000	; 0x1388
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e0b5      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005512:	4b3e      	ldr	r3, [pc, #248]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1ee      	bne.n	80054fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800551e:	7dfb      	ldrb	r3, [r7, #23]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d105      	bne.n	8005530 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005524:	4b39      	ldr	r3, [pc, #228]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	4a38      	ldr	r2, [pc, #224]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800552a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800552e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 80a1 	beq.w	800567c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800553a:	4b34      	ldr	r3, [pc, #208]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b08      	cmp	r3, #8
 8005544:	d05c      	beq.n	8005600 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d141      	bne.n	80055d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800554e:	4b31      	ldr	r3, [pc, #196]	; (8005614 <HAL_RCC_OscConfig+0x478>)
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005554:	f7fe fc44 	bl	8003de0 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800555c:	f7fe fc40 	bl	8003de0 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e087      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800556e:	4b27      	ldr	r3, [pc, #156]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69da      	ldr	r2, [r3, #28]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	019b      	lsls	r3, r3, #6
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	3b01      	subs	r3, #1
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	061b      	lsls	r3, r3, #24
 800559e:	491b      	ldr	r1, [pc, #108]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055a4:	4b1b      	ldr	r3, [pc, #108]	; (8005614 <HAL_RCC_OscConfig+0x478>)
 80055a6:	2201      	movs	r2, #1
 80055a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055aa:	f7fe fc19 	bl	8003de0 <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055b2:	f7fe fc15 	bl	8003de0 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e05c      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c4:	4b11      	ldr	r3, [pc, #68]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f0      	beq.n	80055b2 <HAL_RCC_OscConfig+0x416>
 80055d0:	e054      	b.n	800567c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d2:	4b10      	ldr	r3, [pc, #64]	; (8005614 <HAL_RCC_OscConfig+0x478>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d8:	f7fe fc02 	bl	8003de0 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e0:	f7fe fbfe 	bl	8003de0 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e045      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055f2:	4b06      	ldr	r3, [pc, #24]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f0      	bne.n	80055e0 <HAL_RCC_OscConfig+0x444>
 80055fe:	e03d      	b.n	800567c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d107      	bne.n	8005618 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e038      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
 800560c:	40023800 	.word	0x40023800
 8005610:	40007000 	.word	0x40007000
 8005614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005618:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <HAL_RCC_OscConfig+0x4ec>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d028      	beq.n	8005678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005630:	429a      	cmp	r2, r3
 8005632:	d121      	bne.n	8005678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800563e:	429a      	cmp	r2, r3
 8005640:	d11a      	bne.n	8005678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005648:	4013      	ands	r3, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800564e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005650:	4293      	cmp	r3, r2
 8005652:	d111      	bne.n	8005678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	3b01      	subs	r3, #1
 8005662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005664:	429a      	cmp	r2, r3
 8005666:	d107      	bne.n	8005678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005674:	429a      	cmp	r2, r3
 8005676:	d001      	beq.n	800567c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40023800 	.word	0x40023800

0800568c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e0cc      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056a0:	4b68      	ldr	r3, [pc, #416]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d90c      	bls.n	80056c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ae:	4b65      	ldr	r3, [pc, #404]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b6:	4b63      	ldr	r3, [pc, #396]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d001      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0b8      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d020      	beq.n	8005716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056e0:	4b59      	ldr	r3, [pc, #356]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4a58      	ldr	r2, [pc, #352]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056f8:	4b53      	ldr	r3, [pc, #332]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	4a52      	ldr	r2, [pc, #328]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005704:	4b50      	ldr	r3, [pc, #320]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	494d      	ldr	r1, [pc, #308]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	4313      	orrs	r3, r2
 8005714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d044      	beq.n	80057ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d107      	bne.n	800573a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572a:	4b47      	ldr	r3, [pc, #284]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d119      	bne.n	800576a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e07f      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d003      	beq.n	800574a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005746:	2b03      	cmp	r3, #3
 8005748:	d107      	bne.n	800575a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574a:	4b3f      	ldr	r3, [pc, #252]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e06f      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800575a:	4b3b      	ldr	r3, [pc, #236]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e067      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800576a:	4b37      	ldr	r3, [pc, #220]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f023 0203 	bic.w	r2, r3, #3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	4934      	ldr	r1, [pc, #208]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005778:	4313      	orrs	r3, r2
 800577a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800577c:	f7fe fb30 	bl	8003de0 <HAL_GetTick>
 8005780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005782:	e00a      	b.n	800579a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005784:	f7fe fb2c 	bl	8003de0 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e04f      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800579a:	4b2b      	ldr	r3, [pc, #172]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 020c 	and.w	r2, r3, #12
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d1eb      	bne.n	8005784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057ac:	4b25      	ldr	r3, [pc, #148]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d20c      	bcs.n	80057d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ba:	4b22      	ldr	r3, [pc, #136]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c2:	4b20      	ldr	r3, [pc, #128]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d001      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e032      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e0:	4b19      	ldr	r3, [pc, #100]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4916      	ldr	r1, [pc, #88]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057fe:	4b12      	ldr	r3, [pc, #72]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	490e      	ldr	r1, [pc, #56]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	4313      	orrs	r3, r2
 8005810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005812:	f000 f821 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 8005816:	4602      	mov	r2, r0
 8005818:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	091b      	lsrs	r3, r3, #4
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	490a      	ldr	r1, [pc, #40]	; (800584c <HAL_RCC_ClockConfig+0x1c0>)
 8005824:	5ccb      	ldrb	r3, [r1, r3]
 8005826:	fa22 f303 	lsr.w	r3, r2, r3
 800582a:	4a09      	ldr	r2, [pc, #36]	; (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 800582c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800582e:	4b09      	ldr	r3, [pc, #36]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f7fe fa90 	bl	8003d58 <HAL_InitTick>

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40023c00 	.word	0x40023c00
 8005848:	40023800 	.word	0x40023800
 800584c:	0800dea4 	.word	0x0800dea4
 8005850:	20000674 	.word	0x20000674
 8005854:	2000069c 	.word	0x2000069c

08005858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800585c:	b090      	sub	sp, #64	; 0x40
 800585e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	637b      	str	r3, [r7, #52]	; 0x34
 8005864:	2300      	movs	r3, #0
 8005866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005868:	2300      	movs	r3, #0
 800586a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005870:	4b59      	ldr	r3, [pc, #356]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 030c 	and.w	r3, r3, #12
 8005878:	2b08      	cmp	r3, #8
 800587a:	d00d      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x40>
 800587c:	2b08      	cmp	r3, #8
 800587e:	f200 80a1 	bhi.w	80059c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_RCC_GetSysClockFreq+0x34>
 8005886:	2b04      	cmp	r3, #4
 8005888:	d003      	beq.n	8005892 <HAL_RCC_GetSysClockFreq+0x3a>
 800588a:	e09b      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800588c:	4b53      	ldr	r3, [pc, #332]	; (80059dc <HAL_RCC_GetSysClockFreq+0x184>)
 800588e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005890:	e09b      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005892:	4b53      	ldr	r3, [pc, #332]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005894:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005896:	e098      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005898:	4b4f      	ldr	r3, [pc, #316]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058a2:	4b4d      	ldr	r3, [pc, #308]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d028      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ae:	4b4a      	ldr	r3, [pc, #296]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	099b      	lsrs	r3, r3, #6
 80058b4:	2200      	movs	r2, #0
 80058b6:	623b      	str	r3, [r7, #32]
 80058b8:	627a      	str	r2, [r7, #36]	; 0x24
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80058c0:	2100      	movs	r1, #0
 80058c2:	4b47      	ldr	r3, [pc, #284]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80058c4:	fb03 f201 	mul.w	r2, r3, r1
 80058c8:	2300      	movs	r3, #0
 80058ca:	fb00 f303 	mul.w	r3, r0, r3
 80058ce:	4413      	add	r3, r2
 80058d0:	4a43      	ldr	r2, [pc, #268]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80058d2:	fba0 1202 	umull	r1, r2, r0, r2
 80058d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058d8:	460a      	mov	r2, r1
 80058da:	62ba      	str	r2, [r7, #40]	; 0x28
 80058dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058de:	4413      	add	r3, r2
 80058e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e4:	2200      	movs	r2, #0
 80058e6:	61bb      	str	r3, [r7, #24]
 80058e8:	61fa      	str	r2, [r7, #28]
 80058ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80058f2:	f7fb f981 	bl	8000bf8 <__aeabi_uldivmod>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4613      	mov	r3, r2
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058fe:	e053      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005900:	4b35      	ldr	r3, [pc, #212]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	099b      	lsrs	r3, r3, #6
 8005906:	2200      	movs	r2, #0
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	617a      	str	r2, [r7, #20]
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005912:	f04f 0b00 	mov.w	fp, #0
 8005916:	4652      	mov	r2, sl
 8005918:	465b      	mov	r3, fp
 800591a:	f04f 0000 	mov.w	r0, #0
 800591e:	f04f 0100 	mov.w	r1, #0
 8005922:	0159      	lsls	r1, r3, #5
 8005924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005928:	0150      	lsls	r0, r2, #5
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	ebb2 080a 	subs.w	r8, r2, sl
 8005932:	eb63 090b 	sbc.w	r9, r3, fp
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005942:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005946:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800594a:	ebb2 0408 	subs.w	r4, r2, r8
 800594e:	eb63 0509 	sbc.w	r5, r3, r9
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	00eb      	lsls	r3, r5, #3
 800595c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005960:	00e2      	lsls	r2, r4, #3
 8005962:	4614      	mov	r4, r2
 8005964:	461d      	mov	r5, r3
 8005966:	eb14 030a 	adds.w	r3, r4, sl
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	eb45 030b 	adc.w	r3, r5, fp
 8005970:	607b      	str	r3, [r7, #4]
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800597e:	4629      	mov	r1, r5
 8005980:	028b      	lsls	r3, r1, #10
 8005982:	4621      	mov	r1, r4
 8005984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005988:	4621      	mov	r1, r4
 800598a:	028a      	lsls	r2, r1, #10
 800598c:	4610      	mov	r0, r2
 800598e:	4619      	mov	r1, r3
 8005990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005992:	2200      	movs	r2, #0
 8005994:	60bb      	str	r3, [r7, #8]
 8005996:	60fa      	str	r2, [r7, #12]
 8005998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800599c:	f7fb f92c 	bl	8000bf8 <__aeabi_uldivmod>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4613      	mov	r3, r2
 80059a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059a8:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	0c1b      	lsrs	r3, r3, #16
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	3301      	adds	r3, #1
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80059b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80059c2:	e002      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059c4:	4b05      	ldr	r3, [pc, #20]	; (80059dc <HAL_RCC_GetSysClockFreq+0x184>)
 80059c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80059c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3740      	adds	r7, #64	; 0x40
 80059d0:	46bd      	mov	sp, r7
 80059d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059d6:	bf00      	nop
 80059d8:	40023800 	.word	0x40023800
 80059dc:	00f42400 	.word	0x00f42400
 80059e0:	017d7840 	.word	0x017d7840

080059e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059e8:	4b03      	ldr	r3, [pc, #12]	; (80059f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80059ea:	681b      	ldr	r3, [r3, #0]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	20000674 	.word	0x20000674

080059fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a00:	f7ff fff0 	bl	80059e4 <HAL_RCC_GetHCLKFreq>
 8005a04:	4602      	mov	r2, r0
 8005a06:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	0a9b      	lsrs	r3, r3, #10
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	4903      	ldr	r1, [pc, #12]	; (8005a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a12:	5ccb      	ldrb	r3, [r1, r3]
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	0800deb4 	.word	0x0800deb4

08005a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a28:	f7ff ffdc 	bl	80059e4 <HAL_RCC_GetHCLKFreq>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	0b5b      	lsrs	r3, r3, #13
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	4903      	ldr	r1, [pc, #12]	; (8005a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a3a:	5ccb      	ldrb	r3, [r1, r3]
 8005a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40023800 	.word	0x40023800
 8005a48:	0800deb4 	.word	0x0800deb4

08005a4c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d105      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d038      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a74:	4b68      	ldr	r3, [pc, #416]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a7a:	f7fe f9b1 	bl	8003de0 <HAL_GetTick>
 8005a7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a80:	e008      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a82:	f7fe f9ad 	bl	8003de0 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e0bd      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a94:	4b61      	ldr	r3, [pc, #388]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f0      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	019b      	lsls	r3, r3, #6
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	071b      	lsls	r3, r3, #28
 8005ab2:	495a      	ldr	r1, [pc, #360]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005aba:	4b57      	ldr	r3, [pc, #348]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ac0:	f7fe f98e 	bl	8003de0 <HAL_GetTick>
 8005ac4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ac8:	f7fe f98a 	bl	8003de0 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e09a      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ada:	4b50      	ldr	r3, [pc, #320]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d0f0      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 8083 	beq.w	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	4b48      	ldr	r3, [pc, #288]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	4a47      	ldr	r2, [pc, #284]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b02:	6413      	str	r3, [r2, #64]	; 0x40
 8005b04:	4b45      	ldr	r3, [pc, #276]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b10:	4b43      	ldr	r3, [pc, #268]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a42      	ldr	r2, [pc, #264]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b1a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b1c:	f7fe f960 	bl	8003de0 <HAL_GetTick>
 8005b20:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b22:	e008      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b24:	f7fe f95c 	bl	8003de0 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e06c      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b36:	4b3a      	ldr	r3, [pc, #232]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0f0      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b42:	4b36      	ldr	r3, [pc, #216]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d02f      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d028      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b60:	4b2e      	ldr	r3, [pc, #184]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b68:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b6a:	4b2e      	ldr	r3, [pc, #184]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b70:	4b2c      	ldr	r3, [pc, #176]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b76:	4a29      	ldr	r2, [pc, #164]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b7c:	4b27      	ldr	r3, [pc, #156]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d114      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b88:	f7fe f92a 	bl	8003de0 <HAL_GetTick>
 8005b8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8e:	e00a      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b90:	f7fe f926 	bl	8003de0 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e034      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba6:	4b1d      	ldr	r3, [pc, #116]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0ee      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bbe:	d10d      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005bc0:	4b16      	ldr	r3, [pc, #88]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bd4:	4911      	ldr	r1, [pc, #68]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	608b      	str	r3, [r1, #8]
 8005bda:	e005      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005bdc:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	4a0e      	ldr	r2, [pc, #56]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005be2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005be6:	6093      	str	r3, [r2, #8]
 8005be8:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf4:	4909      	ldr	r1, [pc, #36]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0308 	and.w	r3, r3, #8
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	7d1a      	ldrb	r2, [r3, #20]
 8005c0a:	4b07      	ldr	r3, [pc, #28]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005c0c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	42470068 	.word	0x42470068
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	40007000 	.word	0x40007000
 8005c24:	42470e40 	.word	0x42470e40
 8005c28:	424711e0 	.word	0x424711e0

08005c2c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e066      	b.n	8005d10 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	7f5b      	ldrb	r3, [r3, #29]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d105      	bne.n	8005c58 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fc fe42 	bl	80028dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	22ca      	movs	r2, #202	; 0xca
 8005c64:	625a      	str	r2, [r3, #36]	; 0x24
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2253      	movs	r2, #83	; 0x53
 8005c6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa45 	bl	80060fe <RTC_EnterInitMode>
 8005c74:	4603      	mov	r3, r0
 8005c76:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d12c      	bne.n	8005cd8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6812      	ldr	r2, [r2, #0]
 8005c88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c90:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6899      	ldr	r1, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	68d2      	ldr	r2, [r2, #12]
 8005cb8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6919      	ldr	r1, [r3, #16]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	041a      	lsls	r2, r3, #16
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fa4c 	bl	800616c <RTC_ExitInitMode>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d113      	bne.n	8005d06 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699a      	ldr	r2, [r3, #24]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	22ff      	movs	r2, #255	; 0xff
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d18:	b590      	push	{r4, r7, lr}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	7f1b      	ldrb	r3, [r3, #28]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_RTC_SetTime+0x1c>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e087      	b.n	8005e44 <HAL_RTC_SetTime+0x12c>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2201      	movs	r2, #1
 8005d38:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d126      	bne.n	8005d94 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2200      	movs	r2, #0
 8005d58:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fa29 	bl	80061b6 <RTC_ByteToBcd2>
 8005d64:	4603      	mov	r3, r0
 8005d66:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fa22 	bl	80061b6 <RTC_ByteToBcd2>
 8005d72:	4603      	mov	r3, r0
 8005d74:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d76:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	789b      	ldrb	r3, [r3, #2]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fa1a 	bl	80061b6 <RTC_ByteToBcd2>
 8005d82:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d84:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	78db      	ldrb	r3, [r3, #3]
 8005d8c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	e018      	b.n	8005dc6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d102      	bne.n	8005da8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2200      	movs	r2, #0
 8005da6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005db4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005dba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	78db      	ldrb	r3, [r3, #3]
 8005dc0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	22ca      	movs	r2, #202	; 0xca
 8005dcc:	625a      	str	r2, [r3, #36]	; 0x24
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2253      	movs	r2, #83	; 0x53
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 f991 	bl	80060fe <RTC_EnterInitMode>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005de0:	7cfb      	ldrb	r3, [r7, #19]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d120      	bne.n	8005e28 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005df0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005df4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6899      	ldr	r1, [r3, #8]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	431a      	orrs	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 f9a4 	bl	800616c <RTC_ExitInitMode>
 8005e24:	4603      	mov	r3, r0
 8005e26:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005e28:	7cfb      	ldrb	r3, [r7, #19]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d102      	bne.n	8005e34 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	22ff      	movs	r2, #255	; 0xff
 8005e3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	771a      	strb	r2, [r3, #28]

  return status;
 8005e42:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd90      	pop	{r4, r7, pc}

08005e4c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005e7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005e82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	0c1b      	lsrs	r3, r3, #16
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	0a1b      	lsrs	r3, r3, #8
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	0d9b      	lsrs	r3, r3, #22
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d11a      	bne.n	8005efe <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 f98f 	bl	80061f0 <RTC_Bcd2ToByte>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 f986 	bl	80061f0 <RTC_Bcd2ToByte>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	789b      	ldrb	r3, [r3, #2]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 f97d 	bl	80061f0 <RTC_Bcd2ToByte>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	461a      	mov	r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f08:	b590      	push	{r4, r7, lr}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	7f1b      	ldrb	r3, [r3, #28]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_RTC_SetDate+0x1c>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e071      	b.n	8006008 <HAL_RTC_SetDate+0x100>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2201      	movs	r2, #1
 8005f28:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10e      	bne.n	8005f54 <HAL_RTC_SetDate+0x4c>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d008      	beq.n	8005f54 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	785b      	ldrb	r3, [r3, #1]
 8005f46:	f023 0310 	bic.w	r3, r3, #16
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	330a      	adds	r3, #10
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d11c      	bne.n	8005f94 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	78db      	ldrb	r3, [r3, #3]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 f929 	bl	80061b6 <RTC_ByteToBcd2>
 8005f64:	4603      	mov	r3, r0
 8005f66:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	785b      	ldrb	r3, [r3, #1]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 f922 	bl	80061b6 <RTC_ByteToBcd2>
 8005f72:	4603      	mov	r3, r0
 8005f74:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f76:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	789b      	ldrb	r3, [r3, #2]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 f91a 	bl	80061b6 <RTC_ByteToBcd2>
 8005f82:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f84:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	e00e      	b.n	8005fb2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	78db      	ldrb	r3, [r3, #3]
 8005f98:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	785b      	ldrb	r3, [r3, #1]
 8005f9e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005fa0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005fa6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	22ca      	movs	r2, #202	; 0xca
 8005fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2253      	movs	r2, #83	; 0x53
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 f89b 	bl	80060fe <RTC_EnterInitMode>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005fcc:	7cfb      	ldrb	r3, [r7, #19]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10c      	bne.n	8005fec <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005fdc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005fe0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 f8c2 	bl	800616c <RTC_ExitInitMode>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005fec:	7cfb      	ldrb	r3, [r7, #19]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d102      	bne.n	8005ff8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	22ff      	movs	r2, #255	; 0xff
 8005ffe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	771a      	strb	r2, [r3, #28]

  return status;
 8006006:	7cfb      	ldrb	r3, [r7, #19]
}
 8006008:	4618      	mov	r0, r3
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	bd90      	pop	{r4, r7, pc}

08006010 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800602a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800602e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	0c1b      	lsrs	r3, r3, #16
 8006034:	b2da      	uxtb	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	0a1b      	lsrs	r3, r3, #8
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f003 031f 	and.w	r3, r3, #31
 8006044:	b2da      	uxtb	r2, r3
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006052:	b2da      	uxtb	r2, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	0b5b      	lsrs	r3, r3, #13
 800605c:	b2db      	uxtb	r3, r3
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	b2da      	uxtb	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d11a      	bne.n	80060a4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	78db      	ldrb	r3, [r3, #3]
 8006072:	4618      	mov	r0, r3
 8006074:	f000 f8bc 	bl	80061f0 <RTC_Bcd2ToByte>
 8006078:	4603      	mov	r3, r0
 800607a:	461a      	mov	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	785b      	ldrb	r3, [r3, #1]
 8006084:	4618      	mov	r0, r3
 8006086:	f000 f8b3 	bl	80061f0 <RTC_Bcd2ToByte>
 800608a:	4603      	mov	r3, r0
 800608c:	461a      	mov	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	789b      	ldrb	r3, [r3, #2]
 8006096:	4618      	mov	r0, r3
 8006098:	f000 f8aa 	bl	80061f0 <RTC_Bcd2ToByte>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060c8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060ca:	f7fd fe89 	bl	8003de0 <HAL_GetTick>
 80060ce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060d0:	e009      	b.n	80060e6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060d2:	f7fd fe85 	bl	8003de0 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060e0:	d901      	bls.n	80060e6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e007      	b.n	80060f6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0320 	and.w	r3, r3, #32
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0ee      	beq.n	80060d2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006118:	2b00      	cmp	r3, #0
 800611a:	d122      	bne.n	8006162 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800612a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800612c:	f7fd fe58 	bl	8003de0 <HAL_GetTick>
 8006130:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006132:	e00c      	b.n	800614e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006134:	f7fd fe54 	bl	8003de0 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006142:	d904      	bls.n	800614e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2204      	movs	r2, #4
 8006148:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d102      	bne.n	8006162 <RTC_EnterInitMode+0x64>
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d1e8      	bne.n	8006134 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006186:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10a      	bne.n	80061ac <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff ff89 	bl	80060ae <HAL_RTC_WaitForSynchro>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d004      	beq.n	80061ac <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2204      	movs	r2, #4
 80061a6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	4603      	mov	r3, r0
 80061be:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80061c4:	e005      	b.n	80061d2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	3301      	adds	r3, #1
 80061ca:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	3b0a      	subs	r3, #10
 80061d0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	2b09      	cmp	r3, #9
 80061d6:	d8f6      	bhi.n	80061c6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	79fb      	ldrb	r3, [r7, #7]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	b2db      	uxtb	r3, r3
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	091b      	lsrs	r3, r3, #4
 8006202:	b2db      	uxtb	r3, r3
 8006204:	461a      	mov	r2, r3
 8006206:	0092      	lsls	r2, r2, #2
 8006208:	4413      	add	r3, r2
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	b2da      	uxtb	r2, r3
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	4413      	add	r3, r2
 800621a:	b2db      	uxtb	r3, r3
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e07b      	b.n	8006332 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	2b00      	cmp	r3, #0
 8006240:	d108      	bne.n	8006254 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800624a:	d009      	beq.n	8006260 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	61da      	str	r2, [r3, #28]
 8006252:	e005      	b.n	8006260 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fc fb5a 	bl	8002934 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006296:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	431a      	orrs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e4:	ea42 0103 	orr.w	r1, r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	0c1b      	lsrs	r3, r3, #16
 80062fe:	f003 0104 	and.w	r1, r3, #4
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	f003 0210 	and.w	r2, r3, #16
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69da      	ldr	r2, [r3, #28]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006320:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b088      	sub	sp, #32
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	603b      	str	r3, [r7, #0]
 8006346:	4613      	mov	r3, r2
 8006348:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_SPI_Transmit+0x22>
 8006358:	2302      	movs	r3, #2
 800635a:	e126      	b.n	80065aa <HAL_SPI_Transmit+0x270>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006364:	f7fd fd3c 	bl	8003de0 <HAL_GetTick>
 8006368:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800636a:	88fb      	ldrh	r3, [r7, #6]
 800636c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b01      	cmp	r3, #1
 8006378:	d002      	beq.n	8006380 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800637a:	2302      	movs	r3, #2
 800637c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800637e:	e10b      	b.n	8006598 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <HAL_SPI_Transmit+0x52>
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006390:	e102      	b.n	8006598 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2203      	movs	r2, #3
 8006396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	88fa      	ldrh	r2, [r7, #6]
 80063aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	88fa      	ldrh	r2, [r7, #6]
 80063b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d8:	d10f      	bne.n	80063fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006404:	2b40      	cmp	r3, #64	; 0x40
 8006406:	d007      	beq.n	8006418 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006416:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006420:	d14b      	bne.n	80064ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <HAL_SPI_Transmit+0xf6>
 800642a:	8afb      	ldrh	r3, [r7, #22]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d13e      	bne.n	80064ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	881a      	ldrh	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	1c9a      	adds	r2, r3, #2
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006454:	e02b      	b.n	80064ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b02      	cmp	r3, #2
 8006462:	d112      	bne.n	800648a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	881a      	ldrh	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	1c9a      	adds	r2, r3, #2
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	86da      	strh	r2, [r3, #54]	; 0x36
 8006488:	e011      	b.n	80064ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800648a:	f7fd fca9 	bl	8003de0 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d803      	bhi.n	80064a2 <HAL_SPI_Transmit+0x168>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	d102      	bne.n	80064a8 <HAL_SPI_Transmit+0x16e>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d102      	bne.n	80064ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064ac:	e074      	b.n	8006598 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1ce      	bne.n	8006456 <HAL_SPI_Transmit+0x11c>
 80064b8:	e04c      	b.n	8006554 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <HAL_SPI_Transmit+0x18e>
 80064c2:	8afb      	ldrh	r3, [r7, #22]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d140      	bne.n	800654a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	330c      	adds	r3, #12
 80064d2:	7812      	ldrb	r2, [r2, #0]
 80064d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80064ee:	e02c      	b.n	800654a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d113      	bne.n	8006526 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	7812      	ldrb	r2, [r2, #0]
 800650a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	86da      	strh	r2, [r3, #54]	; 0x36
 8006524:	e011      	b.n	800654a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006526:	f7fd fc5b 	bl	8003de0 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d803      	bhi.n	800653e <HAL_SPI_Transmit+0x204>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653c:	d102      	bne.n	8006544 <HAL_SPI_Transmit+0x20a>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d102      	bne.n	800654a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006548:	e026      	b.n	8006598 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800654e:	b29b      	uxth	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1cd      	bne.n	80064f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 fa55 	bl	8006a08 <SPI_EndRxTxTransaction>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2220      	movs	r2, #32
 8006568:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10a      	bne.n	8006588 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	77fb      	strb	r3, [r7, #31]
 8006594:	e000      	b.n	8006598 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006596:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3720      	adds	r7, #32
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b08c      	sub	sp, #48	; 0x30
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	607a      	str	r2, [r7, #4]
 80065be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065c0:	2301      	movs	r3, #1
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_SPI_TransmitReceive+0x26>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e18a      	b.n	80068ee <HAL_SPI_TransmitReceive+0x33c>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065e0:	f7fd fbfe 	bl	8003de0 <HAL_GetTick>
 80065e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065f6:	887b      	ldrh	r3, [r7, #2]
 80065f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d00f      	beq.n	8006622 <HAL_SPI_TransmitReceive+0x70>
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006608:	d107      	bne.n	800661a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <HAL_SPI_TransmitReceive+0x68>
 8006612:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006616:	2b04      	cmp	r3, #4
 8006618:	d003      	beq.n	8006622 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800661a:	2302      	movs	r3, #2
 800661c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006620:	e15b      	b.n	80068da <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <HAL_SPI_TransmitReceive+0x82>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <HAL_SPI_TransmitReceive+0x82>
 800662e:	887b      	ldrh	r3, [r7, #2]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d103      	bne.n	800663c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800663a:	e14e      	b.n	80068da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b04      	cmp	r3, #4
 8006646:	d003      	beq.n	8006650 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2205      	movs	r2, #5
 800664c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	887a      	ldrh	r2, [r7, #2]
 8006660:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	887a      	ldrh	r2, [r7, #2]
 8006666:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	887a      	ldrh	r2, [r7, #2]
 8006672:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	887a      	ldrh	r2, [r7, #2]
 8006678:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006690:	2b40      	cmp	r3, #64	; 0x40
 8006692:	d007      	beq.n	80066a4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ac:	d178      	bne.n	80067a0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <HAL_SPI_TransmitReceive+0x10a>
 80066b6:	8b7b      	ldrh	r3, [r7, #26]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d166      	bne.n	800678a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	881a      	ldrh	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	1c9a      	adds	r2, r3, #2
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	3b01      	subs	r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066e0:	e053      	b.n	800678a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d11b      	bne.n	8006728 <HAL_SPI_TransmitReceive+0x176>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d016      	beq.n	8006728 <HAL_SPI_TransmitReceive+0x176>
 80066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d113      	bne.n	8006728 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	881a      	ldrh	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006710:	1c9a      	adds	r2, r3, #2
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800671a:	b29b      	uxth	r3, r3
 800671c:	3b01      	subs	r3, #1
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b01      	cmp	r3, #1
 8006734:	d119      	bne.n	800676a <HAL_SPI_TransmitReceive+0x1b8>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d014      	beq.n	800676a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674a:	b292      	uxth	r2, r2
 800674c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	1c9a      	adds	r2, r3, #2
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006766:	2301      	movs	r3, #1
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800676a:	f7fd fb39 	bl	8003de0 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006776:	429a      	cmp	r2, r3
 8006778:	d807      	bhi.n	800678a <HAL_SPI_TransmitReceive+0x1d8>
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006780:	d003      	beq.n	800678a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006788:	e0a7      	b.n	80068da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1a6      	bne.n	80066e2 <HAL_SPI_TransmitReceive+0x130>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1a1      	bne.n	80066e2 <HAL_SPI_TransmitReceive+0x130>
 800679e:	e07c      	b.n	800689a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <HAL_SPI_TransmitReceive+0x1fc>
 80067a8:	8b7b      	ldrh	r3, [r7, #26]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d16b      	bne.n	8006886 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	330c      	adds	r3, #12
 80067b8:	7812      	ldrb	r2, [r2, #0]
 80067ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	3b01      	subs	r3, #1
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067d4:	e057      	b.n	8006886 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d11c      	bne.n	800681e <HAL_SPI_TransmitReceive+0x26c>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d017      	beq.n	800681e <HAL_SPI_TransmitReceive+0x26c>
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d114      	bne.n	800681e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	7812      	ldrb	r2, [r2, #0]
 8006800:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b01      	cmp	r3, #1
 800682a:	d119      	bne.n	8006860 <HAL_SPI_TransmitReceive+0x2ae>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d014      	beq.n	8006860 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68da      	ldr	r2, [r3, #12]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006852:	b29b      	uxth	r3, r3
 8006854:	3b01      	subs	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800685c:	2301      	movs	r3, #1
 800685e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006860:	f7fd fabe 	bl	8003de0 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800686c:	429a      	cmp	r2, r3
 800686e:	d803      	bhi.n	8006878 <HAL_SPI_TransmitReceive+0x2c6>
 8006870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006876:	d102      	bne.n	800687e <HAL_SPI_TransmitReceive+0x2cc>
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	2b00      	cmp	r3, #0
 800687c:	d103      	bne.n	8006886 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006884:	e029      	b.n	80068da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800688a:	b29b      	uxth	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1a2      	bne.n	80067d6 <HAL_SPI_TransmitReceive+0x224>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d19d      	bne.n	80067d6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800689a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800689c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 f8b2 	bl	8006a08 <SPI_EndRxTxTransaction>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d006      	beq.n	80068b8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2220      	movs	r2, #32
 80068b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80068b6:	e010      	b.n	80068da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10b      	bne.n	80068d8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068c0:	2300      	movs	r3, #0
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	e000      	b.n	80068da <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80068d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3730      	adds	r7, #48	; 0x30
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
	...

080068f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	4613      	mov	r3, r2
 8006906:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006908:	f7fd fa6a 	bl	8003de0 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	1a9b      	subs	r3, r3, r2
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	4413      	add	r3, r2
 8006916:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006918:	f7fd fa62 	bl	8003de0 <HAL_GetTick>
 800691c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800691e:	4b39      	ldr	r3, [pc, #228]	; (8006a04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	015b      	lsls	r3, r3, #5
 8006924:	0d1b      	lsrs	r3, r3, #20
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	fb02 f303 	mul.w	r3, r2, r3
 800692c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800692e:	e054      	b.n	80069da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006936:	d050      	beq.n	80069da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006938:	f7fd fa52 	bl	8003de0 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	429a      	cmp	r2, r3
 8006946:	d902      	bls.n	800694e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d13d      	bne.n	80069ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800695c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006966:	d111      	bne.n	800698c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006970:	d004      	beq.n	800697c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800697a:	d107      	bne.n	800698c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800698a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006994:	d10f      	bne.n	80069b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e017      	b.n	80069fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4013      	ands	r3, r2
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	bf0c      	ite	eq
 80069ea:	2301      	moveq	r3, #1
 80069ec:	2300      	movne	r3, #0
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	79fb      	ldrb	r3, [r7, #7]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d19b      	bne.n	8006930 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3720      	adds	r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000674 	.word	0x20000674

08006a08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a14:	4b1b      	ldr	r3, [pc, #108]	; (8006a84 <SPI_EndRxTxTransaction+0x7c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a1b      	ldr	r2, [pc, #108]	; (8006a88 <SPI_EndRxTxTransaction+0x80>)
 8006a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1e:	0d5b      	lsrs	r3, r3, #21
 8006a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a24:	fb02 f303 	mul.w	r3, r2, r3
 8006a28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a32:	d112      	bne.n	8006a5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2180      	movs	r1, #128	; 0x80
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f7ff ff5a 	bl	80068f8 <SPI_WaitFlagStateUntilTimeout>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d016      	beq.n	8006a78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4e:	f043 0220 	orr.w	r2, r3, #32
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e00f      	b.n	8006a7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00a      	beq.n	8006a76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a70:	2b80      	cmp	r3, #128	; 0x80
 8006a72:	d0f2      	beq.n	8006a5a <SPI_EndRxTxTransaction+0x52>
 8006a74:	e000      	b.n	8006a78 <SPI_EndRxTxTransaction+0x70>
        break;
 8006a76:	bf00      	nop
  }

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000674 	.word	0x20000674
 8006a88:	165e9f81 	.word	0x165e9f81

08006a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e041      	b.n	8006b22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fb ffde 	bl	8002a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4610      	mov	r0, r2
 8006acc:	f000 fe52 	bl	8007774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
	...

08006b2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d001      	beq.n	8006b44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e03c      	b.n	8006bbe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1e      	ldr	r2, [pc, #120]	; (8006bcc <HAL_TIM_Base_Start+0xa0>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d018      	beq.n	8006b88 <HAL_TIM_Base_Start+0x5c>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5e:	d013      	beq.n	8006b88 <HAL_TIM_Base_Start+0x5c>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a1a      	ldr	r2, [pc, #104]	; (8006bd0 <HAL_TIM_Base_Start+0xa4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00e      	beq.n	8006b88 <HAL_TIM_Base_Start+0x5c>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a19      	ldr	r2, [pc, #100]	; (8006bd4 <HAL_TIM_Base_Start+0xa8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d009      	beq.n	8006b88 <HAL_TIM_Base_Start+0x5c>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a17      	ldr	r2, [pc, #92]	; (8006bd8 <HAL_TIM_Base_Start+0xac>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d004      	beq.n	8006b88 <HAL_TIM_Base_Start+0x5c>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a16      	ldr	r2, [pc, #88]	; (8006bdc <HAL_TIM_Base_Start+0xb0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d111      	bne.n	8006bac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b06      	cmp	r3, #6
 8006b98:	d010      	beq.n	8006bbc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f042 0201 	orr.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006baa:	e007      	b.n	8006bbc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0201 	orr.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40010000 	.word	0x40010000
 8006bd0:	40000400 	.word	0x40000400
 8006bd4:	40000800 	.word	0x40000800
 8006bd8:	40000c00 	.word	0x40000c00
 8006bdc:	40014000 	.word	0x40014000

08006be0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d001      	beq.n	8006bf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e044      	b.n	8006c82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0201 	orr.w	r2, r2, #1
 8006c0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a1e      	ldr	r2, [pc, #120]	; (8006c90 <HAL_TIM_Base_Start_IT+0xb0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d018      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x6c>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c22:	d013      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x6c>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a1a      	ldr	r2, [pc, #104]	; (8006c94 <HAL_TIM_Base_Start_IT+0xb4>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00e      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x6c>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a19      	ldr	r2, [pc, #100]	; (8006c98 <HAL_TIM_Base_Start_IT+0xb8>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d009      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x6c>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a17      	ldr	r2, [pc, #92]	; (8006c9c <HAL_TIM_Base_Start_IT+0xbc>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d004      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x6c>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a16      	ldr	r2, [pc, #88]	; (8006ca0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d111      	bne.n	8006c70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b06      	cmp	r3, #6
 8006c5c:	d010      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f042 0201 	orr.w	r2, r2, #1
 8006c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c6e:	e007      	b.n	8006c80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0201 	orr.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40010000 	.word	0x40010000
 8006c94:	40000400 	.word	0x40000400
 8006c98:	40000800 	.word	0x40000800
 8006c9c:	40000c00 	.word	0x40000c00
 8006ca0:	40014000 	.word	0x40014000

08006ca4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0201 	bic.w	r2, r2, #1
 8006cba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6a1a      	ldr	r2, [r3, #32]
 8006cc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10f      	bne.n	8006cec <HAL_TIM_Base_Stop_IT+0x48>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6a1a      	ldr	r2, [r3, #32]
 8006cd2:	f240 4344 	movw	r3, #1092	; 0x444
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d107      	bne.n	8006cec <HAL_TIM_Base_Stop_IT+0x48>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0201 	bic.w	r2, r2, #1
 8006cea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e041      	b.n	8006d98 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d106      	bne.n	8006d2e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f839 	bl	8006da0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2202      	movs	r2, #2
 8006d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4610      	mov	r0, r2
 8006d42:	f000 fd17 	bl	8007774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d109      	bne.n	8006ddc <HAL_TIM_OC_Start_IT+0x28>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	bf14      	ite	ne
 8006dd4:	2301      	movne	r3, #1
 8006dd6:	2300      	moveq	r3, #0
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	e022      	b.n	8006e22 <HAL_TIM_OC_Start_IT+0x6e>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d109      	bne.n	8006df6 <HAL_TIM_OC_Start_IT+0x42>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	bf14      	ite	ne
 8006dee:	2301      	movne	r3, #1
 8006df0:	2300      	moveq	r3, #0
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	e015      	b.n	8006e22 <HAL_TIM_OC_Start_IT+0x6e>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d109      	bne.n	8006e10 <HAL_TIM_OC_Start_IT+0x5c>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	bf14      	ite	ne
 8006e08:	2301      	movne	r3, #1
 8006e0a:	2300      	moveq	r3, #0
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	e008      	b.n	8006e22 <HAL_TIM_OC_Start_IT+0x6e>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	bf14      	ite	ne
 8006e1c:	2301      	movne	r3, #1
 8006e1e:	2300      	moveq	r3, #0
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e0b3      	b.n	8006f92 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d104      	bne.n	8006e3a <HAL_TIM_OC_Start_IT+0x86>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e38:	e013      	b.n	8006e62 <HAL_TIM_OC_Start_IT+0xae>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d104      	bne.n	8006e4a <HAL_TIM_OC_Start_IT+0x96>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e48:	e00b      	b.n	8006e62 <HAL_TIM_OC_Start_IT+0xae>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d104      	bne.n	8006e5a <HAL_TIM_OC_Start_IT+0xa6>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e58:	e003      	b.n	8006e62 <HAL_TIM_OC_Start_IT+0xae>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b0c      	cmp	r3, #12
 8006e66:	d841      	bhi.n	8006eec <HAL_TIM_OC_Start_IT+0x138>
 8006e68:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <HAL_TIM_OC_Start_IT+0xbc>)
 8006e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6e:	bf00      	nop
 8006e70:	08006ea5 	.word	0x08006ea5
 8006e74:	08006eed 	.word	0x08006eed
 8006e78:	08006eed 	.word	0x08006eed
 8006e7c:	08006eed 	.word	0x08006eed
 8006e80:	08006eb7 	.word	0x08006eb7
 8006e84:	08006eed 	.word	0x08006eed
 8006e88:	08006eed 	.word	0x08006eed
 8006e8c:	08006eed 	.word	0x08006eed
 8006e90:	08006ec9 	.word	0x08006ec9
 8006e94:	08006eed 	.word	0x08006eed
 8006e98:	08006eed 	.word	0x08006eed
 8006e9c:	08006eed 	.word	0x08006eed
 8006ea0:	08006edb 	.word	0x08006edb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f042 0202 	orr.w	r2, r2, #2
 8006eb2:	60da      	str	r2, [r3, #12]
      break;
 8006eb4:	e01d      	b.n	8006ef2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f042 0204 	orr.w	r2, r2, #4
 8006ec4:	60da      	str	r2, [r3, #12]
      break;
 8006ec6:	e014      	b.n	8006ef2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0208 	orr.w	r2, r2, #8
 8006ed6:	60da      	str	r2, [r3, #12]
      break;
 8006ed8:	e00b      	b.n	8006ef2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68da      	ldr	r2, [r3, #12]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0210 	orr.w	r2, r2, #16
 8006ee8:	60da      	str	r2, [r3, #12]
      break;
 8006eea:	e002      	b.n	8006ef2 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef0:	bf00      	nop
  }

  if (status == HAL_OK)
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d14b      	bne.n	8006f90 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2201      	movs	r2, #1
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fedd 	bl	8007cc0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a24      	ldr	r2, [pc, #144]	; (8006f9c <HAL_TIM_OC_Start_IT+0x1e8>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d107      	bne.n	8006f20 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f1e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1d      	ldr	r2, [pc, #116]	; (8006f9c <HAL_TIM_OC_Start_IT+0x1e8>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d018      	beq.n	8006f5c <HAL_TIM_OC_Start_IT+0x1a8>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f32:	d013      	beq.n	8006f5c <HAL_TIM_OC_Start_IT+0x1a8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a19      	ldr	r2, [pc, #100]	; (8006fa0 <HAL_TIM_OC_Start_IT+0x1ec>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00e      	beq.n	8006f5c <HAL_TIM_OC_Start_IT+0x1a8>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a18      	ldr	r2, [pc, #96]	; (8006fa4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d009      	beq.n	8006f5c <HAL_TIM_OC_Start_IT+0x1a8>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a16      	ldr	r2, [pc, #88]	; (8006fa8 <HAL_TIM_OC_Start_IT+0x1f4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d004      	beq.n	8006f5c <HAL_TIM_OC_Start_IT+0x1a8>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a15      	ldr	r2, [pc, #84]	; (8006fac <HAL_TIM_OC_Start_IT+0x1f8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d111      	bne.n	8006f80 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b06      	cmp	r3, #6
 8006f6c:	d010      	beq.n	8006f90 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f042 0201 	orr.w	r2, r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f7e:	e007      	b.n	8006f90 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0201 	orr.w	r2, r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	40010000 	.word	0x40010000
 8006fa0:	40000400 	.word	0x40000400
 8006fa4:	40000800 	.word	0x40000800
 8006fa8:	40000c00 	.word	0x40000c00
 8006fac:	40014000 	.word	0x40014000

08006fb0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e097      	b.n	80070f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d106      	bne.n	8006fde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7fb fcf3 	bl	80029c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ff4:	f023 0307 	bic.w	r3, r3, #7
 8006ff8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3304      	adds	r3, #4
 8007002:	4619      	mov	r1, r3
 8007004:	4610      	mov	r0, r2
 8007006:	f000 fbb5 	bl	8007774 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4313      	orrs	r3, r2
 800702a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007032:	f023 0303 	bic.w	r3, r3, #3
 8007036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	4313      	orrs	r3, r2
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	4313      	orrs	r3, r2
 8007048:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007050:	f023 030c 	bic.w	r3, r3, #12
 8007054:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800705c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007060:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	021b      	lsls	r3, r3, #8
 800706c:	4313      	orrs	r3, r2
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	011a      	lsls	r2, r3, #4
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	031b      	lsls	r3, r3, #12
 8007080:	4313      	orrs	r3, r2
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800708e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007096:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	4313      	orrs	r3, r2
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800710c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007114:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800711c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007124:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d110      	bne.n	800714e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d102      	bne.n	8007138 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007132:	7b7b      	ldrb	r3, [r7, #13]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d001      	beq.n	800713c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e089      	b.n	8007250 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800714c:	e031      	b.n	80071b2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b04      	cmp	r3, #4
 8007152:	d110      	bne.n	8007176 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d102      	bne.n	8007160 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800715a:	7b3b      	ldrb	r3, [r7, #12]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d001      	beq.n	8007164 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e075      	b.n	8007250 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007174:	e01d      	b.n	80071b2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d108      	bne.n	800718e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d105      	bne.n	800718e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007182:	7b7b      	ldrb	r3, [r7, #13]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d102      	bne.n	800718e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007188:	7b3b      	ldrb	r3, [r7, #12]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d001      	beq.n	8007192 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e05e      	b.n	8007250 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2202      	movs	r2, #2
 800719e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2202      	movs	r2, #2
 80071a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2202      	movs	r2, #2
 80071ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	d010      	beq.n	80071e0 <HAL_TIM_Encoder_Start_IT+0xe4>
 80071be:	e01f      	b.n	8007200 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2201      	movs	r2, #1
 80071c6:	2100      	movs	r1, #0
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 fd79 	bl	8007cc0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0202 	orr.w	r2, r2, #2
 80071dc:	60da      	str	r2, [r3, #12]
      break;
 80071de:	e02e      	b.n	800723e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2201      	movs	r2, #1
 80071e6:	2104      	movs	r1, #4
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 fd69 	bl	8007cc0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0204 	orr.w	r2, r2, #4
 80071fc:	60da      	str	r2, [r3, #12]
      break;
 80071fe:	e01e      	b.n	800723e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2201      	movs	r2, #1
 8007206:	2100      	movs	r1, #0
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fd59 	bl	8007cc0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2201      	movs	r2, #1
 8007214:	2104      	movs	r1, #4
 8007216:	4618      	mov	r0, r3
 8007218:	f000 fd52 	bl	8007cc0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0202 	orr.w	r2, r2, #2
 800722a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f042 0204 	orr.w	r2, r2, #4
 800723a:	60da      	str	r2, [r3, #12]
      break;
 800723c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f042 0201 	orr.w	r2, r2, #1
 800724c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b02      	cmp	r3, #2
 800726c:	d122      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b02      	cmp	r3, #2
 800727a:	d11b      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f06f 0202 	mvn.w	r2, #2
 8007284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fa4c 	bl	8007738 <HAL_TIM_IC_CaptureCallback>
 80072a0:	e005      	b.n	80072ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7f9 ff2e 	bl	8001104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fa4f 	bl	800774c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d122      	bne.n	8007308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	d11b      	bne.n	8007308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0204 	mvn.w	r2, #4
 80072d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2202      	movs	r2, #2
 80072de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa22 	bl	8007738 <HAL_TIM_IC_CaptureCallback>
 80072f4:	e005      	b.n	8007302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7f9 ff04 	bl	8001104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fa25 	bl	800774c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	2b08      	cmp	r3, #8
 8007314:	d122      	bne.n	800735c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f003 0308 	and.w	r3, r3, #8
 8007320:	2b08      	cmp	r3, #8
 8007322:	d11b      	bne.n	800735c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f06f 0208 	mvn.w	r2, #8
 800732c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2204      	movs	r2, #4
 8007332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	f003 0303 	and.w	r3, r3, #3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f9f8 	bl	8007738 <HAL_TIM_IC_CaptureCallback>
 8007348:	e005      	b.n	8007356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7f9 feda 	bl	8001104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f9fb 	bl	800774c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	f003 0310 	and.w	r3, r3, #16
 8007366:	2b10      	cmp	r3, #16
 8007368:	d122      	bne.n	80073b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f003 0310 	and.w	r3, r3, #16
 8007374:	2b10      	cmp	r3, #16
 8007376:	d11b      	bne.n	80073b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f06f 0210 	mvn.w	r2, #16
 8007380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2208      	movs	r2, #8
 8007386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f9ce 	bl	8007738 <HAL_TIM_IC_CaptureCallback>
 800739c:	e005      	b.n	80073aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7f9 feb0 	bl	8001104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f9d1 	bl	800774c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d10e      	bne.n	80073dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d107      	bne.n	80073dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f06f 0201 	mvn.w	r2, #1
 80073d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7f9 fe6e 	bl	80010b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e6:	2b80      	cmp	r3, #128	; 0x80
 80073e8:	d10e      	bne.n	8007408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f4:	2b80      	cmp	r3, #128	; 0x80
 80073f6:	d107      	bne.n	8007408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fcfa 	bl	8007dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007412:	2b40      	cmp	r3, #64	; 0x40
 8007414:	d10e      	bne.n	8007434 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007420:	2b40      	cmp	r3, #64	; 0x40
 8007422:	d107      	bne.n	8007434 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800742c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f996 	bl	8007760 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0320 	and.w	r3, r3, #32
 800743e:	2b20      	cmp	r3, #32
 8007440:	d10e      	bne.n	8007460 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f003 0320 	and.w	r3, r3, #32
 800744c:	2b20      	cmp	r3, #32
 800744e:	d107      	bne.n	8007460 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0220 	mvn.w	r2, #32
 8007458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fcc4 	bl	8007de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800747e:	2b01      	cmp	r3, #1
 8007480:	d101      	bne.n	8007486 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007482:	2302      	movs	r3, #2
 8007484:	e048      	b.n	8007518 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b0c      	cmp	r3, #12
 8007492:	d839      	bhi.n	8007508 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007494:	a201      	add	r2, pc, #4	; (adr r2, 800749c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749a:	bf00      	nop
 800749c:	080074d1 	.word	0x080074d1
 80074a0:	08007509 	.word	0x08007509
 80074a4:	08007509 	.word	0x08007509
 80074a8:	08007509 	.word	0x08007509
 80074ac:	080074df 	.word	0x080074df
 80074b0:	08007509 	.word	0x08007509
 80074b4:	08007509 	.word	0x08007509
 80074b8:	08007509 	.word	0x08007509
 80074bc:	080074ed 	.word	0x080074ed
 80074c0:	08007509 	.word	0x08007509
 80074c4:	08007509 	.word	0x08007509
 80074c8:	08007509 	.word	0x08007509
 80074cc:	080074fb 	.word	0x080074fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68b9      	ldr	r1, [r7, #8]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 f9cc 	bl	8007874 <TIM_OC1_SetConfig>
      break;
 80074dc:	e017      	b.n	800750e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68b9      	ldr	r1, [r7, #8]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 fa2b 	bl	8007940 <TIM_OC2_SetConfig>
      break;
 80074ea:	e010      	b.n	800750e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 fa90 	bl	8007a18 <TIM_OC3_SetConfig>
      break;
 80074f8:	e009      	b.n	800750e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	4618      	mov	r0, r3
 8007502:	f000 faf3 	bl	8007aec <TIM_OC4_SetConfig>
      break;
 8007506:	e002      	b.n	800750e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	75fb      	strb	r3, [r7, #23]
      break;
 800750c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007516:	7dfb      	ldrb	r3, [r7, #23]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <HAL_TIM_ConfigClockSource+0x1c>
 8007538:	2302      	movs	r3, #2
 800753a:	e0b4      	b.n	80076a6 <HAL_TIM_ConfigClockSource+0x186>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800755a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007574:	d03e      	beq.n	80075f4 <HAL_TIM_ConfigClockSource+0xd4>
 8007576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800757a:	f200 8087 	bhi.w	800768c <HAL_TIM_ConfigClockSource+0x16c>
 800757e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007582:	f000 8086 	beq.w	8007692 <HAL_TIM_ConfigClockSource+0x172>
 8007586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800758a:	d87f      	bhi.n	800768c <HAL_TIM_ConfigClockSource+0x16c>
 800758c:	2b70      	cmp	r3, #112	; 0x70
 800758e:	d01a      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0xa6>
 8007590:	2b70      	cmp	r3, #112	; 0x70
 8007592:	d87b      	bhi.n	800768c <HAL_TIM_ConfigClockSource+0x16c>
 8007594:	2b60      	cmp	r3, #96	; 0x60
 8007596:	d050      	beq.n	800763a <HAL_TIM_ConfigClockSource+0x11a>
 8007598:	2b60      	cmp	r3, #96	; 0x60
 800759a:	d877      	bhi.n	800768c <HAL_TIM_ConfigClockSource+0x16c>
 800759c:	2b50      	cmp	r3, #80	; 0x50
 800759e:	d03c      	beq.n	800761a <HAL_TIM_ConfigClockSource+0xfa>
 80075a0:	2b50      	cmp	r3, #80	; 0x50
 80075a2:	d873      	bhi.n	800768c <HAL_TIM_ConfigClockSource+0x16c>
 80075a4:	2b40      	cmp	r3, #64	; 0x40
 80075a6:	d058      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x13a>
 80075a8:	2b40      	cmp	r3, #64	; 0x40
 80075aa:	d86f      	bhi.n	800768c <HAL_TIM_ConfigClockSource+0x16c>
 80075ac:	2b30      	cmp	r3, #48	; 0x30
 80075ae:	d064      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x15a>
 80075b0:	2b30      	cmp	r3, #48	; 0x30
 80075b2:	d86b      	bhi.n	800768c <HAL_TIM_ConfigClockSource+0x16c>
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d060      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x15a>
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	d867      	bhi.n	800768c <HAL_TIM_ConfigClockSource+0x16c>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d05c      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x15a>
 80075c0:	2b10      	cmp	r3, #16
 80075c2:	d05a      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x15a>
 80075c4:	e062      	b.n	800768c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	6899      	ldr	r1, [r3, #8]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f000 fb53 	bl	8007c80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	609a      	str	r2, [r3, #8]
      break;
 80075f2:	e04f      	b.n	8007694 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6818      	ldr	r0, [r3, #0]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	6899      	ldr	r1, [r3, #8]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f000 fb3c 	bl	8007c80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689a      	ldr	r2, [r3, #8]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007616:	609a      	str	r2, [r3, #8]
      break;
 8007618:	e03c      	b.n	8007694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	6859      	ldr	r1, [r3, #4]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	461a      	mov	r2, r3
 8007628:	f000 fab0 	bl	8007b8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2150      	movs	r1, #80	; 0x50
 8007632:	4618      	mov	r0, r3
 8007634:	f000 fb09 	bl	8007c4a <TIM_ITRx_SetConfig>
      break;
 8007638:	e02c      	b.n	8007694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	6859      	ldr	r1, [r3, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	461a      	mov	r2, r3
 8007648:	f000 facf 	bl	8007bea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2160      	movs	r1, #96	; 0x60
 8007652:	4618      	mov	r0, r3
 8007654:	f000 faf9 	bl	8007c4a <TIM_ITRx_SetConfig>
      break;
 8007658:	e01c      	b.n	8007694 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6818      	ldr	r0, [r3, #0]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	6859      	ldr	r1, [r3, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	461a      	mov	r2, r3
 8007668:	f000 fa90 	bl	8007b8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2140      	movs	r1, #64	; 0x40
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fae9 	bl	8007c4a <TIM_ITRx_SetConfig>
      break;
 8007678:	e00c      	b.n	8007694 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4619      	mov	r1, r3
 8007684:	4610      	mov	r0, r2
 8007686:	f000 fae0 	bl	8007c4a <TIM_ITRx_SetConfig>
      break;
 800768a:	e003      	b.n	8007694 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	73fb      	strb	r3, [r7, #15]
      break;
 8007690:	e000      	b.n	8007694 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b0c      	cmp	r3, #12
 80076c2:	d831      	bhi.n	8007728 <HAL_TIM_ReadCapturedValue+0x78>
 80076c4:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <HAL_TIM_ReadCapturedValue+0x1c>)
 80076c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ca:	bf00      	nop
 80076cc:	08007701 	.word	0x08007701
 80076d0:	08007729 	.word	0x08007729
 80076d4:	08007729 	.word	0x08007729
 80076d8:	08007729 	.word	0x08007729
 80076dc:	0800770b 	.word	0x0800770b
 80076e0:	08007729 	.word	0x08007729
 80076e4:	08007729 	.word	0x08007729
 80076e8:	08007729 	.word	0x08007729
 80076ec:	08007715 	.word	0x08007715
 80076f0:	08007729 	.word	0x08007729
 80076f4:	08007729 	.word	0x08007729
 80076f8:	08007729 	.word	0x08007729
 80076fc:	0800771f 	.word	0x0800771f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007706:	60fb      	str	r3, [r7, #12]

      break;
 8007708:	e00f      	b.n	800772a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	60fb      	str	r3, [r7, #12]

      break;
 8007712:	e00a      	b.n	800772a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771a:	60fb      	str	r3, [r7, #12]

      break;
 800771c:	e005      	b.n	800772a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007724:	60fb      	str	r3, [r7, #12]

      break;
 8007726:	e000      	b.n	800772a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007728:	bf00      	nop
  }

  return tmpreg;
 800772a:	68fb      	ldr	r3, [r7, #12]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a34      	ldr	r2, [pc, #208]	; (8007858 <TIM_Base_SetConfig+0xe4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d00f      	beq.n	80077ac <TIM_Base_SetConfig+0x38>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007792:	d00b      	beq.n	80077ac <TIM_Base_SetConfig+0x38>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a31      	ldr	r2, [pc, #196]	; (800785c <TIM_Base_SetConfig+0xe8>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d007      	beq.n	80077ac <TIM_Base_SetConfig+0x38>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a30      	ldr	r2, [pc, #192]	; (8007860 <TIM_Base_SetConfig+0xec>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d003      	beq.n	80077ac <TIM_Base_SetConfig+0x38>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a2f      	ldr	r2, [pc, #188]	; (8007864 <TIM_Base_SetConfig+0xf0>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d108      	bne.n	80077be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a25      	ldr	r2, [pc, #148]	; (8007858 <TIM_Base_SetConfig+0xe4>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d01b      	beq.n	80077fe <TIM_Base_SetConfig+0x8a>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077cc:	d017      	beq.n	80077fe <TIM_Base_SetConfig+0x8a>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a22      	ldr	r2, [pc, #136]	; (800785c <TIM_Base_SetConfig+0xe8>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d013      	beq.n	80077fe <TIM_Base_SetConfig+0x8a>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a21      	ldr	r2, [pc, #132]	; (8007860 <TIM_Base_SetConfig+0xec>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00f      	beq.n	80077fe <TIM_Base_SetConfig+0x8a>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a20      	ldr	r2, [pc, #128]	; (8007864 <TIM_Base_SetConfig+0xf0>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00b      	beq.n	80077fe <TIM_Base_SetConfig+0x8a>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a1f      	ldr	r2, [pc, #124]	; (8007868 <TIM_Base_SetConfig+0xf4>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d007      	beq.n	80077fe <TIM_Base_SetConfig+0x8a>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a1e      	ldr	r2, [pc, #120]	; (800786c <TIM_Base_SetConfig+0xf8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_Base_SetConfig+0x8a>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a1d      	ldr	r2, [pc, #116]	; (8007870 <TIM_Base_SetConfig+0xfc>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d108      	bne.n	8007810 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a08      	ldr	r2, [pc, #32]	; (8007858 <TIM_Base_SetConfig+0xe4>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d103      	bne.n	8007844 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	691a      	ldr	r2, [r3, #16]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	615a      	str	r2, [r3, #20]
}
 800784a:	bf00      	nop
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	40010000 	.word	0x40010000
 800785c:	40000400 	.word	0x40000400
 8007860:	40000800 	.word	0x40000800
 8007864:	40000c00 	.word	0x40000c00
 8007868:	40014000 	.word	0x40014000
 800786c:	40014400 	.word	0x40014400
 8007870:	40014800 	.word	0x40014800

08007874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	f023 0201 	bic.w	r2, r3, #1
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0303 	bic.w	r3, r3, #3
 80078aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f023 0302 	bic.w	r3, r3, #2
 80078bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a1c      	ldr	r2, [pc, #112]	; (800793c <TIM_OC1_SetConfig+0xc8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d10c      	bne.n	80078ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f023 0308 	bic.w	r3, r3, #8
 80078d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	4313      	orrs	r3, r2
 80078e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f023 0304 	bic.w	r3, r3, #4
 80078e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a13      	ldr	r2, [pc, #76]	; (800793c <TIM_OC1_SetConfig+0xc8>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d111      	bne.n	8007916 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4313      	orrs	r3, r2
 800790a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	4313      	orrs	r3, r2
 8007914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	621a      	str	r2, [r3, #32]
}
 8007930:	bf00      	nop
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	40010000 	.word	0x40010000

08007940 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	f023 0210 	bic.w	r2, r3, #16
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800796e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	021b      	lsls	r3, r3, #8
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	4313      	orrs	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f023 0320 	bic.w	r3, r3, #32
 800798a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4313      	orrs	r3, r2
 8007996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a1e      	ldr	r2, [pc, #120]	; (8007a14 <TIM_OC2_SetConfig+0xd4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d10d      	bne.n	80079bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a15      	ldr	r2, [pc, #84]	; (8007a14 <TIM_OC2_SetConfig+0xd4>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d113      	bne.n	80079ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	4313      	orrs	r3, r2
 80079de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	621a      	str	r2, [r3, #32]
}
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	40010000 	.word	0x40010000

08007a18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	021b      	lsls	r3, r3, #8
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a1d      	ldr	r2, [pc, #116]	; (8007ae8 <TIM_OC3_SetConfig+0xd0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d10d      	bne.n	8007a92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	021b      	lsls	r3, r3, #8
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a14      	ldr	r2, [pc, #80]	; (8007ae8 <TIM_OC3_SetConfig+0xd0>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d113      	bne.n	8007ac2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	621a      	str	r2, [r3, #32]
}
 8007adc:	bf00      	nop
 8007ade:	371c      	adds	r7, #28
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	40010000 	.word	0x40010000

08007aec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	031b      	lsls	r3, r3, #12
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a10      	ldr	r2, [pc, #64]	; (8007b88 <TIM_OC4_SetConfig+0x9c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d109      	bne.n	8007b60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	019b      	lsls	r3, r3, #6
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	621a      	str	r2, [r3, #32]
}
 8007b7a:	bf00      	nop
 8007b7c:	371c      	adds	r7, #28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	40010000 	.word	0x40010000

08007b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	f023 0201 	bic.w	r2, r3, #1
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f023 030a 	bic.w	r3, r3, #10
 8007bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	621a      	str	r2, [r3, #32]
}
 8007bde:	bf00      	nop
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b087      	sub	sp, #28
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	f023 0210 	bic.w	r2, r3, #16
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	031b      	lsls	r3, r3, #12
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	011b      	lsls	r3, r3, #4
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	621a      	str	r2, [r3, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b085      	sub	sp, #20
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f043 0307 	orr.w	r3, r3, #7
 8007c6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	609a      	str	r2, [r3, #8]
}
 8007c74:	bf00      	nop
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	021a      	lsls	r2, r3, #8
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	609a      	str	r2, [r3, #8]
}
 8007cb4:	bf00      	nop
 8007cb6:	371c      	adds	r7, #28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f003 031f 	and.w	r3, r3, #31
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6a1a      	ldr	r2, [r3, #32]
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	43db      	mvns	r3, r3
 8007ce2:	401a      	ands	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6a1a      	ldr	r2, [r3, #32]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f003 031f 	and.w	r3, r3, #31
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	621a      	str	r2, [r3, #32]
}
 8007cfe:	bf00      	nop
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
	...

08007d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e050      	b.n	8007dc6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a1c      	ldr	r2, [pc, #112]	; (8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d018      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d70:	d013      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a18      	ldr	r2, [pc, #96]	; (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d00e      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a16      	ldr	r2, [pc, #88]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d009      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a15      	ldr	r2, [pc, #84]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d004      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a13      	ldr	r2, [pc, #76]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d10c      	bne.n	8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	40010000 	.word	0x40010000
 8007dd8:	40000400 	.word	0x40000400
 8007ddc:	40000800 	.word	0x40000800
 8007de0:	40000c00 	.word	0x40000c00
 8007de4:	40014000 	.word	0x40014000

08007de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e03f      	b.n	8007ea2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d106      	bne.n	8007e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7fa fe7e 	bl	8002b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2224      	movs	r2, #36	; 0x24
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f929 	bl	80080ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	691a      	ldr	r2, [r3, #16]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	695a      	ldr	r2, [r3, #20]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68da      	ldr	r2, [r3, #12]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b08a      	sub	sp, #40	; 0x28
 8007eae:	af02      	add	r7, sp, #8
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	603b      	str	r3, [r7, #0]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b20      	cmp	r3, #32
 8007ec8:	d17c      	bne.n	8007fc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d002      	beq.n	8007ed6 <HAL_UART_Transmit+0x2c>
 8007ed0:	88fb      	ldrh	r3, [r7, #6]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e075      	b.n	8007fc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d101      	bne.n	8007ee8 <HAL_UART_Transmit+0x3e>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	e06e      	b.n	8007fc6 <HAL_UART_Transmit+0x11c>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2221      	movs	r2, #33	; 0x21
 8007efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007efe:	f7fb ff6f 	bl	8003de0 <HAL_GetTick>
 8007f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	88fa      	ldrh	r2, [r7, #6]
 8007f08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	88fa      	ldrh	r2, [r7, #6]
 8007f0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f18:	d108      	bne.n	8007f2c <HAL_UART_Transmit+0x82>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d104      	bne.n	8007f2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	61bb      	str	r3, [r7, #24]
 8007f2a:	e003      	b.n	8007f34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f3c:	e02a      	b.n	8007f94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2200      	movs	r2, #0
 8007f46:	2180      	movs	r1, #128	; 0x80
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f840 	bl	8007fce <UART_WaitOnFlagUntilTimeout>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e036      	b.n	8007fc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10b      	bne.n	8007f76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	3302      	adds	r3, #2
 8007f72:	61bb      	str	r3, [r7, #24]
 8007f74:	e007      	b.n	8007f86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	781a      	ldrb	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	3301      	adds	r3, #1
 8007f84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1cf      	bne.n	8007f3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2140      	movs	r1, #64	; 0x40
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f000 f810 	bl	8007fce <UART_WaitOnFlagUntilTimeout>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e006      	b.n	8007fc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	e000      	b.n	8007fc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007fc4:	2302      	movs	r3, #2
  }
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3720      	adds	r7, #32
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b090      	sub	sp, #64	; 0x40
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	60f8      	str	r0, [r7, #12]
 8007fd6:	60b9      	str	r1, [r7, #8]
 8007fd8:	603b      	str	r3, [r7, #0]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fde:	e050      	b.n	8008082 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe6:	d04c      	beq.n	8008082 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d007      	beq.n	8007ffe <UART_WaitOnFlagUntilTimeout+0x30>
 8007fee:	f7fb fef7 	bl	8003de0 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d241      	bcs.n	8008082 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	330c      	adds	r3, #12
 8008004:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	330c      	adds	r3, #12
 800801c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800801e:	637a      	str	r2, [r7, #52]	; 0x34
 8008020:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800802c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e5      	bne.n	8007ffe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3314      	adds	r3, #20
 8008038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	613b      	str	r3, [r7, #16]
   return(result);
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f023 0301 	bic.w	r3, r3, #1
 8008048:	63bb      	str	r3, [r7, #56]	; 0x38
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3314      	adds	r3, #20
 8008050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008052:	623a      	str	r2, [r7, #32]
 8008054:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	69f9      	ldr	r1, [r7, #28]
 8008058:	6a3a      	ldr	r2, [r7, #32]
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e5      	bne.n	8008032 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2220      	movs	r2, #32
 800806a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2220      	movs	r2, #32
 8008072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e00f      	b.n	80080a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4013      	ands	r3, r2
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	429a      	cmp	r2, r3
 8008090:	bf0c      	ite	eq
 8008092:	2301      	moveq	r3, #1
 8008094:	2300      	movne	r3, #0
 8008096:	b2db      	uxtb	r3, r3
 8008098:	461a      	mov	r2, r3
 800809a:	79fb      	ldrb	r3, [r7, #7]
 800809c:	429a      	cmp	r2, r3
 800809e:	d09f      	beq.n	8007fe0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3740      	adds	r7, #64	; 0x40
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
	...

080080ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080b0:	b0c0      	sub	sp, #256	; 0x100
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c8:	68d9      	ldr	r1, [r3, #12]
 80080ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	ea40 0301 	orr.w	r3, r0, r1
 80080d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080da:	689a      	ldr	r2, [r3, #8]
 80080dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	431a      	orrs	r2, r3
 80080e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	431a      	orrs	r2, r3
 80080ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008104:	f021 010c 	bic.w	r1, r1, #12
 8008108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008112:	430b      	orrs	r3, r1
 8008114:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008126:	6999      	ldr	r1, [r3, #24]
 8008128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	ea40 0301 	orr.w	r3, r0, r1
 8008132:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	4b8f      	ldr	r3, [pc, #572]	; (8008378 <UART_SetConfig+0x2cc>)
 800813c:	429a      	cmp	r2, r3
 800813e:	d005      	beq.n	800814c <UART_SetConfig+0xa0>
 8008140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	4b8d      	ldr	r3, [pc, #564]	; (800837c <UART_SetConfig+0x2d0>)
 8008148:	429a      	cmp	r2, r3
 800814a:	d104      	bne.n	8008156 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800814c:	f7fd fc6a 	bl	8005a24 <HAL_RCC_GetPCLK2Freq>
 8008150:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008154:	e003      	b.n	800815e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008156:	f7fd fc51 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 800815a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800815e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008168:	f040 810c 	bne.w	8008384 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800816c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008170:	2200      	movs	r2, #0
 8008172:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008176:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800817a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800817e:	4622      	mov	r2, r4
 8008180:	462b      	mov	r3, r5
 8008182:	1891      	adds	r1, r2, r2
 8008184:	65b9      	str	r1, [r7, #88]	; 0x58
 8008186:	415b      	adcs	r3, r3
 8008188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800818a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800818e:	4621      	mov	r1, r4
 8008190:	eb12 0801 	adds.w	r8, r2, r1
 8008194:	4629      	mov	r1, r5
 8008196:	eb43 0901 	adc.w	r9, r3, r1
 800819a:	f04f 0200 	mov.w	r2, #0
 800819e:	f04f 0300 	mov.w	r3, #0
 80081a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081ae:	4690      	mov	r8, r2
 80081b0:	4699      	mov	r9, r3
 80081b2:	4623      	mov	r3, r4
 80081b4:	eb18 0303 	adds.w	r3, r8, r3
 80081b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081bc:	462b      	mov	r3, r5
 80081be:	eb49 0303 	adc.w	r3, r9, r3
 80081c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081da:	460b      	mov	r3, r1
 80081dc:	18db      	adds	r3, r3, r3
 80081de:	653b      	str	r3, [r7, #80]	; 0x50
 80081e0:	4613      	mov	r3, r2
 80081e2:	eb42 0303 	adc.w	r3, r2, r3
 80081e6:	657b      	str	r3, [r7, #84]	; 0x54
 80081e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081f0:	f7f8 fd02 	bl	8000bf8 <__aeabi_uldivmod>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4b61      	ldr	r3, [pc, #388]	; (8008380 <UART_SetConfig+0x2d4>)
 80081fa:	fba3 2302 	umull	r2, r3, r3, r2
 80081fe:	095b      	lsrs	r3, r3, #5
 8008200:	011c      	lsls	r4, r3, #4
 8008202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008206:	2200      	movs	r2, #0
 8008208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800820c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008210:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008214:	4642      	mov	r2, r8
 8008216:	464b      	mov	r3, r9
 8008218:	1891      	adds	r1, r2, r2
 800821a:	64b9      	str	r1, [r7, #72]	; 0x48
 800821c:	415b      	adcs	r3, r3
 800821e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008220:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008224:	4641      	mov	r1, r8
 8008226:	eb12 0a01 	adds.w	sl, r2, r1
 800822a:	4649      	mov	r1, r9
 800822c:	eb43 0b01 	adc.w	fp, r3, r1
 8008230:	f04f 0200 	mov.w	r2, #0
 8008234:	f04f 0300 	mov.w	r3, #0
 8008238:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800823c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008240:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008244:	4692      	mov	sl, r2
 8008246:	469b      	mov	fp, r3
 8008248:	4643      	mov	r3, r8
 800824a:	eb1a 0303 	adds.w	r3, sl, r3
 800824e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008252:	464b      	mov	r3, r9
 8008254:	eb4b 0303 	adc.w	r3, fp, r3
 8008258:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800825c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008268:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800826c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008270:	460b      	mov	r3, r1
 8008272:	18db      	adds	r3, r3, r3
 8008274:	643b      	str	r3, [r7, #64]	; 0x40
 8008276:	4613      	mov	r3, r2
 8008278:	eb42 0303 	adc.w	r3, r2, r3
 800827c:	647b      	str	r3, [r7, #68]	; 0x44
 800827e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008282:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008286:	f7f8 fcb7 	bl	8000bf8 <__aeabi_uldivmod>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	4611      	mov	r1, r2
 8008290:	4b3b      	ldr	r3, [pc, #236]	; (8008380 <UART_SetConfig+0x2d4>)
 8008292:	fba3 2301 	umull	r2, r3, r3, r1
 8008296:	095b      	lsrs	r3, r3, #5
 8008298:	2264      	movs	r2, #100	; 0x64
 800829a:	fb02 f303 	mul.w	r3, r2, r3
 800829e:	1acb      	subs	r3, r1, r3
 80082a0:	00db      	lsls	r3, r3, #3
 80082a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082a6:	4b36      	ldr	r3, [pc, #216]	; (8008380 <UART_SetConfig+0x2d4>)
 80082a8:	fba3 2302 	umull	r2, r3, r3, r2
 80082ac:	095b      	lsrs	r3, r3, #5
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082b4:	441c      	add	r4, r3
 80082b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082c8:	4642      	mov	r2, r8
 80082ca:	464b      	mov	r3, r9
 80082cc:	1891      	adds	r1, r2, r2
 80082ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80082d0:	415b      	adcs	r3, r3
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082d8:	4641      	mov	r1, r8
 80082da:	1851      	adds	r1, r2, r1
 80082dc:	6339      	str	r1, [r7, #48]	; 0x30
 80082de:	4649      	mov	r1, r9
 80082e0:	414b      	adcs	r3, r1
 80082e2:	637b      	str	r3, [r7, #52]	; 0x34
 80082e4:	f04f 0200 	mov.w	r2, #0
 80082e8:	f04f 0300 	mov.w	r3, #0
 80082ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80082f0:	4659      	mov	r1, fp
 80082f2:	00cb      	lsls	r3, r1, #3
 80082f4:	4651      	mov	r1, sl
 80082f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082fa:	4651      	mov	r1, sl
 80082fc:	00ca      	lsls	r2, r1, #3
 80082fe:	4610      	mov	r0, r2
 8008300:	4619      	mov	r1, r3
 8008302:	4603      	mov	r3, r0
 8008304:	4642      	mov	r2, r8
 8008306:	189b      	adds	r3, r3, r2
 8008308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800830c:	464b      	mov	r3, r9
 800830e:	460a      	mov	r2, r1
 8008310:	eb42 0303 	adc.w	r3, r2, r3
 8008314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008324:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800832c:	460b      	mov	r3, r1
 800832e:	18db      	adds	r3, r3, r3
 8008330:	62bb      	str	r3, [r7, #40]	; 0x28
 8008332:	4613      	mov	r3, r2
 8008334:	eb42 0303 	adc.w	r3, r2, r3
 8008338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800833a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800833e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008342:	f7f8 fc59 	bl	8000bf8 <__aeabi_uldivmod>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4b0d      	ldr	r3, [pc, #52]	; (8008380 <UART_SetConfig+0x2d4>)
 800834c:	fba3 1302 	umull	r1, r3, r3, r2
 8008350:	095b      	lsrs	r3, r3, #5
 8008352:	2164      	movs	r1, #100	; 0x64
 8008354:	fb01 f303 	mul.w	r3, r1, r3
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	3332      	adds	r3, #50	; 0x32
 800835e:	4a08      	ldr	r2, [pc, #32]	; (8008380 <UART_SetConfig+0x2d4>)
 8008360:	fba2 2303 	umull	r2, r3, r2, r3
 8008364:	095b      	lsrs	r3, r3, #5
 8008366:	f003 0207 	and.w	r2, r3, #7
 800836a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4422      	add	r2, r4
 8008372:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008374:	e106      	b.n	8008584 <UART_SetConfig+0x4d8>
 8008376:	bf00      	nop
 8008378:	40011000 	.word	0x40011000
 800837c:	40011400 	.word	0x40011400
 8008380:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008388:	2200      	movs	r2, #0
 800838a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800838e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008392:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008396:	4642      	mov	r2, r8
 8008398:	464b      	mov	r3, r9
 800839a:	1891      	adds	r1, r2, r2
 800839c:	6239      	str	r1, [r7, #32]
 800839e:	415b      	adcs	r3, r3
 80083a0:	627b      	str	r3, [r7, #36]	; 0x24
 80083a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083a6:	4641      	mov	r1, r8
 80083a8:	1854      	adds	r4, r2, r1
 80083aa:	4649      	mov	r1, r9
 80083ac:	eb43 0501 	adc.w	r5, r3, r1
 80083b0:	f04f 0200 	mov.w	r2, #0
 80083b4:	f04f 0300 	mov.w	r3, #0
 80083b8:	00eb      	lsls	r3, r5, #3
 80083ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083be:	00e2      	lsls	r2, r4, #3
 80083c0:	4614      	mov	r4, r2
 80083c2:	461d      	mov	r5, r3
 80083c4:	4643      	mov	r3, r8
 80083c6:	18e3      	adds	r3, r4, r3
 80083c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083cc:	464b      	mov	r3, r9
 80083ce:	eb45 0303 	adc.w	r3, r5, r3
 80083d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083e6:	f04f 0200 	mov.w	r2, #0
 80083ea:	f04f 0300 	mov.w	r3, #0
 80083ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80083f2:	4629      	mov	r1, r5
 80083f4:	008b      	lsls	r3, r1, #2
 80083f6:	4621      	mov	r1, r4
 80083f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083fc:	4621      	mov	r1, r4
 80083fe:	008a      	lsls	r2, r1, #2
 8008400:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008404:	f7f8 fbf8 	bl	8000bf8 <__aeabi_uldivmod>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4b60      	ldr	r3, [pc, #384]	; (8008590 <UART_SetConfig+0x4e4>)
 800840e:	fba3 2302 	umull	r2, r3, r3, r2
 8008412:	095b      	lsrs	r3, r3, #5
 8008414:	011c      	lsls	r4, r3, #4
 8008416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800841a:	2200      	movs	r2, #0
 800841c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008420:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008424:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008428:	4642      	mov	r2, r8
 800842a:	464b      	mov	r3, r9
 800842c:	1891      	adds	r1, r2, r2
 800842e:	61b9      	str	r1, [r7, #24]
 8008430:	415b      	adcs	r3, r3
 8008432:	61fb      	str	r3, [r7, #28]
 8008434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008438:	4641      	mov	r1, r8
 800843a:	1851      	adds	r1, r2, r1
 800843c:	6139      	str	r1, [r7, #16]
 800843e:	4649      	mov	r1, r9
 8008440:	414b      	adcs	r3, r1
 8008442:	617b      	str	r3, [r7, #20]
 8008444:	f04f 0200 	mov.w	r2, #0
 8008448:	f04f 0300 	mov.w	r3, #0
 800844c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008450:	4659      	mov	r1, fp
 8008452:	00cb      	lsls	r3, r1, #3
 8008454:	4651      	mov	r1, sl
 8008456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800845a:	4651      	mov	r1, sl
 800845c:	00ca      	lsls	r2, r1, #3
 800845e:	4610      	mov	r0, r2
 8008460:	4619      	mov	r1, r3
 8008462:	4603      	mov	r3, r0
 8008464:	4642      	mov	r2, r8
 8008466:	189b      	adds	r3, r3, r2
 8008468:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800846c:	464b      	mov	r3, r9
 800846e:	460a      	mov	r2, r1
 8008470:	eb42 0303 	adc.w	r3, r2, r3
 8008474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	67bb      	str	r3, [r7, #120]	; 0x78
 8008482:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008484:	f04f 0200 	mov.w	r2, #0
 8008488:	f04f 0300 	mov.w	r3, #0
 800848c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008490:	4649      	mov	r1, r9
 8008492:	008b      	lsls	r3, r1, #2
 8008494:	4641      	mov	r1, r8
 8008496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800849a:	4641      	mov	r1, r8
 800849c:	008a      	lsls	r2, r1, #2
 800849e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084a2:	f7f8 fba9 	bl	8000bf8 <__aeabi_uldivmod>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4611      	mov	r1, r2
 80084ac:	4b38      	ldr	r3, [pc, #224]	; (8008590 <UART_SetConfig+0x4e4>)
 80084ae:	fba3 2301 	umull	r2, r3, r3, r1
 80084b2:	095b      	lsrs	r3, r3, #5
 80084b4:	2264      	movs	r2, #100	; 0x64
 80084b6:	fb02 f303 	mul.w	r3, r2, r3
 80084ba:	1acb      	subs	r3, r1, r3
 80084bc:	011b      	lsls	r3, r3, #4
 80084be:	3332      	adds	r3, #50	; 0x32
 80084c0:	4a33      	ldr	r2, [pc, #204]	; (8008590 <UART_SetConfig+0x4e4>)
 80084c2:	fba2 2303 	umull	r2, r3, r2, r3
 80084c6:	095b      	lsrs	r3, r3, #5
 80084c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084cc:	441c      	add	r4, r3
 80084ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084d2:	2200      	movs	r2, #0
 80084d4:	673b      	str	r3, [r7, #112]	; 0x70
 80084d6:	677a      	str	r2, [r7, #116]	; 0x74
 80084d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084dc:	4642      	mov	r2, r8
 80084de:	464b      	mov	r3, r9
 80084e0:	1891      	adds	r1, r2, r2
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	415b      	adcs	r3, r3
 80084e6:	60fb      	str	r3, [r7, #12]
 80084e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084ec:	4641      	mov	r1, r8
 80084ee:	1851      	adds	r1, r2, r1
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	4649      	mov	r1, r9
 80084f4:	414b      	adcs	r3, r1
 80084f6:	607b      	str	r3, [r7, #4]
 80084f8:	f04f 0200 	mov.w	r2, #0
 80084fc:	f04f 0300 	mov.w	r3, #0
 8008500:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008504:	4659      	mov	r1, fp
 8008506:	00cb      	lsls	r3, r1, #3
 8008508:	4651      	mov	r1, sl
 800850a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800850e:	4651      	mov	r1, sl
 8008510:	00ca      	lsls	r2, r1, #3
 8008512:	4610      	mov	r0, r2
 8008514:	4619      	mov	r1, r3
 8008516:	4603      	mov	r3, r0
 8008518:	4642      	mov	r2, r8
 800851a:	189b      	adds	r3, r3, r2
 800851c:	66bb      	str	r3, [r7, #104]	; 0x68
 800851e:	464b      	mov	r3, r9
 8008520:	460a      	mov	r2, r1
 8008522:	eb42 0303 	adc.w	r3, r2, r3
 8008526:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	663b      	str	r3, [r7, #96]	; 0x60
 8008532:	667a      	str	r2, [r7, #100]	; 0x64
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	f04f 0300 	mov.w	r3, #0
 800853c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008540:	4649      	mov	r1, r9
 8008542:	008b      	lsls	r3, r1, #2
 8008544:	4641      	mov	r1, r8
 8008546:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800854a:	4641      	mov	r1, r8
 800854c:	008a      	lsls	r2, r1, #2
 800854e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008552:	f7f8 fb51 	bl	8000bf8 <__aeabi_uldivmod>
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <UART_SetConfig+0x4e4>)
 800855c:	fba3 1302 	umull	r1, r3, r3, r2
 8008560:	095b      	lsrs	r3, r3, #5
 8008562:	2164      	movs	r1, #100	; 0x64
 8008564:	fb01 f303 	mul.w	r3, r1, r3
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	011b      	lsls	r3, r3, #4
 800856c:	3332      	adds	r3, #50	; 0x32
 800856e:	4a08      	ldr	r2, [pc, #32]	; (8008590 <UART_SetConfig+0x4e4>)
 8008570:	fba2 2303 	umull	r2, r3, r2, r3
 8008574:	095b      	lsrs	r3, r3, #5
 8008576:	f003 020f 	and.w	r2, r3, #15
 800857a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4422      	add	r2, r4
 8008582:	609a      	str	r2, [r3, #8]
}
 8008584:	bf00      	nop
 8008586:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800858a:	46bd      	mov	sp, r7
 800858c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008590:	51eb851f 	.word	0x51eb851f

08008594 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008598:	4904      	ldr	r1, [pc, #16]	; (80085ac <MX_FATFS_Init+0x18>)
 800859a:	4805      	ldr	r0, [pc, #20]	; (80085b0 <MX_FATFS_Init+0x1c>)
 800859c:	f002 fca2 	bl	800aee4 <FATFS_LinkDriver>
 80085a0:	4603      	mov	r3, r0
 80085a2:	461a      	mov	r2, r3
 80085a4:	4b03      	ldr	r3, [pc, #12]	; (80085b4 <MX_FATFS_Init+0x20>)
 80085a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80085a8:	bf00      	nop
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	20001898 	.word	0x20001898
 80085b0:	200006a4 	.word	0x200006a4
 80085b4:	20001894 	.word	0x20001894

080085b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80085b8:	b480      	push	{r7}
 80085ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80085bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80085be:	4618      	mov	r0, r3
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4603      	mov	r3, r0
 80085d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fa fde5 	bl	80031a4 <USER_SPI_initialize>
 80085da:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fa fec3 	bl	800337c <USER_SPI_status>
 80085f6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	607a      	str	r2, [r7, #4]
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	4603      	mov	r3, r0
 800860e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8008610:	7bf8      	ldrb	r0, [r7, #15]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	68b9      	ldr	r1, [r7, #8]
 8008618:	f7fa fec6 	bl	80033a8 <USER_SPI_read>
 800861c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	603b      	str	r3, [r7, #0]
 8008632:	4603      	mov	r3, r0
 8008634:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8008636:	7bf8      	ldrb	r0, [r7, #15]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	f7fa ff19 	bl	8003474 <USER_SPI_write>
 8008642:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	603a      	str	r2, [r7, #0]
 8008656:	71fb      	strb	r3, [r7, #7]
 8008658:	460b      	mov	r3, r1
 800865a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800865c:	79b9      	ldrb	r1, [r7, #6]
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	4618      	mov	r0, r3
 8008664:	f7fa ff82 	bl	800356c <USER_SPI_ioctl>
 8008668:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	4603      	mov	r3, r0
 800867c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	4a08      	ldr	r2, [pc, #32]	; (80086a4 <disk_status+0x30>)
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	79fa      	ldrb	r2, [r7, #7]
 800868c:	4905      	ldr	r1, [pc, #20]	; (80086a4 <disk_status+0x30>)
 800868e:	440a      	add	r2, r1
 8008690:	7a12      	ldrb	r2, [r2, #8]
 8008692:	4610      	mov	r0, r2
 8008694:	4798      	blx	r3
 8008696:	4603      	mov	r3, r0
 8008698:	73fb      	strb	r3, [r7, #15]
  return stat;
 800869a:	7bfb      	ldrb	r3, [r7, #15]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	200018c4 	.word	0x200018c4

080086a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	4603      	mov	r3, r0
 80086b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80086b6:	79fb      	ldrb	r3, [r7, #7]
 80086b8:	4a0d      	ldr	r2, [pc, #52]	; (80086f0 <disk_initialize+0x48>)
 80086ba:	5cd3      	ldrb	r3, [r2, r3]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d111      	bne.n	80086e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80086c0:	79fb      	ldrb	r3, [r7, #7]
 80086c2:	4a0b      	ldr	r2, [pc, #44]	; (80086f0 <disk_initialize+0x48>)
 80086c4:	2101      	movs	r1, #1
 80086c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80086c8:	79fb      	ldrb	r3, [r7, #7]
 80086ca:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <disk_initialize+0x48>)
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	79fa      	ldrb	r2, [r7, #7]
 80086d6:	4906      	ldr	r1, [pc, #24]	; (80086f0 <disk_initialize+0x48>)
 80086d8:	440a      	add	r2, r1
 80086da:	7a12      	ldrb	r2, [r2, #8]
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
 80086e0:	4603      	mov	r3, r0
 80086e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	200018c4 	.word	0x200018c4

080086f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80086f4:	b590      	push	{r4, r7, lr}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	607a      	str	r2, [r7, #4]
 80086fe:	603b      	str	r3, [r7, #0]
 8008700:	4603      	mov	r3, r0
 8008702:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	4a0a      	ldr	r2, [pc, #40]	; (8008730 <disk_read+0x3c>)
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	689c      	ldr	r4, [r3, #8]
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	4a07      	ldr	r2, [pc, #28]	; (8008730 <disk_read+0x3c>)
 8008714:	4413      	add	r3, r2
 8008716:	7a18      	ldrb	r0, [r3, #8]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	68b9      	ldr	r1, [r7, #8]
 800871e:	47a0      	blx	r4
 8008720:	4603      	mov	r3, r0
 8008722:	75fb      	strb	r3, [r7, #23]
  return res;
 8008724:	7dfb      	ldrb	r3, [r7, #23]
}
 8008726:	4618      	mov	r0, r3
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	bd90      	pop	{r4, r7, pc}
 800872e:	bf00      	nop
 8008730:	200018c4 	.word	0x200018c4

08008734 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008734:	b590      	push	{r4, r7, lr}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	607a      	str	r2, [r7, #4]
 800873e:	603b      	str	r3, [r7, #0]
 8008740:	4603      	mov	r3, r0
 8008742:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008744:	7bfb      	ldrb	r3, [r7, #15]
 8008746:	4a0a      	ldr	r2, [pc, #40]	; (8008770 <disk_write+0x3c>)
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	68dc      	ldr	r4, [r3, #12]
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	4a07      	ldr	r2, [pc, #28]	; (8008770 <disk_write+0x3c>)
 8008754:	4413      	add	r3, r2
 8008756:	7a18      	ldrb	r0, [r3, #8]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	47a0      	blx	r4
 8008760:	4603      	mov	r3, r0
 8008762:	75fb      	strb	r3, [r7, #23]
  return res;
 8008764:	7dfb      	ldrb	r3, [r7, #23]
}
 8008766:	4618      	mov	r0, r3
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	bd90      	pop	{r4, r7, pc}
 800876e:	bf00      	nop
 8008770:	200018c4 	.word	0x200018c4

08008774 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	4603      	mov	r3, r0
 800877c:	603a      	str	r2, [r7, #0]
 800877e:	71fb      	strb	r3, [r7, #7]
 8008780:	460b      	mov	r3, r1
 8008782:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	4a09      	ldr	r2, [pc, #36]	; (80087ac <disk_ioctl+0x38>)
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	79fa      	ldrb	r2, [r7, #7]
 8008792:	4906      	ldr	r1, [pc, #24]	; (80087ac <disk_ioctl+0x38>)
 8008794:	440a      	add	r2, r1
 8008796:	7a10      	ldrb	r0, [r2, #8]
 8008798:	79b9      	ldrb	r1, [r7, #6]
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	4798      	blx	r3
 800879e:	4603      	mov	r3, r0
 80087a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	200018c4 	.word	0x200018c4

080087b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3301      	adds	r3, #1
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80087c0:	89fb      	ldrh	r3, [r7, #14]
 80087c2:	021b      	lsls	r3, r3, #8
 80087c4:	b21a      	sxth	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	b21b      	sxth	r3, r3
 80087cc:	4313      	orrs	r3, r2
 80087ce:	b21b      	sxth	r3, r3
 80087d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80087d2:	89fb      	ldrh	r3, [r7, #14]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3303      	adds	r3, #3
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	021b      	lsls	r3, r3, #8
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	3202      	adds	r2, #2
 80087f8:	7812      	ldrb	r2, [r2, #0]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	3201      	adds	r2, #1
 8008806:	7812      	ldrb	r2, [r2, #0]
 8008808:	4313      	orrs	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	021b      	lsls	r3, r3, #8
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	7812      	ldrb	r2, [r2, #0]
 8008814:	4313      	orrs	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
	return rv;
 8008818:	68fb      	ldr	r3, [r7, #12]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3714      	adds	r7, #20
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	460b      	mov	r3, r1
 8008830:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	1c5a      	adds	r2, r3, #1
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	887a      	ldrh	r2, [r7, #2]
 800883a:	b2d2      	uxtb	r2, r2
 800883c:	701a      	strb	r2, [r3, #0]
 800883e:	887b      	ldrh	r3, [r7, #2]
 8008840:	0a1b      	lsrs	r3, r3, #8
 8008842:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	607a      	str	r2, [r7, #4]
 800884a:	887a      	ldrh	r2, [r7, #2]
 800884c:	b2d2      	uxtb	r2, r2
 800884e:	701a      	strb	r2, [r3, #0]
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	607a      	str	r2, [r7, #4]
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	b2d2      	uxtb	r2, r2
 8008870:	701a      	strb	r2, [r3, #0]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	0a1b      	lsrs	r3, r3, #8
 8008876:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	1c5a      	adds	r2, r3, #1
 800887c:	607a      	str	r2, [r7, #4]
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	b2d2      	uxtb	r2, r2
 8008882:	701a      	strb	r2, [r3, #0]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	0a1b      	lsrs	r3, r3, #8
 8008888:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	1c5a      	adds	r2, r3, #1
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	b2d2      	uxtb	r2, r2
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	0a1b      	lsrs	r3, r3, #8
 800889a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	607a      	str	r2, [r7, #4]
 80088a2:	683a      	ldr	r2, [r7, #0]
 80088a4:	b2d2      	uxtb	r2, r2
 80088a6:	701a      	strb	r2, [r3, #0]
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80088b4:	b480      	push	{r7}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00d      	beq.n	80088ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	1c53      	adds	r3, r2, #1
 80088d2:	613b      	str	r3, [r7, #16]
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	1c59      	adds	r1, r3, #1
 80088d8:	6179      	str	r1, [r7, #20]
 80088da:	7812      	ldrb	r2, [r2, #0]
 80088dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	3b01      	subs	r3, #1
 80088e2:	607b      	str	r3, [r7, #4]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1f1      	bne.n	80088ce <mem_cpy+0x1a>
	}
}
 80088ea:	bf00      	nop
 80088ec:	371c      	adds	r7, #28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80088f6:	b480      	push	{r7}
 80088f8:	b087      	sub	sp, #28
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	1c5a      	adds	r2, r3, #1
 800890a:	617a      	str	r2, [r7, #20]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	b2d2      	uxtb	r2, r2
 8008910:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	3b01      	subs	r3, #1
 8008916:	607b      	str	r3, [r7, #4]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1f3      	bne.n	8008906 <mem_set+0x10>
}
 800891e:	bf00      	nop
 8008920:	bf00      	nop
 8008922:	371c      	adds	r7, #28
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800892c:	b480      	push	{r7}
 800892e:	b089      	sub	sp, #36	; 0x24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	61fb      	str	r3, [r7, #28]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008940:	2300      	movs	r3, #0
 8008942:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	61fa      	str	r2, [r7, #28]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	4619      	mov	r1, r3
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	1c5a      	adds	r2, r3, #1
 8008952:	61ba      	str	r2, [r7, #24]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	1acb      	subs	r3, r1, r3
 8008958:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3b01      	subs	r3, #1
 800895e:	607b      	str	r3, [r7, #4]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <mem_cmp+0x40>
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0eb      	beq.n	8008944 <mem_cmp+0x18>

	return r;
 800896c:	697b      	ldr	r3, [r7, #20]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3724      	adds	r7, #36	; 0x24
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008984:	e002      	b.n	800898c <chk_chr+0x12>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	3301      	adds	r3, #1
 800898a:	607b      	str	r3, [r7, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d005      	beq.n	80089a0 <chk_chr+0x26>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	461a      	mov	r2, r3
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	4293      	cmp	r3, r2
 800899e:	d1f2      	bne.n	8008986 <chk_chr+0xc>
	return *str;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	781b      	ldrb	r3, [r3, #0]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80089ba:	2300      	movs	r3, #0
 80089bc:	60bb      	str	r3, [r7, #8]
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	60fb      	str	r3, [r7, #12]
 80089c2:	e029      	b.n	8008a18 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80089c4:	4a27      	ldr	r2, [pc, #156]	; (8008a64 <chk_lock+0xb4>)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	011b      	lsls	r3, r3, #4
 80089ca:	4413      	add	r3, r2
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d01d      	beq.n	8008a0e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80089d2:	4a24      	ldr	r2, [pc, #144]	; (8008a64 <chk_lock+0xb4>)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	011b      	lsls	r3, r3, #4
 80089d8:	4413      	add	r3, r2
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d116      	bne.n	8008a12 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80089e4:	4a1f      	ldr	r2, [pc, #124]	; (8008a64 <chk_lock+0xb4>)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	4413      	add	r3, r2
 80089ec:	3304      	adds	r3, #4
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d10c      	bne.n	8008a12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80089f8:	4a1a      	ldr	r2, [pc, #104]	; (8008a64 <chk_lock+0xb4>)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	011b      	lsls	r3, r3, #4
 80089fe:	4413      	add	r3, r2
 8008a00:	3308      	adds	r3, #8
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d102      	bne.n	8008a12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008a0c:	e007      	b.n	8008a1e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	3301      	adds	r3, #1
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d9d2      	bls.n	80089c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d109      	bne.n	8008a38 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d102      	bne.n	8008a30 <chk_lock+0x80>
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d101      	bne.n	8008a34 <chk_lock+0x84>
 8008a30:	2300      	movs	r3, #0
 8008a32:	e010      	b.n	8008a56 <chk_lock+0xa6>
 8008a34:	2312      	movs	r3, #18
 8008a36:	e00e      	b.n	8008a56 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d108      	bne.n	8008a50 <chk_lock+0xa0>
 8008a3e:	4a09      	ldr	r2, [pc, #36]	; (8008a64 <chk_lock+0xb4>)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	011b      	lsls	r3, r3, #4
 8008a44:	4413      	add	r3, r2
 8008a46:	330c      	adds	r3, #12
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a4e:	d101      	bne.n	8008a54 <chk_lock+0xa4>
 8008a50:	2310      	movs	r3, #16
 8008a52:	e000      	b.n	8008a56 <chk_lock+0xa6>
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	200018a4 	.word	0x200018a4

08008a68 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	607b      	str	r3, [r7, #4]
 8008a72:	e002      	b.n	8008a7a <enq_lock+0x12>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	3301      	adds	r3, #1
 8008a78:	607b      	str	r3, [r7, #4]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d806      	bhi.n	8008a8e <enq_lock+0x26>
 8008a80:	4a09      	ldr	r2, [pc, #36]	; (8008aa8 <enq_lock+0x40>)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	011b      	lsls	r3, r3, #4
 8008a86:	4413      	add	r3, r2
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1f2      	bne.n	8008a74 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	bf14      	ite	ne
 8008a94:	2301      	movne	r3, #1
 8008a96:	2300      	moveq	r3, #0
 8008a98:	b2db      	uxtb	r3, r3
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	200018a4 	.word	0x200018a4

08008aac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	60fb      	str	r3, [r7, #12]
 8008aba:	e01f      	b.n	8008afc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008abc:	4a41      	ldr	r2, [pc, #260]	; (8008bc4 <inc_lock+0x118>)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	011b      	lsls	r3, r3, #4
 8008ac2:	4413      	add	r3, r2
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d113      	bne.n	8008af6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008ace:	4a3d      	ldr	r2, [pc, #244]	; (8008bc4 <inc_lock+0x118>)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	011b      	lsls	r3, r3, #4
 8008ad4:	4413      	add	r3, r2
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d109      	bne.n	8008af6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008ae2:	4a38      	ldr	r2, [pc, #224]	; (8008bc4 <inc_lock+0x118>)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	011b      	lsls	r3, r3, #4
 8008ae8:	4413      	add	r3, r2
 8008aea:	3308      	adds	r3, #8
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d006      	beq.n	8008b04 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3301      	adds	r3, #1
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d9dc      	bls.n	8008abc <inc_lock+0x10>
 8008b02:	e000      	b.n	8008b06 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008b04:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d132      	bne.n	8008b72 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	60fb      	str	r3, [r7, #12]
 8008b10:	e002      	b.n	8008b18 <inc_lock+0x6c>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3301      	adds	r3, #1
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d806      	bhi.n	8008b2c <inc_lock+0x80>
 8008b1e:	4a29      	ldr	r2, [pc, #164]	; (8008bc4 <inc_lock+0x118>)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	011b      	lsls	r3, r3, #4
 8008b24:	4413      	add	r3, r2
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1f2      	bne.n	8008b12 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d101      	bne.n	8008b36 <inc_lock+0x8a>
 8008b32:	2300      	movs	r3, #0
 8008b34:	e040      	b.n	8008bb8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	4922      	ldr	r1, [pc, #136]	; (8008bc4 <inc_lock+0x118>)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	011b      	lsls	r3, r3, #4
 8008b40:	440b      	add	r3, r1
 8008b42:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	491e      	ldr	r1, [pc, #120]	; (8008bc4 <inc_lock+0x118>)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	011b      	lsls	r3, r3, #4
 8008b4e:	440b      	add	r3, r1
 8008b50:	3304      	adds	r3, #4
 8008b52:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	695a      	ldr	r2, [r3, #20]
 8008b58:	491a      	ldr	r1, [pc, #104]	; (8008bc4 <inc_lock+0x118>)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	011b      	lsls	r3, r3, #4
 8008b5e:	440b      	add	r3, r1
 8008b60:	3308      	adds	r3, #8
 8008b62:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008b64:	4a17      	ldr	r2, [pc, #92]	; (8008bc4 <inc_lock+0x118>)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	011b      	lsls	r3, r3, #4
 8008b6a:	4413      	add	r3, r2
 8008b6c:	330c      	adds	r3, #12
 8008b6e:	2200      	movs	r2, #0
 8008b70:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d009      	beq.n	8008b8c <inc_lock+0xe0>
 8008b78:	4a12      	ldr	r2, [pc, #72]	; (8008bc4 <inc_lock+0x118>)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	011b      	lsls	r3, r3, #4
 8008b7e:	4413      	add	r3, r2
 8008b80:	330c      	adds	r3, #12
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <inc_lock+0xe0>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	e015      	b.n	8008bb8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d108      	bne.n	8008ba4 <inc_lock+0xf8>
 8008b92:	4a0c      	ldr	r2, [pc, #48]	; (8008bc4 <inc_lock+0x118>)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	011b      	lsls	r3, r3, #4
 8008b98:	4413      	add	r3, r2
 8008b9a:	330c      	adds	r3, #12
 8008b9c:	881b      	ldrh	r3, [r3, #0]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	e001      	b.n	8008ba8 <inc_lock+0xfc>
 8008ba4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ba8:	4906      	ldr	r1, [pc, #24]	; (8008bc4 <inc_lock+0x118>)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	011b      	lsls	r3, r3, #4
 8008bae:	440b      	add	r3, r1
 8008bb0:	330c      	adds	r3, #12
 8008bb2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	3301      	adds	r3, #1
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	200018a4 	.word	0x200018a4

08008bc8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	607b      	str	r3, [r7, #4]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d825      	bhi.n	8008c28 <dec_lock+0x60>
		n = Files[i].ctr;
 8008bdc:	4a17      	ldr	r2, [pc, #92]	; (8008c3c <dec_lock+0x74>)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	011b      	lsls	r3, r3, #4
 8008be2:	4413      	add	r3, r2
 8008be4:	330c      	adds	r3, #12
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008bea:	89fb      	ldrh	r3, [r7, #14]
 8008bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf0:	d101      	bne.n	8008bf6 <dec_lock+0x2e>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008bf6:	89fb      	ldrh	r3, [r7, #14]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d002      	beq.n	8008c02 <dec_lock+0x3a>
 8008bfc:	89fb      	ldrh	r3, [r7, #14]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008c02:	4a0e      	ldr	r2, [pc, #56]	; (8008c3c <dec_lock+0x74>)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	011b      	lsls	r3, r3, #4
 8008c08:	4413      	add	r3, r2
 8008c0a:	330c      	adds	r3, #12
 8008c0c:	89fa      	ldrh	r2, [r7, #14]
 8008c0e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008c10:	89fb      	ldrh	r3, [r7, #14]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d105      	bne.n	8008c22 <dec_lock+0x5a>
 8008c16:	4a09      	ldr	r2, [pc, #36]	; (8008c3c <dec_lock+0x74>)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	011b      	lsls	r3, r3, #4
 8008c1c:	4413      	add	r3, r2
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	737b      	strb	r3, [r7, #13]
 8008c26:	e001      	b.n	8008c2c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008c28:	2302      	movs	r3, #2
 8008c2a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008c2c:	7b7b      	ldrb	r3, [r7, #13]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	200018a4 	.word	0x200018a4

08008c40 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	e010      	b.n	8008c70 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008c4e:	4a0d      	ldr	r2, [pc, #52]	; (8008c84 <clear_lock+0x44>)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	011b      	lsls	r3, r3, #4
 8008c54:	4413      	add	r3, r2
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d105      	bne.n	8008c6a <clear_lock+0x2a>
 8008c5e:	4a09      	ldr	r2, [pc, #36]	; (8008c84 <clear_lock+0x44>)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	011b      	lsls	r3, r3, #4
 8008c64:	4413      	add	r3, r2
 8008c66:	2200      	movs	r2, #0
 8008c68:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d9eb      	bls.n	8008c4e <clear_lock+0xe>
	}
}
 8008c76:	bf00      	nop
 8008c78:	bf00      	nop
 8008c7a:	3714      	adds	r7, #20
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	200018a4 	.word	0x200018a4

08008c88 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	78db      	ldrb	r3, [r3, #3]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d034      	beq.n	8008d06 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	7858      	ldrb	r0, [r3, #1]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cac:	2301      	movs	r3, #1
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	f7ff fd40 	bl	8008734 <disk_write>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d002      	beq.n	8008cc0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	73fb      	strb	r3, [r7, #15]
 8008cbe:	e022      	b.n	8008d06 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	1ad2      	subs	r2, r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d217      	bcs.n	8008d06 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	789b      	ldrb	r3, [r3, #2]
 8008cda:	613b      	str	r3, [r7, #16]
 8008cdc:	e010      	b.n	8008d00 <sync_window+0x78>
					wsect += fs->fsize;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	7858      	ldrb	r0, [r3, #1]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	f7ff fd1d 	bl	8008734 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	613b      	str	r3, [r7, #16]
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d8eb      	bhi.n	8008cde <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3718      	adds	r7, #24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d01b      	beq.n	8008d60 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7ff ffad 	bl	8008c88 <sync_window>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d113      	bne.n	8008d60 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	7858      	ldrb	r0, [r3, #1]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d42:	2301      	movs	r3, #1
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	f7ff fcd5 	bl	80086f4 <disk_read>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d004      	beq.n	8008d5a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008d50:	f04f 33ff 	mov.w	r3, #4294967295
 8008d54:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
	...

08008d6c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7ff ff87 	bl	8008c88 <sync_window>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d158      	bne.n	8008e36 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d148      	bne.n	8008e1e <sync_fs+0xb2>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	791b      	ldrb	r3, [r3, #4]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d144      	bne.n	8008e1e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3330      	adds	r3, #48	; 0x30
 8008d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff fda9 	bl	80088f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	3330      	adds	r3, #48	; 0x30
 8008da8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008dac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff fd38 	bl	8008826 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	3330      	adds	r3, #48	; 0x30
 8008dba:	4921      	ldr	r1, [pc, #132]	; (8008e40 <sync_fs+0xd4>)
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7ff fd4d 	bl	800885c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	3330      	adds	r3, #48	; 0x30
 8008dc6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008dca:	491e      	ldr	r1, [pc, #120]	; (8008e44 <sync_fs+0xd8>)
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7ff fd45 	bl	800885c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	3330      	adds	r3, #48	; 0x30
 8008dd6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	4619      	mov	r1, r3
 8008de0:	4610      	mov	r0, r2
 8008de2:	f7ff fd3b 	bl	800885c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	3330      	adds	r3, #48	; 0x30
 8008dea:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	4619      	mov	r1, r3
 8008df4:	4610      	mov	r0, r2
 8008df6:	f7ff fd31 	bl	800885c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	1c5a      	adds	r2, r3, #1
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	7858      	ldrb	r0, [r3, #1]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e12:	2301      	movs	r3, #1
 8008e14:	f7ff fc8e 	bl	8008734 <disk_write>
			fs->fsi_flag = 0;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	785b      	ldrb	r3, [r3, #1]
 8008e22:	2200      	movs	r2, #0
 8008e24:	2100      	movs	r1, #0
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7ff fca4 	bl	8008774 <disk_ioctl>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <sync_fs+0xca>
 8008e32:	2301      	movs	r3, #1
 8008e34:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	41615252 	.word	0x41615252
 8008e44:	61417272 	.word	0x61417272

08008e48 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	3b02      	subs	r3, #2
 8008e56:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	3b02      	subs	r3, #2
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d301      	bcc.n	8008e68 <clust2sect+0x20>
 8008e64:	2300      	movs	r3, #0
 8008e66:	e008      	b.n	8008e7a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	895b      	ldrh	r3, [r3, #10]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	fb03 f202 	mul.w	r2, r3, r2
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e78:	4413      	add	r3, r2
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b086      	sub	sp, #24
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d904      	bls.n	8008ea6 <get_fat+0x20>
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d302      	bcc.n	8008eac <get_fat+0x26>
		val = 1;	/* Internal error */
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	617b      	str	r3, [r7, #20]
 8008eaa:	e08f      	b.n	8008fcc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008eac:	f04f 33ff 	mov.w	r3, #4294967295
 8008eb0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	2b03      	cmp	r3, #3
 8008eb8:	d062      	beq.n	8008f80 <get_fat+0xfa>
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	dc7c      	bgt.n	8008fb8 <get_fat+0x132>
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d002      	beq.n	8008ec8 <get_fat+0x42>
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d042      	beq.n	8008f4c <get_fat+0xc6>
 8008ec6:	e077      	b.n	8008fb8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	085b      	lsrs	r3, r3, #1
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	6a1a      	ldr	r2, [r3, #32]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	0a5b      	lsrs	r3, r3, #9
 8008ede:	4413      	add	r3, r2
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6938      	ldr	r0, [r7, #16]
 8008ee4:	f7ff ff14 	bl	8008d10 <move_window>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d167      	bne.n	8008fbe <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	60fa      	str	r2, [r7, #12]
 8008ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	4413      	add	r3, r2
 8008efc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f00:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	6a1a      	ldr	r2, [r3, #32]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	0a5b      	lsrs	r3, r3, #9
 8008f0a:	4413      	add	r3, r2
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6938      	ldr	r0, [r7, #16]
 8008f10:	f7ff fefe 	bl	8008d10 <move_window>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d153      	bne.n	8008fc2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	4413      	add	r3, r2
 8008f24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f28:	021b      	lsls	r3, r3, #8
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <get_fat+0xbc>
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	091b      	lsrs	r3, r3, #4
 8008f40:	e002      	b.n	8008f48 <get_fat+0xc2>
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f48:	617b      	str	r3, [r7, #20]
			break;
 8008f4a:	e03f      	b.n	8008fcc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	6a1a      	ldr	r2, [r3, #32]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	0a1b      	lsrs	r3, r3, #8
 8008f54:	4413      	add	r3, r2
 8008f56:	4619      	mov	r1, r3
 8008f58:	6938      	ldr	r0, [r7, #16]
 8008f5a:	f7ff fed9 	bl	8008d10 <move_window>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d130      	bne.n	8008fc6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	005b      	lsls	r3, r3, #1
 8008f6e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008f72:	4413      	add	r3, r2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7ff fc1b 	bl	80087b0 <ld_word>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	617b      	str	r3, [r7, #20]
			break;
 8008f7e:	e025      	b.n	8008fcc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	6a1a      	ldr	r2, [r3, #32]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	09db      	lsrs	r3, r3, #7
 8008f88:	4413      	add	r3, r2
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6938      	ldr	r0, [r7, #16]
 8008f8e:	f7ff febf 	bl	8008d10 <move_window>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d118      	bne.n	8008fca <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008fa6:	4413      	add	r3, r2
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7ff fc19 	bl	80087e0 <ld_dword>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008fb4:	617b      	str	r3, [r7, #20]
			break;
 8008fb6:	e009      	b.n	8008fcc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008fb8:	2301      	movs	r3, #1
 8008fba:	617b      	str	r3, [r7, #20]
 8008fbc:	e006      	b.n	8008fcc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fbe:	bf00      	nop
 8008fc0:	e004      	b.n	8008fcc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fc2:	bf00      	nop
 8008fc4:	e002      	b.n	8008fcc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008fc6:	bf00      	nop
 8008fc8:	e000      	b.n	8008fcc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008fca:	bf00      	nop
		}
	}

	return val;
 8008fcc:	697b      	ldr	r3, [r7, #20]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008fd6:	b590      	push	{r4, r7, lr}
 8008fd8:	b089      	sub	sp, #36	; 0x24
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	f240 80d9 	bls.w	80091a0 <put_fat+0x1ca>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	f080 80d3 	bcs.w	80091a0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	f000 8096 	beq.w	8009130 <put_fat+0x15a>
 8009004:	2b03      	cmp	r3, #3
 8009006:	f300 80cb 	bgt.w	80091a0 <put_fat+0x1ca>
 800900a:	2b01      	cmp	r3, #1
 800900c:	d002      	beq.n	8009014 <put_fat+0x3e>
 800900e:	2b02      	cmp	r3, #2
 8009010:	d06e      	beq.n	80090f0 <put_fat+0x11a>
 8009012:	e0c5      	b.n	80091a0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	61bb      	str	r3, [r7, #24]
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	085b      	lsrs	r3, r3, #1
 800901c:	69ba      	ldr	r2, [r7, #24]
 800901e:	4413      	add	r3, r2
 8009020:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6a1a      	ldr	r2, [r3, #32]
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	0a5b      	lsrs	r3, r3, #9
 800902a:	4413      	add	r3, r2
 800902c:	4619      	mov	r1, r3
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f7ff fe6e 	bl	8008d10 <move_window>
 8009034:	4603      	mov	r3, r0
 8009036:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009038:	7ffb      	ldrb	r3, [r7, #31]
 800903a:	2b00      	cmp	r3, #0
 800903c:	f040 80a9 	bne.w	8009192 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	1c59      	adds	r1, r3, #1
 800904a:	61b9      	str	r1, [r7, #24]
 800904c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009050:	4413      	add	r3, r2
 8009052:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00d      	beq.n	800907a <put_fat+0xa4>
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	b25b      	sxtb	r3, r3
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	b25a      	sxtb	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	b2db      	uxtb	r3, r3
 800906e:	011b      	lsls	r3, r3, #4
 8009070:	b25b      	sxtb	r3, r3
 8009072:	4313      	orrs	r3, r2
 8009074:	b25b      	sxtb	r3, r3
 8009076:	b2db      	uxtb	r3, r3
 8009078:	e001      	b.n	800907e <put_fat+0xa8>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	b2db      	uxtb	r3, r3
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6a1a      	ldr	r2, [r3, #32]
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	0a5b      	lsrs	r3, r3, #9
 8009090:	4413      	add	r3, r2
 8009092:	4619      	mov	r1, r3
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f7ff fe3b 	bl	8008d10 <move_window>
 800909a:	4603      	mov	r3, r0
 800909c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800909e:	7ffb      	ldrb	r3, [r7, #31]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d178      	bne.n	8009196 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b0:	4413      	add	r3, r2
 80090b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <put_fat+0xf0>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	091b      	lsrs	r3, r3, #4
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	e00e      	b.n	80090e4 <put_fat+0x10e>
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	b25b      	sxtb	r3, r3
 80090cc:	f023 030f 	bic.w	r3, r3, #15
 80090d0:	b25a      	sxtb	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	0a1b      	lsrs	r3, r3, #8
 80090d6:	b25b      	sxtb	r3, r3
 80090d8:	f003 030f 	and.w	r3, r3, #15
 80090dc:	b25b      	sxtb	r3, r3
 80090de:	4313      	orrs	r3, r2
 80090e0:	b25b      	sxtb	r3, r3
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2201      	movs	r2, #1
 80090ec:	70da      	strb	r2, [r3, #3]
			break;
 80090ee:	e057      	b.n	80091a0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6a1a      	ldr	r2, [r3, #32]
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	0a1b      	lsrs	r3, r3, #8
 80090f8:	4413      	add	r3, r2
 80090fa:	4619      	mov	r1, r3
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f7ff fe07 	bl	8008d10 <move_window>
 8009102:	4603      	mov	r3, r0
 8009104:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009106:	7ffb      	ldrb	r3, [r7, #31]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d146      	bne.n	800919a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800911a:	4413      	add	r3, r2
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	b292      	uxth	r2, r2
 8009120:	4611      	mov	r1, r2
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff fb7f 	bl	8008826 <st_word>
			fs->wflag = 1;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2201      	movs	r2, #1
 800912c:	70da      	strb	r2, [r3, #3]
			break;
 800912e:	e037      	b.n	80091a0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6a1a      	ldr	r2, [r3, #32]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	09db      	lsrs	r3, r3, #7
 8009138:	4413      	add	r3, r2
 800913a:	4619      	mov	r1, r3
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f7ff fde7 	bl	8008d10 <move_window>
 8009142:	4603      	mov	r3, r0
 8009144:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009146:	7ffb      	ldrb	r3, [r7, #31]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d128      	bne.n	800919e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009160:	4413      	add	r3, r2
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff fb3c 	bl	80087e0 <ld_dword>
 8009168:	4603      	mov	r3, r0
 800916a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800916e:	4323      	orrs	r3, r4
 8009170:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009180:	4413      	add	r3, r2
 8009182:	6879      	ldr	r1, [r7, #4]
 8009184:	4618      	mov	r0, r3
 8009186:	f7ff fb69 	bl	800885c <st_dword>
			fs->wflag = 1;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2201      	movs	r2, #1
 800918e:	70da      	strb	r2, [r3, #3]
			break;
 8009190:	e006      	b.n	80091a0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009192:	bf00      	nop
 8009194:	e004      	b.n	80091a0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009196:	bf00      	nop
 8009198:	e002      	b.n	80091a0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800919a:	bf00      	nop
 800919c:	e000      	b.n	80091a0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800919e:	bf00      	nop
		}
	}
	return res;
 80091a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3724      	adds	r7, #36	; 0x24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd90      	pop	{r4, r7, pc}

080091aa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b088      	sub	sp, #32
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d904      	bls.n	80091d0 <remove_chain+0x26>
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d301      	bcc.n	80091d4 <remove_chain+0x2a>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e04b      	b.n	800926c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00c      	beq.n	80091f4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80091da:	f04f 32ff 	mov.w	r2, #4294967295
 80091de:	6879      	ldr	r1, [r7, #4]
 80091e0:	69b8      	ldr	r0, [r7, #24]
 80091e2:	f7ff fef8 	bl	8008fd6 <put_fat>
 80091e6:	4603      	mov	r3, r0
 80091e8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80091ea:	7ffb      	ldrb	r3, [r7, #31]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <remove_chain+0x4a>
 80091f0:	7ffb      	ldrb	r3, [r7, #31]
 80091f2:	e03b      	b.n	800926c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80091f4:	68b9      	ldr	r1, [r7, #8]
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f7ff fe45 	bl	8008e86 <get_fat>
 80091fc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d031      	beq.n	8009268 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d101      	bne.n	800920e <remove_chain+0x64>
 800920a:	2302      	movs	r3, #2
 800920c:	e02e      	b.n	800926c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009214:	d101      	bne.n	800921a <remove_chain+0x70>
 8009216:	2301      	movs	r3, #1
 8009218:	e028      	b.n	800926c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800921a:	2200      	movs	r2, #0
 800921c:	68b9      	ldr	r1, [r7, #8]
 800921e:	69b8      	ldr	r0, [r7, #24]
 8009220:	f7ff fed9 	bl	8008fd6 <put_fat>
 8009224:	4603      	mov	r3, r0
 8009226:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009228:	7ffb      	ldrb	r3, [r7, #31]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <remove_chain+0x88>
 800922e:	7ffb      	ldrb	r3, [r7, #31]
 8009230:	e01c      	b.n	800926c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	691a      	ldr	r2, [r3, #16]
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	3b02      	subs	r3, #2
 800923c:	429a      	cmp	r2, r3
 800923e:	d20b      	bcs.n	8009258 <remove_chain+0xae>
			fs->free_clst++;
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	791b      	ldrb	r3, [r3, #4]
 800924e:	f043 0301 	orr.w	r3, r3, #1
 8009252:	b2da      	uxtb	r2, r3
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	429a      	cmp	r2, r3
 8009264:	d3c6      	bcc.n	80091f4 <remove_chain+0x4a>
 8009266:	e000      	b.n	800926a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009268:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3720      	adds	r7, #32
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10d      	bne.n	80092a6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d004      	beq.n	80092a0 <create_chain+0x2c>
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	429a      	cmp	r2, r3
 800929e:	d31b      	bcc.n	80092d8 <create_chain+0x64>
 80092a0:	2301      	movs	r3, #1
 80092a2:	61bb      	str	r3, [r7, #24]
 80092a4:	e018      	b.n	80092d8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff fdec 	bl	8008e86 <get_fat>
 80092ae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d801      	bhi.n	80092ba <create_chain+0x46>
 80092b6:	2301      	movs	r3, #1
 80092b8:	e070      	b.n	800939c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c0:	d101      	bne.n	80092c6 <create_chain+0x52>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	e06a      	b.n	800939c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d201      	bcs.n	80092d4 <create_chain+0x60>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	e063      	b.n	800939c <create_chain+0x128>
		scl = clst;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	3301      	adds	r3, #1
 80092e0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	69fa      	ldr	r2, [r7, #28]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d307      	bcc.n	80092fc <create_chain+0x88>
				ncl = 2;
 80092ec:	2302      	movs	r3, #2
 80092ee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80092f0:	69fa      	ldr	r2, [r7, #28]
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d901      	bls.n	80092fc <create_chain+0x88>
 80092f8:	2300      	movs	r3, #0
 80092fa:	e04f      	b.n	800939c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80092fc:	69f9      	ldr	r1, [r7, #28]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7ff fdc1 	bl	8008e86 <get_fat>
 8009304:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00e      	beq.n	800932a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d003      	beq.n	800931a <create_chain+0xa6>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009318:	d101      	bne.n	800931e <create_chain+0xaa>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	e03e      	b.n	800939c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800931e:	69fa      	ldr	r2, [r7, #28]
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	429a      	cmp	r2, r3
 8009324:	d1da      	bne.n	80092dc <create_chain+0x68>
 8009326:	2300      	movs	r3, #0
 8009328:	e038      	b.n	800939c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800932a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800932c:	f04f 32ff 	mov.w	r2, #4294967295
 8009330:	69f9      	ldr	r1, [r7, #28]
 8009332:	6938      	ldr	r0, [r7, #16]
 8009334:	f7ff fe4f 	bl	8008fd6 <put_fat>
 8009338:	4603      	mov	r3, r0
 800933a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800933c:	7dfb      	ldrb	r3, [r7, #23]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d109      	bne.n	8009356 <create_chain+0xe2>
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d006      	beq.n	8009356 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009348:	69fa      	ldr	r2, [r7, #28]
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6938      	ldr	r0, [r7, #16]
 800934e:	f7ff fe42 	bl	8008fd6 <put_fat>
 8009352:	4603      	mov	r3, r0
 8009354:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009356:	7dfb      	ldrb	r3, [r7, #23]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d116      	bne.n	800938a <create_chain+0x116>
		fs->last_clst = ncl;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	69fa      	ldr	r2, [r7, #28]
 8009360:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	691a      	ldr	r2, [r3, #16]
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	3b02      	subs	r3, #2
 800936c:	429a      	cmp	r2, r3
 800936e:	d804      	bhi.n	800937a <create_chain+0x106>
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	1e5a      	subs	r2, r3, #1
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	791b      	ldrb	r3, [r3, #4]
 800937e:	f043 0301 	orr.w	r3, r3, #1
 8009382:	b2da      	uxtb	r2, r3
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	711a      	strb	r2, [r3, #4]
 8009388:	e007      	b.n	800939a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d102      	bne.n	8009396 <create_chain+0x122>
 8009390:	f04f 33ff 	mov.w	r3, #4294967295
 8009394:	e000      	b.n	8009398 <create_chain+0x124>
 8009396:	2301      	movs	r3, #1
 8009398:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800939a:	69fb      	ldr	r3, [r7, #28]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3720      	adds	r7, #32
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b087      	sub	sp, #28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	3304      	adds	r3, #4
 80093ba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	0a5b      	lsrs	r3, r3, #9
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	8952      	ldrh	r2, [r2, #10]
 80093c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80093c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	1d1a      	adds	r2, r3, #4
 80093ce:	613a      	str	r2, [r7, #16]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d101      	bne.n	80093de <clmt_clust+0x3a>
 80093da:	2300      	movs	r3, #0
 80093dc:	e010      	b.n	8009400 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d307      	bcc.n	80093f6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	617b      	str	r3, [r7, #20]
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	3304      	adds	r3, #4
 80093f2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80093f4:	e7e9      	b.n	80093ca <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80093f6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	4413      	add	r3, r2
}
 8009400:	4618      	mov	r0, r3
 8009402:	371c      	adds	r7, #28
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009422:	d204      	bcs.n	800942e <dir_sdi+0x22>
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	f003 031f 	and.w	r3, r3, #31
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <dir_sdi+0x26>
		return FR_INT_ERR;
 800942e:	2302      	movs	r3, #2
 8009430:	e063      	b.n	80094fa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	683a      	ldr	r2, [r7, #0]
 8009436:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d106      	bne.n	8009452 <dir_sdi+0x46>
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b02      	cmp	r3, #2
 800944a:	d902      	bls.n	8009452 <dir_sdi+0x46>
		clst = fs->dirbase;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10c      	bne.n	8009472 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	095b      	lsrs	r3, r3, #5
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	8912      	ldrh	r2, [r2, #8]
 8009460:	4293      	cmp	r3, r2
 8009462:	d301      	bcc.n	8009468 <dir_sdi+0x5c>
 8009464:	2302      	movs	r3, #2
 8009466:	e048      	b.n	80094fa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	61da      	str	r2, [r3, #28]
 8009470:	e029      	b.n	80094c6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	895b      	ldrh	r3, [r3, #10]
 8009476:	025b      	lsls	r3, r3, #9
 8009478:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800947a:	e019      	b.n	80094b0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6979      	ldr	r1, [r7, #20]
 8009480:	4618      	mov	r0, r3
 8009482:	f7ff fd00 	bl	8008e86 <get_fat>
 8009486:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948e:	d101      	bne.n	8009494 <dir_sdi+0x88>
 8009490:	2301      	movs	r3, #1
 8009492:	e032      	b.n	80094fa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d904      	bls.n	80094a4 <dir_sdi+0x98>
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d301      	bcc.n	80094a8 <dir_sdi+0x9c>
 80094a4:	2302      	movs	r3, #2
 80094a6:	e028      	b.n	80094fa <dir_sdi+0xee>
			ofs -= csz;
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d2e1      	bcs.n	800947c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80094b8:	6979      	ldr	r1, [r7, #20]
 80094ba:	6938      	ldr	r0, [r7, #16]
 80094bc:	f7ff fcc4 	bl	8008e48 <clust2sect>
 80094c0:	4602      	mov	r2, r0
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	69db      	ldr	r3, [r3, #28]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <dir_sdi+0xcc>
 80094d4:	2302      	movs	r3, #2
 80094d6:	e010      	b.n	80094fa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	69da      	ldr	r2, [r3, #28]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	0a5b      	lsrs	r3, r3, #9
 80094e0:	441a      	add	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f2:	441a      	add	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3718      	adds	r7, #24
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b086      	sub	sp, #24
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	3320      	adds	r3, #32
 8009518:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <dir_next+0x28>
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009528:	d301      	bcc.n	800952e <dir_next+0x2c>
 800952a:	2304      	movs	r3, #4
 800952c:	e0aa      	b.n	8009684 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009534:	2b00      	cmp	r3, #0
 8009536:	f040 8098 	bne.w	800966a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10b      	bne.n	8009564 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	095b      	lsrs	r3, r3, #5
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	8912      	ldrh	r2, [r2, #8]
 8009554:	4293      	cmp	r3, r2
 8009556:	f0c0 8088 	bcc.w	800966a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	61da      	str	r2, [r3, #28]
 8009560:	2304      	movs	r3, #4
 8009562:	e08f      	b.n	8009684 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	0a5b      	lsrs	r3, r3, #9
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	8952      	ldrh	r2, [r2, #10]
 800956c:	3a01      	subs	r2, #1
 800956e:	4013      	ands	r3, r2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d17a      	bne.n	800966a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	4619      	mov	r1, r3
 800957c:	4610      	mov	r0, r2
 800957e:	f7ff fc82 	bl	8008e86 <get_fat>
 8009582:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d801      	bhi.n	800958e <dir_next+0x8c>
 800958a:	2302      	movs	r3, #2
 800958c:	e07a      	b.n	8009684 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009594:	d101      	bne.n	800959a <dir_next+0x98>
 8009596:	2301      	movs	r3, #1
 8009598:	e074      	b.n	8009684 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d358      	bcc.n	8009656 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d104      	bne.n	80095b4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	61da      	str	r2, [r3, #28]
 80095b0:	2304      	movs	r3, #4
 80095b2:	e067      	b.n	8009684 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	4619      	mov	r1, r3
 80095bc:	4610      	mov	r0, r2
 80095be:	f7ff fe59 	bl	8009274 <create_chain>
 80095c2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <dir_next+0xcc>
 80095ca:	2307      	movs	r3, #7
 80095cc:	e05a      	b.n	8009684 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d101      	bne.n	80095d8 <dir_next+0xd6>
 80095d4:	2302      	movs	r3, #2
 80095d6:	e055      	b.n	8009684 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095de:	d101      	bne.n	80095e4 <dir_next+0xe2>
 80095e0:	2301      	movs	r3, #1
 80095e2:	e04f      	b.n	8009684 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f7ff fb4f 	bl	8008c88 <sync_window>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <dir_next+0xf2>
 80095f0:	2301      	movs	r3, #1
 80095f2:	e047      	b.n	8009684 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	3330      	adds	r3, #48	; 0x30
 80095f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095fc:	2100      	movs	r1, #0
 80095fe:	4618      	mov	r0, r3
 8009600:	f7ff f979 	bl	80088f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009604:	2300      	movs	r3, #0
 8009606:	613b      	str	r3, [r7, #16]
 8009608:	6979      	ldr	r1, [r7, #20]
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f7ff fc1c 	bl	8008e48 <clust2sect>
 8009610:	4602      	mov	r2, r0
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	62da      	str	r2, [r3, #44]	; 0x2c
 8009616:	e012      	b.n	800963e <dir_next+0x13c>
						fs->wflag = 1;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2201      	movs	r2, #1
 800961c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f7ff fb32 	bl	8008c88 <sync_window>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <dir_next+0x12c>
 800962a:	2301      	movs	r3, #1
 800962c:	e02a      	b.n	8009684 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	3301      	adds	r3, #1
 8009632:	613b      	str	r3, [r7, #16]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	62da      	str	r2, [r3, #44]	; 0x2c
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	895b      	ldrh	r3, [r3, #10]
 8009642:	461a      	mov	r2, r3
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	4293      	cmp	r3, r2
 8009648:	d3e6      	bcc.n	8009618 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	1ad2      	subs	r2, r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800965c:	6979      	ldr	r1, [r7, #20]
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f7ff fbf2 	bl	8008e48 <clust2sect>
 8009664:	4602      	mov	r2, r0
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800967c:	441a      	add	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800969c:	2100      	movs	r1, #0
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7ff feb4 	bl	800940c <dir_sdi>
 80096a4:	4603      	mov	r3, r0
 80096a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d12b      	bne.n	8009706 <dir_alloc+0x7a>
		n = 0;
 80096ae:	2300      	movs	r3, #0
 80096b0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	4619      	mov	r1, r3
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f7ff fb29 	bl	8008d10 <move_window>
 80096be:	4603      	mov	r3, r0
 80096c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80096c2:	7dfb      	ldrb	r3, [r7, #23]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d11d      	bne.n	8009704 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	2be5      	cmp	r3, #229	; 0xe5
 80096d0:	d004      	beq.n	80096dc <dir_alloc+0x50>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a1b      	ldr	r3, [r3, #32]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d107      	bne.n	80096ec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	3301      	adds	r3, #1
 80096e0:	613b      	str	r3, [r7, #16]
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d102      	bne.n	80096f0 <dir_alloc+0x64>
 80096ea:	e00c      	b.n	8009706 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80096ec:	2300      	movs	r3, #0
 80096ee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80096f0:	2101      	movs	r1, #1
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7ff ff05 	bl	8009502 <dir_next>
 80096f8:	4603      	mov	r3, r0
 80096fa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80096fc:	7dfb      	ldrb	r3, [r7, #23]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0d7      	beq.n	80096b2 <dir_alloc+0x26>
 8009702:	e000      	b.n	8009706 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009704:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	2b04      	cmp	r3, #4
 800970a:	d101      	bne.n	8009710 <dir_alloc+0x84>
 800970c:	2307      	movs	r3, #7
 800970e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	331a      	adds	r3, #26
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff f841 	bl	80087b0 <ld_word>
 800972e:	4603      	mov	r3, r0
 8009730:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	2b03      	cmp	r3, #3
 8009738:	d109      	bne.n	800974e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	3314      	adds	r3, #20
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff f836 	bl	80087b0 <ld_word>
 8009744:	4603      	mov	r3, r0
 8009746:	041b      	lsls	r3, r3, #16
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	4313      	orrs	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800974e:	68fb      	ldr	r3, [r7, #12]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	331a      	adds	r3, #26
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	b292      	uxth	r2, r2
 800976c:	4611      	mov	r1, r2
 800976e:	4618      	mov	r0, r3
 8009770:	f7ff f859 	bl	8008826 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	2b03      	cmp	r3, #3
 800977a:	d109      	bne.n	8009790 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	f103 0214 	add.w	r2, r3, #20
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	0c1b      	lsrs	r3, r3, #16
 8009786:	b29b      	uxth	r3, r3
 8009788:	4619      	mov	r1, r3
 800978a:	4610      	mov	r0, r2
 800978c:	f7ff f84b 	bl	8008826 <st_word>
	}
}
 8009790:	bf00      	nop
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80097a6:	2100      	movs	r1, #0
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7ff fe2f 	bl	800940c <dir_sdi>
 80097ae:	4603      	mov	r3, r0
 80097b0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <dir_find+0x24>
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	e03e      	b.n	800983a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	69db      	ldr	r3, [r3, #28]
 80097c0:	4619      	mov	r1, r3
 80097c2:	6938      	ldr	r0, [r7, #16]
 80097c4:	f7ff faa4 	bl	8008d10 <move_window>
 80097c8:	4603      	mov	r3, r0
 80097ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d12f      	bne.n	8009832 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d102      	bne.n	80097e6 <dir_find+0x4e>
 80097e0:	2304      	movs	r3, #4
 80097e2:	75fb      	strb	r3, [r7, #23]
 80097e4:	e028      	b.n	8009838 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	330b      	adds	r3, #11
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	330b      	adds	r3, #11
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	f003 0308 	and.w	r3, r3, #8
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10a      	bne.n	800981e <dir_find+0x86>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a18      	ldr	r0, [r3, #32]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3324      	adds	r3, #36	; 0x24
 8009810:	220b      	movs	r2, #11
 8009812:	4619      	mov	r1, r3
 8009814:	f7ff f88a 	bl	800892c <mem_cmp>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00b      	beq.n	8009836 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800981e:	2100      	movs	r1, #0
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff fe6e 	bl	8009502 <dir_next>
 8009826:	4603      	mov	r3, r0
 8009828:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800982a:	7dfb      	ldrb	r3, [r7, #23]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d0c5      	beq.n	80097bc <dir_find+0x24>
 8009830:	e002      	b.n	8009838 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009832:	bf00      	nop
 8009834:	e000      	b.n	8009838 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009836:	bf00      	nop

	return res;
 8009838:	7dfb      	ldrb	r3, [r7, #23]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3718      	adds	r7, #24
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009850:	2101      	movs	r1, #1
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7ff ff1a 	bl	800968c <dir_alloc>
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800985c:	7bfb      	ldrb	r3, [r7, #15]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d11c      	bne.n	800989c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	69db      	ldr	r3, [r3, #28]
 8009866:	4619      	mov	r1, r3
 8009868:	68b8      	ldr	r0, [r7, #8]
 800986a:	f7ff fa51 	bl	8008d10 <move_window>
 800986e:	4603      	mov	r3, r0
 8009870:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d111      	bne.n	800989c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a1b      	ldr	r3, [r3, #32]
 800987c:	2220      	movs	r2, #32
 800987e:	2100      	movs	r1, #0
 8009880:	4618      	mov	r0, r3
 8009882:	f7ff f838 	bl	80088f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a18      	ldr	r0, [r3, #32]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	3324      	adds	r3, #36	; 0x24
 800988e:	220b      	movs	r2, #11
 8009890:	4619      	mov	r1, r3
 8009892:	f7ff f80f 	bl	80088b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	2201      	movs	r2, #1
 800989a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800989c:	7bfb      	ldrb	r3, [r7, #15]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
	...

080098a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b088      	sub	sp, #32
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	3324      	adds	r3, #36	; 0x24
 80098bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80098be:	220b      	movs	r2, #11
 80098c0:	2120      	movs	r1, #32
 80098c2:	68b8      	ldr	r0, [r7, #8]
 80098c4:	f7ff f817 	bl	80088f6 <mem_set>
	si = i = 0; ni = 8;
 80098c8:	2300      	movs	r3, #0
 80098ca:	613b      	str	r3, [r7, #16]
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	61fb      	str	r3, [r7, #28]
 80098d0:	2308      	movs	r3, #8
 80098d2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	61fa      	str	r2, [r7, #28]
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	4413      	add	r3, r2
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80098e2:	7efb      	ldrb	r3, [r7, #27]
 80098e4:	2b20      	cmp	r3, #32
 80098e6:	d94e      	bls.n	8009986 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80098e8:	7efb      	ldrb	r3, [r7, #27]
 80098ea:	2b2f      	cmp	r3, #47	; 0x2f
 80098ec:	d006      	beq.n	80098fc <create_name+0x54>
 80098ee:	7efb      	ldrb	r3, [r7, #27]
 80098f0:	2b5c      	cmp	r3, #92	; 0x5c
 80098f2:	d110      	bne.n	8009916 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80098f4:	e002      	b.n	80098fc <create_name+0x54>
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	3301      	adds	r3, #1
 80098fa:	61fb      	str	r3, [r7, #28]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	4413      	add	r3, r2
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	2b2f      	cmp	r3, #47	; 0x2f
 8009906:	d0f6      	beq.n	80098f6 <create_name+0x4e>
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	4413      	add	r3, r2
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b5c      	cmp	r3, #92	; 0x5c
 8009912:	d0f0      	beq.n	80098f6 <create_name+0x4e>
			break;
 8009914:	e038      	b.n	8009988 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009916:	7efb      	ldrb	r3, [r7, #27]
 8009918:	2b2e      	cmp	r3, #46	; 0x2e
 800991a:	d003      	beq.n	8009924 <create_name+0x7c>
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	429a      	cmp	r2, r3
 8009922:	d30c      	bcc.n	800993e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	2b0b      	cmp	r3, #11
 8009928:	d002      	beq.n	8009930 <create_name+0x88>
 800992a:	7efb      	ldrb	r3, [r7, #27]
 800992c:	2b2e      	cmp	r3, #46	; 0x2e
 800992e:	d001      	beq.n	8009934 <create_name+0x8c>
 8009930:	2306      	movs	r3, #6
 8009932:	e044      	b.n	80099be <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009934:	2308      	movs	r3, #8
 8009936:	613b      	str	r3, [r7, #16]
 8009938:	230b      	movs	r3, #11
 800993a:	617b      	str	r3, [r7, #20]
			continue;
 800993c:	e022      	b.n	8009984 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800993e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009942:	2b00      	cmp	r3, #0
 8009944:	da04      	bge.n	8009950 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009946:	7efb      	ldrb	r3, [r7, #27]
 8009948:	3b80      	subs	r3, #128	; 0x80
 800994a:	4a1f      	ldr	r2, [pc, #124]	; (80099c8 <create_name+0x120>)
 800994c:	5cd3      	ldrb	r3, [r2, r3]
 800994e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009950:	7efb      	ldrb	r3, [r7, #27]
 8009952:	4619      	mov	r1, r3
 8009954:	481d      	ldr	r0, [pc, #116]	; (80099cc <create_name+0x124>)
 8009956:	f7ff f810 	bl	800897a <chk_chr>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d001      	beq.n	8009964 <create_name+0xbc>
 8009960:	2306      	movs	r3, #6
 8009962:	e02c      	b.n	80099be <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009964:	7efb      	ldrb	r3, [r7, #27]
 8009966:	2b60      	cmp	r3, #96	; 0x60
 8009968:	d905      	bls.n	8009976 <create_name+0xce>
 800996a:	7efb      	ldrb	r3, [r7, #27]
 800996c:	2b7a      	cmp	r3, #122	; 0x7a
 800996e:	d802      	bhi.n	8009976 <create_name+0xce>
 8009970:	7efb      	ldrb	r3, [r7, #27]
 8009972:	3b20      	subs	r3, #32
 8009974:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	613a      	str	r2, [r7, #16]
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	4413      	add	r3, r2
 8009980:	7efa      	ldrb	r2, [r7, #27]
 8009982:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009984:	e7a6      	b.n	80098d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009986:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	441a      	add	r2, r3
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <create_name+0xf4>
 8009998:	2306      	movs	r3, #6
 800999a:	e010      	b.n	80099be <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2be5      	cmp	r3, #229	; 0xe5
 80099a2:	d102      	bne.n	80099aa <create_name+0x102>
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	2205      	movs	r2, #5
 80099a8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80099aa:	7efb      	ldrb	r3, [r7, #27]
 80099ac:	2b20      	cmp	r3, #32
 80099ae:	d801      	bhi.n	80099b4 <create_name+0x10c>
 80099b0:	2204      	movs	r2, #4
 80099b2:	e000      	b.n	80099b6 <create_name+0x10e>
 80099b4:	2200      	movs	r2, #0
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	330b      	adds	r3, #11
 80099ba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80099bc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3720      	adds	r7, #32
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	08010b44 	.word	0x08010b44
 80099cc:	0800de60 	.word	0x0800de60

080099d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80099e4:	e002      	b.n	80099ec <follow_path+0x1c>
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	3301      	adds	r3, #1
 80099ea:	603b      	str	r3, [r7, #0]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	2b2f      	cmp	r3, #47	; 0x2f
 80099f2:	d0f8      	beq.n	80099e6 <follow_path+0x16>
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2b5c      	cmp	r3, #92	; 0x5c
 80099fa:	d0f4      	beq.n	80099e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	2200      	movs	r2, #0
 8009a00:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b1f      	cmp	r3, #31
 8009a08:	d80a      	bhi.n	8009a20 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2280      	movs	r2, #128	; 0x80
 8009a0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009a12:	2100      	movs	r1, #0
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff fcf9 	bl	800940c <dir_sdi>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	75fb      	strb	r3, [r7, #23]
 8009a1e:	e043      	b.n	8009aa8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009a20:	463b      	mov	r3, r7
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f7ff ff3f 	bl	80098a8 <create_name>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009a2e:	7dfb      	ldrb	r3, [r7, #23]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d134      	bne.n	8009a9e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7ff feaf 	bl	8009798 <dir_find>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009a44:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00a      	beq.n	8009a62 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d127      	bne.n	8009aa2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009a52:	7afb      	ldrb	r3, [r7, #11]
 8009a54:	f003 0304 	and.w	r3, r3, #4
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d122      	bne.n	8009aa2 <follow_path+0xd2>
 8009a5c:	2305      	movs	r3, #5
 8009a5e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009a60:	e01f      	b.n	8009aa2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009a62:	7afb      	ldrb	r3, [r7, #11]
 8009a64:	f003 0304 	and.w	r3, r3, #4
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d11c      	bne.n	8009aa6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	799b      	ldrb	r3, [r3, #6]
 8009a70:	f003 0310 	and.w	r3, r3, #16
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d102      	bne.n	8009a7e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009a78:	2305      	movs	r3, #5
 8009a7a:	75fb      	strb	r3, [r7, #23]
 8009a7c:	e014      	b.n	8009aa8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	695b      	ldr	r3, [r3, #20]
 8009a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a8c:	4413      	add	r3, r2
 8009a8e:	4619      	mov	r1, r3
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f7ff fe42 	bl	800971a <ld_clust>
 8009a96:	4602      	mov	r2, r0
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009a9c:	e7c0      	b.n	8009a20 <follow_path+0x50>
			if (res != FR_OK) break;
 8009a9e:	bf00      	nop
 8009aa0:	e002      	b.n	8009aa8 <follow_path+0xd8>
				break;
 8009aa2:	bf00      	nop
 8009aa4:	e000      	b.n	8009aa8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009aa6:	bf00      	nop
			}
		}
	}

	return res;
 8009aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3718      	adds	r7, #24
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b087      	sub	sp, #28
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009aba:	f04f 33ff 	mov.w	r3, #4294967295
 8009abe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d031      	beq.n	8009b2c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	617b      	str	r3, [r7, #20]
 8009ace:	e002      	b.n	8009ad6 <get_ldnumber+0x24>
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	617b      	str	r3, [r7, #20]
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2b20      	cmp	r3, #32
 8009adc:	d903      	bls.n	8009ae6 <get_ldnumber+0x34>
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	2b3a      	cmp	r3, #58	; 0x3a
 8009ae4:	d1f4      	bne.n	8009ad0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	2b3a      	cmp	r3, #58	; 0x3a
 8009aec:	d11c      	bne.n	8009b28 <get_ldnumber+0x76>
			tp = *path;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	1c5a      	adds	r2, r3, #1
 8009af8:	60fa      	str	r2, [r7, #12]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	3b30      	subs	r3, #48	; 0x30
 8009afe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	2b09      	cmp	r3, #9
 8009b04:	d80e      	bhi.n	8009b24 <get_ldnumber+0x72>
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d10a      	bne.n	8009b24 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d107      	bne.n	8009b24 <get_ldnumber+0x72>
					vol = (int)i;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	617b      	str	r3, [r7, #20]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	e002      	b.n	8009b2e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009b28:	2300      	movs	r3, #0
 8009b2a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009b2c:	693b      	ldr	r3, [r7, #16]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	371c      	adds	r7, #28
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
	...

08009b3c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	70da      	strb	r2, [r3, #3]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b52:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7ff f8da 	bl	8008d10 <move_window>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <check_fs+0x2a>
 8009b62:	2304      	movs	r3, #4
 8009b64:	e038      	b.n	8009bd8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	3330      	adds	r3, #48	; 0x30
 8009b6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fe fe1e 	bl	80087b0 <ld_word>
 8009b74:	4603      	mov	r3, r0
 8009b76:	461a      	mov	r2, r3
 8009b78:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d001      	beq.n	8009b84 <check_fs+0x48>
 8009b80:	2303      	movs	r3, #3
 8009b82:	e029      	b.n	8009bd8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b8a:	2be9      	cmp	r3, #233	; 0xe9
 8009b8c:	d009      	beq.n	8009ba2 <check_fs+0x66>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b94:	2beb      	cmp	r3, #235	; 0xeb
 8009b96:	d11e      	bne.n	8009bd6 <check_fs+0x9a>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009b9e:	2b90      	cmp	r3, #144	; 0x90
 8009ba0:	d119      	bne.n	8009bd6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	3330      	adds	r3, #48	; 0x30
 8009ba6:	3336      	adds	r3, #54	; 0x36
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fe fe19 	bl	80087e0 <ld_dword>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009bb4:	4a0a      	ldr	r2, [pc, #40]	; (8009be0 <check_fs+0xa4>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d101      	bne.n	8009bbe <check_fs+0x82>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	e00c      	b.n	8009bd8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	3330      	adds	r3, #48	; 0x30
 8009bc2:	3352      	adds	r3, #82	; 0x52
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7fe fe0b 	bl	80087e0 <ld_dword>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	4a05      	ldr	r2, [pc, #20]	; (8009be4 <check_fs+0xa8>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d101      	bne.n	8009bd6 <check_fs+0x9a>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	e000      	b.n	8009bd8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009bd6:	2302      	movs	r3, #2
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	00544146 	.word	0x00544146
 8009be4:	33544146 	.word	0x33544146

08009be8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b096      	sub	sp, #88	; 0x58
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f7ff ff58 	bl	8009ab2 <get_ldnumber>
 8009c02:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	da01      	bge.n	8009c0e <find_volume+0x26>
 8009c0a:	230b      	movs	r3, #11
 8009c0c:	e22d      	b.n	800a06a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009c0e:	4aa1      	ldr	r2, [pc, #644]	; (8009e94 <find_volume+0x2ac>)
 8009c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c16:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <find_volume+0x3a>
 8009c1e:	230c      	movs	r3, #12
 8009c20:	e223      	b.n	800a06a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c26:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009c28:	79fb      	ldrb	r3, [r7, #7]
 8009c2a:	f023 0301 	bic.w	r3, r3, #1
 8009c2e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d01a      	beq.n	8009c6e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3a:	785b      	ldrb	r3, [r3, #1]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7fe fd19 	bl	8008674 <disk_status>
 8009c42:	4603      	mov	r3, r0
 8009c44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009c48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10c      	bne.n	8009c6e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009c54:	79fb      	ldrb	r3, [r7, #7]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d007      	beq.n	8009c6a <find_volume+0x82>
 8009c5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c5e:	f003 0304 	and.w	r3, r3, #4
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009c66:	230a      	movs	r3, #10
 8009c68:	e1ff      	b.n	800a06a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	e1fd      	b.n	800a06a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c70:	2200      	movs	r2, #0
 8009c72:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7e:	785b      	ldrb	r3, [r3, #1]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fe fd11 	bl	80086a8 <disk_initialize>
 8009c86:	4603      	mov	r3, r0
 8009c88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009c8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c90:	f003 0301 	and.w	r3, r3, #1
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d001      	beq.n	8009c9c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009c98:	2303      	movs	r3, #3
 8009c9a:	e1e6      	b.n	800a06a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009c9c:	79fb      	ldrb	r3, [r7, #7]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d007      	beq.n	8009cb2 <find_volume+0xca>
 8009ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ca6:	f003 0304 	and.w	r3, r3, #4
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009cae:	230a      	movs	r3, #10
 8009cb0:	e1db      	b.n	800a06a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009cb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009cb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009cba:	f7ff ff3f 	bl	8009b3c <check_fs>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009cc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d149      	bne.n	8009d60 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009ccc:	2300      	movs	r3, #0
 8009cce:	643b      	str	r3, [r7, #64]	; 0x40
 8009cd0:	e01e      	b.n	8009d10 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cda:	011b      	lsls	r3, r3, #4
 8009cdc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009ce0:	4413      	add	r3, r2
 8009ce2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d006      	beq.n	8009cfc <find_volume+0x114>
 8009cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf0:	3308      	adds	r3, #8
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe fd74 	bl	80087e0 <ld_dword>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	e000      	b.n	8009cfe <find_volume+0x116>
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	3358      	adds	r3, #88	; 0x58
 8009d04:	443b      	add	r3, r7
 8009d06:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	643b      	str	r3, [r7, #64]	; 0x40
 8009d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d12:	2b03      	cmp	r3, #3
 8009d14:	d9dd      	bls.n	8009cd2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009d16:	2300      	movs	r3, #0
 8009d18:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d002      	beq.n	8009d26 <find_volume+0x13e>
 8009d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d22:	3b01      	subs	r3, #1
 8009d24:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	3358      	adds	r3, #88	; 0x58
 8009d2c:	443b      	add	r3, r7
 8009d2e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009d32:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d005      	beq.n	8009d46 <find_volume+0x15e>
 8009d3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d3e:	f7ff fefd 	bl	8009b3c <check_fs>
 8009d42:	4603      	mov	r3, r0
 8009d44:	e000      	b.n	8009d48 <find_volume+0x160>
 8009d46:	2303      	movs	r3, #3
 8009d48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009d4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d905      	bls.n	8009d60 <find_volume+0x178>
 8009d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d56:	3301      	adds	r3, #1
 8009d58:	643b      	str	r3, [r7, #64]	; 0x40
 8009d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	d9e2      	bls.n	8009d26 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009d60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d64:	2b04      	cmp	r3, #4
 8009d66:	d101      	bne.n	8009d6c <find_volume+0x184>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e17e      	b.n	800a06a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009d6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d901      	bls.n	8009d78 <find_volume+0x190>
 8009d74:	230d      	movs	r3, #13
 8009d76:	e178      	b.n	800a06a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7a:	3330      	adds	r3, #48	; 0x30
 8009d7c:	330b      	adds	r3, #11
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7fe fd16 	bl	80087b0 <ld_word>
 8009d84:	4603      	mov	r3, r0
 8009d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d8a:	d001      	beq.n	8009d90 <find_volume+0x1a8>
 8009d8c:	230d      	movs	r3, #13
 8009d8e:	e16c      	b.n	800a06a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d92:	3330      	adds	r3, #48	; 0x30
 8009d94:	3316      	adds	r3, #22
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fe fd0a 	bl	80087b0 <ld_word>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d106      	bne.n	8009db4 <find_volume+0x1cc>
 8009da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da8:	3330      	adds	r3, #48	; 0x30
 8009daa:	3324      	adds	r3, #36	; 0x24
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fe fd17 	bl	80087e0 <ld_dword>
 8009db2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009db8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc6:	789b      	ldrb	r3, [r3, #2]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d005      	beq.n	8009dd8 <find_volume+0x1f0>
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dce:	789b      	ldrb	r3, [r3, #2]
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d001      	beq.n	8009dd8 <find_volume+0x1f0>
 8009dd4:	230d      	movs	r3, #13
 8009dd6:	e148      	b.n	800a06a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dda:	789b      	ldrb	r3, [r3, #2]
 8009ddc:	461a      	mov	r2, r3
 8009dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de0:	fb02 f303 	mul.w	r3, r2, r3
 8009de4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df4:	895b      	ldrh	r3, [r3, #10]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d008      	beq.n	8009e0c <find_volume+0x224>
 8009dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfc:	895b      	ldrh	r3, [r3, #10]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e02:	895b      	ldrh	r3, [r3, #10]
 8009e04:	3b01      	subs	r3, #1
 8009e06:	4013      	ands	r3, r2
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <find_volume+0x228>
 8009e0c:	230d      	movs	r3, #13
 8009e0e:	e12c      	b.n	800a06a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e12:	3330      	adds	r3, #48	; 0x30
 8009e14:	3311      	adds	r3, #17
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fe fcca 	bl	80087b0 <ld_word>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	461a      	mov	r2, r3
 8009e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e26:	891b      	ldrh	r3, [r3, #8]
 8009e28:	f003 030f 	and.w	r3, r3, #15
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <find_volume+0x24e>
 8009e32:	230d      	movs	r3, #13
 8009e34:	e119      	b.n	800a06a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e38:	3330      	adds	r3, #48	; 0x30
 8009e3a:	3313      	adds	r3, #19
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fe fcb7 	bl	80087b0 <ld_word>
 8009e42:	4603      	mov	r3, r0
 8009e44:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d106      	bne.n	8009e5a <find_volume+0x272>
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4e:	3330      	adds	r3, #48	; 0x30
 8009e50:	3320      	adds	r3, #32
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fe fcc4 	bl	80087e0 <ld_dword>
 8009e58:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5c:	3330      	adds	r3, #48	; 0x30
 8009e5e:	330e      	adds	r3, #14
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fe fca5 	bl	80087b0 <ld_word>
 8009e66:	4603      	mov	r3, r0
 8009e68:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009e6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d101      	bne.n	8009e74 <find_volume+0x28c>
 8009e70:	230d      	movs	r3, #13
 8009e72:	e0fa      	b.n	800a06a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009e74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e78:	4413      	add	r3, r2
 8009e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e7c:	8912      	ldrh	r2, [r2, #8]
 8009e7e:	0912      	lsrs	r2, r2, #4
 8009e80:	b292      	uxth	r2, r2
 8009e82:	4413      	add	r3, r2
 8009e84:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d204      	bcs.n	8009e98 <find_volume+0x2b0>
 8009e8e:	230d      	movs	r3, #13
 8009e90:	e0eb      	b.n	800a06a <find_volume+0x482>
 8009e92:	bf00      	nop
 8009e94:	2000189c 	.word	0x2000189c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ea0:	8952      	ldrh	r2, [r2, #10]
 8009ea2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ea6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <find_volume+0x2ca>
 8009eae:	230d      	movs	r3, #13
 8009eb0:	e0db      	b.n	800a06a <find_volume+0x482>
		fmt = FS_FAT32;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d802      	bhi.n	8009ec8 <find_volume+0x2e0>
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d802      	bhi.n	8009ed8 <find_volume+0x2f0>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	1c9a      	adds	r2, r3, #2
 8009edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ede:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ee4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009ee6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eea:	441a      	add	r2, r3
 8009eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eee:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009ef0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef4:	441a      	add	r2, r3
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009efa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d11e      	bne.n	8009f40 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f04:	3330      	adds	r3, #48	; 0x30
 8009f06:	332a      	adds	r3, #42	; 0x2a
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fe fc51 	bl	80087b0 <ld_word>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d001      	beq.n	8009f18 <find_volume+0x330>
 8009f14:	230d      	movs	r3, #13
 8009f16:	e0a8      	b.n	800a06a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1a:	891b      	ldrh	r3, [r3, #8]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <find_volume+0x33c>
 8009f20:	230d      	movs	r3, #13
 8009f22:	e0a2      	b.n	800a06a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f26:	3330      	adds	r3, #48	; 0x30
 8009f28:	332c      	adds	r3, #44	; 0x2c
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe fc58 	bl	80087e0 <ld_dword>
 8009f30:	4602      	mov	r2, r0
 8009f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f34:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f38:	695b      	ldr	r3, [r3, #20]
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8009f3e:	e01f      	b.n	8009f80 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f42:	891b      	ldrh	r3, [r3, #8]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d101      	bne.n	8009f4c <find_volume+0x364>
 8009f48:	230d      	movs	r3, #13
 8009f4a:	e08e      	b.n	800a06a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4e:	6a1a      	ldr	r2, [r3, #32]
 8009f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f52:	441a      	add	r2, r3
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009f58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d103      	bne.n	8009f68 <find_volume+0x380>
 8009f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	005b      	lsls	r3, r3, #1
 8009f66:	e00a      	b.n	8009f7e <find_volume+0x396>
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	695a      	ldr	r2, [r3, #20]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	4413      	add	r3, r2
 8009f72:	085a      	lsrs	r2, r3, #1
 8009f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f76:	695b      	ldr	r3, [r3, #20]
 8009f78:	f003 0301 	and.w	r3, r3, #1
 8009f7c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009f7e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f82:	699a      	ldr	r2, [r3, #24]
 8009f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009f8a:	0a5b      	lsrs	r3, r3, #9
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d201      	bcs.n	8009f94 <find_volume+0x3ac>
 8009f90:	230d      	movs	r3, #13
 8009f92:	e06a      	b.n	800a06a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f96:	f04f 32ff 	mov.w	r2, #4294967295
 8009f9a:	611a      	str	r2, [r3, #16]
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9e:	691a      	ldr	r2, [r3, #16]
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa6:	2280      	movs	r2, #128	; 0x80
 8009fa8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009faa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fae:	2b03      	cmp	r3, #3
 8009fb0:	d149      	bne.n	800a046 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb4:	3330      	adds	r3, #48	; 0x30
 8009fb6:	3330      	adds	r3, #48	; 0x30
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fe fbf9 	bl	80087b0 <ld_word>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d140      	bne.n	800a046 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009fcc:	f7fe fea0 	bl	8008d10 <move_window>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d137      	bne.n	800a046 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd8:	2200      	movs	r2, #0
 8009fda:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fde:	3330      	adds	r3, #48	; 0x30
 8009fe0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fe fbe3 	bl	80087b0 <ld_word>
 8009fea:	4603      	mov	r3, r0
 8009fec:	461a      	mov	r2, r3
 8009fee:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d127      	bne.n	800a046 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff8:	3330      	adds	r3, #48	; 0x30
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fe fbf0 	bl	80087e0 <ld_dword>
 800a000:	4603      	mov	r3, r0
 800a002:	4a1c      	ldr	r2, [pc, #112]	; (800a074 <find_volume+0x48c>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d11e      	bne.n	800a046 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00a:	3330      	adds	r3, #48	; 0x30
 800a00c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a010:	4618      	mov	r0, r3
 800a012:	f7fe fbe5 	bl	80087e0 <ld_dword>
 800a016:	4603      	mov	r3, r0
 800a018:	4a17      	ldr	r2, [pc, #92]	; (800a078 <find_volume+0x490>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d113      	bne.n	800a046 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a020:	3330      	adds	r3, #48	; 0x30
 800a022:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a026:	4618      	mov	r0, r3
 800a028:	f7fe fbda 	bl	80087e0 <ld_dword>
 800a02c:	4602      	mov	r2, r0
 800a02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a030:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a034:	3330      	adds	r3, #48	; 0x30
 800a036:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe fbd0 	bl	80087e0 <ld_dword>
 800a040:	4602      	mov	r2, r0
 800a042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a044:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a048:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a04c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a04e:	4b0b      	ldr	r3, [pc, #44]	; (800a07c <find_volume+0x494>)
 800a050:	881b      	ldrh	r3, [r3, #0]
 800a052:	3301      	adds	r3, #1
 800a054:	b29a      	uxth	r2, r3
 800a056:	4b09      	ldr	r3, [pc, #36]	; (800a07c <find_volume+0x494>)
 800a058:	801a      	strh	r2, [r3, #0]
 800a05a:	4b08      	ldr	r3, [pc, #32]	; (800a07c <find_volume+0x494>)
 800a05c:	881a      	ldrh	r2, [r3, #0]
 800a05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a060:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a062:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a064:	f7fe fdec 	bl	8008c40 <clear_lock>
#endif
	return FR_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3758      	adds	r7, #88	; 0x58
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	41615252 	.word	0x41615252
 800a078:	61417272 	.word	0x61417272
 800a07c:	200018a0 	.word	0x200018a0

0800a080 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a08a:	2309      	movs	r3, #9
 800a08c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d01c      	beq.n	800a0ce <validate+0x4e>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d018      	beq.n	800a0ce <validate+0x4e>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d013      	beq.n	800a0ce <validate+0x4e>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	889a      	ldrh	r2, [r3, #4]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	88db      	ldrh	r3, [r3, #6]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d10c      	bne.n	800a0ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	785b      	ldrb	r3, [r3, #1]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fe fada 	bl	8008674 <disk_status>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	f003 0301 	and.w	r3, r3, #1
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <validate+0x4e>
			res = FR_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d102      	bne.n	800a0da <validate+0x5a>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	e000      	b.n	800a0dc <validate+0x5c>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	6013      	str	r3, [r2, #0]
	return res;
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b088      	sub	sp, #32
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a0fe:	f107 0310 	add.w	r3, r7, #16
 800a102:	4618      	mov	r0, r3
 800a104:	f7ff fcd5 	bl	8009ab2 <get_ldnumber>
 800a108:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	da01      	bge.n	800a114 <f_mount+0x28>
 800a110:	230b      	movs	r3, #11
 800a112:	e02b      	b.n	800a16c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a114:	4a17      	ldr	r2, [pc, #92]	; (800a174 <f_mount+0x88>)
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a11c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d005      	beq.n	800a130 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a124:	69b8      	ldr	r0, [r7, #24]
 800a126:	f7fe fd8b 	bl	8008c40 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	2200      	movs	r2, #0
 800a12e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d002      	beq.n	800a13c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	490d      	ldr	r1, [pc, #52]	; (800a174 <f_mount+0x88>)
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d002      	beq.n	800a152 <f_mount+0x66>
 800a14c:	79fb      	ldrb	r3, [r7, #7]
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d001      	beq.n	800a156 <f_mount+0x6a>
 800a152:	2300      	movs	r3, #0
 800a154:	e00a      	b.n	800a16c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a156:	f107 010c 	add.w	r1, r7, #12
 800a15a:	f107 0308 	add.w	r3, r7, #8
 800a15e:	2200      	movs	r2, #0
 800a160:	4618      	mov	r0, r3
 800a162:	f7ff fd41 	bl	8009be8 <find_volume>
 800a166:	4603      	mov	r3, r0
 800a168:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3720      	adds	r7, #32
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	2000189c 	.word	0x2000189c

0800a178 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b098      	sub	sp, #96	; 0x60
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	4613      	mov	r3, r2
 800a184:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d101      	bne.n	800a190 <f_open+0x18>
 800a18c:	2309      	movs	r3, #9
 800a18e:	e1ad      	b.n	800a4ec <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a190:	79fb      	ldrb	r3, [r7, #7]
 800a192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a196:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a198:	79fa      	ldrb	r2, [r7, #7]
 800a19a:	f107 0110 	add.w	r1, r7, #16
 800a19e:	f107 0308 	add.w	r3, r7, #8
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff fd20 	bl	8009be8 <find_volume>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a1ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f040 8191 	bne.w	800a4da <f_open+0x362>
		dj.obj.fs = fs;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	f107 0314 	add.w	r3, r7, #20
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7ff fc03 	bl	80099d0 <follow_path>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a1d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d11a      	bne.n	800a20e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a1d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a1dc:	b25b      	sxtb	r3, r3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	da03      	bge.n	800a1ea <f_open+0x72>
				res = FR_INVALID_NAME;
 800a1e2:	2306      	movs	r3, #6
 800a1e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a1e8:	e011      	b.n	800a20e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a1ea:	79fb      	ldrb	r3, [r7, #7]
 800a1ec:	f023 0301 	bic.w	r3, r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	bf14      	ite	ne
 800a1f4:	2301      	movne	r3, #1
 800a1f6:	2300      	moveq	r3, #0
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	f107 0314 	add.w	r3, r7, #20
 800a200:	4611      	mov	r1, r2
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe fbd4 	bl	80089b0 <chk_lock>
 800a208:	4603      	mov	r3, r0
 800a20a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a20e:	79fb      	ldrb	r3, [r7, #7]
 800a210:	f003 031c 	and.w	r3, r3, #28
 800a214:	2b00      	cmp	r3, #0
 800a216:	d07f      	beq.n	800a318 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d017      	beq.n	800a250 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a220:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a224:	2b04      	cmp	r3, #4
 800a226:	d10e      	bne.n	800a246 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a228:	f7fe fc1e 	bl	8008a68 <enq_lock>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d006      	beq.n	800a240 <f_open+0xc8>
 800a232:	f107 0314 	add.w	r3, r7, #20
 800a236:	4618      	mov	r0, r3
 800a238:	f7ff fb03 	bl	8009842 <dir_register>
 800a23c:	4603      	mov	r3, r0
 800a23e:	e000      	b.n	800a242 <f_open+0xca>
 800a240:	2312      	movs	r3, #18
 800a242:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a246:	79fb      	ldrb	r3, [r7, #7]
 800a248:	f043 0308 	orr.w	r3, r3, #8
 800a24c:	71fb      	strb	r3, [r7, #7]
 800a24e:	e010      	b.n	800a272 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a250:	7ebb      	ldrb	r3, [r7, #26]
 800a252:	f003 0311 	and.w	r3, r3, #17
 800a256:	2b00      	cmp	r3, #0
 800a258:	d003      	beq.n	800a262 <f_open+0xea>
					res = FR_DENIED;
 800a25a:	2307      	movs	r3, #7
 800a25c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a260:	e007      	b.n	800a272 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a262:	79fb      	ldrb	r3, [r7, #7]
 800a264:	f003 0304 	and.w	r3, r3, #4
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d002      	beq.n	800a272 <f_open+0xfa>
 800a26c:	2308      	movs	r3, #8
 800a26e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a276:	2b00      	cmp	r3, #0
 800a278:	d168      	bne.n	800a34c <f_open+0x1d4>
 800a27a:	79fb      	ldrb	r3, [r7, #7]
 800a27c:	f003 0308 	and.w	r3, r3, #8
 800a280:	2b00      	cmp	r3, #0
 800a282:	d063      	beq.n	800a34c <f_open+0x1d4>
				dw = GET_FATTIME();
 800a284:	f7fe f998 	bl	80085b8 <get_fattime>
 800a288:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a28c:	330e      	adds	r3, #14
 800a28e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a290:	4618      	mov	r0, r3
 800a292:	f7fe fae3 	bl	800885c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a298:	3316      	adds	r3, #22
 800a29a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7fe fadd 	bl	800885c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a4:	330b      	adds	r3, #11
 800a2a6:	2220      	movs	r2, #32
 800a2a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7ff fa32 	bl	800971a <ld_clust>
 800a2b6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a2bc:	2200      	movs	r2, #0
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7ff fa4a 	bl	8009758 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c6:	331c      	adds	r3, #28
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fe fac6 	bl	800885c <st_dword>
					fs->wflag = 1;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a2d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d037      	beq.n	800a34c <f_open+0x1d4>
						dw = fs->winsect;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a2e2:	f107 0314 	add.w	r3, r7, #20
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fe ff5d 	bl	80091aa <remove_chain>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a2f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d126      	bne.n	800a34c <f_open+0x1d4>
							res = move_window(fs, dw);
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a302:	4618      	mov	r0, r3
 800a304:	f7fe fd04 	bl	8008d10 <move_window>
 800a308:	4603      	mov	r3, r0
 800a30a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a312:	3a01      	subs	r2, #1
 800a314:	60da      	str	r2, [r3, #12]
 800a316:	e019      	b.n	800a34c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a318:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d115      	bne.n	800a34c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a320:	7ebb      	ldrb	r3, [r7, #26]
 800a322:	f003 0310 	and.w	r3, r3, #16
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a32a:	2304      	movs	r3, #4
 800a32c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a330:	e00c      	b.n	800a34c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a332:	79fb      	ldrb	r3, [r7, #7]
 800a334:	f003 0302 	and.w	r3, r3, #2
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d007      	beq.n	800a34c <f_open+0x1d4>
 800a33c:	7ebb      	ldrb	r3, [r7, #26]
 800a33e:	f003 0301 	and.w	r3, r3, #1
 800a342:	2b00      	cmp	r3, #0
 800a344:	d002      	beq.n	800a34c <f_open+0x1d4>
						res = FR_DENIED;
 800a346:	2307      	movs	r3, #7
 800a348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a34c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a350:	2b00      	cmp	r3, #0
 800a352:	d128      	bne.n	800a3a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a354:	79fb      	ldrb	r3, [r7, #7]
 800a356:	f003 0308 	and.w	r3, r3, #8
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d003      	beq.n	800a366 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a35e:	79fb      	ldrb	r3, [r7, #7]
 800a360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a364:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a36e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a374:	79fb      	ldrb	r3, [r7, #7]
 800a376:	f023 0301 	bic.w	r3, r3, #1
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	bf14      	ite	ne
 800a37e:	2301      	movne	r3, #1
 800a380:	2300      	moveq	r3, #0
 800a382:	b2db      	uxtb	r3, r3
 800a384:	461a      	mov	r2, r3
 800a386:	f107 0314 	add.w	r3, r7, #20
 800a38a:	4611      	mov	r1, r2
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fe fb8d 	bl	8008aac <inc_lock>
 800a392:	4602      	mov	r2, r0
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d102      	bne.n	800a3a6 <f_open+0x22e>
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a3a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f040 8095 	bne.w	800a4da <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7ff f9af 	bl	800971a <ld_clust>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c4:	331c      	adds	r3, #28
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fe fa0a 	bl	80087e0 <ld_dword>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	88da      	ldrh	r2, [r3, #6]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	79fa      	ldrb	r2, [r7, #7]
 800a3ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	3330      	adds	r3, #48	; 0x30
 800a402:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a406:	2100      	movs	r1, #0
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fe fa74 	bl	80088f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a40e:	79fb      	ldrb	r3, [r7, #7]
 800a410:	f003 0320 	and.w	r3, r3, #32
 800a414:	2b00      	cmp	r3, #0
 800a416:	d060      	beq.n	800a4da <f_open+0x362>
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d05c      	beq.n	800a4da <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	68da      	ldr	r2, [r3, #12]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	895b      	ldrh	r3, [r3, #10]
 800a42c:	025b      	lsls	r3, r3, #9
 800a42e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	657b      	str	r3, [r7, #84]	; 0x54
 800a43c:	e016      	b.n	800a46c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a442:	4618      	mov	r0, r3
 800a444:	f7fe fd1f 	bl	8008e86 <get_fat>
 800a448:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a44a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d802      	bhi.n	800a456 <f_open+0x2de>
 800a450:	2302      	movs	r3, #2
 800a452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a45c:	d102      	bne.n	800a464 <f_open+0x2ec>
 800a45e:	2301      	movs	r3, #1
 800a460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a464:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	657b      	str	r3, [r7, #84]	; 0x54
 800a46c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a470:	2b00      	cmp	r3, #0
 800a472:	d103      	bne.n	800a47c <f_open+0x304>
 800a474:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a478:	429a      	cmp	r2, r3
 800a47a:	d8e0      	bhi.n	800a43e <f_open+0x2c6>
				}
				fp->clust = clst;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a480:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a482:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a486:	2b00      	cmp	r3, #0
 800a488:	d127      	bne.n	800a4da <f_open+0x362>
 800a48a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a48c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a490:	2b00      	cmp	r3, #0
 800a492:	d022      	beq.n	800a4da <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fe fcd5 	bl	8008e48 <clust2sect>
 800a49e:	6478      	str	r0, [r7, #68]	; 0x44
 800a4a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d103      	bne.n	800a4ae <f_open+0x336>
						res = FR_INT_ERR;
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a4ac:	e015      	b.n	800a4da <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a4ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4b0:	0a5a      	lsrs	r2, r3, #9
 800a4b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4b4:	441a      	add	r2, r3
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	7858      	ldrb	r0, [r3, #1]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6a1a      	ldr	r2, [r3, #32]
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	f7fe f913 	bl	80086f4 <disk_read>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <f_open+0x362>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a4da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d002      	beq.n	800a4e8 <f_open+0x370>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a4e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3760      	adds	r7, #96	; 0x60
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08e      	sub	sp, #56	; 0x38
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2200      	movs	r2, #0
 800a50a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f107 0214 	add.w	r2, r7, #20
 800a512:	4611      	mov	r1, r2
 800a514:	4618      	mov	r0, r3
 800a516:	f7ff fdb3 	bl	800a080 <validate>
 800a51a:	4603      	mov	r3, r0
 800a51c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a520:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a524:	2b00      	cmp	r3, #0
 800a526:	d107      	bne.n	800a538 <f_read+0x44>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	7d5b      	ldrb	r3, [r3, #21]
 800a52c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a530:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a534:	2b00      	cmp	r3, #0
 800a536:	d002      	beq.n	800a53e <f_read+0x4a>
 800a538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a53c:	e115      	b.n	800a76a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	7d1b      	ldrb	r3, [r3, #20]
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	2b00      	cmp	r3, #0
 800a548:	d101      	bne.n	800a54e <f_read+0x5a>
 800a54a:	2307      	movs	r3, #7
 800a54c:	e10d      	b.n	800a76a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	68da      	ldr	r2, [r3, #12]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	1ad3      	subs	r3, r2, r3
 800a558:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	6a3b      	ldr	r3, [r7, #32]
 800a55e:	429a      	cmp	r2, r3
 800a560:	f240 80fe 	bls.w	800a760 <f_read+0x26c>
 800a564:	6a3b      	ldr	r3, [r7, #32]
 800a566:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a568:	e0fa      	b.n	800a760 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a572:	2b00      	cmp	r3, #0
 800a574:	f040 80c6 	bne.w	800a704 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	699b      	ldr	r3, [r3, #24]
 800a57c:	0a5b      	lsrs	r3, r3, #9
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	8952      	ldrh	r2, [r2, #10]
 800a582:	3a01      	subs	r2, #1
 800a584:	4013      	ands	r3, r2
 800a586:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d12f      	bne.n	800a5ee <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d103      	bne.n	800a59e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	633b      	str	r3, [r7, #48]	; 0x30
 800a59c:	e013      	b.n	800a5c6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d007      	beq.n	800a5b6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f7fe fef9 	bl	80093a4 <clmt_clust>
 800a5b2:	6338      	str	r0, [r7, #48]	; 0x30
 800a5b4:	e007      	b.n	800a5c6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	69db      	ldr	r3, [r3, #28]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	f7fe fc61 	bl	8008e86 <get_fat>
 800a5c4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d804      	bhi.n	800a5d6 <f_read+0xe2>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	755a      	strb	r2, [r3, #21]
 800a5d2:	2302      	movs	r3, #2
 800a5d4:	e0c9      	b.n	800a76a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5dc:	d104      	bne.n	800a5e8 <f_read+0xf4>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	755a      	strb	r2, [r3, #21]
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e0c0      	b.n	800a76a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ec:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a5ee:	697a      	ldr	r2, [r7, #20]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	69db      	ldr	r3, [r3, #28]
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	4610      	mov	r0, r2
 800a5f8:	f7fe fc26 	bl	8008e48 <clust2sect>
 800a5fc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d104      	bne.n	800a60e <f_read+0x11a>
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2202      	movs	r2, #2
 800a608:	755a      	strb	r2, [r3, #21]
 800a60a:	2302      	movs	r3, #2
 800a60c:	e0ad      	b.n	800a76a <f_read+0x276>
			sect += csect;
 800a60e:	69ba      	ldr	r2, [r7, #24]
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	4413      	add	r3, r2
 800a614:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	0a5b      	lsrs	r3, r3, #9
 800a61a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d039      	beq.n	800a696 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a622:	69fa      	ldr	r2, [r7, #28]
 800a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a626:	4413      	add	r3, r2
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	8952      	ldrh	r2, [r2, #10]
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d905      	bls.n	800a63c <f_read+0x148>
					cc = fs->csize - csect;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	895b      	ldrh	r3, [r3, #10]
 800a634:	461a      	mov	r2, r3
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	7858      	ldrb	r0, [r3, #1]
 800a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a642:	69ba      	ldr	r2, [r7, #24]
 800a644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a646:	f7fe f855 	bl	80086f4 <disk_read>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d004      	beq.n	800a65a <f_read+0x166>
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2201      	movs	r2, #1
 800a654:	755a      	strb	r2, [r3, #21]
 800a656:	2301      	movs	r3, #1
 800a658:	e087      	b.n	800a76a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	7d1b      	ldrb	r3, [r3, #20]
 800a65e:	b25b      	sxtb	r3, r3
 800a660:	2b00      	cmp	r3, #0
 800a662:	da14      	bge.n	800a68e <f_read+0x19a>
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6a1a      	ldr	r2, [r3, #32]
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a66e:	429a      	cmp	r2, r3
 800a670:	d90d      	bls.n	800a68e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6a1a      	ldr	r2, [r3, #32]
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	025b      	lsls	r3, r3, #9
 800a67c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a67e:	18d0      	adds	r0, r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	3330      	adds	r3, #48	; 0x30
 800a684:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a688:	4619      	mov	r1, r3
 800a68a:	f7fe f913 	bl	80088b4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a690:	025b      	lsls	r3, r3, #9
 800a692:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a694:	e050      	b.n	800a738 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	69ba      	ldr	r2, [r7, #24]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d02e      	beq.n	800a6fe <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	7d1b      	ldrb	r3, [r3, #20]
 800a6a4:	b25b      	sxtb	r3, r3
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	da18      	bge.n	800a6dc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	7858      	ldrb	r0, [r3, #1]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6a1a      	ldr	r2, [r3, #32]
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	f7fe f83b 	bl	8008734 <disk_write>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d004      	beq.n	800a6ce <f_read+0x1da>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	755a      	strb	r2, [r3, #21]
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e04d      	b.n	800a76a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	7d1b      	ldrb	r3, [r3, #20]
 800a6d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6d6:	b2da      	uxtb	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	7858      	ldrb	r0, [r3, #1]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	69ba      	ldr	r2, [r7, #24]
 800a6ea:	f7fe f803 	bl	80086f4 <disk_read>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d004      	beq.n	800a6fe <f_read+0x20a>
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	755a      	strb	r2, [r3, #21]
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e035      	b.n	800a76a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	69ba      	ldr	r2, [r7, #24]
 800a702:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a70c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a710:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	429a      	cmp	r2, r3
 800a718:	d901      	bls.n	800a71e <f_read+0x22a>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	699b      	ldr	r3, [r3, #24]
 800a728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a72c:	4413      	add	r3, r2
 800a72e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a730:	4619      	mov	r1, r3
 800a732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a734:	f7fe f8be 	bl	80088b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73c:	4413      	add	r3, r2
 800a73e:	627b      	str	r3, [r7, #36]	; 0x24
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	699a      	ldr	r2, [r3, #24]
 800a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a746:	441a      	add	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	619a      	str	r2, [r3, #24]
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a752:	441a      	add	r2, r3
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	601a      	str	r2, [r3, #0]
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	f47f af01 	bne.w	800a56a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3738      	adds	r7, #56	; 0x38
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b08c      	sub	sp, #48	; 0x30
 800a776:	af00      	add	r7, sp, #0
 800a778:	60f8      	str	r0, [r7, #12]
 800a77a:	60b9      	str	r1, [r7, #8]
 800a77c:	607a      	str	r2, [r7, #4]
 800a77e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	2200      	movs	r2, #0
 800a788:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f107 0210 	add.w	r2, r7, #16
 800a790:	4611      	mov	r1, r2
 800a792:	4618      	mov	r0, r3
 800a794:	f7ff fc74 	bl	800a080 <validate>
 800a798:	4603      	mov	r3, r0
 800a79a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a79e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d107      	bne.n	800a7b6 <f_write+0x44>
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	7d5b      	ldrb	r3, [r3, #21]
 800a7aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a7ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d002      	beq.n	800a7bc <f_write+0x4a>
 800a7b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7ba:	e14b      	b.n	800aa54 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	7d1b      	ldrb	r3, [r3, #20]
 800a7c0:	f003 0302 	and.w	r3, r3, #2
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d101      	bne.n	800a7cc <f_write+0x5a>
 800a7c8:	2307      	movs	r3, #7
 800a7ca:	e143      	b.n	800aa54 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	699a      	ldr	r2, [r3, #24]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	441a      	add	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	f080 812d 	bcs.w	800aa38 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	43db      	mvns	r3, r3
 800a7e4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a7e6:	e127      	b.n	800aa38 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f040 80e3 	bne.w	800a9bc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	0a5b      	lsrs	r3, r3, #9
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	8952      	ldrh	r2, [r2, #10]
 800a800:	3a01      	subs	r2, #1
 800a802:	4013      	ands	r3, r2
 800a804:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d143      	bne.n	800a894 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10c      	bne.n	800a82e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d11a      	bne.n	800a856 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2100      	movs	r1, #0
 800a824:	4618      	mov	r0, r3
 800a826:	f7fe fd25 	bl	8009274 <create_chain>
 800a82a:	62b8      	str	r0, [r7, #40]	; 0x28
 800a82c:	e013      	b.n	800a856 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a832:	2b00      	cmp	r3, #0
 800a834:	d007      	beq.n	800a846 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	4619      	mov	r1, r3
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f7fe fdb1 	bl	80093a4 <clmt_clust>
 800a842:	62b8      	str	r0, [r7, #40]	; 0x28
 800a844:	e007      	b.n	800a856 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	69db      	ldr	r3, [r3, #28]
 800a84c:	4619      	mov	r1, r3
 800a84e:	4610      	mov	r0, r2
 800a850:	f7fe fd10 	bl	8009274 <create_chain>
 800a854:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f000 80f2 	beq.w	800aa42 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a860:	2b01      	cmp	r3, #1
 800a862:	d104      	bne.n	800a86e <f_write+0xfc>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2202      	movs	r2, #2
 800a868:	755a      	strb	r2, [r3, #21]
 800a86a:	2302      	movs	r3, #2
 800a86c:	e0f2      	b.n	800aa54 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a874:	d104      	bne.n	800a880 <f_write+0x10e>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2201      	movs	r2, #1
 800a87a:	755a      	strb	r2, [r3, #21]
 800a87c:	2301      	movs	r3, #1
 800a87e:	e0e9      	b.n	800aa54 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a884:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d102      	bne.n	800a894 <f_write+0x122>
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a892:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	7d1b      	ldrb	r3, [r3, #20]
 800a898:	b25b      	sxtb	r3, r3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	da18      	bge.n	800a8d0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	7858      	ldrb	r0, [r3, #1]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6a1a      	ldr	r2, [r3, #32]
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	f7fd ff41 	bl	8008734 <disk_write>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d004      	beq.n	800a8c2 <f_write+0x150>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	755a      	strb	r2, [r3, #21]
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e0c8      	b.n	800aa54 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	7d1b      	ldrb	r3, [r3, #20]
 800a8c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ca:	b2da      	uxtb	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a8d0:	693a      	ldr	r2, [r7, #16]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4610      	mov	r0, r2
 800a8da:	f7fe fab5 	bl	8008e48 <clust2sect>
 800a8de:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d104      	bne.n	800a8f0 <f_write+0x17e>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2202      	movs	r2, #2
 800a8ea:	755a      	strb	r2, [r3, #21]
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	e0b1      	b.n	800aa54 <f_write+0x2e2>
			sect += csect;
 800a8f0:	697a      	ldr	r2, [r7, #20]
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	0a5b      	lsrs	r3, r3, #9
 800a8fc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a8fe:	6a3b      	ldr	r3, [r7, #32]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d03c      	beq.n	800a97e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a904:	69ba      	ldr	r2, [r7, #24]
 800a906:	6a3b      	ldr	r3, [r7, #32]
 800a908:	4413      	add	r3, r2
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	8952      	ldrh	r2, [r2, #10]
 800a90e:	4293      	cmp	r3, r2
 800a910:	d905      	bls.n	800a91e <f_write+0x1ac>
					cc = fs->csize - csect;
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	895b      	ldrh	r3, [r3, #10]
 800a916:	461a      	mov	r2, r3
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	7858      	ldrb	r0, [r3, #1]
 800a922:	6a3b      	ldr	r3, [r7, #32]
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	69f9      	ldr	r1, [r7, #28]
 800a928:	f7fd ff04 	bl	8008734 <disk_write>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d004      	beq.n	800a93c <f_write+0x1ca>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2201      	movs	r2, #1
 800a936:	755a      	strb	r2, [r3, #21]
 800a938:	2301      	movs	r3, #1
 800a93a:	e08b      	b.n	800aa54 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6a1a      	ldr	r2, [r3, #32]
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	6a3a      	ldr	r2, [r7, #32]
 800a946:	429a      	cmp	r2, r3
 800a948:	d915      	bls.n	800a976 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6a1a      	ldr	r2, [r3, #32]
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	025b      	lsls	r3, r3, #9
 800a95a:	69fa      	ldr	r2, [r7, #28]
 800a95c:	4413      	add	r3, r2
 800a95e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a962:	4619      	mov	r1, r3
 800a964:	f7fd ffa6 	bl	80088b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	7d1b      	ldrb	r3, [r3, #20]
 800a96c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a970:	b2da      	uxtb	r2, r3
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	025b      	lsls	r3, r3, #9
 800a97a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a97c:	e03f      	b.n	800a9fe <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	429a      	cmp	r2, r3
 800a986:	d016      	beq.n	800a9b6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	699a      	ldr	r2, [r3, #24]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a990:	429a      	cmp	r2, r3
 800a992:	d210      	bcs.n	800a9b6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	7858      	ldrb	r0, [r3, #1]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a99e:	2301      	movs	r3, #1
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	f7fd fea7 	bl	80086f4 <disk_read>
 800a9a6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d004      	beq.n	800a9b6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	755a      	strb	r2, [r3, #21]
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e04e      	b.n	800aa54 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9c4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a9c8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a9ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d901      	bls.n	800a9d6 <f_write+0x264>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e4:	4413      	add	r3, r2
 800a9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e8:	69f9      	ldr	r1, [r7, #28]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fd ff62 	bl	80088b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	7d1b      	ldrb	r3, [r3, #20]
 800a9f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a9fe:	69fa      	ldr	r2, [r7, #28]
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	4413      	add	r3, r2
 800aa04:	61fb      	str	r3, [r7, #28]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	699a      	ldr	r2, [r3, #24]
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	441a      	add	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	619a      	str	r2, [r3, #24]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	68da      	ldr	r2, [r3, #12]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	bf38      	it	cc
 800aa1e:	461a      	movcc	r2, r3
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	60da      	str	r2, [r3, #12]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2a:	441a      	add	r2, r3
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	601a      	str	r2, [r3, #0]
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f47f aed4 	bne.w	800a7e8 <f_write+0x76>
 800aa40:	e000      	b.n	800aa44 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aa42:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	7d1b      	ldrb	r3, [r3, #20]
 800aa48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3730      	adds	r7, #48	; 0x30
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f107 0208 	add.w	r2, r7, #8
 800aa6a:	4611      	mov	r1, r2
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7ff fb07 	bl	800a080 <validate>
 800aa72:	4603      	mov	r3, r0
 800aa74:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aa76:	7dfb      	ldrb	r3, [r7, #23]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d168      	bne.n	800ab4e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	7d1b      	ldrb	r3, [r3, #20]
 800aa80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d062      	beq.n	800ab4e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	7d1b      	ldrb	r3, [r3, #20]
 800aa8c:	b25b      	sxtb	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	da15      	bge.n	800aabe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	7858      	ldrb	r0, [r3, #1]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a1a      	ldr	r2, [r3, #32]
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	f7fd fe47 	bl	8008734 <disk_write>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d001      	beq.n	800aab0 <f_sync+0x54>
 800aaac:	2301      	movs	r3, #1
 800aaae:	e04f      	b.n	800ab50 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	7d1b      	ldrb	r3, [r3, #20]
 800aab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aab8:	b2da      	uxtb	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800aabe:	f7fd fd7b 	bl	80085b8 <get_fattime>
 800aac2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaca:	4619      	mov	r1, r3
 800aacc:	4610      	mov	r0, r2
 800aace:	f7fe f91f 	bl	8008d10 <move_window>
 800aad2:	4603      	mov	r3, r0
 800aad4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d138      	bne.n	800ab4e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	330b      	adds	r3, #11
 800aae6:	781a      	ldrb	r2, [r3, #0]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	330b      	adds	r3, #11
 800aaec:	f042 0220 	orr.w	r2, r2, #32
 800aaf0:	b2d2      	uxtb	r2, r2
 800aaf2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6818      	ldr	r0, [r3, #0]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	461a      	mov	r2, r3
 800aafe:	68f9      	ldr	r1, [r7, #12]
 800ab00:	f7fe fe2a 	bl	8009758 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f103 021c 	add.w	r2, r3, #28
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	4619      	mov	r1, r3
 800ab10:	4610      	mov	r0, r2
 800ab12:	f7fd fea3 	bl	800885c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	3316      	adds	r3, #22
 800ab1a:	6939      	ldr	r1, [r7, #16]
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fd fe9d 	bl	800885c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	3312      	adds	r3, #18
 800ab26:	2100      	movs	r1, #0
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fd fe7c 	bl	8008826 <st_word>
					fs->wflag = 1;
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	2201      	movs	r2, #1
 800ab32:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fe f918 	bl	8008d6c <sync_fs>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	7d1b      	ldrb	r3, [r3, #20]
 800ab44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ab4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f7ff ff7b 	bl	800aa5c <f_sync>
 800ab66:	4603      	mov	r3, r0
 800ab68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ab6a:	7bfb      	ldrb	r3, [r7, #15]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d118      	bne.n	800aba2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f107 0208 	add.w	r2, r7, #8
 800ab76:	4611      	mov	r1, r2
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7ff fa81 	bl	800a080 <validate>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ab82:	7bfb      	ldrb	r3, [r7, #15]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10c      	bne.n	800aba2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fe f81b 	bl	8008bc8 <dec_lock>
 800ab92:	4603      	mov	r3, r0
 800ab94:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ab96:	7bfb      	ldrb	r3, [r7, #15]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d102      	bne.n	800aba2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b092      	sub	sp, #72	; 0x48
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800abb8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800abbc:	f107 030c 	add.w	r3, r7, #12
 800abc0:	2200      	movs	r2, #0
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7ff f810 	bl	8009be8 <find_volume>
 800abc8:	4603      	mov	r3, r0
 800abca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800abce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f040 8099 	bne.w	800ad0a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800abd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800abde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe0:	691a      	ldr	r2, [r3, #16]
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	3b02      	subs	r3, #2
 800abe8:	429a      	cmp	r2, r3
 800abea:	d804      	bhi.n	800abf6 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800abec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abee:	691a      	ldr	r2, [r3, #16]
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	601a      	str	r2, [r3, #0]
 800abf4:	e089      	b.n	800ad0a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800abfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d128      	bne.n	800ac54 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ac02:	2302      	movs	r3, #2
 800ac04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac08:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ac0a:	f107 0314 	add.w	r3, r7, #20
 800ac0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7fe f938 	bl	8008e86 <get_fat>
 800ac16:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ac18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac1e:	d103      	bne.n	800ac28 <f_getfree+0x7c>
 800ac20:	2301      	movs	r3, #1
 800ac22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ac26:	e063      	b.n	800acf0 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ac28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d103      	bne.n	800ac36 <f_getfree+0x8a>
 800ac2e:	2302      	movs	r3, #2
 800ac30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ac34:	e05c      	b.n	800acf0 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ac36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d102      	bne.n	800ac42 <f_getfree+0x96>
 800ac3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac3e:	3301      	adds	r3, #1
 800ac40:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800ac42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac44:	3301      	adds	r3, #1
 800ac46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4a:	695b      	ldr	r3, [r3, #20]
 800ac4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d3db      	bcc.n	800ac0a <f_getfree+0x5e>
 800ac52:	e04d      	b.n	800acf0 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ac54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	637b      	str	r3, [r7, #52]	; 0x34
 800ac64:	2300      	movs	r3, #0
 800ac66:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800ac68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d113      	bne.n	800ac96 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ac6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	63ba      	str	r2, [r7, #56]	; 0x38
 800ac76:	4619      	mov	r1, r3
 800ac78:	f7fe f84a 	bl	8008d10 <move_window>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800ac82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d131      	bne.n	800acee <f_getfree+0x142>
							p = fs->win;
 800ac8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8c:	3330      	adds	r3, #48	; 0x30
 800ac8e:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800ac90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac94:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	2b02      	cmp	r3, #2
 800ac9c:	d10f      	bne.n	800acbe <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ac9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aca0:	f7fd fd86 	bl	80087b0 <ld_word>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d102      	bne.n	800acb0 <f_getfree+0x104>
 800acaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acac:	3301      	adds	r3, #1
 800acae:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800acb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb2:	3302      	adds	r3, #2
 800acb4:	633b      	str	r3, [r7, #48]	; 0x30
 800acb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb8:	3b02      	subs	r3, #2
 800acba:	637b      	str	r3, [r7, #52]	; 0x34
 800acbc:	e010      	b.n	800ace0 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800acbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acc0:	f7fd fd8e 	bl	80087e0 <ld_dword>
 800acc4:	4603      	mov	r3, r0
 800acc6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800acca:	2b00      	cmp	r3, #0
 800accc:	d102      	bne.n	800acd4 <f_getfree+0x128>
 800acce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acd0:	3301      	adds	r3, #1
 800acd2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800acd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd6:	3304      	adds	r3, #4
 800acd8:	633b      	str	r3, [r7, #48]	; 0x30
 800acda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acdc:	3b04      	subs	r3, #4
 800acde:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800ace0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace2:	3b01      	subs	r3, #1
 800ace4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d1bd      	bne.n	800ac68 <f_getfree+0xbc>
 800acec:	e000      	b.n	800acf0 <f_getfree+0x144>
							if (res != FR_OK) break;
 800acee:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acf4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800acf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acfa:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800acfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfe:	791a      	ldrb	r2, [r3, #4]
 800ad00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad02:	f042 0201 	orr.w	r2, r2, #1
 800ad06:	b2d2      	uxtb	r2, r2
 800ad08:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ad0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3748      	adds	r7, #72	; 0x48
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b084      	sub	sp, #16
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
 800ad1e:	460b      	mov	r3, r1
 800ad20:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ad22:	78fb      	ldrb	r3, [r7, #3]
 800ad24:	2b0a      	cmp	r3, #10
 800ad26:	d103      	bne.n	800ad30 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ad28:	210d      	movs	r1, #13
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7ff fff3 	bl	800ad16 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	db25      	blt.n	800ad88 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	1c5a      	adds	r2, r3, #1
 800ad40:	60fa      	str	r2, [r7, #12]
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	4413      	add	r3, r2
 800ad46:	78fa      	ldrb	r2, [r7, #3]
 800ad48:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2b3c      	cmp	r3, #60	; 0x3c
 800ad4e:	dd12      	ble.n	800ad76 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6818      	ldr	r0, [r3, #0]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f103 010c 	add.w	r1, r3, #12
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	f107 0308 	add.w	r3, r7, #8
 800ad60:	f7ff fd07 	bl	800a772 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d101      	bne.n	800ad70 <putc_bfd+0x5a>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	e001      	b.n	800ad74 <putc_bfd+0x5e>
 800ad70:	f04f 33ff 	mov.w	r3, #4294967295
 800ad74:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	1c5a      	adds	r2, r3, #1
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	609a      	str	r2, [r3, #8]
 800ad86:	e000      	b.n	800ad8a <putc_bfd+0x74>
	if (i < 0) return;
 800ad88:	bf00      	nop
}
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	db16      	blt.n	800adce <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6818      	ldr	r0, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f103 010c 	add.w	r1, r3, #12
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	461a      	mov	r2, r3
 800adb0:	f107 030c 	add.w	r3, r7, #12
 800adb4:	f7ff fcdd 	bl	800a772 <f_write>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d107      	bne.n	800adce <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d102      	bne.n	800adce <putc_flush+0x3e>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	e001      	b.n	800add2 <putc_flush+0x42>
	return EOF;
 800adce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800add2:	4618      	mov	r0, r3
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800adda:	b480      	push	{r7}
 800addc:	b083      	sub	sp, #12
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	683a      	ldr	r2, [r7, #0]
 800ade8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	605a      	str	r2, [r3, #4]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	609a      	str	r2, [r3, #8]
}
 800adf8:	bf00      	nop
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b096      	sub	sp, #88	; 0x58
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800ae0e:	f107 030c 	add.w	r3, r7, #12
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7ff ffe0 	bl	800adda <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800ae1a:	e009      	b.n	800ae30 <f_puts+0x2c>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	1c5a      	adds	r2, r3, #1
 800ae20:	607a      	str	r2, [r7, #4]
 800ae22:	781a      	ldrb	r2, [r3, #0]
 800ae24:	f107 030c 	add.w	r3, r7, #12
 800ae28:	4611      	mov	r1, r2
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7ff ff73 	bl	800ad16 <putc_bfd>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1f1      	bne.n	800ae1c <f_puts+0x18>
	return putc_flush(&pb);
 800ae38:	f107 030c 	add.w	r3, r7, #12
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7ff ffa7 	bl	800ad90 <putc_flush>
 800ae42:	4603      	mov	r3, r0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3758      	adds	r7, #88	; 0x58
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	4613      	mov	r3, r2
 800ae58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ae62:	4b1f      	ldr	r3, [pc, #124]	; (800aee0 <FATFS_LinkDriverEx+0x94>)
 800ae64:	7a5b      	ldrb	r3, [r3, #9]
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d131      	bne.n	800aed0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ae6c:	4b1c      	ldr	r3, [pc, #112]	; (800aee0 <FATFS_LinkDriverEx+0x94>)
 800ae6e:	7a5b      	ldrb	r3, [r3, #9]
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	461a      	mov	r2, r3
 800ae74:	4b1a      	ldr	r3, [pc, #104]	; (800aee0 <FATFS_LinkDriverEx+0x94>)
 800ae76:	2100      	movs	r1, #0
 800ae78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ae7a:	4b19      	ldr	r3, [pc, #100]	; (800aee0 <FATFS_LinkDriverEx+0x94>)
 800ae7c:	7a5b      	ldrb	r3, [r3, #9]
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	4a17      	ldr	r2, [pc, #92]	; (800aee0 <FATFS_LinkDriverEx+0x94>)
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	4413      	add	r3, r2
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ae8a:	4b15      	ldr	r3, [pc, #84]	; (800aee0 <FATFS_LinkDriverEx+0x94>)
 800ae8c:	7a5b      	ldrb	r3, [r3, #9]
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	461a      	mov	r2, r3
 800ae92:	4b13      	ldr	r3, [pc, #76]	; (800aee0 <FATFS_LinkDriverEx+0x94>)
 800ae94:	4413      	add	r3, r2
 800ae96:	79fa      	ldrb	r2, [r7, #7]
 800ae98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ae9a:	4b11      	ldr	r3, [pc, #68]	; (800aee0 <FATFS_LinkDriverEx+0x94>)
 800ae9c:	7a5b      	ldrb	r3, [r3, #9]
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	1c5a      	adds	r2, r3, #1
 800aea2:	b2d1      	uxtb	r1, r2
 800aea4:	4a0e      	ldr	r2, [pc, #56]	; (800aee0 <FATFS_LinkDriverEx+0x94>)
 800aea6:	7251      	strb	r1, [r2, #9]
 800aea8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aeaa:	7dbb      	ldrb	r3, [r7, #22]
 800aeac:	3330      	adds	r3, #48	; 0x30
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	223a      	movs	r2, #58	; 0x3a
 800aeba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	3302      	adds	r3, #2
 800aec0:	222f      	movs	r2, #47	; 0x2f
 800aec2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	3303      	adds	r3, #3
 800aec8:	2200      	movs	r2, #0
 800aeca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	371c      	adds	r7, #28
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	200018c4 	.word	0x200018c4

0800aee4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aeee:	2200      	movs	r2, #0
 800aef0:	6839      	ldr	r1, [r7, #0]
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7ff ffaa 	bl	800ae4c <FATFS_LinkDriverEx>
 800aef8:	4603      	mov	r3, r0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <__cvt>:
 800af02:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af06:	ec55 4b10 	vmov	r4, r5, d0
 800af0a:	2d00      	cmp	r5, #0
 800af0c:	460e      	mov	r6, r1
 800af0e:	4619      	mov	r1, r3
 800af10:	462b      	mov	r3, r5
 800af12:	bfbb      	ittet	lt
 800af14:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800af18:	461d      	movlt	r5, r3
 800af1a:	2300      	movge	r3, #0
 800af1c:	232d      	movlt	r3, #45	; 0x2d
 800af1e:	700b      	strb	r3, [r1, #0]
 800af20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af22:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800af26:	4691      	mov	r9, r2
 800af28:	f023 0820 	bic.w	r8, r3, #32
 800af2c:	bfbc      	itt	lt
 800af2e:	4622      	movlt	r2, r4
 800af30:	4614      	movlt	r4, r2
 800af32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af36:	d005      	beq.n	800af44 <__cvt+0x42>
 800af38:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af3c:	d100      	bne.n	800af40 <__cvt+0x3e>
 800af3e:	3601      	adds	r6, #1
 800af40:	2102      	movs	r1, #2
 800af42:	e000      	b.n	800af46 <__cvt+0x44>
 800af44:	2103      	movs	r1, #3
 800af46:	ab03      	add	r3, sp, #12
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	ab02      	add	r3, sp, #8
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	ec45 4b10 	vmov	d0, r4, r5
 800af52:	4653      	mov	r3, sl
 800af54:	4632      	mov	r2, r6
 800af56:	f000 fe93 	bl	800bc80 <_dtoa_r>
 800af5a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af5e:	4607      	mov	r7, r0
 800af60:	d102      	bne.n	800af68 <__cvt+0x66>
 800af62:	f019 0f01 	tst.w	r9, #1
 800af66:	d022      	beq.n	800afae <__cvt+0xac>
 800af68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af6c:	eb07 0906 	add.w	r9, r7, r6
 800af70:	d110      	bne.n	800af94 <__cvt+0x92>
 800af72:	783b      	ldrb	r3, [r7, #0]
 800af74:	2b30      	cmp	r3, #48	; 0x30
 800af76:	d10a      	bne.n	800af8e <__cvt+0x8c>
 800af78:	2200      	movs	r2, #0
 800af7a:	2300      	movs	r3, #0
 800af7c:	4620      	mov	r0, r4
 800af7e:	4629      	mov	r1, r5
 800af80:	f7f5 fdaa 	bl	8000ad8 <__aeabi_dcmpeq>
 800af84:	b918      	cbnz	r0, 800af8e <__cvt+0x8c>
 800af86:	f1c6 0601 	rsb	r6, r6, #1
 800af8a:	f8ca 6000 	str.w	r6, [sl]
 800af8e:	f8da 3000 	ldr.w	r3, [sl]
 800af92:	4499      	add	r9, r3
 800af94:	2200      	movs	r2, #0
 800af96:	2300      	movs	r3, #0
 800af98:	4620      	mov	r0, r4
 800af9a:	4629      	mov	r1, r5
 800af9c:	f7f5 fd9c 	bl	8000ad8 <__aeabi_dcmpeq>
 800afa0:	b108      	cbz	r0, 800afa6 <__cvt+0xa4>
 800afa2:	f8cd 900c 	str.w	r9, [sp, #12]
 800afa6:	2230      	movs	r2, #48	; 0x30
 800afa8:	9b03      	ldr	r3, [sp, #12]
 800afaa:	454b      	cmp	r3, r9
 800afac:	d307      	bcc.n	800afbe <__cvt+0xbc>
 800afae:	9b03      	ldr	r3, [sp, #12]
 800afb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afb2:	1bdb      	subs	r3, r3, r7
 800afb4:	4638      	mov	r0, r7
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	b004      	add	sp, #16
 800afba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afbe:	1c59      	adds	r1, r3, #1
 800afc0:	9103      	str	r1, [sp, #12]
 800afc2:	701a      	strb	r2, [r3, #0]
 800afc4:	e7f0      	b.n	800afa8 <__cvt+0xa6>

0800afc6 <__exponent>:
 800afc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afc8:	4603      	mov	r3, r0
 800afca:	2900      	cmp	r1, #0
 800afcc:	bfb8      	it	lt
 800afce:	4249      	neglt	r1, r1
 800afd0:	f803 2b02 	strb.w	r2, [r3], #2
 800afd4:	bfb4      	ite	lt
 800afd6:	222d      	movlt	r2, #45	; 0x2d
 800afd8:	222b      	movge	r2, #43	; 0x2b
 800afda:	2909      	cmp	r1, #9
 800afdc:	7042      	strb	r2, [r0, #1]
 800afde:	dd2a      	ble.n	800b036 <__exponent+0x70>
 800afe0:	f10d 0207 	add.w	r2, sp, #7
 800afe4:	4617      	mov	r7, r2
 800afe6:	260a      	movs	r6, #10
 800afe8:	4694      	mov	ip, r2
 800afea:	fb91 f5f6 	sdiv	r5, r1, r6
 800afee:	fb06 1415 	mls	r4, r6, r5, r1
 800aff2:	3430      	adds	r4, #48	; 0x30
 800aff4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800aff8:	460c      	mov	r4, r1
 800affa:	2c63      	cmp	r4, #99	; 0x63
 800affc:	f102 32ff 	add.w	r2, r2, #4294967295
 800b000:	4629      	mov	r1, r5
 800b002:	dcf1      	bgt.n	800afe8 <__exponent+0x22>
 800b004:	3130      	adds	r1, #48	; 0x30
 800b006:	f1ac 0402 	sub.w	r4, ip, #2
 800b00a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b00e:	1c41      	adds	r1, r0, #1
 800b010:	4622      	mov	r2, r4
 800b012:	42ba      	cmp	r2, r7
 800b014:	d30a      	bcc.n	800b02c <__exponent+0x66>
 800b016:	f10d 0209 	add.w	r2, sp, #9
 800b01a:	eba2 020c 	sub.w	r2, r2, ip
 800b01e:	42bc      	cmp	r4, r7
 800b020:	bf88      	it	hi
 800b022:	2200      	movhi	r2, #0
 800b024:	4413      	add	r3, r2
 800b026:	1a18      	subs	r0, r3, r0
 800b028:	b003      	add	sp, #12
 800b02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b02c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b030:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b034:	e7ed      	b.n	800b012 <__exponent+0x4c>
 800b036:	2330      	movs	r3, #48	; 0x30
 800b038:	3130      	adds	r1, #48	; 0x30
 800b03a:	7083      	strb	r3, [r0, #2]
 800b03c:	70c1      	strb	r1, [r0, #3]
 800b03e:	1d03      	adds	r3, r0, #4
 800b040:	e7f1      	b.n	800b026 <__exponent+0x60>
	...

0800b044 <_printf_float>:
 800b044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b048:	ed2d 8b02 	vpush	{d8}
 800b04c:	b08d      	sub	sp, #52	; 0x34
 800b04e:	460c      	mov	r4, r1
 800b050:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b054:	4616      	mov	r6, r2
 800b056:	461f      	mov	r7, r3
 800b058:	4605      	mov	r5, r0
 800b05a:	f000 fd01 	bl	800ba60 <_localeconv_r>
 800b05e:	f8d0 a000 	ldr.w	sl, [r0]
 800b062:	4650      	mov	r0, sl
 800b064:	f7f5 f90c 	bl	8000280 <strlen>
 800b068:	2300      	movs	r3, #0
 800b06a:	930a      	str	r3, [sp, #40]	; 0x28
 800b06c:	6823      	ldr	r3, [r4, #0]
 800b06e:	9305      	str	r3, [sp, #20]
 800b070:	f8d8 3000 	ldr.w	r3, [r8]
 800b074:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b078:	3307      	adds	r3, #7
 800b07a:	f023 0307 	bic.w	r3, r3, #7
 800b07e:	f103 0208 	add.w	r2, r3, #8
 800b082:	f8c8 2000 	str.w	r2, [r8]
 800b086:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b08a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b08e:	9307      	str	r3, [sp, #28]
 800b090:	f8cd 8018 	str.w	r8, [sp, #24]
 800b094:	ee08 0a10 	vmov	s16, r0
 800b098:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b09c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0a0:	4b9e      	ldr	r3, [pc, #632]	; (800b31c <_printf_float+0x2d8>)
 800b0a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0a6:	f7f5 fd49 	bl	8000b3c <__aeabi_dcmpun>
 800b0aa:	bb88      	cbnz	r0, 800b110 <_printf_float+0xcc>
 800b0ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0b0:	4b9a      	ldr	r3, [pc, #616]	; (800b31c <_printf_float+0x2d8>)
 800b0b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0b6:	f7f5 fd23 	bl	8000b00 <__aeabi_dcmple>
 800b0ba:	bb48      	cbnz	r0, 800b110 <_printf_float+0xcc>
 800b0bc:	2200      	movs	r2, #0
 800b0be:	2300      	movs	r3, #0
 800b0c0:	4640      	mov	r0, r8
 800b0c2:	4649      	mov	r1, r9
 800b0c4:	f7f5 fd12 	bl	8000aec <__aeabi_dcmplt>
 800b0c8:	b110      	cbz	r0, 800b0d0 <_printf_float+0x8c>
 800b0ca:	232d      	movs	r3, #45	; 0x2d
 800b0cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0d0:	4a93      	ldr	r2, [pc, #588]	; (800b320 <_printf_float+0x2dc>)
 800b0d2:	4b94      	ldr	r3, [pc, #592]	; (800b324 <_printf_float+0x2e0>)
 800b0d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b0d8:	bf94      	ite	ls
 800b0da:	4690      	movls	r8, r2
 800b0dc:	4698      	movhi	r8, r3
 800b0de:	2303      	movs	r3, #3
 800b0e0:	6123      	str	r3, [r4, #16]
 800b0e2:	9b05      	ldr	r3, [sp, #20]
 800b0e4:	f023 0304 	bic.w	r3, r3, #4
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	f04f 0900 	mov.w	r9, #0
 800b0ee:	9700      	str	r7, [sp, #0]
 800b0f0:	4633      	mov	r3, r6
 800b0f2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	f000 f9da 	bl	800b4b0 <_printf_common>
 800b0fc:	3001      	adds	r0, #1
 800b0fe:	f040 8090 	bne.w	800b222 <_printf_float+0x1de>
 800b102:	f04f 30ff 	mov.w	r0, #4294967295
 800b106:	b00d      	add	sp, #52	; 0x34
 800b108:	ecbd 8b02 	vpop	{d8}
 800b10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b110:	4642      	mov	r2, r8
 800b112:	464b      	mov	r3, r9
 800b114:	4640      	mov	r0, r8
 800b116:	4649      	mov	r1, r9
 800b118:	f7f5 fd10 	bl	8000b3c <__aeabi_dcmpun>
 800b11c:	b140      	cbz	r0, 800b130 <_printf_float+0xec>
 800b11e:	464b      	mov	r3, r9
 800b120:	2b00      	cmp	r3, #0
 800b122:	bfbc      	itt	lt
 800b124:	232d      	movlt	r3, #45	; 0x2d
 800b126:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b12a:	4a7f      	ldr	r2, [pc, #508]	; (800b328 <_printf_float+0x2e4>)
 800b12c:	4b7f      	ldr	r3, [pc, #508]	; (800b32c <_printf_float+0x2e8>)
 800b12e:	e7d1      	b.n	800b0d4 <_printf_float+0x90>
 800b130:	6863      	ldr	r3, [r4, #4]
 800b132:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b136:	9206      	str	r2, [sp, #24]
 800b138:	1c5a      	adds	r2, r3, #1
 800b13a:	d13f      	bne.n	800b1bc <_printf_float+0x178>
 800b13c:	2306      	movs	r3, #6
 800b13e:	6063      	str	r3, [r4, #4]
 800b140:	9b05      	ldr	r3, [sp, #20]
 800b142:	6861      	ldr	r1, [r4, #4]
 800b144:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b148:	2300      	movs	r3, #0
 800b14a:	9303      	str	r3, [sp, #12]
 800b14c:	ab0a      	add	r3, sp, #40	; 0x28
 800b14e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b152:	ab09      	add	r3, sp, #36	; 0x24
 800b154:	ec49 8b10 	vmov	d0, r8, r9
 800b158:	9300      	str	r3, [sp, #0]
 800b15a:	6022      	str	r2, [r4, #0]
 800b15c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b160:	4628      	mov	r0, r5
 800b162:	f7ff fece 	bl	800af02 <__cvt>
 800b166:	9b06      	ldr	r3, [sp, #24]
 800b168:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b16a:	2b47      	cmp	r3, #71	; 0x47
 800b16c:	4680      	mov	r8, r0
 800b16e:	d108      	bne.n	800b182 <_printf_float+0x13e>
 800b170:	1cc8      	adds	r0, r1, #3
 800b172:	db02      	blt.n	800b17a <_printf_float+0x136>
 800b174:	6863      	ldr	r3, [r4, #4]
 800b176:	4299      	cmp	r1, r3
 800b178:	dd41      	ble.n	800b1fe <_printf_float+0x1ba>
 800b17a:	f1ab 0302 	sub.w	r3, fp, #2
 800b17e:	fa5f fb83 	uxtb.w	fp, r3
 800b182:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b186:	d820      	bhi.n	800b1ca <_printf_float+0x186>
 800b188:	3901      	subs	r1, #1
 800b18a:	465a      	mov	r2, fp
 800b18c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b190:	9109      	str	r1, [sp, #36]	; 0x24
 800b192:	f7ff ff18 	bl	800afc6 <__exponent>
 800b196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b198:	1813      	adds	r3, r2, r0
 800b19a:	2a01      	cmp	r2, #1
 800b19c:	4681      	mov	r9, r0
 800b19e:	6123      	str	r3, [r4, #16]
 800b1a0:	dc02      	bgt.n	800b1a8 <_printf_float+0x164>
 800b1a2:	6822      	ldr	r2, [r4, #0]
 800b1a4:	07d2      	lsls	r2, r2, #31
 800b1a6:	d501      	bpl.n	800b1ac <_printf_float+0x168>
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	6123      	str	r3, [r4, #16]
 800b1ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d09c      	beq.n	800b0ee <_printf_float+0xaa>
 800b1b4:	232d      	movs	r3, #45	; 0x2d
 800b1b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1ba:	e798      	b.n	800b0ee <_printf_float+0xaa>
 800b1bc:	9a06      	ldr	r2, [sp, #24]
 800b1be:	2a47      	cmp	r2, #71	; 0x47
 800b1c0:	d1be      	bne.n	800b140 <_printf_float+0xfc>
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1bc      	bne.n	800b140 <_printf_float+0xfc>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e7b9      	b.n	800b13e <_printf_float+0xfa>
 800b1ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b1ce:	d118      	bne.n	800b202 <_printf_float+0x1be>
 800b1d0:	2900      	cmp	r1, #0
 800b1d2:	6863      	ldr	r3, [r4, #4]
 800b1d4:	dd0b      	ble.n	800b1ee <_printf_float+0x1aa>
 800b1d6:	6121      	str	r1, [r4, #16]
 800b1d8:	b913      	cbnz	r3, 800b1e0 <_printf_float+0x19c>
 800b1da:	6822      	ldr	r2, [r4, #0]
 800b1dc:	07d0      	lsls	r0, r2, #31
 800b1de:	d502      	bpl.n	800b1e6 <_printf_float+0x1a2>
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	440b      	add	r3, r1
 800b1e4:	6123      	str	r3, [r4, #16]
 800b1e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800b1e8:	f04f 0900 	mov.w	r9, #0
 800b1ec:	e7de      	b.n	800b1ac <_printf_float+0x168>
 800b1ee:	b913      	cbnz	r3, 800b1f6 <_printf_float+0x1b2>
 800b1f0:	6822      	ldr	r2, [r4, #0]
 800b1f2:	07d2      	lsls	r2, r2, #31
 800b1f4:	d501      	bpl.n	800b1fa <_printf_float+0x1b6>
 800b1f6:	3302      	adds	r3, #2
 800b1f8:	e7f4      	b.n	800b1e4 <_printf_float+0x1a0>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e7f2      	b.n	800b1e4 <_printf_float+0x1a0>
 800b1fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b204:	4299      	cmp	r1, r3
 800b206:	db05      	blt.n	800b214 <_printf_float+0x1d0>
 800b208:	6823      	ldr	r3, [r4, #0]
 800b20a:	6121      	str	r1, [r4, #16]
 800b20c:	07d8      	lsls	r0, r3, #31
 800b20e:	d5ea      	bpl.n	800b1e6 <_printf_float+0x1a2>
 800b210:	1c4b      	adds	r3, r1, #1
 800b212:	e7e7      	b.n	800b1e4 <_printf_float+0x1a0>
 800b214:	2900      	cmp	r1, #0
 800b216:	bfd4      	ite	le
 800b218:	f1c1 0202 	rsble	r2, r1, #2
 800b21c:	2201      	movgt	r2, #1
 800b21e:	4413      	add	r3, r2
 800b220:	e7e0      	b.n	800b1e4 <_printf_float+0x1a0>
 800b222:	6823      	ldr	r3, [r4, #0]
 800b224:	055a      	lsls	r2, r3, #21
 800b226:	d407      	bmi.n	800b238 <_printf_float+0x1f4>
 800b228:	6923      	ldr	r3, [r4, #16]
 800b22a:	4642      	mov	r2, r8
 800b22c:	4631      	mov	r1, r6
 800b22e:	4628      	mov	r0, r5
 800b230:	47b8      	blx	r7
 800b232:	3001      	adds	r0, #1
 800b234:	d12c      	bne.n	800b290 <_printf_float+0x24c>
 800b236:	e764      	b.n	800b102 <_printf_float+0xbe>
 800b238:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b23c:	f240 80e0 	bls.w	800b400 <_printf_float+0x3bc>
 800b240:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b244:	2200      	movs	r2, #0
 800b246:	2300      	movs	r3, #0
 800b248:	f7f5 fc46 	bl	8000ad8 <__aeabi_dcmpeq>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d034      	beq.n	800b2ba <_printf_float+0x276>
 800b250:	4a37      	ldr	r2, [pc, #220]	; (800b330 <_printf_float+0x2ec>)
 800b252:	2301      	movs	r3, #1
 800b254:	4631      	mov	r1, r6
 800b256:	4628      	mov	r0, r5
 800b258:	47b8      	blx	r7
 800b25a:	3001      	adds	r0, #1
 800b25c:	f43f af51 	beq.w	800b102 <_printf_float+0xbe>
 800b260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b264:	429a      	cmp	r2, r3
 800b266:	db02      	blt.n	800b26e <_printf_float+0x22a>
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	07d8      	lsls	r0, r3, #31
 800b26c:	d510      	bpl.n	800b290 <_printf_float+0x24c>
 800b26e:	ee18 3a10 	vmov	r3, s16
 800b272:	4652      	mov	r2, sl
 800b274:	4631      	mov	r1, r6
 800b276:	4628      	mov	r0, r5
 800b278:	47b8      	blx	r7
 800b27a:	3001      	adds	r0, #1
 800b27c:	f43f af41 	beq.w	800b102 <_printf_float+0xbe>
 800b280:	f04f 0800 	mov.w	r8, #0
 800b284:	f104 091a 	add.w	r9, r4, #26
 800b288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b28a:	3b01      	subs	r3, #1
 800b28c:	4543      	cmp	r3, r8
 800b28e:	dc09      	bgt.n	800b2a4 <_printf_float+0x260>
 800b290:	6823      	ldr	r3, [r4, #0]
 800b292:	079b      	lsls	r3, r3, #30
 800b294:	f100 8107 	bmi.w	800b4a6 <_printf_float+0x462>
 800b298:	68e0      	ldr	r0, [r4, #12]
 800b29a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b29c:	4298      	cmp	r0, r3
 800b29e:	bfb8      	it	lt
 800b2a0:	4618      	movlt	r0, r3
 800b2a2:	e730      	b.n	800b106 <_printf_float+0xc2>
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	464a      	mov	r2, r9
 800b2a8:	4631      	mov	r1, r6
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	47b8      	blx	r7
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	f43f af27 	beq.w	800b102 <_printf_float+0xbe>
 800b2b4:	f108 0801 	add.w	r8, r8, #1
 800b2b8:	e7e6      	b.n	800b288 <_printf_float+0x244>
 800b2ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	dc39      	bgt.n	800b334 <_printf_float+0x2f0>
 800b2c0:	4a1b      	ldr	r2, [pc, #108]	; (800b330 <_printf_float+0x2ec>)
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	4631      	mov	r1, r6
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	47b8      	blx	r7
 800b2ca:	3001      	adds	r0, #1
 800b2cc:	f43f af19 	beq.w	800b102 <_printf_float+0xbe>
 800b2d0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	d102      	bne.n	800b2de <_printf_float+0x29a>
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	07d9      	lsls	r1, r3, #31
 800b2dc:	d5d8      	bpl.n	800b290 <_printf_float+0x24c>
 800b2de:	ee18 3a10 	vmov	r3, s16
 800b2e2:	4652      	mov	r2, sl
 800b2e4:	4631      	mov	r1, r6
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	47b8      	blx	r7
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	f43f af09 	beq.w	800b102 <_printf_float+0xbe>
 800b2f0:	f04f 0900 	mov.w	r9, #0
 800b2f4:	f104 0a1a 	add.w	sl, r4, #26
 800b2f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2fa:	425b      	negs	r3, r3
 800b2fc:	454b      	cmp	r3, r9
 800b2fe:	dc01      	bgt.n	800b304 <_printf_float+0x2c0>
 800b300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b302:	e792      	b.n	800b22a <_printf_float+0x1e6>
 800b304:	2301      	movs	r3, #1
 800b306:	4652      	mov	r2, sl
 800b308:	4631      	mov	r1, r6
 800b30a:	4628      	mov	r0, r5
 800b30c:	47b8      	blx	r7
 800b30e:	3001      	adds	r0, #1
 800b310:	f43f aef7 	beq.w	800b102 <_printf_float+0xbe>
 800b314:	f109 0901 	add.w	r9, r9, #1
 800b318:	e7ee      	b.n	800b2f8 <_printf_float+0x2b4>
 800b31a:	bf00      	nop
 800b31c:	7fefffff 	.word	0x7fefffff
 800b320:	08010bc4 	.word	0x08010bc4
 800b324:	08010bc8 	.word	0x08010bc8
 800b328:	08010bcc 	.word	0x08010bcc
 800b32c:	08010bd0 	.word	0x08010bd0
 800b330:	08010bd4 	.word	0x08010bd4
 800b334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b338:	429a      	cmp	r2, r3
 800b33a:	bfa8      	it	ge
 800b33c:	461a      	movge	r2, r3
 800b33e:	2a00      	cmp	r2, #0
 800b340:	4691      	mov	r9, r2
 800b342:	dc37      	bgt.n	800b3b4 <_printf_float+0x370>
 800b344:	f04f 0b00 	mov.w	fp, #0
 800b348:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b34c:	f104 021a 	add.w	r2, r4, #26
 800b350:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b352:	9305      	str	r3, [sp, #20]
 800b354:	eba3 0309 	sub.w	r3, r3, r9
 800b358:	455b      	cmp	r3, fp
 800b35a:	dc33      	bgt.n	800b3c4 <_printf_float+0x380>
 800b35c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b360:	429a      	cmp	r2, r3
 800b362:	db3b      	blt.n	800b3dc <_printf_float+0x398>
 800b364:	6823      	ldr	r3, [r4, #0]
 800b366:	07da      	lsls	r2, r3, #31
 800b368:	d438      	bmi.n	800b3dc <_printf_float+0x398>
 800b36a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b36e:	eba2 0903 	sub.w	r9, r2, r3
 800b372:	9b05      	ldr	r3, [sp, #20]
 800b374:	1ad2      	subs	r2, r2, r3
 800b376:	4591      	cmp	r9, r2
 800b378:	bfa8      	it	ge
 800b37a:	4691      	movge	r9, r2
 800b37c:	f1b9 0f00 	cmp.w	r9, #0
 800b380:	dc35      	bgt.n	800b3ee <_printf_float+0x3aa>
 800b382:	f04f 0800 	mov.w	r8, #0
 800b386:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b38a:	f104 0a1a 	add.w	sl, r4, #26
 800b38e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b392:	1a9b      	subs	r3, r3, r2
 800b394:	eba3 0309 	sub.w	r3, r3, r9
 800b398:	4543      	cmp	r3, r8
 800b39a:	f77f af79 	ble.w	800b290 <_printf_float+0x24c>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	4652      	mov	r2, sl
 800b3a2:	4631      	mov	r1, r6
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	47b8      	blx	r7
 800b3a8:	3001      	adds	r0, #1
 800b3aa:	f43f aeaa 	beq.w	800b102 <_printf_float+0xbe>
 800b3ae:	f108 0801 	add.w	r8, r8, #1
 800b3b2:	e7ec      	b.n	800b38e <_printf_float+0x34a>
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	4631      	mov	r1, r6
 800b3b8:	4642      	mov	r2, r8
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	47b8      	blx	r7
 800b3be:	3001      	adds	r0, #1
 800b3c0:	d1c0      	bne.n	800b344 <_printf_float+0x300>
 800b3c2:	e69e      	b.n	800b102 <_printf_float+0xbe>
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	4631      	mov	r1, r6
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	9205      	str	r2, [sp, #20]
 800b3cc:	47b8      	blx	r7
 800b3ce:	3001      	adds	r0, #1
 800b3d0:	f43f ae97 	beq.w	800b102 <_printf_float+0xbe>
 800b3d4:	9a05      	ldr	r2, [sp, #20]
 800b3d6:	f10b 0b01 	add.w	fp, fp, #1
 800b3da:	e7b9      	b.n	800b350 <_printf_float+0x30c>
 800b3dc:	ee18 3a10 	vmov	r3, s16
 800b3e0:	4652      	mov	r2, sl
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	47b8      	blx	r7
 800b3e8:	3001      	adds	r0, #1
 800b3ea:	d1be      	bne.n	800b36a <_printf_float+0x326>
 800b3ec:	e689      	b.n	800b102 <_printf_float+0xbe>
 800b3ee:	9a05      	ldr	r2, [sp, #20]
 800b3f0:	464b      	mov	r3, r9
 800b3f2:	4442      	add	r2, r8
 800b3f4:	4631      	mov	r1, r6
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	47b8      	blx	r7
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	d1c1      	bne.n	800b382 <_printf_float+0x33e>
 800b3fe:	e680      	b.n	800b102 <_printf_float+0xbe>
 800b400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b402:	2a01      	cmp	r2, #1
 800b404:	dc01      	bgt.n	800b40a <_printf_float+0x3c6>
 800b406:	07db      	lsls	r3, r3, #31
 800b408:	d53a      	bpl.n	800b480 <_printf_float+0x43c>
 800b40a:	2301      	movs	r3, #1
 800b40c:	4642      	mov	r2, r8
 800b40e:	4631      	mov	r1, r6
 800b410:	4628      	mov	r0, r5
 800b412:	47b8      	blx	r7
 800b414:	3001      	adds	r0, #1
 800b416:	f43f ae74 	beq.w	800b102 <_printf_float+0xbe>
 800b41a:	ee18 3a10 	vmov	r3, s16
 800b41e:	4652      	mov	r2, sl
 800b420:	4631      	mov	r1, r6
 800b422:	4628      	mov	r0, r5
 800b424:	47b8      	blx	r7
 800b426:	3001      	adds	r0, #1
 800b428:	f43f ae6b 	beq.w	800b102 <_printf_float+0xbe>
 800b42c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b430:	2200      	movs	r2, #0
 800b432:	2300      	movs	r3, #0
 800b434:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b438:	f7f5 fb4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800b43c:	b9d8      	cbnz	r0, 800b476 <_printf_float+0x432>
 800b43e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b442:	f108 0201 	add.w	r2, r8, #1
 800b446:	4631      	mov	r1, r6
 800b448:	4628      	mov	r0, r5
 800b44a:	47b8      	blx	r7
 800b44c:	3001      	adds	r0, #1
 800b44e:	d10e      	bne.n	800b46e <_printf_float+0x42a>
 800b450:	e657      	b.n	800b102 <_printf_float+0xbe>
 800b452:	2301      	movs	r3, #1
 800b454:	4652      	mov	r2, sl
 800b456:	4631      	mov	r1, r6
 800b458:	4628      	mov	r0, r5
 800b45a:	47b8      	blx	r7
 800b45c:	3001      	adds	r0, #1
 800b45e:	f43f ae50 	beq.w	800b102 <_printf_float+0xbe>
 800b462:	f108 0801 	add.w	r8, r8, #1
 800b466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b468:	3b01      	subs	r3, #1
 800b46a:	4543      	cmp	r3, r8
 800b46c:	dcf1      	bgt.n	800b452 <_printf_float+0x40e>
 800b46e:	464b      	mov	r3, r9
 800b470:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b474:	e6da      	b.n	800b22c <_printf_float+0x1e8>
 800b476:	f04f 0800 	mov.w	r8, #0
 800b47a:	f104 0a1a 	add.w	sl, r4, #26
 800b47e:	e7f2      	b.n	800b466 <_printf_float+0x422>
 800b480:	2301      	movs	r3, #1
 800b482:	4642      	mov	r2, r8
 800b484:	e7df      	b.n	800b446 <_printf_float+0x402>
 800b486:	2301      	movs	r3, #1
 800b488:	464a      	mov	r2, r9
 800b48a:	4631      	mov	r1, r6
 800b48c:	4628      	mov	r0, r5
 800b48e:	47b8      	blx	r7
 800b490:	3001      	adds	r0, #1
 800b492:	f43f ae36 	beq.w	800b102 <_printf_float+0xbe>
 800b496:	f108 0801 	add.w	r8, r8, #1
 800b49a:	68e3      	ldr	r3, [r4, #12]
 800b49c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b49e:	1a5b      	subs	r3, r3, r1
 800b4a0:	4543      	cmp	r3, r8
 800b4a2:	dcf0      	bgt.n	800b486 <_printf_float+0x442>
 800b4a4:	e6f8      	b.n	800b298 <_printf_float+0x254>
 800b4a6:	f04f 0800 	mov.w	r8, #0
 800b4aa:	f104 0919 	add.w	r9, r4, #25
 800b4ae:	e7f4      	b.n	800b49a <_printf_float+0x456>

0800b4b0 <_printf_common>:
 800b4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b4:	4616      	mov	r6, r2
 800b4b6:	4699      	mov	r9, r3
 800b4b8:	688a      	ldr	r2, [r1, #8]
 800b4ba:	690b      	ldr	r3, [r1, #16]
 800b4bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	bfb8      	it	lt
 800b4c4:	4613      	movlt	r3, r2
 800b4c6:	6033      	str	r3, [r6, #0]
 800b4c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4cc:	4607      	mov	r7, r0
 800b4ce:	460c      	mov	r4, r1
 800b4d0:	b10a      	cbz	r2, 800b4d6 <_printf_common+0x26>
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	6033      	str	r3, [r6, #0]
 800b4d6:	6823      	ldr	r3, [r4, #0]
 800b4d8:	0699      	lsls	r1, r3, #26
 800b4da:	bf42      	ittt	mi
 800b4dc:	6833      	ldrmi	r3, [r6, #0]
 800b4de:	3302      	addmi	r3, #2
 800b4e0:	6033      	strmi	r3, [r6, #0]
 800b4e2:	6825      	ldr	r5, [r4, #0]
 800b4e4:	f015 0506 	ands.w	r5, r5, #6
 800b4e8:	d106      	bne.n	800b4f8 <_printf_common+0x48>
 800b4ea:	f104 0a19 	add.w	sl, r4, #25
 800b4ee:	68e3      	ldr	r3, [r4, #12]
 800b4f0:	6832      	ldr	r2, [r6, #0]
 800b4f2:	1a9b      	subs	r3, r3, r2
 800b4f4:	42ab      	cmp	r3, r5
 800b4f6:	dc26      	bgt.n	800b546 <_printf_common+0x96>
 800b4f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4fc:	1e13      	subs	r3, r2, #0
 800b4fe:	6822      	ldr	r2, [r4, #0]
 800b500:	bf18      	it	ne
 800b502:	2301      	movne	r3, #1
 800b504:	0692      	lsls	r2, r2, #26
 800b506:	d42b      	bmi.n	800b560 <_printf_common+0xb0>
 800b508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b50c:	4649      	mov	r1, r9
 800b50e:	4638      	mov	r0, r7
 800b510:	47c0      	blx	r8
 800b512:	3001      	adds	r0, #1
 800b514:	d01e      	beq.n	800b554 <_printf_common+0xa4>
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	6922      	ldr	r2, [r4, #16]
 800b51a:	f003 0306 	and.w	r3, r3, #6
 800b51e:	2b04      	cmp	r3, #4
 800b520:	bf02      	ittt	eq
 800b522:	68e5      	ldreq	r5, [r4, #12]
 800b524:	6833      	ldreq	r3, [r6, #0]
 800b526:	1aed      	subeq	r5, r5, r3
 800b528:	68a3      	ldr	r3, [r4, #8]
 800b52a:	bf0c      	ite	eq
 800b52c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b530:	2500      	movne	r5, #0
 800b532:	4293      	cmp	r3, r2
 800b534:	bfc4      	itt	gt
 800b536:	1a9b      	subgt	r3, r3, r2
 800b538:	18ed      	addgt	r5, r5, r3
 800b53a:	2600      	movs	r6, #0
 800b53c:	341a      	adds	r4, #26
 800b53e:	42b5      	cmp	r5, r6
 800b540:	d11a      	bne.n	800b578 <_printf_common+0xc8>
 800b542:	2000      	movs	r0, #0
 800b544:	e008      	b.n	800b558 <_printf_common+0xa8>
 800b546:	2301      	movs	r3, #1
 800b548:	4652      	mov	r2, sl
 800b54a:	4649      	mov	r1, r9
 800b54c:	4638      	mov	r0, r7
 800b54e:	47c0      	blx	r8
 800b550:	3001      	adds	r0, #1
 800b552:	d103      	bne.n	800b55c <_printf_common+0xac>
 800b554:	f04f 30ff 	mov.w	r0, #4294967295
 800b558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b55c:	3501      	adds	r5, #1
 800b55e:	e7c6      	b.n	800b4ee <_printf_common+0x3e>
 800b560:	18e1      	adds	r1, r4, r3
 800b562:	1c5a      	adds	r2, r3, #1
 800b564:	2030      	movs	r0, #48	; 0x30
 800b566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b56a:	4422      	add	r2, r4
 800b56c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b574:	3302      	adds	r3, #2
 800b576:	e7c7      	b.n	800b508 <_printf_common+0x58>
 800b578:	2301      	movs	r3, #1
 800b57a:	4622      	mov	r2, r4
 800b57c:	4649      	mov	r1, r9
 800b57e:	4638      	mov	r0, r7
 800b580:	47c0      	blx	r8
 800b582:	3001      	adds	r0, #1
 800b584:	d0e6      	beq.n	800b554 <_printf_common+0xa4>
 800b586:	3601      	adds	r6, #1
 800b588:	e7d9      	b.n	800b53e <_printf_common+0x8e>
	...

0800b58c <_printf_i>:
 800b58c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b590:	7e0f      	ldrb	r7, [r1, #24]
 800b592:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b594:	2f78      	cmp	r7, #120	; 0x78
 800b596:	4691      	mov	r9, r2
 800b598:	4680      	mov	r8, r0
 800b59a:	460c      	mov	r4, r1
 800b59c:	469a      	mov	sl, r3
 800b59e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b5a2:	d807      	bhi.n	800b5b4 <_printf_i+0x28>
 800b5a4:	2f62      	cmp	r7, #98	; 0x62
 800b5a6:	d80a      	bhi.n	800b5be <_printf_i+0x32>
 800b5a8:	2f00      	cmp	r7, #0
 800b5aa:	f000 80d4 	beq.w	800b756 <_printf_i+0x1ca>
 800b5ae:	2f58      	cmp	r7, #88	; 0x58
 800b5b0:	f000 80c0 	beq.w	800b734 <_printf_i+0x1a8>
 800b5b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5bc:	e03a      	b.n	800b634 <_printf_i+0xa8>
 800b5be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5c2:	2b15      	cmp	r3, #21
 800b5c4:	d8f6      	bhi.n	800b5b4 <_printf_i+0x28>
 800b5c6:	a101      	add	r1, pc, #4	; (adr r1, 800b5cc <_printf_i+0x40>)
 800b5c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5cc:	0800b625 	.word	0x0800b625
 800b5d0:	0800b639 	.word	0x0800b639
 800b5d4:	0800b5b5 	.word	0x0800b5b5
 800b5d8:	0800b5b5 	.word	0x0800b5b5
 800b5dc:	0800b5b5 	.word	0x0800b5b5
 800b5e0:	0800b5b5 	.word	0x0800b5b5
 800b5e4:	0800b639 	.word	0x0800b639
 800b5e8:	0800b5b5 	.word	0x0800b5b5
 800b5ec:	0800b5b5 	.word	0x0800b5b5
 800b5f0:	0800b5b5 	.word	0x0800b5b5
 800b5f4:	0800b5b5 	.word	0x0800b5b5
 800b5f8:	0800b73d 	.word	0x0800b73d
 800b5fc:	0800b665 	.word	0x0800b665
 800b600:	0800b6f7 	.word	0x0800b6f7
 800b604:	0800b5b5 	.word	0x0800b5b5
 800b608:	0800b5b5 	.word	0x0800b5b5
 800b60c:	0800b75f 	.word	0x0800b75f
 800b610:	0800b5b5 	.word	0x0800b5b5
 800b614:	0800b665 	.word	0x0800b665
 800b618:	0800b5b5 	.word	0x0800b5b5
 800b61c:	0800b5b5 	.word	0x0800b5b5
 800b620:	0800b6ff 	.word	0x0800b6ff
 800b624:	682b      	ldr	r3, [r5, #0]
 800b626:	1d1a      	adds	r2, r3, #4
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	602a      	str	r2, [r5, #0]
 800b62c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b634:	2301      	movs	r3, #1
 800b636:	e09f      	b.n	800b778 <_printf_i+0x1ec>
 800b638:	6820      	ldr	r0, [r4, #0]
 800b63a:	682b      	ldr	r3, [r5, #0]
 800b63c:	0607      	lsls	r7, r0, #24
 800b63e:	f103 0104 	add.w	r1, r3, #4
 800b642:	6029      	str	r1, [r5, #0]
 800b644:	d501      	bpl.n	800b64a <_printf_i+0xbe>
 800b646:	681e      	ldr	r6, [r3, #0]
 800b648:	e003      	b.n	800b652 <_printf_i+0xc6>
 800b64a:	0646      	lsls	r6, r0, #25
 800b64c:	d5fb      	bpl.n	800b646 <_printf_i+0xba>
 800b64e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b652:	2e00      	cmp	r6, #0
 800b654:	da03      	bge.n	800b65e <_printf_i+0xd2>
 800b656:	232d      	movs	r3, #45	; 0x2d
 800b658:	4276      	negs	r6, r6
 800b65a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b65e:	485a      	ldr	r0, [pc, #360]	; (800b7c8 <_printf_i+0x23c>)
 800b660:	230a      	movs	r3, #10
 800b662:	e012      	b.n	800b68a <_printf_i+0xfe>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	6820      	ldr	r0, [r4, #0]
 800b668:	1d19      	adds	r1, r3, #4
 800b66a:	6029      	str	r1, [r5, #0]
 800b66c:	0605      	lsls	r5, r0, #24
 800b66e:	d501      	bpl.n	800b674 <_printf_i+0xe8>
 800b670:	681e      	ldr	r6, [r3, #0]
 800b672:	e002      	b.n	800b67a <_printf_i+0xee>
 800b674:	0641      	lsls	r1, r0, #25
 800b676:	d5fb      	bpl.n	800b670 <_printf_i+0xe4>
 800b678:	881e      	ldrh	r6, [r3, #0]
 800b67a:	4853      	ldr	r0, [pc, #332]	; (800b7c8 <_printf_i+0x23c>)
 800b67c:	2f6f      	cmp	r7, #111	; 0x6f
 800b67e:	bf0c      	ite	eq
 800b680:	2308      	moveq	r3, #8
 800b682:	230a      	movne	r3, #10
 800b684:	2100      	movs	r1, #0
 800b686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b68a:	6865      	ldr	r5, [r4, #4]
 800b68c:	60a5      	str	r5, [r4, #8]
 800b68e:	2d00      	cmp	r5, #0
 800b690:	bfa2      	ittt	ge
 800b692:	6821      	ldrge	r1, [r4, #0]
 800b694:	f021 0104 	bicge.w	r1, r1, #4
 800b698:	6021      	strge	r1, [r4, #0]
 800b69a:	b90e      	cbnz	r6, 800b6a0 <_printf_i+0x114>
 800b69c:	2d00      	cmp	r5, #0
 800b69e:	d04b      	beq.n	800b738 <_printf_i+0x1ac>
 800b6a0:	4615      	mov	r5, r2
 800b6a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b6a6:	fb03 6711 	mls	r7, r3, r1, r6
 800b6aa:	5dc7      	ldrb	r7, [r0, r7]
 800b6ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b6b0:	4637      	mov	r7, r6
 800b6b2:	42bb      	cmp	r3, r7
 800b6b4:	460e      	mov	r6, r1
 800b6b6:	d9f4      	bls.n	800b6a2 <_printf_i+0x116>
 800b6b8:	2b08      	cmp	r3, #8
 800b6ba:	d10b      	bne.n	800b6d4 <_printf_i+0x148>
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	07de      	lsls	r6, r3, #31
 800b6c0:	d508      	bpl.n	800b6d4 <_printf_i+0x148>
 800b6c2:	6923      	ldr	r3, [r4, #16]
 800b6c4:	6861      	ldr	r1, [r4, #4]
 800b6c6:	4299      	cmp	r1, r3
 800b6c8:	bfde      	ittt	le
 800b6ca:	2330      	movle	r3, #48	; 0x30
 800b6cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b6d4:	1b52      	subs	r2, r2, r5
 800b6d6:	6122      	str	r2, [r4, #16]
 800b6d8:	f8cd a000 	str.w	sl, [sp]
 800b6dc:	464b      	mov	r3, r9
 800b6de:	aa03      	add	r2, sp, #12
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	4640      	mov	r0, r8
 800b6e4:	f7ff fee4 	bl	800b4b0 <_printf_common>
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	d14a      	bne.n	800b782 <_printf_i+0x1f6>
 800b6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f0:	b004      	add	sp, #16
 800b6f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	f043 0320 	orr.w	r3, r3, #32
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	4833      	ldr	r0, [pc, #204]	; (800b7cc <_printf_i+0x240>)
 800b700:	2778      	movs	r7, #120	; 0x78
 800b702:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	6829      	ldr	r1, [r5, #0]
 800b70a:	061f      	lsls	r7, r3, #24
 800b70c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b710:	d402      	bmi.n	800b718 <_printf_i+0x18c>
 800b712:	065f      	lsls	r7, r3, #25
 800b714:	bf48      	it	mi
 800b716:	b2b6      	uxthmi	r6, r6
 800b718:	07df      	lsls	r7, r3, #31
 800b71a:	bf48      	it	mi
 800b71c:	f043 0320 	orrmi.w	r3, r3, #32
 800b720:	6029      	str	r1, [r5, #0]
 800b722:	bf48      	it	mi
 800b724:	6023      	strmi	r3, [r4, #0]
 800b726:	b91e      	cbnz	r6, 800b730 <_printf_i+0x1a4>
 800b728:	6823      	ldr	r3, [r4, #0]
 800b72a:	f023 0320 	bic.w	r3, r3, #32
 800b72e:	6023      	str	r3, [r4, #0]
 800b730:	2310      	movs	r3, #16
 800b732:	e7a7      	b.n	800b684 <_printf_i+0xf8>
 800b734:	4824      	ldr	r0, [pc, #144]	; (800b7c8 <_printf_i+0x23c>)
 800b736:	e7e4      	b.n	800b702 <_printf_i+0x176>
 800b738:	4615      	mov	r5, r2
 800b73a:	e7bd      	b.n	800b6b8 <_printf_i+0x12c>
 800b73c:	682b      	ldr	r3, [r5, #0]
 800b73e:	6826      	ldr	r6, [r4, #0]
 800b740:	6961      	ldr	r1, [r4, #20]
 800b742:	1d18      	adds	r0, r3, #4
 800b744:	6028      	str	r0, [r5, #0]
 800b746:	0635      	lsls	r5, r6, #24
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	d501      	bpl.n	800b750 <_printf_i+0x1c4>
 800b74c:	6019      	str	r1, [r3, #0]
 800b74e:	e002      	b.n	800b756 <_printf_i+0x1ca>
 800b750:	0670      	lsls	r0, r6, #25
 800b752:	d5fb      	bpl.n	800b74c <_printf_i+0x1c0>
 800b754:	8019      	strh	r1, [r3, #0]
 800b756:	2300      	movs	r3, #0
 800b758:	6123      	str	r3, [r4, #16]
 800b75a:	4615      	mov	r5, r2
 800b75c:	e7bc      	b.n	800b6d8 <_printf_i+0x14c>
 800b75e:	682b      	ldr	r3, [r5, #0]
 800b760:	1d1a      	adds	r2, r3, #4
 800b762:	602a      	str	r2, [r5, #0]
 800b764:	681d      	ldr	r5, [r3, #0]
 800b766:	6862      	ldr	r2, [r4, #4]
 800b768:	2100      	movs	r1, #0
 800b76a:	4628      	mov	r0, r5
 800b76c:	f7f4 fd38 	bl	80001e0 <memchr>
 800b770:	b108      	cbz	r0, 800b776 <_printf_i+0x1ea>
 800b772:	1b40      	subs	r0, r0, r5
 800b774:	6060      	str	r0, [r4, #4]
 800b776:	6863      	ldr	r3, [r4, #4]
 800b778:	6123      	str	r3, [r4, #16]
 800b77a:	2300      	movs	r3, #0
 800b77c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b780:	e7aa      	b.n	800b6d8 <_printf_i+0x14c>
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	462a      	mov	r2, r5
 800b786:	4649      	mov	r1, r9
 800b788:	4640      	mov	r0, r8
 800b78a:	47d0      	blx	sl
 800b78c:	3001      	adds	r0, #1
 800b78e:	d0ad      	beq.n	800b6ec <_printf_i+0x160>
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	079b      	lsls	r3, r3, #30
 800b794:	d413      	bmi.n	800b7be <_printf_i+0x232>
 800b796:	68e0      	ldr	r0, [r4, #12]
 800b798:	9b03      	ldr	r3, [sp, #12]
 800b79a:	4298      	cmp	r0, r3
 800b79c:	bfb8      	it	lt
 800b79e:	4618      	movlt	r0, r3
 800b7a0:	e7a6      	b.n	800b6f0 <_printf_i+0x164>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	4632      	mov	r2, r6
 800b7a6:	4649      	mov	r1, r9
 800b7a8:	4640      	mov	r0, r8
 800b7aa:	47d0      	blx	sl
 800b7ac:	3001      	adds	r0, #1
 800b7ae:	d09d      	beq.n	800b6ec <_printf_i+0x160>
 800b7b0:	3501      	adds	r5, #1
 800b7b2:	68e3      	ldr	r3, [r4, #12]
 800b7b4:	9903      	ldr	r1, [sp, #12]
 800b7b6:	1a5b      	subs	r3, r3, r1
 800b7b8:	42ab      	cmp	r3, r5
 800b7ba:	dcf2      	bgt.n	800b7a2 <_printf_i+0x216>
 800b7bc:	e7eb      	b.n	800b796 <_printf_i+0x20a>
 800b7be:	2500      	movs	r5, #0
 800b7c0:	f104 0619 	add.w	r6, r4, #25
 800b7c4:	e7f5      	b.n	800b7b2 <_printf_i+0x226>
 800b7c6:	bf00      	nop
 800b7c8:	08010bd6 	.word	0x08010bd6
 800b7cc:	08010be7 	.word	0x08010be7

0800b7d0 <std>:
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	b510      	push	{r4, lr}
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	e9c0 3300 	strd	r3, r3, [r0]
 800b7da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7de:	6083      	str	r3, [r0, #8]
 800b7e0:	8181      	strh	r1, [r0, #12]
 800b7e2:	6643      	str	r3, [r0, #100]	; 0x64
 800b7e4:	81c2      	strh	r2, [r0, #14]
 800b7e6:	6183      	str	r3, [r0, #24]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	2208      	movs	r2, #8
 800b7ec:	305c      	adds	r0, #92	; 0x5c
 800b7ee:	f000 f92e 	bl	800ba4e <memset>
 800b7f2:	4b0d      	ldr	r3, [pc, #52]	; (800b828 <std+0x58>)
 800b7f4:	6263      	str	r3, [r4, #36]	; 0x24
 800b7f6:	4b0d      	ldr	r3, [pc, #52]	; (800b82c <std+0x5c>)
 800b7f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7fa:	4b0d      	ldr	r3, [pc, #52]	; (800b830 <std+0x60>)
 800b7fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7fe:	4b0d      	ldr	r3, [pc, #52]	; (800b834 <std+0x64>)
 800b800:	6323      	str	r3, [r4, #48]	; 0x30
 800b802:	4b0d      	ldr	r3, [pc, #52]	; (800b838 <std+0x68>)
 800b804:	6224      	str	r4, [r4, #32]
 800b806:	429c      	cmp	r4, r3
 800b808:	d006      	beq.n	800b818 <std+0x48>
 800b80a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b80e:	4294      	cmp	r4, r2
 800b810:	d002      	beq.n	800b818 <std+0x48>
 800b812:	33d0      	adds	r3, #208	; 0xd0
 800b814:	429c      	cmp	r4, r3
 800b816:	d105      	bne.n	800b824 <std+0x54>
 800b818:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b820:	f000 b992 	b.w	800bb48 <__retarget_lock_init_recursive>
 800b824:	bd10      	pop	{r4, pc}
 800b826:	bf00      	nop
 800b828:	0800b995 	.word	0x0800b995
 800b82c:	0800b9b7 	.word	0x0800b9b7
 800b830:	0800b9ef 	.word	0x0800b9ef
 800b834:	0800ba13 	.word	0x0800ba13
 800b838:	200018d0 	.word	0x200018d0

0800b83c <stdio_exit_handler>:
 800b83c:	4a02      	ldr	r2, [pc, #8]	; (800b848 <stdio_exit_handler+0xc>)
 800b83e:	4903      	ldr	r1, [pc, #12]	; (800b84c <stdio_exit_handler+0x10>)
 800b840:	4803      	ldr	r0, [pc, #12]	; (800b850 <stdio_exit_handler+0x14>)
 800b842:	f000 b869 	b.w	800b918 <_fwalk_sglue>
 800b846:	bf00      	nop
 800b848:	200006b8 	.word	0x200006b8
 800b84c:	0800d519 	.word	0x0800d519
 800b850:	200006c4 	.word	0x200006c4

0800b854 <cleanup_stdio>:
 800b854:	6841      	ldr	r1, [r0, #4]
 800b856:	4b0c      	ldr	r3, [pc, #48]	; (800b888 <cleanup_stdio+0x34>)
 800b858:	4299      	cmp	r1, r3
 800b85a:	b510      	push	{r4, lr}
 800b85c:	4604      	mov	r4, r0
 800b85e:	d001      	beq.n	800b864 <cleanup_stdio+0x10>
 800b860:	f001 fe5a 	bl	800d518 <_fflush_r>
 800b864:	68a1      	ldr	r1, [r4, #8]
 800b866:	4b09      	ldr	r3, [pc, #36]	; (800b88c <cleanup_stdio+0x38>)
 800b868:	4299      	cmp	r1, r3
 800b86a:	d002      	beq.n	800b872 <cleanup_stdio+0x1e>
 800b86c:	4620      	mov	r0, r4
 800b86e:	f001 fe53 	bl	800d518 <_fflush_r>
 800b872:	68e1      	ldr	r1, [r4, #12]
 800b874:	4b06      	ldr	r3, [pc, #24]	; (800b890 <cleanup_stdio+0x3c>)
 800b876:	4299      	cmp	r1, r3
 800b878:	d004      	beq.n	800b884 <cleanup_stdio+0x30>
 800b87a:	4620      	mov	r0, r4
 800b87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b880:	f001 be4a 	b.w	800d518 <_fflush_r>
 800b884:	bd10      	pop	{r4, pc}
 800b886:	bf00      	nop
 800b888:	200018d0 	.word	0x200018d0
 800b88c:	20001938 	.word	0x20001938
 800b890:	200019a0 	.word	0x200019a0

0800b894 <global_stdio_init.part.0>:
 800b894:	b510      	push	{r4, lr}
 800b896:	4b0b      	ldr	r3, [pc, #44]	; (800b8c4 <global_stdio_init.part.0+0x30>)
 800b898:	4c0b      	ldr	r4, [pc, #44]	; (800b8c8 <global_stdio_init.part.0+0x34>)
 800b89a:	4a0c      	ldr	r2, [pc, #48]	; (800b8cc <global_stdio_init.part.0+0x38>)
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	4620      	mov	r0, r4
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	2104      	movs	r1, #4
 800b8a4:	f7ff ff94 	bl	800b7d0 <std>
 800b8a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	2109      	movs	r1, #9
 800b8b0:	f7ff ff8e 	bl	800b7d0 <std>
 800b8b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8be:	2112      	movs	r1, #18
 800b8c0:	f7ff bf86 	b.w	800b7d0 <std>
 800b8c4:	20001a08 	.word	0x20001a08
 800b8c8:	200018d0 	.word	0x200018d0
 800b8cc:	0800b83d 	.word	0x0800b83d

0800b8d0 <__sfp_lock_acquire>:
 800b8d0:	4801      	ldr	r0, [pc, #4]	; (800b8d8 <__sfp_lock_acquire+0x8>)
 800b8d2:	f000 b93a 	b.w	800bb4a <__retarget_lock_acquire_recursive>
 800b8d6:	bf00      	nop
 800b8d8:	20001a11 	.word	0x20001a11

0800b8dc <__sfp_lock_release>:
 800b8dc:	4801      	ldr	r0, [pc, #4]	; (800b8e4 <__sfp_lock_release+0x8>)
 800b8de:	f000 b935 	b.w	800bb4c <__retarget_lock_release_recursive>
 800b8e2:	bf00      	nop
 800b8e4:	20001a11 	.word	0x20001a11

0800b8e8 <__sinit>:
 800b8e8:	b510      	push	{r4, lr}
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	f7ff fff0 	bl	800b8d0 <__sfp_lock_acquire>
 800b8f0:	6a23      	ldr	r3, [r4, #32]
 800b8f2:	b11b      	cbz	r3, 800b8fc <__sinit+0x14>
 800b8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8f8:	f7ff bff0 	b.w	800b8dc <__sfp_lock_release>
 800b8fc:	4b04      	ldr	r3, [pc, #16]	; (800b910 <__sinit+0x28>)
 800b8fe:	6223      	str	r3, [r4, #32]
 800b900:	4b04      	ldr	r3, [pc, #16]	; (800b914 <__sinit+0x2c>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1f5      	bne.n	800b8f4 <__sinit+0xc>
 800b908:	f7ff ffc4 	bl	800b894 <global_stdio_init.part.0>
 800b90c:	e7f2      	b.n	800b8f4 <__sinit+0xc>
 800b90e:	bf00      	nop
 800b910:	0800b855 	.word	0x0800b855
 800b914:	20001a08 	.word	0x20001a08

0800b918 <_fwalk_sglue>:
 800b918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b91c:	4607      	mov	r7, r0
 800b91e:	4688      	mov	r8, r1
 800b920:	4614      	mov	r4, r2
 800b922:	2600      	movs	r6, #0
 800b924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b928:	f1b9 0901 	subs.w	r9, r9, #1
 800b92c:	d505      	bpl.n	800b93a <_fwalk_sglue+0x22>
 800b92e:	6824      	ldr	r4, [r4, #0]
 800b930:	2c00      	cmp	r4, #0
 800b932:	d1f7      	bne.n	800b924 <_fwalk_sglue+0xc>
 800b934:	4630      	mov	r0, r6
 800b936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b93a:	89ab      	ldrh	r3, [r5, #12]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d907      	bls.n	800b950 <_fwalk_sglue+0x38>
 800b940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b944:	3301      	adds	r3, #1
 800b946:	d003      	beq.n	800b950 <_fwalk_sglue+0x38>
 800b948:	4629      	mov	r1, r5
 800b94a:	4638      	mov	r0, r7
 800b94c:	47c0      	blx	r8
 800b94e:	4306      	orrs	r6, r0
 800b950:	3568      	adds	r5, #104	; 0x68
 800b952:	e7e9      	b.n	800b928 <_fwalk_sglue+0x10>

0800b954 <siprintf>:
 800b954:	b40e      	push	{r1, r2, r3}
 800b956:	b500      	push	{lr}
 800b958:	b09c      	sub	sp, #112	; 0x70
 800b95a:	ab1d      	add	r3, sp, #116	; 0x74
 800b95c:	9002      	str	r0, [sp, #8]
 800b95e:	9006      	str	r0, [sp, #24]
 800b960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b964:	4809      	ldr	r0, [pc, #36]	; (800b98c <siprintf+0x38>)
 800b966:	9107      	str	r1, [sp, #28]
 800b968:	9104      	str	r1, [sp, #16]
 800b96a:	4909      	ldr	r1, [pc, #36]	; (800b990 <siprintf+0x3c>)
 800b96c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b970:	9105      	str	r1, [sp, #20]
 800b972:	6800      	ldr	r0, [r0, #0]
 800b974:	9301      	str	r3, [sp, #4]
 800b976:	a902      	add	r1, sp, #8
 800b978:	f001 fc4a 	bl	800d210 <_svfiprintf_r>
 800b97c:	9b02      	ldr	r3, [sp, #8]
 800b97e:	2200      	movs	r2, #0
 800b980:	701a      	strb	r2, [r3, #0]
 800b982:	b01c      	add	sp, #112	; 0x70
 800b984:	f85d eb04 	ldr.w	lr, [sp], #4
 800b988:	b003      	add	sp, #12
 800b98a:	4770      	bx	lr
 800b98c:	20000710 	.word	0x20000710
 800b990:	ffff0208 	.word	0xffff0208

0800b994 <__sread>:
 800b994:	b510      	push	{r4, lr}
 800b996:	460c      	mov	r4, r1
 800b998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b99c:	f000 f886 	bl	800baac <_read_r>
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	bfab      	itete	ge
 800b9a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9a6:	89a3      	ldrhlt	r3, [r4, #12]
 800b9a8:	181b      	addge	r3, r3, r0
 800b9aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9ae:	bfac      	ite	ge
 800b9b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9b2:	81a3      	strhlt	r3, [r4, #12]
 800b9b4:	bd10      	pop	{r4, pc}

0800b9b6 <__swrite>:
 800b9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ba:	461f      	mov	r7, r3
 800b9bc:	898b      	ldrh	r3, [r1, #12]
 800b9be:	05db      	lsls	r3, r3, #23
 800b9c0:	4605      	mov	r5, r0
 800b9c2:	460c      	mov	r4, r1
 800b9c4:	4616      	mov	r6, r2
 800b9c6:	d505      	bpl.n	800b9d4 <__swrite+0x1e>
 800b9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9cc:	2302      	movs	r3, #2
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f000 f85a 	bl	800ba88 <_lseek_r>
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9de:	81a3      	strh	r3, [r4, #12]
 800b9e0:	4632      	mov	r2, r6
 800b9e2:	463b      	mov	r3, r7
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ea:	f000 b871 	b.w	800bad0 <_write_r>

0800b9ee <__sseek>:
 800b9ee:	b510      	push	{r4, lr}
 800b9f0:	460c      	mov	r4, r1
 800b9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f6:	f000 f847 	bl	800ba88 <_lseek_r>
 800b9fa:	1c43      	adds	r3, r0, #1
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	bf15      	itete	ne
 800ba00:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba0a:	81a3      	strheq	r3, [r4, #12]
 800ba0c:	bf18      	it	ne
 800ba0e:	81a3      	strhne	r3, [r4, #12]
 800ba10:	bd10      	pop	{r4, pc}

0800ba12 <__sclose>:
 800ba12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba16:	f000 b827 	b.w	800ba68 <_close_r>

0800ba1a <memmove>:
 800ba1a:	4288      	cmp	r0, r1
 800ba1c:	b510      	push	{r4, lr}
 800ba1e:	eb01 0402 	add.w	r4, r1, r2
 800ba22:	d902      	bls.n	800ba2a <memmove+0x10>
 800ba24:	4284      	cmp	r4, r0
 800ba26:	4623      	mov	r3, r4
 800ba28:	d807      	bhi.n	800ba3a <memmove+0x20>
 800ba2a:	1e43      	subs	r3, r0, #1
 800ba2c:	42a1      	cmp	r1, r4
 800ba2e:	d008      	beq.n	800ba42 <memmove+0x28>
 800ba30:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba34:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba38:	e7f8      	b.n	800ba2c <memmove+0x12>
 800ba3a:	4402      	add	r2, r0
 800ba3c:	4601      	mov	r1, r0
 800ba3e:	428a      	cmp	r2, r1
 800ba40:	d100      	bne.n	800ba44 <memmove+0x2a>
 800ba42:	bd10      	pop	{r4, pc}
 800ba44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba48:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba4c:	e7f7      	b.n	800ba3e <memmove+0x24>

0800ba4e <memset>:
 800ba4e:	4402      	add	r2, r0
 800ba50:	4603      	mov	r3, r0
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d100      	bne.n	800ba58 <memset+0xa>
 800ba56:	4770      	bx	lr
 800ba58:	f803 1b01 	strb.w	r1, [r3], #1
 800ba5c:	e7f9      	b.n	800ba52 <memset+0x4>
	...

0800ba60 <_localeconv_r>:
 800ba60:	4800      	ldr	r0, [pc, #0]	; (800ba64 <_localeconv_r+0x4>)
 800ba62:	4770      	bx	lr
 800ba64:	20000804 	.word	0x20000804

0800ba68 <_close_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4d06      	ldr	r5, [pc, #24]	; (800ba84 <_close_r+0x1c>)
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	4604      	mov	r4, r0
 800ba70:	4608      	mov	r0, r1
 800ba72:	602b      	str	r3, [r5, #0]
 800ba74:	f7f7 f993 	bl	8002d9e <_close>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d102      	bne.n	800ba82 <_close_r+0x1a>
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	b103      	cbz	r3, 800ba82 <_close_r+0x1a>
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	20001a0c 	.word	0x20001a0c

0800ba88 <_lseek_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4d07      	ldr	r5, [pc, #28]	; (800baa8 <_lseek_r+0x20>)
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	4608      	mov	r0, r1
 800ba90:	4611      	mov	r1, r2
 800ba92:	2200      	movs	r2, #0
 800ba94:	602a      	str	r2, [r5, #0]
 800ba96:	461a      	mov	r2, r3
 800ba98:	f7f7 f9a8 	bl	8002dec <_lseek>
 800ba9c:	1c43      	adds	r3, r0, #1
 800ba9e:	d102      	bne.n	800baa6 <_lseek_r+0x1e>
 800baa0:	682b      	ldr	r3, [r5, #0]
 800baa2:	b103      	cbz	r3, 800baa6 <_lseek_r+0x1e>
 800baa4:	6023      	str	r3, [r4, #0]
 800baa6:	bd38      	pop	{r3, r4, r5, pc}
 800baa8:	20001a0c 	.word	0x20001a0c

0800baac <_read_r>:
 800baac:	b538      	push	{r3, r4, r5, lr}
 800baae:	4d07      	ldr	r5, [pc, #28]	; (800bacc <_read_r+0x20>)
 800bab0:	4604      	mov	r4, r0
 800bab2:	4608      	mov	r0, r1
 800bab4:	4611      	mov	r1, r2
 800bab6:	2200      	movs	r2, #0
 800bab8:	602a      	str	r2, [r5, #0]
 800baba:	461a      	mov	r2, r3
 800babc:	f7f7 f936 	bl	8002d2c <_read>
 800bac0:	1c43      	adds	r3, r0, #1
 800bac2:	d102      	bne.n	800baca <_read_r+0x1e>
 800bac4:	682b      	ldr	r3, [r5, #0]
 800bac6:	b103      	cbz	r3, 800baca <_read_r+0x1e>
 800bac8:	6023      	str	r3, [r4, #0]
 800baca:	bd38      	pop	{r3, r4, r5, pc}
 800bacc:	20001a0c 	.word	0x20001a0c

0800bad0 <_write_r>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4d07      	ldr	r5, [pc, #28]	; (800baf0 <_write_r+0x20>)
 800bad4:	4604      	mov	r4, r0
 800bad6:	4608      	mov	r0, r1
 800bad8:	4611      	mov	r1, r2
 800bada:	2200      	movs	r2, #0
 800badc:	602a      	str	r2, [r5, #0]
 800bade:	461a      	mov	r2, r3
 800bae0:	f7f7 f941 	bl	8002d66 <_write>
 800bae4:	1c43      	adds	r3, r0, #1
 800bae6:	d102      	bne.n	800baee <_write_r+0x1e>
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	b103      	cbz	r3, 800baee <_write_r+0x1e>
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	bd38      	pop	{r3, r4, r5, pc}
 800baf0:	20001a0c 	.word	0x20001a0c

0800baf4 <__errno>:
 800baf4:	4b01      	ldr	r3, [pc, #4]	; (800bafc <__errno+0x8>)
 800baf6:	6818      	ldr	r0, [r3, #0]
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	20000710 	.word	0x20000710

0800bb00 <__libc_init_array>:
 800bb00:	b570      	push	{r4, r5, r6, lr}
 800bb02:	4d0d      	ldr	r5, [pc, #52]	; (800bb38 <__libc_init_array+0x38>)
 800bb04:	4c0d      	ldr	r4, [pc, #52]	; (800bb3c <__libc_init_array+0x3c>)
 800bb06:	1b64      	subs	r4, r4, r5
 800bb08:	10a4      	asrs	r4, r4, #2
 800bb0a:	2600      	movs	r6, #0
 800bb0c:	42a6      	cmp	r6, r4
 800bb0e:	d109      	bne.n	800bb24 <__libc_init_array+0x24>
 800bb10:	4d0b      	ldr	r5, [pc, #44]	; (800bb40 <__libc_init_array+0x40>)
 800bb12:	4c0c      	ldr	r4, [pc, #48]	; (800bb44 <__libc_init_array+0x44>)
 800bb14:	f002 f87c 	bl	800dc10 <_init>
 800bb18:	1b64      	subs	r4, r4, r5
 800bb1a:	10a4      	asrs	r4, r4, #2
 800bb1c:	2600      	movs	r6, #0
 800bb1e:	42a6      	cmp	r6, r4
 800bb20:	d105      	bne.n	800bb2e <__libc_init_array+0x2e>
 800bb22:	bd70      	pop	{r4, r5, r6, pc}
 800bb24:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb28:	4798      	blx	r3
 800bb2a:	3601      	adds	r6, #1
 800bb2c:	e7ee      	b.n	800bb0c <__libc_init_array+0xc>
 800bb2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb32:	4798      	blx	r3
 800bb34:	3601      	adds	r6, #1
 800bb36:	e7f2      	b.n	800bb1e <__libc_init_array+0x1e>
 800bb38:	08010f3c 	.word	0x08010f3c
 800bb3c:	08010f3c 	.word	0x08010f3c
 800bb40:	08010f3c 	.word	0x08010f3c
 800bb44:	08010f40 	.word	0x08010f40

0800bb48 <__retarget_lock_init_recursive>:
 800bb48:	4770      	bx	lr

0800bb4a <__retarget_lock_acquire_recursive>:
 800bb4a:	4770      	bx	lr

0800bb4c <__retarget_lock_release_recursive>:
 800bb4c:	4770      	bx	lr

0800bb4e <memcpy>:
 800bb4e:	440a      	add	r2, r1
 800bb50:	4291      	cmp	r1, r2
 800bb52:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb56:	d100      	bne.n	800bb5a <memcpy+0xc>
 800bb58:	4770      	bx	lr
 800bb5a:	b510      	push	{r4, lr}
 800bb5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb64:	4291      	cmp	r1, r2
 800bb66:	d1f9      	bne.n	800bb5c <memcpy+0xe>
 800bb68:	bd10      	pop	{r4, pc}

0800bb6a <quorem>:
 800bb6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6e:	6903      	ldr	r3, [r0, #16]
 800bb70:	690c      	ldr	r4, [r1, #16]
 800bb72:	42a3      	cmp	r3, r4
 800bb74:	4607      	mov	r7, r0
 800bb76:	db7e      	blt.n	800bc76 <quorem+0x10c>
 800bb78:	3c01      	subs	r4, #1
 800bb7a:	f101 0814 	add.w	r8, r1, #20
 800bb7e:	f100 0514 	add.w	r5, r0, #20
 800bb82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb86:	9301      	str	r3, [sp, #4]
 800bb88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb90:	3301      	adds	r3, #1
 800bb92:	429a      	cmp	r2, r3
 800bb94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bb98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bba0:	d331      	bcc.n	800bc06 <quorem+0x9c>
 800bba2:	f04f 0e00 	mov.w	lr, #0
 800bba6:	4640      	mov	r0, r8
 800bba8:	46ac      	mov	ip, r5
 800bbaa:	46f2      	mov	sl, lr
 800bbac:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbb0:	b293      	uxth	r3, r2
 800bbb2:	fb06 e303 	mla	r3, r6, r3, lr
 800bbb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbba:	0c1a      	lsrs	r2, r3, #16
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	ebaa 0303 	sub.w	r3, sl, r3
 800bbc2:	f8dc a000 	ldr.w	sl, [ip]
 800bbc6:	fa13 f38a 	uxtah	r3, r3, sl
 800bbca:	fb06 220e 	mla	r2, r6, lr, r2
 800bbce:	9300      	str	r3, [sp, #0]
 800bbd0:	9b00      	ldr	r3, [sp, #0]
 800bbd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbd6:	b292      	uxth	r2, r2
 800bbd8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bbdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbe0:	f8bd 3000 	ldrh.w	r3, [sp]
 800bbe4:	4581      	cmp	r9, r0
 800bbe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbea:	f84c 3b04 	str.w	r3, [ip], #4
 800bbee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bbf2:	d2db      	bcs.n	800bbac <quorem+0x42>
 800bbf4:	f855 300b 	ldr.w	r3, [r5, fp]
 800bbf8:	b92b      	cbnz	r3, 800bc06 <quorem+0x9c>
 800bbfa:	9b01      	ldr	r3, [sp, #4]
 800bbfc:	3b04      	subs	r3, #4
 800bbfe:	429d      	cmp	r5, r3
 800bc00:	461a      	mov	r2, r3
 800bc02:	d32c      	bcc.n	800bc5e <quorem+0xf4>
 800bc04:	613c      	str	r4, [r7, #16]
 800bc06:	4638      	mov	r0, r7
 800bc08:	f001 f9a8 	bl	800cf5c <__mcmp>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	db22      	blt.n	800bc56 <quorem+0xec>
 800bc10:	3601      	adds	r6, #1
 800bc12:	4629      	mov	r1, r5
 800bc14:	2000      	movs	r0, #0
 800bc16:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc1a:	f8d1 c000 	ldr.w	ip, [r1]
 800bc1e:	b293      	uxth	r3, r2
 800bc20:	1ac3      	subs	r3, r0, r3
 800bc22:	0c12      	lsrs	r2, r2, #16
 800bc24:	fa13 f38c 	uxtah	r3, r3, ip
 800bc28:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bc2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc36:	45c1      	cmp	r9, r8
 800bc38:	f841 3b04 	str.w	r3, [r1], #4
 800bc3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc40:	d2e9      	bcs.n	800bc16 <quorem+0xac>
 800bc42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc4a:	b922      	cbnz	r2, 800bc56 <quorem+0xec>
 800bc4c:	3b04      	subs	r3, #4
 800bc4e:	429d      	cmp	r5, r3
 800bc50:	461a      	mov	r2, r3
 800bc52:	d30a      	bcc.n	800bc6a <quorem+0x100>
 800bc54:	613c      	str	r4, [r7, #16]
 800bc56:	4630      	mov	r0, r6
 800bc58:	b003      	add	sp, #12
 800bc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5e:	6812      	ldr	r2, [r2, #0]
 800bc60:	3b04      	subs	r3, #4
 800bc62:	2a00      	cmp	r2, #0
 800bc64:	d1ce      	bne.n	800bc04 <quorem+0x9a>
 800bc66:	3c01      	subs	r4, #1
 800bc68:	e7c9      	b.n	800bbfe <quorem+0x94>
 800bc6a:	6812      	ldr	r2, [r2, #0]
 800bc6c:	3b04      	subs	r3, #4
 800bc6e:	2a00      	cmp	r2, #0
 800bc70:	d1f0      	bne.n	800bc54 <quorem+0xea>
 800bc72:	3c01      	subs	r4, #1
 800bc74:	e7eb      	b.n	800bc4e <quorem+0xe4>
 800bc76:	2000      	movs	r0, #0
 800bc78:	e7ee      	b.n	800bc58 <quorem+0xee>
 800bc7a:	0000      	movs	r0, r0
 800bc7c:	0000      	movs	r0, r0
	...

0800bc80 <_dtoa_r>:
 800bc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc84:	ed2d 8b04 	vpush	{d8-d9}
 800bc88:	69c5      	ldr	r5, [r0, #28]
 800bc8a:	b093      	sub	sp, #76	; 0x4c
 800bc8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bc90:	ec57 6b10 	vmov	r6, r7, d0
 800bc94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bc98:	9107      	str	r1, [sp, #28]
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	920a      	str	r2, [sp, #40]	; 0x28
 800bc9e:	930d      	str	r3, [sp, #52]	; 0x34
 800bca0:	b975      	cbnz	r5, 800bcc0 <_dtoa_r+0x40>
 800bca2:	2010      	movs	r0, #16
 800bca4:	f000 fe2a 	bl	800c8fc <malloc>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	61e0      	str	r0, [r4, #28]
 800bcac:	b920      	cbnz	r0, 800bcb8 <_dtoa_r+0x38>
 800bcae:	4bae      	ldr	r3, [pc, #696]	; (800bf68 <_dtoa_r+0x2e8>)
 800bcb0:	21ef      	movs	r1, #239	; 0xef
 800bcb2:	48ae      	ldr	r0, [pc, #696]	; (800bf6c <_dtoa_r+0x2ec>)
 800bcb4:	f001 fc68 	bl	800d588 <__assert_func>
 800bcb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bcbc:	6005      	str	r5, [r0, #0]
 800bcbe:	60c5      	str	r5, [r0, #12]
 800bcc0:	69e3      	ldr	r3, [r4, #28]
 800bcc2:	6819      	ldr	r1, [r3, #0]
 800bcc4:	b151      	cbz	r1, 800bcdc <_dtoa_r+0x5c>
 800bcc6:	685a      	ldr	r2, [r3, #4]
 800bcc8:	604a      	str	r2, [r1, #4]
 800bcca:	2301      	movs	r3, #1
 800bccc:	4093      	lsls	r3, r2
 800bcce:	608b      	str	r3, [r1, #8]
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f000 ff07 	bl	800cae4 <_Bfree>
 800bcd6:	69e3      	ldr	r3, [r4, #28]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	601a      	str	r2, [r3, #0]
 800bcdc:	1e3b      	subs	r3, r7, #0
 800bcde:	bfbb      	ittet	lt
 800bce0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bce4:	9303      	strlt	r3, [sp, #12]
 800bce6:	2300      	movge	r3, #0
 800bce8:	2201      	movlt	r2, #1
 800bcea:	bfac      	ite	ge
 800bcec:	f8c8 3000 	strge.w	r3, [r8]
 800bcf0:	f8c8 2000 	strlt.w	r2, [r8]
 800bcf4:	4b9e      	ldr	r3, [pc, #632]	; (800bf70 <_dtoa_r+0x2f0>)
 800bcf6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bcfa:	ea33 0308 	bics.w	r3, r3, r8
 800bcfe:	d11b      	bne.n	800bd38 <_dtoa_r+0xb8>
 800bd00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd02:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd06:	6013      	str	r3, [r2, #0]
 800bd08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bd0c:	4333      	orrs	r3, r6
 800bd0e:	f000 8593 	beq.w	800c838 <_dtoa_r+0xbb8>
 800bd12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd14:	b963      	cbnz	r3, 800bd30 <_dtoa_r+0xb0>
 800bd16:	4b97      	ldr	r3, [pc, #604]	; (800bf74 <_dtoa_r+0x2f4>)
 800bd18:	e027      	b.n	800bd6a <_dtoa_r+0xea>
 800bd1a:	4b97      	ldr	r3, [pc, #604]	; (800bf78 <_dtoa_r+0x2f8>)
 800bd1c:	9300      	str	r3, [sp, #0]
 800bd1e:	3308      	adds	r3, #8
 800bd20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd22:	6013      	str	r3, [r2, #0]
 800bd24:	9800      	ldr	r0, [sp, #0]
 800bd26:	b013      	add	sp, #76	; 0x4c
 800bd28:	ecbd 8b04 	vpop	{d8-d9}
 800bd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd30:	4b90      	ldr	r3, [pc, #576]	; (800bf74 <_dtoa_r+0x2f4>)
 800bd32:	9300      	str	r3, [sp, #0]
 800bd34:	3303      	adds	r3, #3
 800bd36:	e7f3      	b.n	800bd20 <_dtoa_r+0xa0>
 800bd38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	ec51 0b17 	vmov	r0, r1, d7
 800bd42:	eeb0 8a47 	vmov.f32	s16, s14
 800bd46:	eef0 8a67 	vmov.f32	s17, s15
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	f7f4 fec4 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd50:	4681      	mov	r9, r0
 800bd52:	b160      	cbz	r0, 800bd6e <_dtoa_r+0xee>
 800bd54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd56:	2301      	movs	r3, #1
 800bd58:	6013      	str	r3, [r2, #0]
 800bd5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f000 8568 	beq.w	800c832 <_dtoa_r+0xbb2>
 800bd62:	4b86      	ldr	r3, [pc, #536]	; (800bf7c <_dtoa_r+0x2fc>)
 800bd64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd66:	6013      	str	r3, [r2, #0]
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	e7da      	b.n	800bd24 <_dtoa_r+0xa4>
 800bd6e:	aa10      	add	r2, sp, #64	; 0x40
 800bd70:	a911      	add	r1, sp, #68	; 0x44
 800bd72:	4620      	mov	r0, r4
 800bd74:	eeb0 0a48 	vmov.f32	s0, s16
 800bd78:	eef0 0a68 	vmov.f32	s1, s17
 800bd7c:	f001 f994 	bl	800d0a8 <__d2b>
 800bd80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bd84:	4682      	mov	sl, r0
 800bd86:	2d00      	cmp	r5, #0
 800bd88:	d07f      	beq.n	800be8a <_dtoa_r+0x20a>
 800bd8a:	ee18 3a90 	vmov	r3, s17
 800bd8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bd96:	ec51 0b18 	vmov	r0, r1, d8
 800bd9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bda2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bda6:	4619      	mov	r1, r3
 800bda8:	2200      	movs	r2, #0
 800bdaa:	4b75      	ldr	r3, [pc, #468]	; (800bf80 <_dtoa_r+0x300>)
 800bdac:	f7f4 fa74 	bl	8000298 <__aeabi_dsub>
 800bdb0:	a367      	add	r3, pc, #412	; (adr r3, 800bf50 <_dtoa_r+0x2d0>)
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	f7f4 fc27 	bl	8000608 <__aeabi_dmul>
 800bdba:	a367      	add	r3, pc, #412	; (adr r3, 800bf58 <_dtoa_r+0x2d8>)
 800bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc0:	f7f4 fa6c 	bl	800029c <__adddf3>
 800bdc4:	4606      	mov	r6, r0
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	460f      	mov	r7, r1
 800bdca:	f7f4 fbb3 	bl	8000534 <__aeabi_i2d>
 800bdce:	a364      	add	r3, pc, #400	; (adr r3, 800bf60 <_dtoa_r+0x2e0>)
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	f7f4 fc18 	bl	8000608 <__aeabi_dmul>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	4630      	mov	r0, r6
 800bdde:	4639      	mov	r1, r7
 800bde0:	f7f4 fa5c 	bl	800029c <__adddf3>
 800bde4:	4606      	mov	r6, r0
 800bde6:	460f      	mov	r7, r1
 800bde8:	f7f4 febe 	bl	8000b68 <__aeabi_d2iz>
 800bdec:	2200      	movs	r2, #0
 800bdee:	4683      	mov	fp, r0
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	4639      	mov	r1, r7
 800bdf6:	f7f4 fe79 	bl	8000aec <__aeabi_dcmplt>
 800bdfa:	b148      	cbz	r0, 800be10 <_dtoa_r+0x190>
 800bdfc:	4658      	mov	r0, fp
 800bdfe:	f7f4 fb99 	bl	8000534 <__aeabi_i2d>
 800be02:	4632      	mov	r2, r6
 800be04:	463b      	mov	r3, r7
 800be06:	f7f4 fe67 	bl	8000ad8 <__aeabi_dcmpeq>
 800be0a:	b908      	cbnz	r0, 800be10 <_dtoa_r+0x190>
 800be0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be10:	f1bb 0f16 	cmp.w	fp, #22
 800be14:	d857      	bhi.n	800bec6 <_dtoa_r+0x246>
 800be16:	4b5b      	ldr	r3, [pc, #364]	; (800bf84 <_dtoa_r+0x304>)
 800be18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	ec51 0b18 	vmov	r0, r1, d8
 800be24:	f7f4 fe62 	bl	8000aec <__aeabi_dcmplt>
 800be28:	2800      	cmp	r0, #0
 800be2a:	d04e      	beq.n	800beca <_dtoa_r+0x24a>
 800be2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be30:	2300      	movs	r3, #0
 800be32:	930c      	str	r3, [sp, #48]	; 0x30
 800be34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be36:	1b5b      	subs	r3, r3, r5
 800be38:	1e5a      	subs	r2, r3, #1
 800be3a:	bf45      	ittet	mi
 800be3c:	f1c3 0301 	rsbmi	r3, r3, #1
 800be40:	9305      	strmi	r3, [sp, #20]
 800be42:	2300      	movpl	r3, #0
 800be44:	2300      	movmi	r3, #0
 800be46:	9206      	str	r2, [sp, #24]
 800be48:	bf54      	ite	pl
 800be4a:	9305      	strpl	r3, [sp, #20]
 800be4c:	9306      	strmi	r3, [sp, #24]
 800be4e:	f1bb 0f00 	cmp.w	fp, #0
 800be52:	db3c      	blt.n	800bece <_dtoa_r+0x24e>
 800be54:	9b06      	ldr	r3, [sp, #24]
 800be56:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800be5a:	445b      	add	r3, fp
 800be5c:	9306      	str	r3, [sp, #24]
 800be5e:	2300      	movs	r3, #0
 800be60:	9308      	str	r3, [sp, #32]
 800be62:	9b07      	ldr	r3, [sp, #28]
 800be64:	2b09      	cmp	r3, #9
 800be66:	d868      	bhi.n	800bf3a <_dtoa_r+0x2ba>
 800be68:	2b05      	cmp	r3, #5
 800be6a:	bfc4      	itt	gt
 800be6c:	3b04      	subgt	r3, #4
 800be6e:	9307      	strgt	r3, [sp, #28]
 800be70:	9b07      	ldr	r3, [sp, #28]
 800be72:	f1a3 0302 	sub.w	r3, r3, #2
 800be76:	bfcc      	ite	gt
 800be78:	2500      	movgt	r5, #0
 800be7a:	2501      	movle	r5, #1
 800be7c:	2b03      	cmp	r3, #3
 800be7e:	f200 8085 	bhi.w	800bf8c <_dtoa_r+0x30c>
 800be82:	e8df f003 	tbb	[pc, r3]
 800be86:	3b2e      	.short	0x3b2e
 800be88:	5839      	.short	0x5839
 800be8a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800be8e:	441d      	add	r5, r3
 800be90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800be94:	2b20      	cmp	r3, #32
 800be96:	bfc1      	itttt	gt
 800be98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be9c:	fa08 f803 	lslgt.w	r8, r8, r3
 800bea0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bea4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bea8:	bfd6      	itet	le
 800beaa:	f1c3 0320 	rsble	r3, r3, #32
 800beae:	ea48 0003 	orrgt.w	r0, r8, r3
 800beb2:	fa06 f003 	lslle.w	r0, r6, r3
 800beb6:	f7f4 fb2d 	bl	8000514 <__aeabi_ui2d>
 800beba:	2201      	movs	r2, #1
 800bebc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bec0:	3d01      	subs	r5, #1
 800bec2:	920e      	str	r2, [sp, #56]	; 0x38
 800bec4:	e76f      	b.n	800bda6 <_dtoa_r+0x126>
 800bec6:	2301      	movs	r3, #1
 800bec8:	e7b3      	b.n	800be32 <_dtoa_r+0x1b2>
 800beca:	900c      	str	r0, [sp, #48]	; 0x30
 800becc:	e7b2      	b.n	800be34 <_dtoa_r+0x1b4>
 800bece:	9b05      	ldr	r3, [sp, #20]
 800bed0:	eba3 030b 	sub.w	r3, r3, fp
 800bed4:	9305      	str	r3, [sp, #20]
 800bed6:	f1cb 0300 	rsb	r3, fp, #0
 800beda:	9308      	str	r3, [sp, #32]
 800bedc:	2300      	movs	r3, #0
 800bede:	930b      	str	r3, [sp, #44]	; 0x2c
 800bee0:	e7bf      	b.n	800be62 <_dtoa_r+0x1e2>
 800bee2:	2300      	movs	r3, #0
 800bee4:	9309      	str	r3, [sp, #36]	; 0x24
 800bee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bee8:	2b00      	cmp	r3, #0
 800beea:	dc52      	bgt.n	800bf92 <_dtoa_r+0x312>
 800beec:	2301      	movs	r3, #1
 800beee:	9301      	str	r3, [sp, #4]
 800bef0:	9304      	str	r3, [sp, #16]
 800bef2:	461a      	mov	r2, r3
 800bef4:	920a      	str	r2, [sp, #40]	; 0x28
 800bef6:	e00b      	b.n	800bf10 <_dtoa_r+0x290>
 800bef8:	2301      	movs	r3, #1
 800befa:	e7f3      	b.n	800bee4 <_dtoa_r+0x264>
 800befc:	2300      	movs	r3, #0
 800befe:	9309      	str	r3, [sp, #36]	; 0x24
 800bf00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf02:	445b      	add	r3, fp
 800bf04:	9301      	str	r3, [sp, #4]
 800bf06:	3301      	adds	r3, #1
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	9304      	str	r3, [sp, #16]
 800bf0c:	bfb8      	it	lt
 800bf0e:	2301      	movlt	r3, #1
 800bf10:	69e0      	ldr	r0, [r4, #28]
 800bf12:	2100      	movs	r1, #0
 800bf14:	2204      	movs	r2, #4
 800bf16:	f102 0614 	add.w	r6, r2, #20
 800bf1a:	429e      	cmp	r6, r3
 800bf1c:	d93d      	bls.n	800bf9a <_dtoa_r+0x31a>
 800bf1e:	6041      	str	r1, [r0, #4]
 800bf20:	4620      	mov	r0, r4
 800bf22:	f000 fd9f 	bl	800ca64 <_Balloc>
 800bf26:	9000      	str	r0, [sp, #0]
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d139      	bne.n	800bfa0 <_dtoa_r+0x320>
 800bf2c:	4b16      	ldr	r3, [pc, #88]	; (800bf88 <_dtoa_r+0x308>)
 800bf2e:	4602      	mov	r2, r0
 800bf30:	f240 11af 	movw	r1, #431	; 0x1af
 800bf34:	e6bd      	b.n	800bcb2 <_dtoa_r+0x32>
 800bf36:	2301      	movs	r3, #1
 800bf38:	e7e1      	b.n	800befe <_dtoa_r+0x27e>
 800bf3a:	2501      	movs	r5, #1
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	9307      	str	r3, [sp, #28]
 800bf40:	9509      	str	r5, [sp, #36]	; 0x24
 800bf42:	f04f 33ff 	mov.w	r3, #4294967295
 800bf46:	9301      	str	r3, [sp, #4]
 800bf48:	9304      	str	r3, [sp, #16]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	2312      	movs	r3, #18
 800bf4e:	e7d1      	b.n	800bef4 <_dtoa_r+0x274>
 800bf50:	636f4361 	.word	0x636f4361
 800bf54:	3fd287a7 	.word	0x3fd287a7
 800bf58:	8b60c8b3 	.word	0x8b60c8b3
 800bf5c:	3fc68a28 	.word	0x3fc68a28
 800bf60:	509f79fb 	.word	0x509f79fb
 800bf64:	3fd34413 	.word	0x3fd34413
 800bf68:	08010c05 	.word	0x08010c05
 800bf6c:	08010c1c 	.word	0x08010c1c
 800bf70:	7ff00000 	.word	0x7ff00000
 800bf74:	08010c01 	.word	0x08010c01
 800bf78:	08010bf8 	.word	0x08010bf8
 800bf7c:	08010bd5 	.word	0x08010bd5
 800bf80:	3ff80000 	.word	0x3ff80000
 800bf84:	08010d08 	.word	0x08010d08
 800bf88:	08010c74 	.word	0x08010c74
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf90:	e7d7      	b.n	800bf42 <_dtoa_r+0x2c2>
 800bf92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf94:	9301      	str	r3, [sp, #4]
 800bf96:	9304      	str	r3, [sp, #16]
 800bf98:	e7ba      	b.n	800bf10 <_dtoa_r+0x290>
 800bf9a:	3101      	adds	r1, #1
 800bf9c:	0052      	lsls	r2, r2, #1
 800bf9e:	e7ba      	b.n	800bf16 <_dtoa_r+0x296>
 800bfa0:	69e3      	ldr	r3, [r4, #28]
 800bfa2:	9a00      	ldr	r2, [sp, #0]
 800bfa4:	601a      	str	r2, [r3, #0]
 800bfa6:	9b04      	ldr	r3, [sp, #16]
 800bfa8:	2b0e      	cmp	r3, #14
 800bfaa:	f200 80a8 	bhi.w	800c0fe <_dtoa_r+0x47e>
 800bfae:	2d00      	cmp	r5, #0
 800bfb0:	f000 80a5 	beq.w	800c0fe <_dtoa_r+0x47e>
 800bfb4:	f1bb 0f00 	cmp.w	fp, #0
 800bfb8:	dd38      	ble.n	800c02c <_dtoa_r+0x3ac>
 800bfba:	4bc0      	ldr	r3, [pc, #768]	; (800c2bc <_dtoa_r+0x63c>)
 800bfbc:	f00b 020f 	and.w	r2, fp, #15
 800bfc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfc4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bfc8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bfcc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bfd0:	d019      	beq.n	800c006 <_dtoa_r+0x386>
 800bfd2:	4bbb      	ldr	r3, [pc, #748]	; (800c2c0 <_dtoa_r+0x640>)
 800bfd4:	ec51 0b18 	vmov	r0, r1, d8
 800bfd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfdc:	f7f4 fc3e 	bl	800085c <__aeabi_ddiv>
 800bfe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfe4:	f008 080f 	and.w	r8, r8, #15
 800bfe8:	2503      	movs	r5, #3
 800bfea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c2c0 <_dtoa_r+0x640>
 800bfee:	f1b8 0f00 	cmp.w	r8, #0
 800bff2:	d10a      	bne.n	800c00a <_dtoa_r+0x38a>
 800bff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bff8:	4632      	mov	r2, r6
 800bffa:	463b      	mov	r3, r7
 800bffc:	f7f4 fc2e 	bl	800085c <__aeabi_ddiv>
 800c000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c004:	e02b      	b.n	800c05e <_dtoa_r+0x3de>
 800c006:	2502      	movs	r5, #2
 800c008:	e7ef      	b.n	800bfea <_dtoa_r+0x36a>
 800c00a:	f018 0f01 	tst.w	r8, #1
 800c00e:	d008      	beq.n	800c022 <_dtoa_r+0x3a2>
 800c010:	4630      	mov	r0, r6
 800c012:	4639      	mov	r1, r7
 800c014:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c018:	f7f4 faf6 	bl	8000608 <__aeabi_dmul>
 800c01c:	3501      	adds	r5, #1
 800c01e:	4606      	mov	r6, r0
 800c020:	460f      	mov	r7, r1
 800c022:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c026:	f109 0908 	add.w	r9, r9, #8
 800c02a:	e7e0      	b.n	800bfee <_dtoa_r+0x36e>
 800c02c:	f000 809f 	beq.w	800c16e <_dtoa_r+0x4ee>
 800c030:	f1cb 0600 	rsb	r6, fp, #0
 800c034:	4ba1      	ldr	r3, [pc, #644]	; (800c2bc <_dtoa_r+0x63c>)
 800c036:	4fa2      	ldr	r7, [pc, #648]	; (800c2c0 <_dtoa_r+0x640>)
 800c038:	f006 020f 	and.w	r2, r6, #15
 800c03c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	ec51 0b18 	vmov	r0, r1, d8
 800c048:	f7f4 fade 	bl	8000608 <__aeabi_dmul>
 800c04c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c050:	1136      	asrs	r6, r6, #4
 800c052:	2300      	movs	r3, #0
 800c054:	2502      	movs	r5, #2
 800c056:	2e00      	cmp	r6, #0
 800c058:	d17e      	bne.n	800c158 <_dtoa_r+0x4d8>
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1d0      	bne.n	800c000 <_dtoa_r+0x380>
 800c05e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c060:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c064:	2b00      	cmp	r3, #0
 800c066:	f000 8084 	beq.w	800c172 <_dtoa_r+0x4f2>
 800c06a:	4b96      	ldr	r3, [pc, #600]	; (800c2c4 <_dtoa_r+0x644>)
 800c06c:	2200      	movs	r2, #0
 800c06e:	4640      	mov	r0, r8
 800c070:	4649      	mov	r1, r9
 800c072:	f7f4 fd3b 	bl	8000aec <__aeabi_dcmplt>
 800c076:	2800      	cmp	r0, #0
 800c078:	d07b      	beq.n	800c172 <_dtoa_r+0x4f2>
 800c07a:	9b04      	ldr	r3, [sp, #16]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d078      	beq.n	800c172 <_dtoa_r+0x4f2>
 800c080:	9b01      	ldr	r3, [sp, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	dd39      	ble.n	800c0fa <_dtoa_r+0x47a>
 800c086:	4b90      	ldr	r3, [pc, #576]	; (800c2c8 <_dtoa_r+0x648>)
 800c088:	2200      	movs	r2, #0
 800c08a:	4640      	mov	r0, r8
 800c08c:	4649      	mov	r1, r9
 800c08e:	f7f4 fabb 	bl	8000608 <__aeabi_dmul>
 800c092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c096:	9e01      	ldr	r6, [sp, #4]
 800c098:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c09c:	3501      	adds	r5, #1
 800c09e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	f7f4 fa46 	bl	8000534 <__aeabi_i2d>
 800c0a8:	4642      	mov	r2, r8
 800c0aa:	464b      	mov	r3, r9
 800c0ac:	f7f4 faac 	bl	8000608 <__aeabi_dmul>
 800c0b0:	4b86      	ldr	r3, [pc, #536]	; (800c2cc <_dtoa_r+0x64c>)
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f7f4 f8f2 	bl	800029c <__adddf3>
 800c0b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c0bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0c0:	9303      	str	r3, [sp, #12]
 800c0c2:	2e00      	cmp	r6, #0
 800c0c4:	d158      	bne.n	800c178 <_dtoa_r+0x4f8>
 800c0c6:	4b82      	ldr	r3, [pc, #520]	; (800c2d0 <_dtoa_r+0x650>)
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	4640      	mov	r0, r8
 800c0cc:	4649      	mov	r1, r9
 800c0ce:	f7f4 f8e3 	bl	8000298 <__aeabi_dsub>
 800c0d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0d6:	4680      	mov	r8, r0
 800c0d8:	4689      	mov	r9, r1
 800c0da:	f7f4 fd25 	bl	8000b28 <__aeabi_dcmpgt>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f040 8296 	bne.w	800c610 <_dtoa_r+0x990>
 800c0e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c0e8:	4640      	mov	r0, r8
 800c0ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0ee:	4649      	mov	r1, r9
 800c0f0:	f7f4 fcfc 	bl	8000aec <__aeabi_dcmplt>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	f040 8289 	bne.w	800c60c <_dtoa_r+0x98c>
 800c0fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c0fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c100:	2b00      	cmp	r3, #0
 800c102:	f2c0 814e 	blt.w	800c3a2 <_dtoa_r+0x722>
 800c106:	f1bb 0f0e 	cmp.w	fp, #14
 800c10a:	f300 814a 	bgt.w	800c3a2 <_dtoa_r+0x722>
 800c10e:	4b6b      	ldr	r3, [pc, #428]	; (800c2bc <_dtoa_r+0x63c>)
 800c110:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c114:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f280 80dc 	bge.w	800c2d8 <_dtoa_r+0x658>
 800c120:	9b04      	ldr	r3, [sp, #16]
 800c122:	2b00      	cmp	r3, #0
 800c124:	f300 80d8 	bgt.w	800c2d8 <_dtoa_r+0x658>
 800c128:	f040 826f 	bne.w	800c60a <_dtoa_r+0x98a>
 800c12c:	4b68      	ldr	r3, [pc, #416]	; (800c2d0 <_dtoa_r+0x650>)
 800c12e:	2200      	movs	r2, #0
 800c130:	4640      	mov	r0, r8
 800c132:	4649      	mov	r1, r9
 800c134:	f7f4 fa68 	bl	8000608 <__aeabi_dmul>
 800c138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c13c:	f7f4 fcea 	bl	8000b14 <__aeabi_dcmpge>
 800c140:	9e04      	ldr	r6, [sp, #16]
 800c142:	4637      	mov	r7, r6
 800c144:	2800      	cmp	r0, #0
 800c146:	f040 8245 	bne.w	800c5d4 <_dtoa_r+0x954>
 800c14a:	9d00      	ldr	r5, [sp, #0]
 800c14c:	2331      	movs	r3, #49	; 0x31
 800c14e:	f805 3b01 	strb.w	r3, [r5], #1
 800c152:	f10b 0b01 	add.w	fp, fp, #1
 800c156:	e241      	b.n	800c5dc <_dtoa_r+0x95c>
 800c158:	07f2      	lsls	r2, r6, #31
 800c15a:	d505      	bpl.n	800c168 <_dtoa_r+0x4e8>
 800c15c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c160:	f7f4 fa52 	bl	8000608 <__aeabi_dmul>
 800c164:	3501      	adds	r5, #1
 800c166:	2301      	movs	r3, #1
 800c168:	1076      	asrs	r6, r6, #1
 800c16a:	3708      	adds	r7, #8
 800c16c:	e773      	b.n	800c056 <_dtoa_r+0x3d6>
 800c16e:	2502      	movs	r5, #2
 800c170:	e775      	b.n	800c05e <_dtoa_r+0x3de>
 800c172:	9e04      	ldr	r6, [sp, #16]
 800c174:	465f      	mov	r7, fp
 800c176:	e792      	b.n	800c09e <_dtoa_r+0x41e>
 800c178:	9900      	ldr	r1, [sp, #0]
 800c17a:	4b50      	ldr	r3, [pc, #320]	; (800c2bc <_dtoa_r+0x63c>)
 800c17c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c180:	4431      	add	r1, r6
 800c182:	9102      	str	r1, [sp, #8]
 800c184:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c186:	eeb0 9a47 	vmov.f32	s18, s14
 800c18a:	eef0 9a67 	vmov.f32	s19, s15
 800c18e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c192:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c196:	2900      	cmp	r1, #0
 800c198:	d044      	beq.n	800c224 <_dtoa_r+0x5a4>
 800c19a:	494e      	ldr	r1, [pc, #312]	; (800c2d4 <_dtoa_r+0x654>)
 800c19c:	2000      	movs	r0, #0
 800c19e:	f7f4 fb5d 	bl	800085c <__aeabi_ddiv>
 800c1a2:	ec53 2b19 	vmov	r2, r3, d9
 800c1a6:	f7f4 f877 	bl	8000298 <__aeabi_dsub>
 800c1aa:	9d00      	ldr	r5, [sp, #0]
 800c1ac:	ec41 0b19 	vmov	d9, r0, r1
 800c1b0:	4649      	mov	r1, r9
 800c1b2:	4640      	mov	r0, r8
 800c1b4:	f7f4 fcd8 	bl	8000b68 <__aeabi_d2iz>
 800c1b8:	4606      	mov	r6, r0
 800c1ba:	f7f4 f9bb 	bl	8000534 <__aeabi_i2d>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	4649      	mov	r1, r9
 800c1c6:	f7f4 f867 	bl	8000298 <__aeabi_dsub>
 800c1ca:	3630      	adds	r6, #48	; 0x30
 800c1cc:	f805 6b01 	strb.w	r6, [r5], #1
 800c1d0:	ec53 2b19 	vmov	r2, r3, d9
 800c1d4:	4680      	mov	r8, r0
 800c1d6:	4689      	mov	r9, r1
 800c1d8:	f7f4 fc88 	bl	8000aec <__aeabi_dcmplt>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d164      	bne.n	800c2aa <_dtoa_r+0x62a>
 800c1e0:	4642      	mov	r2, r8
 800c1e2:	464b      	mov	r3, r9
 800c1e4:	4937      	ldr	r1, [pc, #220]	; (800c2c4 <_dtoa_r+0x644>)
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	f7f4 f856 	bl	8000298 <__aeabi_dsub>
 800c1ec:	ec53 2b19 	vmov	r2, r3, d9
 800c1f0:	f7f4 fc7c 	bl	8000aec <__aeabi_dcmplt>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	f040 80b6 	bne.w	800c366 <_dtoa_r+0x6e6>
 800c1fa:	9b02      	ldr	r3, [sp, #8]
 800c1fc:	429d      	cmp	r5, r3
 800c1fe:	f43f af7c 	beq.w	800c0fa <_dtoa_r+0x47a>
 800c202:	4b31      	ldr	r3, [pc, #196]	; (800c2c8 <_dtoa_r+0x648>)
 800c204:	ec51 0b19 	vmov	r0, r1, d9
 800c208:	2200      	movs	r2, #0
 800c20a:	f7f4 f9fd 	bl	8000608 <__aeabi_dmul>
 800c20e:	4b2e      	ldr	r3, [pc, #184]	; (800c2c8 <_dtoa_r+0x648>)
 800c210:	ec41 0b19 	vmov	d9, r0, r1
 800c214:	2200      	movs	r2, #0
 800c216:	4640      	mov	r0, r8
 800c218:	4649      	mov	r1, r9
 800c21a:	f7f4 f9f5 	bl	8000608 <__aeabi_dmul>
 800c21e:	4680      	mov	r8, r0
 800c220:	4689      	mov	r9, r1
 800c222:	e7c5      	b.n	800c1b0 <_dtoa_r+0x530>
 800c224:	ec51 0b17 	vmov	r0, r1, d7
 800c228:	f7f4 f9ee 	bl	8000608 <__aeabi_dmul>
 800c22c:	9b02      	ldr	r3, [sp, #8]
 800c22e:	9d00      	ldr	r5, [sp, #0]
 800c230:	930f      	str	r3, [sp, #60]	; 0x3c
 800c232:	ec41 0b19 	vmov	d9, r0, r1
 800c236:	4649      	mov	r1, r9
 800c238:	4640      	mov	r0, r8
 800c23a:	f7f4 fc95 	bl	8000b68 <__aeabi_d2iz>
 800c23e:	4606      	mov	r6, r0
 800c240:	f7f4 f978 	bl	8000534 <__aeabi_i2d>
 800c244:	3630      	adds	r6, #48	; 0x30
 800c246:	4602      	mov	r2, r0
 800c248:	460b      	mov	r3, r1
 800c24a:	4640      	mov	r0, r8
 800c24c:	4649      	mov	r1, r9
 800c24e:	f7f4 f823 	bl	8000298 <__aeabi_dsub>
 800c252:	f805 6b01 	strb.w	r6, [r5], #1
 800c256:	9b02      	ldr	r3, [sp, #8]
 800c258:	429d      	cmp	r5, r3
 800c25a:	4680      	mov	r8, r0
 800c25c:	4689      	mov	r9, r1
 800c25e:	f04f 0200 	mov.w	r2, #0
 800c262:	d124      	bne.n	800c2ae <_dtoa_r+0x62e>
 800c264:	4b1b      	ldr	r3, [pc, #108]	; (800c2d4 <_dtoa_r+0x654>)
 800c266:	ec51 0b19 	vmov	r0, r1, d9
 800c26a:	f7f4 f817 	bl	800029c <__adddf3>
 800c26e:	4602      	mov	r2, r0
 800c270:	460b      	mov	r3, r1
 800c272:	4640      	mov	r0, r8
 800c274:	4649      	mov	r1, r9
 800c276:	f7f4 fc57 	bl	8000b28 <__aeabi_dcmpgt>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d173      	bne.n	800c366 <_dtoa_r+0x6e6>
 800c27e:	ec53 2b19 	vmov	r2, r3, d9
 800c282:	4914      	ldr	r1, [pc, #80]	; (800c2d4 <_dtoa_r+0x654>)
 800c284:	2000      	movs	r0, #0
 800c286:	f7f4 f807 	bl	8000298 <__aeabi_dsub>
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	4640      	mov	r0, r8
 800c290:	4649      	mov	r1, r9
 800c292:	f7f4 fc2b 	bl	8000aec <__aeabi_dcmplt>
 800c296:	2800      	cmp	r0, #0
 800c298:	f43f af2f 	beq.w	800c0fa <_dtoa_r+0x47a>
 800c29c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c29e:	1e6b      	subs	r3, r5, #1
 800c2a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2a6:	2b30      	cmp	r3, #48	; 0x30
 800c2a8:	d0f8      	beq.n	800c29c <_dtoa_r+0x61c>
 800c2aa:	46bb      	mov	fp, r7
 800c2ac:	e04a      	b.n	800c344 <_dtoa_r+0x6c4>
 800c2ae:	4b06      	ldr	r3, [pc, #24]	; (800c2c8 <_dtoa_r+0x648>)
 800c2b0:	f7f4 f9aa 	bl	8000608 <__aeabi_dmul>
 800c2b4:	4680      	mov	r8, r0
 800c2b6:	4689      	mov	r9, r1
 800c2b8:	e7bd      	b.n	800c236 <_dtoa_r+0x5b6>
 800c2ba:	bf00      	nop
 800c2bc:	08010d08 	.word	0x08010d08
 800c2c0:	08010ce0 	.word	0x08010ce0
 800c2c4:	3ff00000 	.word	0x3ff00000
 800c2c8:	40240000 	.word	0x40240000
 800c2cc:	401c0000 	.word	0x401c0000
 800c2d0:	40140000 	.word	0x40140000
 800c2d4:	3fe00000 	.word	0x3fe00000
 800c2d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c2dc:	9d00      	ldr	r5, [sp, #0]
 800c2de:	4642      	mov	r2, r8
 800c2e0:	464b      	mov	r3, r9
 800c2e2:	4630      	mov	r0, r6
 800c2e4:	4639      	mov	r1, r7
 800c2e6:	f7f4 fab9 	bl	800085c <__aeabi_ddiv>
 800c2ea:	f7f4 fc3d 	bl	8000b68 <__aeabi_d2iz>
 800c2ee:	9001      	str	r0, [sp, #4]
 800c2f0:	f7f4 f920 	bl	8000534 <__aeabi_i2d>
 800c2f4:	4642      	mov	r2, r8
 800c2f6:	464b      	mov	r3, r9
 800c2f8:	f7f4 f986 	bl	8000608 <__aeabi_dmul>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	4630      	mov	r0, r6
 800c302:	4639      	mov	r1, r7
 800c304:	f7f3 ffc8 	bl	8000298 <__aeabi_dsub>
 800c308:	9e01      	ldr	r6, [sp, #4]
 800c30a:	9f04      	ldr	r7, [sp, #16]
 800c30c:	3630      	adds	r6, #48	; 0x30
 800c30e:	f805 6b01 	strb.w	r6, [r5], #1
 800c312:	9e00      	ldr	r6, [sp, #0]
 800c314:	1bae      	subs	r6, r5, r6
 800c316:	42b7      	cmp	r7, r6
 800c318:	4602      	mov	r2, r0
 800c31a:	460b      	mov	r3, r1
 800c31c:	d134      	bne.n	800c388 <_dtoa_r+0x708>
 800c31e:	f7f3 ffbd 	bl	800029c <__adddf3>
 800c322:	4642      	mov	r2, r8
 800c324:	464b      	mov	r3, r9
 800c326:	4606      	mov	r6, r0
 800c328:	460f      	mov	r7, r1
 800c32a:	f7f4 fbfd 	bl	8000b28 <__aeabi_dcmpgt>
 800c32e:	b9c8      	cbnz	r0, 800c364 <_dtoa_r+0x6e4>
 800c330:	4642      	mov	r2, r8
 800c332:	464b      	mov	r3, r9
 800c334:	4630      	mov	r0, r6
 800c336:	4639      	mov	r1, r7
 800c338:	f7f4 fbce 	bl	8000ad8 <__aeabi_dcmpeq>
 800c33c:	b110      	cbz	r0, 800c344 <_dtoa_r+0x6c4>
 800c33e:	9b01      	ldr	r3, [sp, #4]
 800c340:	07db      	lsls	r3, r3, #31
 800c342:	d40f      	bmi.n	800c364 <_dtoa_r+0x6e4>
 800c344:	4651      	mov	r1, sl
 800c346:	4620      	mov	r0, r4
 800c348:	f000 fbcc 	bl	800cae4 <_Bfree>
 800c34c:	2300      	movs	r3, #0
 800c34e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c350:	702b      	strb	r3, [r5, #0]
 800c352:	f10b 0301 	add.w	r3, fp, #1
 800c356:	6013      	str	r3, [r2, #0]
 800c358:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f43f ace2 	beq.w	800bd24 <_dtoa_r+0xa4>
 800c360:	601d      	str	r5, [r3, #0]
 800c362:	e4df      	b.n	800bd24 <_dtoa_r+0xa4>
 800c364:	465f      	mov	r7, fp
 800c366:	462b      	mov	r3, r5
 800c368:	461d      	mov	r5, r3
 800c36a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c36e:	2a39      	cmp	r2, #57	; 0x39
 800c370:	d106      	bne.n	800c380 <_dtoa_r+0x700>
 800c372:	9a00      	ldr	r2, [sp, #0]
 800c374:	429a      	cmp	r2, r3
 800c376:	d1f7      	bne.n	800c368 <_dtoa_r+0x6e8>
 800c378:	9900      	ldr	r1, [sp, #0]
 800c37a:	2230      	movs	r2, #48	; 0x30
 800c37c:	3701      	adds	r7, #1
 800c37e:	700a      	strb	r2, [r1, #0]
 800c380:	781a      	ldrb	r2, [r3, #0]
 800c382:	3201      	adds	r2, #1
 800c384:	701a      	strb	r2, [r3, #0]
 800c386:	e790      	b.n	800c2aa <_dtoa_r+0x62a>
 800c388:	4ba3      	ldr	r3, [pc, #652]	; (800c618 <_dtoa_r+0x998>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	f7f4 f93c 	bl	8000608 <__aeabi_dmul>
 800c390:	2200      	movs	r2, #0
 800c392:	2300      	movs	r3, #0
 800c394:	4606      	mov	r6, r0
 800c396:	460f      	mov	r7, r1
 800c398:	f7f4 fb9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c39c:	2800      	cmp	r0, #0
 800c39e:	d09e      	beq.n	800c2de <_dtoa_r+0x65e>
 800c3a0:	e7d0      	b.n	800c344 <_dtoa_r+0x6c4>
 800c3a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3a4:	2a00      	cmp	r2, #0
 800c3a6:	f000 80ca 	beq.w	800c53e <_dtoa_r+0x8be>
 800c3aa:	9a07      	ldr	r2, [sp, #28]
 800c3ac:	2a01      	cmp	r2, #1
 800c3ae:	f300 80ad 	bgt.w	800c50c <_dtoa_r+0x88c>
 800c3b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3b4:	2a00      	cmp	r2, #0
 800c3b6:	f000 80a5 	beq.w	800c504 <_dtoa_r+0x884>
 800c3ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3be:	9e08      	ldr	r6, [sp, #32]
 800c3c0:	9d05      	ldr	r5, [sp, #20]
 800c3c2:	9a05      	ldr	r2, [sp, #20]
 800c3c4:	441a      	add	r2, r3
 800c3c6:	9205      	str	r2, [sp, #20]
 800c3c8:	9a06      	ldr	r2, [sp, #24]
 800c3ca:	2101      	movs	r1, #1
 800c3cc:	441a      	add	r2, r3
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	9206      	str	r2, [sp, #24]
 800c3d2:	f000 fc3d 	bl	800cc50 <__i2b>
 800c3d6:	4607      	mov	r7, r0
 800c3d8:	b165      	cbz	r5, 800c3f4 <_dtoa_r+0x774>
 800c3da:	9b06      	ldr	r3, [sp, #24]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dd09      	ble.n	800c3f4 <_dtoa_r+0x774>
 800c3e0:	42ab      	cmp	r3, r5
 800c3e2:	9a05      	ldr	r2, [sp, #20]
 800c3e4:	bfa8      	it	ge
 800c3e6:	462b      	movge	r3, r5
 800c3e8:	1ad2      	subs	r2, r2, r3
 800c3ea:	9205      	str	r2, [sp, #20]
 800c3ec:	9a06      	ldr	r2, [sp, #24]
 800c3ee:	1aed      	subs	r5, r5, r3
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	9306      	str	r3, [sp, #24]
 800c3f4:	9b08      	ldr	r3, [sp, #32]
 800c3f6:	b1f3      	cbz	r3, 800c436 <_dtoa_r+0x7b6>
 800c3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f000 80a3 	beq.w	800c546 <_dtoa_r+0x8c6>
 800c400:	2e00      	cmp	r6, #0
 800c402:	dd10      	ble.n	800c426 <_dtoa_r+0x7a6>
 800c404:	4639      	mov	r1, r7
 800c406:	4632      	mov	r2, r6
 800c408:	4620      	mov	r0, r4
 800c40a:	f000 fce1 	bl	800cdd0 <__pow5mult>
 800c40e:	4652      	mov	r2, sl
 800c410:	4601      	mov	r1, r0
 800c412:	4607      	mov	r7, r0
 800c414:	4620      	mov	r0, r4
 800c416:	f000 fc31 	bl	800cc7c <__multiply>
 800c41a:	4651      	mov	r1, sl
 800c41c:	4680      	mov	r8, r0
 800c41e:	4620      	mov	r0, r4
 800c420:	f000 fb60 	bl	800cae4 <_Bfree>
 800c424:	46c2      	mov	sl, r8
 800c426:	9b08      	ldr	r3, [sp, #32]
 800c428:	1b9a      	subs	r2, r3, r6
 800c42a:	d004      	beq.n	800c436 <_dtoa_r+0x7b6>
 800c42c:	4651      	mov	r1, sl
 800c42e:	4620      	mov	r0, r4
 800c430:	f000 fcce 	bl	800cdd0 <__pow5mult>
 800c434:	4682      	mov	sl, r0
 800c436:	2101      	movs	r1, #1
 800c438:	4620      	mov	r0, r4
 800c43a:	f000 fc09 	bl	800cc50 <__i2b>
 800c43e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c440:	2b00      	cmp	r3, #0
 800c442:	4606      	mov	r6, r0
 800c444:	f340 8081 	ble.w	800c54a <_dtoa_r+0x8ca>
 800c448:	461a      	mov	r2, r3
 800c44a:	4601      	mov	r1, r0
 800c44c:	4620      	mov	r0, r4
 800c44e:	f000 fcbf 	bl	800cdd0 <__pow5mult>
 800c452:	9b07      	ldr	r3, [sp, #28]
 800c454:	2b01      	cmp	r3, #1
 800c456:	4606      	mov	r6, r0
 800c458:	dd7a      	ble.n	800c550 <_dtoa_r+0x8d0>
 800c45a:	f04f 0800 	mov.w	r8, #0
 800c45e:	6933      	ldr	r3, [r6, #16]
 800c460:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c464:	6918      	ldr	r0, [r3, #16]
 800c466:	f000 fba5 	bl	800cbb4 <__hi0bits>
 800c46a:	f1c0 0020 	rsb	r0, r0, #32
 800c46e:	9b06      	ldr	r3, [sp, #24]
 800c470:	4418      	add	r0, r3
 800c472:	f010 001f 	ands.w	r0, r0, #31
 800c476:	f000 8094 	beq.w	800c5a2 <_dtoa_r+0x922>
 800c47a:	f1c0 0320 	rsb	r3, r0, #32
 800c47e:	2b04      	cmp	r3, #4
 800c480:	f340 8085 	ble.w	800c58e <_dtoa_r+0x90e>
 800c484:	9b05      	ldr	r3, [sp, #20]
 800c486:	f1c0 001c 	rsb	r0, r0, #28
 800c48a:	4403      	add	r3, r0
 800c48c:	9305      	str	r3, [sp, #20]
 800c48e:	9b06      	ldr	r3, [sp, #24]
 800c490:	4403      	add	r3, r0
 800c492:	4405      	add	r5, r0
 800c494:	9306      	str	r3, [sp, #24]
 800c496:	9b05      	ldr	r3, [sp, #20]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	dd05      	ble.n	800c4a8 <_dtoa_r+0x828>
 800c49c:	4651      	mov	r1, sl
 800c49e:	461a      	mov	r2, r3
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	f000 fcef 	bl	800ce84 <__lshift>
 800c4a6:	4682      	mov	sl, r0
 800c4a8:	9b06      	ldr	r3, [sp, #24]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	dd05      	ble.n	800c4ba <_dtoa_r+0x83a>
 800c4ae:	4631      	mov	r1, r6
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	f000 fce6 	bl	800ce84 <__lshift>
 800c4b8:	4606      	mov	r6, r0
 800c4ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d072      	beq.n	800c5a6 <_dtoa_r+0x926>
 800c4c0:	4631      	mov	r1, r6
 800c4c2:	4650      	mov	r0, sl
 800c4c4:	f000 fd4a 	bl	800cf5c <__mcmp>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	da6c      	bge.n	800c5a6 <_dtoa_r+0x926>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	4651      	mov	r1, sl
 800c4d0:	220a      	movs	r2, #10
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f000 fb28 	bl	800cb28 <__multadd>
 800c4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4de:	4682      	mov	sl, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f000 81b0 	beq.w	800c846 <_dtoa_r+0xbc6>
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	4639      	mov	r1, r7
 800c4ea:	220a      	movs	r2, #10
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	f000 fb1b 	bl	800cb28 <__multadd>
 800c4f2:	9b01      	ldr	r3, [sp, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	4607      	mov	r7, r0
 800c4f8:	f300 8096 	bgt.w	800c628 <_dtoa_r+0x9a8>
 800c4fc:	9b07      	ldr	r3, [sp, #28]
 800c4fe:	2b02      	cmp	r3, #2
 800c500:	dc59      	bgt.n	800c5b6 <_dtoa_r+0x936>
 800c502:	e091      	b.n	800c628 <_dtoa_r+0x9a8>
 800c504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c506:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c50a:	e758      	b.n	800c3be <_dtoa_r+0x73e>
 800c50c:	9b04      	ldr	r3, [sp, #16]
 800c50e:	1e5e      	subs	r6, r3, #1
 800c510:	9b08      	ldr	r3, [sp, #32]
 800c512:	42b3      	cmp	r3, r6
 800c514:	bfbf      	itttt	lt
 800c516:	9b08      	ldrlt	r3, [sp, #32]
 800c518:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c51a:	9608      	strlt	r6, [sp, #32]
 800c51c:	1af3      	sublt	r3, r6, r3
 800c51e:	bfb4      	ite	lt
 800c520:	18d2      	addlt	r2, r2, r3
 800c522:	1b9e      	subge	r6, r3, r6
 800c524:	9b04      	ldr	r3, [sp, #16]
 800c526:	bfbc      	itt	lt
 800c528:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c52a:	2600      	movlt	r6, #0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	bfb7      	itett	lt
 800c530:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c534:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c538:	1a9d      	sublt	r5, r3, r2
 800c53a:	2300      	movlt	r3, #0
 800c53c:	e741      	b.n	800c3c2 <_dtoa_r+0x742>
 800c53e:	9e08      	ldr	r6, [sp, #32]
 800c540:	9d05      	ldr	r5, [sp, #20]
 800c542:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c544:	e748      	b.n	800c3d8 <_dtoa_r+0x758>
 800c546:	9a08      	ldr	r2, [sp, #32]
 800c548:	e770      	b.n	800c42c <_dtoa_r+0x7ac>
 800c54a:	9b07      	ldr	r3, [sp, #28]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	dc19      	bgt.n	800c584 <_dtoa_r+0x904>
 800c550:	9b02      	ldr	r3, [sp, #8]
 800c552:	b9bb      	cbnz	r3, 800c584 <_dtoa_r+0x904>
 800c554:	9b03      	ldr	r3, [sp, #12]
 800c556:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c55a:	b99b      	cbnz	r3, 800c584 <_dtoa_r+0x904>
 800c55c:	9b03      	ldr	r3, [sp, #12]
 800c55e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c562:	0d1b      	lsrs	r3, r3, #20
 800c564:	051b      	lsls	r3, r3, #20
 800c566:	b183      	cbz	r3, 800c58a <_dtoa_r+0x90a>
 800c568:	9b05      	ldr	r3, [sp, #20]
 800c56a:	3301      	adds	r3, #1
 800c56c:	9305      	str	r3, [sp, #20]
 800c56e:	9b06      	ldr	r3, [sp, #24]
 800c570:	3301      	adds	r3, #1
 800c572:	9306      	str	r3, [sp, #24]
 800c574:	f04f 0801 	mov.w	r8, #1
 800c578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f47f af6f 	bne.w	800c45e <_dtoa_r+0x7de>
 800c580:	2001      	movs	r0, #1
 800c582:	e774      	b.n	800c46e <_dtoa_r+0x7ee>
 800c584:	f04f 0800 	mov.w	r8, #0
 800c588:	e7f6      	b.n	800c578 <_dtoa_r+0x8f8>
 800c58a:	4698      	mov	r8, r3
 800c58c:	e7f4      	b.n	800c578 <_dtoa_r+0x8f8>
 800c58e:	d082      	beq.n	800c496 <_dtoa_r+0x816>
 800c590:	9a05      	ldr	r2, [sp, #20]
 800c592:	331c      	adds	r3, #28
 800c594:	441a      	add	r2, r3
 800c596:	9205      	str	r2, [sp, #20]
 800c598:	9a06      	ldr	r2, [sp, #24]
 800c59a:	441a      	add	r2, r3
 800c59c:	441d      	add	r5, r3
 800c59e:	9206      	str	r2, [sp, #24]
 800c5a0:	e779      	b.n	800c496 <_dtoa_r+0x816>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	e7f4      	b.n	800c590 <_dtoa_r+0x910>
 800c5a6:	9b04      	ldr	r3, [sp, #16]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	dc37      	bgt.n	800c61c <_dtoa_r+0x99c>
 800c5ac:	9b07      	ldr	r3, [sp, #28]
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	dd34      	ble.n	800c61c <_dtoa_r+0x99c>
 800c5b2:	9b04      	ldr	r3, [sp, #16]
 800c5b4:	9301      	str	r3, [sp, #4]
 800c5b6:	9b01      	ldr	r3, [sp, #4]
 800c5b8:	b963      	cbnz	r3, 800c5d4 <_dtoa_r+0x954>
 800c5ba:	4631      	mov	r1, r6
 800c5bc:	2205      	movs	r2, #5
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f000 fab2 	bl	800cb28 <__multadd>
 800c5c4:	4601      	mov	r1, r0
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	4650      	mov	r0, sl
 800c5ca:	f000 fcc7 	bl	800cf5c <__mcmp>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	f73f adbb 	bgt.w	800c14a <_dtoa_r+0x4ca>
 800c5d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5d6:	9d00      	ldr	r5, [sp, #0]
 800c5d8:	ea6f 0b03 	mvn.w	fp, r3
 800c5dc:	f04f 0800 	mov.w	r8, #0
 800c5e0:	4631      	mov	r1, r6
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 fa7e 	bl	800cae4 <_Bfree>
 800c5e8:	2f00      	cmp	r7, #0
 800c5ea:	f43f aeab 	beq.w	800c344 <_dtoa_r+0x6c4>
 800c5ee:	f1b8 0f00 	cmp.w	r8, #0
 800c5f2:	d005      	beq.n	800c600 <_dtoa_r+0x980>
 800c5f4:	45b8      	cmp	r8, r7
 800c5f6:	d003      	beq.n	800c600 <_dtoa_r+0x980>
 800c5f8:	4641      	mov	r1, r8
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f000 fa72 	bl	800cae4 <_Bfree>
 800c600:	4639      	mov	r1, r7
 800c602:	4620      	mov	r0, r4
 800c604:	f000 fa6e 	bl	800cae4 <_Bfree>
 800c608:	e69c      	b.n	800c344 <_dtoa_r+0x6c4>
 800c60a:	2600      	movs	r6, #0
 800c60c:	4637      	mov	r7, r6
 800c60e:	e7e1      	b.n	800c5d4 <_dtoa_r+0x954>
 800c610:	46bb      	mov	fp, r7
 800c612:	4637      	mov	r7, r6
 800c614:	e599      	b.n	800c14a <_dtoa_r+0x4ca>
 800c616:	bf00      	nop
 800c618:	40240000 	.word	0x40240000
 800c61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f000 80c8 	beq.w	800c7b4 <_dtoa_r+0xb34>
 800c624:	9b04      	ldr	r3, [sp, #16]
 800c626:	9301      	str	r3, [sp, #4]
 800c628:	2d00      	cmp	r5, #0
 800c62a:	dd05      	ble.n	800c638 <_dtoa_r+0x9b8>
 800c62c:	4639      	mov	r1, r7
 800c62e:	462a      	mov	r2, r5
 800c630:	4620      	mov	r0, r4
 800c632:	f000 fc27 	bl	800ce84 <__lshift>
 800c636:	4607      	mov	r7, r0
 800c638:	f1b8 0f00 	cmp.w	r8, #0
 800c63c:	d05b      	beq.n	800c6f6 <_dtoa_r+0xa76>
 800c63e:	6879      	ldr	r1, [r7, #4]
 800c640:	4620      	mov	r0, r4
 800c642:	f000 fa0f 	bl	800ca64 <_Balloc>
 800c646:	4605      	mov	r5, r0
 800c648:	b928      	cbnz	r0, 800c656 <_dtoa_r+0x9d6>
 800c64a:	4b83      	ldr	r3, [pc, #524]	; (800c858 <_dtoa_r+0xbd8>)
 800c64c:	4602      	mov	r2, r0
 800c64e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c652:	f7ff bb2e 	b.w	800bcb2 <_dtoa_r+0x32>
 800c656:	693a      	ldr	r2, [r7, #16]
 800c658:	3202      	adds	r2, #2
 800c65a:	0092      	lsls	r2, r2, #2
 800c65c:	f107 010c 	add.w	r1, r7, #12
 800c660:	300c      	adds	r0, #12
 800c662:	f7ff fa74 	bl	800bb4e <memcpy>
 800c666:	2201      	movs	r2, #1
 800c668:	4629      	mov	r1, r5
 800c66a:	4620      	mov	r0, r4
 800c66c:	f000 fc0a 	bl	800ce84 <__lshift>
 800c670:	9b00      	ldr	r3, [sp, #0]
 800c672:	3301      	adds	r3, #1
 800c674:	9304      	str	r3, [sp, #16]
 800c676:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c67a:	4413      	add	r3, r2
 800c67c:	9308      	str	r3, [sp, #32]
 800c67e:	9b02      	ldr	r3, [sp, #8]
 800c680:	f003 0301 	and.w	r3, r3, #1
 800c684:	46b8      	mov	r8, r7
 800c686:	9306      	str	r3, [sp, #24]
 800c688:	4607      	mov	r7, r0
 800c68a:	9b04      	ldr	r3, [sp, #16]
 800c68c:	4631      	mov	r1, r6
 800c68e:	3b01      	subs	r3, #1
 800c690:	4650      	mov	r0, sl
 800c692:	9301      	str	r3, [sp, #4]
 800c694:	f7ff fa69 	bl	800bb6a <quorem>
 800c698:	4641      	mov	r1, r8
 800c69a:	9002      	str	r0, [sp, #8]
 800c69c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c6a0:	4650      	mov	r0, sl
 800c6a2:	f000 fc5b 	bl	800cf5c <__mcmp>
 800c6a6:	463a      	mov	r2, r7
 800c6a8:	9005      	str	r0, [sp, #20]
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	f000 fc71 	bl	800cf94 <__mdiff>
 800c6b2:	68c2      	ldr	r2, [r0, #12]
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	bb02      	cbnz	r2, 800c6fa <_dtoa_r+0xa7a>
 800c6b8:	4601      	mov	r1, r0
 800c6ba:	4650      	mov	r0, sl
 800c6bc:	f000 fc4e 	bl	800cf5c <__mcmp>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	4629      	mov	r1, r5
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	9209      	str	r2, [sp, #36]	; 0x24
 800c6c8:	f000 fa0c 	bl	800cae4 <_Bfree>
 800c6cc:	9b07      	ldr	r3, [sp, #28]
 800c6ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6d0:	9d04      	ldr	r5, [sp, #16]
 800c6d2:	ea43 0102 	orr.w	r1, r3, r2
 800c6d6:	9b06      	ldr	r3, [sp, #24]
 800c6d8:	4319      	orrs	r1, r3
 800c6da:	d110      	bne.n	800c6fe <_dtoa_r+0xa7e>
 800c6dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c6e0:	d029      	beq.n	800c736 <_dtoa_r+0xab6>
 800c6e2:	9b05      	ldr	r3, [sp, #20]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	dd02      	ble.n	800c6ee <_dtoa_r+0xa6e>
 800c6e8:	9b02      	ldr	r3, [sp, #8]
 800c6ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c6ee:	9b01      	ldr	r3, [sp, #4]
 800c6f0:	f883 9000 	strb.w	r9, [r3]
 800c6f4:	e774      	b.n	800c5e0 <_dtoa_r+0x960>
 800c6f6:	4638      	mov	r0, r7
 800c6f8:	e7ba      	b.n	800c670 <_dtoa_r+0x9f0>
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	e7e1      	b.n	800c6c2 <_dtoa_r+0xa42>
 800c6fe:	9b05      	ldr	r3, [sp, #20]
 800c700:	2b00      	cmp	r3, #0
 800c702:	db04      	blt.n	800c70e <_dtoa_r+0xa8e>
 800c704:	9907      	ldr	r1, [sp, #28]
 800c706:	430b      	orrs	r3, r1
 800c708:	9906      	ldr	r1, [sp, #24]
 800c70a:	430b      	orrs	r3, r1
 800c70c:	d120      	bne.n	800c750 <_dtoa_r+0xad0>
 800c70e:	2a00      	cmp	r2, #0
 800c710:	dded      	ble.n	800c6ee <_dtoa_r+0xa6e>
 800c712:	4651      	mov	r1, sl
 800c714:	2201      	movs	r2, #1
 800c716:	4620      	mov	r0, r4
 800c718:	f000 fbb4 	bl	800ce84 <__lshift>
 800c71c:	4631      	mov	r1, r6
 800c71e:	4682      	mov	sl, r0
 800c720:	f000 fc1c 	bl	800cf5c <__mcmp>
 800c724:	2800      	cmp	r0, #0
 800c726:	dc03      	bgt.n	800c730 <_dtoa_r+0xab0>
 800c728:	d1e1      	bne.n	800c6ee <_dtoa_r+0xa6e>
 800c72a:	f019 0f01 	tst.w	r9, #1
 800c72e:	d0de      	beq.n	800c6ee <_dtoa_r+0xa6e>
 800c730:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c734:	d1d8      	bne.n	800c6e8 <_dtoa_r+0xa68>
 800c736:	9a01      	ldr	r2, [sp, #4]
 800c738:	2339      	movs	r3, #57	; 0x39
 800c73a:	7013      	strb	r3, [r2, #0]
 800c73c:	462b      	mov	r3, r5
 800c73e:	461d      	mov	r5, r3
 800c740:	3b01      	subs	r3, #1
 800c742:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c746:	2a39      	cmp	r2, #57	; 0x39
 800c748:	d06c      	beq.n	800c824 <_dtoa_r+0xba4>
 800c74a:	3201      	adds	r2, #1
 800c74c:	701a      	strb	r2, [r3, #0]
 800c74e:	e747      	b.n	800c5e0 <_dtoa_r+0x960>
 800c750:	2a00      	cmp	r2, #0
 800c752:	dd07      	ble.n	800c764 <_dtoa_r+0xae4>
 800c754:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c758:	d0ed      	beq.n	800c736 <_dtoa_r+0xab6>
 800c75a:	9a01      	ldr	r2, [sp, #4]
 800c75c:	f109 0301 	add.w	r3, r9, #1
 800c760:	7013      	strb	r3, [r2, #0]
 800c762:	e73d      	b.n	800c5e0 <_dtoa_r+0x960>
 800c764:	9b04      	ldr	r3, [sp, #16]
 800c766:	9a08      	ldr	r2, [sp, #32]
 800c768:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d043      	beq.n	800c7f8 <_dtoa_r+0xb78>
 800c770:	4651      	mov	r1, sl
 800c772:	2300      	movs	r3, #0
 800c774:	220a      	movs	r2, #10
 800c776:	4620      	mov	r0, r4
 800c778:	f000 f9d6 	bl	800cb28 <__multadd>
 800c77c:	45b8      	cmp	r8, r7
 800c77e:	4682      	mov	sl, r0
 800c780:	f04f 0300 	mov.w	r3, #0
 800c784:	f04f 020a 	mov.w	r2, #10
 800c788:	4641      	mov	r1, r8
 800c78a:	4620      	mov	r0, r4
 800c78c:	d107      	bne.n	800c79e <_dtoa_r+0xb1e>
 800c78e:	f000 f9cb 	bl	800cb28 <__multadd>
 800c792:	4680      	mov	r8, r0
 800c794:	4607      	mov	r7, r0
 800c796:	9b04      	ldr	r3, [sp, #16]
 800c798:	3301      	adds	r3, #1
 800c79a:	9304      	str	r3, [sp, #16]
 800c79c:	e775      	b.n	800c68a <_dtoa_r+0xa0a>
 800c79e:	f000 f9c3 	bl	800cb28 <__multadd>
 800c7a2:	4639      	mov	r1, r7
 800c7a4:	4680      	mov	r8, r0
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	220a      	movs	r2, #10
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f000 f9bc 	bl	800cb28 <__multadd>
 800c7b0:	4607      	mov	r7, r0
 800c7b2:	e7f0      	b.n	800c796 <_dtoa_r+0xb16>
 800c7b4:	9b04      	ldr	r3, [sp, #16]
 800c7b6:	9301      	str	r3, [sp, #4]
 800c7b8:	9d00      	ldr	r5, [sp, #0]
 800c7ba:	4631      	mov	r1, r6
 800c7bc:	4650      	mov	r0, sl
 800c7be:	f7ff f9d4 	bl	800bb6a <quorem>
 800c7c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c7c6:	9b00      	ldr	r3, [sp, #0]
 800c7c8:	f805 9b01 	strb.w	r9, [r5], #1
 800c7cc:	1aea      	subs	r2, r5, r3
 800c7ce:	9b01      	ldr	r3, [sp, #4]
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	dd07      	ble.n	800c7e4 <_dtoa_r+0xb64>
 800c7d4:	4651      	mov	r1, sl
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	220a      	movs	r2, #10
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f000 f9a4 	bl	800cb28 <__multadd>
 800c7e0:	4682      	mov	sl, r0
 800c7e2:	e7ea      	b.n	800c7ba <_dtoa_r+0xb3a>
 800c7e4:	9b01      	ldr	r3, [sp, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	bfc8      	it	gt
 800c7ea:	461d      	movgt	r5, r3
 800c7ec:	9b00      	ldr	r3, [sp, #0]
 800c7ee:	bfd8      	it	le
 800c7f0:	2501      	movle	r5, #1
 800c7f2:	441d      	add	r5, r3
 800c7f4:	f04f 0800 	mov.w	r8, #0
 800c7f8:	4651      	mov	r1, sl
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f000 fb41 	bl	800ce84 <__lshift>
 800c802:	4631      	mov	r1, r6
 800c804:	4682      	mov	sl, r0
 800c806:	f000 fba9 	bl	800cf5c <__mcmp>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	dc96      	bgt.n	800c73c <_dtoa_r+0xabc>
 800c80e:	d102      	bne.n	800c816 <_dtoa_r+0xb96>
 800c810:	f019 0f01 	tst.w	r9, #1
 800c814:	d192      	bne.n	800c73c <_dtoa_r+0xabc>
 800c816:	462b      	mov	r3, r5
 800c818:	461d      	mov	r5, r3
 800c81a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c81e:	2a30      	cmp	r2, #48	; 0x30
 800c820:	d0fa      	beq.n	800c818 <_dtoa_r+0xb98>
 800c822:	e6dd      	b.n	800c5e0 <_dtoa_r+0x960>
 800c824:	9a00      	ldr	r2, [sp, #0]
 800c826:	429a      	cmp	r2, r3
 800c828:	d189      	bne.n	800c73e <_dtoa_r+0xabe>
 800c82a:	f10b 0b01 	add.w	fp, fp, #1
 800c82e:	2331      	movs	r3, #49	; 0x31
 800c830:	e796      	b.n	800c760 <_dtoa_r+0xae0>
 800c832:	4b0a      	ldr	r3, [pc, #40]	; (800c85c <_dtoa_r+0xbdc>)
 800c834:	f7ff ba99 	b.w	800bd6a <_dtoa_r+0xea>
 800c838:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f47f aa6d 	bne.w	800bd1a <_dtoa_r+0x9a>
 800c840:	4b07      	ldr	r3, [pc, #28]	; (800c860 <_dtoa_r+0xbe0>)
 800c842:	f7ff ba92 	b.w	800bd6a <_dtoa_r+0xea>
 800c846:	9b01      	ldr	r3, [sp, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	dcb5      	bgt.n	800c7b8 <_dtoa_r+0xb38>
 800c84c:	9b07      	ldr	r3, [sp, #28]
 800c84e:	2b02      	cmp	r3, #2
 800c850:	f73f aeb1 	bgt.w	800c5b6 <_dtoa_r+0x936>
 800c854:	e7b0      	b.n	800c7b8 <_dtoa_r+0xb38>
 800c856:	bf00      	nop
 800c858:	08010c74 	.word	0x08010c74
 800c85c:	08010bd4 	.word	0x08010bd4
 800c860:	08010bf8 	.word	0x08010bf8

0800c864 <_free_r>:
 800c864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c866:	2900      	cmp	r1, #0
 800c868:	d044      	beq.n	800c8f4 <_free_r+0x90>
 800c86a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c86e:	9001      	str	r0, [sp, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	f1a1 0404 	sub.w	r4, r1, #4
 800c876:	bfb8      	it	lt
 800c878:	18e4      	addlt	r4, r4, r3
 800c87a:	f000 f8e7 	bl	800ca4c <__malloc_lock>
 800c87e:	4a1e      	ldr	r2, [pc, #120]	; (800c8f8 <_free_r+0x94>)
 800c880:	9801      	ldr	r0, [sp, #4]
 800c882:	6813      	ldr	r3, [r2, #0]
 800c884:	b933      	cbnz	r3, 800c894 <_free_r+0x30>
 800c886:	6063      	str	r3, [r4, #4]
 800c888:	6014      	str	r4, [r2, #0]
 800c88a:	b003      	add	sp, #12
 800c88c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c890:	f000 b8e2 	b.w	800ca58 <__malloc_unlock>
 800c894:	42a3      	cmp	r3, r4
 800c896:	d908      	bls.n	800c8aa <_free_r+0x46>
 800c898:	6825      	ldr	r5, [r4, #0]
 800c89a:	1961      	adds	r1, r4, r5
 800c89c:	428b      	cmp	r3, r1
 800c89e:	bf01      	itttt	eq
 800c8a0:	6819      	ldreq	r1, [r3, #0]
 800c8a2:	685b      	ldreq	r3, [r3, #4]
 800c8a4:	1949      	addeq	r1, r1, r5
 800c8a6:	6021      	streq	r1, [r4, #0]
 800c8a8:	e7ed      	b.n	800c886 <_free_r+0x22>
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	b10b      	cbz	r3, 800c8b4 <_free_r+0x50>
 800c8b0:	42a3      	cmp	r3, r4
 800c8b2:	d9fa      	bls.n	800c8aa <_free_r+0x46>
 800c8b4:	6811      	ldr	r1, [r2, #0]
 800c8b6:	1855      	adds	r5, r2, r1
 800c8b8:	42a5      	cmp	r5, r4
 800c8ba:	d10b      	bne.n	800c8d4 <_free_r+0x70>
 800c8bc:	6824      	ldr	r4, [r4, #0]
 800c8be:	4421      	add	r1, r4
 800c8c0:	1854      	adds	r4, r2, r1
 800c8c2:	42a3      	cmp	r3, r4
 800c8c4:	6011      	str	r1, [r2, #0]
 800c8c6:	d1e0      	bne.n	800c88a <_free_r+0x26>
 800c8c8:	681c      	ldr	r4, [r3, #0]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	6053      	str	r3, [r2, #4]
 800c8ce:	440c      	add	r4, r1
 800c8d0:	6014      	str	r4, [r2, #0]
 800c8d2:	e7da      	b.n	800c88a <_free_r+0x26>
 800c8d4:	d902      	bls.n	800c8dc <_free_r+0x78>
 800c8d6:	230c      	movs	r3, #12
 800c8d8:	6003      	str	r3, [r0, #0]
 800c8da:	e7d6      	b.n	800c88a <_free_r+0x26>
 800c8dc:	6825      	ldr	r5, [r4, #0]
 800c8de:	1961      	adds	r1, r4, r5
 800c8e0:	428b      	cmp	r3, r1
 800c8e2:	bf04      	itt	eq
 800c8e4:	6819      	ldreq	r1, [r3, #0]
 800c8e6:	685b      	ldreq	r3, [r3, #4]
 800c8e8:	6063      	str	r3, [r4, #4]
 800c8ea:	bf04      	itt	eq
 800c8ec:	1949      	addeq	r1, r1, r5
 800c8ee:	6021      	streq	r1, [r4, #0]
 800c8f0:	6054      	str	r4, [r2, #4]
 800c8f2:	e7ca      	b.n	800c88a <_free_r+0x26>
 800c8f4:	b003      	add	sp, #12
 800c8f6:	bd30      	pop	{r4, r5, pc}
 800c8f8:	20001a14 	.word	0x20001a14

0800c8fc <malloc>:
 800c8fc:	4b02      	ldr	r3, [pc, #8]	; (800c908 <malloc+0xc>)
 800c8fe:	4601      	mov	r1, r0
 800c900:	6818      	ldr	r0, [r3, #0]
 800c902:	f000 b823 	b.w	800c94c <_malloc_r>
 800c906:	bf00      	nop
 800c908:	20000710 	.word	0x20000710

0800c90c <sbrk_aligned>:
 800c90c:	b570      	push	{r4, r5, r6, lr}
 800c90e:	4e0e      	ldr	r6, [pc, #56]	; (800c948 <sbrk_aligned+0x3c>)
 800c910:	460c      	mov	r4, r1
 800c912:	6831      	ldr	r1, [r6, #0]
 800c914:	4605      	mov	r5, r0
 800c916:	b911      	cbnz	r1, 800c91e <sbrk_aligned+0x12>
 800c918:	f000 fe26 	bl	800d568 <_sbrk_r>
 800c91c:	6030      	str	r0, [r6, #0]
 800c91e:	4621      	mov	r1, r4
 800c920:	4628      	mov	r0, r5
 800c922:	f000 fe21 	bl	800d568 <_sbrk_r>
 800c926:	1c43      	adds	r3, r0, #1
 800c928:	d00a      	beq.n	800c940 <sbrk_aligned+0x34>
 800c92a:	1cc4      	adds	r4, r0, #3
 800c92c:	f024 0403 	bic.w	r4, r4, #3
 800c930:	42a0      	cmp	r0, r4
 800c932:	d007      	beq.n	800c944 <sbrk_aligned+0x38>
 800c934:	1a21      	subs	r1, r4, r0
 800c936:	4628      	mov	r0, r5
 800c938:	f000 fe16 	bl	800d568 <_sbrk_r>
 800c93c:	3001      	adds	r0, #1
 800c93e:	d101      	bne.n	800c944 <sbrk_aligned+0x38>
 800c940:	f04f 34ff 	mov.w	r4, #4294967295
 800c944:	4620      	mov	r0, r4
 800c946:	bd70      	pop	{r4, r5, r6, pc}
 800c948:	20001a18 	.word	0x20001a18

0800c94c <_malloc_r>:
 800c94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c950:	1ccd      	adds	r5, r1, #3
 800c952:	f025 0503 	bic.w	r5, r5, #3
 800c956:	3508      	adds	r5, #8
 800c958:	2d0c      	cmp	r5, #12
 800c95a:	bf38      	it	cc
 800c95c:	250c      	movcc	r5, #12
 800c95e:	2d00      	cmp	r5, #0
 800c960:	4607      	mov	r7, r0
 800c962:	db01      	blt.n	800c968 <_malloc_r+0x1c>
 800c964:	42a9      	cmp	r1, r5
 800c966:	d905      	bls.n	800c974 <_malloc_r+0x28>
 800c968:	230c      	movs	r3, #12
 800c96a:	603b      	str	r3, [r7, #0]
 800c96c:	2600      	movs	r6, #0
 800c96e:	4630      	mov	r0, r6
 800c970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c974:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ca48 <_malloc_r+0xfc>
 800c978:	f000 f868 	bl	800ca4c <__malloc_lock>
 800c97c:	f8d8 3000 	ldr.w	r3, [r8]
 800c980:	461c      	mov	r4, r3
 800c982:	bb5c      	cbnz	r4, 800c9dc <_malloc_r+0x90>
 800c984:	4629      	mov	r1, r5
 800c986:	4638      	mov	r0, r7
 800c988:	f7ff ffc0 	bl	800c90c <sbrk_aligned>
 800c98c:	1c43      	adds	r3, r0, #1
 800c98e:	4604      	mov	r4, r0
 800c990:	d155      	bne.n	800ca3e <_malloc_r+0xf2>
 800c992:	f8d8 4000 	ldr.w	r4, [r8]
 800c996:	4626      	mov	r6, r4
 800c998:	2e00      	cmp	r6, #0
 800c99a:	d145      	bne.n	800ca28 <_malloc_r+0xdc>
 800c99c:	2c00      	cmp	r4, #0
 800c99e:	d048      	beq.n	800ca32 <_malloc_r+0xe6>
 800c9a0:	6823      	ldr	r3, [r4, #0]
 800c9a2:	4631      	mov	r1, r6
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	eb04 0903 	add.w	r9, r4, r3
 800c9aa:	f000 fddd 	bl	800d568 <_sbrk_r>
 800c9ae:	4581      	cmp	r9, r0
 800c9b0:	d13f      	bne.n	800ca32 <_malloc_r+0xe6>
 800c9b2:	6821      	ldr	r1, [r4, #0]
 800c9b4:	1a6d      	subs	r5, r5, r1
 800c9b6:	4629      	mov	r1, r5
 800c9b8:	4638      	mov	r0, r7
 800c9ba:	f7ff ffa7 	bl	800c90c <sbrk_aligned>
 800c9be:	3001      	adds	r0, #1
 800c9c0:	d037      	beq.n	800ca32 <_malloc_r+0xe6>
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	442b      	add	r3, r5
 800c9c6:	6023      	str	r3, [r4, #0]
 800c9c8:	f8d8 3000 	ldr.w	r3, [r8]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d038      	beq.n	800ca42 <_malloc_r+0xf6>
 800c9d0:	685a      	ldr	r2, [r3, #4]
 800c9d2:	42a2      	cmp	r2, r4
 800c9d4:	d12b      	bne.n	800ca2e <_malloc_r+0xe2>
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	605a      	str	r2, [r3, #4]
 800c9da:	e00f      	b.n	800c9fc <_malloc_r+0xb0>
 800c9dc:	6822      	ldr	r2, [r4, #0]
 800c9de:	1b52      	subs	r2, r2, r5
 800c9e0:	d41f      	bmi.n	800ca22 <_malloc_r+0xd6>
 800c9e2:	2a0b      	cmp	r2, #11
 800c9e4:	d917      	bls.n	800ca16 <_malloc_r+0xca>
 800c9e6:	1961      	adds	r1, r4, r5
 800c9e8:	42a3      	cmp	r3, r4
 800c9ea:	6025      	str	r5, [r4, #0]
 800c9ec:	bf18      	it	ne
 800c9ee:	6059      	strne	r1, [r3, #4]
 800c9f0:	6863      	ldr	r3, [r4, #4]
 800c9f2:	bf08      	it	eq
 800c9f4:	f8c8 1000 	streq.w	r1, [r8]
 800c9f8:	5162      	str	r2, [r4, r5]
 800c9fa:	604b      	str	r3, [r1, #4]
 800c9fc:	4638      	mov	r0, r7
 800c9fe:	f104 060b 	add.w	r6, r4, #11
 800ca02:	f000 f829 	bl	800ca58 <__malloc_unlock>
 800ca06:	f026 0607 	bic.w	r6, r6, #7
 800ca0a:	1d23      	adds	r3, r4, #4
 800ca0c:	1af2      	subs	r2, r6, r3
 800ca0e:	d0ae      	beq.n	800c96e <_malloc_r+0x22>
 800ca10:	1b9b      	subs	r3, r3, r6
 800ca12:	50a3      	str	r3, [r4, r2]
 800ca14:	e7ab      	b.n	800c96e <_malloc_r+0x22>
 800ca16:	42a3      	cmp	r3, r4
 800ca18:	6862      	ldr	r2, [r4, #4]
 800ca1a:	d1dd      	bne.n	800c9d8 <_malloc_r+0x8c>
 800ca1c:	f8c8 2000 	str.w	r2, [r8]
 800ca20:	e7ec      	b.n	800c9fc <_malloc_r+0xb0>
 800ca22:	4623      	mov	r3, r4
 800ca24:	6864      	ldr	r4, [r4, #4]
 800ca26:	e7ac      	b.n	800c982 <_malloc_r+0x36>
 800ca28:	4634      	mov	r4, r6
 800ca2a:	6876      	ldr	r6, [r6, #4]
 800ca2c:	e7b4      	b.n	800c998 <_malloc_r+0x4c>
 800ca2e:	4613      	mov	r3, r2
 800ca30:	e7cc      	b.n	800c9cc <_malloc_r+0x80>
 800ca32:	230c      	movs	r3, #12
 800ca34:	603b      	str	r3, [r7, #0]
 800ca36:	4638      	mov	r0, r7
 800ca38:	f000 f80e 	bl	800ca58 <__malloc_unlock>
 800ca3c:	e797      	b.n	800c96e <_malloc_r+0x22>
 800ca3e:	6025      	str	r5, [r4, #0]
 800ca40:	e7dc      	b.n	800c9fc <_malloc_r+0xb0>
 800ca42:	605b      	str	r3, [r3, #4]
 800ca44:	deff      	udf	#255	; 0xff
 800ca46:	bf00      	nop
 800ca48:	20001a14 	.word	0x20001a14

0800ca4c <__malloc_lock>:
 800ca4c:	4801      	ldr	r0, [pc, #4]	; (800ca54 <__malloc_lock+0x8>)
 800ca4e:	f7ff b87c 	b.w	800bb4a <__retarget_lock_acquire_recursive>
 800ca52:	bf00      	nop
 800ca54:	20001a10 	.word	0x20001a10

0800ca58 <__malloc_unlock>:
 800ca58:	4801      	ldr	r0, [pc, #4]	; (800ca60 <__malloc_unlock+0x8>)
 800ca5a:	f7ff b877 	b.w	800bb4c <__retarget_lock_release_recursive>
 800ca5e:	bf00      	nop
 800ca60:	20001a10 	.word	0x20001a10

0800ca64 <_Balloc>:
 800ca64:	b570      	push	{r4, r5, r6, lr}
 800ca66:	69c6      	ldr	r6, [r0, #28]
 800ca68:	4604      	mov	r4, r0
 800ca6a:	460d      	mov	r5, r1
 800ca6c:	b976      	cbnz	r6, 800ca8c <_Balloc+0x28>
 800ca6e:	2010      	movs	r0, #16
 800ca70:	f7ff ff44 	bl	800c8fc <malloc>
 800ca74:	4602      	mov	r2, r0
 800ca76:	61e0      	str	r0, [r4, #28]
 800ca78:	b920      	cbnz	r0, 800ca84 <_Balloc+0x20>
 800ca7a:	4b18      	ldr	r3, [pc, #96]	; (800cadc <_Balloc+0x78>)
 800ca7c:	4818      	ldr	r0, [pc, #96]	; (800cae0 <_Balloc+0x7c>)
 800ca7e:	216b      	movs	r1, #107	; 0x6b
 800ca80:	f000 fd82 	bl	800d588 <__assert_func>
 800ca84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca88:	6006      	str	r6, [r0, #0]
 800ca8a:	60c6      	str	r6, [r0, #12]
 800ca8c:	69e6      	ldr	r6, [r4, #28]
 800ca8e:	68f3      	ldr	r3, [r6, #12]
 800ca90:	b183      	cbz	r3, 800cab4 <_Balloc+0x50>
 800ca92:	69e3      	ldr	r3, [r4, #28]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca9a:	b9b8      	cbnz	r0, 800cacc <_Balloc+0x68>
 800ca9c:	2101      	movs	r1, #1
 800ca9e:	fa01 f605 	lsl.w	r6, r1, r5
 800caa2:	1d72      	adds	r2, r6, #5
 800caa4:	0092      	lsls	r2, r2, #2
 800caa6:	4620      	mov	r0, r4
 800caa8:	f000 fd8c 	bl	800d5c4 <_calloc_r>
 800caac:	b160      	cbz	r0, 800cac8 <_Balloc+0x64>
 800caae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cab2:	e00e      	b.n	800cad2 <_Balloc+0x6e>
 800cab4:	2221      	movs	r2, #33	; 0x21
 800cab6:	2104      	movs	r1, #4
 800cab8:	4620      	mov	r0, r4
 800caba:	f000 fd83 	bl	800d5c4 <_calloc_r>
 800cabe:	69e3      	ldr	r3, [r4, #28]
 800cac0:	60f0      	str	r0, [r6, #12]
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d1e4      	bne.n	800ca92 <_Balloc+0x2e>
 800cac8:	2000      	movs	r0, #0
 800caca:	bd70      	pop	{r4, r5, r6, pc}
 800cacc:	6802      	ldr	r2, [r0, #0]
 800cace:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cad2:	2300      	movs	r3, #0
 800cad4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cad8:	e7f7      	b.n	800caca <_Balloc+0x66>
 800cada:	bf00      	nop
 800cadc:	08010c05 	.word	0x08010c05
 800cae0:	08010c85 	.word	0x08010c85

0800cae4 <_Bfree>:
 800cae4:	b570      	push	{r4, r5, r6, lr}
 800cae6:	69c6      	ldr	r6, [r0, #28]
 800cae8:	4605      	mov	r5, r0
 800caea:	460c      	mov	r4, r1
 800caec:	b976      	cbnz	r6, 800cb0c <_Bfree+0x28>
 800caee:	2010      	movs	r0, #16
 800caf0:	f7ff ff04 	bl	800c8fc <malloc>
 800caf4:	4602      	mov	r2, r0
 800caf6:	61e8      	str	r0, [r5, #28]
 800caf8:	b920      	cbnz	r0, 800cb04 <_Bfree+0x20>
 800cafa:	4b09      	ldr	r3, [pc, #36]	; (800cb20 <_Bfree+0x3c>)
 800cafc:	4809      	ldr	r0, [pc, #36]	; (800cb24 <_Bfree+0x40>)
 800cafe:	218f      	movs	r1, #143	; 0x8f
 800cb00:	f000 fd42 	bl	800d588 <__assert_func>
 800cb04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb08:	6006      	str	r6, [r0, #0]
 800cb0a:	60c6      	str	r6, [r0, #12]
 800cb0c:	b13c      	cbz	r4, 800cb1e <_Bfree+0x3a>
 800cb0e:	69eb      	ldr	r3, [r5, #28]
 800cb10:	6862      	ldr	r2, [r4, #4]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb18:	6021      	str	r1, [r4, #0]
 800cb1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb1e:	bd70      	pop	{r4, r5, r6, pc}
 800cb20:	08010c05 	.word	0x08010c05
 800cb24:	08010c85 	.word	0x08010c85

0800cb28 <__multadd>:
 800cb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb2c:	690d      	ldr	r5, [r1, #16]
 800cb2e:	4607      	mov	r7, r0
 800cb30:	460c      	mov	r4, r1
 800cb32:	461e      	mov	r6, r3
 800cb34:	f101 0c14 	add.w	ip, r1, #20
 800cb38:	2000      	movs	r0, #0
 800cb3a:	f8dc 3000 	ldr.w	r3, [ip]
 800cb3e:	b299      	uxth	r1, r3
 800cb40:	fb02 6101 	mla	r1, r2, r1, r6
 800cb44:	0c1e      	lsrs	r6, r3, #16
 800cb46:	0c0b      	lsrs	r3, r1, #16
 800cb48:	fb02 3306 	mla	r3, r2, r6, r3
 800cb4c:	b289      	uxth	r1, r1
 800cb4e:	3001      	adds	r0, #1
 800cb50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb54:	4285      	cmp	r5, r0
 800cb56:	f84c 1b04 	str.w	r1, [ip], #4
 800cb5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb5e:	dcec      	bgt.n	800cb3a <__multadd+0x12>
 800cb60:	b30e      	cbz	r6, 800cba6 <__multadd+0x7e>
 800cb62:	68a3      	ldr	r3, [r4, #8]
 800cb64:	42ab      	cmp	r3, r5
 800cb66:	dc19      	bgt.n	800cb9c <__multadd+0x74>
 800cb68:	6861      	ldr	r1, [r4, #4]
 800cb6a:	4638      	mov	r0, r7
 800cb6c:	3101      	adds	r1, #1
 800cb6e:	f7ff ff79 	bl	800ca64 <_Balloc>
 800cb72:	4680      	mov	r8, r0
 800cb74:	b928      	cbnz	r0, 800cb82 <__multadd+0x5a>
 800cb76:	4602      	mov	r2, r0
 800cb78:	4b0c      	ldr	r3, [pc, #48]	; (800cbac <__multadd+0x84>)
 800cb7a:	480d      	ldr	r0, [pc, #52]	; (800cbb0 <__multadd+0x88>)
 800cb7c:	21ba      	movs	r1, #186	; 0xba
 800cb7e:	f000 fd03 	bl	800d588 <__assert_func>
 800cb82:	6922      	ldr	r2, [r4, #16]
 800cb84:	3202      	adds	r2, #2
 800cb86:	f104 010c 	add.w	r1, r4, #12
 800cb8a:	0092      	lsls	r2, r2, #2
 800cb8c:	300c      	adds	r0, #12
 800cb8e:	f7fe ffde 	bl	800bb4e <memcpy>
 800cb92:	4621      	mov	r1, r4
 800cb94:	4638      	mov	r0, r7
 800cb96:	f7ff ffa5 	bl	800cae4 <_Bfree>
 800cb9a:	4644      	mov	r4, r8
 800cb9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cba0:	3501      	adds	r5, #1
 800cba2:	615e      	str	r6, [r3, #20]
 800cba4:	6125      	str	r5, [r4, #16]
 800cba6:	4620      	mov	r0, r4
 800cba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbac:	08010c74 	.word	0x08010c74
 800cbb0:	08010c85 	.word	0x08010c85

0800cbb4 <__hi0bits>:
 800cbb4:	0c03      	lsrs	r3, r0, #16
 800cbb6:	041b      	lsls	r3, r3, #16
 800cbb8:	b9d3      	cbnz	r3, 800cbf0 <__hi0bits+0x3c>
 800cbba:	0400      	lsls	r0, r0, #16
 800cbbc:	2310      	movs	r3, #16
 800cbbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cbc2:	bf04      	itt	eq
 800cbc4:	0200      	lsleq	r0, r0, #8
 800cbc6:	3308      	addeq	r3, #8
 800cbc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cbcc:	bf04      	itt	eq
 800cbce:	0100      	lsleq	r0, r0, #4
 800cbd0:	3304      	addeq	r3, #4
 800cbd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cbd6:	bf04      	itt	eq
 800cbd8:	0080      	lsleq	r0, r0, #2
 800cbda:	3302      	addeq	r3, #2
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	db05      	blt.n	800cbec <__hi0bits+0x38>
 800cbe0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cbe4:	f103 0301 	add.w	r3, r3, #1
 800cbe8:	bf08      	it	eq
 800cbea:	2320      	moveq	r3, #32
 800cbec:	4618      	mov	r0, r3
 800cbee:	4770      	bx	lr
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	e7e4      	b.n	800cbbe <__hi0bits+0xa>

0800cbf4 <__lo0bits>:
 800cbf4:	6803      	ldr	r3, [r0, #0]
 800cbf6:	f013 0207 	ands.w	r2, r3, #7
 800cbfa:	d00c      	beq.n	800cc16 <__lo0bits+0x22>
 800cbfc:	07d9      	lsls	r1, r3, #31
 800cbfe:	d422      	bmi.n	800cc46 <__lo0bits+0x52>
 800cc00:	079a      	lsls	r2, r3, #30
 800cc02:	bf49      	itett	mi
 800cc04:	085b      	lsrmi	r3, r3, #1
 800cc06:	089b      	lsrpl	r3, r3, #2
 800cc08:	6003      	strmi	r3, [r0, #0]
 800cc0a:	2201      	movmi	r2, #1
 800cc0c:	bf5c      	itt	pl
 800cc0e:	6003      	strpl	r3, [r0, #0]
 800cc10:	2202      	movpl	r2, #2
 800cc12:	4610      	mov	r0, r2
 800cc14:	4770      	bx	lr
 800cc16:	b299      	uxth	r1, r3
 800cc18:	b909      	cbnz	r1, 800cc1e <__lo0bits+0x2a>
 800cc1a:	0c1b      	lsrs	r3, r3, #16
 800cc1c:	2210      	movs	r2, #16
 800cc1e:	b2d9      	uxtb	r1, r3
 800cc20:	b909      	cbnz	r1, 800cc26 <__lo0bits+0x32>
 800cc22:	3208      	adds	r2, #8
 800cc24:	0a1b      	lsrs	r3, r3, #8
 800cc26:	0719      	lsls	r1, r3, #28
 800cc28:	bf04      	itt	eq
 800cc2a:	091b      	lsreq	r3, r3, #4
 800cc2c:	3204      	addeq	r2, #4
 800cc2e:	0799      	lsls	r1, r3, #30
 800cc30:	bf04      	itt	eq
 800cc32:	089b      	lsreq	r3, r3, #2
 800cc34:	3202      	addeq	r2, #2
 800cc36:	07d9      	lsls	r1, r3, #31
 800cc38:	d403      	bmi.n	800cc42 <__lo0bits+0x4e>
 800cc3a:	085b      	lsrs	r3, r3, #1
 800cc3c:	f102 0201 	add.w	r2, r2, #1
 800cc40:	d003      	beq.n	800cc4a <__lo0bits+0x56>
 800cc42:	6003      	str	r3, [r0, #0]
 800cc44:	e7e5      	b.n	800cc12 <__lo0bits+0x1e>
 800cc46:	2200      	movs	r2, #0
 800cc48:	e7e3      	b.n	800cc12 <__lo0bits+0x1e>
 800cc4a:	2220      	movs	r2, #32
 800cc4c:	e7e1      	b.n	800cc12 <__lo0bits+0x1e>
	...

0800cc50 <__i2b>:
 800cc50:	b510      	push	{r4, lr}
 800cc52:	460c      	mov	r4, r1
 800cc54:	2101      	movs	r1, #1
 800cc56:	f7ff ff05 	bl	800ca64 <_Balloc>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	b928      	cbnz	r0, 800cc6a <__i2b+0x1a>
 800cc5e:	4b05      	ldr	r3, [pc, #20]	; (800cc74 <__i2b+0x24>)
 800cc60:	4805      	ldr	r0, [pc, #20]	; (800cc78 <__i2b+0x28>)
 800cc62:	f240 1145 	movw	r1, #325	; 0x145
 800cc66:	f000 fc8f 	bl	800d588 <__assert_func>
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	6144      	str	r4, [r0, #20]
 800cc6e:	6103      	str	r3, [r0, #16]
 800cc70:	bd10      	pop	{r4, pc}
 800cc72:	bf00      	nop
 800cc74:	08010c74 	.word	0x08010c74
 800cc78:	08010c85 	.word	0x08010c85

0800cc7c <__multiply>:
 800cc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc80:	4691      	mov	r9, r2
 800cc82:	690a      	ldr	r2, [r1, #16]
 800cc84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	bfb8      	it	lt
 800cc8c:	460b      	movlt	r3, r1
 800cc8e:	460c      	mov	r4, r1
 800cc90:	bfbc      	itt	lt
 800cc92:	464c      	movlt	r4, r9
 800cc94:	4699      	movlt	r9, r3
 800cc96:	6927      	ldr	r7, [r4, #16]
 800cc98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc9c:	68a3      	ldr	r3, [r4, #8]
 800cc9e:	6861      	ldr	r1, [r4, #4]
 800cca0:	eb07 060a 	add.w	r6, r7, sl
 800cca4:	42b3      	cmp	r3, r6
 800cca6:	b085      	sub	sp, #20
 800cca8:	bfb8      	it	lt
 800ccaa:	3101      	addlt	r1, #1
 800ccac:	f7ff feda 	bl	800ca64 <_Balloc>
 800ccb0:	b930      	cbnz	r0, 800ccc0 <__multiply+0x44>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	4b44      	ldr	r3, [pc, #272]	; (800cdc8 <__multiply+0x14c>)
 800ccb6:	4845      	ldr	r0, [pc, #276]	; (800cdcc <__multiply+0x150>)
 800ccb8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ccbc:	f000 fc64 	bl	800d588 <__assert_func>
 800ccc0:	f100 0514 	add.w	r5, r0, #20
 800ccc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ccc8:	462b      	mov	r3, r5
 800ccca:	2200      	movs	r2, #0
 800cccc:	4543      	cmp	r3, r8
 800ccce:	d321      	bcc.n	800cd14 <__multiply+0x98>
 800ccd0:	f104 0314 	add.w	r3, r4, #20
 800ccd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ccd8:	f109 0314 	add.w	r3, r9, #20
 800ccdc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cce0:	9202      	str	r2, [sp, #8]
 800cce2:	1b3a      	subs	r2, r7, r4
 800cce4:	3a15      	subs	r2, #21
 800cce6:	f022 0203 	bic.w	r2, r2, #3
 800ccea:	3204      	adds	r2, #4
 800ccec:	f104 0115 	add.w	r1, r4, #21
 800ccf0:	428f      	cmp	r7, r1
 800ccf2:	bf38      	it	cc
 800ccf4:	2204      	movcc	r2, #4
 800ccf6:	9201      	str	r2, [sp, #4]
 800ccf8:	9a02      	ldr	r2, [sp, #8]
 800ccfa:	9303      	str	r3, [sp, #12]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d80c      	bhi.n	800cd1a <__multiply+0x9e>
 800cd00:	2e00      	cmp	r6, #0
 800cd02:	dd03      	ble.n	800cd0c <__multiply+0x90>
 800cd04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d05b      	beq.n	800cdc4 <__multiply+0x148>
 800cd0c:	6106      	str	r6, [r0, #16]
 800cd0e:	b005      	add	sp, #20
 800cd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd14:	f843 2b04 	str.w	r2, [r3], #4
 800cd18:	e7d8      	b.n	800cccc <__multiply+0x50>
 800cd1a:	f8b3 a000 	ldrh.w	sl, [r3]
 800cd1e:	f1ba 0f00 	cmp.w	sl, #0
 800cd22:	d024      	beq.n	800cd6e <__multiply+0xf2>
 800cd24:	f104 0e14 	add.w	lr, r4, #20
 800cd28:	46a9      	mov	r9, r5
 800cd2a:	f04f 0c00 	mov.w	ip, #0
 800cd2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cd32:	f8d9 1000 	ldr.w	r1, [r9]
 800cd36:	fa1f fb82 	uxth.w	fp, r2
 800cd3a:	b289      	uxth	r1, r1
 800cd3c:	fb0a 110b 	mla	r1, sl, fp, r1
 800cd40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cd44:	f8d9 2000 	ldr.w	r2, [r9]
 800cd48:	4461      	add	r1, ip
 800cd4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cd4e:	fb0a c20b 	mla	r2, sl, fp, ip
 800cd52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cd56:	b289      	uxth	r1, r1
 800cd58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cd5c:	4577      	cmp	r7, lr
 800cd5e:	f849 1b04 	str.w	r1, [r9], #4
 800cd62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cd66:	d8e2      	bhi.n	800cd2e <__multiply+0xb2>
 800cd68:	9a01      	ldr	r2, [sp, #4]
 800cd6a:	f845 c002 	str.w	ip, [r5, r2]
 800cd6e:	9a03      	ldr	r2, [sp, #12]
 800cd70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cd74:	3304      	adds	r3, #4
 800cd76:	f1b9 0f00 	cmp.w	r9, #0
 800cd7a:	d021      	beq.n	800cdc0 <__multiply+0x144>
 800cd7c:	6829      	ldr	r1, [r5, #0]
 800cd7e:	f104 0c14 	add.w	ip, r4, #20
 800cd82:	46ae      	mov	lr, r5
 800cd84:	f04f 0a00 	mov.w	sl, #0
 800cd88:	f8bc b000 	ldrh.w	fp, [ip]
 800cd8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cd90:	fb09 220b 	mla	r2, r9, fp, r2
 800cd94:	4452      	add	r2, sl
 800cd96:	b289      	uxth	r1, r1
 800cd98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cd9c:	f84e 1b04 	str.w	r1, [lr], #4
 800cda0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cda4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cda8:	f8be 1000 	ldrh.w	r1, [lr]
 800cdac:	fb09 110a 	mla	r1, r9, sl, r1
 800cdb0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cdb4:	4567      	cmp	r7, ip
 800cdb6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cdba:	d8e5      	bhi.n	800cd88 <__multiply+0x10c>
 800cdbc:	9a01      	ldr	r2, [sp, #4]
 800cdbe:	50a9      	str	r1, [r5, r2]
 800cdc0:	3504      	adds	r5, #4
 800cdc2:	e799      	b.n	800ccf8 <__multiply+0x7c>
 800cdc4:	3e01      	subs	r6, #1
 800cdc6:	e79b      	b.n	800cd00 <__multiply+0x84>
 800cdc8:	08010c74 	.word	0x08010c74
 800cdcc:	08010c85 	.word	0x08010c85

0800cdd0 <__pow5mult>:
 800cdd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdd4:	4615      	mov	r5, r2
 800cdd6:	f012 0203 	ands.w	r2, r2, #3
 800cdda:	4606      	mov	r6, r0
 800cddc:	460f      	mov	r7, r1
 800cdde:	d007      	beq.n	800cdf0 <__pow5mult+0x20>
 800cde0:	4c25      	ldr	r4, [pc, #148]	; (800ce78 <__pow5mult+0xa8>)
 800cde2:	3a01      	subs	r2, #1
 800cde4:	2300      	movs	r3, #0
 800cde6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cdea:	f7ff fe9d 	bl	800cb28 <__multadd>
 800cdee:	4607      	mov	r7, r0
 800cdf0:	10ad      	asrs	r5, r5, #2
 800cdf2:	d03d      	beq.n	800ce70 <__pow5mult+0xa0>
 800cdf4:	69f4      	ldr	r4, [r6, #28]
 800cdf6:	b97c      	cbnz	r4, 800ce18 <__pow5mult+0x48>
 800cdf8:	2010      	movs	r0, #16
 800cdfa:	f7ff fd7f 	bl	800c8fc <malloc>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	61f0      	str	r0, [r6, #28]
 800ce02:	b928      	cbnz	r0, 800ce10 <__pow5mult+0x40>
 800ce04:	4b1d      	ldr	r3, [pc, #116]	; (800ce7c <__pow5mult+0xac>)
 800ce06:	481e      	ldr	r0, [pc, #120]	; (800ce80 <__pow5mult+0xb0>)
 800ce08:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ce0c:	f000 fbbc 	bl	800d588 <__assert_func>
 800ce10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce14:	6004      	str	r4, [r0, #0]
 800ce16:	60c4      	str	r4, [r0, #12]
 800ce18:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ce1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce20:	b94c      	cbnz	r4, 800ce36 <__pow5mult+0x66>
 800ce22:	f240 2171 	movw	r1, #625	; 0x271
 800ce26:	4630      	mov	r0, r6
 800ce28:	f7ff ff12 	bl	800cc50 <__i2b>
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce32:	4604      	mov	r4, r0
 800ce34:	6003      	str	r3, [r0, #0]
 800ce36:	f04f 0900 	mov.w	r9, #0
 800ce3a:	07eb      	lsls	r3, r5, #31
 800ce3c:	d50a      	bpl.n	800ce54 <__pow5mult+0x84>
 800ce3e:	4639      	mov	r1, r7
 800ce40:	4622      	mov	r2, r4
 800ce42:	4630      	mov	r0, r6
 800ce44:	f7ff ff1a 	bl	800cc7c <__multiply>
 800ce48:	4639      	mov	r1, r7
 800ce4a:	4680      	mov	r8, r0
 800ce4c:	4630      	mov	r0, r6
 800ce4e:	f7ff fe49 	bl	800cae4 <_Bfree>
 800ce52:	4647      	mov	r7, r8
 800ce54:	106d      	asrs	r5, r5, #1
 800ce56:	d00b      	beq.n	800ce70 <__pow5mult+0xa0>
 800ce58:	6820      	ldr	r0, [r4, #0]
 800ce5a:	b938      	cbnz	r0, 800ce6c <__pow5mult+0x9c>
 800ce5c:	4622      	mov	r2, r4
 800ce5e:	4621      	mov	r1, r4
 800ce60:	4630      	mov	r0, r6
 800ce62:	f7ff ff0b 	bl	800cc7c <__multiply>
 800ce66:	6020      	str	r0, [r4, #0]
 800ce68:	f8c0 9000 	str.w	r9, [r0]
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	e7e4      	b.n	800ce3a <__pow5mult+0x6a>
 800ce70:	4638      	mov	r0, r7
 800ce72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce76:	bf00      	nop
 800ce78:	08010dd0 	.word	0x08010dd0
 800ce7c:	08010c05 	.word	0x08010c05
 800ce80:	08010c85 	.word	0x08010c85

0800ce84 <__lshift>:
 800ce84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce88:	460c      	mov	r4, r1
 800ce8a:	6849      	ldr	r1, [r1, #4]
 800ce8c:	6923      	ldr	r3, [r4, #16]
 800ce8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce92:	68a3      	ldr	r3, [r4, #8]
 800ce94:	4607      	mov	r7, r0
 800ce96:	4691      	mov	r9, r2
 800ce98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce9c:	f108 0601 	add.w	r6, r8, #1
 800cea0:	42b3      	cmp	r3, r6
 800cea2:	db0b      	blt.n	800cebc <__lshift+0x38>
 800cea4:	4638      	mov	r0, r7
 800cea6:	f7ff fddd 	bl	800ca64 <_Balloc>
 800ceaa:	4605      	mov	r5, r0
 800ceac:	b948      	cbnz	r0, 800cec2 <__lshift+0x3e>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	4b28      	ldr	r3, [pc, #160]	; (800cf54 <__lshift+0xd0>)
 800ceb2:	4829      	ldr	r0, [pc, #164]	; (800cf58 <__lshift+0xd4>)
 800ceb4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ceb8:	f000 fb66 	bl	800d588 <__assert_func>
 800cebc:	3101      	adds	r1, #1
 800cebe:	005b      	lsls	r3, r3, #1
 800cec0:	e7ee      	b.n	800cea0 <__lshift+0x1c>
 800cec2:	2300      	movs	r3, #0
 800cec4:	f100 0114 	add.w	r1, r0, #20
 800cec8:	f100 0210 	add.w	r2, r0, #16
 800cecc:	4618      	mov	r0, r3
 800cece:	4553      	cmp	r3, sl
 800ced0:	db33      	blt.n	800cf3a <__lshift+0xb6>
 800ced2:	6920      	ldr	r0, [r4, #16]
 800ced4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ced8:	f104 0314 	add.w	r3, r4, #20
 800cedc:	f019 091f 	ands.w	r9, r9, #31
 800cee0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cee4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cee8:	d02b      	beq.n	800cf42 <__lshift+0xbe>
 800ceea:	f1c9 0e20 	rsb	lr, r9, #32
 800ceee:	468a      	mov	sl, r1
 800cef0:	2200      	movs	r2, #0
 800cef2:	6818      	ldr	r0, [r3, #0]
 800cef4:	fa00 f009 	lsl.w	r0, r0, r9
 800cef8:	4310      	orrs	r0, r2
 800cefa:	f84a 0b04 	str.w	r0, [sl], #4
 800cefe:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf02:	459c      	cmp	ip, r3
 800cf04:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf08:	d8f3      	bhi.n	800cef2 <__lshift+0x6e>
 800cf0a:	ebac 0304 	sub.w	r3, ip, r4
 800cf0e:	3b15      	subs	r3, #21
 800cf10:	f023 0303 	bic.w	r3, r3, #3
 800cf14:	3304      	adds	r3, #4
 800cf16:	f104 0015 	add.w	r0, r4, #21
 800cf1a:	4584      	cmp	ip, r0
 800cf1c:	bf38      	it	cc
 800cf1e:	2304      	movcc	r3, #4
 800cf20:	50ca      	str	r2, [r1, r3]
 800cf22:	b10a      	cbz	r2, 800cf28 <__lshift+0xa4>
 800cf24:	f108 0602 	add.w	r6, r8, #2
 800cf28:	3e01      	subs	r6, #1
 800cf2a:	4638      	mov	r0, r7
 800cf2c:	612e      	str	r6, [r5, #16]
 800cf2e:	4621      	mov	r1, r4
 800cf30:	f7ff fdd8 	bl	800cae4 <_Bfree>
 800cf34:	4628      	mov	r0, r5
 800cf36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf3a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf3e:	3301      	adds	r3, #1
 800cf40:	e7c5      	b.n	800cece <__lshift+0x4a>
 800cf42:	3904      	subs	r1, #4
 800cf44:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf48:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf4c:	459c      	cmp	ip, r3
 800cf4e:	d8f9      	bhi.n	800cf44 <__lshift+0xc0>
 800cf50:	e7ea      	b.n	800cf28 <__lshift+0xa4>
 800cf52:	bf00      	nop
 800cf54:	08010c74 	.word	0x08010c74
 800cf58:	08010c85 	.word	0x08010c85

0800cf5c <__mcmp>:
 800cf5c:	b530      	push	{r4, r5, lr}
 800cf5e:	6902      	ldr	r2, [r0, #16]
 800cf60:	690c      	ldr	r4, [r1, #16]
 800cf62:	1b12      	subs	r2, r2, r4
 800cf64:	d10e      	bne.n	800cf84 <__mcmp+0x28>
 800cf66:	f100 0314 	add.w	r3, r0, #20
 800cf6a:	3114      	adds	r1, #20
 800cf6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cf70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cf74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cf78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cf7c:	42a5      	cmp	r5, r4
 800cf7e:	d003      	beq.n	800cf88 <__mcmp+0x2c>
 800cf80:	d305      	bcc.n	800cf8e <__mcmp+0x32>
 800cf82:	2201      	movs	r2, #1
 800cf84:	4610      	mov	r0, r2
 800cf86:	bd30      	pop	{r4, r5, pc}
 800cf88:	4283      	cmp	r3, r0
 800cf8a:	d3f3      	bcc.n	800cf74 <__mcmp+0x18>
 800cf8c:	e7fa      	b.n	800cf84 <__mcmp+0x28>
 800cf8e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf92:	e7f7      	b.n	800cf84 <__mcmp+0x28>

0800cf94 <__mdiff>:
 800cf94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf98:	460c      	mov	r4, r1
 800cf9a:	4606      	mov	r6, r0
 800cf9c:	4611      	mov	r1, r2
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	4690      	mov	r8, r2
 800cfa2:	f7ff ffdb 	bl	800cf5c <__mcmp>
 800cfa6:	1e05      	subs	r5, r0, #0
 800cfa8:	d110      	bne.n	800cfcc <__mdiff+0x38>
 800cfaa:	4629      	mov	r1, r5
 800cfac:	4630      	mov	r0, r6
 800cfae:	f7ff fd59 	bl	800ca64 <_Balloc>
 800cfb2:	b930      	cbnz	r0, 800cfc2 <__mdiff+0x2e>
 800cfb4:	4b3a      	ldr	r3, [pc, #232]	; (800d0a0 <__mdiff+0x10c>)
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	f240 2137 	movw	r1, #567	; 0x237
 800cfbc:	4839      	ldr	r0, [pc, #228]	; (800d0a4 <__mdiff+0x110>)
 800cfbe:	f000 fae3 	bl	800d588 <__assert_func>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cfc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfcc:	bfa4      	itt	ge
 800cfce:	4643      	movge	r3, r8
 800cfd0:	46a0      	movge	r8, r4
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cfd8:	bfa6      	itte	ge
 800cfda:	461c      	movge	r4, r3
 800cfdc:	2500      	movge	r5, #0
 800cfde:	2501      	movlt	r5, #1
 800cfe0:	f7ff fd40 	bl	800ca64 <_Balloc>
 800cfe4:	b920      	cbnz	r0, 800cff0 <__mdiff+0x5c>
 800cfe6:	4b2e      	ldr	r3, [pc, #184]	; (800d0a0 <__mdiff+0x10c>)
 800cfe8:	4602      	mov	r2, r0
 800cfea:	f240 2145 	movw	r1, #581	; 0x245
 800cfee:	e7e5      	b.n	800cfbc <__mdiff+0x28>
 800cff0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cff4:	6926      	ldr	r6, [r4, #16]
 800cff6:	60c5      	str	r5, [r0, #12]
 800cff8:	f104 0914 	add.w	r9, r4, #20
 800cffc:	f108 0514 	add.w	r5, r8, #20
 800d000:	f100 0e14 	add.w	lr, r0, #20
 800d004:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d008:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d00c:	f108 0210 	add.w	r2, r8, #16
 800d010:	46f2      	mov	sl, lr
 800d012:	2100      	movs	r1, #0
 800d014:	f859 3b04 	ldr.w	r3, [r9], #4
 800d018:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d01c:	fa11 f88b 	uxtah	r8, r1, fp
 800d020:	b299      	uxth	r1, r3
 800d022:	0c1b      	lsrs	r3, r3, #16
 800d024:	eba8 0801 	sub.w	r8, r8, r1
 800d028:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d02c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d030:	fa1f f888 	uxth.w	r8, r8
 800d034:	1419      	asrs	r1, r3, #16
 800d036:	454e      	cmp	r6, r9
 800d038:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d03c:	f84a 3b04 	str.w	r3, [sl], #4
 800d040:	d8e8      	bhi.n	800d014 <__mdiff+0x80>
 800d042:	1b33      	subs	r3, r6, r4
 800d044:	3b15      	subs	r3, #21
 800d046:	f023 0303 	bic.w	r3, r3, #3
 800d04a:	3304      	adds	r3, #4
 800d04c:	3415      	adds	r4, #21
 800d04e:	42a6      	cmp	r6, r4
 800d050:	bf38      	it	cc
 800d052:	2304      	movcc	r3, #4
 800d054:	441d      	add	r5, r3
 800d056:	4473      	add	r3, lr
 800d058:	469e      	mov	lr, r3
 800d05a:	462e      	mov	r6, r5
 800d05c:	4566      	cmp	r6, ip
 800d05e:	d30e      	bcc.n	800d07e <__mdiff+0xea>
 800d060:	f10c 0203 	add.w	r2, ip, #3
 800d064:	1b52      	subs	r2, r2, r5
 800d066:	f022 0203 	bic.w	r2, r2, #3
 800d06a:	3d03      	subs	r5, #3
 800d06c:	45ac      	cmp	ip, r5
 800d06e:	bf38      	it	cc
 800d070:	2200      	movcc	r2, #0
 800d072:	4413      	add	r3, r2
 800d074:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d078:	b17a      	cbz	r2, 800d09a <__mdiff+0x106>
 800d07a:	6107      	str	r7, [r0, #16]
 800d07c:	e7a4      	b.n	800cfc8 <__mdiff+0x34>
 800d07e:	f856 8b04 	ldr.w	r8, [r6], #4
 800d082:	fa11 f288 	uxtah	r2, r1, r8
 800d086:	1414      	asrs	r4, r2, #16
 800d088:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d08c:	b292      	uxth	r2, r2
 800d08e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d092:	f84e 2b04 	str.w	r2, [lr], #4
 800d096:	1421      	asrs	r1, r4, #16
 800d098:	e7e0      	b.n	800d05c <__mdiff+0xc8>
 800d09a:	3f01      	subs	r7, #1
 800d09c:	e7ea      	b.n	800d074 <__mdiff+0xe0>
 800d09e:	bf00      	nop
 800d0a0:	08010c74 	.word	0x08010c74
 800d0a4:	08010c85 	.word	0x08010c85

0800d0a8 <__d2b>:
 800d0a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0ac:	460f      	mov	r7, r1
 800d0ae:	2101      	movs	r1, #1
 800d0b0:	ec59 8b10 	vmov	r8, r9, d0
 800d0b4:	4616      	mov	r6, r2
 800d0b6:	f7ff fcd5 	bl	800ca64 <_Balloc>
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	b930      	cbnz	r0, 800d0cc <__d2b+0x24>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	4b24      	ldr	r3, [pc, #144]	; (800d154 <__d2b+0xac>)
 800d0c2:	4825      	ldr	r0, [pc, #148]	; (800d158 <__d2b+0xb0>)
 800d0c4:	f240 310f 	movw	r1, #783	; 0x30f
 800d0c8:	f000 fa5e 	bl	800d588 <__assert_func>
 800d0cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d0d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0d4:	bb2d      	cbnz	r5, 800d122 <__d2b+0x7a>
 800d0d6:	9301      	str	r3, [sp, #4]
 800d0d8:	f1b8 0300 	subs.w	r3, r8, #0
 800d0dc:	d026      	beq.n	800d12c <__d2b+0x84>
 800d0de:	4668      	mov	r0, sp
 800d0e0:	9300      	str	r3, [sp, #0]
 800d0e2:	f7ff fd87 	bl	800cbf4 <__lo0bits>
 800d0e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d0ea:	b1e8      	cbz	r0, 800d128 <__d2b+0x80>
 800d0ec:	f1c0 0320 	rsb	r3, r0, #32
 800d0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d0f4:	430b      	orrs	r3, r1
 800d0f6:	40c2      	lsrs	r2, r0
 800d0f8:	6163      	str	r3, [r4, #20]
 800d0fa:	9201      	str	r2, [sp, #4]
 800d0fc:	9b01      	ldr	r3, [sp, #4]
 800d0fe:	61a3      	str	r3, [r4, #24]
 800d100:	2b00      	cmp	r3, #0
 800d102:	bf14      	ite	ne
 800d104:	2202      	movne	r2, #2
 800d106:	2201      	moveq	r2, #1
 800d108:	6122      	str	r2, [r4, #16]
 800d10a:	b1bd      	cbz	r5, 800d13c <__d2b+0x94>
 800d10c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d110:	4405      	add	r5, r0
 800d112:	603d      	str	r5, [r7, #0]
 800d114:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d118:	6030      	str	r0, [r6, #0]
 800d11a:	4620      	mov	r0, r4
 800d11c:	b003      	add	sp, #12
 800d11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d126:	e7d6      	b.n	800d0d6 <__d2b+0x2e>
 800d128:	6161      	str	r1, [r4, #20]
 800d12a:	e7e7      	b.n	800d0fc <__d2b+0x54>
 800d12c:	a801      	add	r0, sp, #4
 800d12e:	f7ff fd61 	bl	800cbf4 <__lo0bits>
 800d132:	9b01      	ldr	r3, [sp, #4]
 800d134:	6163      	str	r3, [r4, #20]
 800d136:	3020      	adds	r0, #32
 800d138:	2201      	movs	r2, #1
 800d13a:	e7e5      	b.n	800d108 <__d2b+0x60>
 800d13c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d140:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d144:	6038      	str	r0, [r7, #0]
 800d146:	6918      	ldr	r0, [r3, #16]
 800d148:	f7ff fd34 	bl	800cbb4 <__hi0bits>
 800d14c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d150:	e7e2      	b.n	800d118 <__d2b+0x70>
 800d152:	bf00      	nop
 800d154:	08010c74 	.word	0x08010c74
 800d158:	08010c85 	.word	0x08010c85

0800d15c <__ssputs_r>:
 800d15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d160:	688e      	ldr	r6, [r1, #8]
 800d162:	461f      	mov	r7, r3
 800d164:	42be      	cmp	r6, r7
 800d166:	680b      	ldr	r3, [r1, #0]
 800d168:	4682      	mov	sl, r0
 800d16a:	460c      	mov	r4, r1
 800d16c:	4690      	mov	r8, r2
 800d16e:	d82c      	bhi.n	800d1ca <__ssputs_r+0x6e>
 800d170:	898a      	ldrh	r2, [r1, #12]
 800d172:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d176:	d026      	beq.n	800d1c6 <__ssputs_r+0x6a>
 800d178:	6965      	ldr	r5, [r4, #20]
 800d17a:	6909      	ldr	r1, [r1, #16]
 800d17c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d180:	eba3 0901 	sub.w	r9, r3, r1
 800d184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d188:	1c7b      	adds	r3, r7, #1
 800d18a:	444b      	add	r3, r9
 800d18c:	106d      	asrs	r5, r5, #1
 800d18e:	429d      	cmp	r5, r3
 800d190:	bf38      	it	cc
 800d192:	461d      	movcc	r5, r3
 800d194:	0553      	lsls	r3, r2, #21
 800d196:	d527      	bpl.n	800d1e8 <__ssputs_r+0x8c>
 800d198:	4629      	mov	r1, r5
 800d19a:	f7ff fbd7 	bl	800c94c <_malloc_r>
 800d19e:	4606      	mov	r6, r0
 800d1a0:	b360      	cbz	r0, 800d1fc <__ssputs_r+0xa0>
 800d1a2:	6921      	ldr	r1, [r4, #16]
 800d1a4:	464a      	mov	r2, r9
 800d1a6:	f7fe fcd2 	bl	800bb4e <memcpy>
 800d1aa:	89a3      	ldrh	r3, [r4, #12]
 800d1ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d1b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1b4:	81a3      	strh	r3, [r4, #12]
 800d1b6:	6126      	str	r6, [r4, #16]
 800d1b8:	6165      	str	r5, [r4, #20]
 800d1ba:	444e      	add	r6, r9
 800d1bc:	eba5 0509 	sub.w	r5, r5, r9
 800d1c0:	6026      	str	r6, [r4, #0]
 800d1c2:	60a5      	str	r5, [r4, #8]
 800d1c4:	463e      	mov	r6, r7
 800d1c6:	42be      	cmp	r6, r7
 800d1c8:	d900      	bls.n	800d1cc <__ssputs_r+0x70>
 800d1ca:	463e      	mov	r6, r7
 800d1cc:	6820      	ldr	r0, [r4, #0]
 800d1ce:	4632      	mov	r2, r6
 800d1d0:	4641      	mov	r1, r8
 800d1d2:	f7fe fc22 	bl	800ba1a <memmove>
 800d1d6:	68a3      	ldr	r3, [r4, #8]
 800d1d8:	1b9b      	subs	r3, r3, r6
 800d1da:	60a3      	str	r3, [r4, #8]
 800d1dc:	6823      	ldr	r3, [r4, #0]
 800d1de:	4433      	add	r3, r6
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	2000      	movs	r0, #0
 800d1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e8:	462a      	mov	r2, r5
 800d1ea:	f000 fa13 	bl	800d614 <_realloc_r>
 800d1ee:	4606      	mov	r6, r0
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	d1e0      	bne.n	800d1b6 <__ssputs_r+0x5a>
 800d1f4:	6921      	ldr	r1, [r4, #16]
 800d1f6:	4650      	mov	r0, sl
 800d1f8:	f7ff fb34 	bl	800c864 <_free_r>
 800d1fc:	230c      	movs	r3, #12
 800d1fe:	f8ca 3000 	str.w	r3, [sl]
 800d202:	89a3      	ldrh	r3, [r4, #12]
 800d204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d208:	81a3      	strh	r3, [r4, #12]
 800d20a:	f04f 30ff 	mov.w	r0, #4294967295
 800d20e:	e7e9      	b.n	800d1e4 <__ssputs_r+0x88>

0800d210 <_svfiprintf_r>:
 800d210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d214:	4698      	mov	r8, r3
 800d216:	898b      	ldrh	r3, [r1, #12]
 800d218:	061b      	lsls	r3, r3, #24
 800d21a:	b09d      	sub	sp, #116	; 0x74
 800d21c:	4607      	mov	r7, r0
 800d21e:	460d      	mov	r5, r1
 800d220:	4614      	mov	r4, r2
 800d222:	d50e      	bpl.n	800d242 <_svfiprintf_r+0x32>
 800d224:	690b      	ldr	r3, [r1, #16]
 800d226:	b963      	cbnz	r3, 800d242 <_svfiprintf_r+0x32>
 800d228:	2140      	movs	r1, #64	; 0x40
 800d22a:	f7ff fb8f 	bl	800c94c <_malloc_r>
 800d22e:	6028      	str	r0, [r5, #0]
 800d230:	6128      	str	r0, [r5, #16]
 800d232:	b920      	cbnz	r0, 800d23e <_svfiprintf_r+0x2e>
 800d234:	230c      	movs	r3, #12
 800d236:	603b      	str	r3, [r7, #0]
 800d238:	f04f 30ff 	mov.w	r0, #4294967295
 800d23c:	e0d0      	b.n	800d3e0 <_svfiprintf_r+0x1d0>
 800d23e:	2340      	movs	r3, #64	; 0x40
 800d240:	616b      	str	r3, [r5, #20]
 800d242:	2300      	movs	r3, #0
 800d244:	9309      	str	r3, [sp, #36]	; 0x24
 800d246:	2320      	movs	r3, #32
 800d248:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d24c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d250:	2330      	movs	r3, #48	; 0x30
 800d252:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d3f8 <_svfiprintf_r+0x1e8>
 800d256:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d25a:	f04f 0901 	mov.w	r9, #1
 800d25e:	4623      	mov	r3, r4
 800d260:	469a      	mov	sl, r3
 800d262:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d266:	b10a      	cbz	r2, 800d26c <_svfiprintf_r+0x5c>
 800d268:	2a25      	cmp	r2, #37	; 0x25
 800d26a:	d1f9      	bne.n	800d260 <_svfiprintf_r+0x50>
 800d26c:	ebba 0b04 	subs.w	fp, sl, r4
 800d270:	d00b      	beq.n	800d28a <_svfiprintf_r+0x7a>
 800d272:	465b      	mov	r3, fp
 800d274:	4622      	mov	r2, r4
 800d276:	4629      	mov	r1, r5
 800d278:	4638      	mov	r0, r7
 800d27a:	f7ff ff6f 	bl	800d15c <__ssputs_r>
 800d27e:	3001      	adds	r0, #1
 800d280:	f000 80a9 	beq.w	800d3d6 <_svfiprintf_r+0x1c6>
 800d284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d286:	445a      	add	r2, fp
 800d288:	9209      	str	r2, [sp, #36]	; 0x24
 800d28a:	f89a 3000 	ldrb.w	r3, [sl]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	f000 80a1 	beq.w	800d3d6 <_svfiprintf_r+0x1c6>
 800d294:	2300      	movs	r3, #0
 800d296:	f04f 32ff 	mov.w	r2, #4294967295
 800d29a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d29e:	f10a 0a01 	add.w	sl, sl, #1
 800d2a2:	9304      	str	r3, [sp, #16]
 800d2a4:	9307      	str	r3, [sp, #28]
 800d2a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2aa:	931a      	str	r3, [sp, #104]	; 0x68
 800d2ac:	4654      	mov	r4, sl
 800d2ae:	2205      	movs	r2, #5
 800d2b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2b4:	4850      	ldr	r0, [pc, #320]	; (800d3f8 <_svfiprintf_r+0x1e8>)
 800d2b6:	f7f2 ff93 	bl	80001e0 <memchr>
 800d2ba:	9a04      	ldr	r2, [sp, #16]
 800d2bc:	b9d8      	cbnz	r0, 800d2f6 <_svfiprintf_r+0xe6>
 800d2be:	06d0      	lsls	r0, r2, #27
 800d2c0:	bf44      	itt	mi
 800d2c2:	2320      	movmi	r3, #32
 800d2c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2c8:	0711      	lsls	r1, r2, #28
 800d2ca:	bf44      	itt	mi
 800d2cc:	232b      	movmi	r3, #43	; 0x2b
 800d2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2d2:	f89a 3000 	ldrb.w	r3, [sl]
 800d2d6:	2b2a      	cmp	r3, #42	; 0x2a
 800d2d8:	d015      	beq.n	800d306 <_svfiprintf_r+0xf6>
 800d2da:	9a07      	ldr	r2, [sp, #28]
 800d2dc:	4654      	mov	r4, sl
 800d2de:	2000      	movs	r0, #0
 800d2e0:	f04f 0c0a 	mov.w	ip, #10
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2ea:	3b30      	subs	r3, #48	; 0x30
 800d2ec:	2b09      	cmp	r3, #9
 800d2ee:	d94d      	bls.n	800d38c <_svfiprintf_r+0x17c>
 800d2f0:	b1b0      	cbz	r0, 800d320 <_svfiprintf_r+0x110>
 800d2f2:	9207      	str	r2, [sp, #28]
 800d2f4:	e014      	b.n	800d320 <_svfiprintf_r+0x110>
 800d2f6:	eba0 0308 	sub.w	r3, r0, r8
 800d2fa:	fa09 f303 	lsl.w	r3, r9, r3
 800d2fe:	4313      	orrs	r3, r2
 800d300:	9304      	str	r3, [sp, #16]
 800d302:	46a2      	mov	sl, r4
 800d304:	e7d2      	b.n	800d2ac <_svfiprintf_r+0x9c>
 800d306:	9b03      	ldr	r3, [sp, #12]
 800d308:	1d19      	adds	r1, r3, #4
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	9103      	str	r1, [sp, #12]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	bfbb      	ittet	lt
 800d312:	425b      	neglt	r3, r3
 800d314:	f042 0202 	orrlt.w	r2, r2, #2
 800d318:	9307      	strge	r3, [sp, #28]
 800d31a:	9307      	strlt	r3, [sp, #28]
 800d31c:	bfb8      	it	lt
 800d31e:	9204      	strlt	r2, [sp, #16]
 800d320:	7823      	ldrb	r3, [r4, #0]
 800d322:	2b2e      	cmp	r3, #46	; 0x2e
 800d324:	d10c      	bne.n	800d340 <_svfiprintf_r+0x130>
 800d326:	7863      	ldrb	r3, [r4, #1]
 800d328:	2b2a      	cmp	r3, #42	; 0x2a
 800d32a:	d134      	bne.n	800d396 <_svfiprintf_r+0x186>
 800d32c:	9b03      	ldr	r3, [sp, #12]
 800d32e:	1d1a      	adds	r2, r3, #4
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	9203      	str	r2, [sp, #12]
 800d334:	2b00      	cmp	r3, #0
 800d336:	bfb8      	it	lt
 800d338:	f04f 33ff 	movlt.w	r3, #4294967295
 800d33c:	3402      	adds	r4, #2
 800d33e:	9305      	str	r3, [sp, #20]
 800d340:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d408 <_svfiprintf_r+0x1f8>
 800d344:	7821      	ldrb	r1, [r4, #0]
 800d346:	2203      	movs	r2, #3
 800d348:	4650      	mov	r0, sl
 800d34a:	f7f2 ff49 	bl	80001e0 <memchr>
 800d34e:	b138      	cbz	r0, 800d360 <_svfiprintf_r+0x150>
 800d350:	9b04      	ldr	r3, [sp, #16]
 800d352:	eba0 000a 	sub.w	r0, r0, sl
 800d356:	2240      	movs	r2, #64	; 0x40
 800d358:	4082      	lsls	r2, r0
 800d35a:	4313      	orrs	r3, r2
 800d35c:	3401      	adds	r4, #1
 800d35e:	9304      	str	r3, [sp, #16]
 800d360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d364:	4825      	ldr	r0, [pc, #148]	; (800d3fc <_svfiprintf_r+0x1ec>)
 800d366:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d36a:	2206      	movs	r2, #6
 800d36c:	f7f2 ff38 	bl	80001e0 <memchr>
 800d370:	2800      	cmp	r0, #0
 800d372:	d038      	beq.n	800d3e6 <_svfiprintf_r+0x1d6>
 800d374:	4b22      	ldr	r3, [pc, #136]	; (800d400 <_svfiprintf_r+0x1f0>)
 800d376:	bb1b      	cbnz	r3, 800d3c0 <_svfiprintf_r+0x1b0>
 800d378:	9b03      	ldr	r3, [sp, #12]
 800d37a:	3307      	adds	r3, #7
 800d37c:	f023 0307 	bic.w	r3, r3, #7
 800d380:	3308      	adds	r3, #8
 800d382:	9303      	str	r3, [sp, #12]
 800d384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d386:	4433      	add	r3, r6
 800d388:	9309      	str	r3, [sp, #36]	; 0x24
 800d38a:	e768      	b.n	800d25e <_svfiprintf_r+0x4e>
 800d38c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d390:	460c      	mov	r4, r1
 800d392:	2001      	movs	r0, #1
 800d394:	e7a6      	b.n	800d2e4 <_svfiprintf_r+0xd4>
 800d396:	2300      	movs	r3, #0
 800d398:	3401      	adds	r4, #1
 800d39a:	9305      	str	r3, [sp, #20]
 800d39c:	4619      	mov	r1, r3
 800d39e:	f04f 0c0a 	mov.w	ip, #10
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3a8:	3a30      	subs	r2, #48	; 0x30
 800d3aa:	2a09      	cmp	r2, #9
 800d3ac:	d903      	bls.n	800d3b6 <_svfiprintf_r+0x1a6>
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d0c6      	beq.n	800d340 <_svfiprintf_r+0x130>
 800d3b2:	9105      	str	r1, [sp, #20]
 800d3b4:	e7c4      	b.n	800d340 <_svfiprintf_r+0x130>
 800d3b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	2301      	movs	r3, #1
 800d3be:	e7f0      	b.n	800d3a2 <_svfiprintf_r+0x192>
 800d3c0:	ab03      	add	r3, sp, #12
 800d3c2:	9300      	str	r3, [sp, #0]
 800d3c4:	462a      	mov	r2, r5
 800d3c6:	4b0f      	ldr	r3, [pc, #60]	; (800d404 <_svfiprintf_r+0x1f4>)
 800d3c8:	a904      	add	r1, sp, #16
 800d3ca:	4638      	mov	r0, r7
 800d3cc:	f7fd fe3a 	bl	800b044 <_printf_float>
 800d3d0:	1c42      	adds	r2, r0, #1
 800d3d2:	4606      	mov	r6, r0
 800d3d4:	d1d6      	bne.n	800d384 <_svfiprintf_r+0x174>
 800d3d6:	89ab      	ldrh	r3, [r5, #12]
 800d3d8:	065b      	lsls	r3, r3, #25
 800d3da:	f53f af2d 	bmi.w	800d238 <_svfiprintf_r+0x28>
 800d3de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3e0:	b01d      	add	sp, #116	; 0x74
 800d3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e6:	ab03      	add	r3, sp, #12
 800d3e8:	9300      	str	r3, [sp, #0]
 800d3ea:	462a      	mov	r2, r5
 800d3ec:	4b05      	ldr	r3, [pc, #20]	; (800d404 <_svfiprintf_r+0x1f4>)
 800d3ee:	a904      	add	r1, sp, #16
 800d3f0:	4638      	mov	r0, r7
 800d3f2:	f7fe f8cb 	bl	800b58c <_printf_i>
 800d3f6:	e7eb      	b.n	800d3d0 <_svfiprintf_r+0x1c0>
 800d3f8:	08010ddc 	.word	0x08010ddc
 800d3fc:	08010de6 	.word	0x08010de6
 800d400:	0800b045 	.word	0x0800b045
 800d404:	0800d15d 	.word	0x0800d15d
 800d408:	08010de2 	.word	0x08010de2

0800d40c <__sflush_r>:
 800d40c:	898a      	ldrh	r2, [r1, #12]
 800d40e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d412:	4605      	mov	r5, r0
 800d414:	0710      	lsls	r0, r2, #28
 800d416:	460c      	mov	r4, r1
 800d418:	d458      	bmi.n	800d4cc <__sflush_r+0xc0>
 800d41a:	684b      	ldr	r3, [r1, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	dc05      	bgt.n	800d42c <__sflush_r+0x20>
 800d420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d422:	2b00      	cmp	r3, #0
 800d424:	dc02      	bgt.n	800d42c <__sflush_r+0x20>
 800d426:	2000      	movs	r0, #0
 800d428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d42c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d42e:	2e00      	cmp	r6, #0
 800d430:	d0f9      	beq.n	800d426 <__sflush_r+0x1a>
 800d432:	2300      	movs	r3, #0
 800d434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d438:	682f      	ldr	r7, [r5, #0]
 800d43a:	6a21      	ldr	r1, [r4, #32]
 800d43c:	602b      	str	r3, [r5, #0]
 800d43e:	d032      	beq.n	800d4a6 <__sflush_r+0x9a>
 800d440:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d442:	89a3      	ldrh	r3, [r4, #12]
 800d444:	075a      	lsls	r2, r3, #29
 800d446:	d505      	bpl.n	800d454 <__sflush_r+0x48>
 800d448:	6863      	ldr	r3, [r4, #4]
 800d44a:	1ac0      	subs	r0, r0, r3
 800d44c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d44e:	b10b      	cbz	r3, 800d454 <__sflush_r+0x48>
 800d450:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d452:	1ac0      	subs	r0, r0, r3
 800d454:	2300      	movs	r3, #0
 800d456:	4602      	mov	r2, r0
 800d458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d45a:	6a21      	ldr	r1, [r4, #32]
 800d45c:	4628      	mov	r0, r5
 800d45e:	47b0      	blx	r6
 800d460:	1c43      	adds	r3, r0, #1
 800d462:	89a3      	ldrh	r3, [r4, #12]
 800d464:	d106      	bne.n	800d474 <__sflush_r+0x68>
 800d466:	6829      	ldr	r1, [r5, #0]
 800d468:	291d      	cmp	r1, #29
 800d46a:	d82b      	bhi.n	800d4c4 <__sflush_r+0xb8>
 800d46c:	4a29      	ldr	r2, [pc, #164]	; (800d514 <__sflush_r+0x108>)
 800d46e:	410a      	asrs	r2, r1
 800d470:	07d6      	lsls	r6, r2, #31
 800d472:	d427      	bmi.n	800d4c4 <__sflush_r+0xb8>
 800d474:	2200      	movs	r2, #0
 800d476:	6062      	str	r2, [r4, #4]
 800d478:	04d9      	lsls	r1, r3, #19
 800d47a:	6922      	ldr	r2, [r4, #16]
 800d47c:	6022      	str	r2, [r4, #0]
 800d47e:	d504      	bpl.n	800d48a <__sflush_r+0x7e>
 800d480:	1c42      	adds	r2, r0, #1
 800d482:	d101      	bne.n	800d488 <__sflush_r+0x7c>
 800d484:	682b      	ldr	r3, [r5, #0]
 800d486:	b903      	cbnz	r3, 800d48a <__sflush_r+0x7e>
 800d488:	6560      	str	r0, [r4, #84]	; 0x54
 800d48a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d48c:	602f      	str	r7, [r5, #0]
 800d48e:	2900      	cmp	r1, #0
 800d490:	d0c9      	beq.n	800d426 <__sflush_r+0x1a>
 800d492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d496:	4299      	cmp	r1, r3
 800d498:	d002      	beq.n	800d4a0 <__sflush_r+0x94>
 800d49a:	4628      	mov	r0, r5
 800d49c:	f7ff f9e2 	bl	800c864 <_free_r>
 800d4a0:	2000      	movs	r0, #0
 800d4a2:	6360      	str	r0, [r4, #52]	; 0x34
 800d4a4:	e7c0      	b.n	800d428 <__sflush_r+0x1c>
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	47b0      	blx	r6
 800d4ac:	1c41      	adds	r1, r0, #1
 800d4ae:	d1c8      	bne.n	800d442 <__sflush_r+0x36>
 800d4b0:	682b      	ldr	r3, [r5, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d0c5      	beq.n	800d442 <__sflush_r+0x36>
 800d4b6:	2b1d      	cmp	r3, #29
 800d4b8:	d001      	beq.n	800d4be <__sflush_r+0xb2>
 800d4ba:	2b16      	cmp	r3, #22
 800d4bc:	d101      	bne.n	800d4c2 <__sflush_r+0xb6>
 800d4be:	602f      	str	r7, [r5, #0]
 800d4c0:	e7b1      	b.n	800d426 <__sflush_r+0x1a>
 800d4c2:	89a3      	ldrh	r3, [r4, #12]
 800d4c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4c8:	81a3      	strh	r3, [r4, #12]
 800d4ca:	e7ad      	b.n	800d428 <__sflush_r+0x1c>
 800d4cc:	690f      	ldr	r7, [r1, #16]
 800d4ce:	2f00      	cmp	r7, #0
 800d4d0:	d0a9      	beq.n	800d426 <__sflush_r+0x1a>
 800d4d2:	0793      	lsls	r3, r2, #30
 800d4d4:	680e      	ldr	r6, [r1, #0]
 800d4d6:	bf08      	it	eq
 800d4d8:	694b      	ldreq	r3, [r1, #20]
 800d4da:	600f      	str	r7, [r1, #0]
 800d4dc:	bf18      	it	ne
 800d4de:	2300      	movne	r3, #0
 800d4e0:	eba6 0807 	sub.w	r8, r6, r7
 800d4e4:	608b      	str	r3, [r1, #8]
 800d4e6:	f1b8 0f00 	cmp.w	r8, #0
 800d4ea:	dd9c      	ble.n	800d426 <__sflush_r+0x1a>
 800d4ec:	6a21      	ldr	r1, [r4, #32]
 800d4ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d4f0:	4643      	mov	r3, r8
 800d4f2:	463a      	mov	r2, r7
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	47b0      	blx	r6
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	dc06      	bgt.n	800d50a <__sflush_r+0xfe>
 800d4fc:	89a3      	ldrh	r3, [r4, #12]
 800d4fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d502:	81a3      	strh	r3, [r4, #12]
 800d504:	f04f 30ff 	mov.w	r0, #4294967295
 800d508:	e78e      	b.n	800d428 <__sflush_r+0x1c>
 800d50a:	4407      	add	r7, r0
 800d50c:	eba8 0800 	sub.w	r8, r8, r0
 800d510:	e7e9      	b.n	800d4e6 <__sflush_r+0xda>
 800d512:	bf00      	nop
 800d514:	dfbffffe 	.word	0xdfbffffe

0800d518 <_fflush_r>:
 800d518:	b538      	push	{r3, r4, r5, lr}
 800d51a:	690b      	ldr	r3, [r1, #16]
 800d51c:	4605      	mov	r5, r0
 800d51e:	460c      	mov	r4, r1
 800d520:	b913      	cbnz	r3, 800d528 <_fflush_r+0x10>
 800d522:	2500      	movs	r5, #0
 800d524:	4628      	mov	r0, r5
 800d526:	bd38      	pop	{r3, r4, r5, pc}
 800d528:	b118      	cbz	r0, 800d532 <_fflush_r+0x1a>
 800d52a:	6a03      	ldr	r3, [r0, #32]
 800d52c:	b90b      	cbnz	r3, 800d532 <_fflush_r+0x1a>
 800d52e:	f7fe f9db 	bl	800b8e8 <__sinit>
 800d532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d0f3      	beq.n	800d522 <_fflush_r+0xa>
 800d53a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d53c:	07d0      	lsls	r0, r2, #31
 800d53e:	d404      	bmi.n	800d54a <_fflush_r+0x32>
 800d540:	0599      	lsls	r1, r3, #22
 800d542:	d402      	bmi.n	800d54a <_fflush_r+0x32>
 800d544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d546:	f7fe fb00 	bl	800bb4a <__retarget_lock_acquire_recursive>
 800d54a:	4628      	mov	r0, r5
 800d54c:	4621      	mov	r1, r4
 800d54e:	f7ff ff5d 	bl	800d40c <__sflush_r>
 800d552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d554:	07da      	lsls	r2, r3, #31
 800d556:	4605      	mov	r5, r0
 800d558:	d4e4      	bmi.n	800d524 <_fflush_r+0xc>
 800d55a:	89a3      	ldrh	r3, [r4, #12]
 800d55c:	059b      	lsls	r3, r3, #22
 800d55e:	d4e1      	bmi.n	800d524 <_fflush_r+0xc>
 800d560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d562:	f7fe faf3 	bl	800bb4c <__retarget_lock_release_recursive>
 800d566:	e7dd      	b.n	800d524 <_fflush_r+0xc>

0800d568 <_sbrk_r>:
 800d568:	b538      	push	{r3, r4, r5, lr}
 800d56a:	4d06      	ldr	r5, [pc, #24]	; (800d584 <_sbrk_r+0x1c>)
 800d56c:	2300      	movs	r3, #0
 800d56e:	4604      	mov	r4, r0
 800d570:	4608      	mov	r0, r1
 800d572:	602b      	str	r3, [r5, #0]
 800d574:	f7f5 fc48 	bl	8002e08 <_sbrk>
 800d578:	1c43      	adds	r3, r0, #1
 800d57a:	d102      	bne.n	800d582 <_sbrk_r+0x1a>
 800d57c:	682b      	ldr	r3, [r5, #0]
 800d57e:	b103      	cbz	r3, 800d582 <_sbrk_r+0x1a>
 800d580:	6023      	str	r3, [r4, #0]
 800d582:	bd38      	pop	{r3, r4, r5, pc}
 800d584:	20001a0c 	.word	0x20001a0c

0800d588 <__assert_func>:
 800d588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d58a:	4614      	mov	r4, r2
 800d58c:	461a      	mov	r2, r3
 800d58e:	4b09      	ldr	r3, [pc, #36]	; (800d5b4 <__assert_func+0x2c>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4605      	mov	r5, r0
 800d594:	68d8      	ldr	r0, [r3, #12]
 800d596:	b14c      	cbz	r4, 800d5ac <__assert_func+0x24>
 800d598:	4b07      	ldr	r3, [pc, #28]	; (800d5b8 <__assert_func+0x30>)
 800d59a:	9100      	str	r1, [sp, #0]
 800d59c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5a0:	4906      	ldr	r1, [pc, #24]	; (800d5bc <__assert_func+0x34>)
 800d5a2:	462b      	mov	r3, r5
 800d5a4:	f000 f872 	bl	800d68c <fiprintf>
 800d5a8:	f000 f882 	bl	800d6b0 <abort>
 800d5ac:	4b04      	ldr	r3, [pc, #16]	; (800d5c0 <__assert_func+0x38>)
 800d5ae:	461c      	mov	r4, r3
 800d5b0:	e7f3      	b.n	800d59a <__assert_func+0x12>
 800d5b2:	bf00      	nop
 800d5b4:	20000710 	.word	0x20000710
 800d5b8:	08010df7 	.word	0x08010df7
 800d5bc:	08010e04 	.word	0x08010e04
 800d5c0:	08010e32 	.word	0x08010e32

0800d5c4 <_calloc_r>:
 800d5c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5c6:	fba1 2402 	umull	r2, r4, r1, r2
 800d5ca:	b94c      	cbnz	r4, 800d5e0 <_calloc_r+0x1c>
 800d5cc:	4611      	mov	r1, r2
 800d5ce:	9201      	str	r2, [sp, #4]
 800d5d0:	f7ff f9bc 	bl	800c94c <_malloc_r>
 800d5d4:	9a01      	ldr	r2, [sp, #4]
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	b930      	cbnz	r0, 800d5e8 <_calloc_r+0x24>
 800d5da:	4628      	mov	r0, r5
 800d5dc:	b003      	add	sp, #12
 800d5de:	bd30      	pop	{r4, r5, pc}
 800d5e0:	220c      	movs	r2, #12
 800d5e2:	6002      	str	r2, [r0, #0]
 800d5e4:	2500      	movs	r5, #0
 800d5e6:	e7f8      	b.n	800d5da <_calloc_r+0x16>
 800d5e8:	4621      	mov	r1, r4
 800d5ea:	f7fe fa30 	bl	800ba4e <memset>
 800d5ee:	e7f4      	b.n	800d5da <_calloc_r+0x16>

0800d5f0 <__ascii_mbtowc>:
 800d5f0:	b082      	sub	sp, #8
 800d5f2:	b901      	cbnz	r1, 800d5f6 <__ascii_mbtowc+0x6>
 800d5f4:	a901      	add	r1, sp, #4
 800d5f6:	b142      	cbz	r2, 800d60a <__ascii_mbtowc+0x1a>
 800d5f8:	b14b      	cbz	r3, 800d60e <__ascii_mbtowc+0x1e>
 800d5fa:	7813      	ldrb	r3, [r2, #0]
 800d5fc:	600b      	str	r3, [r1, #0]
 800d5fe:	7812      	ldrb	r2, [r2, #0]
 800d600:	1e10      	subs	r0, r2, #0
 800d602:	bf18      	it	ne
 800d604:	2001      	movne	r0, #1
 800d606:	b002      	add	sp, #8
 800d608:	4770      	bx	lr
 800d60a:	4610      	mov	r0, r2
 800d60c:	e7fb      	b.n	800d606 <__ascii_mbtowc+0x16>
 800d60e:	f06f 0001 	mvn.w	r0, #1
 800d612:	e7f8      	b.n	800d606 <__ascii_mbtowc+0x16>

0800d614 <_realloc_r>:
 800d614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d618:	4680      	mov	r8, r0
 800d61a:	4614      	mov	r4, r2
 800d61c:	460e      	mov	r6, r1
 800d61e:	b921      	cbnz	r1, 800d62a <_realloc_r+0x16>
 800d620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d624:	4611      	mov	r1, r2
 800d626:	f7ff b991 	b.w	800c94c <_malloc_r>
 800d62a:	b92a      	cbnz	r2, 800d638 <_realloc_r+0x24>
 800d62c:	f7ff f91a 	bl	800c864 <_free_r>
 800d630:	4625      	mov	r5, r4
 800d632:	4628      	mov	r0, r5
 800d634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d638:	f000 f841 	bl	800d6be <_malloc_usable_size_r>
 800d63c:	4284      	cmp	r4, r0
 800d63e:	4607      	mov	r7, r0
 800d640:	d802      	bhi.n	800d648 <_realloc_r+0x34>
 800d642:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d646:	d812      	bhi.n	800d66e <_realloc_r+0x5a>
 800d648:	4621      	mov	r1, r4
 800d64a:	4640      	mov	r0, r8
 800d64c:	f7ff f97e 	bl	800c94c <_malloc_r>
 800d650:	4605      	mov	r5, r0
 800d652:	2800      	cmp	r0, #0
 800d654:	d0ed      	beq.n	800d632 <_realloc_r+0x1e>
 800d656:	42bc      	cmp	r4, r7
 800d658:	4622      	mov	r2, r4
 800d65a:	4631      	mov	r1, r6
 800d65c:	bf28      	it	cs
 800d65e:	463a      	movcs	r2, r7
 800d660:	f7fe fa75 	bl	800bb4e <memcpy>
 800d664:	4631      	mov	r1, r6
 800d666:	4640      	mov	r0, r8
 800d668:	f7ff f8fc 	bl	800c864 <_free_r>
 800d66c:	e7e1      	b.n	800d632 <_realloc_r+0x1e>
 800d66e:	4635      	mov	r5, r6
 800d670:	e7df      	b.n	800d632 <_realloc_r+0x1e>

0800d672 <__ascii_wctomb>:
 800d672:	b149      	cbz	r1, 800d688 <__ascii_wctomb+0x16>
 800d674:	2aff      	cmp	r2, #255	; 0xff
 800d676:	bf85      	ittet	hi
 800d678:	238a      	movhi	r3, #138	; 0x8a
 800d67a:	6003      	strhi	r3, [r0, #0]
 800d67c:	700a      	strbls	r2, [r1, #0]
 800d67e:	f04f 30ff 	movhi.w	r0, #4294967295
 800d682:	bf98      	it	ls
 800d684:	2001      	movls	r0, #1
 800d686:	4770      	bx	lr
 800d688:	4608      	mov	r0, r1
 800d68a:	4770      	bx	lr

0800d68c <fiprintf>:
 800d68c:	b40e      	push	{r1, r2, r3}
 800d68e:	b503      	push	{r0, r1, lr}
 800d690:	4601      	mov	r1, r0
 800d692:	ab03      	add	r3, sp, #12
 800d694:	4805      	ldr	r0, [pc, #20]	; (800d6ac <fiprintf+0x20>)
 800d696:	f853 2b04 	ldr.w	r2, [r3], #4
 800d69a:	6800      	ldr	r0, [r0, #0]
 800d69c:	9301      	str	r3, [sp, #4]
 800d69e:	f000 f83f 	bl	800d720 <_vfiprintf_r>
 800d6a2:	b002      	add	sp, #8
 800d6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6a8:	b003      	add	sp, #12
 800d6aa:	4770      	bx	lr
 800d6ac:	20000710 	.word	0x20000710

0800d6b0 <abort>:
 800d6b0:	b508      	push	{r3, lr}
 800d6b2:	2006      	movs	r0, #6
 800d6b4:	f000 fa0c 	bl	800dad0 <raise>
 800d6b8:	2001      	movs	r0, #1
 800d6ba:	f7f5 fb2d 	bl	8002d18 <_exit>

0800d6be <_malloc_usable_size_r>:
 800d6be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6c2:	1f18      	subs	r0, r3, #4
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	bfbc      	itt	lt
 800d6c8:	580b      	ldrlt	r3, [r1, r0]
 800d6ca:	18c0      	addlt	r0, r0, r3
 800d6cc:	4770      	bx	lr

0800d6ce <__sfputc_r>:
 800d6ce:	6893      	ldr	r3, [r2, #8]
 800d6d0:	3b01      	subs	r3, #1
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	b410      	push	{r4}
 800d6d6:	6093      	str	r3, [r2, #8]
 800d6d8:	da08      	bge.n	800d6ec <__sfputc_r+0x1e>
 800d6da:	6994      	ldr	r4, [r2, #24]
 800d6dc:	42a3      	cmp	r3, r4
 800d6de:	db01      	blt.n	800d6e4 <__sfputc_r+0x16>
 800d6e0:	290a      	cmp	r1, #10
 800d6e2:	d103      	bne.n	800d6ec <__sfputc_r+0x1e>
 800d6e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6e8:	f000 b934 	b.w	800d954 <__swbuf_r>
 800d6ec:	6813      	ldr	r3, [r2, #0]
 800d6ee:	1c58      	adds	r0, r3, #1
 800d6f0:	6010      	str	r0, [r2, #0]
 800d6f2:	7019      	strb	r1, [r3, #0]
 800d6f4:	4608      	mov	r0, r1
 800d6f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6fa:	4770      	bx	lr

0800d6fc <__sfputs_r>:
 800d6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6fe:	4606      	mov	r6, r0
 800d700:	460f      	mov	r7, r1
 800d702:	4614      	mov	r4, r2
 800d704:	18d5      	adds	r5, r2, r3
 800d706:	42ac      	cmp	r4, r5
 800d708:	d101      	bne.n	800d70e <__sfputs_r+0x12>
 800d70a:	2000      	movs	r0, #0
 800d70c:	e007      	b.n	800d71e <__sfputs_r+0x22>
 800d70e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d712:	463a      	mov	r2, r7
 800d714:	4630      	mov	r0, r6
 800d716:	f7ff ffda 	bl	800d6ce <__sfputc_r>
 800d71a:	1c43      	adds	r3, r0, #1
 800d71c:	d1f3      	bne.n	800d706 <__sfputs_r+0xa>
 800d71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d720 <_vfiprintf_r>:
 800d720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d724:	460d      	mov	r5, r1
 800d726:	b09d      	sub	sp, #116	; 0x74
 800d728:	4614      	mov	r4, r2
 800d72a:	4698      	mov	r8, r3
 800d72c:	4606      	mov	r6, r0
 800d72e:	b118      	cbz	r0, 800d738 <_vfiprintf_r+0x18>
 800d730:	6a03      	ldr	r3, [r0, #32]
 800d732:	b90b      	cbnz	r3, 800d738 <_vfiprintf_r+0x18>
 800d734:	f7fe f8d8 	bl	800b8e8 <__sinit>
 800d738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d73a:	07d9      	lsls	r1, r3, #31
 800d73c:	d405      	bmi.n	800d74a <_vfiprintf_r+0x2a>
 800d73e:	89ab      	ldrh	r3, [r5, #12]
 800d740:	059a      	lsls	r2, r3, #22
 800d742:	d402      	bmi.n	800d74a <_vfiprintf_r+0x2a>
 800d744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d746:	f7fe fa00 	bl	800bb4a <__retarget_lock_acquire_recursive>
 800d74a:	89ab      	ldrh	r3, [r5, #12]
 800d74c:	071b      	lsls	r3, r3, #28
 800d74e:	d501      	bpl.n	800d754 <_vfiprintf_r+0x34>
 800d750:	692b      	ldr	r3, [r5, #16]
 800d752:	b99b      	cbnz	r3, 800d77c <_vfiprintf_r+0x5c>
 800d754:	4629      	mov	r1, r5
 800d756:	4630      	mov	r0, r6
 800d758:	f000 f93a 	bl	800d9d0 <__swsetup_r>
 800d75c:	b170      	cbz	r0, 800d77c <_vfiprintf_r+0x5c>
 800d75e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d760:	07dc      	lsls	r4, r3, #31
 800d762:	d504      	bpl.n	800d76e <_vfiprintf_r+0x4e>
 800d764:	f04f 30ff 	mov.w	r0, #4294967295
 800d768:	b01d      	add	sp, #116	; 0x74
 800d76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76e:	89ab      	ldrh	r3, [r5, #12]
 800d770:	0598      	lsls	r0, r3, #22
 800d772:	d4f7      	bmi.n	800d764 <_vfiprintf_r+0x44>
 800d774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d776:	f7fe f9e9 	bl	800bb4c <__retarget_lock_release_recursive>
 800d77a:	e7f3      	b.n	800d764 <_vfiprintf_r+0x44>
 800d77c:	2300      	movs	r3, #0
 800d77e:	9309      	str	r3, [sp, #36]	; 0x24
 800d780:	2320      	movs	r3, #32
 800d782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d786:	f8cd 800c 	str.w	r8, [sp, #12]
 800d78a:	2330      	movs	r3, #48	; 0x30
 800d78c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d940 <_vfiprintf_r+0x220>
 800d790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d794:	f04f 0901 	mov.w	r9, #1
 800d798:	4623      	mov	r3, r4
 800d79a:	469a      	mov	sl, r3
 800d79c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7a0:	b10a      	cbz	r2, 800d7a6 <_vfiprintf_r+0x86>
 800d7a2:	2a25      	cmp	r2, #37	; 0x25
 800d7a4:	d1f9      	bne.n	800d79a <_vfiprintf_r+0x7a>
 800d7a6:	ebba 0b04 	subs.w	fp, sl, r4
 800d7aa:	d00b      	beq.n	800d7c4 <_vfiprintf_r+0xa4>
 800d7ac:	465b      	mov	r3, fp
 800d7ae:	4622      	mov	r2, r4
 800d7b0:	4629      	mov	r1, r5
 800d7b2:	4630      	mov	r0, r6
 800d7b4:	f7ff ffa2 	bl	800d6fc <__sfputs_r>
 800d7b8:	3001      	adds	r0, #1
 800d7ba:	f000 80a9 	beq.w	800d910 <_vfiprintf_r+0x1f0>
 800d7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7c0:	445a      	add	r2, fp
 800d7c2:	9209      	str	r2, [sp, #36]	; 0x24
 800d7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f000 80a1 	beq.w	800d910 <_vfiprintf_r+0x1f0>
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d7d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7d8:	f10a 0a01 	add.w	sl, sl, #1
 800d7dc:	9304      	str	r3, [sp, #16]
 800d7de:	9307      	str	r3, [sp, #28]
 800d7e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7e4:	931a      	str	r3, [sp, #104]	; 0x68
 800d7e6:	4654      	mov	r4, sl
 800d7e8:	2205      	movs	r2, #5
 800d7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ee:	4854      	ldr	r0, [pc, #336]	; (800d940 <_vfiprintf_r+0x220>)
 800d7f0:	f7f2 fcf6 	bl	80001e0 <memchr>
 800d7f4:	9a04      	ldr	r2, [sp, #16]
 800d7f6:	b9d8      	cbnz	r0, 800d830 <_vfiprintf_r+0x110>
 800d7f8:	06d1      	lsls	r1, r2, #27
 800d7fa:	bf44      	itt	mi
 800d7fc:	2320      	movmi	r3, #32
 800d7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d802:	0713      	lsls	r3, r2, #28
 800d804:	bf44      	itt	mi
 800d806:	232b      	movmi	r3, #43	; 0x2b
 800d808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d80c:	f89a 3000 	ldrb.w	r3, [sl]
 800d810:	2b2a      	cmp	r3, #42	; 0x2a
 800d812:	d015      	beq.n	800d840 <_vfiprintf_r+0x120>
 800d814:	9a07      	ldr	r2, [sp, #28]
 800d816:	4654      	mov	r4, sl
 800d818:	2000      	movs	r0, #0
 800d81a:	f04f 0c0a 	mov.w	ip, #10
 800d81e:	4621      	mov	r1, r4
 800d820:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d824:	3b30      	subs	r3, #48	; 0x30
 800d826:	2b09      	cmp	r3, #9
 800d828:	d94d      	bls.n	800d8c6 <_vfiprintf_r+0x1a6>
 800d82a:	b1b0      	cbz	r0, 800d85a <_vfiprintf_r+0x13a>
 800d82c:	9207      	str	r2, [sp, #28]
 800d82e:	e014      	b.n	800d85a <_vfiprintf_r+0x13a>
 800d830:	eba0 0308 	sub.w	r3, r0, r8
 800d834:	fa09 f303 	lsl.w	r3, r9, r3
 800d838:	4313      	orrs	r3, r2
 800d83a:	9304      	str	r3, [sp, #16]
 800d83c:	46a2      	mov	sl, r4
 800d83e:	e7d2      	b.n	800d7e6 <_vfiprintf_r+0xc6>
 800d840:	9b03      	ldr	r3, [sp, #12]
 800d842:	1d19      	adds	r1, r3, #4
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	9103      	str	r1, [sp, #12]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	bfbb      	ittet	lt
 800d84c:	425b      	neglt	r3, r3
 800d84e:	f042 0202 	orrlt.w	r2, r2, #2
 800d852:	9307      	strge	r3, [sp, #28]
 800d854:	9307      	strlt	r3, [sp, #28]
 800d856:	bfb8      	it	lt
 800d858:	9204      	strlt	r2, [sp, #16]
 800d85a:	7823      	ldrb	r3, [r4, #0]
 800d85c:	2b2e      	cmp	r3, #46	; 0x2e
 800d85e:	d10c      	bne.n	800d87a <_vfiprintf_r+0x15a>
 800d860:	7863      	ldrb	r3, [r4, #1]
 800d862:	2b2a      	cmp	r3, #42	; 0x2a
 800d864:	d134      	bne.n	800d8d0 <_vfiprintf_r+0x1b0>
 800d866:	9b03      	ldr	r3, [sp, #12]
 800d868:	1d1a      	adds	r2, r3, #4
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	9203      	str	r2, [sp, #12]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	bfb8      	it	lt
 800d872:	f04f 33ff 	movlt.w	r3, #4294967295
 800d876:	3402      	adds	r4, #2
 800d878:	9305      	str	r3, [sp, #20]
 800d87a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d950 <_vfiprintf_r+0x230>
 800d87e:	7821      	ldrb	r1, [r4, #0]
 800d880:	2203      	movs	r2, #3
 800d882:	4650      	mov	r0, sl
 800d884:	f7f2 fcac 	bl	80001e0 <memchr>
 800d888:	b138      	cbz	r0, 800d89a <_vfiprintf_r+0x17a>
 800d88a:	9b04      	ldr	r3, [sp, #16]
 800d88c:	eba0 000a 	sub.w	r0, r0, sl
 800d890:	2240      	movs	r2, #64	; 0x40
 800d892:	4082      	lsls	r2, r0
 800d894:	4313      	orrs	r3, r2
 800d896:	3401      	adds	r4, #1
 800d898:	9304      	str	r3, [sp, #16]
 800d89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d89e:	4829      	ldr	r0, [pc, #164]	; (800d944 <_vfiprintf_r+0x224>)
 800d8a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8a4:	2206      	movs	r2, #6
 800d8a6:	f7f2 fc9b 	bl	80001e0 <memchr>
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	d03f      	beq.n	800d92e <_vfiprintf_r+0x20e>
 800d8ae:	4b26      	ldr	r3, [pc, #152]	; (800d948 <_vfiprintf_r+0x228>)
 800d8b0:	bb1b      	cbnz	r3, 800d8fa <_vfiprintf_r+0x1da>
 800d8b2:	9b03      	ldr	r3, [sp, #12]
 800d8b4:	3307      	adds	r3, #7
 800d8b6:	f023 0307 	bic.w	r3, r3, #7
 800d8ba:	3308      	adds	r3, #8
 800d8bc:	9303      	str	r3, [sp, #12]
 800d8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8c0:	443b      	add	r3, r7
 800d8c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d8c4:	e768      	b.n	800d798 <_vfiprintf_r+0x78>
 800d8c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8ca:	460c      	mov	r4, r1
 800d8cc:	2001      	movs	r0, #1
 800d8ce:	e7a6      	b.n	800d81e <_vfiprintf_r+0xfe>
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	3401      	adds	r4, #1
 800d8d4:	9305      	str	r3, [sp, #20]
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	f04f 0c0a 	mov.w	ip, #10
 800d8dc:	4620      	mov	r0, r4
 800d8de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8e2:	3a30      	subs	r2, #48	; 0x30
 800d8e4:	2a09      	cmp	r2, #9
 800d8e6:	d903      	bls.n	800d8f0 <_vfiprintf_r+0x1d0>
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d0c6      	beq.n	800d87a <_vfiprintf_r+0x15a>
 800d8ec:	9105      	str	r1, [sp, #20]
 800d8ee:	e7c4      	b.n	800d87a <_vfiprintf_r+0x15a>
 800d8f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8f4:	4604      	mov	r4, r0
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e7f0      	b.n	800d8dc <_vfiprintf_r+0x1bc>
 800d8fa:	ab03      	add	r3, sp, #12
 800d8fc:	9300      	str	r3, [sp, #0]
 800d8fe:	462a      	mov	r2, r5
 800d900:	4b12      	ldr	r3, [pc, #72]	; (800d94c <_vfiprintf_r+0x22c>)
 800d902:	a904      	add	r1, sp, #16
 800d904:	4630      	mov	r0, r6
 800d906:	f7fd fb9d 	bl	800b044 <_printf_float>
 800d90a:	4607      	mov	r7, r0
 800d90c:	1c78      	adds	r0, r7, #1
 800d90e:	d1d6      	bne.n	800d8be <_vfiprintf_r+0x19e>
 800d910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d912:	07d9      	lsls	r1, r3, #31
 800d914:	d405      	bmi.n	800d922 <_vfiprintf_r+0x202>
 800d916:	89ab      	ldrh	r3, [r5, #12]
 800d918:	059a      	lsls	r2, r3, #22
 800d91a:	d402      	bmi.n	800d922 <_vfiprintf_r+0x202>
 800d91c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d91e:	f7fe f915 	bl	800bb4c <__retarget_lock_release_recursive>
 800d922:	89ab      	ldrh	r3, [r5, #12]
 800d924:	065b      	lsls	r3, r3, #25
 800d926:	f53f af1d 	bmi.w	800d764 <_vfiprintf_r+0x44>
 800d92a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d92c:	e71c      	b.n	800d768 <_vfiprintf_r+0x48>
 800d92e:	ab03      	add	r3, sp, #12
 800d930:	9300      	str	r3, [sp, #0]
 800d932:	462a      	mov	r2, r5
 800d934:	4b05      	ldr	r3, [pc, #20]	; (800d94c <_vfiprintf_r+0x22c>)
 800d936:	a904      	add	r1, sp, #16
 800d938:	4630      	mov	r0, r6
 800d93a:	f7fd fe27 	bl	800b58c <_printf_i>
 800d93e:	e7e4      	b.n	800d90a <_vfiprintf_r+0x1ea>
 800d940:	08010ddc 	.word	0x08010ddc
 800d944:	08010de6 	.word	0x08010de6
 800d948:	0800b045 	.word	0x0800b045
 800d94c:	0800d6fd 	.word	0x0800d6fd
 800d950:	08010de2 	.word	0x08010de2

0800d954 <__swbuf_r>:
 800d954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d956:	460e      	mov	r6, r1
 800d958:	4614      	mov	r4, r2
 800d95a:	4605      	mov	r5, r0
 800d95c:	b118      	cbz	r0, 800d966 <__swbuf_r+0x12>
 800d95e:	6a03      	ldr	r3, [r0, #32]
 800d960:	b90b      	cbnz	r3, 800d966 <__swbuf_r+0x12>
 800d962:	f7fd ffc1 	bl	800b8e8 <__sinit>
 800d966:	69a3      	ldr	r3, [r4, #24]
 800d968:	60a3      	str	r3, [r4, #8]
 800d96a:	89a3      	ldrh	r3, [r4, #12]
 800d96c:	071a      	lsls	r2, r3, #28
 800d96e:	d525      	bpl.n	800d9bc <__swbuf_r+0x68>
 800d970:	6923      	ldr	r3, [r4, #16]
 800d972:	b31b      	cbz	r3, 800d9bc <__swbuf_r+0x68>
 800d974:	6823      	ldr	r3, [r4, #0]
 800d976:	6922      	ldr	r2, [r4, #16]
 800d978:	1a98      	subs	r0, r3, r2
 800d97a:	6963      	ldr	r3, [r4, #20]
 800d97c:	b2f6      	uxtb	r6, r6
 800d97e:	4283      	cmp	r3, r0
 800d980:	4637      	mov	r7, r6
 800d982:	dc04      	bgt.n	800d98e <__swbuf_r+0x3a>
 800d984:	4621      	mov	r1, r4
 800d986:	4628      	mov	r0, r5
 800d988:	f7ff fdc6 	bl	800d518 <_fflush_r>
 800d98c:	b9e0      	cbnz	r0, 800d9c8 <__swbuf_r+0x74>
 800d98e:	68a3      	ldr	r3, [r4, #8]
 800d990:	3b01      	subs	r3, #1
 800d992:	60a3      	str	r3, [r4, #8]
 800d994:	6823      	ldr	r3, [r4, #0]
 800d996:	1c5a      	adds	r2, r3, #1
 800d998:	6022      	str	r2, [r4, #0]
 800d99a:	701e      	strb	r6, [r3, #0]
 800d99c:	6962      	ldr	r2, [r4, #20]
 800d99e:	1c43      	adds	r3, r0, #1
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d004      	beq.n	800d9ae <__swbuf_r+0x5a>
 800d9a4:	89a3      	ldrh	r3, [r4, #12]
 800d9a6:	07db      	lsls	r3, r3, #31
 800d9a8:	d506      	bpl.n	800d9b8 <__swbuf_r+0x64>
 800d9aa:	2e0a      	cmp	r6, #10
 800d9ac:	d104      	bne.n	800d9b8 <__swbuf_r+0x64>
 800d9ae:	4621      	mov	r1, r4
 800d9b0:	4628      	mov	r0, r5
 800d9b2:	f7ff fdb1 	bl	800d518 <_fflush_r>
 800d9b6:	b938      	cbnz	r0, 800d9c8 <__swbuf_r+0x74>
 800d9b8:	4638      	mov	r0, r7
 800d9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9bc:	4621      	mov	r1, r4
 800d9be:	4628      	mov	r0, r5
 800d9c0:	f000 f806 	bl	800d9d0 <__swsetup_r>
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d0d5      	beq.n	800d974 <__swbuf_r+0x20>
 800d9c8:	f04f 37ff 	mov.w	r7, #4294967295
 800d9cc:	e7f4      	b.n	800d9b8 <__swbuf_r+0x64>
	...

0800d9d0 <__swsetup_r>:
 800d9d0:	b538      	push	{r3, r4, r5, lr}
 800d9d2:	4b2a      	ldr	r3, [pc, #168]	; (800da7c <__swsetup_r+0xac>)
 800d9d4:	4605      	mov	r5, r0
 800d9d6:	6818      	ldr	r0, [r3, #0]
 800d9d8:	460c      	mov	r4, r1
 800d9da:	b118      	cbz	r0, 800d9e4 <__swsetup_r+0x14>
 800d9dc:	6a03      	ldr	r3, [r0, #32]
 800d9de:	b90b      	cbnz	r3, 800d9e4 <__swsetup_r+0x14>
 800d9e0:	f7fd ff82 	bl	800b8e8 <__sinit>
 800d9e4:	89a3      	ldrh	r3, [r4, #12]
 800d9e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9ea:	0718      	lsls	r0, r3, #28
 800d9ec:	d422      	bmi.n	800da34 <__swsetup_r+0x64>
 800d9ee:	06d9      	lsls	r1, r3, #27
 800d9f0:	d407      	bmi.n	800da02 <__swsetup_r+0x32>
 800d9f2:	2309      	movs	r3, #9
 800d9f4:	602b      	str	r3, [r5, #0]
 800d9f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d9fa:	81a3      	strh	r3, [r4, #12]
 800d9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800da00:	e034      	b.n	800da6c <__swsetup_r+0x9c>
 800da02:	0758      	lsls	r0, r3, #29
 800da04:	d512      	bpl.n	800da2c <__swsetup_r+0x5c>
 800da06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da08:	b141      	cbz	r1, 800da1c <__swsetup_r+0x4c>
 800da0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da0e:	4299      	cmp	r1, r3
 800da10:	d002      	beq.n	800da18 <__swsetup_r+0x48>
 800da12:	4628      	mov	r0, r5
 800da14:	f7fe ff26 	bl	800c864 <_free_r>
 800da18:	2300      	movs	r3, #0
 800da1a:	6363      	str	r3, [r4, #52]	; 0x34
 800da1c:	89a3      	ldrh	r3, [r4, #12]
 800da1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da22:	81a3      	strh	r3, [r4, #12]
 800da24:	2300      	movs	r3, #0
 800da26:	6063      	str	r3, [r4, #4]
 800da28:	6923      	ldr	r3, [r4, #16]
 800da2a:	6023      	str	r3, [r4, #0]
 800da2c:	89a3      	ldrh	r3, [r4, #12]
 800da2e:	f043 0308 	orr.w	r3, r3, #8
 800da32:	81a3      	strh	r3, [r4, #12]
 800da34:	6923      	ldr	r3, [r4, #16]
 800da36:	b94b      	cbnz	r3, 800da4c <__swsetup_r+0x7c>
 800da38:	89a3      	ldrh	r3, [r4, #12]
 800da3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da42:	d003      	beq.n	800da4c <__swsetup_r+0x7c>
 800da44:	4621      	mov	r1, r4
 800da46:	4628      	mov	r0, r5
 800da48:	f000 f884 	bl	800db54 <__smakebuf_r>
 800da4c:	89a0      	ldrh	r0, [r4, #12]
 800da4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da52:	f010 0301 	ands.w	r3, r0, #1
 800da56:	d00a      	beq.n	800da6e <__swsetup_r+0x9e>
 800da58:	2300      	movs	r3, #0
 800da5a:	60a3      	str	r3, [r4, #8]
 800da5c:	6963      	ldr	r3, [r4, #20]
 800da5e:	425b      	negs	r3, r3
 800da60:	61a3      	str	r3, [r4, #24]
 800da62:	6923      	ldr	r3, [r4, #16]
 800da64:	b943      	cbnz	r3, 800da78 <__swsetup_r+0xa8>
 800da66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da6a:	d1c4      	bne.n	800d9f6 <__swsetup_r+0x26>
 800da6c:	bd38      	pop	{r3, r4, r5, pc}
 800da6e:	0781      	lsls	r1, r0, #30
 800da70:	bf58      	it	pl
 800da72:	6963      	ldrpl	r3, [r4, #20]
 800da74:	60a3      	str	r3, [r4, #8]
 800da76:	e7f4      	b.n	800da62 <__swsetup_r+0x92>
 800da78:	2000      	movs	r0, #0
 800da7a:	e7f7      	b.n	800da6c <__swsetup_r+0x9c>
 800da7c:	20000710 	.word	0x20000710

0800da80 <_raise_r>:
 800da80:	291f      	cmp	r1, #31
 800da82:	b538      	push	{r3, r4, r5, lr}
 800da84:	4604      	mov	r4, r0
 800da86:	460d      	mov	r5, r1
 800da88:	d904      	bls.n	800da94 <_raise_r+0x14>
 800da8a:	2316      	movs	r3, #22
 800da8c:	6003      	str	r3, [r0, #0]
 800da8e:	f04f 30ff 	mov.w	r0, #4294967295
 800da92:	bd38      	pop	{r3, r4, r5, pc}
 800da94:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800da96:	b112      	cbz	r2, 800da9e <_raise_r+0x1e>
 800da98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da9c:	b94b      	cbnz	r3, 800dab2 <_raise_r+0x32>
 800da9e:	4620      	mov	r0, r4
 800daa0:	f000 f830 	bl	800db04 <_getpid_r>
 800daa4:	462a      	mov	r2, r5
 800daa6:	4601      	mov	r1, r0
 800daa8:	4620      	mov	r0, r4
 800daaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daae:	f000 b817 	b.w	800dae0 <_kill_r>
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d00a      	beq.n	800dacc <_raise_r+0x4c>
 800dab6:	1c59      	adds	r1, r3, #1
 800dab8:	d103      	bne.n	800dac2 <_raise_r+0x42>
 800daba:	2316      	movs	r3, #22
 800dabc:	6003      	str	r3, [r0, #0]
 800dabe:	2001      	movs	r0, #1
 800dac0:	e7e7      	b.n	800da92 <_raise_r+0x12>
 800dac2:	2400      	movs	r4, #0
 800dac4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dac8:	4628      	mov	r0, r5
 800daca:	4798      	blx	r3
 800dacc:	2000      	movs	r0, #0
 800dace:	e7e0      	b.n	800da92 <_raise_r+0x12>

0800dad0 <raise>:
 800dad0:	4b02      	ldr	r3, [pc, #8]	; (800dadc <raise+0xc>)
 800dad2:	4601      	mov	r1, r0
 800dad4:	6818      	ldr	r0, [r3, #0]
 800dad6:	f7ff bfd3 	b.w	800da80 <_raise_r>
 800dada:	bf00      	nop
 800dadc:	20000710 	.word	0x20000710

0800dae0 <_kill_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	4d07      	ldr	r5, [pc, #28]	; (800db00 <_kill_r+0x20>)
 800dae4:	2300      	movs	r3, #0
 800dae6:	4604      	mov	r4, r0
 800dae8:	4608      	mov	r0, r1
 800daea:	4611      	mov	r1, r2
 800daec:	602b      	str	r3, [r5, #0]
 800daee:	f7f5 f903 	bl	8002cf8 <_kill>
 800daf2:	1c43      	adds	r3, r0, #1
 800daf4:	d102      	bne.n	800dafc <_kill_r+0x1c>
 800daf6:	682b      	ldr	r3, [r5, #0]
 800daf8:	b103      	cbz	r3, 800dafc <_kill_r+0x1c>
 800dafa:	6023      	str	r3, [r4, #0]
 800dafc:	bd38      	pop	{r3, r4, r5, pc}
 800dafe:	bf00      	nop
 800db00:	20001a0c 	.word	0x20001a0c

0800db04 <_getpid_r>:
 800db04:	f7f5 b8f0 	b.w	8002ce8 <_getpid>

0800db08 <__swhatbuf_r>:
 800db08:	b570      	push	{r4, r5, r6, lr}
 800db0a:	460c      	mov	r4, r1
 800db0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db10:	2900      	cmp	r1, #0
 800db12:	b096      	sub	sp, #88	; 0x58
 800db14:	4615      	mov	r5, r2
 800db16:	461e      	mov	r6, r3
 800db18:	da0d      	bge.n	800db36 <__swhatbuf_r+0x2e>
 800db1a:	89a3      	ldrh	r3, [r4, #12]
 800db1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800db20:	f04f 0100 	mov.w	r1, #0
 800db24:	bf0c      	ite	eq
 800db26:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800db2a:	2340      	movne	r3, #64	; 0x40
 800db2c:	2000      	movs	r0, #0
 800db2e:	6031      	str	r1, [r6, #0]
 800db30:	602b      	str	r3, [r5, #0]
 800db32:	b016      	add	sp, #88	; 0x58
 800db34:	bd70      	pop	{r4, r5, r6, pc}
 800db36:	466a      	mov	r2, sp
 800db38:	f000 f848 	bl	800dbcc <_fstat_r>
 800db3c:	2800      	cmp	r0, #0
 800db3e:	dbec      	blt.n	800db1a <__swhatbuf_r+0x12>
 800db40:	9901      	ldr	r1, [sp, #4]
 800db42:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800db46:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800db4a:	4259      	negs	r1, r3
 800db4c:	4159      	adcs	r1, r3
 800db4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db52:	e7eb      	b.n	800db2c <__swhatbuf_r+0x24>

0800db54 <__smakebuf_r>:
 800db54:	898b      	ldrh	r3, [r1, #12]
 800db56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db58:	079d      	lsls	r5, r3, #30
 800db5a:	4606      	mov	r6, r0
 800db5c:	460c      	mov	r4, r1
 800db5e:	d507      	bpl.n	800db70 <__smakebuf_r+0x1c>
 800db60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db64:	6023      	str	r3, [r4, #0]
 800db66:	6123      	str	r3, [r4, #16]
 800db68:	2301      	movs	r3, #1
 800db6a:	6163      	str	r3, [r4, #20]
 800db6c:	b002      	add	sp, #8
 800db6e:	bd70      	pop	{r4, r5, r6, pc}
 800db70:	ab01      	add	r3, sp, #4
 800db72:	466a      	mov	r2, sp
 800db74:	f7ff ffc8 	bl	800db08 <__swhatbuf_r>
 800db78:	9900      	ldr	r1, [sp, #0]
 800db7a:	4605      	mov	r5, r0
 800db7c:	4630      	mov	r0, r6
 800db7e:	f7fe fee5 	bl	800c94c <_malloc_r>
 800db82:	b948      	cbnz	r0, 800db98 <__smakebuf_r+0x44>
 800db84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db88:	059a      	lsls	r2, r3, #22
 800db8a:	d4ef      	bmi.n	800db6c <__smakebuf_r+0x18>
 800db8c:	f023 0303 	bic.w	r3, r3, #3
 800db90:	f043 0302 	orr.w	r3, r3, #2
 800db94:	81a3      	strh	r3, [r4, #12]
 800db96:	e7e3      	b.n	800db60 <__smakebuf_r+0xc>
 800db98:	89a3      	ldrh	r3, [r4, #12]
 800db9a:	6020      	str	r0, [r4, #0]
 800db9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dba0:	81a3      	strh	r3, [r4, #12]
 800dba2:	9b00      	ldr	r3, [sp, #0]
 800dba4:	6163      	str	r3, [r4, #20]
 800dba6:	9b01      	ldr	r3, [sp, #4]
 800dba8:	6120      	str	r0, [r4, #16]
 800dbaa:	b15b      	cbz	r3, 800dbc4 <__smakebuf_r+0x70>
 800dbac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbb0:	4630      	mov	r0, r6
 800dbb2:	f000 f81d 	bl	800dbf0 <_isatty_r>
 800dbb6:	b128      	cbz	r0, 800dbc4 <__smakebuf_r+0x70>
 800dbb8:	89a3      	ldrh	r3, [r4, #12]
 800dbba:	f023 0303 	bic.w	r3, r3, #3
 800dbbe:	f043 0301 	orr.w	r3, r3, #1
 800dbc2:	81a3      	strh	r3, [r4, #12]
 800dbc4:	89a3      	ldrh	r3, [r4, #12]
 800dbc6:	431d      	orrs	r5, r3
 800dbc8:	81a5      	strh	r5, [r4, #12]
 800dbca:	e7cf      	b.n	800db6c <__smakebuf_r+0x18>

0800dbcc <_fstat_r>:
 800dbcc:	b538      	push	{r3, r4, r5, lr}
 800dbce:	4d07      	ldr	r5, [pc, #28]	; (800dbec <_fstat_r+0x20>)
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	4604      	mov	r4, r0
 800dbd4:	4608      	mov	r0, r1
 800dbd6:	4611      	mov	r1, r2
 800dbd8:	602b      	str	r3, [r5, #0]
 800dbda:	f7f5 f8ec 	bl	8002db6 <_fstat>
 800dbde:	1c43      	adds	r3, r0, #1
 800dbe0:	d102      	bne.n	800dbe8 <_fstat_r+0x1c>
 800dbe2:	682b      	ldr	r3, [r5, #0]
 800dbe4:	b103      	cbz	r3, 800dbe8 <_fstat_r+0x1c>
 800dbe6:	6023      	str	r3, [r4, #0]
 800dbe8:	bd38      	pop	{r3, r4, r5, pc}
 800dbea:	bf00      	nop
 800dbec:	20001a0c 	.word	0x20001a0c

0800dbf0 <_isatty_r>:
 800dbf0:	b538      	push	{r3, r4, r5, lr}
 800dbf2:	4d06      	ldr	r5, [pc, #24]	; (800dc0c <_isatty_r+0x1c>)
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	4608      	mov	r0, r1
 800dbfa:	602b      	str	r3, [r5, #0]
 800dbfc:	f7f5 f8eb 	bl	8002dd6 <_isatty>
 800dc00:	1c43      	adds	r3, r0, #1
 800dc02:	d102      	bne.n	800dc0a <_isatty_r+0x1a>
 800dc04:	682b      	ldr	r3, [r5, #0]
 800dc06:	b103      	cbz	r3, 800dc0a <_isatty_r+0x1a>
 800dc08:	6023      	str	r3, [r4, #0]
 800dc0a:	bd38      	pop	{r3, r4, r5, pc}
 800dc0c:	20001a0c 	.word	0x20001a0c

0800dc10 <_init>:
 800dc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc12:	bf00      	nop
 800dc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc16:	bc08      	pop	{r3}
 800dc18:	469e      	mov	lr, r3
 800dc1a:	4770      	bx	lr

0800dc1c <_fini>:
 800dc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc1e:	bf00      	nop
 800dc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc22:	bc08      	pop	{r3}
 800dc24:	469e      	mov	lr, r3
 800dc26:	4770      	bx	lr

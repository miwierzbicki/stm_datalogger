
stm32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002788  0800ff68  0800ff68  0001ff68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080126f0  080126f0  00030b40  2**0
                  CONTENTS
  4 .ARM          00000008  080126f0  080126f0  000226f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080126f8  080126f8  00030b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080126f8  080126f8  000226f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080126fc  080126fc  000226fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b40  20000000  08012700  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000194cc  20000b40  08013240  00030b40  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001a00c  08013240  0003a00c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030b40  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030b70  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001db17  00000000  00000000  00030bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004731  00000000  00000000  0004e6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  00052e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014f8  00000000  00000000  000548e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e819  00000000  00000000  00055de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000259aa  00000000  00000000  000745f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9245  00000000  00000000  00099fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008434  00000000  00000000  001431e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0014b61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000b40 	.word	0x20000b40
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ff50 	.word	0x0800ff50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000b44 	.word	0x20000b44
 80001dc:	0800ff50 	.word	0x0800ff50

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <adc_int_init>:
#include "encoder.h"

ADC_HandleTypeDef *hadc1_new;
I2C_HandleTypeDef *hi2c2_new;

void adc_int_init(ADC_HandleTypeDef *hadc1) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	hadc1_new=hadc1;
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <adc_int_init+0x1c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000b5c 	.word	0x20000b5c

08000f94 <adc_ext_init>:

void adc_ext_init(I2C_HandleTypeDef *hi2c2) {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	hi2c2_new=hi2c2;
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <adc_ext_init+0x1c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000b60 	.word	0x20000b60

08000fb4 <adc_select_ch>:


void adc_select_ch(uint32_t channel) { //trzeba wywolywac za kazdym razem przed konwersją adc bo inaczej będzie tylko ch0!
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	//wartości channel -> ADC_CHANNEL_0, 1, 2, 3
	ADC_ChannelConfTypeDef sConfig = {0};
 8000fbc:	f107 0308 	add.w	r3, r7, #8
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc1_new, &sConfig) != HAL_OK)
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <adc_select_ch+0x44>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f107 0208 	add.w	r2, r7, #8
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f004 fb51 	bl	8005688 <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <adc_select_ch+0x3c>
	{
	Error_Handler();
 8000fec:	f001 fb42 	bl	8002674 <Error_Handler>
	}
}
 8000ff0:	bf00      	nop
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000b5c 	.word	0x20000b5c
 8000ffc:	00000000 	.word	0x00000000

08001000 <getValueAdcExtCh0>:


float getValueAdcExtCh0(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af02      	add	r7, sp, #8
	unsigned char dataPacket[6];
	int16_t valueFromRegister;
	dataPacket[0] = 0x01;
 8001006:	2301      	movs	r3, #1
 8001008:	703b      	strb	r3, [r7, #0]
	dataPacket[1] = 0xC3;
 800100a:	23c3      	movs	r3, #195	; 0xc3
 800100c:	707b      	strb	r3, [r7, #1]
	dataPacket[2] = 0x83;
 800100e:	2383      	movs	r3, #131	; 0x83
 8001010:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Master_Transmit(hi2c2_new, 0x48 << 1, dataPacket, 3, HAL_MAX_DELAY);
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <getValueAdcExtCh0+0xa0>)
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	463a      	mov	r2, r7
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2303      	movs	r3, #3
 8001020:	2190      	movs	r1, #144	; 0x90
 8001022:	f005 f983 	bl	800632c <HAL_I2C_Master_Transmit>
	dataPacket[0] = 0x00;
 8001026:	2300      	movs	r3, #0
 8001028:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Master_Transmit(hi2c2_new, 0x48 << 1, dataPacket, 1 ,HAL_MAX_DELAY);
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <getValueAdcExtCh0+0xa0>)
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	463a      	mov	r2, r7
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	2190      	movs	r1, #144	; 0x90
 800103a:	f005 f977 	bl	800632c <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800103e:	200a      	movs	r0, #10
 8001040:	f004 f96e 	bl	8005320 <HAL_Delay>
	HAL_I2C_Master_Receive(hi2c2_new, 0x48 << 1, dataPacket, 2, HAL_MAX_DELAY);
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <getValueAdcExtCh0+0xa0>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	463a      	mov	r2, r7
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2302      	movs	r3, #2
 8001052:	2190      	movs	r1, #144	; 0x90
 8001054:	f005 fa68 	bl	8006528 <HAL_I2C_Master_Receive>
	valueFromRegister = (dataPacket[0] << 8 | dataPacket[1] );
 8001058:	783b      	ldrb	r3, [r7, #0]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	787b      	ldrb	r3, [r7, #1]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	80fb      	strh	r3, [r7, #6]
	return valueFromRegister * (4.096/32768.0); //zakres pomiarowy/2^15 (bo 2x8 bitów)
 8001066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa72 	bl	8000554 <__aeabi_i2d>
 8001070:	a309      	add	r3, pc, #36	; (adr r3, 8001098 <getValueAdcExtCh0+0x98>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff fad7 	bl	8000628 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fda9 	bl	8000bd8 <__aeabi_d2f>
 8001086:	4603      	mov	r3, r0
 8001088:	ee07 3a90 	vmov	s15, r3
	}
 800108c:	eeb0 0a67 	vmov.f32	s0, s15
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	d2f1a9fc 	.word	0xd2f1a9fc
 800109c:	3f20624d 	.word	0x3f20624d
 80010a0:	20000b60 	.word	0x20000b60
 80010a4:	00000000 	.word	0x00000000

080010a8 <getValueAdcExtCh1>:

float getValueAdcExtCh1(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
	unsigned char dataPacket[6];
	int16_t valueFromRegister;
	dataPacket[0] = 0x01;
 80010ae:	2301      	movs	r3, #1
 80010b0:	703b      	strb	r3, [r7, #0]
	dataPacket[1] = 0xD3;
 80010b2:	23d3      	movs	r3, #211	; 0xd3
 80010b4:	707b      	strb	r3, [r7, #1]
	dataPacket[2] = 0x83;
 80010b6:	2383      	movs	r3, #131	; 0x83
 80010b8:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Master_Transmit(hi2c2_new, 0x48 << 1, dataPacket, 3, HAL_MAX_DELAY);
 80010ba:	4b23      	ldr	r3, [pc, #140]	; (8001148 <getValueAdcExtCh1+0xa0>)
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	463a      	mov	r2, r7
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2303      	movs	r3, #3
 80010c8:	2190      	movs	r1, #144	; 0x90
 80010ca:	f005 f92f 	bl	800632c <HAL_I2C_Master_Transmit>
	dataPacket[0] = 0x00;
 80010ce:	2300      	movs	r3, #0
 80010d0:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Master_Transmit(hi2c2_new, 0x48 << 1, dataPacket, 1 ,HAL_MAX_DELAY);
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <getValueAdcExtCh1+0xa0>)
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	463a      	mov	r2, r7
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	2190      	movs	r1, #144	; 0x90
 80010e2:	f005 f923 	bl	800632c <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80010e6:	200a      	movs	r0, #10
 80010e8:	f004 f91a 	bl	8005320 <HAL_Delay>
	HAL_I2C_Master_Receive(hi2c2_new, 0x48 << 1, dataPacket, 2, HAL_MAX_DELAY);
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <getValueAdcExtCh1+0xa0>)
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	463a      	mov	r2, r7
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2302      	movs	r3, #2
 80010fa:	2190      	movs	r1, #144	; 0x90
 80010fc:	f005 fa14 	bl	8006528 <HAL_I2C_Master_Receive>
	valueFromRegister = (dataPacket[0] << 8 | dataPacket[1] );
 8001100:	783b      	ldrb	r3, [r7, #0]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b21a      	sxth	r2, r3
 8001106:	787b      	ldrb	r3, [r7, #1]
 8001108:	b21b      	sxth	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	80fb      	strh	r3, [r7, #6]
	return valueFromRegister * (4.096/32768.0); //zakres pomiarowy/2^15 (bo 2x8 bitów)
 800110e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fa1e 	bl	8000554 <__aeabi_i2d>
 8001118:	a309      	add	r3, pc, #36	; (adr r3, 8001140 <getValueAdcExtCh1+0x98>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fa83 	bl	8000628 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fd55 	bl	8000bd8 <__aeabi_d2f>
 800112e:	4603      	mov	r3, r0
 8001130:	ee07 3a90 	vmov	s15, r3
}
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	d2f1a9fc 	.word	0xd2f1a9fc
 8001144:	3f20624d 	.word	0x3f20624d
 8001148:	20000b60 	.word	0x20000b60
 800114c:	00000000 	.word	0x00000000

08001150 <getValueAdcExtCh2>:

float getValueAdcExtCh2(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af02      	add	r7, sp, #8
	unsigned char dataPacket[6];
	int16_t valueFromRegister;
	dataPacket[0] = 0x01;
 8001156:	2301      	movs	r3, #1
 8001158:	703b      	strb	r3, [r7, #0]
	dataPacket[1] = 0xE3;
 800115a:	23e3      	movs	r3, #227	; 0xe3
 800115c:	707b      	strb	r3, [r7, #1]
	dataPacket[2] = 0x83;
 800115e:	2383      	movs	r3, #131	; 0x83
 8001160:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Master_Transmit(hi2c2_new, 0x48 << 1, dataPacket, 3, HAL_MAX_DELAY);
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <getValueAdcExtCh2+0xa0>)
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	463a      	mov	r2, r7
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2303      	movs	r3, #3
 8001170:	2190      	movs	r1, #144	; 0x90
 8001172:	f005 f8db 	bl	800632c <HAL_I2C_Master_Transmit>
	dataPacket[0] = 0x00;
 8001176:	2300      	movs	r3, #0
 8001178:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Master_Transmit(hi2c2_new, 0x48 << 1, dataPacket, 1 ,HAL_MAX_DELAY);
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <getValueAdcExtCh2+0xa0>)
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	463a      	mov	r2, r7
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2301      	movs	r3, #1
 8001188:	2190      	movs	r1, #144	; 0x90
 800118a:	f005 f8cf 	bl	800632c <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800118e:	200a      	movs	r0, #10
 8001190:	f004 f8c6 	bl	8005320 <HAL_Delay>
	HAL_I2C_Master_Receive(hi2c2_new, 0x48 << 1, dataPacket, 2, HAL_MAX_DELAY);
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <getValueAdcExtCh2+0xa0>)
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	463a      	mov	r2, r7
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2302      	movs	r3, #2
 80011a2:	2190      	movs	r1, #144	; 0x90
 80011a4:	f005 f9c0 	bl	8006528 <HAL_I2C_Master_Receive>
	valueFromRegister = (dataPacket[0] << 8 | dataPacket[1] );
 80011a8:	783b      	ldrb	r3, [r7, #0]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	787b      	ldrb	r3, [r7, #1]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	80fb      	strh	r3, [r7, #6]
	return valueFromRegister * (4.096/32768.0); //zakres pomiarowy/2^15 (bo 2x8 bitów)
 80011b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f9ca 	bl	8000554 <__aeabi_i2d>
 80011c0:	a309      	add	r3, pc, #36	; (adr r3, 80011e8 <getValueAdcExtCh2+0x98>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fa2f 	bl	8000628 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fd01 	bl	8000bd8 <__aeabi_d2f>
 80011d6:	4603      	mov	r3, r0
 80011d8:	ee07 3a90 	vmov	s15, r3
}
 80011dc:	eeb0 0a67 	vmov.f32	s0, s15
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80011ec:	3f20624d 	.word	0x3f20624d
 80011f0:	20000b60 	.word	0x20000b60
 80011f4:	00000000 	.word	0x00000000

080011f8 <getValueAdcExtCh3>:

float getValueAdcExtCh3(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af02      	add	r7, sp, #8
	unsigned char dataPacket[6];
	int16_t valueFromRegister;
	dataPacket[0] = 0x01;
 80011fe:	2301      	movs	r3, #1
 8001200:	703b      	strb	r3, [r7, #0]
	dataPacket[1] = 0xF3;
 8001202:	23f3      	movs	r3, #243	; 0xf3
 8001204:	707b      	strb	r3, [r7, #1]
	dataPacket[2] = 0x83;
 8001206:	2383      	movs	r3, #131	; 0x83
 8001208:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Master_Transmit(hi2c2_new, 0x48 << 1, dataPacket, 3, HAL_MAX_DELAY);
 800120a:	4b23      	ldr	r3, [pc, #140]	; (8001298 <getValueAdcExtCh3+0xa0>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	463a      	mov	r2, r7
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2303      	movs	r3, #3
 8001218:	2190      	movs	r1, #144	; 0x90
 800121a:	f005 f887 	bl	800632c <HAL_I2C_Master_Transmit>
	dataPacket[0] = 0x00;
 800121e:	2300      	movs	r3, #0
 8001220:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Master_Transmit(hi2c2_new, 0x48 << 1, dataPacket, 1 ,HAL_MAX_DELAY);
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <getValueAdcExtCh3+0xa0>)
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	463a      	mov	r2, r7
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2301      	movs	r3, #1
 8001230:	2190      	movs	r1, #144	; 0x90
 8001232:	f005 f87b 	bl	800632c <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001236:	200a      	movs	r0, #10
 8001238:	f004 f872 	bl	8005320 <HAL_Delay>
	HAL_I2C_Master_Receive(hi2c2_new, 0x48 << 1, dataPacket, 2, HAL_MAX_DELAY);
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <getValueAdcExtCh3+0xa0>)
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	463a      	mov	r2, r7
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2302      	movs	r3, #2
 800124a:	2190      	movs	r1, #144	; 0x90
 800124c:	f005 f96c 	bl	8006528 <HAL_I2C_Master_Receive>
	valueFromRegister = (dataPacket[0] << 8 | dataPacket[1] );
 8001250:	783b      	ldrb	r3, [r7, #0]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	787b      	ldrb	r3, [r7, #1]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	80fb      	strh	r3, [r7, #6]
	return valueFromRegister * (4.096/32768.0); //zakres pomiarowy/2^15 (bo 2x8 bitów)
 800125e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f976 	bl	8000554 <__aeabi_i2d>
 8001268:	a309      	add	r3, pc, #36	; (adr r3, 8001290 <getValueAdcExtCh3+0x98>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f9db 	bl	8000628 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fcad 	bl	8000bd8 <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	ee07 3a90 	vmov	s15, r3
}
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	d2f1a9fc 	.word	0xd2f1a9fc
 8001294:	3f20624d 	.word	0x3f20624d
 8001298:	20000b60 	.word	0x20000b60

0800129c <getValueAdcIntCh0>:

float getValueAdcIntCh0(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
	uint32_t value;
	adc_select_ch(ADC_CHANNEL_0);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fe86 	bl	8000fb4 <adc_select_ch>
	HAL_ADC_Start(hadc1_new);
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <getValueAdcIntCh0+0x58>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 f89f 	bl	80053f0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1_new, HAL_MAX_DELAY);
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <getValueAdcIntCh0+0x58>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f04f 31ff 	mov.w	r1, #4294967295
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 f94c 	bl	8005558 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(hadc1_new);
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <getValueAdcIntCh0+0x58>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f004 f9d2 	bl	800566e <HAL_ADC_GetValue>
 80012ca:	6078      	str	r0, [r7, #4]
	return 3.3f * value / 4096.0f;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80012f8 <getValueAdcIntCh0+0x5c>
 80012da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012de:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012fc <getValueAdcIntCh0+0x60>
 80012e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012e6:	eef0 7a66 	vmov.f32	s15, s13

}
 80012ea:	eeb0 0a67 	vmov.f32	s0, s15
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000b5c 	.word	0x20000b5c
 80012f8:	40533333 	.word	0x40533333
 80012fc:	45800000 	.word	0x45800000

08001300 <getValueAdcIntCh1>:
float getValueAdcIntCh1(void) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
	uint32_t value;
	adc_select_ch(ADC_CHANNEL_1);
 8001306:	2001      	movs	r0, #1
 8001308:	f7ff fe54 	bl	8000fb4 <adc_select_ch>
	HAL_ADC_Start(hadc1_new);
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <getValueAdcIntCh1+0x58>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f004 f86d 	bl	80053f0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1_new, HAL_MAX_DELAY);
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <getValueAdcIntCh1+0x58>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f04f 31ff 	mov.w	r1, #4294967295
 800131e:	4618      	mov	r0, r3
 8001320:	f004 f91a 	bl	8005558 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(hadc1_new);
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <getValueAdcIntCh1+0x58>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f004 f9a0 	bl	800566e <HAL_ADC_GetValue>
 800132e:	6078      	str	r0, [r7, #4]
	return 3.3f * value / 4096.0f;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800133a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800135c <getValueAdcIntCh1+0x5c>
 800133e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001342:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001360 <getValueAdcIntCh1+0x60>
 8001346:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800134a:	eef0 7a66 	vmov.f32	s15, s13

}
 800134e:	eeb0 0a67 	vmov.f32	s0, s15
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000b5c 	.word	0x20000b5c
 800135c:	40533333 	.word	0x40533333
 8001360:	45800000 	.word	0x45800000

08001364 <getValueAdcIntCh2>:
float getValueAdcIntCh2(void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	uint32_t value;
	adc_select_ch(ADC_CHANNEL_2);
 800136a:	2002      	movs	r0, #2
 800136c:	f7ff fe22 	bl	8000fb4 <adc_select_ch>
	HAL_ADC_Start(hadc1_new);
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <getValueAdcIntCh2+0x58>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f004 f83b 	bl	80053f0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1_new, HAL_MAX_DELAY);
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <getValueAdcIntCh2+0x58>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f04f 31ff 	mov.w	r1, #4294967295
 8001382:	4618      	mov	r0, r3
 8001384:	f004 f8e8 	bl	8005558 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(hadc1_new);
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <getValueAdcIntCh2+0x58>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f004 f96e 	bl	800566e <HAL_ADC_GetValue>
 8001392:	6078      	str	r0, [r7, #4]
	return 3.3f * value / 4096.0f;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800139e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013c0 <getValueAdcIntCh2+0x5c>
 80013a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80013c4 <getValueAdcIntCh2+0x60>
 80013aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013ae:	eef0 7a66 	vmov.f32	s15, s13
}
 80013b2:	eeb0 0a67 	vmov.f32	s0, s15
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000b5c 	.word	0x20000b5c
 80013c0:	40533333 	.word	0x40533333
 80013c4:	45800000 	.word	0x45800000

080013c8 <getValueAdcIntCh3>:
float getValueAdcIntCh3(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
	uint32_t value;
	adc_select_ch(ADC_CHANNEL_3);
 80013ce:	2003      	movs	r0, #3
 80013d0:	f7ff fdf0 	bl	8000fb4 <adc_select_ch>
	HAL_ADC_Start(hadc1_new);
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <getValueAdcIntCh3+0x58>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f004 f809 	bl	80053f0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1_new, HAL_MAX_DELAY);
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <getValueAdcIntCh3+0x58>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f04f 31ff 	mov.w	r1, #4294967295
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 f8b6 	bl	8005558 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(hadc1_new);
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <getValueAdcIntCh3+0x58>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f004 f93c 	bl	800566e <HAL_ADC_GetValue>
 80013f6:	6078      	str	r0, [r7, #4]
	return 3.3f * value / 4096.0f;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001402:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001424 <getValueAdcIntCh3+0x5c>
 8001406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001428 <getValueAdcIntCh3+0x60>
 800140e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001412:	eef0 7a66 	vmov.f32	s15, s13
}
 8001416:	eeb0 0a67 	vmov.f32	s0, s15
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000b5c 	.word	0x20000b5c
 8001424:	40533333 	.word	0x40533333
 8001428:	45800000 	.word	0x45800000

0800142c <displayAddress>:
volatile uint8_t ds2addr[];
volatile uint8_t ds3addr[];
 char addressTextLine1[30];
 char addressTextLine2[30];
volatile uint8_t address[8];
void displayAddress(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
	memset(addressTextLine1, 0, sizeof(addressTextLine1));
 8001432:	221e      	movs	r2, #30
 8001434:	2100      	movs	r1, #0
 8001436:	4826      	ldr	r0, [pc, #152]	; (80014d0 <displayAddress+0xa4>)
 8001438:	f00c fcb0 	bl	800dd9c <memset>
	memset(addressTextLine2, 0, sizeof(addressTextLine2));
 800143c:	221e      	movs	r2, #30
 800143e:	2100      	movs	r1, #0
 8001440:	4824      	ldr	r0, [pc, #144]	; (80014d4 <displayAddress+0xa8>)
 8001442:	f00c fcab 	bl	800dd9c <memset>
	char temp[5];
	oneWireReset();
 8001446:	f000 f9a9 	bl	800179c <oneWireReset>
	oneWireWrite(0x33);
 800144a:	2033      	movs	r0, #51	; 0x33
 800144c:	f000 fa18 	bl	8001880 <oneWireWrite>

	for (int i = 0; i < 8; i++) {
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	e033      	b.n	80014be <displayAddress+0x92>
		address[i] = oneWireRead();
 8001456:	f000 fa2f 	bl	80018b8 <oneWireRead>
 800145a:	4603      	mov	r3, r0
 800145c:	4619      	mov	r1, r3
 800145e:	4a1e      	ldr	r2, [pc, #120]	; (80014d8 <displayAddress+0xac>)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	460a      	mov	r2, r1
 8001466:	701a      	strb	r2, [r3, #0]
		if(i<7) {
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2b06      	cmp	r3, #6
 800146c:	dc0b      	bgt.n	8001486 <displayAddress+0x5a>
			sprintf(temp, "0x%02X,", address[i]);
 800146e:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <displayAddress+0xac>)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4917      	ldr	r1, [pc, #92]	; (80014dc <displayAddress+0xb0>)
 800147e:	4618      	mov	r0, r3
 8001480:	f00c fb7a 	bl	800db78 <siprintf>
 8001484:	e00a      	b.n	800149c <displayAddress+0x70>
		}
		else {
			sprintf(temp, "0x%02X", address[i]);
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <displayAddress+0xac>)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	4912      	ldr	r1, [pc, #72]	; (80014e0 <displayAddress+0xb4>)
 8001496:	4618      	mov	r0, r3
 8001498:	f00c fb6e 	bl	800db78 <siprintf>
		}
		if (i < 4) {
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	dc05      	bgt.n	80014ae <displayAddress+0x82>
			strcat(addressTextLine1, temp);
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	4619      	mov	r1, r3
 80014a6:	480a      	ldr	r0, [pc, #40]	; (80014d0 <displayAddress+0xa4>)
 80014a8:	f00c fc80 	bl	800ddac <strcat>
 80014ac:	e004      	b.n	80014b8 <displayAddress+0x8c>
		}
		else {
			strcat(addressTextLine2, temp);
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4808      	ldr	r0, [pc, #32]	; (80014d4 <displayAddress+0xa8>)
 80014b4:	f00c fc7a 	bl	800ddac <strcat>
	for (int i = 0; i < 8; i++) {
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3301      	adds	r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b07      	cmp	r3, #7
 80014c2:	ddc8      	ble.n	8001456 <displayAddress+0x2a>
		}

	}
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000b80 	.word	0x20000b80
 80014d4:	20000ba0 	.word	0x20000ba0
 80014d8:	20000bc0 	.word	0x20000bc0
 80014dc:	0800ff68 	.word	0x0800ff68
 80014e0:	0800ff70 	.word	0x0800ff70

080014e4 <getValueDs1>:


float getValueDs1(void) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
		oneWireReset();
 80014ea:	f000 f957 	bl	800179c <oneWireReset>
		oneWireWrite(0x55);
 80014ee:	2055      	movs	r0, #85	; 0x55
 80014f0:	f000 f9c6 	bl	8001880 <oneWireWrite>

		for(int i=0; i<8; i++) {
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	e00a      	b.n	8001510 <getValueDs1+0x2c>
			oneWireWrite(ds1addr[i]);
 80014fa:	4a2c      	ldr	r2, [pc, #176]	; (80015ac <getValueDs1+0xc8>)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	4413      	add	r3, r2
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f9bb 	bl	8001880 <oneWireWrite>
		for(int i=0; i<8; i++) {
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3301      	adds	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2b07      	cmp	r3, #7
 8001514:	ddf1      	ble.n	80014fa <getValueDs1+0x16>
		}
		oneWireWrite(0x44);
 8001516:	2044      	movs	r0, #68	; 0x44
 8001518:	f000 f9b2 	bl	8001880 <oneWireWrite>
		HAL_Delay(95);
 800151c:	205f      	movs	r0, #95	; 0x5f
 800151e:	f003 feff 	bl	8005320 <HAL_Delay>
		oneWireReset();
 8001522:	f000 f93b 	bl	800179c <oneWireReset>
		oneWireWrite(0x55);
 8001526:	2055      	movs	r0, #85	; 0x55
 8001528:	f000 f9aa 	bl	8001880 <oneWireWrite>
		for(int i=0; i<8; i++) {
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	e00a      	b.n	8001548 <getValueDs1+0x64>
			oneWireWrite(ds1addr[i]);
 8001532:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <getValueDs1+0xc8>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	4413      	add	r3, r2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4618      	mov	r0, r3
 800153e:	f000 f99f 	bl	8001880 <oneWireWrite>
		for(int i=0; i<8; i++) {
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	3301      	adds	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2b07      	cmp	r3, #7
 800154c:	ddf1      	ble.n	8001532 <getValueDs1+0x4e>
		}
		oneWireWrite(0xbe);
 800154e:	20be      	movs	r0, #190	; 0xbe
 8001550:	f000 f996 	bl	8001880 <oneWireWrite>
		int i;
		uint8_t rom_code[9];
		for (i = 0; i < 9; i++)
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	e00b      	b.n	8001572 <getValueDs1+0x8e>
		  rom_code[i] = oneWireRead();
 800155a:	f000 f9ad 	bl	80018b8 <oneWireRead>
 800155e:	4603      	mov	r3, r0
 8001560:	4619      	mov	r1, r3
 8001562:	1d3a      	adds	r2, r7, #4
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	4413      	add	r3, r2
 8001568:	460a      	mov	r2, r1
 800156a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 9; i++)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2b08      	cmp	r3, #8
 8001576:	ddf0      	ble.n	800155a <getValueDs1+0x76>
		float temp= ((rom_code[1]<<8) | (rom_code[0]));
 8001578:	797b      	ldrb	r3, [r7, #5]
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	793a      	ldrb	r2, [r7, #4]
 800157e:	4313      	orrs	r3, r2
 8001580:	ee07 3a90 	vmov	s15, r3
 8001584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001588:	edc7 7a04 	vstr	s15, [r7, #16]

		//send_uart_float(temp);
		return temp = temp/16.0f;
 800158c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001590:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001594:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001598:	edc7 7a04 	vstr	s15, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	ee07 3a90 	vmov	s15, r3
}
 80015a2:	eeb0 0a67 	vmov.f32	s0, s15
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000b68 	.word	0x20000b68

080015b0 <getValueDs2>:

float getValueDs2(void) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
	oneWireReset();
 80015b6:	f000 f8f1 	bl	800179c <oneWireReset>
	oneWireWrite(0x55);
 80015ba:	2055      	movs	r0, #85	; 0x55
 80015bc:	f000 f960 	bl	8001880 <oneWireWrite>

	for(int i=0; i<8; i++) {
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	e00a      	b.n	80015dc <getValueDs2+0x2c>
		oneWireWrite(ds2addr[i]);
 80015c6:	4a2c      	ldr	r2, [pc, #176]	; (8001678 <getValueDs2+0xc8>)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	4413      	add	r3, r2
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 f955 	bl	8001880 <oneWireWrite>
	for(int i=0; i<8; i++) {
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3301      	adds	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b07      	cmp	r3, #7
 80015e0:	ddf1      	ble.n	80015c6 <getValueDs2+0x16>
	}
	oneWireWrite(0x44);
 80015e2:	2044      	movs	r0, #68	; 0x44
 80015e4:	f000 f94c 	bl	8001880 <oneWireWrite>
	HAL_Delay(95);
 80015e8:	205f      	movs	r0, #95	; 0x5f
 80015ea:	f003 fe99 	bl	8005320 <HAL_Delay>
	oneWireReset();
 80015ee:	f000 f8d5 	bl	800179c <oneWireReset>
	oneWireWrite(0x55);
 80015f2:	2055      	movs	r0, #85	; 0x55
 80015f4:	f000 f944 	bl	8001880 <oneWireWrite>
	for(int i=0; i<8; i++) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
 80015fc:	e00a      	b.n	8001614 <getValueDs2+0x64>
		oneWireWrite(ds2addr[i]);
 80015fe:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <getValueDs2+0xc8>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f000 f939 	bl	8001880 <oneWireWrite>
	for(int i=0; i<8; i++) {
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	3301      	adds	r3, #1
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2b07      	cmp	r3, #7
 8001618:	ddf1      	ble.n	80015fe <getValueDs2+0x4e>
	}
	oneWireWrite(0xbe);
 800161a:	20be      	movs	r0, #190	; 0xbe
 800161c:	f000 f930 	bl	8001880 <oneWireWrite>
	uint8_t rom_code[9];
	for (int i = 0; i < 9; i++)
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	e00b      	b.n	800163e <getValueDs2+0x8e>
	  rom_code[i] = oneWireRead();
 8001626:	f000 f947 	bl	80018b8 <oneWireRead>
 800162a:	4603      	mov	r3, r0
 800162c:	4619      	mov	r1, r3
 800162e:	1d3a      	adds	r2, r7, #4
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	4413      	add	r3, r2
 8001634:	460a      	mov	r2, r1
 8001636:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b08      	cmp	r3, #8
 8001642:	ddf0      	ble.n	8001626 <getValueDs2+0x76>
	float temp= ((rom_code[1]<<8) | (rom_code[0]));
 8001644:	797b      	ldrb	r3, [r7, #5]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	793a      	ldrb	r2, [r7, #4]
 800164a:	4313      	orrs	r3, r2
 800164c:	ee07 3a90 	vmov	s15, r3
 8001650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001654:	edc7 7a04 	vstr	s15, [r7, #16]

	//send_uart_float(temp);
	return temp = temp/16.0f;
 8001658:	ed97 7a04 	vldr	s14, [r7, #16]
 800165c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001660:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001664:	edc7 7a04 	vstr	s15, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	ee07 3a90 	vmov	s15, r3

}
 800166e:	eeb0 0a67 	vmov.f32	s0, s15
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000b70 	.word	0x20000b70

0800167c <getValueDs3>:

float getValueDs3(void) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
	oneWireReset();
 8001682:	f000 f88b 	bl	800179c <oneWireReset>
	oneWireWrite(0x55);
 8001686:	2055      	movs	r0, #85	; 0x55
 8001688:	f000 f8fa 	bl	8001880 <oneWireWrite>

	for(int i=0; i<8; i++) {
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	e00a      	b.n	80016a8 <getValueDs3+0x2c>
		oneWireWrite(ds3addr[i]);
 8001692:	4a2c      	ldr	r2, [pc, #176]	; (8001744 <getValueDs3+0xc8>)
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	4413      	add	r3, r2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f000 f8ef 	bl	8001880 <oneWireWrite>
	for(int i=0; i<8; i++) {
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3301      	adds	r3, #1
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	2b07      	cmp	r3, #7
 80016ac:	ddf1      	ble.n	8001692 <getValueDs3+0x16>
	}
	oneWireWrite(0x44);
 80016ae:	2044      	movs	r0, #68	; 0x44
 80016b0:	f000 f8e6 	bl	8001880 <oneWireWrite>
	HAL_Delay(95);
 80016b4:	205f      	movs	r0, #95	; 0x5f
 80016b6:	f003 fe33 	bl	8005320 <HAL_Delay>
	oneWireReset();
 80016ba:	f000 f86f 	bl	800179c <oneWireReset>
	oneWireWrite(0x55);
 80016be:	2055      	movs	r0, #85	; 0x55
 80016c0:	f000 f8de 	bl	8001880 <oneWireWrite>
	for(int i=0; i<8; i++) {
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	e00a      	b.n	80016e0 <getValueDs3+0x64>
		oneWireWrite(ds3addr[i]);
 80016ca:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <getValueDs3+0xc8>)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	4413      	add	r3, r2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 f8d3 	bl	8001880 <oneWireWrite>
	for(int i=0; i<8; i++) {
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	3301      	adds	r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b07      	cmp	r3, #7
 80016e4:	ddf1      	ble.n	80016ca <getValueDs3+0x4e>
	}
	oneWireWrite(0xbe);
 80016e6:	20be      	movs	r0, #190	; 0xbe
 80016e8:	f000 f8ca 	bl	8001880 <oneWireWrite>
	uint8_t rom_code[9];
	for (int i = 0; i < 9; i++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e00b      	b.n	800170a <getValueDs3+0x8e>
	  rom_code[i] = oneWireRead();
 80016f2:	f000 f8e1 	bl	80018b8 <oneWireRead>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4619      	mov	r1, r3
 80016fa:	1d3a      	adds	r2, r7, #4
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	4413      	add	r3, r2
 8001700:	460a      	mov	r2, r1
 8001702:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b08      	cmp	r3, #8
 800170e:	ddf0      	ble.n	80016f2 <getValueDs3+0x76>
	float temp= ((rom_code[1]<<8) | (rom_code[0]));
 8001710:	797b      	ldrb	r3, [r7, #5]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	793a      	ldrb	r2, [r7, #4]
 8001716:	4313      	orrs	r3, r2
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001720:	edc7 7a04 	vstr	s15, [r7, #16]
	return temp = temp/16.0f;
 8001724:	ed97 7a04 	vldr	s14, [r7, #16]
 8001728:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800172c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001730:	edc7 7a04 	vstr	s15, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	ee07 3a90 	vmov	s15, r3
}
 800173a:	eeb0 0a67 	vmov.f32	s0, s15
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000b78 	.word	0x20000b78

08001748 <ds18_init>:


void ds18_init(TIM_HandleTypeDef *htim10) {
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	htim10_new=htim10;
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <ds18_init+0x1c>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6013      	str	r3, [r2, #0]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000b64 	.word	0x20000b64

08001768 <delay_us>:


void delay_us(uint32_t us)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim10_new, 0);
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <delay_us+0x30>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
	  while (__HAL_TIM_GET_COUNTER(htim10_new) < us) {}
 800177a:	bf00      	nop
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <delay_us+0x30>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	429a      	cmp	r2, r3
 8001788:	d8f8      	bhi.n	800177c <delay_us+0x14>
}
 800178a:	bf00      	nop
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	20000b64 	.word	0x20000b64

0800179c <oneWireReset>:

void oneWireReset(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2102      	movs	r1, #2
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <oneWireReset+0x3c>)
 80017a6:	f004 fc4b 	bl	8006040 <HAL_GPIO_WritePin>
  delay_us(480);
 80017aa:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80017ae:	f7ff ffdb 	bl	8001768 <delay_us>
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 80017b2:	2201      	movs	r2, #1
 80017b4:	2102      	movs	r1, #2
 80017b6:	4808      	ldr	r0, [pc, #32]	; (80017d8 <oneWireReset+0x3c>)
 80017b8:	f004 fc42 	bl	8006040 <HAL_GPIO_WritePin>
  delay_us(70);
 80017bc:	2046      	movs	r0, #70	; 0x46
 80017be:	f7ff ffd3 	bl	8001768 <delay_us>
  HAL_GPIO_ReadPin(DSO_DATA_GPIO_Port, DSO_DATA_Pin);
 80017c2:	2102      	movs	r1, #2
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <oneWireReset+0x3c>)
 80017c6:	f004 fc23 	bl	8006010 <HAL_GPIO_ReadPin>
  delay_us(410);
 80017ca:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80017ce:	f7ff ffcb 	bl	8001768 <delay_us>

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40020400 	.word	0x40020400

080017dc <bitWrite>:

void bitWrite(int value)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if (value) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d010      	beq.n	800180c <bitWrite+0x30>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2102      	movs	r1, #2
 80017ee:	4811      	ldr	r0, [pc, #68]	; (8001834 <bitWrite+0x58>)
 80017f0:	f004 fc26 	bl	8006040 <HAL_GPIO_WritePin>
    delay_us(10);
 80017f4:	200a      	movs	r0, #10
 80017f6:	f7ff ffb7 	bl	8001768 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	2102      	movs	r1, #2
 80017fe:	480d      	ldr	r0, [pc, #52]	; (8001834 <bitWrite+0x58>)
 8001800:	f004 fc1e 	bl	8006040 <HAL_GPIO_WritePin>
    delay_us(65);
 8001804:	2041      	movs	r0, #65	; 0x41
 8001806:	f7ff ffaf 	bl	8001768 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
    delay_us(65);
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
    delay_us(20);
  }
}
 800180a:	e00f      	b.n	800182c <bitWrite+0x50>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	2102      	movs	r1, #2
 8001810:	4808      	ldr	r0, [pc, #32]	; (8001834 <bitWrite+0x58>)
 8001812:	f004 fc15 	bl	8006040 <HAL_GPIO_WritePin>
    delay_us(65);
 8001816:	2041      	movs	r0, #65	; 0x41
 8001818:	f7ff ffa6 	bl	8001768 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	2102      	movs	r1, #2
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <bitWrite+0x58>)
 8001822:	f004 fc0d 	bl	8006040 <HAL_GPIO_WritePin>
    delay_us(20);
 8001826:	2014      	movs	r0, #20
 8001828:	f7ff ff9e 	bl	8001768 <delay_us>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40020400 	.word	0x40020400

08001838 <bitRead>:


int bitRead(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	2102      	movs	r1, #2
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <bitRead+0x44>)
 8001844:	f004 fbfc 	bl	8006040 <HAL_GPIO_WritePin>
  delay_us(10);
 8001848:	200a      	movs	r0, #10
 800184a:	f7ff ff8d 	bl	8001768 <delay_us>
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	2102      	movs	r1, #2
 8001852:	480a      	ldr	r0, [pc, #40]	; (800187c <bitRead+0x44>)
 8001854:	f004 fbf4 	bl	8006040 <HAL_GPIO_WritePin>
  delay_us(15);
 8001858:	200f      	movs	r0, #15
 800185a:	f7ff ff85 	bl	8001768 <delay_us>
  rc = HAL_GPIO_ReadPin(DSO_DATA_GPIO_Port, DSO_DATA_Pin);
 800185e:	2102      	movs	r1, #2
 8001860:	4806      	ldr	r0, [pc, #24]	; (800187c <bitRead+0x44>)
 8001862:	f004 fbd5 	bl	8006010 <HAL_GPIO_ReadPin>
 8001866:	4603      	mov	r3, r0
 8001868:	607b      	str	r3, [r7, #4]
  delay_us(70);
 800186a:	2046      	movs	r0, #70	; 0x46
 800186c:	f7ff ff7c 	bl	8001768 <delay_us>
  return rc;
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40020400 	.word	0x40020400

08001880 <oneWireWrite>:

void oneWireWrite(uint8_t b)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
	int i=0;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
	while(i<8) {
 800188e:	e00b      	b.n	80018a8 <oneWireWrite+0x28>
		bitWrite(b & 1);
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ffa0 	bl	80017dc <bitWrite>
		b >>= 1;
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	71fb      	strb	r3, [r7, #7]
		i++;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3301      	adds	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
	while(i<8) {
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b07      	cmp	r3, #7
 80018ac:	ddf0      	ble.n	8001890 <oneWireWrite+0x10>
  }
}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <oneWireRead>:

uint8_t oneWireRead(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	71fb      	strb	r3, [r7, #7]
  int i=0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	603b      	str	r3, [r7, #0]
  while (i<8) {
 80018c6:	e00e      	b.n	80018e6 <oneWireRead+0x2e>
    value >>= 1;
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	085b      	lsrs	r3, r3, #1
 80018cc:	71fb      	strb	r3, [r7, #7]
    if (bitRead()) {
 80018ce:	f7ff ffb3 	bl	8001838 <bitRead>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <oneWireRead+0x28>
    	value = value | 0x80;
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018de:	71fb      	strb	r3, [r7, #7]
    }
    i++;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	3301      	adds	r3, #1
 80018e4:	603b      	str	r3, [r7, #0]
  while (i<8) {
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2b07      	cmp	r3, #7
 80018ea:	dded      	ble.n	80018c8 <oneWireRead+0x10>
  }
  return value;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <encSetRange>:


TIM_HandleTypeDef *htim1_new;


void encSetRange(uint16_t min, uint16_t max) {
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	460a      	mov	r2, r1
 8001902:	80fb      	strh	r3, [r7, #6]
 8001904:	4613      	mov	r3, r2
 8001906:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(htim1_new, max);
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <encSetRange+0x30>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	88ba      	ldrh	r2, [r7, #4]
 8001910:	62da      	str	r2, [r3, #44]	; 0x2c
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <encSetRange+0x30>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	88ba      	ldrh	r2, [r7, #4]
 8001918:	60da      	str	r2, [r3, #12]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000bc8 	.word	0x20000bc8

0800192c <encSetPos>:

void encSetPos(uint16_t encPos) {
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim1_new, encPos);
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <encSetPos+0x20>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	88fa      	ldrh	r2, [r7, #6]
 800193e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	20000bc8 	.word	0x20000bc8

08001950 <encoderGet>:

uint32_t encoderGet(void) {
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(htim1_new);
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <encoderGet+0x18>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000bc8 	.word	0x20000bc8

0800196c <encoderInit>:

void encoderInit(TIM_HandleTypeDef *htim1) {
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	htim1_new=htim1;
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <encoderInit+0x1c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000bc8 	.word	0x20000bc8

0800198c <entrySelected>:

bool entrySelected(int16_t id) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	80fb      	strh	r3, [r7, #6]
    if (encoderGet() == id) {
 8001996:	f7ff ffdb 	bl	8001950 <encoderGet>
 800199a:	4602      	mov	r2, r0
 800199c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d101      	bne.n	80019a8 <entrySelected+0x1c>
        return true;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <entrySelected+0x1e>
    }
    return false;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <entryClicked>:

bool entryClicked(int16_t id) {
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	80fb      	strh	r3, [r7, #6]
    if (encoderGet() == id && isClicked()) {
 80019bc:	f7ff ffc8 	bl	8001950 <encoderGet>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d106      	bne.n	80019d8 <entryClicked+0x26>
 80019ca:	f000 f8b5 	bl	8001b38 <isClicked>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <entryClicked+0x26>
        return true;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <entryClicked+0x28>
    }
    return false;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <send_uart>:
int8_t ch2przerwanie=0;
int8_t ch3przerwanie=0;
int8_t ch4przerwanie=0;


void send_uart(char *string) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7fe fc57 	bl	80002a0 <strlen>
 80019f2:	4603      	mov	r3, r0
 80019f4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart6, (uint8_t *)string, len, HAL_MAX_DELAY);
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4803      	ldr	r0, [pc, #12]	; (8001a10 <send_uart+0x2c>)
 8001a02:	f008 fafc 	bl	8009ffe <HAL_UART_Transmit>
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000e54 	.word	0x20000e54

08001a14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d10d      	bne.n	8001a42 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_TIM_Base_Stop_IT(htim);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f007 f9e6 	bl	8008df8 <HAL_TIM_Base_Stop_IT>
		if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)==GPIO_PIN_RESET) {
 8001a2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a30:	4807      	ldr	r0, [pc, #28]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001a32:	f004 faed 	bl	8006010 <HAL_GPIO_ReadPin>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <HAL_TIM_PeriodElapsedCallback+0x2e>
			encClicked=1;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
			}
		}
	}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40014800 	.word	0x40014800
 8001a50:	40020400 	.word	0x40020400
 8001a54:	20000e98 	.word	0x20000e98

08001a58 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t pulse;
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7f1b      	ldrb	r3, [r3, #28]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d10e      	bne.n	8001a86 <HAL_TIM_OC_DelayElapsedCallback+0x2e>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001a68:	2100      	movs	r1, #0
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f007 feca 	bl	8009804 <HAL_TIM_ReadCapturedValue>
 8001a70:	60f8      	str	r0, [r7, #12]
    ch1przerwanie=1;
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (pulse + 50000));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8001a82:	3350      	adds	r3, #80	; 0x50
 8001a84:	6353      	str	r3, [r2, #52]	; 0x34
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7f1b      	ldrb	r3, [r3, #28]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d10e      	bne.n	8001aac <HAL_TIM_OC_DelayElapsedCallback+0x54>
	pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001a8e:	2104      	movs	r1, #4
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f007 feb7 	bl	8009804 <HAL_TIM_ReadCapturedValue>
 8001a96:	60f8      	str	r0, [r7, #12]
	ch2przerwanie=1;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (pulse + 100000));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 8001aa8:	33a0      	adds	r3, #160	; 0xa0
 8001aaa:	6393      	str	r3, [r2, #56]	; 0x38
  	  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7f1b      	ldrb	r3, [r3, #28]
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d10f      	bne.n	8001ad4 <HAL_TIM_OC_DelayElapsedCallback+0x7c>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001ab4:	2108      	movs	r1, #8
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f007 fea4 	bl	8009804 <HAL_TIM_ReadCapturedValue>
 8001abc:	60f8      	str	r0, [r7, #12]
    ch3przerwanie=1;
 8001abe:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, (pulse + 200000));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 8001ace:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001ad2:	63d3      	str	r3, [r2, #60]	; 0x3c
    }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7f1b      	ldrb	r3, [r3, #28]
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d10f      	bne.n	8001afc <HAL_TIM_OC_DelayElapsedCallback+0xa4>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001adc:	210c      	movs	r1, #12
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f007 fe90 	bl	8009804 <HAL_TIM_ReadCapturedValue>
 8001ae4:	60f8      	str	r0, [r7, #12]
    ch4przerwanie=1;
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, (pulse + 400000));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f503 23c3 	add.w	r3, r3, #399360	; 0x61800
 8001af6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001afa:	6413      	str	r3, [r2, #64]	; 0x40
    }
}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000e99 	.word	0x20000e99
 8001b08:	20000e9a 	.word	0x20000e9a
 8001b0c:	20000e9b 	.word	0x20000e9b
 8001b10:	20000e9c 	.word	0x20000e9c

08001b14 <HAL_GPIO_EXTI_Callback>:


char charAr[50];


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80fb      	strh	r3, [r7, #6]
	  if(GPIO_Pin == ENC_BTN_Pin) {
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b24:	d102      	bne.n	8001b2c <HAL_GPIO_EXTI_Callback+0x18>
		  HAL_TIM_Base_Start_IT(&htim11);
 8001b26:	4803      	ldr	r0, [pc, #12]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x20>)
 8001b28:	f007 f904 	bl	8008d34 <HAL_TIM_Base_Start_IT>
	  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000e0c 	.word	0x20000e0c

08001b38 <isClicked>:


bool isClicked(void) {
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
	if(encClicked==1) {
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <isClicked+0x24>)
 8001b3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d104      	bne.n	8001b50 <isClicked+0x18>
		encClicked=0;
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <isClicked+0x24>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
		return true;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <isClicked+0x1a>
	}
	else {
		return false;
 8001b50:	2300      	movs	r3, #0
	}
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	20000e98 	.word	0x20000e98

08001b60 <getRtcString>:
    snprintf(buffer, sizeof(buffer), "%0.2f \n\r", value);
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
}
RTC_TimeTypeDef time;
RTC_DateTypeDef date;
char* getRtcString(void)  {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b09c      	sub	sp, #112	; 0x70
 8001b64:	af02      	add	r7, sp, #8
	static char dateTime[100];
	char rtcTimeStr[50];
	char rtcDateStr[50];
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001b66:	2200      	movs	r2, #0
 8001b68:	4918      	ldr	r1, [pc, #96]	; (8001bcc <getRtcString+0x6c>)
 8001b6a:	4819      	ldr	r0, [pc, #100]	; (8001bd0 <getRtcString+0x70>)
 8001b6c:	f006 fa18 	bl	8007fa0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001b70:	2200      	movs	r2, #0
 8001b72:	4918      	ldr	r1, [pc, #96]	; (8001bd4 <getRtcString+0x74>)
 8001b74:	4816      	ldr	r0, [pc, #88]	; (8001bd0 <getRtcString+0x70>)
 8001b76:	f006 faf5 	bl	8008164 <HAL_RTC_GetDate>
	sprintf(rtcTimeStr, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <getRtcString+0x6c>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <getRtcString+0x6c>)
 8001b82:	785b      	ldrb	r3, [r3, #1]
 8001b84:	4619      	mov	r1, r3
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <getRtcString+0x6c>)
 8001b88:	789b      	ldrb	r3, [r3, #2]
 8001b8a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	460b      	mov	r3, r1
 8001b92:	4911      	ldr	r1, [pc, #68]	; (8001bd8 <getRtcString+0x78>)
 8001b94:	f00b fff0 	bl	800db78 <siprintf>
	sprintf(rtcDateStr, "%02d/%02d/%02d", date.Date, date.Month, date.Year);
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <getRtcString+0x74>)
 8001b9a:	789b      	ldrb	r3, [r3, #2]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <getRtcString+0x74>)
 8001ba0:	785b      	ldrb	r3, [r3, #1]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <getRtcString+0x74>)
 8001ba6:	78db      	ldrb	r3, [r3, #3]
 8001ba8:	4638      	mov	r0, r7
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	460b      	mov	r3, r1
 8001bae:	490b      	ldr	r1, [pc, #44]	; (8001bdc <getRtcString+0x7c>)
 8001bb0:	f00b ffe2 	bl	800db78 <siprintf>
	sprintf(dateTime, "%s %s", rtcTimeStr, rtcDateStr);
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001bba:	4909      	ldr	r1, [pc, #36]	; (8001be0 <getRtcString+0x80>)
 8001bbc:	4809      	ldr	r0, [pc, #36]	; (8001be4 <getRtcString+0x84>)
 8001bbe:	f00b ffdb 	bl	800db78 <siprintf>

	return dateTime;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <getRtcString+0x84>)
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3768      	adds	r7, #104	; 0x68
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000ea0 	.word	0x20000ea0
 8001bd0:	20000cbc 	.word	0x20000cbc
 8001bd4:	20000eb4 	.word	0x20000eb4
 8001bd8:	0800ff8c 	.word	0x0800ff8c
 8001bdc:	0800ff9c 	.word	0x0800ff9c
 8001be0:	0800ffac 	.word	0x0800ffac
 8001be4:	20000ec0 	.word	0x20000ec0

08001be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	f5ad 6d08 	sub.w	sp, sp, #2176	; 0x880
 8001bee:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf0:	f003 fb24 	bl	800523c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf4:	f000 f99c 	bl	8001f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf8:	f000 fcac 	bl	8002554 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001bfc:	f000 fa02 	bl	8002004 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c00:	f000 fa52 	bl	80020a8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001c04:	f000 fa7e 	bl	8002104 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001c08:	f000 fb04 	bl	8002214 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001c0c:	f000 fb38 	bl	8002280 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8001c10:	f000 fc76 	bl	8002500 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001c14:	f000 fc2c 	bl	8002470 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001c18:	f000 fc4e 	bl	80024b8 <MX_TIM11_Init>
  MX_TIM2_Init();
 8001c1c:	f000 fb86 	bl	800232c <MX_TIM2_Init>
  MX_FATFS_Init();
 8001c20:	f008 fd62 	bl	800a6e8 <MX_FATFS_Init>
  MX_RTC_Init();
 8001c24:	f000 fa9c 	bl	8002160 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  encoderInit(&htim1);
 8001c28:	48ac      	ldr	r0, [pc, #688]	; (8001edc <main+0x2f4>)
 8001c2a:	f7ff fe9f 	bl	800196c <encoderInit>

  ds18_init(&htim10);
 8001c2e:	48ac      	ldr	r0, [pc, #688]	; (8001ee0 <main+0x2f8>)
 8001c30:	f7ff fd8a 	bl	8001748 <ds18_init>

  adc_int_init(&hadc1);
 8001c34:	48ab      	ldr	r0, [pc, #684]	; (8001ee4 <main+0x2fc>)
 8001c36:	f7ff f99d 	bl	8000f74 <adc_int_init>
  adc_ext_init(&hi2c2);
 8001c3a:	48ab      	ldr	r0, [pc, #684]	; (8001ee8 <main+0x300>)
 8001c3c:	f7ff f9aa 	bl	8000f94 <adc_ext_init>
  huart_ds_init(&huart6);
 8001c40:	48aa      	ldr	r0, [pc, #680]	; (8001eec <main+0x304>)
 8001c42:	f000 fd21 	bl	8002688 <huart_ds_init>
  sendRtcHandler(&hrtc);
 8001c46:	48aa      	ldr	r0, [pc, #680]	; (8001ef0 <main+0x308>)
 8001c48:	f000 fd2e 	bl	80026a8 <sendRtcHandler>
  HAL_TIM_Base_Start(&htim10);
 8001c4c:	48a4      	ldr	r0, [pc, #656]	; (8001ee0 <main+0x2f8>)
 8001c4e:	f007 f817 	bl	8008c80 <HAL_TIM_Base_Start>
  displayInit();
 8001c52:	f001 fd29 	bl	80036a8 <displayInit>


  CircularBuffer_Init(&cb);
 8001c56:	48a7      	ldr	r0, [pc, #668]	; (8001ef4 <main+0x30c>)
 8001c58:	f001 fd2c 	bl	80036b4 <CircularBuffer_Init>
  sd_init();
 8001c5c:	f001 fdec 	bl	8003838 <sd_init>


  debug=false;
 8001c60:	4ba5      	ldr	r3, [pc, #660]	; (8001ef8 <main+0x310>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001c66:	213c      	movs	r1, #60	; 0x3c
 8001c68:	489c      	ldr	r0, [pc, #624]	; (8001edc <main+0x2f4>)
 8001c6a:	f007 faf1 	bl	8009250 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001c6e:	2100      	movs	r1, #0
 8001c70:	48a2      	ldr	r0, [pc, #648]	; (8001efc <main+0x314>)
 8001c72:	f007 f949 	bl	8008f08 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001c76:	2104      	movs	r1, #4
 8001c78:	48a0      	ldr	r0, [pc, #640]	; (8001efc <main+0x314>)
 8001c7a:	f007 f945 	bl	8008f08 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001c7e:	2108      	movs	r1, #8
 8001c80:	489e      	ldr	r0, [pc, #632]	; (8001efc <main+0x314>)
 8001c82:	f007 f941 	bl	8008f08 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001c86:	210c      	movs	r1, #12
 8001c88:	489c      	ldr	r0, [pc, #624]	; (8001efc <main+0x314>)
 8001c8a:	f007 f93d 	bl	8008f08 <HAL_TIM_OC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(debug) {
 8001c8e:	4b9a      	ldr	r3, [pc, #616]	; (8001ef8 <main+0x310>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 80e7 	beq.w	8001e66 <main+0x27e>
		  bool needToWrite=false;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
		  if(ch1przerwanie==1) {
 8001c9e:	4b98      	ldr	r3, [pc, #608]	; (8001f00 <main+0x318>)
 8001ca0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d107      	bne.n	8001cb8 <main+0xd0>
			  ch1Enable();
 8001ca8:	f001 f846 	bl	8002d38 <ch1Enable>
			  ch1przerwanie=0;
 8001cac:	4b94      	ldr	r3, [pc, #592]	; (8001f00 <main+0x318>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
			  needToWrite=true;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
		  }
		  if(ch2przerwanie==1) {
 8001cb8:	4b92      	ldr	r3, [pc, #584]	; (8001f04 <main+0x31c>)
 8001cba:	f993 3000 	ldrsb.w	r3, [r3]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <main+0xea>
			  ch2przerwanie=0;
 8001cc2:	4b90      	ldr	r3, [pc, #576]	; (8001f04 <main+0x31c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
			  ch2Enable();
 8001cc8:	f001 f896 	bl	8002df8 <ch2Enable>
			  needToWrite=true;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
		  }
		  if(ch3przerwanie==1) {
 8001cd2:	4b8d      	ldr	r3, [pc, #564]	; (8001f08 <main+0x320>)
 8001cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d107      	bne.n	8001cec <main+0x104>
			  ch3przerwanie=0;
 8001cdc:	4b8a      	ldr	r3, [pc, #552]	; (8001f08 <main+0x320>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
			  ch3Enable();
 8001ce2:	f001 f8e9 	bl	8002eb8 <ch3Enable>
			  needToWrite=true;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
			  }
		  if(ch4przerwanie==1) {
 8001cec:	4b87      	ldr	r3, [pc, #540]	; (8001f0c <main+0x324>)
 8001cee:	f993 3000 	ldrsb.w	r3, [r3]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d107      	bne.n	8001d06 <main+0x11e>
			  ch4przerwanie=0;
 8001cf6:	4b85      	ldr	r3, [pc, #532]	; (8001f0c <main+0x324>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
			  ch4Enable();
 8001cfc:	f001 f93c 	bl	8002f78 <ch4Enable>
			  needToWrite=true;
 8001d00:	2301      	movs	r3, #1
 8001d02:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
		  }
		  if(needToWrite) {
 8001d06:	f897 3877 	ldrb.w	r3, [r7, #2167]	; 0x877
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80a6 	beq.w	8001e5c <main+0x274>

			  char* dateTimeStr = getRtcString();
 8001d10:	f7ff ff26 	bl	8001b60 <getRtcString>
 8001d14:	f8c7 0868 	str.w	r0, [r7, #2152]	; 0x868
			  char finalResults[2048] = "";
 8001d18:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8001d1c:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	3304      	adds	r3, #4
 8001d26:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f00c f835 	bl	800dd9c <memset>
			  char temp[100];
			  bool allNulls=true;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3876 	strb.w	r3, [r7, #2166]	; 0x876
			  snprintf(finalResults, sizeof(finalResults), "%s,", dateTimeStr);
 8001d38:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001d3c:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8001d40:	4a73      	ldr	r2, [pc, #460]	; (8001f10 <main+0x328>)
 8001d42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d46:	f00b fee3 	bl	800db10 <sniprintf>

			  for (int i = 0; i < 11; i++) {
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 3870 	str.w	r3, [r7, #2160]	; 0x870
 8001d50:	e054      	b.n	8001dfc <main+0x214>
				  if (sensors[i].hasValue) {
 8001d52:	4a70      	ldr	r2, [pc, #448]	; (8001f14 <main+0x32c>)
 8001d54:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001d58:	015b      	lsls	r3, r3, #5
 8001d5a:	4413      	add	r3, r2
 8001d5c:	331c      	adds	r3, #28
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d016      	beq.n	8001d92 <main+0x1aa>
					  snprintf(temp, sizeof(temp), "%f", sensors[i].lastValue);
 8001d64:	4a6b      	ldr	r2, [pc, #428]	; (8001f14 <main+0x32c>)
 8001d66:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001d6a:	015b      	lsls	r3, r3, #5
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3318      	adds	r3, #24
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fc00 	bl	8000578 <__aeabi_f2d>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	1d38      	adds	r0, r7, #4
 8001d7e:	e9cd 2300 	strd	r2, r3, [sp]
 8001d82:	4a65      	ldr	r2, [pc, #404]	; (8001f18 <main+0x330>)
 8001d84:	2164      	movs	r1, #100	; 0x64
 8001d86:	f00b fec3 	bl	800db10 <sniprintf>
					  allNulls=false;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f887 3876 	strb.w	r3, [r7, #2166]	; 0x876
 8001d90:	e005      	b.n	8001d9e <main+0x1b6>
				  } else {
					  snprintf(temp, sizeof(temp), "");
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	4a61      	ldr	r2, [pc, #388]	; (8001f1c <main+0x334>)
 8001d96:	2164      	movs	r1, #100	; 0x64
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f00b feb9 	bl	800db10 <sniprintf>
				  }
				  strncat(finalResults, temp, sizeof(finalResults) - strlen(finalResults) - 1);
 8001d9e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fa7c 	bl	80002a0 <strlen>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8001dae:	3307      	adds	r3, #7
 8001db0:	1d39      	adds	r1, r7, #4
 8001db2:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001db6:	461a      	mov	r2, r3
 8001db8:	f00c f807 	bl	800ddca <strncat>
				  if (i < 10) {
 8001dbc:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001dc0:	2b09      	cmp	r3, #9
 8001dc2:	dc0e      	bgt.n	8001de2 <main+0x1fa>
					  strncat(finalResults, ",", sizeof(finalResults) - strlen(finalResults) - 1);
 8001dc4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fa69 	bl	80002a0 <strlen>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8001dd4:	3307      	adds	r3, #7
 8001dd6:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4950      	ldr	r1, [pc, #320]	; (8001f20 <main+0x338>)
 8001dde:	f00b fff4 	bl	800ddca <strncat>
				  }
				  sensors[i].hasValue = false;
 8001de2:	4a4c      	ldr	r2, [pc, #304]	; (8001f14 <main+0x32c>)
 8001de4:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001de8:	015b      	lsls	r3, r3, #5
 8001dea:	4413      	add	r3, r2
 8001dec:	331c      	adds	r3, #28
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 11; i++) {
 8001df2:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001df6:	3301      	adds	r3, #1
 8001df8:	f8c7 3870 	str.w	r3, [r7, #2160]	; 0x870
 8001dfc:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001e00:	2b0a      	cmp	r3, #10
 8001e02:	dda6      	ble.n	8001d52 <main+0x16a>
			  }
			      strncat(finalResults, "\n", sizeof(finalResults) - strlen(finalResults) - 1);
 8001e04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fa49 	bl	80002a0 <strlen>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8001e14:	3307      	adds	r3, #7
 8001e16:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4941      	ldr	r1, [pc, #260]	; (8001f24 <main+0x33c>)
 8001e1e:	f00b ffd4 	bl	800ddca <strncat>
			      if(!allNulls) {
 8001e22:	f897 3876 	ldrb.w	r3, [r7, #2166]	; 0x876
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <main+0x254>
			    	  CircularBuffer_Add(&cb, finalResults);
 8001e30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e34:	4619      	mov	r1, r3
 8001e36:	482f      	ldr	r0, [pc, #188]	; (8001ef4 <main+0x30c>)
 8001e38:	f001 fc54 	bl	80036e4 <CircularBuffer_Add>
			      }
			      dataFromBuff = CircularBuffer_Read(&cb);
 8001e3c:	482d      	ldr	r0, [pc, #180]	; (8001ef4 <main+0x30c>)
 8001e3e:	f001 fca3 	bl	8003788 <CircularBuffer_Read>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4a38      	ldr	r2, [pc, #224]	; (8001f28 <main+0x340>)
 8001e46:	6013      	str	r3, [r2, #0]
				  send_uart(dataFromBuff);
 8001e48:	4b37      	ldr	r3, [pc, #220]	; (8001f28 <main+0x340>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fdc9 	bl	80019e4 <send_uart>
				  sd_writeline(dataFromBuff);
 8001e52:	4b35      	ldr	r3, [pc, #212]	; (8001f28 <main+0x340>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 fd78 	bl	800394c <sd_writeline>

		  }
		  leds[4].state=true;
 8001e5c:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <main+0x344>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8001e64:	e003      	b.n	8001e6e <main+0x286>
	  }
	  else {
		  leds[4].state=false;
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <main+0x344>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  }
	displayMenu();
 8001e6e:	f001 fbd9 	bl	8003624 <displayMenu>
	for(int i=0; i<sizeof(leds)/sizeof(leds[0]); i++) {
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 8001e78:	e02b      	b.n	8001ed2 <main+0x2ea>
		if(leds[i].state) {
 8001e7a:	4a2c      	ldr	r2, [pc, #176]	; (8001f2c <main+0x344>)
 8001e7c:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	799b      	ldrb	r3, [r3, #6]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00f      	beq.n	8001eaa <main+0x2c2>
			HAL_GPIO_WritePin(leds[i].port, leds[i].pin, GPIO_PIN_SET);
 8001e8a:	4a28      	ldr	r2, [pc, #160]	; (8001f2c <main+0x344>)
 8001e8c:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001e90:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001e94:	4a25      	ldr	r2, [pc, #148]	; (8001f2c <main+0x344>)
 8001e96:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	889b      	ldrh	r3, [r3, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f004 f8cc 	bl	8006040 <HAL_GPIO_WritePin>
 8001ea8:	e00e      	b.n	8001ec8 <main+0x2e0>
		}
		else {
			HAL_GPIO_WritePin(leds[i].port, leds[i].pin, GPIO_PIN_RESET);
 8001eaa:	4a20      	ldr	r2, [pc, #128]	; (8001f2c <main+0x344>)
 8001eac:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001eb0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001eb4:	4a1d      	ldr	r2, [pc, #116]	; (8001f2c <main+0x344>)
 8001eb6:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	889b      	ldrh	r3, [r3, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f004 f8bc 	bl	8006040 <HAL_GPIO_WritePin>
	for(int i=0; i<sizeof(leds)/sizeof(leds[0]); i++) {
 8001ec8:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 8001ed2:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d9cf      	bls.n	8001e7a <main+0x292>
	  if(debug) {
 8001eda:	e6d8      	b.n	8001c8e <main+0xa6>
 8001edc:	20000d34 	.word	0x20000d34
 8001ee0:	20000dc4 	.word	0x20000dc4
 8001ee4:	20000bcc 	.word	0x20000bcc
 8001ee8:	20000c68 	.word	0x20000c68
 8001eec:	20000e54 	.word	0x20000e54
 8001ef0:	20000cbc 	.word	0x20000cbc
 8001ef4:	20000f4c 	.word	0x20000f4c
 8001ef8:	20000eb8 	.word	0x20000eb8
 8001efc:	20000d7c 	.word	0x20000d7c
 8001f00:	20000e99 	.word	0x20000e99
 8001f04:	20000e9a 	.word	0x20000e9a
 8001f08:	20000e9b 	.word	0x20000e9b
 8001f0c:	20000e9c 	.word	0x20000e9c
 8001f10:	0800ffb4 	.word	0x0800ffb4
 8001f14:	2000003c 	.word	0x2000003c
 8001f18:	0800ffb8 	.word	0x0800ffb8
 8001f1c:	0800ffbc 	.word	0x0800ffbc
 8001f20:	0800ffc0 	.word	0x0800ffc0
 8001f24:	0800ffc4 	.word	0x0800ffc4
 8001f28:	20000ebc 	.word	0x20000ebc
 8001f2c:	20000000 	.word	0x20000000

08001f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b094      	sub	sp, #80	; 0x50
 8001f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f36:	f107 0320 	add.w	r3, r7, #32
 8001f3a:	2230      	movs	r2, #48	; 0x30
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f00b ff2c 	bl	800dd9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <SystemClock_Config+0xcc>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	4a27      	ldr	r2, [pc, #156]	; (8001ffc <SystemClock_Config+0xcc>)
 8001f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f62:	6413      	str	r3, [r2, #64]	; 0x40
 8001f64:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <SystemClock_Config+0xcc>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f70:	2300      	movs	r3, #0
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <SystemClock_Config+0xd0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a21      	ldr	r2, [pc, #132]	; (8002000 <SystemClock_Config+0xd0>)
 8001f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <SystemClock_Config+0xd0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001f8c:	230a      	movs	r3, #10
 8001f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f90:	2301      	movs	r3, #1
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f94:	2310      	movs	r3, #16
 8001f96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001fa8:	2364      	movs	r3, #100	; 0x64
 8001faa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fac:	2302      	movs	r3, #2
 8001fae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb4:	f107 0320 	add.w	r3, r7, #32
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f005 f999 	bl	80072f0 <HAL_RCC_OscConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001fc4:	f000 fb56 	bl	8002674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc8:	230f      	movs	r3, #15
 8001fca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	2103      	movs	r1, #3
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f005 fbfb 	bl	80077e0 <HAL_RCC_ClockConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ff0:	f000 fb40 	bl	8002674 <Error_Handler>
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3750      	adds	r7, #80	; 0x50
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40007000 	.word	0x40007000

08002004 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800200a:	463b      	mov	r3, r7
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <MX_ADC1_Init+0x98>)
 8002018:	4a21      	ldr	r2, [pc, #132]	; (80020a0 <MX_ADC1_Init+0x9c>)
 800201a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800201c:	4b1f      	ldr	r3, [pc, #124]	; (800209c <MX_ADC1_Init+0x98>)
 800201e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002022:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002024:	4b1d      	ldr	r3, [pc, #116]	; (800209c <MX_ADC1_Init+0x98>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <MX_ADC1_Init+0x98>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <MX_ADC1_Init+0x98>)
 8002032:	2200      	movs	r2, #0
 8002034:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <MX_ADC1_Init+0x98>)
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800203e:	4b17      	ldr	r3, [pc, #92]	; (800209c <MX_ADC1_Init+0x98>)
 8002040:	2200      	movs	r2, #0
 8002042:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <MX_ADC1_Init+0x98>)
 8002046:	4a17      	ldr	r2, [pc, #92]	; (80020a4 <MX_ADC1_Init+0xa0>)
 8002048:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <MX_ADC1_Init+0x98>)
 800204c:	2200      	movs	r2, #0
 800204e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <MX_ADC1_Init+0x98>)
 8002052:	2201      	movs	r2, #1
 8002054:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_ADC1_Init+0x98>)
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <MX_ADC1_Init+0x98>)
 8002060:	2201      	movs	r2, #1
 8002062:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002064:	480d      	ldr	r0, [pc, #52]	; (800209c <MX_ADC1_Init+0x98>)
 8002066:	f003 f97f 	bl	8005368 <HAL_ADC_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002070:	f000 fb00 	bl	8002674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002074:	2300      	movs	r3, #0
 8002076:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002078:	2301      	movs	r3, #1
 800207a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800207c:	2302      	movs	r3, #2
 800207e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002080:	463b      	mov	r3, r7
 8002082:	4619      	mov	r1, r3
 8002084:	4805      	ldr	r0, [pc, #20]	; (800209c <MX_ADC1_Init+0x98>)
 8002086:	f003 faff 	bl	8005688 <HAL_ADC_ConfigChannel>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002090:	f000 faf0 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002094:	bf00      	nop
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000bcc 	.word	0x20000bcc
 80020a0:	40012000 	.word	0x40012000
 80020a4:	0f000001 	.word	0x0f000001

080020a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <MX_I2C1_Init+0x50>)
 80020ae:	4a13      	ldr	r2, [pc, #76]	; (80020fc <MX_I2C1_Init+0x54>)
 80020b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <MX_I2C1_Init+0x50>)
 80020b4:	4a12      	ldr	r2, [pc, #72]	; (8002100 <MX_I2C1_Init+0x58>)
 80020b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <MX_I2C1_Init+0x50>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <MX_I2C1_Init+0x50>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <MX_I2C1_Init+0x50>)
 80020c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <MX_I2C1_Init+0x50>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <MX_I2C1_Init+0x50>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020d8:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <MX_I2C1_Init+0x50>)
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <MX_I2C1_Init+0x50>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020e4:	4804      	ldr	r0, [pc, #16]	; (80020f8 <MX_I2C1_Init+0x50>)
 80020e6:	f003 ffdd 	bl	80060a4 <HAL_I2C_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020f0:	f000 fac0 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000c14 	.word	0x20000c14
 80020fc:	40005400 	.word	0x40005400
 8002100:	000186a0 	.word	0x000186a0

08002104 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <MX_I2C2_Init+0x50>)
 800210a:	4a13      	ldr	r2, [pc, #76]	; (8002158 <MX_I2C2_Init+0x54>)
 800210c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <MX_I2C2_Init+0x50>)
 8002110:	4a12      	ldr	r2, [pc, #72]	; (800215c <MX_I2C2_Init+0x58>)
 8002112:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <MX_I2C2_Init+0x50>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <MX_I2C2_Init+0x50>)
 800211c:	2200      	movs	r2, #0
 800211e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_I2C2_Init+0x50>)
 8002122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002126:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <MX_I2C2_Init+0x50>)
 800212a:	2200      	movs	r2, #0
 800212c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_I2C2_Init+0x50>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <MX_I2C2_Init+0x50>)
 8002136:	2200      	movs	r2, #0
 8002138:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MX_I2C2_Init+0x50>)
 800213c:	2200      	movs	r2, #0
 800213e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002140:	4804      	ldr	r0, [pc, #16]	; (8002154 <MX_I2C2_Init+0x50>)
 8002142:	f003 ffaf 	bl	80060a4 <HAL_I2C_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800214c:	f000 fa92 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000c68 	.word	0x20000c68
 8002158:	40005800 	.word	0x40005800
 800215c:	000186a0 	.word	0x000186a0

08002160 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002174:	2300      	movs	r3, #0
 8002176:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002178:	4b24      	ldr	r3, [pc, #144]	; (800220c <MX_RTC_Init+0xac>)
 800217a:	4a25      	ldr	r2, [pc, #148]	; (8002210 <MX_RTC_Init+0xb0>)
 800217c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800217e:	4b23      	ldr	r3, [pc, #140]	; (800220c <MX_RTC_Init+0xac>)
 8002180:	2200      	movs	r2, #0
 8002182:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <MX_RTC_Init+0xac>)
 8002186:	227f      	movs	r2, #127	; 0x7f
 8002188:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800218a:	4b20      	ldr	r3, [pc, #128]	; (800220c <MX_RTC_Init+0xac>)
 800218c:	22ff      	movs	r2, #255	; 0xff
 800218e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002190:	4b1e      	ldr	r3, [pc, #120]	; (800220c <MX_RTC_Init+0xac>)
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <MX_RTC_Init+0xac>)
 8002198:	2200      	movs	r2, #0
 800219a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <MX_RTC_Init+0xac>)
 800219e:	2200      	movs	r2, #0
 80021a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021a2:	481a      	ldr	r0, [pc, #104]	; (800220c <MX_RTC_Init+0xac>)
 80021a4:	f005 fdec 	bl	8007d80 <HAL_RTC_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80021ae:	f000 fa61 	bl	8002674 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	2201      	movs	r2, #1
 80021ca:	4619      	mov	r1, r3
 80021cc:	480f      	ldr	r0, [pc, #60]	; (800220c <MX_RTC_Init+0xac>)
 80021ce:	f005 fe4d 	bl	8007e6c <HAL_RTC_SetTime>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80021d8:	f000 fa4c 	bl	8002674 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80021dc:	2303      	movs	r3, #3
 80021de:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 80021e0:	2312      	movs	r3, #18
 80021e2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 80021e4:	2306      	movs	r3, #6
 80021e6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 80021e8:	2323      	movs	r3, #35	; 0x23
 80021ea:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80021ec:	463b      	mov	r3, r7
 80021ee:	2201      	movs	r2, #1
 80021f0:	4619      	mov	r1, r3
 80021f2:	4806      	ldr	r0, [pc, #24]	; (800220c <MX_RTC_Init+0xac>)
 80021f4:	f005 ff32 	bl	800805c <HAL_RTC_SetDate>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80021fe:	f000 fa39 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000cbc 	.word	0x20000cbc
 8002210:	40002800 	.word	0x40002800

08002214 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <MX_SPI1_Init+0x64>)
 800221a:	4a18      	ldr	r2, [pc, #96]	; (800227c <MX_SPI1_Init+0x68>)
 800221c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800221e:	4b16      	ldr	r3, [pc, #88]	; (8002278 <MX_SPI1_Init+0x64>)
 8002220:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002224:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <MX_SPI1_Init+0x64>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <MX_SPI1_Init+0x64>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_SPI1_Init+0x64>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <MX_SPI1_Init+0x64>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_SPI1_Init+0x64>)
 8002240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002244:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_SPI1_Init+0x64>)
 8002248:	2220      	movs	r2, #32
 800224a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <MX_SPI1_Init+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_SPI1_Init+0x64>)
 8002254:	2200      	movs	r2, #0
 8002256:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <MX_SPI1_Init+0x64>)
 800225a:	2200      	movs	r2, #0
 800225c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_SPI1_Init+0x64>)
 8002260:	220a      	movs	r2, #10
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002264:	4804      	ldr	r0, [pc, #16]	; (8002278 <MX_SPI1_Init+0x64>)
 8002266:	f006 f889 	bl	800837c <HAL_SPI_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002270:	f000 fa00 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000cdc 	.word	0x20000cdc
 800227c:	40013000 	.word	0x40013000

08002280 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	; 0x30
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002286:	f107 030c 	add.w	r3, r7, #12
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f00b fd84 	bl	800dd9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800229c:	4b21      	ldr	r3, [pc, #132]	; (8002324 <MX_TIM1_Init+0xa4>)
 800229e:	4a22      	ldr	r2, [pc, #136]	; (8002328 <MX_TIM1_Init+0xa8>)
 80022a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <MX_TIM1_Init+0xa4>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a8:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <MX_TIM1_Init+0xa4>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40;
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <MX_TIM1_Init+0xa4>)
 80022b0:	2228      	movs	r2, #40	; 0x28
 80022b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <MX_TIM1_Init+0xa4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <MX_TIM1_Init+0xa4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c0:	4b18      	ldr	r3, [pc, #96]	; (8002324 <MX_TIM1_Init+0xa4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022ce:	2301      	movs	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80022d6:	230f      	movs	r3, #15
 80022d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022de:	2301      	movs	r3, #1
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022e2:	2300      	movs	r3, #0
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80022e6:	230f      	movs	r3, #15
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	4619      	mov	r1, r3
 80022f0:	480c      	ldr	r0, [pc, #48]	; (8002324 <MX_TIM1_Init+0xa4>)
 80022f2:	f006 ff07 	bl	8009104 <HAL_TIM_Encoder_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80022fc:	f000 f9ba 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002300:	2300      	movs	r3, #0
 8002302:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	4619      	mov	r1, r3
 800230c:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_TIM1_Init+0xa4>)
 800230e:	f007 fda7 	bl	8009e60 <HAL_TIMEx_MasterConfigSynchronization>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002318:	f000 f9ac 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800231c:	bf00      	nop
 800231e:	3730      	adds	r7, #48	; 0x30
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000d34 	.word	0x20000d34
 8002328:	40010000 	.word	0x40010000

0800232c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08e      	sub	sp, #56	; 0x38
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002340:	f107 0320 	add.w	r3, r7, #32
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
 8002358:	615a      	str	r2, [r3, #20]
 800235a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800235c:	4b40      	ldr	r3, [pc, #256]	; (8002460 <MX_TIM2_Init+0x134>)
 800235e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002362:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8002364:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <MX_TIM2_Init+0x134>)
 8002366:	f240 32e7 	movw	r2, #999	; 0x3e7
 800236a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236c:	4b3c      	ldr	r3, [pc, #240]	; (8002460 <MX_TIM2_Init+0x134>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002372:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <MX_TIM2_Init+0x134>)
 8002374:	f04f 32ff 	mov.w	r2, #4294967295
 8002378:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237a:	4b39      	ldr	r3, [pc, #228]	; (8002460 <MX_TIM2_Init+0x134>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002380:	4b37      	ldr	r3, [pc, #220]	; (8002460 <MX_TIM2_Init+0x134>)
 8002382:	2200      	movs	r2, #0
 8002384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002386:	4836      	ldr	r0, [pc, #216]	; (8002460 <MX_TIM2_Init+0x134>)
 8002388:	f006 fc2a 	bl	8008be0 <HAL_TIM_Base_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002392:	f000 f96f 	bl	8002674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800239c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023a0:	4619      	mov	r1, r3
 80023a2:	482f      	ldr	r0, [pc, #188]	; (8002460 <MX_TIM2_Init+0x134>)
 80023a4:	f007 f966 	bl	8009674 <HAL_TIM_ConfigClockSource>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80023ae:	f000 f961 	bl	8002674 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80023b2:	482b      	ldr	r0, [pc, #172]	; (8002460 <MX_TIM2_Init+0x134>)
 80023b4:	f006 fd4f 	bl	8008e56 <HAL_TIM_OC_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80023be:	f000 f959 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023ca:	f107 0320 	add.w	r3, r7, #32
 80023ce:	4619      	mov	r1, r3
 80023d0:	4823      	ldr	r0, [pc, #140]	; (8002460 <MX_TIM2_Init+0x134>)
 80023d2:	f007 fd45 	bl	8009e60 <HAL_TIMEx_MasterConfigSynchronization>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80023dc:	f000 f94a 	bl	8002674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80023e0:	2330      	movs	r3, #48	; 0x30
 80023e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50000;
 80023e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80023e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	2200      	movs	r2, #0
 80023f6:	4619      	mov	r1, r3
 80023f8:	4819      	ldr	r0, [pc, #100]	; (8002460 <MX_TIM2_Init+0x134>)
 80023fa:	f007 f8df 	bl	80095bc <HAL_TIM_OC_ConfigChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002404:	f000 f936 	bl	8002674 <Error_Handler>
  }
  sConfigOC.Pulse = 100000;
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <MX_TIM2_Init+0x138>)
 800240a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	2204      	movs	r2, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4813      	ldr	r0, [pc, #76]	; (8002460 <MX_TIM2_Init+0x134>)
 8002414:	f007 f8d2 	bl	80095bc <HAL_TIM_OC_ConfigChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 800241e:	f000 f929 	bl	8002674 <Error_Handler>
  }
  sConfigOC.Pulse = 200000;
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <MX_TIM2_Init+0x13c>)
 8002424:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	2208      	movs	r2, #8
 800242a:	4619      	mov	r1, r3
 800242c:	480c      	ldr	r0, [pc, #48]	; (8002460 <MX_TIM2_Init+0x134>)
 800242e:	f007 f8c5 	bl	80095bc <HAL_TIM_OC_ConfigChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8002438:	f000 f91c 	bl	8002674 <Error_Handler>
  }
  sConfigOC.Pulse = 400000;
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <MX_TIM2_Init+0x140>)
 800243e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	220c      	movs	r2, #12
 8002444:	4619      	mov	r1, r3
 8002446:	4806      	ldr	r0, [pc, #24]	; (8002460 <MX_TIM2_Init+0x134>)
 8002448:	f007 f8b8 	bl	80095bc <HAL_TIM_OC_ConfigChannel>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM2_Init+0x12a>
  {
    Error_Handler();
 8002452:	f000 f90f 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	3738      	adds	r7, #56	; 0x38
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000d7c 	.word	0x20000d7c
 8002464:	000186a0 	.word	0x000186a0
 8002468:	00030d40 	.word	0x00030d40
 800246c:	00061a80 	.word	0x00061a80

08002470 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <MX_TIM10_Init+0x40>)
 8002476:	4a0f      	ldr	r2, [pc, #60]	; (80024b4 <MX_TIM10_Init+0x44>)
 8002478:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <MX_TIM10_Init+0x40>)
 800247c:	224f      	movs	r2, #79	; 0x4f
 800247e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <MX_TIM10_Init+0x40>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <MX_TIM10_Init+0x40>)
 8002488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800248c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <MX_TIM10_Init+0x40>)
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MX_TIM10_Init+0x40>)
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800249a:	4805      	ldr	r0, [pc, #20]	; (80024b0 <MX_TIM10_Init+0x40>)
 800249c:	f006 fba0 	bl	8008be0 <HAL_TIM_Base_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80024a6:	f000 f8e5 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000dc4 	.word	0x20000dc4
 80024b4:	40014400 	.word	0x40014400

080024b8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80024bc:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_TIM11_Init+0x40>)
 80024be:	4a0f      	ldr	r2, [pc, #60]	; (80024fc <MX_TIM11_Init+0x44>)
 80024c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10;
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <MX_TIM11_Init+0x40>)
 80024c4:	220a      	movs	r2, #10
 80024c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <MX_TIM11_Init+0x40>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <MX_TIM11_Init+0x40>)
 80024d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <MX_TIM11_Init+0x40>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <MX_TIM11_Init+0x40>)
 80024de:	2200      	movs	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_TIM11_Init+0x40>)
 80024e4:	f006 fb7c 	bl	8008be0 <HAL_TIM_Base_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80024ee:	f000 f8c1 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000e0c 	.word	0x20000e0c
 80024fc:	40014800 	.word	0x40014800

08002500 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <MX_USART6_UART_Init+0x4c>)
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <MX_USART6_UART_Init+0x50>)
 8002508:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <MX_USART6_UART_Init+0x4c>)
 800250c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002510:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <MX_USART6_UART_Init+0x4c>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <MX_USART6_UART_Init+0x4c>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <MX_USART6_UART_Init+0x4c>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <MX_USART6_UART_Init+0x4c>)
 8002526:	220c      	movs	r2, #12
 8002528:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <MX_USART6_UART_Init+0x4c>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <MX_USART6_UART_Init+0x4c>)
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002536:	4805      	ldr	r0, [pc, #20]	; (800254c <MX_USART6_UART_Init+0x4c>)
 8002538:	f007 fd14 	bl	8009f64 <HAL_UART_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002542:	f000 f897 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000e54 	.word	0x20000e54
 8002550:	40011400 	.word	0x40011400

08002554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255a:	f107 030c 	add.w	r3, r7, #12
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	4b3e      	ldr	r3, [pc, #248]	; (8002668 <MX_GPIO_Init+0x114>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a3d      	ldr	r2, [pc, #244]	; (8002668 <MX_GPIO_Init+0x114>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <MX_GPIO_Init+0x114>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	4b37      	ldr	r3, [pc, #220]	; (8002668 <MX_GPIO_Init+0x114>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4a36      	ldr	r2, [pc, #216]	; (8002668 <MX_GPIO_Init+0x114>)
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4b34      	ldr	r3, [pc, #208]	; (8002668 <MX_GPIO_Init+0x114>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_SD_Pin|LED5_Pin, GPIO_PIN_RESET);
 80025a2:	2200      	movs	r2, #0
 80025a4:	f248 0110 	movw	r1, #32784	; 0x8010
 80025a8:	4830      	ldr	r0, [pc, #192]	; (800266c <MX_GPIO_Init+0x118>)
 80025aa:	f003 fd49 	bl	8006040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 80025ae:	2201      	movs	r2, #1
 80025b0:	2102      	movs	r1, #2
 80025b2:	482f      	ldr	r0, [pc, #188]	; (8002670 <MX_GPIO_Init+0x11c>)
 80025b4:	f003 fd44 	bl	8006040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|LED4_Pin|LED3_Pin, GPIO_PIN_RESET);
 80025b8:	2200      	movs	r2, #0
 80025ba:	f243 0118 	movw	r1, #12312	; 0x3018
 80025be:	482c      	ldr	r0, [pc, #176]	; (8002670 <MX_GPIO_Init+0x11c>)
 80025c0:	f003 fd3e 	bl	8006040 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_SD_Pin LED5_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin|LED5_Pin;
 80025c4:	f248 0310 	movw	r3, #32784	; 0x8010
 80025c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ca:	2301      	movs	r3, #1
 80025cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 030c 	add.w	r3, r7, #12
 80025da:	4619      	mov	r1, r3
 80025dc:	4823      	ldr	r0, [pc, #140]	; (800266c <MX_GPIO_Init+0x118>)
 80025de:	f003 fb93 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSO_DATA_Pin */
  GPIO_InitStruct.Pin = DSO_DATA_Pin;
 80025e2:	2302      	movs	r3, #2
 80025e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80025e6:	2311      	movs	r3, #17
 80025e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ea:	2301      	movs	r3, #1
 80025ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DSO_DATA_GPIO_Port, &GPIO_InitStruct);
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	4619      	mov	r1, r3
 80025f8:	481d      	ldr	r0, [pc, #116]	; (8002670 <MX_GPIO_Init+0x11c>)
 80025fa:	f003 fb85 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : DET_SD_Pin */
  GPIO_InitStruct.Pin = DET_SD_Pin;
 80025fe:	2304      	movs	r3, #4
 8002600:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DET_SD_GPIO_Port, &GPIO_InitStruct);
 800260a:	f107 030c 	add.w	r3, r7, #12
 800260e:	4619      	mov	r1, r3
 8002610:	4817      	ldr	r0, [pc, #92]	; (8002670 <MX_GPIO_Init+0x11c>)
 8002612:	f003 fb79 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED4_Pin|LED3_Pin;
 8002616:	f243 0318 	movw	r3, #12312	; 0x3018
 800261a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261c:	2301      	movs	r3, #1
 800261e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	4619      	mov	r1, r3
 800262e:	4810      	ldr	r0, [pc, #64]	; (8002670 <MX_GPIO_Init+0x11c>)
 8002630:	f003 fb6a 	bl	8005d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BTN_Pin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8002634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800263a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800263e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	4619      	mov	r1, r3
 800264a:	4809      	ldr	r0, [pc, #36]	; (8002670 <MX_GPIO_Init+0x11c>)
 800264c:	f003 fb5c 	bl	8005d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002650:	2200      	movs	r2, #0
 8002652:	2100      	movs	r1, #0
 8002654:	2017      	movs	r0, #23
 8002656:	f003 fb20 	bl	8005c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800265a:	2017      	movs	r0, #23
 800265c:	f003 fb39 	bl	8005cd2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002660:	bf00      	nop
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40023800 	.word	0x40023800
 800266c:	40020000 	.word	0x40020000
 8002670:	40020400 	.word	0x40020400

08002674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002678:	b672      	cpsid	i
}
 800267a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  send_uart("error handler loop"); //dodane
 800267c:	4801      	ldr	r0, [pc, #4]	; (8002684 <Error_Handler+0x10>)
 800267e:	f7ff f9b1 	bl	80019e4 <send_uart>
 8002682:	e7fb      	b.n	800267c <Error_Handler+0x8>
 8002684:	0800ffc8 	.word	0x0800ffc8

08002688 <huart_ds_init>:
RTC_HandleTypeDef *hrtc_new;
bool sdUnmounted;
bool ifFirstEntry=false;
static int firstRun=1;

void huart_ds_init(UART_HandleTypeDef *huart6) {
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	huart6_new=huart6;
 8002690:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <huart_ds_init+0x1c>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6013      	str	r3, [r2, #0]
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000f28 	.word	0x20000f28

080026a8 <sendRtcHandler>:

void sendRtcHandler(RTC_HandleTypeDef *hrtc) {
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	hrtc_new=hrtc;
 80026b0:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <sendRtcHandler+0x1c>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6013      	str	r3, [r2, #0]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000f2c 	.word	0x20000f2c

080026c8 <backButton>:


void backButton(uint8_t back_pos, uint8_t target_screen) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	460a      	mov	r2, r1
 80026d2:	71fb      	strb	r3, [r7, #7]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(0, 56);
 80026d8:	2138      	movs	r1, #56	; 0x38
 80026da:	2000      	movs	r0, #0
 80026dc:	f002 fd64 	bl	80051a8 <ssd1306_SetCursor>
	ssd1306_WriteString("COFNIJ", Font_6x8, entrySelected(back_pos) ? Black : White);
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	b21b      	sxth	r3, r3
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff f951 	bl	800198c <entrySelected>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f083 0301 	eor.w	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	4a0d      	ldr	r2, [pc, #52]	; (8002728 <backButton+0x60>)
 80026f4:	ca06      	ldmia	r2, {r1, r2}
 80026f6:	480d      	ldr	r0, [pc, #52]	; (800272c <backButton+0x64>)
 80026f8:	f002 fd30 	bl	800515c <ssd1306_WriteString>
	if(entryClicked(back_pos)) {
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	b21b      	sxth	r3, r3
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff f956 	bl	80019b2 <entryClicked>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <backButton+0x56>
		encSetPos(0);
 800270c:	2000      	movs	r0, #0
 800270e:	f7ff f90d 	bl	800192c <encSetPos>
		firstRun=1;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <backButton+0x68>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]
		screen = target_screen;
 8002718:	4a06      	ldr	r2, [pc, #24]	; (8002734 <backButton+0x6c>)
 800271a:	79bb      	ldrb	r3, [r7, #6]
 800271c:	7013      	strb	r3, [r2, #0]
	}

}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000944 	.word	0x20000944
 800272c:	0800ffdc 	.word	0x0800ffdc
 8002730:	2000002c 	.word	0x2000002c
 8002734:	20000f24 	.word	0x20000f24

08002738 <listAllItemsFromMenu>:

void listAllItemsFromMenu(Menu *menu) {
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < menu->entry_count; ++i) {
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	e034      	b.n	80027b0 <listAllItemsFromMenu+0x78>
			ssd1306_SetCursor(0, i*8);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	4619      	mov	r1, r3
 8002750:	2000      	movs	r0, #0
 8002752:	f002 fd29 	bl	80051a8 <ssd1306_SetCursor>
			if(entryClicked(i)) {
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	b21b      	sxth	r3, r3
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff f929 	bl	80019b2 <entryClicked>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00d      	beq.n	8002782 <listAllItemsFromMenu+0x4a>

				screen = menu->entries[i].entry;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	3201      	adds	r2, #1
 800276c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8002770:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <listAllItemsFromMenu+0x90>)
 8002772:	701a      	strb	r2, [r3, #0]
				if(i==ONOFF_MEASURE) {
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b08      	cmp	r3, #8
 8002778:	d120      	bne.n	80027bc <listAllItemsFromMenu+0x84>
									encSetPos(1);
 800277a:	2001      	movs	r0, #1
 800277c:	f7ff f8d6 	bl	800192c <encSetPos>
								}
				break;
 8002780:	e01c      	b.n	80027bc <listAllItemsFromMenu+0x84>
			}
			ssd1306_WriteString(menu->entries[i].entry_string, Font_6x8, entrySelected(i) ? Black : White);
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3301      	adds	r3, #1
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	685c      	ldr	r4, [r3, #4]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	b21b      	sxth	r3, r3
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f8fa 	bl	800198c <entrySelected>
 8002798:	4603      	mov	r3, r0
 800279a:	f083 0301 	eor.w	r3, r3, #1
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <listAllItemsFromMenu+0x94>)
 80027a2:	ca06      	ldmia	r2, {r1, r2}
 80027a4:	4620      	mov	r0, r4
 80027a6:	f002 fcd9 	bl	800515c <ssd1306_WriteString>
	for (int i = 0; i < menu->entry_count; ++i) {
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3301      	adds	r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	dbc5      	blt.n	8002746 <listAllItemsFromMenu+0xe>

		  }
}
 80027ba:	e000      	b.n	80027be <listAllItemsFromMenu+0x86>
				break;
 80027bc:	bf00      	nop
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd90      	pop	{r4, r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000f24 	.word	0x20000f24
 80027cc:	20000944 	.word	0x20000944

080027d0 <drawMainMenu>:

void drawMainMenu(Menu *menu, bool ifFirstEntry) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]
	encSetRange(0, 6);
 80027dc:	2106      	movs	r1, #6
 80027de:	2000      	movs	r0, #0
 80027e0:	f7ff f88a 	bl	80018f8 <encSetRange>
	listAllItemsFromMenu(menu);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ffa7 	bl	8002738 <listAllItemsFromMenu>
	//ssd1306_SetCursor(0, 50);
	//ssd1306_WriteString(getRtcString(), Font_7x10, White); //do wyswietlenia daty i godziny

}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <drawSensorConfig>:

void drawSensorConfig(Menu *menu, bool ifFirstEntry) {
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	70fb      	strb	r3, [r7, #3]
	encSetRange(0, 3);
 80027fe:	2103      	movs	r1, #3
 8002800:	2000      	movs	r0, #0
 8002802:	f7ff f879 	bl	80018f8 <encSetRange>
	listAllItemsFromMenu(menu);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ff96 	bl	8002738 <listAllItemsFromMenu>
	backButton(3, MAIN_MENU);
 800280c:	2100      	movs	r1, #0
 800280e:	2003      	movs	r0, #3
 8002810:	f7ff ff5a 	bl	80026c8 <backButton>
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <drawSdConfig>:
char strDataOverwrite[6];
char* unmountString="";
char* restartAlertString="";

volatile char fileBuffer[200];
void drawSdConfig(Menu *menu, bool ifFirstEntry) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	70fb      	strb	r3, [r7, #3]

	encSetRange(0, 1);
 8002828:	2101      	movs	r1, #1
 800282a:	2000      	movs	r0, #0
 800282c:	f7ff f864 	bl	80018f8 <encSetRange>
	ssd1306_SetCursor(0, 0);
 8002830:	2100      	movs	r1, #0
 8002832:	2000      	movs	r0, #0
 8002834:	f002 fcb8 	bl	80051a8 <ssd1306_SetCursor>
	ssd1306_WriteString("stan SD:", Font_7x10, White);
 8002838:	4a46      	ldr	r2, [pc, #280]	; (8002954 <drawSdConfig+0x138>)
 800283a:	2301      	movs	r3, #1
 800283c:	ca06      	ldmia	r2, {r1, r2}
 800283e:	4846      	ldr	r0, [pc, #280]	; (8002958 <drawSdConfig+0x13c>)
 8002840:	f002 fc8c 	bl	800515c <ssd1306_WriteString>
	ssd1306_SetCursor(70, 0);
 8002844:	2100      	movs	r1, #0
 8002846:	2046      	movs	r0, #70	; 0x46
 8002848:	f002 fcae 	bl	80051a8 <ssd1306_SetCursor>
	if(!sdReady) {
 800284c:	4b43      	ldr	r3, [pc, #268]	; (800295c <drawSdConfig+0x140>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	f083 0301 	eor.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d022      	beq.n	80028a0 <drawSdConfig+0x84>
		ssd1306_WriteString(" ERROR", Font_7x10, White);
 800285a:	4a3e      	ldr	r2, [pc, #248]	; (8002954 <drawSdConfig+0x138>)
 800285c:	2301      	movs	r3, #1
 800285e:	ca06      	ldmia	r2, {r1, r2}
 8002860:	483f      	ldr	r0, [pc, #252]	; (8002960 <drawSdConfig+0x144>)
 8002862:	f002 fc7b 	bl	800515c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 10);
 8002866:	210a      	movs	r1, #10
 8002868:	2000      	movs	r0, #0
 800286a:	f002 fc9d 	bl	80051a8 <ssd1306_SetCursor>
		ssd1306_WriteString(getFresultString(fresult), Font_7x10, White);
 800286e:	4b3d      	ldr	r3, [pc, #244]	; (8002964 <drawSdConfig+0x148>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	4618      	mov	r0, r3
 8002876:	f001 f8cb 	bl	8003a10 <getFresultString>
 800287a:	4a36      	ldr	r2, [pc, #216]	; (8002954 <drawSdConfig+0x138>)
 800287c:	2301      	movs	r3, #1
 800287e:	ca06      	ldmia	r2, {r1, r2}
 8002880:	f002 fc6c 	bl	800515c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 20);
 8002884:	2114      	movs	r1, #20
 8002886:	2000      	movs	r0, #0
 8002888:	f002 fc8e 	bl	80051a8 <ssd1306_SetCursor>
		ssd1306_WriteString("Start zablokow.", Font_7x10, White);
 800288c:	4a31      	ldr	r2, [pc, #196]	; (8002954 <drawSdConfig+0x138>)
 800288e:	2301      	movs	r3, #1
 8002890:	ca06      	ldmia	r2, {r1, r2}
 8002892:	4835      	ldr	r0, [pc, #212]	; (8002968 <drawSdConfig+0x14c>)
 8002894:	f002 fc62 	bl	800515c <ssd1306_WriteString>
		leds[2].state=true;
 8002898:	4b34      	ldr	r3, [pc, #208]	; (800296c <drawSdConfig+0x150>)
 800289a:	2201      	movs	r2, #1
 800289c:	759a      	strb	r2, [r3, #22]
 800289e:	e050      	b.n	8002942 <drawSdConfig+0x126>

	}
	else {
		ssd1306_WriteString(getFresultString(fresult), Font_7x10, White);
 80028a0:	4b30      	ldr	r3, [pc, #192]	; (8002964 <drawSdConfig+0x148>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	4618      	mov	r0, r3
 80028a8:	f001 f8b2 	bl	8003a10 <getFresultString>
 80028ac:	4a29      	ldr	r2, [pc, #164]	; (8002954 <drawSdConfig+0x138>)
 80028ae:	2301      	movs	r3, #1
 80028b0:	ca06      	ldmia	r2, {r1, r2}
 80028b2:	f002 fc53 	bl	800515c <ssd1306_WriteString>
//		ssd1306_WriteString("Nadpisywanie: ", Font_7x10, entrySelected(0) ? Black : White);
//
//		ssd1306_SetCursor(75, 10);
//		sprintf(strDataOverwrite, "%s", dataOverwrite ? "true" : "false");
//		ssd1306_WriteString(strDataOverwrite, Font_7x10, entrySelected(0) ? Black : White);
		ssd1306_SetCursor(0,10);
 80028b6:	210a      	movs	r1, #10
 80028b8:	2000      	movs	r0, #0
 80028ba:	f002 fc75 	bl	80051a8 <ssd1306_SetCursor>
		ssd1306_WriteString("Odmontuj SD", Font_7x10, entrySelected(0) ? Black : White);
 80028be:	2000      	movs	r0, #0
 80028c0:	f7ff f864 	bl	800198c <entrySelected>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f083 0301 	eor.w	r3, r3, #1
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	4a21      	ldr	r2, [pc, #132]	; (8002954 <drawSdConfig+0x138>)
 80028ce:	ca06      	ldmia	r2, {r1, r2}
 80028d0:	4827      	ldr	r0, [pc, #156]	; (8002970 <drawSdConfig+0x154>)
 80028d2:	f002 fc43 	bl	800515c <ssd1306_WriteString>

		if(entrySelected(0) && entryClicked(0)) {
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7ff f858 	bl	800198c <entrySelected>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d019      	beq.n	8002916 <drawSdConfig+0xfa>
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7ff f865 	bl	80019b2 <entryClicked>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d013      	beq.n	8002916 <drawSdConfig+0xfa>
			sd_demount();
 80028ee:	f000 ff8d 	bl	800380c <sd_demount>
			sdUnmounted=true;
 80028f2:	4b20      	ldr	r3, [pc, #128]	; (8002974 <drawSdConfig+0x158>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
			unmountString="                    ";
 80028f8:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <drawSdConfig+0x15c>)
 80028fa:	4a20      	ldr	r2, [pc, #128]	; (800297c <drawSdConfig+0x160>)
 80028fc:	601a      	str	r2, [r3, #0]
			unmountString="Odmont. SD OK";
 80028fe:	4b1e      	ldr	r3, [pc, #120]	; (8002978 <drawSdConfig+0x15c>)
 8002900:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <drawSdConfig+0x164>)
 8002902:	601a      	str	r2, [r3, #0]
			restartAlertString="                  ";
 8002904:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <drawSdConfig+0x168>)
 8002906:	4a20      	ldr	r2, [pc, #128]	; (8002988 <drawSdConfig+0x16c>)
 8002908:	601a      	str	r2, [r3, #0]
			restartAlertString="Konieczny RST!";
 800290a:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <drawSdConfig+0x168>)
 800290c:	4a1f      	ldr	r2, [pc, #124]	; (800298c <drawSdConfig+0x170>)
 800290e:	601a      	str	r2, [r3, #0]
			leds[2].state=true;
 8002910:	4b16      	ldr	r3, [pc, #88]	; (800296c <drawSdConfig+0x150>)
 8002912:	2201      	movs	r2, #1
 8002914:	759a      	strb	r2, [r3, #22]
		}
		ssd1306_SetCursor(0,20);
 8002916:	2114      	movs	r1, #20
 8002918:	2000      	movs	r0, #0
 800291a:	f002 fc45 	bl	80051a8 <ssd1306_SetCursor>
		ssd1306_WriteString(unmountString, Font_7x10, White);
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <drawSdConfig+0x15c>)
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <drawSdConfig+0x138>)
 8002924:	2301      	movs	r3, #1
 8002926:	ca06      	ldmia	r2, {r1, r2}
 8002928:	f002 fc18 	bl	800515c <ssd1306_WriteString>
		ssd1306_SetCursor(0,30);
 800292c:	211e      	movs	r1, #30
 800292e:	2000      	movs	r0, #0
 8002930:	f002 fc3a 	bl	80051a8 <ssd1306_SetCursor>
		ssd1306_WriteString(restartAlertString, Font_7x10, White);
 8002934:	4b13      	ldr	r3, [pc, #76]	; (8002984 <drawSdConfig+0x168>)
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	4a06      	ldr	r2, [pc, #24]	; (8002954 <drawSdConfig+0x138>)
 800293a:	2301      	movs	r3, #1
 800293c:	ca06      	ldmia	r2, {r1, r2}
 800293e:	f002 fc0d 	bl	800515c <ssd1306_WriteString>
//		ssd1306_WriteString("Pobrano adresy!", Font_7x10, White);
//		displayAddress();
//		ssd1306_SetCursor(0, 36);
//			ssd1306_WriteString(addressText, Font_6x8, White);
//	}
	backButton(1, MAIN_MENU);
 8002942:	2100      	movs	r1, #0
 8002944:	2001      	movs	r0, #1
 8002946:	f7ff febf 	bl	80026c8 <backButton>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	2000094c 	.word	0x2000094c
 8002958:	0800ffe8 	.word	0x0800ffe8
 800295c:	20019a5c 	.word	0x20019a5c
 8002960:	0800fff4 	.word	0x0800fff4
 8002964:	20019a54 	.word	0x20019a54
 8002968:	0800fffc 	.word	0x0800fffc
 800296c:	20000000 	.word	0x20000000
 8002970:	0801000c 	.word	0x0801000c
 8002974:	20000f30 	.word	0x20000f30
 8002978:	20000030 	.word	0x20000030
 800297c:	08010018 	.word	0x08010018
 8002980:	08010030 	.word	0x08010030
 8002984:	20000034 	.word	0x20000034
 8002988:	08010040 	.word	0x08010040
 800298c:	08010054 	.word	0x08010054

08002990 <drawSensorConfigAdcExt>:


void drawSensorConfigAdcExt(Menu *menu, bool ifFirstEntry) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	70fb      	strb	r3, [r7, #3]
	encSetRange(0, 4);
 800299c:	2104      	movs	r1, #4
 800299e:	2000      	movs	r0, #0
 80029a0:	f7fe ffaa 	bl	80018f8 <encSetRange>
	listAllItemsFromMenu(menu);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff fec7 	bl	8002738 <listAllItemsFromMenu>
	backButton(4, MAIN_MENU);
 80029aa:	2100      	movs	r1, #0
 80029ac:	2004      	movs	r0, #4
 80029ae:	f7ff fe8b 	bl	80026c8 <backButton>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <drawSensorConfigAdcInt>:
void drawSensorConfigAdcInt(Menu *menu, bool ifFirstEntry) {
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	70fb      	strb	r3, [r7, #3]
	encSetRange(0, 4);
 80029c6:	2104      	movs	r1, #4
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7fe ff95 	bl	80018f8 <encSetRange>
	listAllItemsFromMenu(menu);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff feb2 	bl	8002738 <listAllItemsFromMenu>
	backButton(4, MAIN_MENU);
 80029d4:	2100      	movs	r1, #0
 80029d6:	2004      	movs	r0, #4
 80029d8:	f7ff fe76 	bl	80026c8 <backButton>
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <drawSensorConfigDS18>:
void drawSensorConfigDS18(Menu *menu, bool ifFirstEntry) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]
	encSetRange(0, 3);
 80029f0:	2103      	movs	r1, #3
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7fe ff80 	bl	80018f8 <encSetRange>
	listAllItemsFromMenu(menu);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff fe9d 	bl	8002738 <listAllItemsFromMenu>
	backButton(3, MAIN_MENU);
 80029fe:	2100      	movs	r1, #0
 8002a00:	2003      	movs	r0, #3
 8002a02:	f7ff fe61 	bl	80026c8 <backButton>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <drawDs18>:
char *getDsAddrStr="";
void drawDs18(Menu *menu, bool ifFirstEntry) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	70fb      	strb	r3, [r7, #3]
	encSetRange(0, 2);
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f7fe ff6a 	bl	80018f8 <encSetRange>
	ssd1306_SetCursor(0, 0);
 8002a24:	2100      	movs	r1, #0
 8002a26:	2000      	movs	r0, #0
 8002a28:	f002 fbbe 	bl	80051a8 <ssd1306_SetCursor>

	ssd1306_WriteString("Pobierz adresy z SD", Font_6x8, entrySelected(0) ? Black : White);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fe ffad 	bl	800198c <entrySelected>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f083 0301 	eor.w	r3, r3, #1
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	4a42      	ldr	r2, [pc, #264]	; (8002b44 <drawDs18+0x134>)
 8002a3c:	ca06      	ldmia	r2, {r1, r2}
 8002a3e:	4842      	ldr	r0, [pc, #264]	; (8002b48 <drawDs18+0x138>)
 8002a40:	f002 fb8c 	bl	800515c <ssd1306_WriteString>
	ssd1306_SetCursor(0,8);
 8002a44:	2108      	movs	r1, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	f002 fbae 	bl	80051a8 <ssd1306_SetCursor>
	ssd1306_WriteString("Odczyt adresu 1-Wire", Font_6x8, entrySelected(1) ? Black : White);
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f7fe ff9d 	bl	800198c <entrySelected>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f083 0301 	eor.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	4a3a      	ldr	r2, [pc, #232]	; (8002b44 <drawDs18+0x134>)
 8002a5c:	ca06      	ldmia	r2, {r1, r2}
 8002a5e:	483b      	ldr	r0, [pc, #236]	; (8002b4c <drawDs18+0x13c>)
 8002a60:	f002 fb7c 	bl	800515c <ssd1306_WriteString>
	ssd1306_SetCursor(0,16);
 8002a64:	2110      	movs	r1, #16
 8002a66:	2000      	movs	r0, #0
 8002a68:	f002 fb9e 	bl	80051a8 <ssd1306_SetCursor>
	ssd1306_WriteString(getDsAddrStr, Font_6x8, White);
 8002a6c:	4b38      	ldr	r3, [pc, #224]	; (8002b50 <drawDs18+0x140>)
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	4a34      	ldr	r2, [pc, #208]	; (8002b44 <drawDs18+0x134>)
 8002a72:	2301      	movs	r3, #1
 8002a74:	ca06      	ldmia	r2, {r1, r2}
 8002a76:	f002 fb71 	bl	800515c <ssd1306_WriteString>
	if(entrySelected(0) && entryClicked(0)) {
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7fe ff86 	bl	800198c <entrySelected>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d023      	beq.n	8002ace <drawDs18+0xbe>
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fe ff93 	bl	80019b2 <entryClicked>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01d      	beq.n	8002ace <drawDs18+0xbe>
		memset(ds1addr, 0, sizeof(ds1addr));
 8002a92:	2208      	movs	r2, #8
 8002a94:	2100      	movs	r1, #0
 8002a96:	482f      	ldr	r0, [pc, #188]	; (8002b54 <drawDs18+0x144>)
 8002a98:	f00b f980 	bl	800dd9c <memset>
		memset(ds2addr, 0, sizeof(ds1addr));
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	482d      	ldr	r0, [pc, #180]	; (8002b58 <drawDs18+0x148>)
 8002aa2:	f00b f97b 	bl	800dd9c <memset>
		memset(ds3addr, 0, sizeof(ds1addr)); //zawiesza sie po dwukrotnym odczytaniu adresu w menu, nwm czemu
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	482c      	ldr	r0, [pc, #176]	; (8002b5c <drawDs18+0x14c>)
 8002aac:	f00b f976 	bl	800dd9c <memset>
		readAddressFromFile("ds1.txt", ds1addr);
 8002ab0:	4928      	ldr	r1, [pc, #160]	; (8002b54 <drawDs18+0x144>)
 8002ab2:	482b      	ldr	r0, [pc, #172]	; (8002b60 <drawDs18+0x150>)
 8002ab4:	f001 f864 	bl	8003b80 <readAddressFromFile>
		readAddressFromFile("ds2.txt", ds2addr);
 8002ab8:	4927      	ldr	r1, [pc, #156]	; (8002b58 <drawDs18+0x148>)
 8002aba:	482a      	ldr	r0, [pc, #168]	; (8002b64 <drawDs18+0x154>)
 8002abc:	f001 f860 	bl	8003b80 <readAddressFromFile>
		readAddressFromFile("ds3.txt", ds3addr);
 8002ac0:	4926      	ldr	r1, [pc, #152]	; (8002b5c <drawDs18+0x14c>)
 8002ac2:	4829      	ldr	r0, [pc, #164]	; (8002b68 <drawDs18+0x158>)
 8002ac4:	f001 f85c 	bl	8003b80 <readAddressFromFile>
		getDsAddrStr="Pobrano adresy z SD!";
 8002ac8:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <drawDs18+0x140>)
 8002aca:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <drawDs18+0x15c>)
 8002acc:	601a      	str	r2, [r3, #0]
	}
	if(entrySelected(1) && entryClicked(1)) {
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f7fe ff5c 	bl	800198c <entrySelected>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <drawDs18+0xe6>
 8002ada:	2001      	movs	r0, #1
 8002adc:	f7fe ff69 	bl	80019b2 <entryClicked>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <drawDs18+0xe6>
		getDsAddrStr="                     ";
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <drawDs18+0x140>)
 8002ae8:	4a21      	ldr	r2, [pc, #132]	; (8002b70 <drawDs18+0x160>)
 8002aea:	601a      	str	r2, [r3, #0]
		getDsAddrStr="Odczytany adres:";
 8002aec:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <drawDs18+0x140>)
 8002aee:	4a21      	ldr	r2, [pc, #132]	; (8002b74 <drawDs18+0x164>)
 8002af0:	601a      	str	r2, [r3, #0]
		displayAddress();
 8002af2:	f7fe fc9b 	bl	800142c <displayAddress>
	}
	ssd1306_SetCursor(0, 24);
 8002af6:	2118      	movs	r1, #24
 8002af8:	2000      	movs	r0, #0
 8002afa:	f002 fb55 	bl	80051a8 <ssd1306_SetCursor>
	ssd1306_WriteString(addressTextLine1, Font_6x8, White);
 8002afe:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <drawDs18+0x134>)
 8002b00:	2301      	movs	r3, #1
 8002b02:	ca06      	ldmia	r2, {r1, r2}
 8002b04:	481c      	ldr	r0, [pc, #112]	; (8002b78 <drawDs18+0x168>)
 8002b06:	f002 fb29 	bl	800515c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 32);
 8002b0a:	2120      	movs	r1, #32
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f002 fb4b 	bl	80051a8 <ssd1306_SetCursor>
	ssd1306_WriteString(addressTextLine2, Font_6x8, White);
 8002b12:	4a0c      	ldr	r2, [pc, #48]	; (8002b44 <drawDs18+0x134>)
 8002b14:	2301      	movs	r3, #1
 8002b16:	ca06      	ldmia	r2, {r1, r2}
 8002b18:	4818      	ldr	r0, [pc, #96]	; (8002b7c <drawDs18+0x16c>)
 8002b1a:	f002 fb1f 	bl	800515c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 48);
 8002b1e:	2130      	movs	r1, #48	; 0x30
 8002b20:	2000      	movs	r0, #0
 8002b22:	f002 fb41 	bl	80051a8 <ssd1306_SetCursor>
	ssd1306_WriteString("ODCZYT MAX 1 CZUJ.", Font_6x8, White);
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <drawDs18+0x134>)
 8002b28:	2301      	movs	r3, #1
 8002b2a:	ca06      	ldmia	r2, {r1, r2}
 8002b2c:	4814      	ldr	r0, [pc, #80]	; (8002b80 <drawDs18+0x170>)
 8002b2e:	f002 fb15 	bl	800515c <ssd1306_WriteString>
	backButton(2, MAIN_MENU);
 8002b32:	2100      	movs	r1, #0
 8002b34:	2002      	movs	r0, #2
 8002b36:	f7ff fdc7 	bl	80026c8 <backButton>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000944 	.word	0x20000944
 8002b48:	08010064 	.word	0x08010064
 8002b4c:	08010078 	.word	0x08010078
 8002b50:	20000038 	.word	0x20000038
 8002b54:	20000b68 	.word	0x20000b68
 8002b58:	20000b70 	.word	0x20000b70
 8002b5c:	20000b78 	.word	0x20000b78
 8002b60:	08010090 	.word	0x08010090
 8002b64:	08010098 	.word	0x08010098
 8002b68:	080100a0 	.word	0x080100a0
 8002b6c:	080100a8 	.word	0x080100a8
 8002b70:	080100c0 	.word	0x080100c0
 8002b74:	080100d8 	.word	0x080100d8
 8002b78:	20000b80 	.word	0x20000b80
 8002b7c:	20000ba0 	.word	0x20000ba0
 8002b80:	080100ec 	.word	0x080100ec

08002b84 <drawSensorOptions>:
uint16_t samplingRates[] = {500,1000,2000,4000};
volatile uint8_t  samplingIndex = 0;
volatile int counter=0;
char sampl1str[10]="???";

void drawSensorOptions(uint8_t index) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
	ssd1306_WriteString(sensors[index].name, Font_11x18, White);
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	015b      	lsls	r3, r3, #5
 8002b92:	4a4e      	ldr	r2, [pc, #312]	; (8002ccc <drawSensorOptions+0x148>)
 8002b94:	1898      	adds	r0, r3, r2
 8002b96:	4a4e      	ldr	r2, [pc, #312]	; (8002cd0 <drawSensorOptions+0x14c>)
 8002b98:	2301      	movs	r3, #1
 8002b9a:	ca06      	ldmia	r2, {r1, r2}
 8002b9c:	f002 fade 	bl	800515c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 8002ba0:	2112      	movs	r1, #18
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f002 fb00 	bl	80051a8 <ssd1306_SetCursor>
	char isEnabledStr[20];
	if(entrySelected(0) && entryClicked(0)) {
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7fe feef 	bl	800198c <entrySelected>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01f      	beq.n	8002bf4 <drawSensorOptions+0x70>
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fe fefc 	bl	80019b2 <entryClicked>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d019      	beq.n	8002bf4 <drawSensorOptions+0x70>
		if(sensors[index].isEnabled==false) {
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	4a42      	ldr	r2, [pc, #264]	; (8002ccc <drawSensorOptions+0x148>)
 8002bc4:	015b      	lsls	r3, r3, #5
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3314      	adds	r3, #20
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	f083 0301 	eor.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <drawSensorOptions+0x62>
			sensors[index].isEnabled=true;
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	4a3c      	ldr	r2, [pc, #240]	; (8002ccc <drawSensorOptions+0x148>)
 8002bda:	015b      	lsls	r3, r3, #5
 8002bdc:	4413      	add	r3, r2
 8002bde:	3314      	adds	r3, #20
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
 8002be4:	e006      	b.n	8002bf4 <drawSensorOptions+0x70>
		}
		else {
			sensors[index].isEnabled=false;
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	4a38      	ldr	r2, [pc, #224]	; (8002ccc <drawSensorOptions+0x148>)
 8002bea:	015b      	lsls	r3, r3, #5
 8002bec:	4413      	add	r3, r2
 8002bee:	3314      	adds	r3, #20
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
		}
	}
	sprintf(isEnabledStr, "Stan: %s", sensors[index].isEnabled ? "ON" : "OFF");
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	4a35      	ldr	r2, [pc, #212]	; (8002ccc <drawSensorOptions+0x148>)
 8002bf8:	015b      	lsls	r3, r3, #5
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3314      	adds	r3, #20
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <drawSensorOptions+0x84>
 8002c04:	4a33      	ldr	r2, [pc, #204]	; (8002cd4 <drawSensorOptions+0x150>)
 8002c06:	e000      	b.n	8002c0a <drawSensorOptions+0x86>
 8002c08:	4a33      	ldr	r2, [pc, #204]	; (8002cd8 <drawSensorOptions+0x154>)
 8002c0a:	f107 030c 	add.w	r3, r7, #12
 8002c0e:	4933      	ldr	r1, [pc, #204]	; (8002cdc <drawSensorOptions+0x158>)
 8002c10:	4618      	mov	r0, r3
 8002c12:	f00a ffb1 	bl	800db78 <siprintf>
	ssd1306_WriteString(isEnabledStr, Font_7x10, entrySelected(0) ? Black : White);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f7fe feb8 	bl	800198c <entrySelected>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f083 0301 	eor.w	r3, r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	4a2e      	ldr	r2, [pc, #184]	; (8002ce0 <drawSensorOptions+0x15c>)
 8002c26:	f107 000c 	add.w	r0, r7, #12
 8002c2a:	ca06      	ldmia	r2, {r1, r2}
 8002c2c:	f002 fa96 	bl	800515c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 28);
 8002c30:	211c      	movs	r1, #28
 8002c32:	2000      	movs	r0, #0
 8002c34:	f002 fab8 	bl	80051a8 <ssd1306_SetCursor>
	ssd1306_WriteString("Czas [ms]: ", Font_7x10, White);
 8002c38:	4a29      	ldr	r2, [pc, #164]	; (8002ce0 <drawSensorOptions+0x15c>)
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	ca06      	ldmia	r2, {r1, r2}
 8002c3e:	4829      	ldr	r0, [pc, #164]	; (8002ce4 <drawSensorOptions+0x160>)
 8002c40:	f002 fa8c 	bl	800515c <ssd1306_WriteString>
	ssd1306_SetCursor(70, 28);
 8002c44:	211c      	movs	r1, #28
 8002c46:	2046      	movs	r0, #70	; 0x46
 8002c48:	f002 faae 	bl	80051a8 <ssd1306_SetCursor>
	sprintf(sampl1str, "%d\n\r", sensors[index].samplingRate);
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <drawSensorOptions+0x148>)
 8002c50:	015b      	lsls	r3, r3, #5
 8002c52:	4413      	add	r3, r2
 8002c54:	3316      	adds	r3, #22
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4923      	ldr	r1, [pc, #140]	; (8002ce8 <drawSensorOptions+0x164>)
 8002c5c:	4823      	ldr	r0, [pc, #140]	; (8002cec <drawSensorOptions+0x168>)
 8002c5e:	f00a ff8b 	bl	800db78 <siprintf>
	ssd1306_WriteString(sampl1str, Font_7x10, entrySelected(1) ? Black : White);
 8002c62:	2001      	movs	r0, #1
 8002c64:	f7fe fe92 	bl	800198c <entrySelected>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f083 0301 	eor.w	r3, r3, #1
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <drawSensorOptions+0x15c>)
 8002c72:	ca06      	ldmia	r2, {r1, r2}
 8002c74:	481d      	ldr	r0, [pc, #116]	; (8002cec <drawSensorOptions+0x168>)
 8002c76:	f002 fa71 	bl	800515c <ssd1306_WriteString>
	if(entrySelected(1) && entryClicked(1)) {
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f7fe fe86 	bl	800198c <entrySelected>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01e      	beq.n	8002cc4 <drawSensorOptions+0x140>
 8002c86:	2001      	movs	r0, #1
 8002c88:	f7fe fe93 	bl	80019b2 <entryClicked>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d018      	beq.n	8002cc4 <drawSensorOptions+0x140>
		//send_uart("klikniete\n\r");
		counter++;
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <drawSensorOptions+0x16c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3301      	adds	r3, #1
 8002c98:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <drawSensorOptions+0x16c>)
 8002c9a:	6013      	str	r3, [r2, #0]
		if(counter>4) {
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <drawSensorOptions+0x16c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	dd02      	ble.n	8002caa <drawSensorOptions+0x126>
			counter=1;
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <drawSensorOptions+0x16c>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
		}
		sensors[index].samplingRate = samplingRates[counter-1];
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <drawSensorOptions+0x16c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	1e5a      	subs	r2, r3, #1
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	4910      	ldr	r1, [pc, #64]	; (8002cf4 <drawSensorOptions+0x170>)
 8002cb4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002cb8:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <drawSensorOptions+0x148>)
 8002cba:	015b      	lsls	r3, r3, #5
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3316      	adds	r3, #22
 8002cc0:	460a      	mov	r2, r1
 8002cc2:	801a      	strh	r2, [r3, #0]
	}

}
 8002cc4:	bf00      	nop
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	2000003c 	.word	0x2000003c
 8002cd0:	20000954 	.word	0x20000954
 8002cd4:	08010100 	.word	0x08010100
 8002cd8:	08010104 	.word	0x08010104
 8002cdc:	08010108 	.word	0x08010108
 8002ce0:	2000094c 	.word	0x2000094c
 8002ce4:	08010114 	.word	0x08010114
 8002ce8:	08010120 	.word	0x08010120
 8002cec:	200002ac 	.word	0x200002ac
 8002cf0:	20000f34 	.word	0x20000f34
 8002cf4:	200002a4 	.word	0x200002a4

08002cf8 <drawSensorConfigGeneric>:


void drawSensorConfigGeneric(Menu *menu, bool ifFirstEntry) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	70fb      	strb	r3, [r7, #3]
	encSetRange(0, 2);
 8002d04:	2102      	movs	r1, #2
 8002d06:	2000      	movs	r0, #0
 8002d08:	f7fe fdf6 	bl	80018f8 <encSetRange>
	ssd1306_SetCursor(0, 0);
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f002 fa4a 	bl	80051a8 <ssd1306_SetCursor>
	drawSensorOptions(screen-SENSOR_CONFIG_ADC_EXT0);
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <drawSensorConfigGeneric+0x3c>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	3b0c      	subs	r3, #12
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff30 	bl	8002b84 <drawSensorOptions>
	backButton(2, MAIN_MENU);
 8002d24:	2100      	movs	r1, #0
 8002d26:	2002      	movs	r0, #2
 8002d28:	f7ff fcce 	bl	80026c8 <backButton>
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000f24 	.word	0x20000f24

08002d38 <ch1Enable>:
volatile char result[1000]="";
volatile float value;
volatile char temp[50];
void ch1Enable(void) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
	for(int i=0; i<11; i++) {
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	e04b      	b.n	8002ddc <ch1Enable+0xa4>
		if(sensors[i].samplingRate==500 && sensors[i].isEnabled) {
 8002d44:	4a29      	ldr	r2, [pc, #164]	; (8002dec <ch1Enable+0xb4>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	015b      	lsls	r3, r3, #5
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3316      	adds	r3, #22
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d54:	d13f      	bne.n	8002dd6 <ch1Enable+0x9e>
 8002d56:	4a25      	ldr	r2, [pc, #148]	; (8002dec <ch1Enable+0xb4>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	015b      	lsls	r3, r3, #5
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3314      	adds	r3, #20
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d037      	beq.n	8002dd6 <ch1Enable+0x9e>
			for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002d66:	2300      	movs	r3, #0
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	e031      	b.n	8002dd0 <ch1Enable+0x98>
				if(strcmp(sensors[i].name, mapSensors[j].sensorName)==0) {
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	015b      	lsls	r3, r3, #5
 8002d70:	4a1e      	ldr	r2, [pc, #120]	; (8002dec <ch1Enable+0xb4>)
 8002d72:	1898      	adds	r0, r3, r2
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4a1c      	ldr	r2, [pc, #112]	; (8002df0 <ch1Enable+0xb8>)
 8002d80:	4413      	add	r3, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	f7fd fa2c 	bl	80001e0 <strcmp>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d11d      	bne.n	8002dca <ch1Enable+0x92>
					value = mapSensors[j].function();
 8002d8e:	4918      	ldr	r1, [pc, #96]	; (8002df0 <ch1Enable+0xb8>)
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	3314      	adds	r3, #20
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4798      	blx	r3
 8002da2:	eef0 7a40 	vmov.f32	s15, s0
 8002da6:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <ch1Enable+0xbc>)
 8002da8:	edc3 7a00 	vstr	s15, [r3]
					sensors[i].lastValue=value;
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <ch1Enable+0xbc>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	490e      	ldr	r1, [pc, #56]	; (8002dec <ch1Enable+0xb4>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	015b      	lsls	r3, r3, #5
 8002db6:	440b      	add	r3, r1
 8002db8:	3318      	adds	r3, #24
 8002dba:	601a      	str	r2, [r3, #0]
					sensors[i].hasValue=true;
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <ch1Enable+0xb4>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	015b      	lsls	r3, r3, #5
 8002dc2:	4413      	add	r3, r2
 8002dc4:	331c      	adds	r3, #28
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b0a      	cmp	r3, #10
 8002dd4:	d9ca      	bls.n	8002d6c <ch1Enable+0x34>
	for(int i=0; i<11; i++) {
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b0a      	cmp	r3, #10
 8002de0:	ddb0      	ble.n	8002d44 <ch1Enable+0xc>
			}
		}
		else {
		}
	}
}
 8002de2:	bf00      	nop
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	2000003c 	.word	0x2000003c
 8002df0:	2000019c 	.word	0x2000019c
 8002df4:	20000f38 	.word	0x20000f38

08002df8 <ch2Enable>:

void ch2Enable(void) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
	for(int i=0; i<11; i++) {
 8002dfe:	2300      	movs	r3, #0
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	e04b      	b.n	8002e9c <ch2Enable+0xa4>
			if(sensors[i].samplingRate==1000 && sensors[i].isEnabled) {
 8002e04:	4a29      	ldr	r2, [pc, #164]	; (8002eac <ch2Enable+0xb4>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	015b      	lsls	r3, r3, #5
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3316      	adds	r3, #22
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e14:	d13f      	bne.n	8002e96 <ch2Enable+0x9e>
 8002e16:	4a25      	ldr	r2, [pc, #148]	; (8002eac <ch2Enable+0xb4>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	015b      	lsls	r3, r3, #5
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3314      	adds	r3, #20
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d037      	beq.n	8002e96 <ch2Enable+0x9e>
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002e26:	2300      	movs	r3, #0
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	e031      	b.n	8002e90 <ch2Enable+0x98>
					if(strcmp(sensors[i].name, mapSensors[j].sensorName)==0) {
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	015b      	lsls	r3, r3, #5
 8002e30:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <ch2Enable+0xb4>)
 8002e32:	1898      	adds	r0, r3, r2
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4a1c      	ldr	r2, [pc, #112]	; (8002eb0 <ch2Enable+0xb8>)
 8002e40:	4413      	add	r3, r2
 8002e42:	4619      	mov	r1, r3
 8002e44:	f7fd f9cc 	bl	80001e0 <strcmp>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d11d      	bne.n	8002e8a <ch2Enable+0x92>
						value = mapSensors[j].function();
 8002e4e:	4918      	ldr	r1, [pc, #96]	; (8002eb0 <ch2Enable+0xb8>)
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	440b      	add	r3, r1
 8002e5c:	3314      	adds	r3, #20
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4798      	blx	r3
 8002e62:	eef0 7a40 	vmov.f32	s15, s0
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <ch2Enable+0xbc>)
 8002e68:	edc3 7a00 	vstr	s15, [r3]
						sensors[i].lastValue=value;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <ch2Enable+0xbc>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	490e      	ldr	r1, [pc, #56]	; (8002eac <ch2Enable+0xb4>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	015b      	lsls	r3, r3, #5
 8002e76:	440b      	add	r3, r1
 8002e78:	3318      	adds	r3, #24
 8002e7a:	601a      	str	r2, [r3, #0]
						sensors[i].hasValue=true;
 8002e7c:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <ch2Enable+0xb4>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	015b      	lsls	r3, r3, #5
 8002e82:	4413      	add	r3, r2
 8002e84:	331c      	adds	r3, #28
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b0a      	cmp	r3, #10
 8002e94:	d9ca      	bls.n	8002e2c <ch2Enable+0x34>
	for(int i=0; i<11; i++) {
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b0a      	cmp	r3, #10
 8002ea0:	ddb0      	ble.n	8002e04 <ch2Enable+0xc>
					}
				}
			}
			else {}
		}
}
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	2000003c 	.word	0x2000003c
 8002eb0:	2000019c 	.word	0x2000019c
 8002eb4:	20000f38 	.word	0x20000f38

08002eb8 <ch3Enable>:

void ch3Enable(void) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
	for(int i=0; i<11; i++) {
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	607b      	str	r3, [r7, #4]
 8002ec2:	e04b      	b.n	8002f5c <ch3Enable+0xa4>
			if(sensors[i].samplingRate==2000 && sensors[i].isEnabled) {
 8002ec4:	4a29      	ldr	r2, [pc, #164]	; (8002f6c <ch3Enable+0xb4>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	015b      	lsls	r3, r3, #5
 8002eca:	4413      	add	r3, r2
 8002ecc:	3316      	adds	r3, #22
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002ed4:	d13f      	bne.n	8002f56 <ch3Enable+0x9e>
 8002ed6:	4a25      	ldr	r2, [pc, #148]	; (8002f6c <ch3Enable+0xb4>)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	015b      	lsls	r3, r3, #5
 8002edc:	4413      	add	r3, r2
 8002ede:	3314      	adds	r3, #20
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d037      	beq.n	8002f56 <ch3Enable+0x9e>
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	603b      	str	r3, [r7, #0]
 8002eea:	e031      	b.n	8002f50 <ch3Enable+0x98>
					if(strcmp(sensors[i].name, mapSensors[j].sensorName)==0) {
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	015b      	lsls	r3, r3, #5
 8002ef0:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <ch3Enable+0xb4>)
 8002ef2:	1898      	adds	r0, r3, r2
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <ch3Enable+0xb8>)
 8002f00:	4413      	add	r3, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	f7fd f96c 	bl	80001e0 <strcmp>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d11d      	bne.n	8002f4a <ch3Enable+0x92>
						value = mapSensors[j].function();
 8002f0e:	4918      	ldr	r1, [pc, #96]	; (8002f70 <ch3Enable+0xb8>)
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3314      	adds	r3, #20
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4798      	blx	r3
 8002f22:	eef0 7a40 	vmov.f32	s15, s0
 8002f26:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <ch3Enable+0xbc>)
 8002f28:	edc3 7a00 	vstr	s15, [r3]
						sensors[i].lastValue=value;
 8002f2c:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <ch3Enable+0xbc>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	490e      	ldr	r1, [pc, #56]	; (8002f6c <ch3Enable+0xb4>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	015b      	lsls	r3, r3, #5
 8002f36:	440b      	add	r3, r1
 8002f38:	3318      	adds	r3, #24
 8002f3a:	601a      	str	r2, [r3, #0]
						sensors[i].hasValue=true;
 8002f3c:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <ch3Enable+0xb4>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	015b      	lsls	r3, r3, #5
 8002f42:	4413      	add	r3, r2
 8002f44:	331c      	adds	r3, #28
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b0a      	cmp	r3, #10
 8002f54:	d9ca      	bls.n	8002eec <ch3Enable+0x34>
	for(int i=0; i<11; i++) {
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b0a      	cmp	r3, #10
 8002f60:	ddb0      	ble.n	8002ec4 <ch3Enable+0xc>
					}
				}
			}
			else {}
		}
}
 8002f62:	bf00      	nop
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	2000003c 	.word	0x2000003c
 8002f70:	2000019c 	.word	0x2000019c
 8002f74:	20000f38 	.word	0x20000f38

08002f78 <ch4Enable>:

void ch4Enable(void) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
	for(int i=0; i<11; i++) {
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	e04b      	b.n	800301c <ch4Enable+0xa4>
			if(sensors[i].samplingRate==4000 && sensors[i].isEnabled) {
 8002f84:	4a29      	ldr	r2, [pc, #164]	; (800302c <ch4Enable+0xb4>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	015b      	lsls	r3, r3, #5
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3316      	adds	r3, #22
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002f94:	d13f      	bne.n	8003016 <ch4Enable+0x9e>
 8002f96:	4a25      	ldr	r2, [pc, #148]	; (800302c <ch4Enable+0xb4>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	015b      	lsls	r3, r3, #5
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d037      	beq.n	8003016 <ch4Enable+0x9e>
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	603b      	str	r3, [r7, #0]
 8002faa:	e031      	b.n	8003010 <ch4Enable+0x98>
					if(strcmp(sensors[i].name, mapSensors[j].sensorName)==0) {
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	015b      	lsls	r3, r3, #5
 8002fb0:	4a1e      	ldr	r2, [pc, #120]	; (800302c <ch4Enable+0xb4>)
 8002fb2:	1898      	adds	r0, r3, r2
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <ch4Enable+0xb8>)
 8002fc0:	4413      	add	r3, r2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f7fd f90c 	bl	80001e0 <strcmp>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d11d      	bne.n	800300a <ch4Enable+0x92>
						value = mapSensors[j].function();
 8002fce:	4918      	ldr	r1, [pc, #96]	; (8003030 <ch4Enable+0xb8>)
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	440b      	add	r3, r1
 8002fdc:	3314      	adds	r3, #20
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4798      	blx	r3
 8002fe2:	eef0 7a40 	vmov.f32	s15, s0
 8002fe6:	4b13      	ldr	r3, [pc, #76]	; (8003034 <ch4Enable+0xbc>)
 8002fe8:	edc3 7a00 	vstr	s15, [r3]
						sensors[i].lastValue=value;
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <ch4Enable+0xbc>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	490e      	ldr	r1, [pc, #56]	; (800302c <ch4Enable+0xb4>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	015b      	lsls	r3, r3, #5
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3318      	adds	r3, #24
 8002ffa:	601a      	str	r2, [r3, #0]
						sensors[i].hasValue=true;
 8002ffc:	4a0b      	ldr	r2, [pc, #44]	; (800302c <ch4Enable+0xb4>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	015b      	lsls	r3, r3, #5
 8003002:	4413      	add	r3, r2
 8003004:	331c      	adds	r3, #28
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	3301      	adds	r3, #1
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b0a      	cmp	r3, #10
 8003014:	d9ca      	bls.n	8002fac <ch4Enable+0x34>
	for(int i=0; i<11; i++) {
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3301      	adds	r3, #1
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b0a      	cmp	r3, #10
 8003020:	ddb0      	ble.n	8002f84 <ch4Enable+0xc>
					}
				}
			}
			else {}
		}
}
 8003022:	bf00      	nop
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	2000003c 	.word	0x2000003c
 8003030:	2000019c 	.word	0x2000019c
 8003034:	20000f38 	.word	0x20000f38

08003038 <debugAdcInt>:



void debugAdcInt(Menu *menu, bool ifFirstEntry) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b08c      	sub	sp, #48	; 0x30
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
	encSetRange(0,0);
 8003044:	2100      	movs	r1, #0
 8003046:	2000      	movs	r0, #0
 8003048:	f7fe fc56 	bl	80018f8 <encSetRange>
	encSetPos(0);
 800304c:	2000      	movs	r0, #0
 800304e:	f7fe fc6d 	bl	800192c <encSetPos>
	ssd1306_SetCursor(0, 0);
 8003052:	2100      	movs	r1, #0
 8003054:	2000      	movs	r0, #0
 8003056:	f002 f8a7 	bl	80051a8 <ssd1306_SetCursor>
	char str[40];
	sprintf(str, "int ch0=%.3f V", getValueAdcIntCh0());
 800305a:	f7fe f91f 	bl	800129c <getValueAdcIntCh0>
 800305e:	ee10 3a10 	vmov	r3, s0
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fa88 	bl	8000578 <__aeabi_f2d>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	f107 0008 	add.w	r0, r7, #8
 8003070:	492e      	ldr	r1, [pc, #184]	; (800312c <debugAdcInt+0xf4>)
 8003072:	f00a fd81 	bl	800db78 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8003076:	4a2e      	ldr	r2, [pc, #184]	; (8003130 <debugAdcInt+0xf8>)
 8003078:	f107 0008 	add.w	r0, r7, #8
 800307c:	2301      	movs	r3, #1
 800307e:	ca06      	ldmia	r2, {r1, r2}
 8003080:	f002 f86c 	bl	800515c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 10);
 8003084:	210a      	movs	r1, #10
 8003086:	2000      	movs	r0, #0
 8003088:	f002 f88e 	bl	80051a8 <ssd1306_SetCursor>
	sprintf(str, "int ch1=%.3f V", getValueAdcIntCh1());
 800308c:	f7fe f938 	bl	8001300 <getValueAdcIntCh1>
 8003090:	ee10 3a10 	vmov	r3, s0
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd fa6f 	bl	8000578 <__aeabi_f2d>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	f107 0008 	add.w	r0, r7, #8
 80030a2:	4924      	ldr	r1, [pc, #144]	; (8003134 <debugAdcInt+0xfc>)
 80030a4:	f00a fd68 	bl	800db78 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 80030a8:	4a21      	ldr	r2, [pc, #132]	; (8003130 <debugAdcInt+0xf8>)
 80030aa:	f107 0008 	add.w	r0, r7, #8
 80030ae:	2301      	movs	r3, #1
 80030b0:	ca06      	ldmia	r2, {r1, r2}
 80030b2:	f002 f853 	bl	800515c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 80030b6:	2114      	movs	r1, #20
 80030b8:	2000      	movs	r0, #0
 80030ba:	f002 f875 	bl	80051a8 <ssd1306_SetCursor>
	sprintf(str, "int ch2=%.3f V", getValueAdcIntCh2());
 80030be:	f7fe f951 	bl	8001364 <getValueAdcIntCh2>
 80030c2:	ee10 3a10 	vmov	r3, s0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fa56 	bl	8000578 <__aeabi_f2d>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	f107 0008 	add.w	r0, r7, #8
 80030d4:	4918      	ldr	r1, [pc, #96]	; (8003138 <debugAdcInt+0x100>)
 80030d6:	f00a fd4f 	bl	800db78 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 80030da:	4a15      	ldr	r2, [pc, #84]	; (8003130 <debugAdcInt+0xf8>)
 80030dc:	f107 0008 	add.w	r0, r7, #8
 80030e0:	2301      	movs	r3, #1
 80030e2:	ca06      	ldmia	r2, {r1, r2}
 80030e4:	f002 f83a 	bl	800515c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 30);
 80030e8:	211e      	movs	r1, #30
 80030ea:	2000      	movs	r0, #0
 80030ec:	f002 f85c 	bl	80051a8 <ssd1306_SetCursor>
	sprintf(str, "int ch3=%.3f V", getValueAdcIntCh3());
 80030f0:	f7fe f96a 	bl	80013c8 <getValueAdcIntCh3>
 80030f4:	ee10 3a10 	vmov	r3, s0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fd fa3d 	bl	8000578 <__aeabi_f2d>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	f107 0008 	add.w	r0, r7, #8
 8003106:	490d      	ldr	r1, [pc, #52]	; (800313c <debugAdcInt+0x104>)
 8003108:	f00a fd36 	bl	800db78 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 800310c:	4a08      	ldr	r2, [pc, #32]	; (8003130 <debugAdcInt+0xf8>)
 800310e:	f107 0008 	add.w	r0, r7, #8
 8003112:	2301      	movs	r3, #1
 8003114:	ca06      	ldmia	r2, {r1, r2}
 8003116:	f002 f821 	bl	800515c <ssd1306_WriteString>
	backButton(0, MAIN_MENU);
 800311a:	2100      	movs	r1, #0
 800311c:	2000      	movs	r0, #0
 800311e:	f7ff fad3 	bl	80026c8 <backButton>
}
 8003122:	bf00      	nop
 8003124:	3730      	adds	r7, #48	; 0x30
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	08010128 	.word	0x08010128
 8003130:	2000094c 	.word	0x2000094c
 8003134:	08010138 	.word	0x08010138
 8003138:	08010148 	.word	0x08010148
 800313c:	08010158 	.word	0x08010158

08003140 <debugAdcExt>:

void debugAdcExt(Menu *menu, bool ifFirstEntry) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b08c      	sub	sp, #48	; 0x30
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	70fb      	strb	r3, [r7, #3]
	encSetRange(0,0);
 800314c:	2100      	movs	r1, #0
 800314e:	2000      	movs	r0, #0
 8003150:	f7fe fbd2 	bl	80018f8 <encSetRange>
	encSetPos(0);
 8003154:	2000      	movs	r0, #0
 8003156:	f7fe fbe9 	bl	800192c <encSetPos>
	char str[40];
	sprintf(str, "ext ch0=%.3f V", getValueAdcExtCh0());
 800315a:	f7fd ff51 	bl	8001000 <getValueAdcExtCh0>
 800315e:	ee10 3a10 	vmov	r3, s0
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd fa08 	bl	8000578 <__aeabi_f2d>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	f107 0008 	add.w	r0, r7, #8
 8003170:	4930      	ldr	r1, [pc, #192]	; (8003234 <debugAdcExt+0xf4>)
 8003172:	f00a fd01 	bl	800db78 <siprintf>
	ssd1306_SetCursor(0, 0);
 8003176:	2100      	movs	r1, #0
 8003178:	2000      	movs	r0, #0
 800317a:	f002 f815 	bl	80051a8 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 800317e:	4a2e      	ldr	r2, [pc, #184]	; (8003238 <debugAdcExt+0xf8>)
 8003180:	f107 0008 	add.w	r0, r7, #8
 8003184:	2301      	movs	r3, #1
 8003186:	ca06      	ldmia	r2, {r1, r2}
 8003188:	f001 ffe8 	bl	800515c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 10);
 800318c:	210a      	movs	r1, #10
 800318e:	2000      	movs	r0, #0
 8003190:	f002 f80a 	bl	80051a8 <ssd1306_SetCursor>
	sprintf(str, "ext ch1=%.3f V", getValueAdcExtCh1());
 8003194:	f7fd ff88 	bl	80010a8 <getValueAdcExtCh1>
 8003198:	ee10 3a10 	vmov	r3, s0
 800319c:	4618      	mov	r0, r3
 800319e:	f7fd f9eb 	bl	8000578 <__aeabi_f2d>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	f107 0008 	add.w	r0, r7, #8
 80031aa:	4924      	ldr	r1, [pc, #144]	; (800323c <debugAdcExt+0xfc>)
 80031ac:	f00a fce4 	bl	800db78 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 80031b0:	4a21      	ldr	r2, [pc, #132]	; (8003238 <debugAdcExt+0xf8>)
 80031b2:	f107 0008 	add.w	r0, r7, #8
 80031b6:	2301      	movs	r3, #1
 80031b8:	ca06      	ldmia	r2, {r1, r2}
 80031ba:	f001 ffcf 	bl	800515c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 80031be:	2114      	movs	r1, #20
 80031c0:	2000      	movs	r0, #0
 80031c2:	f001 fff1 	bl	80051a8 <ssd1306_SetCursor>
	sprintf(str, "ext ch2=%.3f V", getValueAdcExtCh2());
 80031c6:	f7fd ffc3 	bl	8001150 <getValueAdcExtCh2>
 80031ca:	ee10 3a10 	vmov	r3, s0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd f9d2 	bl	8000578 <__aeabi_f2d>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	f107 0008 	add.w	r0, r7, #8
 80031dc:	4918      	ldr	r1, [pc, #96]	; (8003240 <debugAdcExt+0x100>)
 80031de:	f00a fccb 	bl	800db78 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 80031e2:	4a15      	ldr	r2, [pc, #84]	; (8003238 <debugAdcExt+0xf8>)
 80031e4:	f107 0008 	add.w	r0, r7, #8
 80031e8:	2301      	movs	r3, #1
 80031ea:	ca06      	ldmia	r2, {r1, r2}
 80031ec:	f001 ffb6 	bl	800515c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 30);
 80031f0:	211e      	movs	r1, #30
 80031f2:	2000      	movs	r0, #0
 80031f4:	f001 ffd8 	bl	80051a8 <ssd1306_SetCursor>
	sprintf(str, "ext ch3=%.3f V", getValueAdcExtCh3());
 80031f8:	f7fd fffe 	bl	80011f8 <getValueAdcExtCh3>
 80031fc:	ee10 3a10 	vmov	r3, s0
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd f9b9 	bl	8000578 <__aeabi_f2d>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	f107 0008 	add.w	r0, r7, #8
 800320e:	490d      	ldr	r1, [pc, #52]	; (8003244 <debugAdcExt+0x104>)
 8003210:	f00a fcb2 	bl	800db78 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8003214:	4a08      	ldr	r2, [pc, #32]	; (8003238 <debugAdcExt+0xf8>)
 8003216:	f107 0008 	add.w	r0, r7, #8
 800321a:	2301      	movs	r3, #1
 800321c:	ca06      	ldmia	r2, {r1, r2}
 800321e:	f001 ff9d 	bl	800515c <ssd1306_WriteString>

	backButton(0, MAIN_MENU);
 8003222:	2100      	movs	r1, #0
 8003224:	2000      	movs	r0, #0
 8003226:	f7ff fa4f 	bl	80026c8 <backButton>
}
 800322a:	bf00      	nop
 800322c:	3730      	adds	r7, #48	; 0x30
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	08010168 	.word	0x08010168
 8003238:	2000094c 	.word	0x2000094c
 800323c:	08010178 	.word	0x08010178
 8003240:	08010188 	.word	0x08010188
 8003244:	08010198 	.word	0x08010198

08003248 <debugDs18>:

bool refreshManual=false;
float ds18_1_value;
float ds18_2_value;
float ds18_3_value;
void debugDs18(Menu *menu, bool ifFirstEntry) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b08c      	sub	sp, #48	; 0x30
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	70fb      	strb	r3, [r7, #3]
	if(firstRun) {
 8003254:	4b4a      	ldr	r3, [pc, #296]	; (8003380 <debugDs18+0x138>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <debugDs18+0x20>
			encSetPos(0);
 800325c:	2000      	movs	r0, #0
 800325e:	f7fe fb65 	bl	800192c <encSetPos>
			firstRun=0;
 8003262:	4b47      	ldr	r3, [pc, #284]	; (8003380 <debugDs18+0x138>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
		}
	encSetRange(0,1);
 8003268:	2101      	movs	r1, #1
 800326a:	2000      	movs	r0, #0
 800326c:	f7fe fb44 	bl	80018f8 <encSetRange>

	    // Pobierz wartości tylko raz, przy pierwszym wywołaniu funkcji
	if (refreshManual) {
 8003270:	4b44      	ldr	r3, [pc, #272]	; (8003384 <debugDs18+0x13c>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d014      	beq.n	80032a2 <debugDs18+0x5a>
		 ds18_1_value = getValueDs1();
 8003278:	f7fe f934 	bl	80014e4 <getValueDs1>
 800327c:	eef0 7a40 	vmov.f32	s15, s0
 8003280:	4b41      	ldr	r3, [pc, #260]	; (8003388 <debugDs18+0x140>)
 8003282:	edc3 7a00 	vstr	s15, [r3]
		 ds18_2_value = getValueDs2();
 8003286:	f7fe f993 	bl	80015b0 <getValueDs2>
 800328a:	eef0 7a40 	vmov.f32	s15, s0
 800328e:	4b3f      	ldr	r3, [pc, #252]	; (800338c <debugDs18+0x144>)
 8003290:	edc3 7a00 	vstr	s15, [r3]
		 ds18_3_value = getValueDs3();
 8003294:	f7fe f9f2 	bl	800167c <getValueDs3>
 8003298:	eef0 7a40 	vmov.f32	s15, s0
 800329c:	4b3c      	ldr	r3, [pc, #240]	; (8003390 <debugDs18+0x148>)
 800329e:	edc3 7a00 	vstr	s15, [r3]
	}
	 refreshManual=false;
 80032a2:	4b38      	ldr	r3, [pc, #224]	; (8003384 <debugDs18+0x13c>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
	    // Wykonaj operacje

	    char str[40];
	    ssd1306_SetCursor(0, 0);
 80032a8:	2100      	movs	r1, #0
 80032aa:	2000      	movs	r0, #0
 80032ac:	f001 ff7c 	bl	80051a8 <ssd1306_SetCursor>
	    sprintf(str, "ds18_1=%.2f C", ds18_1_value);
 80032b0:	4b35      	ldr	r3, [pc, #212]	; (8003388 <debugDs18+0x140>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd f95f 	bl	8000578 <__aeabi_f2d>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	f107 0008 	add.w	r0, r7, #8
 80032c2:	4934      	ldr	r1, [pc, #208]	; (8003394 <debugDs18+0x14c>)
 80032c4:	f00a fc58 	bl	800db78 <siprintf>
	    ssd1306_WriteString(str, Font_7x10, White);
 80032c8:	4a33      	ldr	r2, [pc, #204]	; (8003398 <debugDs18+0x150>)
 80032ca:	f107 0008 	add.w	r0, r7, #8
 80032ce:	2301      	movs	r3, #1
 80032d0:	ca06      	ldmia	r2, {r1, r2}
 80032d2:	f001 ff43 	bl	800515c <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 10);
 80032d6:	210a      	movs	r1, #10
 80032d8:	2000      	movs	r0, #0
 80032da:	f001 ff65 	bl	80051a8 <ssd1306_SetCursor>
	    sprintf(str, "ds18_2=%.2f C", ds18_2_value);
 80032de:	4b2b      	ldr	r3, [pc, #172]	; (800338c <debugDs18+0x144>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd f948 	bl	8000578 <__aeabi_f2d>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	f107 0008 	add.w	r0, r7, #8
 80032f0:	492a      	ldr	r1, [pc, #168]	; (800339c <debugDs18+0x154>)
 80032f2:	f00a fc41 	bl	800db78 <siprintf>
	    ssd1306_WriteString(str, Font_7x10, White);
 80032f6:	4a28      	ldr	r2, [pc, #160]	; (8003398 <debugDs18+0x150>)
 80032f8:	f107 0008 	add.w	r0, r7, #8
 80032fc:	2301      	movs	r3, #1
 80032fe:	ca06      	ldmia	r2, {r1, r2}
 8003300:	f001 ff2c 	bl	800515c <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 20);
 8003304:	2114      	movs	r1, #20
 8003306:	2000      	movs	r0, #0
 8003308:	f001 ff4e 	bl	80051a8 <ssd1306_SetCursor>
	    sprintf(str, "ds18_3=%.2f C", ds18_3_value);
 800330c:	4b20      	ldr	r3, [pc, #128]	; (8003390 <debugDs18+0x148>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd f931 	bl	8000578 <__aeabi_f2d>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	f107 0008 	add.w	r0, r7, #8
 800331e:	4920      	ldr	r1, [pc, #128]	; (80033a0 <debugDs18+0x158>)
 8003320:	f00a fc2a 	bl	800db78 <siprintf>
	    ssd1306_WriteString(str, Font_7x10, White);
 8003324:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <debugDs18+0x150>)
 8003326:	f107 0008 	add.w	r0, r7, #8
 800332a:	2301      	movs	r3, #1
 800332c:	ca06      	ldmia	r2, {r1, r2}
 800332e:	f001 ff15 	bl	800515c <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 30);
 8003332:	211e      	movs	r1, #30
 8003334:	2000      	movs	r0, #0
 8003336:	f001 ff37 	bl	80051a8 <ssd1306_SetCursor>
	    //ssd1306_WriteString("Wymag. reczne odswiez.", Font_6x8, White);
	    ssd1306_WriteString(">Odswiez wartosci", Font_6x8, entrySelected(0) ? Black : White);
 800333a:	2000      	movs	r0, #0
 800333c:	f7fe fb26 	bl	800198c <entrySelected>
 8003340:	4603      	mov	r3, r0
 8003342:	f083 0301 	eor.w	r3, r3, #1
 8003346:	b2db      	uxtb	r3, r3
 8003348:	4a16      	ldr	r2, [pc, #88]	; (80033a4 <debugDs18+0x15c>)
 800334a:	ca06      	ldmia	r2, {r1, r2}
 800334c:	4816      	ldr	r0, [pc, #88]	; (80033a8 <debugDs18+0x160>)
 800334e:	f001 ff05 	bl	800515c <ssd1306_WriteString>
	    if(entrySelected(0) && entryClicked(0)) {
 8003352:	2000      	movs	r0, #0
 8003354:	f7fe fb1a 	bl	800198c <entrySelected>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d008      	beq.n	8003370 <debugDs18+0x128>
 800335e:	2000      	movs	r0, #0
 8003360:	f7fe fb27 	bl	80019b2 <entryClicked>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <debugDs18+0x128>
	    	refreshManual=true;
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <debugDs18+0x13c>)
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
	    }
	    backButton(1, MAIN_MENU);
 8003370:	2100      	movs	r1, #0
 8003372:	2001      	movs	r0, #1
 8003374:	f7ff f9a8 	bl	80026c8 <backButton>
}
 8003378:	bf00      	nop
 800337a:	3730      	adds	r7, #48	; 0x30
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	2000002c 	.word	0x2000002c
 8003384:	20000f3c 	.word	0x20000f3c
 8003388:	20000f40 	.word	0x20000f40
 800338c:	20000f44 	.word	0x20000f44
 8003390:	20000f48 	.word	0x20000f48
 8003394:	080101a8 	.word	0x080101a8
 8003398:	2000094c 	.word	0x2000094c
 800339c:	080101b8 	.word	0x080101b8
 80033a0:	080101c8 	.word	0x080101c8
 80033a4:	20000944 	.word	0x20000944
 80033a8:	080101d8 	.word	0x080101d8

080033ac <drawOnoffMeasure>:
}

char *measureStatusStr="";
char* restartDetSdString="";

void drawOnoffMeasure(Menu *menu, bool ifFirstEntry) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	70fb      	strb	r3, [r7, #3]

	if(firstRun) {
 80033b8:	4b80      	ldr	r3, [pc, #512]	; (80035bc <drawOnoffMeasure+0x210>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <drawOnoffMeasure+0x20>
		encSetPos(0);
 80033c0:	2000      	movs	r0, #0
 80033c2:	f7fe fab3 	bl	800192c <encSetPos>
		firstRun=0;
 80033c6:	4b7d      	ldr	r3, [pc, #500]	; (80035bc <drawOnoffMeasure+0x210>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
	}
	encSetRange(0, 2);
 80033cc:	2102      	movs	r1, #2
 80033ce:	2000      	movs	r0, #0
 80033d0:	f7fe fa92 	bl	80018f8 <encSetRange>
	backButton(0, MAIN_MENU);
 80033d4:	2100      	movs	r1, #0
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7ff f976 	bl	80026c8 <backButton>

	uint8_t currPos;
	if(!sdReady) {
 80033dc:	4b78      	ldr	r3, [pc, #480]	; (80035c0 <drawOnoffMeasure+0x214>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	f083 0301 	eor.w	r3, r3, #1
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d028      	beq.n	800343c <drawOnoffMeasure+0x90>
		ssd1306_SetCursor(0, 0);
 80033ea:	2100      	movs	r1, #0
 80033ec:	2000      	movs	r0, #0
 80033ee:	f001 fedb 	bl	80051a8 <ssd1306_SetCursor>
		ssd1306_WriteString("SD ERROR!", Font_11x18, White);
 80033f2:	4a74      	ldr	r2, [pc, #464]	; (80035c4 <drawOnoffMeasure+0x218>)
 80033f4:	2301      	movs	r3, #1
 80033f6:	ca06      	ldmia	r2, {r1, r2}
 80033f8:	4873      	ldr	r0, [pc, #460]	; (80035c8 <drawOnoffMeasure+0x21c>)
 80033fa:	f001 feaf 	bl	800515c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 80033fe:	2112      	movs	r1, #18
 8003400:	2000      	movs	r0, #0
 8003402:	f001 fed1 	bl	80051a8 <ssd1306_SetCursor>
		ssd1306_WriteString(getFresultString(fresult), Font_7x10, White);
 8003406:	4b71      	ldr	r3, [pc, #452]	; (80035cc <drawOnoffMeasure+0x220>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	4618      	mov	r0, r3
 800340e:	f000 faff 	bl	8003a10 <getFresultString>
 8003412:	4a6f      	ldr	r2, [pc, #444]	; (80035d0 <drawOnoffMeasure+0x224>)
 8003414:	2301      	movs	r3, #1
 8003416:	ca06      	ldmia	r2, {r1, r2}
 8003418:	f001 fea0 	bl	800515c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 28);
 800341c:	211c      	movs	r1, #28
 800341e:	2000      	movs	r0, #0
 8003420:	f001 fec2 	bl	80051a8 <ssd1306_SetCursor>
		ssd1306_WriteString("WYMAG. RESET!", Font_7x10, White);
 8003424:	4a6a      	ldr	r2, [pc, #424]	; (80035d0 <drawOnoffMeasure+0x224>)
 8003426:	2301      	movs	r3, #1
 8003428:	ca06      	ldmia	r2, {r1, r2}
 800342a:	486a      	ldr	r0, [pc, #424]	; (80035d4 <drawOnoffMeasure+0x228>)
 800342c:	f001 fe96 	bl	800515c <ssd1306_WriteString>
		leds[2].state=true;
 8003430:	4b69      	ldr	r3, [pc, #420]	; (80035d8 <drawOnoffMeasure+0x22c>)
 8003432:	2201      	movs	r2, #1
 8003434:	759a      	strb	r2, [r3, #22]
		currPos=0;
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(0, 46);
		ssd1306_WriteString(restartDetSdString, Font_6x8, White);
	}


}
 800343a:	e0ba      	b.n	80035b2 <drawOnoffMeasure+0x206>
	else if(sdUnmounted) {
 800343c:	4b67      	ldr	r3, [pc, #412]	; (80035dc <drawOnoffMeasure+0x230>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d021      	beq.n	8003488 <drawOnoffMeasure+0xdc>
		ssd1306_SetCursor(0, 0);
 8003444:	2100      	movs	r1, #0
 8003446:	2000      	movs	r0, #0
 8003448:	f001 feae 	bl	80051a8 <ssd1306_SetCursor>
		ssd1306_WriteString("WYMAG.", Font_11x18, White);
 800344c:	4a5d      	ldr	r2, [pc, #372]	; (80035c4 <drawOnoffMeasure+0x218>)
 800344e:	2301      	movs	r3, #1
 8003450:	ca06      	ldmia	r2, {r1, r2}
 8003452:	4863      	ldr	r0, [pc, #396]	; (80035e0 <drawOnoffMeasure+0x234>)
 8003454:	f001 fe82 	bl	800515c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 8003458:	2112      	movs	r1, #18
 800345a:	2000      	movs	r0, #0
 800345c:	f001 fea4 	bl	80051a8 <ssd1306_SetCursor>
		ssd1306_WriteString("RESTART", Font_11x18, White);
 8003460:	4a58      	ldr	r2, [pc, #352]	; (80035c4 <drawOnoffMeasure+0x218>)
 8003462:	2301      	movs	r3, #1
 8003464:	ca06      	ldmia	r2, {r1, r2}
 8003466:	485f      	ldr	r0, [pc, #380]	; (80035e4 <drawOnoffMeasure+0x238>)
 8003468:	f001 fe78 	bl	800515c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 36);
 800346c:	2124      	movs	r1, #36	; 0x24
 800346e:	2000      	movs	r0, #0
 8003470:	f001 fe9a 	bl	80051a8 <ssd1306_SetCursor>
		ssd1306_WriteString("po odmont. SD!", Font_6x8, White);
 8003474:	4a5c      	ldr	r2, [pc, #368]	; (80035e8 <drawOnoffMeasure+0x23c>)
 8003476:	2301      	movs	r3, #1
 8003478:	ca06      	ldmia	r2, {r1, r2}
 800347a:	485c      	ldr	r0, [pc, #368]	; (80035ec <drawOnoffMeasure+0x240>)
 800347c:	f001 fe6e 	bl	800515c <ssd1306_WriteString>
		leds[2].state=true;
 8003480:	4b55      	ldr	r3, [pc, #340]	; (80035d8 <drawOnoffMeasure+0x22c>)
 8003482:	2201      	movs	r2, #1
 8003484:	759a      	strb	r2, [r3, #22]
}
 8003486:	e094      	b.n	80035b2 <drawOnoffMeasure+0x206>
		leds[2].state=false;
 8003488:	4b53      	ldr	r3, [pc, #332]	; (80035d8 <drawOnoffMeasure+0x22c>)
 800348a:	2200      	movs	r2, #0
 800348c:	759a      	strb	r2, [r3, #22]
		ssd1306_SetCursor(0, 0);
 800348e:	2100      	movs	r1, #0
 8003490:	2000      	movs	r0, #0
 8003492:	f001 fe89 	bl	80051a8 <ssd1306_SetCursor>
		currPos=-8;
 8003496:	23f8      	movs	r3, #248	; 0xf8
 8003498:	73fb      	strb	r3, [r7, #15]
		encSetRange(0,2);
 800349a:	2102      	movs	r1, #2
 800349c:	2000      	movs	r0, #0
 800349e:	f7fe fa2b 	bl	80018f8 <encSetRange>
		ssd1306_SetCursor(0, 0);
 80034a2:	2100      	movs	r1, #0
 80034a4:	2000      	movs	r0, #0
 80034a6:	f001 fe7f 	bl	80051a8 <ssd1306_SetCursor>
		ssd1306_WriteString("START", Font_11x18, entrySelected(1) ? Black : White);
 80034aa:	2001      	movs	r0, #1
 80034ac:	f7fe fa6e 	bl	800198c <entrySelected>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f083 0301 	eor.w	r3, r3, #1
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	4a42      	ldr	r2, [pc, #264]	; (80035c4 <drawOnoffMeasure+0x218>)
 80034ba:	ca06      	ldmia	r2, {r1, r2}
 80034bc:	484c      	ldr	r0, [pc, #304]	; (80035f0 <drawOnoffMeasure+0x244>)
 80034be:	f001 fe4d 	bl	800515c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 80034c2:	2112      	movs	r1, #18
 80034c4:	2000      	movs	r0, #0
 80034c6:	f001 fe6f 	bl	80051a8 <ssd1306_SetCursor>
		ssd1306_WriteString("STOP", Font_11x18, entrySelected(2) ? Black : White);
 80034ca:	2002      	movs	r0, #2
 80034cc:	f7fe fa5e 	bl	800198c <entrySelected>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f083 0301 	eor.w	r3, r3, #1
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	4a3a      	ldr	r2, [pc, #232]	; (80035c4 <drawOnoffMeasure+0x218>)
 80034da:	ca06      	ldmia	r2, {r1, r2}
 80034dc:	4845      	ldr	r0, [pc, #276]	; (80035f4 <drawOnoffMeasure+0x248>)
 80034de:	f001 fe3d 	bl	800515c <ssd1306_WriteString>
		if(entrySelected(1) && entryClicked(1)) {
 80034e2:	2001      	movs	r0, #1
 80034e4:	f7fe fa52 	bl	800198c <entrySelected>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d034      	beq.n	8003558 <drawOnoffMeasure+0x1ac>
 80034ee:	2001      	movs	r0, #1
 80034f0:	f7fe fa5f 	bl	80019b2 <entryClicked>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d02e      	beq.n	8003558 <drawOnoffMeasure+0x1ac>
			if(debug) {
 80034fa:	4b3f      	ldr	r3, [pc, #252]	; (80035f8 <drawOnoffMeasure+0x24c>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d006      	beq.n	8003510 <drawOnoffMeasure+0x164>
				measureStatusStr="                ";
 8003502:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <drawOnoffMeasure+0x250>)
 8003504:	4a3e      	ldr	r2, [pc, #248]	; (8003600 <drawOnoffMeasure+0x254>)
 8003506:	601a      	str	r2, [r3, #0]
				measureStatusStr="Juz rozpoczeto!";
 8003508:	4b3c      	ldr	r3, [pc, #240]	; (80035fc <drawOnoffMeasure+0x250>)
 800350a:	4a3e      	ldr	r2, [pc, #248]	; (8003604 <drawOnoffMeasure+0x258>)
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	e023      	b.n	8003558 <drawOnoffMeasure+0x1ac>
				if(sd_openfile()==FR_OK) {
 8003510:	f000 f9cc 	bl	80038ac <sd_openfile>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d112      	bne.n	8003540 <drawOnoffMeasure+0x194>
					if(sd_writeline("<NEW_MEASURE_BEGIN>\n")==FR_OK) {
 800351a:	483b      	ldr	r0, [pc, #236]	; (8003608 <drawOnoffMeasure+0x25c>)
 800351c:	f000 fa16 	bl	800394c <sd_writeline>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d118      	bne.n	8003558 <drawOnoffMeasure+0x1ac>
						sd_writeline("timestamp,adc_ext_ch0,adc_ext_ch1,adc_ext_ch2,adc_ext_ch3,adc_int_ch0,adc_int_ch1,adc_int_ch2,adc_int_ch3,ds18b20_1,ds18b20_2,ds18b20_3\n");
 8003526:	4839      	ldr	r0, [pc, #228]	; (800360c <drawOnoffMeasure+0x260>)
 8003528:	f000 fa10 	bl	800394c <sd_writeline>
						debug=true;
 800352c:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <drawOnoffMeasure+0x24c>)
 800352e:	2201      	movs	r2, #1
 8003530:	701a      	strb	r2, [r3, #0]
						measureStatusStr="                ";
 8003532:	4b32      	ldr	r3, [pc, #200]	; (80035fc <drawOnoffMeasure+0x250>)
 8003534:	4a32      	ldr	r2, [pc, #200]	; (8003600 <drawOnoffMeasure+0x254>)
 8003536:	601a      	str	r2, [r3, #0]
						measureStatusStr="Pomiar rozpocz.";
 8003538:	4b30      	ldr	r3, [pc, #192]	; (80035fc <drawOnoffMeasure+0x250>)
 800353a:	4a35      	ldr	r2, [pc, #212]	; (8003610 <drawOnoffMeasure+0x264>)
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e00b      	b.n	8003558 <drawOnoffMeasure+0x1ac>
					measureStatusStr="                ";
 8003540:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <drawOnoffMeasure+0x250>)
 8003542:	4a2f      	ldr	r2, [pc, #188]	; (8003600 <drawOnoffMeasure+0x254>)
 8003544:	601a      	str	r2, [r3, #0]
					measureStatusStr="Nie wykryt. SD!";
 8003546:	4b2d      	ldr	r3, [pc, #180]	; (80035fc <drawOnoffMeasure+0x250>)
 8003548:	4a32      	ldr	r2, [pc, #200]	; (8003614 <drawOnoffMeasure+0x268>)
 800354a:	601a      	str	r2, [r3, #0]
					restartDetSdString="Wymag. RST";
 800354c:	4b32      	ldr	r3, [pc, #200]	; (8003618 <drawOnoffMeasure+0x26c>)
 800354e:	4a33      	ldr	r2, [pc, #204]	; (800361c <drawOnoffMeasure+0x270>)
 8003550:	601a      	str	r2, [r3, #0]
					leds[2].state=true;
 8003552:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <drawOnoffMeasure+0x22c>)
 8003554:	2201      	movs	r2, #1
 8003556:	759a      	strb	r2, [r3, #22]
		if(entrySelected(2) && entryClicked(2)) {
 8003558:	2002      	movs	r0, #2
 800355a:	f7fe fa17 	bl	800198c <entrySelected>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d010      	beq.n	8003586 <drawOnoffMeasure+0x1da>
 8003564:	2002      	movs	r0, #2
 8003566:	f7fe fa24 	bl	80019b2 <entryClicked>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <drawOnoffMeasure+0x1da>
			debug=false;
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <drawOnoffMeasure+0x24c>)
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]
			sd_closefile();
 8003576:	f000 fa31 	bl	80039dc <sd_closefile>
			measureStatusStr="                ";
 800357a:	4b20      	ldr	r3, [pc, #128]	; (80035fc <drawOnoffMeasure+0x250>)
 800357c:	4a20      	ldr	r2, [pc, #128]	; (8003600 <drawOnoffMeasure+0x254>)
 800357e:	601a      	str	r2, [r3, #0]
			measureStatusStr="Pomiar zakonczony";
 8003580:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <drawOnoffMeasure+0x250>)
 8003582:	4a27      	ldr	r2, [pc, #156]	; (8003620 <drawOnoffMeasure+0x274>)
 8003584:	601a      	str	r2, [r3, #0]
		ssd1306_SetCursor(0, 36);
 8003586:	2124      	movs	r1, #36	; 0x24
 8003588:	2000      	movs	r0, #0
 800358a:	f001 fe0d 	bl	80051a8 <ssd1306_SetCursor>
		ssd1306_WriteString(measureStatusStr, Font_6x8, White);
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <drawOnoffMeasure+0x250>)
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <drawOnoffMeasure+0x23c>)
 8003594:	2301      	movs	r3, #1
 8003596:	ca06      	ldmia	r2, {r1, r2}
 8003598:	f001 fde0 	bl	800515c <ssd1306_WriteString>
		ssd1306_SetCursor(0, 46);
 800359c:	212e      	movs	r1, #46	; 0x2e
 800359e:	2000      	movs	r0, #0
 80035a0:	f001 fe02 	bl	80051a8 <ssd1306_SetCursor>
		ssd1306_WriteString(restartDetSdString, Font_6x8, White);
 80035a4:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <drawOnoffMeasure+0x26c>)
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <drawOnoffMeasure+0x23c>)
 80035aa:	2301      	movs	r3, #1
 80035ac:	ca06      	ldmia	r2, {r1, r2}
 80035ae:	f001 fdd5 	bl	800515c <ssd1306_WriteString>
}
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	2000002c 	.word	0x2000002c
 80035c0:	20019a5c 	.word	0x20019a5c
 80035c4:	20000954 	.word	0x20000954
 80035c8:	080101ec 	.word	0x080101ec
 80035cc:	20019a54 	.word	0x20019a54
 80035d0:	2000094c 	.word	0x2000094c
 80035d4:	080101f8 	.word	0x080101f8
 80035d8:	20000000 	.word	0x20000000
 80035dc:	20000f30 	.word	0x20000f30
 80035e0:	08010208 	.word	0x08010208
 80035e4:	08010210 	.word	0x08010210
 80035e8:	20000944 	.word	0x20000944
 80035ec:	08010218 	.word	0x08010218
 80035f0:	08010228 	.word	0x08010228
 80035f4:	08010230 	.word	0x08010230
 80035f8:	20000eb8 	.word	0x20000eb8
 80035fc:	200002b8 	.word	0x200002b8
 8003600:	08010238 	.word	0x08010238
 8003604:	0801024c 	.word	0x0801024c
 8003608:	0801025c 	.word	0x0801025c
 800360c:	08010274 	.word	0x08010274
 8003610:	08010300 	.word	0x08010300
 8003614:	08010310 	.word	0x08010310
 8003618:	200002bc 	.word	0x200002bc
 800361c:	08010320 	.word	0x08010320
 8003620:	0801032c 	.word	0x0801032c

08003624 <displayMenu>:
	[DEBUG_ADC_INT] = {debugAdcInt, 0, {}},
	[DEBUG_ADC_EXT] = {debugAdcExt, 0, {}},
	[DEBUG_DS18] = {debugDs18, 0, {}},
};

void displayMenu(void) {
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8003628:	2000      	movs	r0, #0
 800362a:	f001 fc6f 	bl	8004f0c <ssd1306_Fill>
	if(screen==lastScreen) {
 800362e:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <displayMenu+0x74>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	b2da      	uxtb	r2, r3
 8003634:	4b19      	ldr	r3, [pc, #100]	; (800369c <displayMenu+0x78>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	429a      	cmp	r2, r3
 800363c:	d103      	bne.n	8003646 <displayMenu+0x22>
		ifFirstEntry=false;
 800363e:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <displayMenu+0x7c>)
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
 8003644:	e002      	b.n	800364c <displayMenu+0x28>
	}
	else {
		ifFirstEntry=true;
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <displayMenu+0x7c>)
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
	}
	menu[screen].function(&menu[screen], ifFirstEntry);
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <displayMenu+0x74>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	4619      	mov	r1, r3
 8003654:	4a13      	ldr	r2, [pc, #76]	; (80036a4 <displayMenu+0x80>)
 8003656:	460b      	mov	r3, r1
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	440b      	add	r3, r1
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4413      	add	r3, r2
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <displayMenu+0x74>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	4619      	mov	r1, r3
 800366a:	460b      	mov	r3, r1
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	440b      	add	r3, r1
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	490c      	ldr	r1, [pc, #48]	; (80036a4 <displayMenu+0x80>)
 8003674:	440b      	add	r3, r1
 8003676:	490a      	ldr	r1, [pc, #40]	; (80036a0 <displayMenu+0x7c>)
 8003678:	7809      	ldrb	r1, [r1, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	4790      	blx	r2
	lastScreen=screen;
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <displayMenu+0x74>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	b2da      	uxtb	r2, r3
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <displayMenu+0x78>)
 8003686:	701a      	strb	r2, [r3, #0]
	ssd1306_UpdateScreen();
 8003688:	f001 fc64 	bl	8004f54 <ssd1306_UpdateScreen>
	HAL_Delay(1);
 800368c:	2001      	movs	r0, #1
 800368e:	f001 fe47 	bl	8005320 <HAL_Delay>
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000f24 	.word	0x20000f24
 800369c:	20000028 	.word	0x20000028
 80036a0:	20000f31 	.word	0x20000f31
 80036a4:	200002c0 	.word	0x200002c0

080036a8 <displayInit>:
#include "ssd1306_tests.h"
#include "ssd1306.h"



void displayInit(void) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80036ac:	f001 fbc4 	bl	8004e38 <ssd1306_Init>
}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <CircularBuffer_Init>:
    int tail;
} CircularBuffer;



void CircularBuffer_Init(CircularBuffer* cb) {
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
    cb->head = 0;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80036c2:	461a      	mov	r2, r3
 80036c4:	2300      	movs	r3, #0
 80036c6:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
    cb->tail = 0;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80036d0:	461a      	mov	r2, r3
 80036d2:	2300      	movs	r3, #0
 80036d4:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <CircularBuffer_Add>:

volatile CircularBuffer cb;

void CircularBuffer_Add(CircularBuffer* cb, char* str) {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
    strncpy(cb->data[cb->head], str, STR_SIZE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80036f4:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 80036f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4413      	add	r3, r2
 8003704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003708:	6839      	ldr	r1, [r7, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f00a fb70 	bl	800ddf0 <strncpy>
    cb->head = (cb->head + 1) % BUF_SIZE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003716:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <CircularBuffer_Add+0xa0>)
 800371e:	fb83 1302 	smull	r1, r3, r3, r2
 8003722:	1159      	asrs	r1, r3, #5
 8003724:	17d3      	asrs	r3, r2, #31
 8003726:	1acb      	subs	r3, r1, r3
 8003728:	2164      	movs	r1, #100	; 0x64
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	f502 32c0 	add.w	r2, r2, #98304	; 0x18000
 8003736:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
    if (cb->head == cb->tail) {
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003740:	f8d3 26a0 	ldr.w	r2, [r3, #1696]	; 0x6a0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800374a:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 800374e:	429a      	cmp	r2, r3
 8003750:	d114      	bne.n	800377c <CircularBuffer_Add+0x98>
        cb->tail = (cb->tail + 1) % BUF_SIZE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003758:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <CircularBuffer_Add+0xa0>)
 8003760:	fb83 1302 	smull	r1, r3, r3, r2
 8003764:	1159      	asrs	r1, r3, #5
 8003766:	17d3      	asrs	r3, r2, #31
 8003768:	1acb      	subs	r3, r1, r3
 800376a:	2164      	movs	r1, #100	; 0x64
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	f502 32c0 	add.w	r2, r2, #98304	; 0x18000
 8003778:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
    }
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	51eb851f 	.word	0x51eb851f

08003788 <CircularBuffer_Read>:

char* CircularBuffer_Read(CircularBuffer* cb) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
    if (cb->head == cb->tail) {
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003796:	f8d3 26a0 	ldr.w	r2, [r3, #1696]	; 0x6a0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80037a0:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d104      	bne.n	80037b2 <CircularBuffer_Read+0x2a>
        printf("bufor jest pusty\n");
 80037a8:	4815      	ldr	r0, [pc, #84]	; (8003800 <CircularBuffer_Read+0x78>)
 80037aa:	f00a f9a9 	bl	800db00 <puts>
        return "";
 80037ae:	4b15      	ldr	r3, [pc, #84]	; (8003804 <CircularBuffer_Read+0x7c>)
 80037b0:	e021      	b.n	80037f6 <CircularBuffer_Read+0x6e>
    }
    char* str = cb->data[cb->tail];
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80037b8:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 80037bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037c0:	fb02 f303 	mul.w	r3, r2, r3
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4413      	add	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
    cb->tail = (cb->tail + 1) % BUF_SIZE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80037d0:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <CircularBuffer_Read+0x80>)
 80037d8:	fb83 1302 	smull	r1, r3, r3, r2
 80037dc:	1159      	asrs	r1, r3, #5
 80037de:	17d3      	asrs	r3, r2, #31
 80037e0:	1acb      	subs	r3, r1, r3
 80037e2:	2164      	movs	r1, #100	; 0x64
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	f502 32c0 	add.w	r2, r2, #98304	; 0x18000
 80037f0:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
    return str;
 80037f4:	68fb      	ldr	r3, [r7, #12]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	08010434 	.word	0x08010434
 8003804:	08010448 	.word	0x08010448
 8003808:	51eb851f 	.word	0x51eb851f

0800380c <sd_demount>:
bool generalErrorLED = false;
char buffer[128];
bool sdReady = false;


void sd_demount() {
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, "", 0);
 8003810:	2200      	movs	r2, #0
 8003812:	4906      	ldr	r1, [pc, #24]	; (800382c <sd_demount+0x20>)
 8003814:	2000      	movs	r0, #0
 8003816:	f008 fd13 	bl	800c240 <f_mount>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	4b04      	ldr	r3, [pc, #16]	; (8003830 <sd_demount+0x24>)
 8003820:	701a      	strb	r2, [r3, #0]
	send_uart("<drive unmounted>\n\r");
 8003822:	4804      	ldr	r0, [pc, #16]	; (8003834 <sd_demount+0x28>)
 8003824:	f7fe f8de 	bl	80019e4 <send_uart>
}
 8003828:	bf00      	nop
 800382a:	bd80      	pop	{r7, pc}
 800382c:	0801044c 	.word	0x0801044c
 8003830:	20019a54 	.word	0x20019a54
 8003834:	08010450 	.word	0x08010450

08003838 <sd_init>:

void sd_init() {
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 800383c:	2201      	movs	r2, #1
 800383e:	4912      	ldr	r1, [pc, #72]	; (8003888 <sd_init+0x50>)
 8003840:	4812      	ldr	r0, [pc, #72]	; (800388c <sd_init+0x54>)
 8003842:	f008 fcfd 	bl	800c240 <f_mount>
 8003846:	4603      	mov	r3, r0
 8003848:	461a      	mov	r2, r3
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <sd_init+0x58>)
 800384c:	701a      	strb	r2, [r3, #0]

	if(fresult==FR_OK) {
 800384e:	4b10      	ldr	r3, [pc, #64]	; (8003890 <sd_init+0x58>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <sd_init+0x34>
		sdReady = true;
 8003858:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <sd_init+0x5c>)
 800385a:	2201      	movs	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
		send_uart("SD status: FR_OK\n\r");
 800385e:	480e      	ldr	r0, [pc, #56]	; (8003898 <sd_init+0x60>)
 8003860:	f7fe f8c0 	bl	80019e4 <send_uart>
		send_uart("<DEVICE READY>\n\r");
 8003864:	480d      	ldr	r0, [pc, #52]	; (800389c <sd_init+0x64>)
 8003866:	f7fe f8bd 	bl	80019e4 <send_uart>
		sdReady = false;
		send_uart("sd status: SD ERR\n\r");
		send_uart("<DEVICE ERROR>\n\r");
		leds[1].state=true;
	}
}
 800386a:	e00b      	b.n	8003884 <sd_init+0x4c>
		sdReady = false;
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <sd_init+0x5c>)
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]
		send_uart("sd status: SD ERR\n\r");
 8003872:	480b      	ldr	r0, [pc, #44]	; (80038a0 <sd_init+0x68>)
 8003874:	f7fe f8b6 	bl	80019e4 <send_uart>
		send_uart("<DEVICE ERROR>\n\r");
 8003878:	480a      	ldr	r0, [pc, #40]	; (80038a4 <sd_init+0x6c>)
 800387a:	f7fe f8b3 	bl	80019e4 <send_uart>
		leds[1].state=true;
 800387e:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <sd_init+0x70>)
 8003880:	2201      	movs	r2, #1
 8003882:	739a      	strb	r2, [r3, #14]
}
 8003884:	bf00      	nop
 8003886:	bd80      	pop	{r7, pc}
 8003888:	08010464 	.word	0x08010464
 800388c:	200195f4 	.word	0x200195f4
 8003890:	20019a54 	.word	0x20019a54
 8003894:	20019a5c 	.word	0x20019a5c
 8003898:	08010468 	.word	0x08010468
 800389c:	0801047c 	.word	0x0801047c
 80038a0:	08010490 	.word	0x08010490
 80038a4:	080104a4 	.word	0x080104a4
 80038a8:	20000000 	.word	0x20000000

080038ac <sd_openfile>:
		}
	}
}
volatile BYTE SD_SAVEMODE;
static unsigned int file_number = 1;
FRESULT sd_openfile() {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
	char filename[12];
	if(sdReady) {
 80038b2:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <sd_openfile+0x7c>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d02b      	beq.n	8003912 <sd_openfile+0x66>
		sprintf(filename, "%03u.txt", file_number);
 80038ba:	4b1c      	ldr	r3, [pc, #112]	; (800392c <sd_openfile+0x80>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	491b      	ldr	r1, [pc, #108]	; (8003930 <sd_openfile+0x84>)
 80038c2:	4618      	mov	r0, r3
 80038c4:	f00a f958 	bl	800db78 <siprintf>
		fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_READ | FA_WRITE);
 80038c8:	1d3b      	adds	r3, r7, #4
 80038ca:	2233      	movs	r2, #51	; 0x33
 80038cc:	4619      	mov	r1, r3
 80038ce:	4819      	ldr	r0, [pc, #100]	; (8003934 <sd_openfile+0x88>)
 80038d0:	f008 fcfc 	bl	800c2cc <f_open>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	4b17      	ldr	r3, [pc, #92]	; (8003938 <sd_openfile+0x8c>)
 80038da:	701a      	strb	r2, [r3, #0]

		if(fresult!=FR_OK) {
 80038dc:	4b16      	ldr	r3, [pc, #88]	; (8003938 <sd_openfile+0x8c>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <sd_openfile+0x4e>
			sdReady=false;
 80038e6:	4b10      	ldr	r3, [pc, #64]	; (8003928 <sd_openfile+0x7c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
			send_uart("\r<cannot open file! sd_openfile>\n\r");
 80038ec:	4813      	ldr	r0, [pc, #76]	; (800393c <sd_openfile+0x90>)
 80038ee:	f7fe f879 	bl	80019e4 <send_uart>

			leds[1].state=true;
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <sd_openfile+0x94>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	739a      	strb	r2, [r3, #14]
 80038f8:	e007      	b.n	800390a <sd_openfile+0x5e>
		}
		else {
			file_number++;
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <sd_openfile+0x80>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3301      	adds	r3, #1
 8003900:	4a0a      	ldr	r2, [pc, #40]	; (800392c <sd_openfile+0x80>)
 8003902:	6013      	str	r3, [r2, #0]
			send_uart("<file opened>\n\r");
 8003904:	480f      	ldr	r0, [pc, #60]	; (8003944 <sd_openfile+0x98>)
 8003906:	f7fe f86d 	bl	80019e4 <send_uart>
			//sd_writeline("timestamp,adc_ext_ch0,adc_ext_ch1,adc_ext_ch2,adc_ext_ch3,adc_int_ch0,adc_int_ch1,adc_int_ch2,adc_int_ch3,ds18b20_1,ds18b20_2,ds18b20_3\n");
		}
		return fresult;
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <sd_openfile+0x8c>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	e005      	b.n	800391e <sd_openfile+0x72>
	}
	else {send_uart("<sdReady returned false! sd_openfile>"); return fresult; leds[1].state=true;}
 8003912:	480d      	ldr	r0, [pc, #52]	; (8003948 <sd_openfile+0x9c>)
 8003914:	f7fe f866 	bl	80019e4 <send_uart>
 8003918:	4b07      	ldr	r3, [pc, #28]	; (8003938 <sd_openfile+0x8c>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	b2db      	uxtb	r3, r3
	return FR_DISK_ERR;
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20019a5c 	.word	0x20019a5c
 800392c:	20000938 	.word	0x20000938
 8003930:	080104fc 	.word	0x080104fc
 8003934:	20019824 	.word	0x20019824
 8003938:	20019a54 	.word	0x20019a54
 800393c:	08010508 	.word	0x08010508
 8003940:	20000000 	.word	0x20000000
 8003944:	0801052c 	.word	0x0801052c
 8003948:	0801053c 	.word	0x0801053c

0800394c <sd_writeline>:
static unsigned int line_count = 0;
FRESULT sd_writeline(const char* sdWriteBuff) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	if(sdReady) {
 8003954:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <sd_writeline+0x74>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d025      	beq.n	80039a8 <sd_writeline+0x5c>
			//f_puts(sdWriteBuff, &fil);
			if(f_puts(sdWriteBuff, &fil)<0) {
 800395c:	4919      	ldr	r1, [pc, #100]	; (80039c4 <sd_writeline+0x78>)
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f009 fa45 	bl	800cdee <f_puts>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	da01      	bge.n	800396e <sd_writeline+0x22>
				return FR_DISK_ERR;
 800396a:	2301      	movs	r3, #1
 800396c:	e023      	b.n	80039b6 <sd_writeline+0x6a>
				send_uart("f_puts error <0 \n\r");
				leds[1].state=true;
			}
			line_count++;
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <sd_writeline+0x7c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <sd_writeline+0x7c>)
 8003976:	6013      	str	r3, [r2, #0]
			if(line_count>=20000) {
 8003978:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <sd_writeline+0x7c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003980:	4293      	cmp	r3, r2
 8003982:	d909      	bls.n	8003998 <sd_writeline+0x4c>
				line_count=0;
 8003984:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <sd_writeline+0x7c>)
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
				sd_closefile();
 800398a:	f000 f827 	bl	80039dc <sd_closefile>
				sd_openfile();
 800398e:	f7ff ff8d 	bl	80038ac <sd_openfile>
				sd_writeline("timestamp,adc_ext_ch0,adc_ext_ch1,adc_ext_ch2,adc_ext_ch3,adc_int_ch0,adc_int_ch1,adc_int_ch2,adc_int_ch3,ds18b20_1,ds18b20_2,ds18b20_3\n");
 8003992:	480e      	ldr	r0, [pc, #56]	; (80039cc <sd_writeline+0x80>)
 8003994:	f7ff ffda 	bl	800394c <sd_writeline>
			}

			f_sync(&fil);
 8003998:	480a      	ldr	r0, [pc, #40]	; (80039c4 <sd_writeline+0x78>)
 800399a:	f009 f909 	bl	800cbb0 <f_sync>
			send_uart("\r<line written>\n\r");
 800399e:	480c      	ldr	r0, [pc, #48]	; (80039d0 <sd_writeline+0x84>)
 80039a0:	f7fe f820 	bl	80019e4 <send_uart>
			return FR_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e006      	b.n	80039b6 <sd_writeline+0x6a>
		}
	else {send_uart("<sd_writeline: cannot write line>");leds[1].state=true;}
 80039a8:	480a      	ldr	r0, [pc, #40]	; (80039d4 <sd_writeline+0x88>)
 80039aa:	f7fe f81b 	bl	80019e4 <send_uart>
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <sd_writeline+0x8c>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	739a      	strb	r2, [r3, #14]
	return FR_DISK_ERR;
 80039b4:	2301      	movs	r3, #1
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20019a5c 	.word	0x20019a5c
 80039c4:	20019824 	.word	0x20019824
 80039c8:	20019a60 	.word	0x20019a60
 80039cc:	08010564 	.word	0x08010564
 80039d0:	080105f0 	.word	0x080105f0
 80039d4:	08010604 	.word	0x08010604
 80039d8:	20000000 	.word	0x20000000

080039dc <sd_closefile>:


void sd_closefile(void) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
	if(sdReady) {
 80039e0:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <sd_closefile+0x24>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d009      	beq.n	80039fc <sd_closefile+0x20>
		fresult = f_close(&fil);
 80039e8:	4806      	ldr	r0, [pc, #24]	; (8003a04 <sd_closefile+0x28>)
 80039ea:	f009 f95f 	bl	800ccac <f_close>
 80039ee:	4603      	mov	r3, r0
 80039f0:	461a      	mov	r2, r3
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <sd_closefile+0x2c>)
 80039f4:	701a      	strb	r2, [r3, #0]
		send_uart("\r<file closed>\n\r");
 80039f6:	4805      	ldr	r0, [pc, #20]	; (8003a0c <sd_closefile+0x30>)
 80039f8:	f7fd fff4 	bl	80019e4 <send_uart>
	}
}
 80039fc:	bf00      	nop
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20019a5c 	.word	0x20019a5c
 8003a04:	20019824 	.word	0x20019824
 8003a08:	20019a54 	.word	0x20019a54
 8003a0c:	08010628 	.word	0x08010628

08003a10 <getFresultString>:

const char* getFresultString(FRESULT fr)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]
    switch (fr)
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	2b13      	cmp	r3, #19
 8003a1e:	d853      	bhi.n	8003ac8 <getFresultString+0xb8>
 8003a20:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <getFresultString+0x18>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a79 	.word	0x08003a79
 8003a2c:	08003a7d 	.word	0x08003a7d
 8003a30:	08003a81 	.word	0x08003a81
 8003a34:	08003a85 	.word	0x08003a85
 8003a38:	08003a89 	.word	0x08003a89
 8003a3c:	08003a8d 	.word	0x08003a8d
 8003a40:	08003a91 	.word	0x08003a91
 8003a44:	08003a95 	.word	0x08003a95
 8003a48:	08003a99 	.word	0x08003a99
 8003a4c:	08003a9d 	.word	0x08003a9d
 8003a50:	08003aa1 	.word	0x08003aa1
 8003a54:	08003aa5 	.word	0x08003aa5
 8003a58:	08003aa9 	.word	0x08003aa9
 8003a5c:	08003aad 	.word	0x08003aad
 8003a60:	08003ab1 	.word	0x08003ab1
 8003a64:	08003ab5 	.word	0x08003ab5
 8003a68:	08003ab9 	.word	0x08003ab9
 8003a6c:	08003abd 	.word	0x08003abd
 8003a70:	08003ac1 	.word	0x08003ac1
 8003a74:	08003ac5 	.word	0x08003ac5
    {
        case FR_OK:                   return "FR_OK";
 8003a78:	4b17      	ldr	r3, [pc, #92]	; (8003ad8 <getFresultString+0xc8>)
 8003a7a:	e026      	b.n	8003aca <getFresultString+0xba>
        case FR_DISK_ERR:             return "FR_DISK_ERR";
 8003a7c:	4b17      	ldr	r3, [pc, #92]	; (8003adc <getFresultString+0xcc>)
 8003a7e:	e024      	b.n	8003aca <getFresultString+0xba>
        case FR_INT_ERR:              return "FR_INT_ERR";
 8003a80:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <getFresultString+0xd0>)
 8003a82:	e022      	b.n	8003aca <getFresultString+0xba>
        case FR_NOT_READY:            return "FR_NOT_READY";
 8003a84:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <getFresultString+0xd4>)
 8003a86:	e020      	b.n	8003aca <getFresultString+0xba>
        case FR_NO_FILE:              return "FR_NO_FILE";
 8003a88:	4b17      	ldr	r3, [pc, #92]	; (8003ae8 <getFresultString+0xd8>)
 8003a8a:	e01e      	b.n	8003aca <getFresultString+0xba>
        case FR_NO_PATH:              return "FR_NO_PATH";
 8003a8c:	4b17      	ldr	r3, [pc, #92]	; (8003aec <getFresultString+0xdc>)
 8003a8e:	e01c      	b.n	8003aca <getFresultString+0xba>
        case FR_INVALID_NAME:         return "FR_INVALID_NAME";
 8003a90:	4b17      	ldr	r3, [pc, #92]	; (8003af0 <getFresultString+0xe0>)
 8003a92:	e01a      	b.n	8003aca <getFresultString+0xba>
        case FR_DENIED:               return "FR_DENIED";
 8003a94:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <getFresultString+0xe4>)
 8003a96:	e018      	b.n	8003aca <getFresultString+0xba>
        case FR_EXIST:                return "FR_EXIST";
 8003a98:	4b17      	ldr	r3, [pc, #92]	; (8003af8 <getFresultString+0xe8>)
 8003a9a:	e016      	b.n	8003aca <getFresultString+0xba>
        case FR_INVALID_OBJECT:       return "FR_INVALID_OBJECT";
 8003a9c:	4b17      	ldr	r3, [pc, #92]	; (8003afc <getFresultString+0xec>)
 8003a9e:	e014      	b.n	8003aca <getFresultString+0xba>
        case FR_WRITE_PROTECTED:      return "FR_WRITE_PROTECTED";
 8003aa0:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <getFresultString+0xf0>)
 8003aa2:	e012      	b.n	8003aca <getFresultString+0xba>
        case FR_INVALID_DRIVE:        return "FR_INVALID_DRIVE";
 8003aa4:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <getFresultString+0xf4>)
 8003aa6:	e010      	b.n	8003aca <getFresultString+0xba>
        case FR_NOT_ENABLED:          return "FR_NOT_ENABLED";
 8003aa8:	4b17      	ldr	r3, [pc, #92]	; (8003b08 <getFresultString+0xf8>)
 8003aaa:	e00e      	b.n	8003aca <getFresultString+0xba>
        case FR_NO_FILESYSTEM:        return "FR_NO_FILESYSTEM";
 8003aac:	4b17      	ldr	r3, [pc, #92]	; (8003b0c <getFresultString+0xfc>)
 8003aae:	e00c      	b.n	8003aca <getFresultString+0xba>
        case FR_MKFS_ABORTED:         return "FR_MKFS_ABORTED";
 8003ab0:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <getFresultString+0x100>)
 8003ab2:	e00a      	b.n	8003aca <getFresultString+0xba>
        case FR_TIMEOUT:              return "FR_TIMEOUT";
 8003ab4:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <getFresultString+0x104>)
 8003ab6:	e008      	b.n	8003aca <getFresultString+0xba>
        case FR_LOCKED:               return "FR_LOCKED";
 8003ab8:	4b17      	ldr	r3, [pc, #92]	; (8003b18 <getFresultString+0x108>)
 8003aba:	e006      	b.n	8003aca <getFresultString+0xba>
        case FR_NOT_ENOUGH_CORE:      return "FR_NOT_ENOUGH_CORE";
 8003abc:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <getFresultString+0x10c>)
 8003abe:	e004      	b.n	8003aca <getFresultString+0xba>
        case FR_TOO_MANY_OPEN_FILES:  return "FR_TOO_MANY_OPEN_FILES";
 8003ac0:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <getFresultString+0x110>)
 8003ac2:	e002      	b.n	8003aca <getFresultString+0xba>
        case FR_INVALID_PARAMETER:    return "FR_INVALID_PARAMETER";
 8003ac4:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <getFresultString+0x114>)
 8003ac6:	e000      	b.n	8003aca <getFresultString+0xba>
        default:                      return "Unknown Error";
 8003ac8:	4b17      	ldr	r3, [pc, #92]	; (8003b28 <getFresultString+0x118>)
    }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	0801063c 	.word	0x0801063c
 8003adc:	08010644 	.word	0x08010644
 8003ae0:	08010650 	.word	0x08010650
 8003ae4:	0801065c 	.word	0x0801065c
 8003ae8:	0801066c 	.word	0x0801066c
 8003aec:	08010678 	.word	0x08010678
 8003af0:	08010684 	.word	0x08010684
 8003af4:	08010694 	.word	0x08010694
 8003af8:	080106a0 	.word	0x080106a0
 8003afc:	080106ac 	.word	0x080106ac
 8003b00:	080106c0 	.word	0x080106c0
 8003b04:	080106d4 	.word	0x080106d4
 8003b08:	080106e8 	.word	0x080106e8
 8003b0c:	080106f8 	.word	0x080106f8
 8003b10:	0801070c 	.word	0x0801070c
 8003b14:	0801071c 	.word	0x0801071c
 8003b18:	08010728 	.word	0x08010728
 8003b1c:	08010734 	.word	0x08010734
 8003b20:	08010748 	.word	0x08010748
 8003b24:	08010760 	.word	0x08010760
 8003b28:	08010778 	.word	0x08010778

08003b2c <parseAddress>:

void parseAddress(const char *addressString, uint8_t *addressArray) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
    char *token = strtok((char *)addressString, "{}, ");
 8003b36:	4911      	ldr	r1, [pc, #68]	; (8003b7c <parseAddress+0x50>)
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f00a f96d 	bl	800de18 <strtok>
 8003b3e:	60f8      	str	r0, [r7, #12]
    int i = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60bb      	str	r3, [r7, #8]
    while (token != NULL) {
 8003b44:	e012      	b.n	8003b6c <parseAddress+0x40>
        addressArray[i++] = (uint8_t)strtol(token, NULL, 16);
 8003b46:	2210      	movs	r2, #16
 8003b48:	2100      	movs	r1, #0
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f009 fa52 	bl	800cff4 <strtol>
 8003b50:	4601      	mov	r1, r0
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	60ba      	str	r2, [r7, #8]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	b2ca      	uxtb	r2, r1
 8003b60:	701a      	strb	r2, [r3, #0]
        token = strtok(NULL, "{}, ");
 8003b62:	4906      	ldr	r1, [pc, #24]	; (8003b7c <parseAddress+0x50>)
 8003b64:	2000      	movs	r0, #0
 8003b66:	f00a f957 	bl	800de18 <strtok>
 8003b6a:	60f8      	str	r0, [r7, #12]
    while (token != NULL) {
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1e9      	bne.n	8003b46 <parseAddress+0x1a>
    }
}
 8003b72:	bf00      	nop
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	08010788 	.word	0x08010788

08003b80 <readAddressFromFile>:
#define MAX_FILE_SIZE 70
void readAddressFromFile(const char *filename, uint8_t *addressArray) {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b094      	sub	sp, #80	; 0x50
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
    char fileBuffer[MAX_FILE_SIZE];
    memset(fileBuffer, 0, MAX_FILE_SIZE);
 8003b8a:	f107 0308 	add.w	r3, r7, #8
 8003b8e:	2246      	movs	r2, #70	; 0x46
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f00a f902 	bl	800dd9c <memset>
    fresult = f_open(&fil, filename, FA_READ);
 8003b98:	2201      	movs	r2, #1
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4811      	ldr	r0, [pc, #68]	; (8003be4 <readAddressFromFile+0x64>)
 8003b9e:	f008 fb95 	bl	800c2cc <f_open>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <readAddressFromFile+0x68>)
 8003ba8:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK) {
 8003baa:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <readAddressFromFile+0x68>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d112      	bne.n	8003bda <readAddressFromFile+0x5a>
        f_read(&fil, fileBuffer, MAX_FILE_SIZE, &br);
 8003bb4:	f107 0108 	add.w	r1, r7, #8
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <readAddressFromFile+0x6c>)
 8003bba:	2246      	movs	r2, #70	; 0x46
 8003bbc:	4809      	ldr	r0, [pc, #36]	; (8003be4 <readAddressFromFile+0x64>)
 8003bbe:	f008 fd43 	bl	800c648 <f_read>
        f_sync(&fil);
 8003bc2:	4808      	ldr	r0, [pc, #32]	; (8003be4 <readAddressFromFile+0x64>)
 8003bc4:	f008 fff4 	bl	800cbb0 <f_sync>
        f_close(&fil);
 8003bc8:	4806      	ldr	r0, [pc, #24]	; (8003be4 <readAddressFromFile+0x64>)
 8003bca:	f009 f86f 	bl	800ccac <f_close>
        parseAddress(fileBuffer, addressArray);
 8003bce:	f107 0308 	add.w	r3, r7, #8
 8003bd2:	6839      	ldr	r1, [r7, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ffa9 	bl	8003b2c <parseAddress>
    }
}
 8003bda:	bf00      	nop
 8003bdc:	3750      	adds	r7, #80	; 0x50
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20019824 	.word	0x20019824
 8003be8:	20019a54 	.word	0x20019a54
 8003bec:	20019a58 	.word	0x20019a58

08003bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <HAL_MspInit+0x4c>)
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	4a0f      	ldr	r2, [pc, #60]	; (8003c3c <HAL_MspInit+0x4c>)
 8003c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c04:	6453      	str	r3, [r2, #68]	; 0x44
 8003c06:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <HAL_MspInit+0x4c>)
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	603b      	str	r3, [r7, #0]
 8003c16:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <HAL_MspInit+0x4c>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	4a08      	ldr	r2, [pc, #32]	; (8003c3c <HAL_MspInit+0x4c>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c20:	6413      	str	r3, [r2, #64]	; 0x40
 8003c22:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <HAL_MspInit+0x4c>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40023800 	.word	0x40023800

08003c40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08a      	sub	sp, #40	; 0x28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c48:	f107 0314 	add.w	r3, r7, #20
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	605a      	str	r2, [r3, #4]
 8003c52:	609a      	str	r2, [r3, #8]
 8003c54:	60da      	str	r2, [r3, #12]
 8003c56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a17      	ldr	r2, [pc, #92]	; (8003cbc <HAL_ADC_MspInit+0x7c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d127      	bne.n	8003cb2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	4b16      	ldr	r3, [pc, #88]	; (8003cc0 <HAL_ADC_MspInit+0x80>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	4a15      	ldr	r2, [pc, #84]	; (8003cc0 <HAL_ADC_MspInit+0x80>)
 8003c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c70:	6453      	str	r3, [r2, #68]	; 0x44
 8003c72:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <HAL_ADC_MspInit+0x80>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <HAL_ADC_MspInit+0x80>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	4a0e      	ldr	r2, [pc, #56]	; (8003cc0 <HAL_ADC_MspInit+0x80>)
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8e:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <HAL_ADC_MspInit+0x80>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN0_INT_Pin|ADC1_IN1_INT_Pin|ADC1_IN2_INT_Pin|ADC1_IN3_INT_Pin;
 8003c9a:	230f      	movs	r3, #15
 8003c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca6:	f107 0314 	add.w	r3, r7, #20
 8003caa:	4619      	mov	r1, r3
 8003cac:	4805      	ldr	r0, [pc, #20]	; (8003cc4 <HAL_ADC_MspInit+0x84>)
 8003cae:	f002 f82b 	bl	8005d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003cb2:	bf00      	nop
 8003cb4:	3728      	adds	r7, #40	; 0x28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40012000 	.word	0x40012000
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	40020000 	.word	0x40020000

08003cc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08c      	sub	sp, #48	; 0x30
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd0:	f107 031c 	add.w	r3, r7, #28
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a3b      	ldr	r2, [pc, #236]	; (8003dd4 <HAL_I2C_MspInit+0x10c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d12c      	bne.n	8003d44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	4b3a      	ldr	r3, [pc, #232]	; (8003dd8 <HAL_I2C_MspInit+0x110>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	4a39      	ldr	r2, [pc, #228]	; (8003dd8 <HAL_I2C_MspInit+0x110>)
 8003cf4:	f043 0302 	orr.w	r3, r3, #2
 8003cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfa:	4b37      	ldr	r3, [pc, #220]	; (8003dd8 <HAL_I2C_MspInit+0x110>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	61bb      	str	r3, [r7, #24]
 8003d04:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
 8003d06:	23c0      	movs	r3, #192	; 0xc0
 8003d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d0a:	2312      	movs	r3, #18
 8003d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d12:	2303      	movs	r3, #3
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d16:	2304      	movs	r3, #4
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d1a:	f107 031c 	add.w	r3, r7, #28
 8003d1e:	4619      	mov	r1, r3
 8003d20:	482e      	ldr	r0, [pc, #184]	; (8003ddc <HAL_I2C_MspInit+0x114>)
 8003d22:	f001 fff1 	bl	8005d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <HAL_I2C_MspInit+0x110>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	4a2a      	ldr	r2, [pc, #168]	; (8003dd8 <HAL_I2C_MspInit+0x110>)
 8003d30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d34:	6413      	str	r3, [r2, #64]	; 0x40
 8003d36:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <HAL_I2C_MspInit+0x110>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003d42:	e042      	b.n	8003dca <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a25      	ldr	r2, [pc, #148]	; (8003de0 <HAL_I2C_MspInit+0x118>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d13d      	bne.n	8003dca <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <HAL_I2C_MspInit+0x110>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	4a20      	ldr	r2, [pc, #128]	; (8003dd8 <HAL_I2C_MspInit+0x110>)
 8003d58:	f043 0302 	orr.w	r3, r3, #2
 8003d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <HAL_I2C_MspInit+0x110>)
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SCL_ADS_Pin;
 8003d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d70:	2312      	movs	r3, #18
 8003d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCL_ADS_GPIO_Port, &GPIO_InitStruct);
 8003d80:	f107 031c 	add.w	r3, r7, #28
 8003d84:	4619      	mov	r1, r3
 8003d86:	4815      	ldr	r0, [pc, #84]	; (8003ddc <HAL_I2C_MspInit+0x114>)
 8003d88:	f001 ffbe 	bl	8005d08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDA_ADS_Pin;
 8003d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d92:	2312      	movs	r3, #18
 8003d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003d9e:	2309      	movs	r3, #9
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDA_ADS_GPIO_Port, &GPIO_InitStruct);
 8003da2:	f107 031c 	add.w	r3, r7, #28
 8003da6:	4619      	mov	r1, r3
 8003da8:	480c      	ldr	r0, [pc, #48]	; (8003ddc <HAL_I2C_MspInit+0x114>)
 8003daa:	f001 ffad 	bl	8005d08 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_I2C_MspInit+0x110>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	4a08      	ldr	r2, [pc, #32]	; (8003dd8 <HAL_I2C_MspInit+0x110>)
 8003db8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_I2C_MspInit+0x110>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
}
 8003dca:	bf00      	nop
 8003dcc:	3730      	adds	r7, #48	; 0x30
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40005400 	.word	0x40005400
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40020400 	.word	0x40020400
 8003de0:	40005800 	.word	0x40005800

08003de4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dec:	f107 0308 	add.w	r3, r7, #8
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	60da      	str	r2, [r3, #12]
 8003dfa:	611a      	str	r2, [r3, #16]
 8003dfc:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a0c      	ldr	r2, [pc, #48]	; (8003e34 <HAL_RTC_MspInit+0x50>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d111      	bne.n	8003e2c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e10:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e12:	f107 0308 	add.w	r3, r7, #8
 8003e16:	4618      	mov	r0, r3
 8003e18:	f003 fec2 	bl	8007ba0 <HAL_RCCEx_PeriphCLKConfig>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003e22:	f7fe fc27 	bl	8002674 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003e26:	4b04      	ldr	r3, [pc, #16]	; (8003e38 <HAL_RTC_MspInit+0x54>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003e2c:	bf00      	nop
 8003e2e:	3720      	adds	r7, #32
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40002800 	.word	0x40002800
 8003e38:	42470e3c 	.word	0x42470e3c

08003e3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08a      	sub	sp, #40	; 0x28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e44:	f107 0314 	add.w	r3, r7, #20
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a21      	ldr	r2, [pc, #132]	; (8003ee0 <HAL_SPI_MspInit+0xa4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d13b      	bne.n	8003ed6 <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_SPI_MspInit+0xa8>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <HAL_SPI_MspInit+0xa8>)
 8003e68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <HAL_SPI_MspInit+0xa8>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_SPI_MspInit+0xa8>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <HAL_SPI_MspInit+0xa8>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <HAL_SPI_MspInit+0xa8>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_SD_Pin;
 8003e96:	2320      	movs	r3, #32
 8003e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ea6:	2305      	movs	r3, #5
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCK_SD_GPIO_Port, &GPIO_InitStruct);
 8003eaa:	f107 0314 	add.w	r3, r7, #20
 8003eae:	4619      	mov	r1, r3
 8003eb0:	480d      	ldr	r0, [pc, #52]	; (8003ee8 <HAL_SPI_MspInit+0xac>)
 8003eb2:	f001 ff29 	bl	8005d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_SD_Pin|MOSI_SD_Pin;
 8003eb6:	23c0      	movs	r3, #192	; 0xc0
 8003eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ec6:	2305      	movs	r3, #5
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eca:	f107 0314 	add.w	r3, r7, #20
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4805      	ldr	r0, [pc, #20]	; (8003ee8 <HAL_SPI_MspInit+0xac>)
 8003ed2:	f001 ff19 	bl	8005d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003ed6:	bf00      	nop
 8003ed8:	3728      	adds	r7, #40	; 0x28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40013000 	.word	0x40013000
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40020000 	.word	0x40020000

08003eec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef4:	f107 0314 	add.w	r3, r7, #20
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a21      	ldr	r2, [pc, #132]	; (8003f90 <HAL_TIM_Encoder_MspInit+0xa4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d13c      	bne.n	8003f88 <HAL_TIM_Encoder_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <HAL_TIM_Encoder_MspInit+0xa8>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	4a1f      	ldr	r2, [pc, #124]	; (8003f94 <HAL_TIM_Encoder_MspInit+0xa8>)
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f1e:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <HAL_TIM_Encoder_MspInit+0xa8>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <HAL_TIM_Encoder_MspInit+0xa8>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <HAL_TIM_Encoder_MspInit+0xa8>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3a:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <HAL_TIM_Encoder_MspInit+0xa8>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8003f46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f54:	2300      	movs	r3, #0
 8003f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f5c:	f107 0314 	add.w	r3, r7, #20
 8003f60:	4619      	mov	r1, r3
 8003f62:	480d      	ldr	r0, [pc, #52]	; (8003f98 <HAL_TIM_Encoder_MspInit+0xac>)
 8003f64:	f001 fed0 	bl	8005d08 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	2019      	movs	r0, #25
 8003f6e:	f001 fe94 	bl	8005c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003f72:	2019      	movs	r0, #25
 8003f74:	f001 fead 	bl	8005cd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	201a      	movs	r0, #26
 8003f7e:	f001 fe8c 	bl	8005c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003f82:	201a      	movs	r0, #26
 8003f84:	f001 fea5 	bl	8005cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003f88:	bf00      	nop
 8003f8a:	3728      	adds	r7, #40	; 0x28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40010000 	.word	0x40010000
 8003f94:	40023800 	.word	0x40023800
 8003f98:	40020000 	.word	0x40020000

08003f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fac:	d116      	bne.n	8003fdc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	4b28      	ldr	r3, [pc, #160]	; (8004054 <HAL_TIM_Base_MspInit+0xb8>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	4a27      	ldr	r2, [pc, #156]	; (8004054 <HAL_TIM_Base_MspInit+0xb8>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fbe:	4b25      	ldr	r3, [pc, #148]	; (8004054 <HAL_TIM_Base_MspInit+0xb8>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2100      	movs	r1, #0
 8003fce:	201c      	movs	r0, #28
 8003fd0:	f001 fe63 	bl	8005c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fd4:	201c      	movs	r0, #28
 8003fd6:	f001 fe7c 	bl	8005cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003fda:	e036      	b.n	800404a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1d      	ldr	r2, [pc, #116]	; (8004058 <HAL_TIM_Base_MspInit+0xbc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d116      	bne.n	8004014 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <HAL_TIM_Base_MspInit+0xb8>)
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	4a19      	ldr	r2, [pc, #100]	; (8004054 <HAL_TIM_Base_MspInit+0xb8>)
 8003ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff6:	4b17      	ldr	r3, [pc, #92]	; (8004054 <HAL_TIM_Base_MspInit+0xb8>)
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004002:	2200      	movs	r2, #0
 8004004:	2100      	movs	r1, #0
 8004006:	2019      	movs	r0, #25
 8004008:	f001 fe47 	bl	8005c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800400c:	2019      	movs	r0, #25
 800400e:	f001 fe60 	bl	8005cd2 <HAL_NVIC_EnableIRQ>
}
 8004012:	e01a      	b.n	800404a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a10      	ldr	r2, [pc, #64]	; (800405c <HAL_TIM_Base_MspInit+0xc0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d115      	bne.n	800404a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <HAL_TIM_Base_MspInit+0xb8>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	4a0b      	ldr	r2, [pc, #44]	; (8004054 <HAL_TIM_Base_MspInit+0xb8>)
 8004028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800402c:	6453      	str	r3, [r2, #68]	; 0x44
 800402e:	4b09      	ldr	r3, [pc, #36]	; (8004054 <HAL_TIM_Base_MspInit+0xb8>)
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800403a:	2200      	movs	r2, #0
 800403c:	2100      	movs	r1, #0
 800403e:	201a      	movs	r0, #26
 8004040:	f001 fe2b 	bl	8005c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004044:	201a      	movs	r0, #26
 8004046:	f001 fe44 	bl	8005cd2 <HAL_NVIC_EnableIRQ>
}
 800404a:	bf00      	nop
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40023800 	.word	0x40023800
 8004058:	40014400 	.word	0x40014400
 800405c:	40014800 	.word	0x40014800

08004060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004068:	f107 0314 	add.w	r3, r7, #20
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	60da      	str	r2, [r3, #12]
 8004076:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <HAL_UART_MspInit+0x84>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d12c      	bne.n	80040dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <HAL_UART_MspInit+0x88>)
 8004088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408a:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <HAL_UART_MspInit+0x88>)
 800408c:	f043 0320 	orr.w	r3, r3, #32
 8004090:	6453      	str	r3, [r2, #68]	; 0x44
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <HAL_UART_MspInit+0x88>)
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <HAL_UART_MspInit+0x88>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	4a10      	ldr	r2, [pc, #64]	; (80040e8 <HAL_UART_MspInit+0x88>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6313      	str	r3, [r2, #48]	; 0x30
 80040ae:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <HAL_UART_MspInit+0x88>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80040ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80040be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c0:	2302      	movs	r3, #2
 80040c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c8:	2303      	movs	r3, #3
 80040ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80040cc:	2308      	movs	r3, #8
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	4619      	mov	r1, r3
 80040d6:	4805      	ldr	r0, [pc, #20]	; (80040ec <HAL_UART_MspInit+0x8c>)
 80040d8:	f001 fe16 	bl	8005d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80040dc:	bf00      	nop
 80040de:	3728      	adds	r7, #40	; 0x28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40011400 	.word	0x40011400
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40020000 	.word	0x40020000

080040f0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <SDTimer_Handler+0x40>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d006      	beq.n	800410c <SDTimer_Handler+0x1c>
    Timer1--;
 80040fe:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <SDTimer_Handler+0x40>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b2da      	uxtb	r2, r3
 8004108:	4b09      	ldr	r3, [pc, #36]	; (8004130 <SDTimer_Handler+0x40>)
 800410a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <SDTimer_Handler+0x44>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d006      	beq.n	8004124 <SDTimer_Handler+0x34>
    Timer2--;
 8004116:	4b07      	ldr	r3, [pc, #28]	; (8004134 <SDTimer_Handler+0x44>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b2da      	uxtb	r2, r3
 8004120:	4b04      	ldr	r3, [pc, #16]	; (8004134 <SDTimer_Handler+0x44>)
 8004122:	701a      	strb	r2, [r3, #0]
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20019a65 	.word	0x20019a65
 8004134:	20019a66 	.word	0x20019a66

08004138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800413c:	e7fe      	b.n	800413c <NMI_Handler+0x4>

0800413e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800413e:	b480      	push	{r7}
 8004140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004142:	e7fe      	b.n	8004142 <HardFault_Handler+0x4>

08004144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004148:	e7fe      	b.n	8004148 <MemManage_Handler+0x4>

0800414a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800414a:	b480      	push	{r7}
 800414c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800414e:	e7fe      	b.n	800414e <BusFault_Handler+0x4>

08004150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004154:	e7fe      	b.n	8004154 <UsageFault_Handler+0x4>

08004156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004156:	b480      	push	{r7}
 8004158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800415a:	bf00      	nop
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004172:	b480      	push	{r7}
 8004174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <SysTick_Handler+0x30>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	3301      	adds	r3, #1
 800418c:	b2da      	uxtb	r2, r3
 800418e:	4b08      	ldr	r3, [pc, #32]	; (80041b0 <SysTick_Handler+0x30>)
 8004190:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <SysTick_Handler+0x30>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b09      	cmp	r3, #9
 800419a:	d904      	bls.n	80041a6 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 800419c:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <SysTick_Handler+0x30>)
 800419e:	2200      	movs	r2, #0
 80041a0:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80041a2:	f7ff ffa5 	bl	80040f0 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041a6:	f001 f89b 	bl	80052e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041aa:	bf00      	nop
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20019a64 	.word	0x20019a64

080041b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 80041b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80041bc:	f001 ff5a 	bl	8006074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80041c0:	bf00      	nop
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041c8:	4803      	ldr	r0, [pc, #12]	; (80041d8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80041ca:	f005 f8ef 	bl	80093ac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80041ce:	4803      	ldr	r0, [pc, #12]	; (80041dc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80041d0:	f005 f8ec 	bl	80093ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80041d4:	bf00      	nop
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000d34 	.word	0x20000d34
 80041dc:	20000dc4 	.word	0x20000dc4

080041e0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041e4:	4803      	ldr	r0, [pc, #12]	; (80041f4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80041e6:	f005 f8e1 	bl	80093ac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80041ea:	4803      	ldr	r0, [pc, #12]	; (80041f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80041ec:	f005 f8de 	bl	80093ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80041f0:	bf00      	nop
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000d34 	.word	0x20000d34
 80041f8:	20000e0c 	.word	0x20000e0c

080041fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004200:	4802      	ldr	r0, [pc, #8]	; (800420c <TIM2_IRQHandler+0x10>)
 8004202:	f005 f8d3 	bl	80093ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000d7c 	.word	0x20000d7c

08004210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return 1;
 8004214:	2301      	movs	r3, #1
}
 8004216:	4618      	mov	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <_kill>:

int _kill(int pid, int sig)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800422a:	f009 fe9b 	bl	800df64 <__errno>
 800422e:	4603      	mov	r3, r0
 8004230:	2216      	movs	r2, #22
 8004232:	601a      	str	r2, [r3, #0]
  return -1;
 8004234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <_exit>:

void _exit (int status)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004248:	f04f 31ff 	mov.w	r1, #4294967295
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ffe7 	bl	8004220 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004252:	e7fe      	b.n	8004252 <_exit+0x12>

08004254 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e00a      	b.n	800427c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004266:	f3af 8000 	nop.w
 800426a:	4601      	mov	r1, r0
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	60ba      	str	r2, [r7, #8]
 8004272:	b2ca      	uxtb	r2, r1
 8004274:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	3301      	adds	r3, #1
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	dbf0      	blt.n	8004266 <_read+0x12>
  }

  return len;
 8004284:	687b      	ldr	r3, [r7, #4]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b086      	sub	sp, #24
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	e009      	b.n	80042b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	60ba      	str	r2, [r7, #8]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	3301      	adds	r3, #1
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	dbf1      	blt.n	80042a0 <_write+0x12>
  }
  return len;
 80042bc:	687b      	ldr	r3, [r7, #4]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <_close>:

int _close(int file)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042ee:	605a      	str	r2, [r3, #4]
  return 0;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <_isatty>:

int _isatty(int file)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004306:	2301      	movs	r3, #1
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004338:	4a14      	ldr	r2, [pc, #80]	; (800438c <_sbrk+0x5c>)
 800433a:	4b15      	ldr	r3, [pc, #84]	; (8004390 <_sbrk+0x60>)
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004344:	4b13      	ldr	r3, [pc, #76]	; (8004394 <_sbrk+0x64>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <_sbrk+0x64>)
 800434e:	4a12      	ldr	r2, [pc, #72]	; (8004398 <_sbrk+0x68>)
 8004350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004352:	4b10      	ldr	r3, [pc, #64]	; (8004394 <_sbrk+0x64>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4413      	add	r3, r2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	429a      	cmp	r2, r3
 800435e:	d207      	bcs.n	8004370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004360:	f009 fe00 	bl	800df64 <__errno>
 8004364:	4603      	mov	r3, r0
 8004366:	220c      	movs	r2, #12
 8004368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800436a:	f04f 33ff 	mov.w	r3, #4294967295
 800436e:	e009      	b.n	8004384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004370:	4b08      	ldr	r3, [pc, #32]	; (8004394 <_sbrk+0x64>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004376:	4b07      	ldr	r3, [pc, #28]	; (8004394 <_sbrk+0x64>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4413      	add	r3, r2
 800437e:	4a05      	ldr	r2, [pc, #20]	; (8004394 <_sbrk+0x64>)
 8004380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004382:	68fb      	ldr	r3, [r7, #12]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20020000 	.word	0x20020000
 8004390:	00000400 	.word	0x00000400
 8004394:	20019a68 	.word	0x20019a68
 8004398:	2001a010 	.word	0x2001a010

0800439c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <SystemInit+0x20>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a6:	4a05      	ldr	r2, [pc, #20]	; (80043bc <SystemInit+0x20>)
 80043a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80043c8:	f000 ff9e 	bl	8005308 <HAL_GetTick>
 80043cc:	4603      	mov	r3, r0
 80043ce:	4a04      	ldr	r2, [pc, #16]	; (80043e0 <SPI_Timer_On+0x20>)
 80043d0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80043d2:	4a04      	ldr	r2, [pc, #16]	; (80043e4 <SPI_Timer_On+0x24>)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6013      	str	r3, [r2, #0]
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20019a70 	.word	0x20019a70
 80043e4:	20019a74 	.word	0x20019a74

080043e8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80043ec:	f000 ff8c 	bl	8005308 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <SPI_Timer_Status+0x24>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	1ad2      	subs	r2, r2, r3
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <SPI_Timer_Status+0x28>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	bf34      	ite	cc
 8004400:	2301      	movcc	r3, #1
 8004402:	2300      	movcs	r3, #0
 8004404:	b2db      	uxtb	r3, r3
}
 8004406:	4618      	mov	r0, r3
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20019a70 	.word	0x20019a70
 8004410:	20019a74 	.word	0x20019a74

08004414 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af02      	add	r7, sp, #8
 800441a:	4603      	mov	r3, r0
 800441c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800441e:	f107 020f 	add.w	r2, r7, #15
 8004422:	1df9      	adds	r1, r7, #7
 8004424:	2332      	movs	r3, #50	; 0x32
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	2301      	movs	r3, #1
 800442a:	4804      	ldr	r0, [pc, #16]	; (800443c <xchg_spi+0x28>)
 800442c:	f004 f96b 	bl	8008706 <HAL_SPI_TransmitReceive>
    return rxDat;
 8004430:	7bfb      	ldrb	r3, [r7, #15]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20000cdc 	.word	0x20000cdc

08004440 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004440:	b590      	push	{r4, r7, lr}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	e00a      	b.n	8004466 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	18d4      	adds	r4, r2, r3
 8004456:	20ff      	movs	r0, #255	; 0xff
 8004458:	f7ff ffdc 	bl	8004414 <xchg_spi>
 800445c:	4603      	mov	r3, r0
 800445e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3301      	adds	r3, #1
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d3f0      	bcc.n	8004450 <rcvr_spi_multi+0x10>
	}
}
 800446e:	bf00      	nop
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	bd90      	pop	{r4, r7, pc}

08004478 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	b29a      	uxth	r2, r3
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4803      	ldr	r0, [pc, #12]	; (800449c <xmit_spi_multi+0x24>)
 800448e:	f003 fffe 	bl	800848e <HAL_SPI_Transmit>
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000cdc 	.word	0x20000cdc

080044a0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80044a8:	f000 ff2e 	bl	8005308 <HAL_GetTick>
 80044ac:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80044b2:	20ff      	movs	r0, #255	; 0xff
 80044b4:	f7ff ffae 	bl	8004414 <xchg_spi>
 80044b8:	4603      	mov	r3, r0
 80044ba:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2bff      	cmp	r3, #255	; 0xff
 80044c0:	d007      	beq.n	80044d2 <wait_ready+0x32>
 80044c2:	f000 ff21 	bl	8005308 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d8ef      	bhi.n	80044b2 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2bff      	cmp	r3, #255	; 0xff
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80044ec:	2201      	movs	r2, #1
 80044ee:	2110      	movs	r1, #16
 80044f0:	4803      	ldr	r0, [pc, #12]	; (8004500 <despiselect+0x18>)
 80044f2:	f001 fda5 	bl	8006040 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80044f6:	20ff      	movs	r0, #255	; 0xff
 80044f8:	f7ff ff8c 	bl	8004414 <xchg_spi>

}
 80044fc:	bf00      	nop
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40020000 	.word	0x40020000

08004504 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004508:	2200      	movs	r2, #0
 800450a:	2110      	movs	r1, #16
 800450c:	4809      	ldr	r0, [pc, #36]	; (8004534 <spiselect+0x30>)
 800450e:	f001 fd97 	bl	8006040 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004512:	20ff      	movs	r0, #255	; 0xff
 8004514:	f7ff ff7e 	bl	8004414 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004518:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800451c:	f7ff ffc0 	bl	80044a0 <wait_ready>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <spiselect+0x26>
 8004526:	2301      	movs	r3, #1
 8004528:	e002      	b.n	8004530 <spiselect+0x2c>

	despiselect();
 800452a:	f7ff ffdd 	bl	80044e8 <despiselect>
	return 0;	/* Timeout */
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40020000 	.word	0x40020000

08004538 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004542:	20c8      	movs	r0, #200	; 0xc8
 8004544:	f7ff ff3c 	bl	80043c0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004548:	20ff      	movs	r0, #255	; 0xff
 800454a:	f7ff ff63 	bl	8004414 <xchg_spi>
 800454e:	4603      	mov	r3, r0
 8004550:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	2bff      	cmp	r3, #255	; 0xff
 8004556:	d104      	bne.n	8004562 <rcvr_datablock+0x2a>
 8004558:	f7ff ff46 	bl	80043e8 <SPI_Timer_Status>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f2      	bne.n	8004548 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	2bfe      	cmp	r3, #254	; 0xfe
 8004566:	d001      	beq.n	800456c <rcvr_datablock+0x34>
 8004568:	2300      	movs	r3, #0
 800456a:	e00a      	b.n	8004582 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800456c:	6839      	ldr	r1, [r7, #0]
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff ff66 	bl	8004440 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004574:	20ff      	movs	r0, #255	; 0xff
 8004576:	f7ff ff4d 	bl	8004414 <xchg_spi>
 800457a:	20ff      	movs	r0, #255	; 0xff
 800457c:	f7ff ff4a 	bl	8004414 <xchg_spi>

	return 1;						/* Function succeeded */
 8004580:	2301      	movs	r3, #1
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004596:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800459a:	f7ff ff81 	bl	80044a0 <wait_ready>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <xmit_datablock+0x1e>
 80045a4:	2300      	movs	r3, #0
 80045a6:	e01e      	b.n	80045e6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff ff32 	bl	8004414 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	2bfd      	cmp	r3, #253	; 0xfd
 80045b4:	d016      	beq.n	80045e4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80045b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff ff5c 	bl	8004478 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80045c0:	20ff      	movs	r0, #255	; 0xff
 80045c2:	f7ff ff27 	bl	8004414 <xchg_spi>
 80045c6:	20ff      	movs	r0, #255	; 0xff
 80045c8:	f7ff ff24 	bl	8004414 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80045cc:	20ff      	movs	r0, #255	; 0xff
 80045ce:	f7ff ff21 	bl	8004414 <xchg_spi>
 80045d2:	4603      	mov	r3, r0
 80045d4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	2b05      	cmp	r3, #5
 80045de:	d001      	beq.n	80045e4 <xmit_datablock+0x5a>
 80045e0:	2300      	movs	r3, #0
 80045e2:	e000      	b.n	80045e6 <xmit_datablock+0x5c>
	}
	return 1;
 80045e4:	2301      	movs	r3, #1
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	4603      	mov	r3, r0
 80045f6:	6039      	str	r1, [r7, #0]
 80045f8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80045fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	da0e      	bge.n	8004620 <send_cmd+0x32>
		cmd &= 0x7F;
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004608:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800460a:	2100      	movs	r1, #0
 800460c:	2037      	movs	r0, #55	; 0x37
 800460e:	f7ff ffee 	bl	80045ee <send_cmd>
 8004612:	4603      	mov	r3, r0
 8004614:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004616:	7bbb      	ldrb	r3, [r7, #14]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d901      	bls.n	8004620 <send_cmd+0x32>
 800461c:	7bbb      	ldrb	r3, [r7, #14]
 800461e:	e051      	b.n	80046c4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	2b0c      	cmp	r3, #12
 8004624:	d008      	beq.n	8004638 <send_cmd+0x4a>
		despiselect();
 8004626:	f7ff ff5f 	bl	80044e8 <despiselect>
		if (!spiselect()) return 0xFF;
 800462a:	f7ff ff6b 	bl	8004504 <spiselect>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <send_cmd+0x4a>
 8004634:	23ff      	movs	r3, #255	; 0xff
 8004636:	e045      	b.n	80046c4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800463e:	b2db      	uxtb	r3, r3
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff fee7 	bl	8004414 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	0e1b      	lsrs	r3, r3, #24
 800464a:	b2db      	uxtb	r3, r3
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff fee1 	bl	8004414 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	0c1b      	lsrs	r3, r3, #16
 8004656:	b2db      	uxtb	r3, r3
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fedb 	bl	8004414 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	0a1b      	lsrs	r3, r3, #8
 8004662:	b2db      	uxtb	r3, r3
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fed5 	bl	8004414 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff fed0 	bl	8004414 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <send_cmd+0x94>
 800467e:	2395      	movs	r3, #149	; 0x95
 8004680:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d101      	bne.n	800468c <send_cmd+0x9e>
 8004688:	2387      	movs	r3, #135	; 0x87
 800468a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff fec0 	bl	8004414 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	2b0c      	cmp	r3, #12
 8004698:	d102      	bne.n	80046a0 <send_cmd+0xb2>
 800469a:	20ff      	movs	r0, #255	; 0xff
 800469c:	f7ff feba 	bl	8004414 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80046a0:	230a      	movs	r3, #10
 80046a2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80046a4:	20ff      	movs	r0, #255	; 0xff
 80046a6:	f7ff feb5 	bl	8004414 <xchg_spi>
 80046aa:	4603      	mov	r3, r0
 80046ac:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80046ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da05      	bge.n	80046c2 <send_cmd+0xd4>
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <send_cmd+0xb6>

	return res;							/* Return received response */
 80046c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80046cc:	b590      	push	{r4, r7, lr}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <USER_SPI_initialize+0x14>
 80046dc:	2301      	movs	r3, #1
 80046de:	e0d6      	b.n	800488e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80046e0:	4b6d      	ldr	r3, [pc, #436]	; (8004898 <USER_SPI_initialize+0x1cc>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <USER_SPI_initialize+0x2a>
 80046ee:	4b6a      	ldr	r3, [pc, #424]	; (8004898 <USER_SPI_initialize+0x1cc>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	e0cb      	b.n	800488e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80046f6:	4b69      	ldr	r3, [pc, #420]	; (800489c <USER_SPI_initialize+0x1d0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004700:	4b66      	ldr	r3, [pc, #408]	; (800489c <USER_SPI_initialize+0x1d0>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8004708:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800470a:	230a      	movs	r3, #10
 800470c:	73fb      	strb	r3, [r7, #15]
 800470e:	e005      	b.n	800471c <USER_SPI_initialize+0x50>
 8004710:	20ff      	movs	r0, #255	; 0xff
 8004712:	f7ff fe7f 	bl	8004414 <xchg_spi>
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	3b01      	subs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f6      	bne.n	8004710 <USER_SPI_initialize+0x44>

	ty = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004726:	2100      	movs	r1, #0
 8004728:	2000      	movs	r0, #0
 800472a:	f7ff ff60 	bl	80045ee <send_cmd>
 800472e:	4603      	mov	r3, r0
 8004730:	2b01      	cmp	r3, #1
 8004732:	f040 808b 	bne.w	800484c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800473a:	f7ff fe41 	bl	80043c0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800473e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004742:	2008      	movs	r0, #8
 8004744:	f7ff ff53 	bl	80045ee <send_cmd>
 8004748:	4603      	mov	r3, r0
 800474a:	2b01      	cmp	r3, #1
 800474c:	d151      	bne.n	80047f2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
 8004752:	e00d      	b.n	8004770 <USER_SPI_initialize+0xa4>
 8004754:	7bfc      	ldrb	r4, [r7, #15]
 8004756:	20ff      	movs	r0, #255	; 0xff
 8004758:	f7ff fe5c 	bl	8004414 <xchg_spi>
 800475c:	4603      	mov	r3, r0
 800475e:	461a      	mov	r2, r3
 8004760:	f104 0310 	add.w	r3, r4, #16
 8004764:	443b      	add	r3, r7
 8004766:	f803 2c08 	strb.w	r2, [r3, #-8]
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	3301      	adds	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b03      	cmp	r3, #3
 8004774:	d9ee      	bls.n	8004754 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004776:	7abb      	ldrb	r3, [r7, #10]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d167      	bne.n	800484c <USER_SPI_initialize+0x180>
 800477c:	7afb      	ldrb	r3, [r7, #11]
 800477e:	2baa      	cmp	r3, #170	; 0xaa
 8004780:	d164      	bne.n	800484c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004782:	bf00      	nop
 8004784:	f7ff fe30 	bl	80043e8 <SPI_Timer_Status>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <USER_SPI_initialize+0xd2>
 800478e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004792:	20a9      	movs	r0, #169	; 0xa9
 8004794:	f7ff ff2b 	bl	80045ee <send_cmd>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f2      	bne.n	8004784 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800479e:	f7ff fe23 	bl	80043e8 <SPI_Timer_Status>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d051      	beq.n	800484c <USER_SPI_initialize+0x180>
 80047a8:	2100      	movs	r1, #0
 80047aa:	203a      	movs	r0, #58	; 0x3a
 80047ac:	f7ff ff1f 	bl	80045ee <send_cmd>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d14a      	bne.n	800484c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80047b6:	2300      	movs	r3, #0
 80047b8:	73fb      	strb	r3, [r7, #15]
 80047ba:	e00d      	b.n	80047d8 <USER_SPI_initialize+0x10c>
 80047bc:	7bfc      	ldrb	r4, [r7, #15]
 80047be:	20ff      	movs	r0, #255	; 0xff
 80047c0:	f7ff fe28 	bl	8004414 <xchg_spi>
 80047c4:	4603      	mov	r3, r0
 80047c6:	461a      	mov	r2, r3
 80047c8:	f104 0310 	add.w	r3, r4, #16
 80047cc:	443b      	add	r3, r7
 80047ce:	f803 2c08 	strb.w	r2, [r3, #-8]
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	3301      	adds	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d9ee      	bls.n	80047bc <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80047de:	7a3b      	ldrb	r3, [r7, #8]
 80047e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <USER_SPI_initialize+0x120>
 80047e8:	230c      	movs	r3, #12
 80047ea:	e000      	b.n	80047ee <USER_SPI_initialize+0x122>
 80047ec:	2304      	movs	r3, #4
 80047ee:	737b      	strb	r3, [r7, #13]
 80047f0:	e02c      	b.n	800484c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80047f2:	2100      	movs	r1, #0
 80047f4:	20a9      	movs	r0, #169	; 0xa9
 80047f6:	f7ff fefa 	bl	80045ee <send_cmd>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d804      	bhi.n	800480a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004800:	2302      	movs	r3, #2
 8004802:	737b      	strb	r3, [r7, #13]
 8004804:	23a9      	movs	r3, #169	; 0xa9
 8004806:	73bb      	strb	r3, [r7, #14]
 8004808:	e003      	b.n	8004812 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800480a:	2301      	movs	r3, #1
 800480c:	737b      	strb	r3, [r7, #13]
 800480e:	2301      	movs	r3, #1
 8004810:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004812:	bf00      	nop
 8004814:	f7ff fde8 	bl	80043e8 <SPI_Timer_Status>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <USER_SPI_initialize+0x162>
 800481e:	7bbb      	ldrb	r3, [r7, #14]
 8004820:	2100      	movs	r1, #0
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff fee3 	bl	80045ee <send_cmd>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f2      	bne.n	8004814 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800482e:	f7ff fddb 	bl	80043e8 <SPI_Timer_Status>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <USER_SPI_initialize+0x17c>
 8004838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800483c:	2010      	movs	r0, #16
 800483e:	f7ff fed6 	bl	80045ee <send_cmd>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <USER_SPI_initialize+0x180>
				ty = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800484c:	4a14      	ldr	r2, [pc, #80]	; (80048a0 <USER_SPI_initialize+0x1d4>)
 800484e:	7b7b      	ldrb	r3, [r7, #13]
 8004850:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004852:	f7ff fe49 	bl	80044e8 <despiselect>

	if (ty) {			/* OK */
 8004856:	7b7b      	ldrb	r3, [r7, #13]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d012      	beq.n	8004882 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800485c:	4b0f      	ldr	r3, [pc, #60]	; (800489c <USER_SPI_initialize+0x1d0>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004866:	4b0d      	ldr	r3, [pc, #52]	; (800489c <USER_SPI_initialize+0x1d0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0210 	orr.w	r2, r2, #16
 800486e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004870:	4b09      	ldr	r3, [pc, #36]	; (8004898 <USER_SPI_initialize+0x1cc>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	b2da      	uxtb	r2, r3
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <USER_SPI_initialize+0x1cc>)
 800487e:	701a      	strb	r2, [r3, #0]
 8004880:	e002      	b.n	8004888 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004882:	4b05      	ldr	r3, [pc, #20]	; (8004898 <USER_SPI_initialize+0x1cc>)
 8004884:	2201      	movs	r2, #1
 8004886:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <USER_SPI_initialize+0x1cc>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	b2db      	uxtb	r3, r3
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	bd90      	pop	{r4, r7, pc}
 8004896:	bf00      	nop
 8004898:	20000940 	.word	0x20000940
 800489c:	20000cdc 	.word	0x20000cdc
 80048a0:	20019a6c 	.word	0x20019a6c

080048a4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <USER_SPI_status+0x14>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e002      	b.n	80048be <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <USER_SPI_status+0x28>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	b2db      	uxtb	r3, r3
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000940 	.word	0x20000940

080048d0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	4603      	mov	r3, r0
 80048de:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d102      	bne.n	80048ec <USER_SPI_read+0x1c>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <USER_SPI_read+0x20>
 80048ec:	2304      	movs	r3, #4
 80048ee:	e04d      	b.n	800498c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80048f0:	4b28      	ldr	r3, [pc, #160]	; (8004994 <USER_SPI_read+0xc4>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <USER_SPI_read+0x32>
 80048fe:	2303      	movs	r3, #3
 8004900:	e044      	b.n	800498c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004902:	4b25      	ldr	r3, [pc, #148]	; (8004998 <USER_SPI_read+0xc8>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <USER_SPI_read+0x44>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	025b      	lsls	r3, r3, #9
 8004912:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d111      	bne.n	800493e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	2011      	movs	r0, #17
 800491e:	f7ff fe66 	bl	80045ee <send_cmd>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d129      	bne.n	800497c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004928:	f44f 7100 	mov.w	r1, #512	; 0x200
 800492c:	68b8      	ldr	r0, [r7, #8]
 800492e:	f7ff fe03 	bl	8004538 <rcvr_datablock>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d021      	beq.n	800497c <USER_SPI_read+0xac>
			count = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	e01e      	b.n	800497c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	2012      	movs	r0, #18
 8004942:	f7ff fe54 	bl	80045ee <send_cmd>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d117      	bne.n	800497c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800494c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004950:	68b8      	ldr	r0, [r7, #8]
 8004952:	f7ff fdf1 	bl	8004538 <rcvr_datablock>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <USER_SPI_read+0xa2>
				buff += 512;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004962:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	3b01      	subs	r3, #1
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1ed      	bne.n	800494c <USER_SPI_read+0x7c>
 8004970:	e000      	b.n	8004974 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004972:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004974:	2100      	movs	r1, #0
 8004976:	200c      	movs	r0, #12
 8004978:	f7ff fe39 	bl	80045ee <send_cmd>
		}
	}
	despiselect();
 800497c:	f7ff fdb4 	bl	80044e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	bf14      	ite	ne
 8004986:	2301      	movne	r3, #1
 8004988:	2300      	moveq	r3, #0
 800498a:	b2db      	uxtb	r3, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20000940 	.word	0x20000940
 8004998:	20019a6c 	.word	0x20019a6c

0800499c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4603      	mov	r3, r0
 80049aa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <USER_SPI_write+0x1c>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <USER_SPI_write+0x20>
 80049b8:	2304      	movs	r3, #4
 80049ba:	e063      	b.n	8004a84 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80049bc:	4b33      	ldr	r3, [pc, #204]	; (8004a8c <USER_SPI_write+0xf0>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <USER_SPI_write+0x32>
 80049ca:	2303      	movs	r3, #3
 80049cc:	e05a      	b.n	8004a84 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80049ce:	4b2f      	ldr	r3, [pc, #188]	; (8004a8c <USER_SPI_write+0xf0>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <USER_SPI_write+0x44>
 80049dc:	2302      	movs	r3, #2
 80049de:	e051      	b.n	8004a84 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80049e0:	4b2b      	ldr	r3, [pc, #172]	; (8004a90 <USER_SPI_write+0xf4>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d102      	bne.n	80049f2 <USER_SPI_write+0x56>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	025b      	lsls	r3, r3, #9
 80049f0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d110      	bne.n	8004a1a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	2018      	movs	r0, #24
 80049fc:	f7ff fdf7 	bl	80045ee <send_cmd>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d136      	bne.n	8004a74 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004a06:	21fe      	movs	r1, #254	; 0xfe
 8004a08:	68b8      	ldr	r0, [r7, #8]
 8004a0a:	f7ff fdbe 	bl	800458a <xmit_datablock>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d02f      	beq.n	8004a74 <USER_SPI_write+0xd8>
			count = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	e02c      	b.n	8004a74 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004a1a:	4b1d      	ldr	r3, [pc, #116]	; (8004a90 <USER_SPI_write+0xf4>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	f003 0306 	and.w	r3, r3, #6
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <USER_SPI_write+0x92>
 8004a26:	6839      	ldr	r1, [r7, #0]
 8004a28:	2097      	movs	r0, #151	; 0x97
 8004a2a:	f7ff fde0 	bl	80045ee <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	2019      	movs	r0, #25
 8004a32:	f7ff fddc 	bl	80045ee <send_cmd>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d11b      	bne.n	8004a74 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004a3c:	21fc      	movs	r1, #252	; 0xfc
 8004a3e:	68b8      	ldr	r0, [r7, #8]
 8004a40:	f7ff fda3 	bl	800458a <xmit_datablock>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <USER_SPI_write+0xc4>
				buff += 512;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004a50:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1ee      	bne.n	8004a3c <USER_SPI_write+0xa0>
 8004a5e:	e000      	b.n	8004a62 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004a60:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8004a62:	21fd      	movs	r1, #253	; 0xfd
 8004a64:	2000      	movs	r0, #0
 8004a66:	f7ff fd90 	bl	800458a <xmit_datablock>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <USER_SPI_write+0xd8>
 8004a70:	2301      	movs	r3, #1
 8004a72:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004a74:	f7ff fd38 	bl	80044e8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	bf14      	ite	ne
 8004a7e:	2301      	movne	r3, #1
 8004a80:	2300      	moveq	r3, #0
 8004a82:	b2db      	uxtb	r3, r3
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20000940 	.word	0x20000940
 8004a90:	20019a6c 	.word	0x20019a6c

08004a94 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08c      	sub	sp, #48	; 0x30
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	603a      	str	r2, [r7, #0]
 8004a9e:	71fb      	strb	r3, [r7, #7]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <USER_SPI_ioctl+0x1a>
 8004aaa:	2304      	movs	r3, #4
 8004aac:	e15a      	b.n	8004d64 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004aae:	4baf      	ldr	r3, [pc, #700]	; (8004d6c <USER_SPI_ioctl+0x2d8>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <USER_SPI_ioctl+0x2c>
 8004abc:	2303      	movs	r3, #3
 8004abe:	e151      	b.n	8004d64 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004ac6:	79bb      	ldrb	r3, [r7, #6]
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	f200 8136 	bhi.w	8004d3a <USER_SPI_ioctl+0x2a6>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <USER_SPI_ioctl+0x40>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004ae9 	.word	0x08004ae9
 8004ad8:	08004afd 	.word	0x08004afd
 8004adc:	08004d3b 	.word	0x08004d3b
 8004ae0:	08004ba9 	.word	0x08004ba9
 8004ae4:	08004c9f 	.word	0x08004c9f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004ae8:	f7ff fd0c 	bl	8004504 <spiselect>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 8127 	beq.w	8004d42 <USER_SPI_ioctl+0x2ae>
 8004af4:	2300      	movs	r3, #0
 8004af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004afa:	e122      	b.n	8004d42 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004afc:	2100      	movs	r1, #0
 8004afe:	2009      	movs	r0, #9
 8004b00:	f7ff fd75 	bl	80045ee <send_cmd>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 811d 	bne.w	8004d46 <USER_SPI_ioctl+0x2b2>
 8004b0c:	f107 030c 	add.w	r3, r7, #12
 8004b10:	2110      	movs	r1, #16
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff fd10 	bl	8004538 <rcvr_datablock>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 8113 	beq.w	8004d46 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004b20:	7b3b      	ldrb	r3, [r7, #12]
 8004b22:	099b      	lsrs	r3, r3, #6
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d111      	bne.n	8004b4e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004b2a:	7d7b      	ldrb	r3, [r7, #21]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	7d3b      	ldrb	r3, [r7, #20]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	4413      	add	r3, r2
 8004b34:	461a      	mov	r2, r3
 8004b36:	7cfb      	ldrb	r3, [r7, #19]
 8004b38:	041b      	lsls	r3, r3, #16
 8004b3a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004b3e:	4413      	add	r3, r2
 8004b40:	3301      	adds	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	029a      	lsls	r2, r3, #10
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	e028      	b.n	8004ba0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004b4e:	7c7b      	ldrb	r3, [r7, #17]
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	7dbb      	ldrb	r3, [r7, #22]
 8004b58:	09db      	lsrs	r3, r3, #7
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	7d7b      	ldrb	r3, [r7, #21]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f003 0306 	and.w	r3, r3, #6
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	3302      	adds	r3, #2
 8004b72:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004b76:	7d3b      	ldrb	r3, [r7, #20]
 8004b78:	099b      	lsrs	r3, r3, #6
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	7cfb      	ldrb	r3, [r7, #19]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	7cbb      	ldrb	r3, [r7, #18]
 8004b86:	029b      	lsls	r3, r3, #10
 8004b88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3301      	adds	r3, #1
 8004b90:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004b92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b96:	3b09      	subs	r3, #9
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	409a      	lsls	r2, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004ba6:	e0ce      	b.n	8004d46 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004ba8:	4b71      	ldr	r3, [pc, #452]	; (8004d70 <USER_SPI_ioctl+0x2dc>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d031      	beq.n	8004c18 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	208d      	movs	r0, #141	; 0x8d
 8004bb8:	f7ff fd19 	bl	80045ee <send_cmd>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f040 80c3 	bne.w	8004d4a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004bc4:	20ff      	movs	r0, #255	; 0xff
 8004bc6:	f7ff fc25 	bl	8004414 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004bca:	f107 030c 	add.w	r3, r7, #12
 8004bce:	2110      	movs	r1, #16
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff fcb1 	bl	8004538 <rcvr_datablock>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80b6 	beq.w	8004d4a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004bde:	2330      	movs	r3, #48	; 0x30
 8004be0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004be4:	e007      	b.n	8004bf6 <USER_SPI_ioctl+0x162>
 8004be6:	20ff      	movs	r0, #255	; 0xff
 8004be8:	f7ff fc14 	bl	8004414 <xchg_spi>
 8004bec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004bf6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f3      	bne.n	8004be6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004bfe:	7dbb      	ldrb	r3, [r7, #22]
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	2310      	movs	r3, #16
 8004c08:	fa03 f202 	lsl.w	r2, r3, r2
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004c16:	e098      	b.n	8004d4a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004c18:	2100      	movs	r1, #0
 8004c1a:	2009      	movs	r0, #9
 8004c1c:	f7ff fce7 	bl	80045ee <send_cmd>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f040 8091 	bne.w	8004d4a <USER_SPI_ioctl+0x2b6>
 8004c28:	f107 030c 	add.w	r3, r7, #12
 8004c2c:	2110      	movs	r1, #16
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fc82 	bl	8004538 <rcvr_datablock>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8087 	beq.w	8004d4a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004c3c:	4b4c      	ldr	r3, [pc, #304]	; (8004d70 <USER_SPI_ioctl+0x2dc>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d012      	beq.n	8004c6e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004c48:	7dbb      	ldrb	r3, [r7, #22]
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004c50:	7dfa      	ldrb	r2, [r7, #23]
 8004c52:	09d2      	lsrs	r2, r2, #7
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	4413      	add	r3, r2
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	7e7b      	ldrb	r3, [r7, #25]
 8004c5c:	099b      	lsrs	r3, r3, #6
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	e013      	b.n	8004c96 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004c6e:	7dbb      	ldrb	r3, [r7, #22]
 8004c70:	109b      	asrs	r3, r3, #2
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	3301      	adds	r3, #1
 8004c7a:	7dfa      	ldrb	r2, [r7, #23]
 8004c7c:	00d2      	lsls	r2, r2, #3
 8004c7e:	f002 0218 	and.w	r2, r2, #24
 8004c82:	7df9      	ldrb	r1, [r7, #23]
 8004c84:	0949      	lsrs	r1, r1, #5
 8004c86:	b2c9      	uxtb	r1, r1
 8004c88:	440a      	add	r2, r1
 8004c8a:	3201      	adds	r2, #1
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004c9c:	e055      	b.n	8004d4a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004c9e:	4b34      	ldr	r3, [pc, #208]	; (8004d70 <USER_SPI_ioctl+0x2dc>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	f003 0306 	and.w	r3, r3, #6
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d051      	beq.n	8004d4e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004caa:	f107 020c 	add.w	r2, r7, #12
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	210b      	movs	r1, #11
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff feee 	bl	8004a94 <USER_SPI_ioctl>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d149      	bne.n	8004d52 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004cbe:	7b3b      	ldrb	r3, [r7, #12]
 8004cc0:	099b      	lsrs	r3, r3, #6
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d104      	bne.n	8004cd2 <USER_SPI_ioctl+0x23e>
 8004cc8:	7dbb      	ldrb	r3, [r7, #22]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d041      	beq.n	8004d56 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	623b      	str	r3, [r7, #32]
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004ce2:	4b23      	ldr	r3, [pc, #140]	; (8004d70 <USER_SPI_ioctl+0x2dc>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d105      	bne.n	8004cfa <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	025b      	lsls	r3, r3, #9
 8004cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	025b      	lsls	r3, r3, #9
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004cfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cfc:	2020      	movs	r0, #32
 8004cfe:	f7ff fc76 	bl	80045ee <send_cmd>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d128      	bne.n	8004d5a <USER_SPI_ioctl+0x2c6>
 8004d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d0a:	2021      	movs	r0, #33	; 0x21
 8004d0c:	f7ff fc6f 	bl	80045ee <send_cmd>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d121      	bne.n	8004d5a <USER_SPI_ioctl+0x2c6>
 8004d16:	2100      	movs	r1, #0
 8004d18:	2026      	movs	r0, #38	; 0x26
 8004d1a:	f7ff fc68 	bl	80045ee <send_cmd>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d11a      	bne.n	8004d5a <USER_SPI_ioctl+0x2c6>
 8004d24:	f247 5030 	movw	r0, #30000	; 0x7530
 8004d28:	f7ff fbba 	bl	80044a0 <wait_ready>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d013      	beq.n	8004d5a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004d32:	2300      	movs	r3, #0
 8004d34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004d38:	e00f      	b.n	8004d5a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004d3a:	2304      	movs	r3, #4
 8004d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004d40:	e00c      	b.n	8004d5c <USER_SPI_ioctl+0x2c8>
		break;
 8004d42:	bf00      	nop
 8004d44:	e00a      	b.n	8004d5c <USER_SPI_ioctl+0x2c8>
		break;
 8004d46:	bf00      	nop
 8004d48:	e008      	b.n	8004d5c <USER_SPI_ioctl+0x2c8>
		break;
 8004d4a:	bf00      	nop
 8004d4c:	e006      	b.n	8004d5c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004d4e:	bf00      	nop
 8004d50:	e004      	b.n	8004d5c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004d52:	bf00      	nop
 8004d54:	e002      	b.n	8004d5c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004d56:	bf00      	nop
 8004d58:	e000      	b.n	8004d5c <USER_SPI_ioctl+0x2c8>
		break;
 8004d5a:	bf00      	nop
	}

	despiselect();
 8004d5c:	f7ff fbc4 	bl	80044e8 <despiselect>

	return res;
 8004d60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3730      	adds	r7, #48	; 0x30
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	20000940 	.word	0x20000940
 8004d70:	20019a6c 	.word	0x20019a6c

08004d74 <Reset_Handler>:
 8004d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dac <LoopFillZerobss+0x12>
 8004d78:	480d      	ldr	r0, [pc, #52]	; (8004db0 <LoopFillZerobss+0x16>)
 8004d7a:	490e      	ldr	r1, [pc, #56]	; (8004db4 <LoopFillZerobss+0x1a>)
 8004d7c:	4a0e      	ldr	r2, [pc, #56]	; (8004db8 <LoopFillZerobss+0x1e>)
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e002      	b.n	8004d88 <LoopCopyDataInit>

08004d82 <CopyDataInit>:
 8004d82:	58d4      	ldr	r4, [r2, r3]
 8004d84:	50c4      	str	r4, [r0, r3]
 8004d86:	3304      	adds	r3, #4

08004d88 <LoopCopyDataInit>:
 8004d88:	18c4      	adds	r4, r0, r3
 8004d8a:	428c      	cmp	r4, r1
 8004d8c:	d3f9      	bcc.n	8004d82 <CopyDataInit>
 8004d8e:	4a0b      	ldr	r2, [pc, #44]	; (8004dbc <LoopFillZerobss+0x22>)
 8004d90:	4c0b      	ldr	r4, [pc, #44]	; (8004dc0 <LoopFillZerobss+0x26>)
 8004d92:	2300      	movs	r3, #0
 8004d94:	e001      	b.n	8004d9a <LoopFillZerobss>

08004d96 <FillZerobss>:
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	3204      	adds	r2, #4

08004d9a <LoopFillZerobss>:
 8004d9a:	42a2      	cmp	r2, r4
 8004d9c:	d3fb      	bcc.n	8004d96 <FillZerobss>
 8004d9e:	f7ff fafd 	bl	800439c <SystemInit>
 8004da2:	f009 f8e5 	bl	800df70 <__libc_init_array>
 8004da6:	f7fc ff1f 	bl	8001be8 <main>
 8004daa:	4770      	bx	lr
 8004dac:	20020000 	.word	0x20020000
 8004db0:	20000000 	.word	0x20000000
 8004db4:	20000b40 	.word	0x20000b40
 8004db8:	08012700 	.word	0x08012700
 8004dbc:	20000b40 	.word	0x20000b40
 8004dc0:	2001a00c 	.word	0x2001a00c

08004dc4 <ADC_IRQHandler>:
 8004dc4:	e7fe      	b.n	8004dc4 <ADC_IRQHandler>

08004dc6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004dc6:	b480      	push	{r7}
 8004dc8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004dca:	bf00      	nop
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af04      	add	r7, sp, #16
 8004dda:	4603      	mov	r3, r0
 8004ddc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004dde:	f04f 33ff 	mov.w	r3, #4294967295
 8004de2:	9302      	str	r3, [sp, #8]
 8004de4:	2301      	movs	r3, #1
 8004de6:	9301      	str	r3, [sp, #4]
 8004de8:	1dfb      	adds	r3, r7, #7
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	2301      	movs	r3, #1
 8004dee:	2200      	movs	r2, #0
 8004df0:	2178      	movs	r1, #120	; 0x78
 8004df2:	4803      	ldr	r0, [pc, #12]	; (8004e00 <ssd1306_WriteCommand+0x2c>)
 8004df4:	f001 fdbe 	bl	8006974 <HAL_I2C_Mem_Write>
}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000c14 	.word	0x20000c14

08004e04 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af04      	add	r7, sp, #16
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f04f 32ff 	mov.w	r2, #4294967295
 8004e16:	9202      	str	r2, [sp, #8]
 8004e18:	9301      	str	r3, [sp, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	2301      	movs	r3, #1
 8004e20:	2240      	movs	r2, #64	; 0x40
 8004e22:	2178      	movs	r1, #120	; 0x78
 8004e24:	4803      	ldr	r0, [pc, #12]	; (8004e34 <ssd1306_WriteData+0x30>)
 8004e26:	f001 fda5 	bl	8006974 <HAL_I2C_Mem_Write>
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000c14 	.word	0x20000c14

08004e38 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004e3c:	f7ff ffc3 	bl	8004dc6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004e40:	2064      	movs	r0, #100	; 0x64
 8004e42:	f000 fa6d 	bl	8005320 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004e46:	2000      	movs	r0, #0
 8004e48:	f000 f9da 	bl	8005200 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004e4c:	2020      	movs	r0, #32
 8004e4e:	f7ff ffc1 	bl	8004dd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004e52:	2000      	movs	r0, #0
 8004e54:	f7ff ffbe 	bl	8004dd4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004e58:	20b0      	movs	r0, #176	; 0xb0
 8004e5a:	f7ff ffbb 	bl	8004dd4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004e5e:	20c8      	movs	r0, #200	; 0xc8
 8004e60:	f7ff ffb8 	bl	8004dd4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004e64:	2000      	movs	r0, #0
 8004e66:	f7ff ffb5 	bl	8004dd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004e6a:	2010      	movs	r0, #16
 8004e6c:	f7ff ffb2 	bl	8004dd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004e70:	2040      	movs	r0, #64	; 0x40
 8004e72:	f7ff ffaf 	bl	8004dd4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004e76:	20ff      	movs	r0, #255	; 0xff
 8004e78:	f000 f9ae 	bl	80051d8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004e7c:	20a1      	movs	r0, #161	; 0xa1
 8004e7e:	f7ff ffa9 	bl	8004dd4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004e82:	20a6      	movs	r0, #166	; 0xa6
 8004e84:	f7ff ffa6 	bl	8004dd4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004e88:	20a8      	movs	r0, #168	; 0xa8
 8004e8a:	f7ff ffa3 	bl	8004dd4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004e8e:	203f      	movs	r0, #63	; 0x3f
 8004e90:	f7ff ffa0 	bl	8004dd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004e94:	20a4      	movs	r0, #164	; 0xa4
 8004e96:	f7ff ff9d 	bl	8004dd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004e9a:	20d3      	movs	r0, #211	; 0xd3
 8004e9c:	f7ff ff9a 	bl	8004dd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	f7ff ff97 	bl	8004dd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004ea6:	20d5      	movs	r0, #213	; 0xd5
 8004ea8:	f7ff ff94 	bl	8004dd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004eac:	20f0      	movs	r0, #240	; 0xf0
 8004eae:	f7ff ff91 	bl	8004dd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004eb2:	20d9      	movs	r0, #217	; 0xd9
 8004eb4:	f7ff ff8e 	bl	8004dd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004eb8:	2022      	movs	r0, #34	; 0x22
 8004eba:	f7ff ff8b 	bl	8004dd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004ebe:	20da      	movs	r0, #218	; 0xda
 8004ec0:	f7ff ff88 	bl	8004dd4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004ec4:	2012      	movs	r0, #18
 8004ec6:	f7ff ff85 	bl	8004dd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004eca:	20db      	movs	r0, #219	; 0xdb
 8004ecc:	f7ff ff82 	bl	8004dd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004ed0:	2020      	movs	r0, #32
 8004ed2:	f7ff ff7f 	bl	8004dd4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004ed6:	208d      	movs	r0, #141	; 0x8d
 8004ed8:	f7ff ff7c 	bl	8004dd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004edc:	2014      	movs	r0, #20
 8004ede:	f7ff ff79 	bl	8004dd4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004ee2:	2001      	movs	r0, #1
 8004ee4:	f000 f98c 	bl	8005200 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004ee8:	2000      	movs	r0, #0
 8004eea:	f000 f80f 	bl	8004f0c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004eee:	f000 f831 	bl	8004f54 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004ef2:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <ssd1306_Init+0xd0>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004ef8:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <ssd1306_Init+0xd0>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004efe:	4b02      	ldr	r3, [pc, #8]	; (8004f08 <ssd1306_Init+0xd0>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	711a      	strb	r2, [r3, #4]
}
 8004f04:	bf00      	nop
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20019e78 	.word	0x20019e78

08004f0c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	e00d      	b.n	8004f38 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <ssd1306_Fill+0x1a>
 8004f22:	2100      	movs	r1, #0
 8004f24:	e000      	b.n	8004f28 <ssd1306_Fill+0x1c>
 8004f26:	21ff      	movs	r1, #255	; 0xff
 8004f28:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <ssd1306_Fill+0x44>)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	460a      	mov	r2, r1
 8004f30:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3301      	adds	r3, #1
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3e:	d3ed      	bcc.n	8004f1c <ssd1306_Fill+0x10>
    }
}
 8004f40:	bf00      	nop
 8004f42:	bf00      	nop
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	20019a78 	.word	0x20019a78

08004f54 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	71fb      	strb	r3, [r7, #7]
 8004f5e:	e016      	b.n	8004f8e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	3b50      	subs	r3, #80	; 0x50
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff ff34 	bl	8004dd4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	f7ff ff31 	bl	8004dd4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004f72:	2010      	movs	r0, #16
 8004f74:	f7ff ff2e 	bl	8004dd4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	01db      	lsls	r3, r3, #7
 8004f7c:	4a08      	ldr	r2, [pc, #32]	; (8004fa0 <ssd1306_UpdateScreen+0x4c>)
 8004f7e:	4413      	add	r3, r2
 8004f80:	2180      	movs	r1, #128	; 0x80
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff ff3e 	bl	8004e04 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	71fb      	strb	r3, [r7, #7]
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	2b07      	cmp	r3, #7
 8004f92:	d9e5      	bls.n	8004f60 <ssd1306_UpdateScreen+0xc>
    }
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20019a78 	.word	0x20019a78

08004fa4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	71fb      	strb	r3, [r7, #7]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	71bb      	strb	r3, [r7, #6]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	db3d      	blt.n	800503a <ssd1306_DrawPixel+0x96>
 8004fbe:	79bb      	ldrb	r3, [r7, #6]
 8004fc0:	2b3f      	cmp	r3, #63	; 0x3f
 8004fc2:	d83a      	bhi.n	800503a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004fc4:	797b      	ldrb	r3, [r7, #5]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d11a      	bne.n	8005000 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004fca:	79fa      	ldrb	r2, [r7, #7]
 8004fcc:	79bb      	ldrb	r3, [r7, #6]
 8004fce:	08db      	lsrs	r3, r3, #3
 8004fd0:	b2d8      	uxtb	r0, r3
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	01db      	lsls	r3, r3, #7
 8004fd6:	4413      	add	r3, r2
 8004fd8:	4a1b      	ldr	r2, [pc, #108]	; (8005048 <ssd1306_DrawPixel+0xa4>)
 8004fda:	5cd3      	ldrb	r3, [r2, r3]
 8004fdc:	b25a      	sxtb	r2, r3
 8004fde:	79bb      	ldrb	r3, [r7, #6]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fea:	b25b      	sxtb	r3, r3
 8004fec:	4313      	orrs	r3, r2
 8004fee:	b259      	sxtb	r1, r3
 8004ff0:	79fa      	ldrb	r2, [r7, #7]
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	01db      	lsls	r3, r3, #7
 8004ff6:	4413      	add	r3, r2
 8004ff8:	b2c9      	uxtb	r1, r1
 8004ffa:	4a13      	ldr	r2, [pc, #76]	; (8005048 <ssd1306_DrawPixel+0xa4>)
 8004ffc:	54d1      	strb	r1, [r2, r3]
 8004ffe:	e01d      	b.n	800503c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005000:	79fa      	ldrb	r2, [r7, #7]
 8005002:	79bb      	ldrb	r3, [r7, #6]
 8005004:	08db      	lsrs	r3, r3, #3
 8005006:	b2d8      	uxtb	r0, r3
 8005008:	4603      	mov	r3, r0
 800500a:	01db      	lsls	r3, r3, #7
 800500c:	4413      	add	r3, r2
 800500e:	4a0e      	ldr	r2, [pc, #56]	; (8005048 <ssd1306_DrawPixel+0xa4>)
 8005010:	5cd3      	ldrb	r3, [r2, r3]
 8005012:	b25a      	sxtb	r2, r3
 8005014:	79bb      	ldrb	r3, [r7, #6]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	2101      	movs	r1, #1
 800501c:	fa01 f303 	lsl.w	r3, r1, r3
 8005020:	b25b      	sxtb	r3, r3
 8005022:	43db      	mvns	r3, r3
 8005024:	b25b      	sxtb	r3, r3
 8005026:	4013      	ands	r3, r2
 8005028:	b259      	sxtb	r1, r3
 800502a:	79fa      	ldrb	r2, [r7, #7]
 800502c:	4603      	mov	r3, r0
 800502e:	01db      	lsls	r3, r3, #7
 8005030:	4413      	add	r3, r2
 8005032:	b2c9      	uxtb	r1, r1
 8005034:	4a04      	ldr	r2, [pc, #16]	; (8005048 <ssd1306_DrawPixel+0xa4>)
 8005036:	54d1      	strb	r1, [r2, r3]
 8005038:	e000      	b.n	800503c <ssd1306_DrawPixel+0x98>
        return;
 800503a:	bf00      	nop
    }
}
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20019a78 	.word	0x20019a78

0800504c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b089      	sub	sp, #36	; 0x24
 8005050:	af00      	add	r7, sp, #0
 8005052:	4604      	mov	r4, r0
 8005054:	1d38      	adds	r0, r7, #4
 8005056:	e880 0006 	stmia.w	r0, {r1, r2}
 800505a:	461a      	mov	r2, r3
 800505c:	4623      	mov	r3, r4
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	4613      	mov	r3, r2
 8005062:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	2b1f      	cmp	r3, #31
 8005068:	d902      	bls.n	8005070 <ssd1306_WriteChar+0x24>
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b7e      	cmp	r3, #126	; 0x7e
 800506e:	d901      	bls.n	8005074 <ssd1306_WriteChar+0x28>
        return 0;
 8005070:	2300      	movs	r3, #0
 8005072:	e06d      	b.n	8005150 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005074:	4b38      	ldr	r3, [pc, #224]	; (8005158 <ssd1306_WriteChar+0x10c>)
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	793b      	ldrb	r3, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	2b80      	cmp	r3, #128	; 0x80
 8005080:	dc06      	bgt.n	8005090 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8005082:	4b35      	ldr	r3, [pc, #212]	; (8005158 <ssd1306_WriteChar+0x10c>)
 8005084:	885b      	ldrh	r3, [r3, #2]
 8005086:	461a      	mov	r2, r3
 8005088:	797b      	ldrb	r3, [r7, #5]
 800508a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800508c:	2b40      	cmp	r3, #64	; 0x40
 800508e:	dd01      	ble.n	8005094 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8005090:	2300      	movs	r3, #0
 8005092:	e05d      	b.n	8005150 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8005094:	2300      	movs	r3, #0
 8005096:	61fb      	str	r3, [r7, #28]
 8005098:	e04c      	b.n	8005134 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	3b20      	subs	r3, #32
 80050a0:	7979      	ldrb	r1, [r7, #5]
 80050a2:	fb01 f303 	mul.w	r3, r1, r3
 80050a6:	4619      	mov	r1, r3
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	440b      	add	r3, r1
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	4413      	add	r3, r2
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80050b4:	2300      	movs	r3, #0
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	e034      	b.n	8005124 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d012      	beq.n	80050f0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80050ca:	4b23      	ldr	r3, [pc, #140]	; (8005158 <ssd1306_WriteChar+0x10c>)
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	4413      	add	r3, r2
 80050d6:	b2d8      	uxtb	r0, r3
 80050d8:	4b1f      	ldr	r3, [pc, #124]	; (8005158 <ssd1306_WriteChar+0x10c>)
 80050da:	885b      	ldrh	r3, [r3, #2]
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	7bba      	ldrb	r2, [r7, #14]
 80050e8:	4619      	mov	r1, r3
 80050ea:	f7ff ff5b 	bl	8004fa4 <ssd1306_DrawPixel>
 80050ee:	e016      	b.n	800511e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <ssd1306_WriteChar+0x10c>)
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	4413      	add	r3, r2
 80050fc:	b2d8      	uxtb	r0, r3
 80050fe:	4b16      	ldr	r3, [pc, #88]	; (8005158 <ssd1306_WriteChar+0x10c>)
 8005100:	885b      	ldrh	r3, [r3, #2]
 8005102:	b2da      	uxtb	r2, r3
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	4413      	add	r3, r2
 800510a:	b2d9      	uxtb	r1, r3
 800510c:	7bbb      	ldrb	r3, [r7, #14]
 800510e:	2b00      	cmp	r3, #0
 8005110:	bf0c      	ite	eq
 8005112:	2301      	moveq	r3, #1
 8005114:	2300      	movne	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	f7ff ff43 	bl	8004fa4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	3301      	adds	r3, #1
 8005122:	61bb      	str	r3, [r7, #24]
 8005124:	793b      	ldrb	r3, [r7, #4]
 8005126:	461a      	mov	r2, r3
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	4293      	cmp	r3, r2
 800512c:	d3c5      	bcc.n	80050ba <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	3301      	adds	r3, #1
 8005132:	61fb      	str	r3, [r7, #28]
 8005134:	797b      	ldrb	r3, [r7, #5]
 8005136:	461a      	mov	r2, r3
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4293      	cmp	r3, r2
 800513c:	d3ad      	bcc.n	800509a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800513e:	4b06      	ldr	r3, [pc, #24]	; (8005158 <ssd1306_WriteChar+0x10c>)
 8005140:	881a      	ldrh	r2, [r3, #0]
 8005142:	793b      	ldrb	r3, [r7, #4]
 8005144:	b29b      	uxth	r3, r3
 8005146:	4413      	add	r3, r2
 8005148:	b29a      	uxth	r2, r3
 800514a:	4b03      	ldr	r3, [pc, #12]	; (8005158 <ssd1306_WriteChar+0x10c>)
 800514c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800514e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3724      	adds	r7, #36	; 0x24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd90      	pop	{r4, r7, pc}
 8005158:	20019e78 	.word	0x20019e78

0800515c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	1d38      	adds	r0, r7, #4
 8005166:	e880 0006 	stmia.w	r0, {r1, r2}
 800516a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800516c:	e012      	b.n	8005194 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	7818      	ldrb	r0, [r3, #0]
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	1d3a      	adds	r2, r7, #4
 8005176:	ca06      	ldmia	r2, {r1, r2}
 8005178:	f7ff ff68 	bl	800504c <ssd1306_WriteChar>
 800517c:	4603      	mov	r3, r0
 800517e:	461a      	mov	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d002      	beq.n	800518e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	e008      	b.n	80051a0 <ssd1306_WriteString+0x44>
        }
        str++;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3301      	adds	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e8      	bne.n	800516e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	781b      	ldrb	r3, [r3, #0]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	460a      	mov	r2, r1
 80051b2:	71fb      	strb	r3, [r7, #7]
 80051b4:	4613      	mov	r3, r2
 80051b6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <ssd1306_SetCursor+0x2c>)
 80051be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80051c0:	79bb      	ldrb	r3, [r7, #6]
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	4b03      	ldr	r3, [pc, #12]	; (80051d4 <ssd1306_SetCursor+0x2c>)
 80051c6:	805a      	strh	r2, [r3, #2]
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	20019e78 	.word	0x20019e78

080051d8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80051e2:	2381      	movs	r3, #129	; 0x81
 80051e4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff fdf3 	bl	8004dd4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80051ee:	79fb      	ldrb	r3, [r7, #7]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff fdef 	bl	8004dd4 <ssd1306_WriteCommand>
}
 80051f6:	bf00      	nop
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d005      	beq.n	800521c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005210:	23af      	movs	r3, #175	; 0xaf
 8005212:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005214:	4b08      	ldr	r3, [pc, #32]	; (8005238 <ssd1306_SetDisplayOn+0x38>)
 8005216:	2201      	movs	r2, #1
 8005218:	715a      	strb	r2, [r3, #5]
 800521a:	e004      	b.n	8005226 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800521c:	23ae      	movs	r3, #174	; 0xae
 800521e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005220:	4b05      	ldr	r3, [pc, #20]	; (8005238 <ssd1306_SetDisplayOn+0x38>)
 8005222:	2200      	movs	r2, #0
 8005224:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005226:	7bfb      	ldrb	r3, [r7, #15]
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff fdd3 	bl	8004dd4 <ssd1306_WriteCommand>
}
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20019e78 	.word	0x20019e78

0800523c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005240:	4b0e      	ldr	r3, [pc, #56]	; (800527c <HAL_Init+0x40>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a0d      	ldr	r2, [pc, #52]	; (800527c <HAL_Init+0x40>)
 8005246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800524a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <HAL_Init+0x40>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0a      	ldr	r2, [pc, #40]	; (800527c <HAL_Init+0x40>)
 8005252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005258:	4b08      	ldr	r3, [pc, #32]	; (800527c <HAL_Init+0x40>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a07      	ldr	r2, [pc, #28]	; (800527c <HAL_Init+0x40>)
 800525e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005264:	2003      	movs	r0, #3
 8005266:	f000 fd0d 	bl	8005c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800526a:	200f      	movs	r0, #15
 800526c:	f000 f808 	bl	8005280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005270:	f7fe fcbe 	bl	8003bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40023c00 	.word	0x40023c00

08005280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005288:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <HAL_InitTick+0x54>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b12      	ldr	r3, [pc, #72]	; (80052d8 <HAL_InitTick+0x58>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	4619      	mov	r1, r3
 8005292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005296:	fbb3 f3f1 	udiv	r3, r3, r1
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fd25 	bl	8005cee <HAL_SYSTICK_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e00e      	b.n	80052cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b0f      	cmp	r3, #15
 80052b2:	d80a      	bhi.n	80052ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052b4:	2200      	movs	r2, #0
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	f04f 30ff 	mov.w	r0, #4294967295
 80052bc:	f000 fced 	bl	8005c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052c0:	4a06      	ldr	r2, [pc, #24]	; (80052dc <HAL_InitTick+0x5c>)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e000      	b.n	80052cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	2000093c 	.word	0x2000093c
 80052d8:	20000960 	.word	0x20000960
 80052dc:	2000095c 	.word	0x2000095c

080052e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <HAL_IncTick+0x20>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	461a      	mov	r2, r3
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <HAL_IncTick+0x24>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4413      	add	r3, r2
 80052f0:	4a04      	ldr	r2, [pc, #16]	; (8005304 <HAL_IncTick+0x24>)
 80052f2:	6013      	str	r3, [r2, #0]
}
 80052f4:	bf00      	nop
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20000960 	.word	0x20000960
 8005304:	20019e80 	.word	0x20019e80

08005308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  return uwTick;
 800530c:	4b03      	ldr	r3, [pc, #12]	; (800531c <HAL_GetTick+0x14>)
 800530e:	681b      	ldr	r3, [r3, #0]
}
 8005310:	4618      	mov	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	20019e80 	.word	0x20019e80

08005320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005328:	f7ff ffee 	bl	8005308 <HAL_GetTick>
 800532c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d005      	beq.n	8005346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800533a:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <HAL_Delay+0x44>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005346:	bf00      	nop
 8005348:	f7ff ffde 	bl	8005308 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	429a      	cmp	r2, r3
 8005356:	d8f7      	bhi.n	8005348 <HAL_Delay+0x28>
  {
  }
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000960 	.word	0x20000960

08005368 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e033      	b.n	80053e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fe fc5a 	bl	8003c40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d118      	bne.n	80053d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80053ae:	f023 0302 	bic.w	r3, r3, #2
 80053b2:	f043 0202 	orr.w	r2, r3, #2
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fa96 	bl	80058ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	f023 0303 	bic.w	r3, r3, #3
 80053ce:	f043 0201 	orr.w	r2, r3, #1
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	641a      	str	r2, [r3, #64]	; 0x40
 80053d6:	e001      	b.n	80053dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_ADC_Start+0x1a>
 8005406:	2302      	movs	r3, #2
 8005408:	e097      	b.n	800553a <HAL_ADC_Start+0x14a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b01      	cmp	r3, #1
 800541e:	d018      	beq.n	8005452 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0201 	orr.w	r2, r2, #1
 800542e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005430:	4b45      	ldr	r3, [pc, #276]	; (8005548 <HAL_ADC_Start+0x158>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a45      	ldr	r2, [pc, #276]	; (800554c <HAL_ADC_Start+0x15c>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	0c9a      	lsrs	r2, r3, #18
 800543c:	4613      	mov	r3, r2
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	4413      	add	r3, r2
 8005442:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005444:	e002      	b.n	800544c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	3b01      	subs	r3, #1
 800544a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f9      	bne.n	8005446 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b01      	cmp	r3, #1
 800545e:	d15f      	bne.n	8005520 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005468:	f023 0301 	bic.w	r3, r3, #1
 800546c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800548a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800549a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549e:	d106      	bne.n	80054ae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a4:	f023 0206 	bic.w	r2, r3, #6
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	645a      	str	r2, [r3, #68]	; 0x44
 80054ac:	e002      	b.n	80054b4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054bc:	4b24      	ldr	r3, [pc, #144]	; (8005550 <HAL_ADC_Start+0x160>)
 80054be:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80054c8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f003 031f 	and.w	r3, r3, #31
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10f      	bne.n	80054f6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d129      	bne.n	8005538 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	e020      	b.n	8005538 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a16      	ldr	r2, [pc, #88]	; (8005554 <HAL_ADC_Start+0x164>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d11b      	bne.n	8005538 <HAL_ADC_Start+0x148>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d114      	bne.n	8005538 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800551c:	609a      	str	r2, [r3, #8]
 800551e:	e00b      	b.n	8005538 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	f043 0210 	orr.w	r2, r3, #16
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005530:	f043 0201 	orr.w	r2, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	2000093c 	.word	0x2000093c
 800554c:	431bde83 	.word	0x431bde83
 8005550:	40012300 	.word	0x40012300
 8005554:	40012000 	.word	0x40012000

08005558 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005574:	d113      	bne.n	800559e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005584:	d10b      	bne.n	800559e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	f043 0220 	orr.w	r2, r3, #32
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e063      	b.n	8005666 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800559e:	f7ff feb3 	bl	8005308 <HAL_GetTick>
 80055a2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80055a4:	e021      	b.n	80055ea <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ac:	d01d      	beq.n	80055ea <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <HAL_ADC_PollForConversion+0x6c>
 80055b4:	f7ff fea8 	bl	8005308 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d212      	bcs.n	80055ea <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d00b      	beq.n	80055ea <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f043 0204 	orr.w	r2, r3, #4
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e03d      	b.n	8005666 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d1d6      	bne.n	80055a6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0212 	mvn.w	r2, #18
 8005600:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d123      	bne.n	8005664 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005620:	2b00      	cmp	r3, #0
 8005622:	d11f      	bne.n	8005664 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800562e:	2b00      	cmp	r3, #0
 8005630:	d006      	beq.n	8005640 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800563c:	2b00      	cmp	r3, #0
 800563e:	d111      	bne.n	8005664 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d105      	bne.n	8005664 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	f043 0201 	orr.w	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800567c:	4618      	mov	r0, r3
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_ADC_ConfigChannel+0x1c>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e113      	b.n	80058cc <HAL_ADC_ConfigChannel+0x244>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b09      	cmp	r3, #9
 80056b2:	d925      	bls.n	8005700 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68d9      	ldr	r1, [r3, #12]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	461a      	mov	r2, r3
 80056c2:	4613      	mov	r3, r2
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	4413      	add	r3, r2
 80056c8:	3b1e      	subs	r3, #30
 80056ca:	2207      	movs	r2, #7
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	43da      	mvns	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	400a      	ands	r2, r1
 80056d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68d9      	ldr	r1, [r3, #12]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	4618      	mov	r0, r3
 80056ec:	4603      	mov	r3, r0
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	4403      	add	r3, r0
 80056f2:	3b1e      	subs	r3, #30
 80056f4:	409a      	lsls	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	60da      	str	r2, [r3, #12]
 80056fe:	e022      	b.n	8005746 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6919      	ldr	r1, [r3, #16]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	4613      	mov	r3, r2
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	4413      	add	r3, r2
 8005714:	2207      	movs	r2, #7
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	43da      	mvns	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	400a      	ands	r2, r1
 8005722:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6919      	ldr	r1, [r3, #16]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	b29b      	uxth	r3, r3
 8005734:	4618      	mov	r0, r3
 8005736:	4603      	mov	r3, r0
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4403      	add	r3, r0
 800573c:	409a      	lsls	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b06      	cmp	r3, #6
 800574c:	d824      	bhi.n	8005798 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	3b05      	subs	r3, #5
 8005760:	221f      	movs	r2, #31
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	43da      	mvns	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	400a      	ands	r2, r1
 800576e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	4618      	mov	r0, r3
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	3b05      	subs	r3, #5
 800578a:	fa00 f203 	lsl.w	r2, r0, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	635a      	str	r2, [r3, #52]	; 0x34
 8005796:	e04c      	b.n	8005832 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b0c      	cmp	r3, #12
 800579e:	d824      	bhi.n	80057ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	3b23      	subs	r3, #35	; 0x23
 80057b2:	221f      	movs	r2, #31
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43da      	mvns	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	400a      	ands	r2, r1
 80057c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	4618      	mov	r0, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	3b23      	subs	r3, #35	; 0x23
 80057dc:	fa00 f203 	lsl.w	r2, r0, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
 80057e8:	e023      	b.n	8005832 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	4613      	mov	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	3b41      	subs	r3, #65	; 0x41
 80057fc:	221f      	movs	r2, #31
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	43da      	mvns	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	400a      	ands	r2, r1
 800580a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	4618      	mov	r0, r3
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	4613      	mov	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	3b41      	subs	r3, #65	; 0x41
 8005826:	fa00 f203 	lsl.w	r2, r0, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005832:	4b29      	ldr	r3, [pc, #164]	; (80058d8 <HAL_ADC_ConfigChannel+0x250>)
 8005834:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a28      	ldr	r2, [pc, #160]	; (80058dc <HAL_ADC_ConfigChannel+0x254>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d10f      	bne.n	8005860 <HAL_ADC_ConfigChannel+0x1d8>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b12      	cmp	r3, #18
 8005846:	d10b      	bne.n	8005860 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <HAL_ADC_ConfigChannel+0x254>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d12b      	bne.n	80058c2 <HAL_ADC_ConfigChannel+0x23a>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1c      	ldr	r2, [pc, #112]	; (80058e0 <HAL_ADC_ConfigChannel+0x258>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d003      	beq.n	800587c <HAL_ADC_ConfigChannel+0x1f4>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b11      	cmp	r3, #17
 800587a:	d122      	bne.n	80058c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a11      	ldr	r2, [pc, #68]	; (80058e0 <HAL_ADC_ConfigChannel+0x258>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d111      	bne.n	80058c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800589e:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <HAL_ADC_ConfigChannel+0x25c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a11      	ldr	r2, [pc, #68]	; (80058e8 <HAL_ADC_ConfigChannel+0x260>)
 80058a4:	fba2 2303 	umull	r2, r3, r2, r3
 80058a8:	0c9a      	lsrs	r2, r3, #18
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80058b4:	e002      	b.n	80058bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f9      	bne.n	80058b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	40012300 	.word	0x40012300
 80058dc:	40012000 	.word	0x40012000
 80058e0:	10000012 	.word	0x10000012
 80058e4:	2000093c 	.word	0x2000093c
 80058e8:	431bde83 	.word	0x431bde83

080058ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058f4:	4b79      	ldr	r3, [pc, #484]	; (8005adc <ADC_Init+0x1f0>)
 80058f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	431a      	orrs	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005920:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6859      	ldr	r1, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	021a      	lsls	r2, r3, #8
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6859      	ldr	r1, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6899      	ldr	r1, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597e:	4a58      	ldr	r2, [pc, #352]	; (8005ae0 <ADC_Init+0x1f4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d022      	beq.n	80059ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005992:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6899      	ldr	r1, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80059b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6899      	ldr	r1, [r3, #8]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	609a      	str	r2, [r3, #8]
 80059c8:	e00f      	b.n	80059ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80059e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0202 	bic.w	r2, r2, #2
 80059f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6899      	ldr	r1, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	7e1b      	ldrb	r3, [r3, #24]
 8005a04:	005a      	lsls	r2, r3, #1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01b      	beq.n	8005a50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005a36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6859      	ldr	r1, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	3b01      	subs	r3, #1
 8005a44:	035a      	lsls	r2, r3, #13
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
 8005a4e:	e007      	b.n	8005a60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	051a      	lsls	r2, r3, #20
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6899      	ldr	r1, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005aa2:	025a      	lsls	r2, r3, #9
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6899      	ldr	r1, [r3, #8]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	029a      	lsls	r2, r3, #10
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	609a      	str	r2, [r3, #8]
}
 8005ad0:	bf00      	nop
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	40012300 	.word	0x40012300
 8005ae0:	0f000001 	.word	0x0f000001

08005ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005af4:	4b0c      	ldr	r3, [pc, #48]	; (8005b28 <__NVIC_SetPriorityGrouping+0x44>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b00:	4013      	ands	r3, r2
 8005b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b16:	4a04      	ldr	r2, [pc, #16]	; (8005b28 <__NVIC_SetPriorityGrouping+0x44>)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	60d3      	str	r3, [r2, #12]
}
 8005b1c:	bf00      	nop
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	e000ed00 	.word	0xe000ed00

08005b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b30:	4b04      	ldr	r3, [pc, #16]	; (8005b44 <__NVIC_GetPriorityGrouping+0x18>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	0a1b      	lsrs	r3, r3, #8
 8005b36:	f003 0307 	and.w	r3, r3, #7
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	e000ed00 	.word	0xe000ed00

08005b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	db0b      	blt.n	8005b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	f003 021f 	and.w	r2, r3, #31
 8005b60:	4907      	ldr	r1, [pc, #28]	; (8005b80 <__NVIC_EnableIRQ+0x38>)
 8005b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	2001      	movs	r0, #1
 8005b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	e000e100 	.word	0xe000e100

08005b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	db0a      	blt.n	8005bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	490c      	ldr	r1, [pc, #48]	; (8005bd0 <__NVIC_SetPriority+0x4c>)
 8005b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba2:	0112      	lsls	r2, r2, #4
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bac:	e00a      	b.n	8005bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	4908      	ldr	r1, [pc, #32]	; (8005bd4 <__NVIC_SetPriority+0x50>)
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	3b04      	subs	r3, #4
 8005bbc:	0112      	lsls	r2, r2, #4
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	761a      	strb	r2, [r3, #24]
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	e000e100 	.word	0xe000e100
 8005bd4:	e000ed00 	.word	0xe000ed00

08005bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b089      	sub	sp, #36	; 0x24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	f1c3 0307 	rsb	r3, r3, #7
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	bf28      	it	cs
 8005bf6:	2304      	movcs	r3, #4
 8005bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	2b06      	cmp	r3, #6
 8005c00:	d902      	bls.n	8005c08 <NVIC_EncodePriority+0x30>
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	3b03      	subs	r3, #3
 8005c06:	e000      	b.n	8005c0a <NVIC_EncodePriority+0x32>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	43da      	mvns	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	401a      	ands	r2, r3
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c20:	f04f 31ff 	mov.w	r1, #4294967295
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2a:	43d9      	mvns	r1, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c30:	4313      	orrs	r3, r2
         );
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3724      	adds	r7, #36	; 0x24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c50:	d301      	bcc.n	8005c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c52:	2301      	movs	r3, #1
 8005c54:	e00f      	b.n	8005c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c56:	4a0a      	ldr	r2, [pc, #40]	; (8005c80 <SysTick_Config+0x40>)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c5e:	210f      	movs	r1, #15
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295
 8005c64:	f7ff ff8e 	bl	8005b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c68:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <SysTick_Config+0x40>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c6e:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <SysTick_Config+0x40>)
 8005c70:	2207      	movs	r2, #7
 8005c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	e000e010 	.word	0xe000e010

08005c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff ff29 	bl	8005ae4 <__NVIC_SetPriorityGrouping>
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b086      	sub	sp, #24
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
 8005ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005cac:	f7ff ff3e 	bl	8005b2c <__NVIC_GetPriorityGrouping>
 8005cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	6978      	ldr	r0, [r7, #20]
 8005cb8:	f7ff ff8e 	bl	8005bd8 <NVIC_EncodePriority>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff ff5d 	bl	8005b84 <__NVIC_SetPriority>
}
 8005cca:	bf00      	nop
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b082      	sub	sp, #8
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	4603      	mov	r3, r0
 8005cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff ff31 	bl	8005b48 <__NVIC_EnableIRQ>
}
 8005ce6:	bf00      	nop
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff ffa2 	bl	8005c40 <SysTick_Config>
 8005cfc:	4603      	mov	r3, r0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b089      	sub	sp, #36	; 0x24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61fb      	str	r3, [r7, #28]
 8005d22:	e159      	b.n	8005fd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d24:	2201      	movs	r2, #1
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4013      	ands	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	f040 8148 	bne.w	8005fd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d005      	beq.n	8005d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d130      	bne.n	8005dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	2203      	movs	r2, #3
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	43db      	mvns	r3, r3
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d90:	2201      	movs	r2, #1
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	091b      	lsrs	r3, r3, #4
 8005da6:	f003 0201 	and.w	r2, r3, #1
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d017      	beq.n	8005df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	2203      	movs	r2, #3
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f003 0303 	and.w	r3, r3, #3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d123      	bne.n	8005e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	08da      	lsrs	r2, r3, #3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3208      	adds	r2, #8
 8005e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	220f      	movs	r2, #15
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	43db      	mvns	r3, r3
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	4013      	ands	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	08da      	lsrs	r2, r3, #3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3208      	adds	r2, #8
 8005e46:	69b9      	ldr	r1, [r7, #24]
 8005e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	2203      	movs	r2, #3
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	4013      	ands	r3, r2
 8005e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f003 0203 	and.w	r2, r3, #3
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 80a2 	beq.w	8005fd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	4b57      	ldr	r3, [pc, #348]	; (8005ff0 <HAL_GPIO_Init+0x2e8>)
 8005e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e96:	4a56      	ldr	r2, [pc, #344]	; (8005ff0 <HAL_GPIO_Init+0x2e8>)
 8005e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8005e9e:	4b54      	ldr	r3, [pc, #336]	; (8005ff0 <HAL_GPIO_Init+0x2e8>)
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005eaa:	4a52      	ldr	r2, [pc, #328]	; (8005ff4 <HAL_GPIO_Init+0x2ec>)
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	089b      	lsrs	r3, r3, #2
 8005eb0:	3302      	adds	r3, #2
 8005eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	220f      	movs	r2, #15
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a49      	ldr	r2, [pc, #292]	; (8005ff8 <HAL_GPIO_Init+0x2f0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d019      	beq.n	8005f0a <HAL_GPIO_Init+0x202>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a48      	ldr	r2, [pc, #288]	; (8005ffc <HAL_GPIO_Init+0x2f4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d013      	beq.n	8005f06 <HAL_GPIO_Init+0x1fe>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a47      	ldr	r2, [pc, #284]	; (8006000 <HAL_GPIO_Init+0x2f8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00d      	beq.n	8005f02 <HAL_GPIO_Init+0x1fa>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a46      	ldr	r2, [pc, #280]	; (8006004 <HAL_GPIO_Init+0x2fc>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d007      	beq.n	8005efe <HAL_GPIO_Init+0x1f6>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a45      	ldr	r2, [pc, #276]	; (8006008 <HAL_GPIO_Init+0x300>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d101      	bne.n	8005efa <HAL_GPIO_Init+0x1f2>
 8005ef6:	2304      	movs	r3, #4
 8005ef8:	e008      	b.n	8005f0c <HAL_GPIO_Init+0x204>
 8005efa:	2307      	movs	r3, #7
 8005efc:	e006      	b.n	8005f0c <HAL_GPIO_Init+0x204>
 8005efe:	2303      	movs	r3, #3
 8005f00:	e004      	b.n	8005f0c <HAL_GPIO_Init+0x204>
 8005f02:	2302      	movs	r3, #2
 8005f04:	e002      	b.n	8005f0c <HAL_GPIO_Init+0x204>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e000      	b.n	8005f0c <HAL_GPIO_Init+0x204>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	f002 0203 	and.w	r2, r2, #3
 8005f12:	0092      	lsls	r2, r2, #2
 8005f14:	4093      	lsls	r3, r2
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f1c:	4935      	ldr	r1, [pc, #212]	; (8005ff4 <HAL_GPIO_Init+0x2ec>)
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	089b      	lsrs	r3, r3, #2
 8005f22:	3302      	adds	r3, #2
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f2a:	4b38      	ldr	r3, [pc, #224]	; (800600c <HAL_GPIO_Init+0x304>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	43db      	mvns	r3, r3
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	4013      	ands	r3, r2
 8005f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f4e:	4a2f      	ldr	r2, [pc, #188]	; (800600c <HAL_GPIO_Init+0x304>)
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f54:	4b2d      	ldr	r3, [pc, #180]	; (800600c <HAL_GPIO_Init+0x304>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4013      	ands	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f78:	4a24      	ldr	r2, [pc, #144]	; (800600c <HAL_GPIO_Init+0x304>)
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f7e:	4b23      	ldr	r3, [pc, #140]	; (800600c <HAL_GPIO_Init+0x304>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	43db      	mvns	r3, r3
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fa2:	4a1a      	ldr	r2, [pc, #104]	; (800600c <HAL_GPIO_Init+0x304>)
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fa8:	4b18      	ldr	r3, [pc, #96]	; (800600c <HAL_GPIO_Init+0x304>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005fcc:	4a0f      	ldr	r2, [pc, #60]	; (800600c <HAL_GPIO_Init+0x304>)
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	61fb      	str	r3, [r7, #28]
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	2b0f      	cmp	r3, #15
 8005fdc:	f67f aea2 	bls.w	8005d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop
 8005fe4:	3724      	adds	r7, #36	; 0x24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	40023800 	.word	0x40023800
 8005ff4:	40013800 	.word	0x40013800
 8005ff8:	40020000 	.word	0x40020000
 8005ffc:	40020400 	.word	0x40020400
 8006000:	40020800 	.word	0x40020800
 8006004:	40020c00 	.word	0x40020c00
 8006008:	40021000 	.word	0x40021000
 800600c:	40013c00 	.word	0x40013c00

08006010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691a      	ldr	r2, [r3, #16]
 8006020:	887b      	ldrh	r3, [r7, #2]
 8006022:	4013      	ands	r3, r2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006028:	2301      	movs	r3, #1
 800602a:	73fb      	strb	r3, [r7, #15]
 800602c:	e001      	b.n	8006032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800602e:	2300      	movs	r3, #0
 8006030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006032:	7bfb      	ldrb	r3, [r7, #15]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	807b      	strh	r3, [r7, #2]
 800604c:	4613      	mov	r3, r2
 800604e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006050:	787b      	ldrb	r3, [r7, #1]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006056:	887a      	ldrh	r2, [r7, #2]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800605c:	e003      	b.n	8006066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800605e:	887b      	ldrh	r3, [r7, #2]
 8006060:	041a      	lsls	r2, r3, #16
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	619a      	str	r2, [r3, #24]
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800607e:	4b08      	ldr	r3, [pc, #32]	; (80060a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006080:	695a      	ldr	r2, [r3, #20]
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	4013      	ands	r3, r2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d006      	beq.n	8006098 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800608a:	4a05      	ldr	r2, [pc, #20]	; (80060a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800608c:	88fb      	ldrh	r3, [r7, #6]
 800608e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006090:	88fb      	ldrh	r3, [r7, #6]
 8006092:	4618      	mov	r0, r3
 8006094:	f7fb fd3e 	bl	8001b14 <HAL_GPIO_EXTI_Callback>
  }
}
 8006098:	bf00      	nop
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40013c00 	.word	0x40013c00

080060a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e12b      	b.n	800630e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fd fdfc 	bl	8003cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2224      	movs	r2, #36	; 0x24
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0201 	bic.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006106:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006108:	f001 fd22 	bl	8007b50 <HAL_RCC_GetPCLK1Freq>
 800610c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	4a81      	ldr	r2, [pc, #516]	; (8006318 <HAL_I2C_Init+0x274>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d807      	bhi.n	8006128 <HAL_I2C_Init+0x84>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4a80      	ldr	r2, [pc, #512]	; (800631c <HAL_I2C_Init+0x278>)
 800611c:	4293      	cmp	r3, r2
 800611e:	bf94      	ite	ls
 8006120:	2301      	movls	r3, #1
 8006122:	2300      	movhi	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	e006      	b.n	8006136 <HAL_I2C_Init+0x92>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4a7d      	ldr	r2, [pc, #500]	; (8006320 <HAL_I2C_Init+0x27c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	bf94      	ite	ls
 8006130:	2301      	movls	r3, #1
 8006132:	2300      	movhi	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e0e7      	b.n	800630e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4a78      	ldr	r2, [pc, #480]	; (8006324 <HAL_I2C_Init+0x280>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	0c9b      	lsrs	r3, r3, #18
 8006148:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	4a6a      	ldr	r2, [pc, #424]	; (8006318 <HAL_I2C_Init+0x274>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d802      	bhi.n	8006178 <HAL_I2C_Init+0xd4>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	3301      	adds	r3, #1
 8006176:	e009      	b.n	800618c <HAL_I2C_Init+0xe8>
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800617e:	fb02 f303 	mul.w	r3, r2, r3
 8006182:	4a69      	ldr	r2, [pc, #420]	; (8006328 <HAL_I2C_Init+0x284>)
 8006184:	fba2 2303 	umull	r2, r3, r2, r3
 8006188:	099b      	lsrs	r3, r3, #6
 800618a:	3301      	adds	r3, #1
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	430b      	orrs	r3, r1
 8006192:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800619e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	495c      	ldr	r1, [pc, #368]	; (8006318 <HAL_I2C_Init+0x274>)
 80061a8:	428b      	cmp	r3, r1
 80061aa:	d819      	bhi.n	80061e0 <HAL_I2C_Init+0x13c>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	1e59      	subs	r1, r3, #1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80061ba:	1c59      	adds	r1, r3, #1
 80061bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80061c0:	400b      	ands	r3, r1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_I2C_Init+0x138>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1e59      	subs	r1, r3, #1
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80061d4:	3301      	adds	r3, #1
 80061d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061da:	e051      	b.n	8006280 <HAL_I2C_Init+0x1dc>
 80061dc:	2304      	movs	r3, #4
 80061de:	e04f      	b.n	8006280 <HAL_I2C_Init+0x1dc>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d111      	bne.n	800620c <HAL_I2C_Init+0x168>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	1e58      	subs	r0, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6859      	ldr	r1, [r3, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	440b      	add	r3, r1
 80061f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80061fa:	3301      	adds	r3, #1
 80061fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006200:	2b00      	cmp	r3, #0
 8006202:	bf0c      	ite	eq
 8006204:	2301      	moveq	r3, #1
 8006206:	2300      	movne	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	e012      	b.n	8006232 <HAL_I2C_Init+0x18e>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	1e58      	subs	r0, r3, #1
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6859      	ldr	r1, [r3, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	0099      	lsls	r1, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006222:	3301      	adds	r3, #1
 8006224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006228:	2b00      	cmp	r3, #0
 800622a:	bf0c      	ite	eq
 800622c:	2301      	moveq	r3, #1
 800622e:	2300      	movne	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <HAL_I2C_Init+0x196>
 8006236:	2301      	movs	r3, #1
 8006238:	e022      	b.n	8006280 <HAL_I2C_Init+0x1dc>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10e      	bne.n	8006260 <HAL_I2C_Init+0x1bc>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	1e58      	subs	r0, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6859      	ldr	r1, [r3, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	440b      	add	r3, r1
 8006250:	fbb0 f3f3 	udiv	r3, r0, r3
 8006254:	3301      	adds	r3, #1
 8006256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800625a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625e:	e00f      	b.n	8006280 <HAL_I2C_Init+0x1dc>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	1e58      	subs	r0, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6859      	ldr	r1, [r3, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	440b      	add	r3, r1
 800626e:	0099      	lsls	r1, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	fbb0 f3f3 	udiv	r3, r0, r3
 8006276:	3301      	adds	r3, #1
 8006278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800627c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	6809      	ldr	r1, [r1, #0]
 8006284:	4313      	orrs	r3, r2
 8006286:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69da      	ldr	r2, [r3, #28]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80062ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6911      	ldr	r1, [r2, #16]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	68d2      	ldr	r2, [r2, #12]
 80062ba:	4311      	orrs	r1, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6812      	ldr	r2, [r2, #0]
 80062c0:	430b      	orrs	r3, r1
 80062c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695a      	ldr	r2, [r3, #20]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	000186a0 	.word	0x000186a0
 800631c:	001e847f 	.word	0x001e847f
 8006320:	003d08ff 	.word	0x003d08ff
 8006324:	431bde83 	.word	0x431bde83
 8006328:	10624dd3 	.word	0x10624dd3

0800632c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af02      	add	r7, sp, #8
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	607a      	str	r2, [r7, #4]
 8006336:	461a      	mov	r2, r3
 8006338:	460b      	mov	r3, r1
 800633a:	817b      	strh	r3, [r7, #10]
 800633c:	4613      	mov	r3, r2
 800633e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006340:	f7fe ffe2 	bl	8005308 <HAL_GetTick>
 8006344:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b20      	cmp	r3, #32
 8006350:	f040 80e0 	bne.w	8006514 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	2319      	movs	r3, #25
 800635a:	2201      	movs	r2, #1
 800635c:	4970      	ldr	r1, [pc, #448]	; (8006520 <HAL_I2C_Master_Transmit+0x1f4>)
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 fde8 	bl	8006f34 <I2C_WaitOnFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800636a:	2302      	movs	r3, #2
 800636c:	e0d3      	b.n	8006516 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_I2C_Master_Transmit+0x50>
 8006378:	2302      	movs	r3, #2
 800637a:	e0cc      	b.n	8006516 <HAL_I2C_Master_Transmit+0x1ea>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b01      	cmp	r3, #1
 8006390:	d007      	beq.n	80063a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0201 	orr.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2221      	movs	r2, #33	; 0x21
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2210      	movs	r2, #16
 80063be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	893a      	ldrh	r2, [r7, #8]
 80063d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a50      	ldr	r2, [pc, #320]	; (8006524 <HAL_I2C_Master_Transmit+0x1f8>)
 80063e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80063e4:	8979      	ldrh	r1, [r7, #10]
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	6a3a      	ldr	r2, [r7, #32]
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 fbbc 	bl	8006b68 <I2C_MasterRequestWrite>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e08d      	b.n	8006516 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063fa:	2300      	movs	r3, #0
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	613b      	str	r3, [r7, #16]
 800640e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006410:	e066      	b.n	80064e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	6a39      	ldr	r1, [r7, #32]
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fe62 	bl	80070e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00d      	beq.n	800643e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	2b04      	cmp	r3, #4
 8006428:	d107      	bne.n	800643a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006438:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e06b      	b.n	8006516 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	781a      	ldrb	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006458:	b29b      	uxth	r3, r3
 800645a:	3b01      	subs	r3, #1
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006466:	3b01      	subs	r3, #1
 8006468:	b29a      	uxth	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b04      	cmp	r3, #4
 800647a:	d11b      	bne.n	80064b4 <HAL_I2C_Master_Transmit+0x188>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006480:	2b00      	cmp	r3, #0
 8006482:	d017      	beq.n	80064b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	781a      	ldrb	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	6a39      	ldr	r1, [r7, #32]
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 fe52 	bl	8007162 <I2C_WaitOnBTFFlagUntilTimeout>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00d      	beq.n	80064e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d107      	bne.n	80064dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e01a      	b.n	8006516 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d194      	bne.n	8006412 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	e000      	b.n	8006516 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006514:	2302      	movs	r3, #2
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	00100002 	.word	0x00100002
 8006524:	ffff0000 	.word	0xffff0000

08006528 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b08c      	sub	sp, #48	; 0x30
 800652c:	af02      	add	r7, sp, #8
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	607a      	str	r2, [r7, #4]
 8006532:	461a      	mov	r2, r3
 8006534:	460b      	mov	r3, r1
 8006536:	817b      	strh	r3, [r7, #10]
 8006538:	4613      	mov	r3, r2
 800653a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800653c:	f7fe fee4 	bl	8005308 <HAL_GetTick>
 8006540:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b20      	cmp	r3, #32
 800654c:	f040 820b 	bne.w	8006966 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	2319      	movs	r3, #25
 8006556:	2201      	movs	r2, #1
 8006558:	497c      	ldr	r1, [pc, #496]	; (800674c <HAL_I2C_Master_Receive+0x224>)
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 fcea 	bl	8006f34 <I2C_WaitOnFlagUntilTimeout>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006566:	2302      	movs	r3, #2
 8006568:	e1fe      	b.n	8006968 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_I2C_Master_Receive+0x50>
 8006574:	2302      	movs	r3, #2
 8006576:	e1f7      	b.n	8006968 <HAL_I2C_Master_Receive+0x440>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b01      	cmp	r3, #1
 800658c:	d007      	beq.n	800659e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0201 	orr.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2222      	movs	r2, #34	; 0x22
 80065b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2210      	movs	r2, #16
 80065ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	893a      	ldrh	r2, [r7, #8]
 80065ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4a5c      	ldr	r2, [pc, #368]	; (8006750 <HAL_I2C_Master_Receive+0x228>)
 80065de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80065e0:	8979      	ldrh	r1, [r7, #10]
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 fb40 	bl	8006c6c <I2C_MasterRequestRead>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e1b8      	b.n	8006968 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d113      	bne.n	8006626 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065fe:	2300      	movs	r3, #0
 8006600:	623b      	str	r3, [r7, #32]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	623b      	str	r3, [r7, #32]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	623b      	str	r3, [r7, #32]
 8006612:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	e18c      	b.n	8006940 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662a:	2b01      	cmp	r3, #1
 800662c:	d11b      	bne.n	8006666 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800663c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800663e:	2300      	movs	r3, #0
 8006640:	61fb      	str	r3, [r7, #28]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	61fb      	str	r3, [r7, #28]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	61fb      	str	r3, [r7, #28]
 8006652:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	e16c      	b.n	8006940 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666a:	2b02      	cmp	r3, #2
 800666c:	d11b      	bne.n	80066a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800667c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800668c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800668e:	2300      	movs	r3, #0
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	61bb      	str	r3, [r7, #24]
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	e14c      	b.n	8006940 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066b6:	2300      	movs	r3, #0
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80066cc:	e138      	b.n	8006940 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	f200 80f1 	bhi.w	80068ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d123      	bne.n	8006728 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 fd7d 	bl	80071e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e139      	b.n	8006968 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	691a      	ldr	r2, [r3, #16]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006710:	3b01      	subs	r3, #1
 8006712:	b29a      	uxth	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	b29a      	uxth	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006726:	e10b      	b.n	8006940 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672c:	2b02      	cmp	r3, #2
 800672e:	d14e      	bne.n	80067ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006736:	2200      	movs	r2, #0
 8006738:	4906      	ldr	r1, [pc, #24]	; (8006754 <HAL_I2C_Master_Receive+0x22c>)
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 fbfa 	bl	8006f34 <I2C_WaitOnFlagUntilTimeout>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d008      	beq.n	8006758 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e10e      	b.n	8006968 <HAL_I2C_Master_Receive+0x440>
 800674a:	bf00      	nop
 800674c:	00100002 	.word	0x00100002
 8006750:	ffff0000 	.word	0xffff0000
 8006754:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	691a      	ldr	r2, [r3, #16]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006790:	b29b      	uxth	r3, r3
 8006792:	3b01      	subs	r3, #1
 8006794:	b29a      	uxth	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	b2d2      	uxtb	r2, r2
 80067a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b6:	3b01      	subs	r3, #1
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067cc:	e0b8      	b.n	8006940 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	2200      	movs	r2, #0
 80067d6:	4966      	ldr	r1, [pc, #408]	; (8006970 <HAL_I2C_Master_Receive+0x448>)
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fbab 	bl	8006f34 <I2C_WaitOnFlagUntilTimeout>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e0bf      	b.n	8006968 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691a      	ldr	r2, [r3, #16]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	2200      	movs	r2, #0
 8006832:	494f      	ldr	r1, [pc, #316]	; (8006970 <HAL_I2C_Master_Receive+0x448>)
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 fb7d 	bl	8006f34 <I2C_WaitOnFlagUntilTimeout>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e091      	b.n	8006968 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006852:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006870:	3b01      	subs	r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687c:	b29b      	uxth	r3, r3
 800687e:	3b01      	subs	r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068b8:	e042      	b.n	8006940 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 fc90 	bl	80071e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e04c      	b.n	8006968 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	3b01      	subs	r3, #1
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	f003 0304 	and.w	r3, r3, #4
 800690a:	2b04      	cmp	r3, #4
 800690c:	d118      	bne.n	8006940 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006936:	b29b      	uxth	r3, r3
 8006938:	3b01      	subs	r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006944:	2b00      	cmp	r3, #0
 8006946:	f47f aec2 	bne.w	80066ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2220      	movs	r2, #32
 800694e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	e000      	b.n	8006968 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006966:	2302      	movs	r3, #2
  }
}
 8006968:	4618      	mov	r0, r3
 800696a:	3728      	adds	r7, #40	; 0x28
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	00010004 	.word	0x00010004

08006974 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af02      	add	r7, sp, #8
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	4608      	mov	r0, r1
 800697e:	4611      	mov	r1, r2
 8006980:	461a      	mov	r2, r3
 8006982:	4603      	mov	r3, r0
 8006984:	817b      	strh	r3, [r7, #10]
 8006986:	460b      	mov	r3, r1
 8006988:	813b      	strh	r3, [r7, #8]
 800698a:	4613      	mov	r3, r2
 800698c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800698e:	f7fe fcbb 	bl	8005308 <HAL_GetTick>
 8006992:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b20      	cmp	r3, #32
 800699e:	f040 80d9 	bne.w	8006b54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	2319      	movs	r3, #25
 80069a8:	2201      	movs	r2, #1
 80069aa:	496d      	ldr	r1, [pc, #436]	; (8006b60 <HAL_I2C_Mem_Write+0x1ec>)
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 fac1 	bl	8006f34 <I2C_WaitOnFlagUntilTimeout>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80069b8:	2302      	movs	r3, #2
 80069ba:	e0cc      	b.n	8006b56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_I2C_Mem_Write+0x56>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e0c5      	b.n	8006b56 <HAL_I2C_Mem_Write+0x1e2>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d007      	beq.n	80069f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0201 	orr.w	r2, r2, #1
 80069ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2221      	movs	r2, #33	; 0x21
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2240      	movs	r2, #64	; 0x40
 8006a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a3a      	ldr	r2, [r7, #32]
 8006a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4a4d      	ldr	r2, [pc, #308]	; (8006b64 <HAL_I2C_Mem_Write+0x1f0>)
 8006a30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a32:	88f8      	ldrh	r0, [r7, #6]
 8006a34:	893a      	ldrh	r2, [r7, #8]
 8006a36:	8979      	ldrh	r1, [r7, #10]
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	9301      	str	r3, [sp, #4]
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	4603      	mov	r3, r0
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f9e0 	bl	8006e08 <I2C_RequestMemoryWrite>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d052      	beq.n	8006af4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e081      	b.n	8006b56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 fb42 	bl	80070e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00d      	beq.n	8006a7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d107      	bne.n	8006a7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e06b      	b.n	8006b56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	781a      	ldrb	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d11b      	bne.n	8006af4 <HAL_I2C_Mem_Write+0x180>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d017      	beq.n	8006af4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	781a      	ldrb	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1aa      	bne.n	8006a52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 fb2e 	bl	8007162 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00d      	beq.n	8006b28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d107      	bne.n	8006b24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e016      	b.n	8006b56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e000      	b.n	8006b56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006b54:	2302      	movs	r3, #2
  }
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	00100002 	.word	0x00100002
 8006b64:	ffff0000 	.word	0xffff0000

08006b68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af02      	add	r7, sp, #8
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	607a      	str	r2, [r7, #4]
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	460b      	mov	r3, r1
 8006b76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d006      	beq.n	8006b92 <I2C_MasterRequestWrite+0x2a>
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d003      	beq.n	8006b92 <I2C_MasterRequestWrite+0x2a>
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b90:	d108      	bne.n	8006ba4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	e00b      	b.n	8006bbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba8:	2b12      	cmp	r3, #18
 8006baa:	d107      	bne.n	8006bbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 f9b3 	bl	8006f34 <I2C_WaitOnFlagUntilTimeout>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00d      	beq.n	8006bf0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be2:	d103      	bne.n	8006bec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e035      	b.n	8006c5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bf8:	d108      	bne.n	8006c0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bfa:	897b      	ldrh	r3, [r7, #10]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	461a      	mov	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c08:	611a      	str	r2, [r3, #16]
 8006c0a:	e01b      	b.n	8006c44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c0c:	897b      	ldrh	r3, [r7, #10]
 8006c0e:	11db      	asrs	r3, r3, #7
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	f003 0306 	and.w	r3, r3, #6
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	f063 030f 	orn	r3, r3, #15
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	490e      	ldr	r1, [pc, #56]	; (8006c64 <I2C_MasterRequestWrite+0xfc>)
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 f9d9 	bl	8006fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e010      	b.n	8006c5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c3a:	897b      	ldrh	r3, [r7, #10]
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	4907      	ldr	r1, [pc, #28]	; (8006c68 <I2C_MasterRequestWrite+0x100>)
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f9c9 	bl	8006fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	00010008 	.word	0x00010008
 8006c68:	00010002 	.word	0x00010002

08006c6c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af02      	add	r7, sp, #8
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	607a      	str	r2, [r7, #4]
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c90:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	d006      	beq.n	8006ca6 <I2C_MasterRequestRead+0x3a>
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d003      	beq.n	8006ca6 <I2C_MasterRequestRead+0x3a>
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ca4:	d108      	bne.n	8006cb8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	e00b      	b.n	8006cd0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	2b11      	cmp	r3, #17
 8006cbe:	d107      	bne.n	8006cd0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 f929 	bl	8006f34 <I2C_WaitOnFlagUntilTimeout>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00d      	beq.n	8006d04 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf6:	d103      	bne.n	8006d00 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e079      	b.n	8006df8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d0c:	d108      	bne.n	8006d20 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d0e:	897b      	ldrh	r3, [r7, #10]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	f043 0301 	orr.w	r3, r3, #1
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	611a      	str	r2, [r3, #16]
 8006d1e:	e05f      	b.n	8006de0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006d20:	897b      	ldrh	r3, [r7, #10]
 8006d22:	11db      	asrs	r3, r3, #7
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	f003 0306 	and.w	r3, r3, #6
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	f063 030f 	orn	r3, r3, #15
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	4930      	ldr	r1, [pc, #192]	; (8006e00 <I2C_MasterRequestRead+0x194>)
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f94f 	bl	8006fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e054      	b.n	8006df8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006d4e:	897b      	ldrh	r3, [r7, #10]
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	4929      	ldr	r1, [pc, #164]	; (8006e04 <I2C_MasterRequestRead+0x198>)
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 f93f 	bl	8006fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e044      	b.n	8006df8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	613b      	str	r3, [r7, #16]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d92:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 f8c7 	bl	8006f34 <I2C_WaitOnFlagUntilTimeout>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00d      	beq.n	8006dc8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dba:	d103      	bne.n	8006dc4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dc2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e017      	b.n	8006df8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006dc8:	897b      	ldrh	r3, [r7, #10]
 8006dca:	11db      	asrs	r3, r3, #7
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	f003 0306 	and.w	r3, r3, #6
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	f063 030e 	orn	r3, r3, #14
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	4907      	ldr	r1, [pc, #28]	; (8006e04 <I2C_MasterRequestRead+0x198>)
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f8fb 	bl	8006fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e000      	b.n	8006df8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	00010008 	.word	0x00010008
 8006e04:	00010002 	.word	0x00010002

08006e08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b088      	sub	sp, #32
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	4608      	mov	r0, r1
 8006e12:	4611      	mov	r1, r2
 8006e14:	461a      	mov	r2, r3
 8006e16:	4603      	mov	r3, r0
 8006e18:	817b      	strh	r3, [r7, #10]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	813b      	strh	r3, [r7, #8]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 f878 	bl	8006f34 <I2C_WaitOnFlagUntilTimeout>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00d      	beq.n	8006e66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e58:	d103      	bne.n	8006e62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e05f      	b.n	8006f26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e66:	897b      	ldrh	r3, [r7, #10]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	6a3a      	ldr	r2, [r7, #32]
 8006e7a:	492d      	ldr	r1, [pc, #180]	; (8006f30 <I2C_RequestMemoryWrite+0x128>)
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 f8b0 	bl	8006fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e04c      	b.n	8006f26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	617b      	str	r3, [r7, #20]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	617b      	str	r3, [r7, #20]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	617b      	str	r3, [r7, #20]
 8006ea0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea4:	6a39      	ldr	r1, [r7, #32]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 f91a 	bl	80070e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00d      	beq.n	8006ece <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d107      	bne.n	8006eca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ec8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e02b      	b.n	8006f26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ece:	88fb      	ldrh	r3, [r7, #6]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d105      	bne.n	8006ee0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ed4:	893b      	ldrh	r3, [r7, #8]
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	611a      	str	r2, [r3, #16]
 8006ede:	e021      	b.n	8006f24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ee0:	893b      	ldrh	r3, [r7, #8]
 8006ee2:	0a1b      	lsrs	r3, r3, #8
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef0:	6a39      	ldr	r1, [r7, #32]
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 f8f4 	bl	80070e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00d      	beq.n	8006f1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d107      	bne.n	8006f16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e005      	b.n	8006f26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f1a:	893b      	ldrh	r3, [r7, #8]
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	00010002 	.word	0x00010002

08006f34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	4613      	mov	r3, r2
 8006f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f44:	e025      	b.n	8006f92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4c:	d021      	beq.n	8006f92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f4e:	f7fe f9db 	bl	8005308 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d302      	bcc.n	8006f64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d116      	bne.n	8006f92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	f043 0220 	orr.w	r2, r3, #32
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e023      	b.n	8006fda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	0c1b      	lsrs	r3, r3, #16
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d10d      	bne.n	8006fb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	43da      	mvns	r2, r3
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	bf0c      	ite	eq
 8006fae:	2301      	moveq	r3, #1
 8006fb0:	2300      	movne	r3, #0
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	e00c      	b.n	8006fd2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	43da      	mvns	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bf0c      	ite	eq
 8006fca:	2301      	moveq	r3, #1
 8006fcc:	2300      	movne	r3, #0
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	79fb      	ldrb	r3, [r7, #7]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d0b6      	beq.n	8006f46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	607a      	str	r2, [r7, #4]
 8006fee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ff0:	e051      	b.n	8007096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007000:	d123      	bne.n	800704a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007010:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800701a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2220      	movs	r2, #32
 8007026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	f043 0204 	orr.w	r2, r3, #4
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e046      	b.n	80070d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007050:	d021      	beq.n	8007096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007052:	f7fe f959 	bl	8005308 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	429a      	cmp	r2, r3
 8007060:	d302      	bcc.n	8007068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d116      	bne.n	8007096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	f043 0220 	orr.w	r2, r3, #32
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e020      	b.n	80070d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	0c1b      	lsrs	r3, r3, #16
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b01      	cmp	r3, #1
 800709e:	d10c      	bne.n	80070ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	43da      	mvns	r2, r3
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	4013      	ands	r3, r2
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	bf14      	ite	ne
 80070b2:	2301      	movne	r3, #1
 80070b4:	2300      	moveq	r3, #0
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	e00b      	b.n	80070d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	43da      	mvns	r2, r3
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	4013      	ands	r3, r2
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	bf14      	ite	ne
 80070cc:	2301      	movne	r3, #1
 80070ce:	2300      	moveq	r3, #0
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d18d      	bne.n	8006ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070ec:	e02d      	b.n	800714a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 f8ce 	bl	8007290 <I2C_IsAcknowledgeFailed>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e02d      	b.n	800715a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007104:	d021      	beq.n	800714a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007106:	f7fe f8ff 	bl	8005308 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	429a      	cmp	r2, r3
 8007114:	d302      	bcc.n	800711c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d116      	bne.n	800714a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2220      	movs	r2, #32
 8007126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	f043 0220 	orr.w	r2, r3, #32
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e007      	b.n	800715a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007154:	2b80      	cmp	r3, #128	; 0x80
 8007156:	d1ca      	bne.n	80070ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800716e:	e02d      	b.n	80071cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 f88d 	bl	8007290 <I2C_IsAcknowledgeFailed>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e02d      	b.n	80071dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007186:	d021      	beq.n	80071cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007188:	f7fe f8be 	bl	8005308 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	429a      	cmp	r2, r3
 8007196:	d302      	bcc.n	800719e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d116      	bne.n	80071cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	f043 0220 	orr.w	r2, r3, #32
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e007      	b.n	80071dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	f003 0304 	and.w	r3, r3, #4
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d1ca      	bne.n	8007170 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071f0:	e042      	b.n	8007278 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b10      	cmp	r3, #16
 80071fe:	d119      	bne.n	8007234 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0210 	mvn.w	r2, #16
 8007208:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e029      	b.n	8007288 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007234:	f7fe f868 	bl	8005308 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	429a      	cmp	r2, r3
 8007242:	d302      	bcc.n	800724a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d116      	bne.n	8007278 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007264:	f043 0220 	orr.w	r2, r3, #32
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e007      	b.n	8007288 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007282:	2b40      	cmp	r3, #64	; 0x40
 8007284:	d1b5      	bne.n	80071f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a6:	d11b      	bne.n	80072e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	f043 0204 	orr.w	r2, r3, #4
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e000      	b.n	80072e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
	...

080072f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e267      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d075      	beq.n	80073fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800730e:	4b88      	ldr	r3, [pc, #544]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 030c 	and.w	r3, r3, #12
 8007316:	2b04      	cmp	r3, #4
 8007318:	d00c      	beq.n	8007334 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800731a:	4b85      	ldr	r3, [pc, #532]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007322:	2b08      	cmp	r3, #8
 8007324:	d112      	bne.n	800734c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007326:	4b82      	ldr	r3, [pc, #520]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800732e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007332:	d10b      	bne.n	800734c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007334:	4b7e      	ldr	r3, [pc, #504]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d05b      	beq.n	80073f8 <HAL_RCC_OscConfig+0x108>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d157      	bne.n	80073f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e242      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007354:	d106      	bne.n	8007364 <HAL_RCC_OscConfig+0x74>
 8007356:	4b76      	ldr	r3, [pc, #472]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a75      	ldr	r2, [pc, #468]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 800735c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	e01d      	b.n	80073a0 <HAL_RCC_OscConfig+0xb0>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800736c:	d10c      	bne.n	8007388 <HAL_RCC_OscConfig+0x98>
 800736e:	4b70      	ldr	r3, [pc, #448]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a6f      	ldr	r2, [pc, #444]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 8007374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	4b6d      	ldr	r3, [pc, #436]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a6c      	ldr	r2, [pc, #432]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 8007380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	e00b      	b.n	80073a0 <HAL_RCC_OscConfig+0xb0>
 8007388:	4b69      	ldr	r3, [pc, #420]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a68      	ldr	r2, [pc, #416]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 800738e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	4b66      	ldr	r3, [pc, #408]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a65      	ldr	r2, [pc, #404]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 800739a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800739e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d013      	beq.n	80073d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a8:	f7fd ffae 	bl	8005308 <HAL_GetTick>
 80073ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073b0:	f7fd ffaa 	bl	8005308 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b64      	cmp	r3, #100	; 0x64
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e207      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073c2:	4b5b      	ldr	r3, [pc, #364]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0f0      	beq.n	80073b0 <HAL_RCC_OscConfig+0xc0>
 80073ce:	e014      	b.n	80073fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073d0:	f7fd ff9a 	bl	8005308 <HAL_GetTick>
 80073d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073d6:	e008      	b.n	80073ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073d8:	f7fd ff96 	bl	8005308 <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	2b64      	cmp	r3, #100	; 0x64
 80073e4:	d901      	bls.n	80073ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e1f3      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ea:	4b51      	ldr	r3, [pc, #324]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1f0      	bne.n	80073d8 <HAL_RCC_OscConfig+0xe8>
 80073f6:	e000      	b.n	80073fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d063      	beq.n	80074ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007406:	4b4a      	ldr	r3, [pc, #296]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f003 030c 	and.w	r3, r3, #12
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00b      	beq.n	800742a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007412:	4b47      	ldr	r3, [pc, #284]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800741a:	2b08      	cmp	r3, #8
 800741c:	d11c      	bne.n	8007458 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800741e:	4b44      	ldr	r3, [pc, #272]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d116      	bne.n	8007458 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800742a:	4b41      	ldr	r3, [pc, #260]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d005      	beq.n	8007442 <HAL_RCC_OscConfig+0x152>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d001      	beq.n	8007442 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e1c7      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007442:	4b3b      	ldr	r3, [pc, #236]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	4937      	ldr	r1, [pc, #220]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 8007452:	4313      	orrs	r3, r2
 8007454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007456:	e03a      	b.n	80074ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d020      	beq.n	80074a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007460:	4b34      	ldr	r3, [pc, #208]	; (8007534 <HAL_RCC_OscConfig+0x244>)
 8007462:	2201      	movs	r2, #1
 8007464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007466:	f7fd ff4f 	bl	8005308 <HAL_GetTick>
 800746a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800746c:	e008      	b.n	8007480 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800746e:	f7fd ff4b 	bl	8005308 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d901      	bls.n	8007480 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e1a8      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007480:	4b2b      	ldr	r3, [pc, #172]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0f0      	beq.n	800746e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800748c:	4b28      	ldr	r3, [pc, #160]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	00db      	lsls	r3, r3, #3
 800749a:	4925      	ldr	r1, [pc, #148]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 800749c:	4313      	orrs	r3, r2
 800749e:	600b      	str	r3, [r1, #0]
 80074a0:	e015      	b.n	80074ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074a2:	4b24      	ldr	r3, [pc, #144]	; (8007534 <HAL_RCC_OscConfig+0x244>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a8:	f7fd ff2e 	bl	8005308 <HAL_GetTick>
 80074ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ae:	e008      	b.n	80074c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074b0:	f7fd ff2a 	bl	8005308 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e187      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074c2:	4b1b      	ldr	r3, [pc, #108]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1f0      	bne.n	80074b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0308 	and.w	r3, r3, #8
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d036      	beq.n	8007548 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d016      	beq.n	8007510 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074e2:	4b15      	ldr	r3, [pc, #84]	; (8007538 <HAL_RCC_OscConfig+0x248>)
 80074e4:	2201      	movs	r2, #1
 80074e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e8:	f7fd ff0e 	bl	8005308 <HAL_GetTick>
 80074ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074ee:	e008      	b.n	8007502 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074f0:	f7fd ff0a 	bl	8005308 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e167      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007502:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <HAL_RCC_OscConfig+0x240>)
 8007504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d0f0      	beq.n	80074f0 <HAL_RCC_OscConfig+0x200>
 800750e:	e01b      	b.n	8007548 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007510:	4b09      	ldr	r3, [pc, #36]	; (8007538 <HAL_RCC_OscConfig+0x248>)
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007516:	f7fd fef7 	bl	8005308 <HAL_GetTick>
 800751a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800751c:	e00e      	b.n	800753c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800751e:	f7fd fef3 	bl	8005308 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	2b02      	cmp	r3, #2
 800752a:	d907      	bls.n	800753c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e150      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
 8007530:	40023800 	.word	0x40023800
 8007534:	42470000 	.word	0x42470000
 8007538:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800753c:	4b88      	ldr	r3, [pc, #544]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 800753e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1ea      	bne.n	800751e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 8097 	beq.w	8007684 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007556:	2300      	movs	r3, #0
 8007558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800755a:	4b81      	ldr	r3, [pc, #516]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10f      	bne.n	8007586 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007566:	2300      	movs	r3, #0
 8007568:	60bb      	str	r3, [r7, #8]
 800756a:	4b7d      	ldr	r3, [pc, #500]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	4a7c      	ldr	r2, [pc, #496]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 8007570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007574:	6413      	str	r3, [r2, #64]	; 0x40
 8007576:	4b7a      	ldr	r3, [pc, #488]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800757e:	60bb      	str	r3, [r7, #8]
 8007580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007582:	2301      	movs	r3, #1
 8007584:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007586:	4b77      	ldr	r3, [pc, #476]	; (8007764 <HAL_RCC_OscConfig+0x474>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758e:	2b00      	cmp	r3, #0
 8007590:	d118      	bne.n	80075c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007592:	4b74      	ldr	r3, [pc, #464]	; (8007764 <HAL_RCC_OscConfig+0x474>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a73      	ldr	r2, [pc, #460]	; (8007764 <HAL_RCC_OscConfig+0x474>)
 8007598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800759c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800759e:	f7fd feb3 	bl	8005308 <HAL_GetTick>
 80075a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075a4:	e008      	b.n	80075b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075a6:	f7fd feaf 	bl	8005308 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d901      	bls.n	80075b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e10c      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075b8:	4b6a      	ldr	r3, [pc, #424]	; (8007764 <HAL_RCC_OscConfig+0x474>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d0f0      	beq.n	80075a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d106      	bne.n	80075da <HAL_RCC_OscConfig+0x2ea>
 80075cc:	4b64      	ldr	r3, [pc, #400]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 80075ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d0:	4a63      	ldr	r2, [pc, #396]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 80075d2:	f043 0301 	orr.w	r3, r3, #1
 80075d6:	6713      	str	r3, [r2, #112]	; 0x70
 80075d8:	e01c      	b.n	8007614 <HAL_RCC_OscConfig+0x324>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	2b05      	cmp	r3, #5
 80075e0:	d10c      	bne.n	80075fc <HAL_RCC_OscConfig+0x30c>
 80075e2:	4b5f      	ldr	r3, [pc, #380]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 80075e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e6:	4a5e      	ldr	r2, [pc, #376]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 80075e8:	f043 0304 	orr.w	r3, r3, #4
 80075ec:	6713      	str	r3, [r2, #112]	; 0x70
 80075ee:	4b5c      	ldr	r3, [pc, #368]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 80075f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f2:	4a5b      	ldr	r2, [pc, #364]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 80075f4:	f043 0301 	orr.w	r3, r3, #1
 80075f8:	6713      	str	r3, [r2, #112]	; 0x70
 80075fa:	e00b      	b.n	8007614 <HAL_RCC_OscConfig+0x324>
 80075fc:	4b58      	ldr	r3, [pc, #352]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 80075fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007600:	4a57      	ldr	r2, [pc, #348]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 8007602:	f023 0301 	bic.w	r3, r3, #1
 8007606:	6713      	str	r3, [r2, #112]	; 0x70
 8007608:	4b55      	ldr	r3, [pc, #340]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 800760a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760c:	4a54      	ldr	r2, [pc, #336]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 800760e:	f023 0304 	bic.w	r3, r3, #4
 8007612:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d015      	beq.n	8007648 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800761c:	f7fd fe74 	bl	8005308 <HAL_GetTick>
 8007620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007622:	e00a      	b.n	800763a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007624:	f7fd fe70 	bl	8005308 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007632:	4293      	cmp	r3, r2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e0cb      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800763a:	4b49      	ldr	r3, [pc, #292]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 800763c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0ee      	beq.n	8007624 <HAL_RCC_OscConfig+0x334>
 8007646:	e014      	b.n	8007672 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007648:	f7fd fe5e 	bl	8005308 <HAL_GetTick>
 800764c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800764e:	e00a      	b.n	8007666 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007650:	f7fd fe5a 	bl	8005308 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	f241 3288 	movw	r2, #5000	; 0x1388
 800765e:	4293      	cmp	r3, r2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e0b5      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007666:	4b3e      	ldr	r3, [pc, #248]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 8007668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1ee      	bne.n	8007650 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d105      	bne.n	8007684 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007678:	4b39      	ldr	r3, [pc, #228]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 800767a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767c:	4a38      	ldr	r2, [pc, #224]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 800767e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007682:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 80a1 	beq.w	80077d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800768e:	4b34      	ldr	r3, [pc, #208]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 030c 	and.w	r3, r3, #12
 8007696:	2b08      	cmp	r3, #8
 8007698:	d05c      	beq.n	8007754 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d141      	bne.n	8007726 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076a2:	4b31      	ldr	r3, [pc, #196]	; (8007768 <HAL_RCC_OscConfig+0x478>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a8:	f7fd fe2e 	bl	8005308 <HAL_GetTick>
 80076ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ae:	e008      	b.n	80076c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076b0:	f7fd fe2a 	bl	8005308 <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d901      	bls.n	80076c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e087      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076c2:	4b27      	ldr	r3, [pc, #156]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1f0      	bne.n	80076b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	69da      	ldr	r2, [r3, #28]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	431a      	orrs	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	019b      	lsls	r3, r3, #6
 80076de:	431a      	orrs	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e4:	085b      	lsrs	r3, r3, #1
 80076e6:	3b01      	subs	r3, #1
 80076e8:	041b      	lsls	r3, r3, #16
 80076ea:	431a      	orrs	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	061b      	lsls	r3, r3, #24
 80076f2:	491b      	ldr	r1, [pc, #108]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076f8:	4b1b      	ldr	r3, [pc, #108]	; (8007768 <HAL_RCC_OscConfig+0x478>)
 80076fa:	2201      	movs	r2, #1
 80076fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076fe:	f7fd fe03 	bl	8005308 <HAL_GetTick>
 8007702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007704:	e008      	b.n	8007718 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007706:	f7fd fdff 	bl	8005308 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	2b02      	cmp	r3, #2
 8007712:	d901      	bls.n	8007718 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e05c      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007718:	4b11      	ldr	r3, [pc, #68]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0f0      	beq.n	8007706 <HAL_RCC_OscConfig+0x416>
 8007724:	e054      	b.n	80077d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007726:	4b10      	ldr	r3, [pc, #64]	; (8007768 <HAL_RCC_OscConfig+0x478>)
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800772c:	f7fd fdec 	bl	8005308 <HAL_GetTick>
 8007730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007732:	e008      	b.n	8007746 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007734:	f7fd fde8 	bl	8005308 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b02      	cmp	r3, #2
 8007740:	d901      	bls.n	8007746 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e045      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007746:	4b06      	ldr	r3, [pc, #24]	; (8007760 <HAL_RCC_OscConfig+0x470>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1f0      	bne.n	8007734 <HAL_RCC_OscConfig+0x444>
 8007752:	e03d      	b.n	80077d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d107      	bne.n	800776c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e038      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
 8007760:	40023800 	.word	0x40023800
 8007764:	40007000 	.word	0x40007000
 8007768:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800776c:	4b1b      	ldr	r3, [pc, #108]	; (80077dc <HAL_RCC_OscConfig+0x4ec>)
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d028      	beq.n	80077cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007784:	429a      	cmp	r2, r3
 8007786:	d121      	bne.n	80077cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007792:	429a      	cmp	r2, r3
 8007794:	d11a      	bne.n	80077cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800779c:	4013      	ands	r3, r2
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80077a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d111      	bne.n	80077cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b2:	085b      	lsrs	r3, r3, #1
 80077b4:	3b01      	subs	r3, #1
 80077b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d107      	bne.n	80077cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d001      	beq.n	80077d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e000      	b.n	80077d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	40023800 	.word	0x40023800

080077e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e0cc      	b.n	800798e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077f4:	4b68      	ldr	r3, [pc, #416]	; (8007998 <HAL_RCC_ClockConfig+0x1b8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0307 	and.w	r3, r3, #7
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d90c      	bls.n	800781c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007802:	4b65      	ldr	r3, [pc, #404]	; (8007998 <HAL_RCC_ClockConfig+0x1b8>)
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	b2d2      	uxtb	r2, r2
 8007808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800780a:	4b63      	ldr	r3, [pc, #396]	; (8007998 <HAL_RCC_ClockConfig+0x1b8>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	429a      	cmp	r2, r3
 8007816:	d001      	beq.n	800781c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e0b8      	b.n	800798e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d020      	beq.n	800786a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0304 	and.w	r3, r3, #4
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007834:	4b59      	ldr	r3, [pc, #356]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	4a58      	ldr	r2, [pc, #352]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 800783a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800783e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0308 	and.w	r3, r3, #8
 8007848:	2b00      	cmp	r3, #0
 800784a:	d005      	beq.n	8007858 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800784c:	4b53      	ldr	r3, [pc, #332]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	4a52      	ldr	r2, [pc, #328]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 8007852:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007856:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007858:	4b50      	ldr	r3, [pc, #320]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	494d      	ldr	r1, [pc, #308]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 8007866:	4313      	orrs	r3, r2
 8007868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d044      	beq.n	8007900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d107      	bne.n	800788e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800787e:	4b47      	ldr	r3, [pc, #284]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d119      	bne.n	80078be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e07f      	b.n	800798e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	2b02      	cmp	r3, #2
 8007894:	d003      	beq.n	800789e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800789a:	2b03      	cmp	r3, #3
 800789c:	d107      	bne.n	80078ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800789e:	4b3f      	ldr	r3, [pc, #252]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d109      	bne.n	80078be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e06f      	b.n	800798e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078ae:	4b3b      	ldr	r3, [pc, #236]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0302 	and.w	r3, r3, #2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e067      	b.n	800798e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078be:	4b37      	ldr	r3, [pc, #220]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f023 0203 	bic.w	r2, r3, #3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	4934      	ldr	r1, [pc, #208]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078d0:	f7fd fd1a 	bl	8005308 <HAL_GetTick>
 80078d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078d6:	e00a      	b.n	80078ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078d8:	f7fd fd16 	bl	8005308 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e04f      	b.n	800798e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ee:	4b2b      	ldr	r3, [pc, #172]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f003 020c 	and.w	r2, r3, #12
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d1eb      	bne.n	80078d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007900:	4b25      	ldr	r3, [pc, #148]	; (8007998 <HAL_RCC_ClockConfig+0x1b8>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0307 	and.w	r3, r3, #7
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d20c      	bcs.n	8007928 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800790e:	4b22      	ldr	r3, [pc, #136]	; (8007998 <HAL_RCC_ClockConfig+0x1b8>)
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007916:	4b20      	ldr	r3, [pc, #128]	; (8007998 <HAL_RCC_ClockConfig+0x1b8>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0307 	and.w	r3, r3, #7
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d001      	beq.n	8007928 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e032      	b.n	800798e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b00      	cmp	r3, #0
 8007932:	d008      	beq.n	8007946 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007934:	4b19      	ldr	r3, [pc, #100]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	4916      	ldr	r1, [pc, #88]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 8007942:	4313      	orrs	r3, r2
 8007944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d009      	beq.n	8007966 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007952:	4b12      	ldr	r3, [pc, #72]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	490e      	ldr	r1, [pc, #56]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 8007962:	4313      	orrs	r3, r2
 8007964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007966:	f000 f821 	bl	80079ac <HAL_RCC_GetSysClockFreq>
 800796a:	4602      	mov	r2, r0
 800796c:	4b0b      	ldr	r3, [pc, #44]	; (800799c <HAL_RCC_ClockConfig+0x1bc>)
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	091b      	lsrs	r3, r3, #4
 8007972:	f003 030f 	and.w	r3, r3, #15
 8007976:	490a      	ldr	r1, [pc, #40]	; (80079a0 <HAL_RCC_ClockConfig+0x1c0>)
 8007978:	5ccb      	ldrb	r3, [r1, r3]
 800797a:	fa22 f303 	lsr.w	r3, r2, r3
 800797e:	4a09      	ldr	r2, [pc, #36]	; (80079a4 <HAL_RCC_ClockConfig+0x1c4>)
 8007980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007982:	4b09      	ldr	r3, [pc, #36]	; (80079a8 <HAL_RCC_ClockConfig+0x1c8>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f7fd fc7a 	bl	8005280 <HAL_InitTick>

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	40023c00 	.word	0x40023c00
 800799c:	40023800 	.word	0x40023800
 80079a0:	080107d4 	.word	0x080107d4
 80079a4:	2000093c 	.word	0x2000093c
 80079a8:	2000095c 	.word	0x2000095c

080079ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079b0:	b090      	sub	sp, #64	; 0x40
 80079b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	637b      	str	r3, [r7, #52]	; 0x34
 80079b8:	2300      	movs	r3, #0
 80079ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079bc:	2300      	movs	r3, #0
 80079be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079c4:	4b59      	ldr	r3, [pc, #356]	; (8007b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f003 030c 	and.w	r3, r3, #12
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	d00d      	beq.n	80079ec <HAL_RCC_GetSysClockFreq+0x40>
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	f200 80a1 	bhi.w	8007b18 <HAL_RCC_GetSysClockFreq+0x16c>
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <HAL_RCC_GetSysClockFreq+0x34>
 80079da:	2b04      	cmp	r3, #4
 80079dc:	d003      	beq.n	80079e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80079de:	e09b      	b.n	8007b18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079e0:	4b53      	ldr	r3, [pc, #332]	; (8007b30 <HAL_RCC_GetSysClockFreq+0x184>)
 80079e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80079e4:	e09b      	b.n	8007b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079e6:	4b53      	ldr	r3, [pc, #332]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x188>)
 80079e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80079ea:	e098      	b.n	8007b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079ec:	4b4f      	ldr	r3, [pc, #316]	; (8007b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079f6:	4b4d      	ldr	r3, [pc, #308]	; (8007b2c <HAL_RCC_GetSysClockFreq+0x180>)
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d028      	beq.n	8007a54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a02:	4b4a      	ldr	r3, [pc, #296]	; (8007b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	099b      	lsrs	r3, r3, #6
 8007a08:	2200      	movs	r2, #0
 8007a0a:	623b      	str	r3, [r7, #32]
 8007a0c:	627a      	str	r2, [r7, #36]	; 0x24
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007a14:	2100      	movs	r1, #0
 8007a16:	4b47      	ldr	r3, [pc, #284]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a18:	fb03 f201 	mul.w	r2, r3, r1
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	fb00 f303 	mul.w	r3, r0, r3
 8007a22:	4413      	add	r3, r2
 8007a24:	4a43      	ldr	r2, [pc, #268]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a26:	fba0 1202 	umull	r1, r2, r0, r2
 8007a2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a2c:	460a      	mov	r2, r1
 8007a2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a32:	4413      	add	r3, r2
 8007a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a38:	2200      	movs	r2, #0
 8007a3a:	61bb      	str	r3, [r7, #24]
 8007a3c:	61fa      	str	r2, [r7, #28]
 8007a3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007a46:	f7f9 f917 	bl	8000c78 <__aeabi_uldivmod>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	4613      	mov	r3, r2
 8007a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a52:	e053      	b.n	8007afc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a54:	4b35      	ldr	r3, [pc, #212]	; (8007b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	099b      	lsrs	r3, r3, #6
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	613b      	str	r3, [r7, #16]
 8007a5e:	617a      	str	r2, [r7, #20]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007a66:	f04f 0b00 	mov.w	fp, #0
 8007a6a:	4652      	mov	r2, sl
 8007a6c:	465b      	mov	r3, fp
 8007a6e:	f04f 0000 	mov.w	r0, #0
 8007a72:	f04f 0100 	mov.w	r1, #0
 8007a76:	0159      	lsls	r1, r3, #5
 8007a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a7c:	0150      	lsls	r0, r2, #5
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	ebb2 080a 	subs.w	r8, r2, sl
 8007a86:	eb63 090b 	sbc.w	r9, r3, fp
 8007a8a:	f04f 0200 	mov.w	r2, #0
 8007a8e:	f04f 0300 	mov.w	r3, #0
 8007a92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007a96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007a9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007a9e:	ebb2 0408 	subs.w	r4, r2, r8
 8007aa2:	eb63 0509 	sbc.w	r5, r3, r9
 8007aa6:	f04f 0200 	mov.w	r2, #0
 8007aaa:	f04f 0300 	mov.w	r3, #0
 8007aae:	00eb      	lsls	r3, r5, #3
 8007ab0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ab4:	00e2      	lsls	r2, r4, #3
 8007ab6:	4614      	mov	r4, r2
 8007ab8:	461d      	mov	r5, r3
 8007aba:	eb14 030a 	adds.w	r3, r4, sl
 8007abe:	603b      	str	r3, [r7, #0]
 8007ac0:	eb45 030b 	adc.w	r3, r5, fp
 8007ac4:	607b      	str	r3, [r7, #4]
 8007ac6:	f04f 0200 	mov.w	r2, #0
 8007aca:	f04f 0300 	mov.w	r3, #0
 8007ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	028b      	lsls	r3, r1, #10
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007adc:	4621      	mov	r1, r4
 8007ade:	028a      	lsls	r2, r1, #10
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	60bb      	str	r3, [r7, #8]
 8007aea:	60fa      	str	r2, [r7, #12]
 8007aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007af0:	f7f9 f8c2 	bl	8000c78 <__aeabi_uldivmod>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4613      	mov	r3, r2
 8007afa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007afc:	4b0b      	ldr	r3, [pc, #44]	; (8007b2c <HAL_RCC_GetSysClockFreq+0x180>)
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	0c1b      	lsrs	r3, r3, #16
 8007b02:	f003 0303 	and.w	r3, r3, #3
 8007b06:	3301      	adds	r3, #1
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007b0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b16:	e002      	b.n	8007b1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b18:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3740      	adds	r7, #64	; 0x40
 8007b24:	46bd      	mov	sp, r7
 8007b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b2a:	bf00      	nop
 8007b2c:	40023800 	.word	0x40023800
 8007b30:	00f42400 	.word	0x00f42400
 8007b34:	017d7840 	.word	0x017d7840

08007b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b3c:	4b03      	ldr	r3, [pc, #12]	; (8007b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	2000093c 	.word	0x2000093c

08007b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b54:	f7ff fff0 	bl	8007b38 <HAL_RCC_GetHCLKFreq>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	4b05      	ldr	r3, [pc, #20]	; (8007b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	0a9b      	lsrs	r3, r3, #10
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	4903      	ldr	r1, [pc, #12]	; (8007b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b66:	5ccb      	ldrb	r3, [r1, r3]
 8007b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	40023800 	.word	0x40023800
 8007b74:	080107e4 	.word	0x080107e4

08007b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007b7c:	f7ff ffdc 	bl	8007b38 <HAL_RCC_GetHCLKFreq>
 8007b80:	4602      	mov	r2, r0
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	0b5b      	lsrs	r3, r3, #13
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	4903      	ldr	r1, [pc, #12]	; (8007b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b8e:	5ccb      	ldrb	r3, [r1, r3]
 8007b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	080107e4 	.word	0x080107e4

08007ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0301 	and.w	r3, r3, #1
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d105      	bne.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d038      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007bc8:	4b68      	ldr	r3, [pc, #416]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bce:	f7fd fb9b 	bl	8005308 <HAL_GetTick>
 8007bd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007bd4:	e008      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007bd6:	f7fd fb97 	bl	8005308 <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d901      	bls.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e0bd      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007be8:	4b61      	ldr	r3, [pc, #388]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1f0      	bne.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	019b      	lsls	r3, r3, #6
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	071b      	lsls	r3, r3, #28
 8007c06:	495a      	ldr	r1, [pc, #360]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007c0e:	4b57      	ldr	r3, [pc, #348]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007c10:	2201      	movs	r2, #1
 8007c12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c14:	f7fd fb78 	bl	8005308 <HAL_GetTick>
 8007c18:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c1a:	e008      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007c1c:	f7fd fb74 	bl	8005308 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d901      	bls.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e09a      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c2e:	4b50      	ldr	r3, [pc, #320]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0f0      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 8083 	beq.w	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	4b48      	ldr	r3, [pc, #288]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c50:	4a47      	ldr	r2, [pc, #284]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c56:	6413      	str	r3, [r2, #64]	; 0x40
 8007c58:	4b45      	ldr	r3, [pc, #276]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c60:	60fb      	str	r3, [r7, #12]
 8007c62:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007c64:	4b43      	ldr	r3, [pc, #268]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a42      	ldr	r2, [pc, #264]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c6e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c70:	f7fd fb4a 	bl	8005308 <HAL_GetTick>
 8007c74:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c76:	e008      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007c78:	f7fd fb46 	bl	8005308 <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d901      	bls.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e06c      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c8a:	4b3a      	ldr	r3, [pc, #232]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0f0      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c96:	4b36      	ldr	r3, [pc, #216]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c9e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d02f      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d028      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cb4:	4b2e      	ldr	r3, [pc, #184]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cbc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007cbe:	4b2e      	ldr	r3, [pc, #184]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007cc4:	4b2c      	ldr	r3, [pc, #176]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007cca:	4a29      	ldr	r2, [pc, #164]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007cd0:	4b27      	ldr	r3, [pc, #156]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d114      	bne.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007cdc:	f7fd fb14 	bl	8005308 <HAL_GetTick>
 8007ce0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ce2:	e00a      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ce4:	f7fd fb10 	bl	8005308 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d901      	bls.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e034      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cfa:	4b1d      	ldr	r3, [pc, #116]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfe:	f003 0302 	and.w	r3, r3, #2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0ee      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d12:	d10d      	bne.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007d14:	4b16      	ldr	r3, [pc, #88]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d28:	4911      	ldr	r1, [pc, #68]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	608b      	str	r3, [r1, #8]
 8007d2e:	e005      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007d30:	4b0f      	ldr	r3, [pc, #60]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	4a0e      	ldr	r2, [pc, #56]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007d3a:	6093      	str	r3, [r2, #8]
 8007d3c:	4b0c      	ldr	r3, [pc, #48]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d48:	4909      	ldr	r1, [pc, #36]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0308 	and.w	r3, r3, #8
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	7d1a      	ldrb	r2, [r3, #20]
 8007d5e:	4b07      	ldr	r3, [pc, #28]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007d60:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	42470068 	.word	0x42470068
 8007d70:	40023800 	.word	0x40023800
 8007d74:	40007000 	.word	0x40007000
 8007d78:	42470e40 	.word	0x42470e40
 8007d7c:	424711e0 	.word	0x424711e0

08007d80 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e066      	b.n	8007e64 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	7f5b      	ldrb	r3, [r3, #29]
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d105      	bne.n	8007dac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7fc f81c 	bl	8003de4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	22ca      	movs	r2, #202	; 0xca
 8007db8:	625a      	str	r2, [r3, #36]	; 0x24
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2253      	movs	r2, #83	; 0x53
 8007dc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa45 	bl	8008252 <RTC_EnterInitMode>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d12c      	bne.n	8007e2c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	6812      	ldr	r2, [r2, #0]
 8007ddc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007de4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6899      	ldr	r1, [r3, #8]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	431a      	orrs	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	68d2      	ldr	r2, [r2, #12]
 8007e0c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6919      	ldr	r1, [r3, #16]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	041a      	lsls	r2, r3, #16
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fa4c 	bl	80082c0 <RTC_ExitInitMode>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d113      	bne.n	8007e5a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e40:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	699a      	ldr	r2, [r3, #24]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	22ff      	movs	r2, #255	; 0xff
 8007e60:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007e6c:	b590      	push	{r4, r7, lr}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	7f1b      	ldrb	r3, [r3, #28]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d101      	bne.n	8007e88 <HAL_RTC_SetTime+0x1c>
 8007e84:	2302      	movs	r3, #2
 8007e86:	e087      	b.n	8007f98 <HAL_RTC_SetTime+0x12c>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2202      	movs	r2, #2
 8007e92:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d126      	bne.n	8007ee8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d102      	bne.n	8007eae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fa29 	bl	800830a <RTC_ByteToBcd2>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	785b      	ldrb	r3, [r3, #1]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fa22 	bl	800830a <RTC_ByteToBcd2>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007eca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	789b      	ldrb	r3, [r3, #2]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 fa1a 	bl	800830a <RTC_ByteToBcd2>
 8007ed6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007ed8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	78db      	ldrb	r3, [r3, #3]
 8007ee0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	617b      	str	r3, [r7, #20]
 8007ee6:	e018      	b.n	8007f1a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d102      	bne.n	8007efc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	785b      	ldrb	r3, [r3, #1]
 8007f06:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007f08:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007f0e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	78db      	ldrb	r3, [r3, #3]
 8007f14:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	22ca      	movs	r2, #202	; 0xca
 8007f20:	625a      	str	r2, [r3, #36]	; 0x24
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2253      	movs	r2, #83	; 0x53
 8007f28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 f991 	bl	8008252 <RTC_EnterInitMode>
 8007f30:	4603      	mov	r3, r0
 8007f32:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007f34:	7cfb      	ldrb	r3, [r7, #19]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d120      	bne.n	8007f7c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007f44:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007f48:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	689a      	ldr	r2, [r3, #8]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f58:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6899      	ldr	r1, [r3, #8]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	68da      	ldr	r2, [r3, #12]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 f9a4 	bl	80082c0 <RTC_ExitInitMode>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007f7c:	7cfb      	ldrb	r3, [r7, #19]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d102      	bne.n	8007f88 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2201      	movs	r2, #1
 8007f86:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	22ff      	movs	r2, #255	; 0xff
 8007f8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	771a      	strb	r2, [r3, #28]

  return status;
 8007f96:	7cfb      	ldrb	r3, [r7, #19]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	371c      	adds	r7, #28
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd90      	pop	{r4, r7, pc}

08007fa0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007fd2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007fd6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	0c1b      	lsrs	r3, r3, #16
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	0a1b      	lsrs	r3, r3, #8
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008000:	b2da      	uxtb	r2, r3
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	0d9b      	lsrs	r3, r3, #22
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	b2da      	uxtb	r2, r3
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d11a      	bne.n	8008052 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	4618      	mov	r0, r3
 8008022:	f000 f98f 	bl	8008344 <RTC_Bcd2ToByte>
 8008026:	4603      	mov	r3, r0
 8008028:	461a      	mov	r2, r3
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	785b      	ldrb	r3, [r3, #1]
 8008032:	4618      	mov	r0, r3
 8008034:	f000 f986 	bl	8008344 <RTC_Bcd2ToByte>
 8008038:	4603      	mov	r3, r0
 800803a:	461a      	mov	r2, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	789b      	ldrb	r3, [r3, #2]
 8008044:	4618      	mov	r0, r3
 8008046:	f000 f97d 	bl	8008344 <RTC_Bcd2ToByte>
 800804a:	4603      	mov	r3, r0
 800804c:	461a      	mov	r2, r3
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800805c:	b590      	push	{r4, r7, lr}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	7f1b      	ldrb	r3, [r3, #28]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d101      	bne.n	8008078 <HAL_RTC_SetDate+0x1c>
 8008074:	2302      	movs	r3, #2
 8008076:	e071      	b.n	800815c <HAL_RTC_SetDate+0x100>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2202      	movs	r2, #2
 8008082:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10e      	bne.n	80080a8 <HAL_RTC_SetDate+0x4c>
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	785b      	ldrb	r3, [r3, #1]
 800808e:	f003 0310 	and.w	r3, r3, #16
 8008092:	2b00      	cmp	r3, #0
 8008094:	d008      	beq.n	80080a8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	785b      	ldrb	r3, [r3, #1]
 800809a:	f023 0310 	bic.w	r3, r3, #16
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	330a      	adds	r3, #10
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d11c      	bne.n	80080e8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	78db      	ldrb	r3, [r3, #3]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 f929 	bl	800830a <RTC_ByteToBcd2>
 80080b8:	4603      	mov	r3, r0
 80080ba:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	785b      	ldrb	r3, [r3, #1]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 f922 	bl	800830a <RTC_ByteToBcd2>
 80080c6:	4603      	mov	r3, r0
 80080c8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80080ca:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	789b      	ldrb	r3, [r3, #2]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 f91a 	bl	800830a <RTC_ByteToBcd2>
 80080d6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80080d8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80080e2:	4313      	orrs	r3, r2
 80080e4:	617b      	str	r3, [r7, #20]
 80080e6:	e00e      	b.n	8008106 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	78db      	ldrb	r3, [r3, #3]
 80080ec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	785b      	ldrb	r3, [r3, #1]
 80080f2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80080f4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80080fa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	22ca      	movs	r2, #202	; 0xca
 800810c:	625a      	str	r2, [r3, #36]	; 0x24
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2253      	movs	r2, #83	; 0x53
 8008114:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 f89b 	bl	8008252 <RTC_EnterInitMode>
 800811c:	4603      	mov	r3, r0
 800811e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008120:	7cfb      	ldrb	r3, [r7, #19]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10c      	bne.n	8008140 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008130:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008134:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 f8c2 	bl	80082c0 <RTC_ExitInitMode>
 800813c:	4603      	mov	r3, r0
 800813e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008140:	7cfb      	ldrb	r3, [r7, #19]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d102      	bne.n	800814c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2201      	movs	r2, #1
 800814a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	22ff      	movs	r2, #255	; 0xff
 8008152:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	771a      	strb	r2, [r3, #28]

  return status;
 800815a:	7cfb      	ldrb	r3, [r7, #19]
}
 800815c:	4618      	mov	r0, r3
 800815e:	371c      	adds	r7, #28
 8008160:	46bd      	mov	sp, r7
 8008162:	bd90      	pop	{r4, r7, pc}

08008164 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800817e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008182:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	0c1b      	lsrs	r3, r3, #16
 8008188:	b2da      	uxtb	r2, r3
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	0a1b      	lsrs	r3, r3, #8
 8008192:	b2db      	uxtb	r3, r3
 8008194:	f003 031f 	and.w	r3, r3, #31
 8008198:	b2da      	uxtb	r2, r3
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	0b5b      	lsrs	r3, r3, #13
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f003 0307 	and.w	r3, r3, #7
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d11a      	bne.n	80081f8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	78db      	ldrb	r3, [r3, #3]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 f8bc 	bl	8008344 <RTC_Bcd2ToByte>
 80081cc:	4603      	mov	r3, r0
 80081ce:	461a      	mov	r2, r3
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 f8b3 	bl	8008344 <RTC_Bcd2ToByte>
 80081de:	4603      	mov	r3, r0
 80081e0:	461a      	mov	r2, r3
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	789b      	ldrb	r3, [r3, #2]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 f8aa 	bl	8008344 <RTC_Bcd2ToByte>
 80081f0:	4603      	mov	r3, r0
 80081f2:	461a      	mov	r2, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68da      	ldr	r2, [r3, #12]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800821c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800821e:	f7fd f873 	bl	8005308 <HAL_GetTick>
 8008222:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008224:	e009      	b.n	800823a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008226:	f7fd f86f 	bl	8005308 <HAL_GetTick>
 800822a:	4602      	mov	r2, r0
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008234:	d901      	bls.n	800823a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e007      	b.n	800824a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	f003 0320 	and.w	r3, r3, #32
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0ee      	beq.n	8008226 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826c:	2b00      	cmp	r3, #0
 800826e:	d122      	bne.n	80082b6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800827e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008280:	f7fd f842 	bl	8005308 <HAL_GetTick>
 8008284:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008286:	e00c      	b.n	80082a2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008288:	f7fd f83e 	bl	8005308 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008296:	d904      	bls.n	80082a2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2204      	movs	r2, #4
 800829c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <RTC_EnterInitMode+0x64>
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d1e8      	bne.n	8008288 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68da      	ldr	r2, [r3, #12]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082da:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10a      	bne.n	8008300 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7ff ff89 	bl	8008202 <HAL_RTC_WaitForSynchro>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d004      	beq.n	8008300 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2204      	movs	r2, #4
 80082fa:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008300:	7bfb      	ldrb	r3, [r7, #15]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800830a:	b480      	push	{r7}
 800830c:	b085      	sub	sp, #20
 800830e:	af00      	add	r7, sp, #0
 8008310:	4603      	mov	r3, r0
 8008312:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8008318:	e005      	b.n	8008326 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	3301      	adds	r3, #1
 800831e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	3b0a      	subs	r3, #10
 8008324:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	2b09      	cmp	r3, #9
 800832a:	d8f6      	bhi.n	800831a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800832c:	7bfb      	ldrb	r3, [r7, #15]
 800832e:	011b      	lsls	r3, r3, #4
 8008330:	b2da      	uxtb	r2, r3
 8008332:	79fb      	ldrb	r3, [r7, #7]
 8008334:	4313      	orrs	r3, r2
 8008336:	b2db      	uxtb	r3, r3
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	091b      	lsrs	r3, r3, #4
 8008356:	b2db      	uxtb	r3, r3
 8008358:	461a      	mov	r2, r3
 800835a:	0092      	lsls	r2, r2, #2
 800835c:	4413      	add	r3, r2
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8008362:	79fb      	ldrb	r3, [r7, #7]
 8008364:	f003 030f 	and.w	r3, r3, #15
 8008368:	b2da      	uxtb	r2, r3
 800836a:	7bfb      	ldrb	r3, [r7, #15]
 800836c:	4413      	add	r3, r2
 800836e:	b2db      	uxtb	r3, r3
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e07b      	b.n	8008486 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	2b00      	cmp	r3, #0
 8008394:	d108      	bne.n	80083a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800839e:	d009      	beq.n	80083b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	61da      	str	r2, [r3, #28]
 80083a6:	e005      	b.n	80083b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d106      	bne.n	80083d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7fb fd34 	bl	8003e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2202      	movs	r2, #2
 80083d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80083fc:	431a      	orrs	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008406:	431a      	orrs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	f003 0302 	and.w	r3, r3, #2
 8008410:	431a      	orrs	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	431a      	orrs	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008424:	431a      	orrs	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008438:	ea42 0103 	orr.w	r1, r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008440:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	0c1b      	lsrs	r3, r3, #16
 8008452:	f003 0104 	and.w	r1, r3, #4
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	f003 0210 	and.w	r2, r3, #16
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69da      	ldr	r2, [r3, #28]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008474:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b088      	sub	sp, #32
 8008492:	af00      	add	r7, sp, #0
 8008494:	60f8      	str	r0, [r7, #12]
 8008496:	60b9      	str	r1, [r7, #8]
 8008498:	603b      	str	r3, [r7, #0]
 800849a:	4613      	mov	r3, r2
 800849c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d101      	bne.n	80084b0 <HAL_SPI_Transmit+0x22>
 80084ac:	2302      	movs	r3, #2
 80084ae:	e126      	b.n	80086fe <HAL_SPI_Transmit+0x270>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084b8:	f7fc ff26 	bl	8005308 <HAL_GetTick>
 80084bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80084be:	88fb      	ldrh	r3, [r7, #6]
 80084c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d002      	beq.n	80084d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80084ce:	2302      	movs	r3, #2
 80084d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80084d2:	e10b      	b.n	80086ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d002      	beq.n	80084e0 <HAL_SPI_Transmit+0x52>
 80084da:	88fb      	ldrh	r3, [r7, #6]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d102      	bne.n	80084e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80084e4:	e102      	b.n	80086ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2203      	movs	r2, #3
 80084ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	88fa      	ldrh	r2, [r7, #6]
 80084fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	88fa      	ldrh	r2, [r7, #6]
 8008504:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800852c:	d10f      	bne.n	800854e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800853c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800854c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008558:	2b40      	cmp	r3, #64	; 0x40
 800855a:	d007      	beq.n	800856c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800856a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008574:	d14b      	bne.n	800860e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <HAL_SPI_Transmit+0xf6>
 800857e:	8afb      	ldrh	r3, [r7, #22]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d13e      	bne.n	8008602 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008588:	881a      	ldrh	r2, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008594:	1c9a      	adds	r2, r3, #2
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800859e:	b29b      	uxth	r3, r3
 80085a0:	3b01      	subs	r3, #1
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80085a8:	e02b      	b.n	8008602 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f003 0302 	and.w	r3, r3, #2
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d112      	bne.n	80085de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085bc:	881a      	ldrh	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c8:	1c9a      	adds	r2, r3, #2
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	3b01      	subs	r3, #1
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	86da      	strh	r2, [r3, #54]	; 0x36
 80085dc:	e011      	b.n	8008602 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085de:	f7fc fe93 	bl	8005308 <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d803      	bhi.n	80085f6 <HAL_SPI_Transmit+0x168>
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f4:	d102      	bne.n	80085fc <HAL_SPI_Transmit+0x16e>
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d102      	bne.n	8008602 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008600:	e074      	b.n	80086ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008606:	b29b      	uxth	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1ce      	bne.n	80085aa <HAL_SPI_Transmit+0x11c>
 800860c:	e04c      	b.n	80086a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <HAL_SPI_Transmit+0x18e>
 8008616:	8afb      	ldrh	r3, [r7, #22]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d140      	bne.n	800869e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	330c      	adds	r3, #12
 8008626:	7812      	ldrb	r2, [r2, #0]
 8008628:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862e:	1c5a      	adds	r2, r3, #1
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008638:	b29b      	uxth	r3, r3
 800863a:	3b01      	subs	r3, #1
 800863c:	b29a      	uxth	r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008642:	e02c      	b.n	800869e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b02      	cmp	r3, #2
 8008650:	d113      	bne.n	800867a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	330c      	adds	r3, #12
 800865c:	7812      	ldrb	r2, [r2, #0]
 800865e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800866e:	b29b      	uxth	r3, r3
 8008670:	3b01      	subs	r3, #1
 8008672:	b29a      	uxth	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	86da      	strh	r2, [r3, #54]	; 0x36
 8008678:	e011      	b.n	800869e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800867a:	f7fc fe45 	bl	8005308 <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	429a      	cmp	r2, r3
 8008688:	d803      	bhi.n	8008692 <HAL_SPI_Transmit+0x204>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008690:	d102      	bne.n	8008698 <HAL_SPI_Transmit+0x20a>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d102      	bne.n	800869e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008698:	2303      	movs	r3, #3
 800869a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800869c:	e026      	b.n	80086ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1cd      	bne.n	8008644 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086a8:	69ba      	ldr	r2, [r7, #24]
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 fa55 	bl	8008b5c <SPI_EndRxTxTransaction>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2220      	movs	r2, #32
 80086bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10a      	bne.n	80086dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086c6:	2300      	movs	r3, #0
 80086c8:	613b      	str	r3, [r7, #16]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	613b      	str	r3, [r7, #16]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	613b      	str	r3, [r7, #16]
 80086da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	77fb      	strb	r3, [r7, #31]
 80086e8:	e000      	b.n	80086ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80086ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80086fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3720      	adds	r7, #32
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b08c      	sub	sp, #48	; 0x30
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	607a      	str	r2, [r7, #4]
 8008712:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008714:	2301      	movs	r3, #1
 8008716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008724:	2b01      	cmp	r3, #1
 8008726:	d101      	bne.n	800872c <HAL_SPI_TransmitReceive+0x26>
 8008728:	2302      	movs	r3, #2
 800872a:	e18a      	b.n	8008a42 <HAL_SPI_TransmitReceive+0x33c>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008734:	f7fc fde8 	bl	8005308 <HAL_GetTick>
 8008738:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800874a:	887b      	ldrh	r3, [r7, #2]
 800874c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800874e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008752:	2b01      	cmp	r3, #1
 8008754:	d00f      	beq.n	8008776 <HAL_SPI_TransmitReceive+0x70>
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800875c:	d107      	bne.n	800876e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d103      	bne.n	800876e <HAL_SPI_TransmitReceive+0x68>
 8008766:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800876a:	2b04      	cmp	r3, #4
 800876c:	d003      	beq.n	8008776 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800876e:	2302      	movs	r3, #2
 8008770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008774:	e15b      	b.n	8008a2e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d005      	beq.n	8008788 <HAL_SPI_TransmitReceive+0x82>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d002      	beq.n	8008788 <HAL_SPI_TransmitReceive+0x82>
 8008782:	887b      	ldrh	r3, [r7, #2]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d103      	bne.n	8008790 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800878e:	e14e      	b.n	8008a2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b04      	cmp	r3, #4
 800879a:	d003      	beq.n	80087a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2205      	movs	r2, #5
 80087a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	887a      	ldrh	r2, [r7, #2]
 80087b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	887a      	ldrh	r2, [r7, #2]
 80087ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	887a      	ldrh	r2, [r7, #2]
 80087c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	887a      	ldrh	r2, [r7, #2]
 80087cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e4:	2b40      	cmp	r3, #64	; 0x40
 80087e6:	d007      	beq.n	80087f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008800:	d178      	bne.n	80088f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d002      	beq.n	8008810 <HAL_SPI_TransmitReceive+0x10a>
 800880a:	8b7b      	ldrh	r3, [r7, #26]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d166      	bne.n	80088de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008814:	881a      	ldrh	r2, [r3, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008820:	1c9a      	adds	r2, r3, #2
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800882a:	b29b      	uxth	r3, r3
 800882c:	3b01      	subs	r3, #1
 800882e:	b29a      	uxth	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008834:	e053      	b.n	80088de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b02      	cmp	r3, #2
 8008842:	d11b      	bne.n	800887c <HAL_SPI_TransmitReceive+0x176>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008848:	b29b      	uxth	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d016      	beq.n	800887c <HAL_SPI_TransmitReceive+0x176>
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008850:	2b01      	cmp	r3, #1
 8008852:	d113      	bne.n	800887c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008858:	881a      	ldrh	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008864:	1c9a      	adds	r2, r3, #2
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800886e:	b29b      	uxth	r3, r3
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b01      	cmp	r3, #1
 8008888:	d119      	bne.n	80088be <HAL_SPI_TransmitReceive+0x1b8>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800888e:	b29b      	uxth	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	d014      	beq.n	80088be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68da      	ldr	r2, [r3, #12]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889e:	b292      	uxth	r2, r2
 80088a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a6:	1c9a      	adds	r2, r3, #2
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	3b01      	subs	r3, #1
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088ba:	2301      	movs	r3, #1
 80088bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80088be:	f7fc fd23 	bl	8005308 <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d807      	bhi.n	80088de <HAL_SPI_TransmitReceive+0x1d8>
 80088ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d4:	d003      	beq.n	80088de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80088dc:	e0a7      	b.n	8008a2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1a6      	bne.n	8008836 <HAL_SPI_TransmitReceive+0x130>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1a1      	bne.n	8008836 <HAL_SPI_TransmitReceive+0x130>
 80088f2:	e07c      	b.n	80089ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d002      	beq.n	8008902 <HAL_SPI_TransmitReceive+0x1fc>
 80088fc:	8b7b      	ldrh	r3, [r7, #26]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d16b      	bne.n	80089da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	330c      	adds	r3, #12
 800890c:	7812      	ldrb	r2, [r2, #0]
 800890e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800891e:	b29b      	uxth	r3, r3
 8008920:	3b01      	subs	r3, #1
 8008922:	b29a      	uxth	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008928:	e057      	b.n	80089da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b02      	cmp	r3, #2
 8008936:	d11c      	bne.n	8008972 <HAL_SPI_TransmitReceive+0x26c>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800893c:	b29b      	uxth	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d017      	beq.n	8008972 <HAL_SPI_TransmitReceive+0x26c>
 8008942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008944:	2b01      	cmp	r3, #1
 8008946:	d114      	bne.n	8008972 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	330c      	adds	r3, #12
 8008952:	7812      	ldrb	r2, [r2, #0]
 8008954:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008964:	b29b      	uxth	r3, r3
 8008966:	3b01      	subs	r3, #1
 8008968:	b29a      	uxth	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800896e:	2300      	movs	r3, #0
 8008970:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b01      	cmp	r3, #1
 800897e:	d119      	bne.n	80089b4 <HAL_SPI_TransmitReceive+0x2ae>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008984:	b29b      	uxth	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d014      	beq.n	80089b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008994:	b2d2      	uxtb	r2, r2
 8008996:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	3b01      	subs	r3, #1
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80089b0:	2301      	movs	r3, #1
 80089b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80089b4:	f7fc fca8 	bl	8005308 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d803      	bhi.n	80089cc <HAL_SPI_TransmitReceive+0x2c6>
 80089c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ca:	d102      	bne.n	80089d2 <HAL_SPI_TransmitReceive+0x2cc>
 80089cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d103      	bne.n	80089da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80089d8:	e029      	b.n	8008a2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089de:	b29b      	uxth	r3, r3
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1a2      	bne.n	800892a <HAL_SPI_TransmitReceive+0x224>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d19d      	bne.n	800892a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 f8b2 	bl	8008b5c <SPI_EndRxTxTransaction>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d006      	beq.n	8008a0c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2220      	movs	r2, #32
 8008a08:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008a0a:	e010      	b.n	8008a2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10b      	bne.n	8008a2c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a14:	2300      	movs	r3, #0
 8008a16:	617b      	str	r3, [r7, #20]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	617b      	str	r3, [r7, #20]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	e000      	b.n	8008a2e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008a2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3730      	adds	r7, #48	; 0x30
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b088      	sub	sp, #32
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	603b      	str	r3, [r7, #0]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a5c:	f7fc fc54 	bl	8005308 <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a64:	1a9b      	subs	r3, r3, r2
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	4413      	add	r3, r2
 8008a6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a6c:	f7fc fc4c 	bl	8005308 <HAL_GetTick>
 8008a70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a72:	4b39      	ldr	r3, [pc, #228]	; (8008b58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	015b      	lsls	r3, r3, #5
 8008a78:	0d1b      	lsrs	r3, r3, #20
 8008a7a:	69fa      	ldr	r2, [r7, #28]
 8008a7c:	fb02 f303 	mul.w	r3, r2, r3
 8008a80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a82:	e054      	b.n	8008b2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8a:	d050      	beq.n	8008b2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a8c:	f7fc fc3c 	bl	8005308 <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	69fa      	ldr	r2, [r7, #28]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d902      	bls.n	8008aa2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d13d      	bne.n	8008b1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008ab0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008aba:	d111      	bne.n	8008ae0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ac4:	d004      	beq.n	8008ad0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ace:	d107      	bne.n	8008ae0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ade:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ae8:	d10f      	bne.n	8008b0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008af8:	601a      	str	r2, [r3, #0]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e017      	b.n	8008b4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b24:	2300      	movs	r3, #0
 8008b26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	689a      	ldr	r2, [r3, #8]
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	4013      	ands	r3, r2
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	bf0c      	ite	eq
 8008b3e:	2301      	moveq	r3, #1
 8008b40:	2300      	movne	r3, #0
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	461a      	mov	r2, r3
 8008b46:	79fb      	ldrb	r3, [r7, #7]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d19b      	bne.n	8008a84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3720      	adds	r7, #32
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	2000093c 	.word	0x2000093c

08008b5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b088      	sub	sp, #32
 8008b60:	af02      	add	r7, sp, #8
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008b68:	4b1b      	ldr	r3, [pc, #108]	; (8008bd8 <SPI_EndRxTxTransaction+0x7c>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a1b      	ldr	r2, [pc, #108]	; (8008bdc <SPI_EndRxTxTransaction+0x80>)
 8008b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b72:	0d5b      	lsrs	r3, r3, #21
 8008b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b78:	fb02 f303 	mul.w	r3, r2, r3
 8008b7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b86:	d112      	bne.n	8008bae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2180      	movs	r1, #128	; 0x80
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f7ff ff5a 	bl	8008a4c <SPI_WaitFlagStateUntilTimeout>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d016      	beq.n	8008bcc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba2:	f043 0220 	orr.w	r2, r3, #32
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e00f      	b.n	8008bce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00a      	beq.n	8008bca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc4:	2b80      	cmp	r3, #128	; 0x80
 8008bc6:	d0f2      	beq.n	8008bae <SPI_EndRxTxTransaction+0x52>
 8008bc8:	e000      	b.n	8008bcc <SPI_EndRxTxTransaction+0x70>
        break;
 8008bca:	bf00      	nop
  }

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	2000093c 	.word	0x2000093c
 8008bdc:	165e9f81 	.word	0x165e9f81

08008be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e041      	b.n	8008c76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d106      	bne.n	8008c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7fb f9c8 	bl	8003f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f000 fe52 	bl	80098c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
	...

08008c80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d001      	beq.n	8008c98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	e03c      	b.n	8008d12 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a1e      	ldr	r2, [pc, #120]	; (8008d20 <HAL_TIM_Base_Start+0xa0>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d018      	beq.n	8008cdc <HAL_TIM_Base_Start+0x5c>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cb2:	d013      	beq.n	8008cdc <HAL_TIM_Base_Start+0x5c>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a1a      	ldr	r2, [pc, #104]	; (8008d24 <HAL_TIM_Base_Start+0xa4>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00e      	beq.n	8008cdc <HAL_TIM_Base_Start+0x5c>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a19      	ldr	r2, [pc, #100]	; (8008d28 <HAL_TIM_Base_Start+0xa8>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d009      	beq.n	8008cdc <HAL_TIM_Base_Start+0x5c>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a17      	ldr	r2, [pc, #92]	; (8008d2c <HAL_TIM_Base_Start+0xac>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d004      	beq.n	8008cdc <HAL_TIM_Base_Start+0x5c>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a16      	ldr	r2, [pc, #88]	; (8008d30 <HAL_TIM_Base_Start+0xb0>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d111      	bne.n	8008d00 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f003 0307 	and.w	r3, r3, #7
 8008ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b06      	cmp	r3, #6
 8008cec:	d010      	beq.n	8008d10 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f042 0201 	orr.w	r2, r2, #1
 8008cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cfe:	e007      	b.n	8008d10 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f042 0201 	orr.w	r2, r2, #1
 8008d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	40010000 	.word	0x40010000
 8008d24:	40000400 	.word	0x40000400
 8008d28:	40000800 	.word	0x40000800
 8008d2c:	40000c00 	.word	0x40000c00
 8008d30:	40014000 	.word	0x40014000

08008d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d001      	beq.n	8008d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e044      	b.n	8008dd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2202      	movs	r2, #2
 8008d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f042 0201 	orr.w	r2, r2, #1
 8008d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a1e      	ldr	r2, [pc, #120]	; (8008de4 <HAL_TIM_Base_Start_IT+0xb0>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d018      	beq.n	8008da0 <HAL_TIM_Base_Start_IT+0x6c>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d76:	d013      	beq.n	8008da0 <HAL_TIM_Base_Start_IT+0x6c>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a1a      	ldr	r2, [pc, #104]	; (8008de8 <HAL_TIM_Base_Start_IT+0xb4>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d00e      	beq.n	8008da0 <HAL_TIM_Base_Start_IT+0x6c>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a19      	ldr	r2, [pc, #100]	; (8008dec <HAL_TIM_Base_Start_IT+0xb8>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d009      	beq.n	8008da0 <HAL_TIM_Base_Start_IT+0x6c>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a17      	ldr	r2, [pc, #92]	; (8008df0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d004      	beq.n	8008da0 <HAL_TIM_Base_Start_IT+0x6c>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a16      	ldr	r2, [pc, #88]	; (8008df4 <HAL_TIM_Base_Start_IT+0xc0>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d111      	bne.n	8008dc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f003 0307 	and.w	r3, r3, #7
 8008daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2b06      	cmp	r3, #6
 8008db0:	d010      	beq.n	8008dd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f042 0201 	orr.w	r2, r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc2:	e007      	b.n	8008dd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 0201 	orr.w	r2, r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	40010000 	.word	0x40010000
 8008de8:	40000400 	.word	0x40000400
 8008dec:	40000800 	.word	0x40000800
 8008df0:	40000c00 	.word	0x40000c00
 8008df4:	40014000 	.word	0x40014000

08008df8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68da      	ldr	r2, [r3, #12]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 0201 	bic.w	r2, r2, #1
 8008e0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6a1a      	ldr	r2, [r3, #32]
 8008e16:	f241 1311 	movw	r3, #4369	; 0x1111
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10f      	bne.n	8008e40 <HAL_TIM_Base_Stop_IT+0x48>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6a1a      	ldr	r2, [r3, #32]
 8008e26:	f240 4344 	movw	r3, #1092	; 0x444
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d107      	bne.n	8008e40 <HAL_TIM_Base_Stop_IT+0x48>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 0201 	bic.w	r2, r2, #1
 8008e3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b082      	sub	sp, #8
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e041      	b.n	8008eec <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d106      	bne.n	8008e82 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f839 	bl	8008ef4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2202      	movs	r2, #2
 8008e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3304      	adds	r3, #4
 8008e92:	4619      	mov	r1, r3
 8008e94:	4610      	mov	r0, r2
 8008e96:	f000 fd17 	bl	80098c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d109      	bne.n	8008f30 <HAL_TIM_OC_Start_IT+0x28>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	bf14      	ite	ne
 8008f28:	2301      	movne	r3, #1
 8008f2a:	2300      	moveq	r3, #0
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	e022      	b.n	8008f76 <HAL_TIM_OC_Start_IT+0x6e>
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	d109      	bne.n	8008f4a <HAL_TIM_OC_Start_IT+0x42>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	bf14      	ite	ne
 8008f42:	2301      	movne	r3, #1
 8008f44:	2300      	moveq	r3, #0
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	e015      	b.n	8008f76 <HAL_TIM_OC_Start_IT+0x6e>
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	2b08      	cmp	r3, #8
 8008f4e:	d109      	bne.n	8008f64 <HAL_TIM_OC_Start_IT+0x5c>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	bf14      	ite	ne
 8008f5c:	2301      	movne	r3, #1
 8008f5e:	2300      	moveq	r3, #0
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	e008      	b.n	8008f76 <HAL_TIM_OC_Start_IT+0x6e>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	bf14      	ite	ne
 8008f70:	2301      	movne	r3, #1
 8008f72:	2300      	moveq	r3, #0
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e0b3      	b.n	80090e6 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d104      	bne.n	8008f8e <HAL_TIM_OC_Start_IT+0x86>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f8c:	e013      	b.n	8008fb6 <HAL_TIM_OC_Start_IT+0xae>
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d104      	bne.n	8008f9e <HAL_TIM_OC_Start_IT+0x96>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2202      	movs	r2, #2
 8008f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f9c:	e00b      	b.n	8008fb6 <HAL_TIM_OC_Start_IT+0xae>
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b08      	cmp	r3, #8
 8008fa2:	d104      	bne.n	8008fae <HAL_TIM_OC_Start_IT+0xa6>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fac:	e003      	b.n	8008fb6 <HAL_TIM_OC_Start_IT+0xae>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b0c      	cmp	r3, #12
 8008fba:	d841      	bhi.n	8009040 <HAL_TIM_OC_Start_IT+0x138>
 8008fbc:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <HAL_TIM_OC_Start_IT+0xbc>)
 8008fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc2:	bf00      	nop
 8008fc4:	08008ff9 	.word	0x08008ff9
 8008fc8:	08009041 	.word	0x08009041
 8008fcc:	08009041 	.word	0x08009041
 8008fd0:	08009041 	.word	0x08009041
 8008fd4:	0800900b 	.word	0x0800900b
 8008fd8:	08009041 	.word	0x08009041
 8008fdc:	08009041 	.word	0x08009041
 8008fe0:	08009041 	.word	0x08009041
 8008fe4:	0800901d 	.word	0x0800901d
 8008fe8:	08009041 	.word	0x08009041
 8008fec:	08009041 	.word	0x08009041
 8008ff0:	08009041 	.word	0x08009041
 8008ff4:	0800902f 	.word	0x0800902f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68da      	ldr	r2, [r3, #12]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f042 0202 	orr.w	r2, r2, #2
 8009006:	60da      	str	r2, [r3, #12]
      break;
 8009008:	e01d      	b.n	8009046 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68da      	ldr	r2, [r3, #12]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f042 0204 	orr.w	r2, r2, #4
 8009018:	60da      	str	r2, [r3, #12]
      break;
 800901a:	e014      	b.n	8009046 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68da      	ldr	r2, [r3, #12]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f042 0208 	orr.w	r2, r2, #8
 800902a:	60da      	str	r2, [r3, #12]
      break;
 800902c:	e00b      	b.n	8009046 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68da      	ldr	r2, [r3, #12]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f042 0210 	orr.w	r2, r2, #16
 800903c:	60da      	str	r2, [r3, #12]
      break;
 800903e:	e002      	b.n	8009046 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	73fb      	strb	r3, [r7, #15]
      break;
 8009044:	bf00      	nop
  }

  if (status == HAL_OK)
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d14b      	bne.n	80090e4 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2201      	movs	r2, #1
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	4618      	mov	r0, r3
 8009056:	f000 fedd 	bl	8009e14 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a24      	ldr	r2, [pc, #144]	; (80090f0 <HAL_TIM_OC_Start_IT+0x1e8>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d107      	bne.n	8009074 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009072:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a1d      	ldr	r2, [pc, #116]	; (80090f0 <HAL_TIM_OC_Start_IT+0x1e8>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d018      	beq.n	80090b0 <HAL_TIM_OC_Start_IT+0x1a8>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009086:	d013      	beq.n	80090b0 <HAL_TIM_OC_Start_IT+0x1a8>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a19      	ldr	r2, [pc, #100]	; (80090f4 <HAL_TIM_OC_Start_IT+0x1ec>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d00e      	beq.n	80090b0 <HAL_TIM_OC_Start_IT+0x1a8>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a18      	ldr	r2, [pc, #96]	; (80090f8 <HAL_TIM_OC_Start_IT+0x1f0>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d009      	beq.n	80090b0 <HAL_TIM_OC_Start_IT+0x1a8>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a16      	ldr	r2, [pc, #88]	; (80090fc <HAL_TIM_OC_Start_IT+0x1f4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d004      	beq.n	80090b0 <HAL_TIM_OC_Start_IT+0x1a8>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a15      	ldr	r2, [pc, #84]	; (8009100 <HAL_TIM_OC_Start_IT+0x1f8>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d111      	bne.n	80090d4 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f003 0307 	and.w	r3, r3, #7
 80090ba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b06      	cmp	r3, #6
 80090c0:	d010      	beq.n	80090e4 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f042 0201 	orr.w	r2, r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d2:	e007      	b.n	80090e4 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0201 	orr.w	r2, r2, #1
 80090e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	40010000 	.word	0x40010000
 80090f4:	40000400 	.word	0x40000400
 80090f8:	40000800 	.word	0x40000800
 80090fc:	40000c00 	.word	0x40000c00
 8009100:	40014000 	.word	0x40014000

08009104 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d101      	bne.n	8009118 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e097      	b.n	8009248 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b00      	cmp	r3, #0
 8009122:	d106      	bne.n	8009132 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7fa fedd 	bl	8003eec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2202      	movs	r2, #2
 8009136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	6812      	ldr	r2, [r2, #0]
 8009144:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009148:	f023 0307 	bic.w	r3, r3, #7
 800914c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	3304      	adds	r3, #4
 8009156:	4619      	mov	r1, r3
 8009158:	4610      	mov	r0, r2
 800915a:	f000 fbb5 	bl	80098c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	4313      	orrs	r3, r2
 800917e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009186:	f023 0303 	bic.w	r3, r3, #3
 800918a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	689a      	ldr	r2, [r3, #8]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	021b      	lsls	r3, r3, #8
 8009196:	4313      	orrs	r3, r2
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	4313      	orrs	r3, r2
 800919c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80091a4:	f023 030c 	bic.w	r3, r3, #12
 80091a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	021b      	lsls	r3, r3, #8
 80091c0:	4313      	orrs	r3, r2
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	011a      	lsls	r2, r3, #4
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	6a1b      	ldr	r3, [r3, #32]
 80091d2:	031b      	lsls	r3, r3, #12
 80091d4:	4313      	orrs	r3, r2
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	4313      	orrs	r3, r2
 80091da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80091e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80091ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	695b      	ldr	r3, [r3, #20]
 80091f4:	011b      	lsls	r3, r3, #4
 80091f6:	4313      	orrs	r3, r2
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2201      	movs	r2, #1
 800921a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2201      	movs	r2, #1
 8009242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009260:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009268:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009270:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009278:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d110      	bne.n	80092a2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d102      	bne.n	800928c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009286:	7b7b      	ldrb	r3, [r7, #13]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d001      	beq.n	8009290 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e089      	b.n	80093a4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2202      	movs	r2, #2
 8009294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2202      	movs	r2, #2
 800929c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092a0:	e031      	b.n	8009306 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b04      	cmp	r3, #4
 80092a6:	d110      	bne.n	80092ca <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80092a8:	7bbb      	ldrb	r3, [r7, #14]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d102      	bne.n	80092b4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80092ae:	7b3b      	ldrb	r3, [r7, #12]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d001      	beq.n	80092b8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e075      	b.n	80093a4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092c8:	e01d      	b.n	8009306 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d108      	bne.n	80092e2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d105      	bne.n	80092e2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092d6:	7b7b      	ldrb	r3, [r7, #13]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d102      	bne.n	80092e2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80092dc:	7b3b      	ldrb	r3, [r7, #12]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d001      	beq.n	80092e6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e05e      	b.n	80093a4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2202      	movs	r2, #2
 80092ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2202      	movs	r2, #2
 80092f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2202      	movs	r2, #2
 80092fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2202      	movs	r2, #2
 8009302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d003      	beq.n	8009314 <HAL_TIM_Encoder_Start_IT+0xc4>
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2b04      	cmp	r3, #4
 8009310:	d010      	beq.n	8009334 <HAL_TIM_Encoder_Start_IT+0xe4>
 8009312:	e01f      	b.n	8009354 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2201      	movs	r2, #1
 800931a:	2100      	movs	r1, #0
 800931c:	4618      	mov	r0, r3
 800931e:	f000 fd79 	bl	8009e14 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68da      	ldr	r2, [r3, #12]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f042 0202 	orr.w	r2, r2, #2
 8009330:	60da      	str	r2, [r3, #12]
      break;
 8009332:	e02e      	b.n	8009392 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2201      	movs	r2, #1
 800933a:	2104      	movs	r1, #4
 800933c:	4618      	mov	r0, r3
 800933e:	f000 fd69 	bl	8009e14 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68da      	ldr	r2, [r3, #12]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f042 0204 	orr.w	r2, r2, #4
 8009350:	60da      	str	r2, [r3, #12]
      break;
 8009352:	e01e      	b.n	8009392 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2201      	movs	r2, #1
 800935a:	2100      	movs	r1, #0
 800935c:	4618      	mov	r0, r3
 800935e:	f000 fd59 	bl	8009e14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2201      	movs	r2, #1
 8009368:	2104      	movs	r1, #4
 800936a:	4618      	mov	r0, r3
 800936c:	f000 fd52 	bl	8009e14 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f042 0202 	orr.w	r2, r2, #2
 800937e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68da      	ldr	r2, [r3, #12]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f042 0204 	orr.w	r2, r2, #4
 800938e:	60da      	str	r2, [r3, #12]
      break;
 8009390:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f042 0201 	orr.w	r2, r2, #1
 80093a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	f003 0302 	and.w	r3, r3, #2
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d122      	bne.n	8009408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	f003 0302 	and.w	r3, r3, #2
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d11b      	bne.n	8009408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f06f 0202 	mvn.w	r2, #2
 80093d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d003      	beq.n	80093f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa4c 	bl	800988c <HAL_TIM_IC_CaptureCallback>
 80093f4:	e005      	b.n	8009402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7f8 fb2e 	bl	8001a58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fa4f 	bl	80098a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	f003 0304 	and.w	r3, r3, #4
 8009412:	2b04      	cmp	r3, #4
 8009414:	d122      	bne.n	800945c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	f003 0304 	and.w	r3, r3, #4
 8009420:	2b04      	cmp	r3, #4
 8009422:	d11b      	bne.n	800945c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f06f 0204 	mvn.w	r2, #4
 800942c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2202      	movs	r2, #2
 8009432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800943e:	2b00      	cmp	r3, #0
 8009440:	d003      	beq.n	800944a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fa22 	bl	800988c <HAL_TIM_IC_CaptureCallback>
 8009448:	e005      	b.n	8009456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7f8 fb04 	bl	8001a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fa25 	bl	80098a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	f003 0308 	and.w	r3, r3, #8
 8009466:	2b08      	cmp	r3, #8
 8009468:	d122      	bne.n	80094b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	f003 0308 	and.w	r3, r3, #8
 8009474:	2b08      	cmp	r3, #8
 8009476:	d11b      	bne.n	80094b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f06f 0208 	mvn.w	r2, #8
 8009480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2204      	movs	r2, #4
 8009486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	69db      	ldr	r3, [r3, #28]
 800948e:	f003 0303 	and.w	r3, r3, #3
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f9f8 	bl	800988c <HAL_TIM_IC_CaptureCallback>
 800949c:	e005      	b.n	80094aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7f8 fada 	bl	8001a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f9fb 	bl	80098a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	f003 0310 	and.w	r3, r3, #16
 80094ba:	2b10      	cmp	r3, #16
 80094bc:	d122      	bne.n	8009504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f003 0310 	and.w	r3, r3, #16
 80094c8:	2b10      	cmp	r3, #16
 80094ca:	d11b      	bne.n	8009504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f06f 0210 	mvn.w	r2, #16
 80094d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2208      	movs	r2, #8
 80094da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f9ce 	bl	800988c <HAL_TIM_IC_CaptureCallback>
 80094f0:	e005      	b.n	80094fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7f8 fab0 	bl	8001a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f9d1 	bl	80098a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b01      	cmp	r3, #1
 8009510:	d10e      	bne.n	8009530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b01      	cmp	r3, #1
 800951e:	d107      	bne.n	8009530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f06f 0201 	mvn.w	r2, #1
 8009528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7f8 fa72 	bl	8001a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800953a:	2b80      	cmp	r3, #128	; 0x80
 800953c:	d10e      	bne.n	800955c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009548:	2b80      	cmp	r3, #128	; 0x80
 800954a:	d107      	bne.n	800955c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fcfa 	bl	8009f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009566:	2b40      	cmp	r3, #64	; 0x40
 8009568:	d10e      	bne.n	8009588 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009574:	2b40      	cmp	r3, #64	; 0x40
 8009576:	d107      	bne.n	8009588 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f996 	bl	80098b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	f003 0320 	and.w	r3, r3, #32
 8009592:	2b20      	cmp	r3, #32
 8009594:	d10e      	bne.n	80095b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	f003 0320 	and.w	r3, r3, #32
 80095a0:	2b20      	cmp	r3, #32
 80095a2:	d107      	bne.n	80095b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f06f 0220 	mvn.w	r2, #32
 80095ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fcc4 	bl	8009f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095b4:	bf00      	nop
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d101      	bne.n	80095da <HAL_TIM_OC_ConfigChannel+0x1e>
 80095d6:	2302      	movs	r3, #2
 80095d8:	e048      	b.n	800966c <HAL_TIM_OC_ConfigChannel+0xb0>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2201      	movs	r2, #1
 80095de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b0c      	cmp	r3, #12
 80095e6:	d839      	bhi.n	800965c <HAL_TIM_OC_ConfigChannel+0xa0>
 80095e8:	a201      	add	r2, pc, #4	; (adr r2, 80095f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80095ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ee:	bf00      	nop
 80095f0:	08009625 	.word	0x08009625
 80095f4:	0800965d 	.word	0x0800965d
 80095f8:	0800965d 	.word	0x0800965d
 80095fc:	0800965d 	.word	0x0800965d
 8009600:	08009633 	.word	0x08009633
 8009604:	0800965d 	.word	0x0800965d
 8009608:	0800965d 	.word	0x0800965d
 800960c:	0800965d 	.word	0x0800965d
 8009610:	08009641 	.word	0x08009641
 8009614:	0800965d 	.word	0x0800965d
 8009618:	0800965d 	.word	0x0800965d
 800961c:	0800965d 	.word	0x0800965d
 8009620:	0800964f 	.word	0x0800964f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68b9      	ldr	r1, [r7, #8]
 800962a:	4618      	mov	r0, r3
 800962c:	f000 f9cc 	bl	80099c8 <TIM_OC1_SetConfig>
      break;
 8009630:	e017      	b.n	8009662 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68b9      	ldr	r1, [r7, #8]
 8009638:	4618      	mov	r0, r3
 800963a:	f000 fa2b 	bl	8009a94 <TIM_OC2_SetConfig>
      break;
 800963e:	e010      	b.n	8009662 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68b9      	ldr	r1, [r7, #8]
 8009646:	4618      	mov	r0, r3
 8009648:	f000 fa90 	bl	8009b6c <TIM_OC3_SetConfig>
      break;
 800964c:	e009      	b.n	8009662 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 faf3 	bl	8009c40 <TIM_OC4_SetConfig>
      break;
 800965a:	e002      	b.n	8009662 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	75fb      	strb	r3, [r7, #23]
      break;
 8009660:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800966a:	7dfb      	ldrb	r3, [r7, #23]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3718      	adds	r7, #24
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009688:	2b01      	cmp	r3, #1
 800968a:	d101      	bne.n	8009690 <HAL_TIM_ConfigClockSource+0x1c>
 800968c:	2302      	movs	r3, #2
 800968e:	e0b4      	b.n	80097fa <HAL_TIM_ConfigClockSource+0x186>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2202      	movs	r2, #2
 800969c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80096ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096c8:	d03e      	beq.n	8009748 <HAL_TIM_ConfigClockSource+0xd4>
 80096ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096ce:	f200 8087 	bhi.w	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 80096d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096d6:	f000 8086 	beq.w	80097e6 <HAL_TIM_ConfigClockSource+0x172>
 80096da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096de:	d87f      	bhi.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 80096e0:	2b70      	cmp	r3, #112	; 0x70
 80096e2:	d01a      	beq.n	800971a <HAL_TIM_ConfigClockSource+0xa6>
 80096e4:	2b70      	cmp	r3, #112	; 0x70
 80096e6:	d87b      	bhi.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 80096e8:	2b60      	cmp	r3, #96	; 0x60
 80096ea:	d050      	beq.n	800978e <HAL_TIM_ConfigClockSource+0x11a>
 80096ec:	2b60      	cmp	r3, #96	; 0x60
 80096ee:	d877      	bhi.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 80096f0:	2b50      	cmp	r3, #80	; 0x50
 80096f2:	d03c      	beq.n	800976e <HAL_TIM_ConfigClockSource+0xfa>
 80096f4:	2b50      	cmp	r3, #80	; 0x50
 80096f6:	d873      	bhi.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 80096f8:	2b40      	cmp	r3, #64	; 0x40
 80096fa:	d058      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x13a>
 80096fc:	2b40      	cmp	r3, #64	; 0x40
 80096fe:	d86f      	bhi.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009700:	2b30      	cmp	r3, #48	; 0x30
 8009702:	d064      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x15a>
 8009704:	2b30      	cmp	r3, #48	; 0x30
 8009706:	d86b      	bhi.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009708:	2b20      	cmp	r3, #32
 800970a:	d060      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x15a>
 800970c:	2b20      	cmp	r3, #32
 800970e:	d867      	bhi.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009710:	2b00      	cmp	r3, #0
 8009712:	d05c      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x15a>
 8009714:	2b10      	cmp	r3, #16
 8009716:	d05a      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x15a>
 8009718:	e062      	b.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6818      	ldr	r0, [r3, #0]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	6899      	ldr	r1, [r3, #8]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	f000 fb53 	bl	8009dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800973c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	609a      	str	r2, [r3, #8]
      break;
 8009746:	e04f      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6818      	ldr	r0, [r3, #0]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	6899      	ldr	r1, [r3, #8]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	685a      	ldr	r2, [r3, #4]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	f000 fb3c 	bl	8009dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800976a:	609a      	str	r2, [r3, #8]
      break;
 800976c:	e03c      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6818      	ldr	r0, [r3, #0]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	6859      	ldr	r1, [r3, #4]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	461a      	mov	r2, r3
 800977c:	f000 fab0 	bl	8009ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2150      	movs	r1, #80	; 0x50
 8009786:	4618      	mov	r0, r3
 8009788:	f000 fb09 	bl	8009d9e <TIM_ITRx_SetConfig>
      break;
 800978c:	e02c      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6818      	ldr	r0, [r3, #0]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	6859      	ldr	r1, [r3, #4]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	461a      	mov	r2, r3
 800979c:	f000 facf 	bl	8009d3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2160      	movs	r1, #96	; 0x60
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 faf9 	bl	8009d9e <TIM_ITRx_SetConfig>
      break;
 80097ac:	e01c      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6818      	ldr	r0, [r3, #0]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	6859      	ldr	r1, [r3, #4]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	461a      	mov	r2, r3
 80097bc:	f000 fa90 	bl	8009ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2140      	movs	r1, #64	; 0x40
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 fae9 	bl	8009d9e <TIM_ITRx_SetConfig>
      break;
 80097cc:	e00c      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4619      	mov	r1, r3
 80097d8:	4610      	mov	r0, r2
 80097da:	f000 fae0 	bl	8009d9e <TIM_ITRx_SetConfig>
      break;
 80097de:	e003      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	73fb      	strb	r3, [r7, #15]
      break;
 80097e4:	e000      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80097e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
	...

08009804 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800980e:	2300      	movs	r3, #0
 8009810:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	2b0c      	cmp	r3, #12
 8009816:	d831      	bhi.n	800987c <HAL_TIM_ReadCapturedValue+0x78>
 8009818:	a201      	add	r2, pc, #4	; (adr r2, 8009820 <HAL_TIM_ReadCapturedValue+0x1c>)
 800981a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981e:	bf00      	nop
 8009820:	08009855 	.word	0x08009855
 8009824:	0800987d 	.word	0x0800987d
 8009828:	0800987d 	.word	0x0800987d
 800982c:	0800987d 	.word	0x0800987d
 8009830:	0800985f 	.word	0x0800985f
 8009834:	0800987d 	.word	0x0800987d
 8009838:	0800987d 	.word	0x0800987d
 800983c:	0800987d 	.word	0x0800987d
 8009840:	08009869 	.word	0x08009869
 8009844:	0800987d 	.word	0x0800987d
 8009848:	0800987d 	.word	0x0800987d
 800984c:	0800987d 	.word	0x0800987d
 8009850:	08009873 	.word	0x08009873
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800985a:	60fb      	str	r3, [r7, #12]

      break;
 800985c:	e00f      	b.n	800987e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009864:	60fb      	str	r3, [r7, #12]

      break;
 8009866:	e00a      	b.n	800987e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986e:	60fb      	str	r3, [r7, #12]

      break;
 8009870:	e005      	b.n	800987e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009878:	60fb      	str	r3, [r7, #12]

      break;
 800987a:	e000      	b.n	800987e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800987c:	bf00      	nop
  }

  return tmpreg;
 800987e:	68fb      	ldr	r3, [r7, #12]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009894:	bf00      	nop
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098a8:	bf00      	nop
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a34      	ldr	r2, [pc, #208]	; (80099ac <TIM_Base_SetConfig+0xe4>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d00f      	beq.n	8009900 <TIM_Base_SetConfig+0x38>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098e6:	d00b      	beq.n	8009900 <TIM_Base_SetConfig+0x38>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a31      	ldr	r2, [pc, #196]	; (80099b0 <TIM_Base_SetConfig+0xe8>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d007      	beq.n	8009900 <TIM_Base_SetConfig+0x38>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a30      	ldr	r2, [pc, #192]	; (80099b4 <TIM_Base_SetConfig+0xec>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d003      	beq.n	8009900 <TIM_Base_SetConfig+0x38>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a2f      	ldr	r2, [pc, #188]	; (80099b8 <TIM_Base_SetConfig+0xf0>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d108      	bne.n	8009912 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	4313      	orrs	r3, r2
 8009910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a25      	ldr	r2, [pc, #148]	; (80099ac <TIM_Base_SetConfig+0xe4>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d01b      	beq.n	8009952 <TIM_Base_SetConfig+0x8a>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009920:	d017      	beq.n	8009952 <TIM_Base_SetConfig+0x8a>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a22      	ldr	r2, [pc, #136]	; (80099b0 <TIM_Base_SetConfig+0xe8>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d013      	beq.n	8009952 <TIM_Base_SetConfig+0x8a>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a21      	ldr	r2, [pc, #132]	; (80099b4 <TIM_Base_SetConfig+0xec>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d00f      	beq.n	8009952 <TIM_Base_SetConfig+0x8a>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a20      	ldr	r2, [pc, #128]	; (80099b8 <TIM_Base_SetConfig+0xf0>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d00b      	beq.n	8009952 <TIM_Base_SetConfig+0x8a>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a1f      	ldr	r2, [pc, #124]	; (80099bc <TIM_Base_SetConfig+0xf4>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d007      	beq.n	8009952 <TIM_Base_SetConfig+0x8a>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a1e      	ldr	r2, [pc, #120]	; (80099c0 <TIM_Base_SetConfig+0xf8>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d003      	beq.n	8009952 <TIM_Base_SetConfig+0x8a>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a1d      	ldr	r2, [pc, #116]	; (80099c4 <TIM_Base_SetConfig+0xfc>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d108      	bne.n	8009964 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4313      	orrs	r3, r2
 8009962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	4313      	orrs	r3, r2
 8009970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	689a      	ldr	r2, [r3, #8]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a08      	ldr	r2, [pc, #32]	; (80099ac <TIM_Base_SetConfig+0xe4>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d103      	bne.n	8009998 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	691a      	ldr	r2, [r3, #16]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	615a      	str	r2, [r3, #20]
}
 800999e:	bf00      	nop
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	40010000 	.word	0x40010000
 80099b0:	40000400 	.word	0x40000400
 80099b4:	40000800 	.word	0x40000800
 80099b8:	40000c00 	.word	0x40000c00
 80099bc:	40014000 	.word	0x40014000
 80099c0:	40014400 	.word	0x40014400
 80099c4:	40014800 	.word	0x40014800

080099c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	f023 0201 	bic.w	r2, r3, #1
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f023 0303 	bic.w	r3, r3, #3
 80099fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f023 0302 	bic.w	r3, r3, #2
 8009a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a1c      	ldr	r2, [pc, #112]	; (8009a90 <TIM_OC1_SetConfig+0xc8>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d10c      	bne.n	8009a3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	f023 0308 	bic.w	r3, r3, #8
 8009a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f023 0304 	bic.w	r3, r3, #4
 8009a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a13      	ldr	r2, [pc, #76]	; (8009a90 <TIM_OC1_SetConfig+0xc8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d111      	bne.n	8009a6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	685a      	ldr	r2, [r3, #4]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	697a      	ldr	r2, [r7, #20]
 8009a82:	621a      	str	r2, [r3, #32]
}
 8009a84:	bf00      	nop
 8009a86:	371c      	adds	r7, #28
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	40010000 	.word	0x40010000

08009a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b087      	sub	sp, #28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	f023 0210 	bic.w	r2, r3, #16
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	021b      	lsls	r3, r3, #8
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f023 0320 	bic.w	r3, r3, #32
 8009ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	011b      	lsls	r3, r3, #4
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a1e      	ldr	r2, [pc, #120]	; (8009b68 <TIM_OC2_SetConfig+0xd4>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d10d      	bne.n	8009b10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	011b      	lsls	r3, r3, #4
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a15      	ldr	r2, [pc, #84]	; (8009b68 <TIM_OC2_SetConfig+0xd4>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d113      	bne.n	8009b40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	695b      	ldr	r3, [r3, #20]
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	621a      	str	r2, [r3, #32]
}
 8009b5a:	bf00      	nop
 8009b5c:	371c      	adds	r7, #28
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	40010000 	.word	0x40010000

08009b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b087      	sub	sp, #28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f023 0303 	bic.w	r3, r3, #3
 8009ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	021b      	lsls	r3, r3, #8
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a1d      	ldr	r2, [pc, #116]	; (8009c3c <TIM_OC3_SetConfig+0xd0>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d10d      	bne.n	8009be6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	021b      	lsls	r3, r3, #8
 8009bd8:	697a      	ldr	r2, [r7, #20]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a14      	ldr	r2, [pc, #80]	; (8009c3c <TIM_OC3_SetConfig+0xd0>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d113      	bne.n	8009c16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	011b      	lsls	r3, r3, #4
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	011b      	lsls	r3, r3, #4
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	621a      	str	r2, [r3, #32]
}
 8009c30:	bf00      	nop
 8009c32:	371c      	adds	r7, #28
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	40010000 	.word	0x40010000

08009c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b087      	sub	sp, #28
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	69db      	ldr	r3, [r3, #28]
 8009c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	021b      	lsls	r3, r3, #8
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	031b      	lsls	r3, r3, #12
 8009c92:	693a      	ldr	r2, [r7, #16]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a10      	ldr	r2, [pc, #64]	; (8009cdc <TIM_OC4_SetConfig+0x9c>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d109      	bne.n	8009cb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	695b      	ldr	r3, [r3, #20]
 8009cac:	019b      	lsls	r3, r3, #6
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	697a      	ldr	r2, [r7, #20]
 8009cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	685a      	ldr	r2, [r3, #4]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	621a      	str	r2, [r3, #32]
}
 8009cce:	bf00      	nop
 8009cd0:	371c      	adds	r7, #28
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	40010000 	.word	0x40010000

08009ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b087      	sub	sp, #28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	f023 0201 	bic.w	r2, r3, #1
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	011b      	lsls	r3, r3, #4
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f023 030a 	bic.w	r3, r3, #10
 8009d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	697a      	ldr	r2, [r7, #20]
 8009d30:	621a      	str	r2, [r3, #32]
}
 8009d32:	bf00      	nop
 8009d34:	371c      	adds	r7, #28
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b087      	sub	sp, #28
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6a1b      	ldr	r3, [r3, #32]
 8009d4e:	f023 0210 	bic.w	r2, r3, #16
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	699b      	ldr	r3, [r3, #24]
 8009d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6a1b      	ldr	r3, [r3, #32]
 8009d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	031b      	lsls	r3, r3, #12
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	011b      	lsls	r3, r3, #4
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	621a      	str	r2, [r3, #32]
}
 8009d92:	bf00      	nop
 8009d94:	371c      	adds	r7, #28
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b085      	sub	sp, #20
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	f043 0307 	orr.w	r3, r3, #7
 8009dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	609a      	str	r2, [r3, #8]
}
 8009dc8:	bf00      	nop
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b087      	sub	sp, #28
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
 8009de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	021a      	lsls	r2, r3, #8
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	431a      	orrs	r2, r3
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	697a      	ldr	r2, [r7, #20]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	609a      	str	r2, [r3, #8]
}
 8009e08:	bf00      	nop
 8009e0a:	371c      	adds	r7, #28
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b087      	sub	sp, #28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	f003 031f 	and.w	r3, r3, #31
 8009e26:	2201      	movs	r2, #1
 8009e28:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6a1a      	ldr	r2, [r3, #32]
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	43db      	mvns	r3, r3
 8009e36:	401a      	ands	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6a1a      	ldr	r2, [r3, #32]
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	f003 031f 	and.w	r3, r3, #31
 8009e46:	6879      	ldr	r1, [r7, #4]
 8009e48:	fa01 f303 	lsl.w	r3, r1, r3
 8009e4c:	431a      	orrs	r2, r3
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	621a      	str	r2, [r3, #32]
}
 8009e52:	bf00      	nop
 8009e54:	371c      	adds	r7, #28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
	...

08009e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d101      	bne.n	8009e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e74:	2302      	movs	r3, #2
 8009e76:	e050      	b.n	8009f1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2202      	movs	r2, #2
 8009e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a1c      	ldr	r2, [pc, #112]	; (8009f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d018      	beq.n	8009eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ec4:	d013      	beq.n	8009eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a18      	ldr	r2, [pc, #96]	; (8009f2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d00e      	beq.n	8009eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a16      	ldr	r2, [pc, #88]	; (8009f30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d009      	beq.n	8009eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a15      	ldr	r2, [pc, #84]	; (8009f34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d004      	beq.n	8009eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a13      	ldr	r2, [pc, #76]	; (8009f38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d10c      	bne.n	8009f08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	40010000 	.word	0x40010000
 8009f2c:	40000400 	.word	0x40000400
 8009f30:	40000800 	.word	0x40000800
 8009f34:	40000c00 	.word	0x40000c00
 8009f38:	40014000 	.word	0x40014000

08009f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e03f      	b.n	8009ff6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d106      	bne.n	8009f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f7fa f868 	bl	8004060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2224      	movs	r2, #36	; 0x24
 8009f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68da      	ldr	r2, [r3, #12]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 f929 	bl	800a200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	691a      	ldr	r2, [r3, #16]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	695a      	ldr	r2, [r3, #20]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68da      	ldr	r2, [r3, #12]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2220      	movs	r2, #32
 8009fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b08a      	sub	sp, #40	; 0x28
 800a002:	af02      	add	r7, sp, #8
 800a004:	60f8      	str	r0, [r7, #12]
 800a006:	60b9      	str	r1, [r7, #8]
 800a008:	603b      	str	r3, [r7, #0]
 800a00a:	4613      	mov	r3, r2
 800a00c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a00e:	2300      	movs	r3, #0
 800a010:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b20      	cmp	r3, #32
 800a01c:	d17c      	bne.n	800a118 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <HAL_UART_Transmit+0x2c>
 800a024:	88fb      	ldrh	r3, [r7, #6]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e075      	b.n	800a11a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a034:	2b01      	cmp	r3, #1
 800a036:	d101      	bne.n	800a03c <HAL_UART_Transmit+0x3e>
 800a038:	2302      	movs	r3, #2
 800a03a:	e06e      	b.n	800a11a <HAL_UART_Transmit+0x11c>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2221      	movs	r2, #33	; 0x21
 800a04e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a052:	f7fb f959 	bl	8005308 <HAL_GetTick>
 800a056:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	88fa      	ldrh	r2, [r7, #6]
 800a05c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	88fa      	ldrh	r2, [r7, #6]
 800a062:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a06c:	d108      	bne.n	800a080 <HAL_UART_Transmit+0x82>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d104      	bne.n	800a080 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a076:	2300      	movs	r3, #0
 800a078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	61bb      	str	r3, [r7, #24]
 800a07e:	e003      	b.n	800a088 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a084:	2300      	movs	r3, #0
 800a086:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a090:	e02a      	b.n	800a0e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2200      	movs	r2, #0
 800a09a:	2180      	movs	r1, #128	; 0x80
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 f840 	bl	800a122 <UART_WaitOnFlagUntilTimeout>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e036      	b.n	800a11a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10b      	bne.n	800a0ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	881b      	ldrh	r3, [r3, #0]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	3302      	adds	r3, #2
 800a0c6:	61bb      	str	r3, [r7, #24]
 800a0c8:	e007      	b.n	800a0da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	781a      	ldrb	r2, [r3, #0]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1cf      	bne.n	800a092 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	2140      	movs	r1, #64	; 0x40
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f000 f810 	bl	800a122 <UART_WaitOnFlagUntilTimeout>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e006      	b.n	800a11a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2220      	movs	r2, #32
 800a110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	e000      	b.n	800a11a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a118:	2302      	movs	r3, #2
  }
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3720      	adds	r7, #32
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b090      	sub	sp, #64	; 0x40
 800a126:	af00      	add	r7, sp, #0
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	60b9      	str	r1, [r7, #8]
 800a12c:	603b      	str	r3, [r7, #0]
 800a12e:	4613      	mov	r3, r2
 800a130:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a132:	e050      	b.n	800a1d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13a:	d04c      	beq.n	800a1d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a13c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d007      	beq.n	800a152 <UART_WaitOnFlagUntilTimeout+0x30>
 800a142:	f7fb f8e1 	bl	8005308 <HAL_GetTick>
 800a146:	4602      	mov	r2, r0
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a14e:	429a      	cmp	r2, r3
 800a150:	d241      	bcs.n	800a1d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	330c      	adds	r3, #12
 800a158:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15c:	e853 3f00 	ldrex	r3, [r3]
 800a160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a164:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	330c      	adds	r3, #12
 800a170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a172:	637a      	str	r2, [r7, #52]	; 0x34
 800a174:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a176:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a17a:	e841 2300 	strex	r3, r2, [r1]
 800a17e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1e5      	bne.n	800a152 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3314      	adds	r3, #20
 800a18c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	e853 3f00 	ldrex	r3, [r3]
 800a194:	613b      	str	r3, [r7, #16]
   return(result);
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	f023 0301 	bic.w	r3, r3, #1
 800a19c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3314      	adds	r3, #20
 800a1a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1a6:	623a      	str	r2, [r7, #32]
 800a1a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1aa:	69f9      	ldr	r1, [r7, #28]
 800a1ac:	6a3a      	ldr	r2, [r7, #32]
 800a1ae:	e841 2300 	strex	r3, r2, [r1]
 800a1b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1e5      	bne.n	800a186 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2220      	movs	r2, #32
 800a1be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e00f      	b.n	800a1f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	4013      	ands	r3, r2
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	bf0c      	ite	eq
 800a1e6:	2301      	moveq	r3, #1
 800a1e8:	2300      	movne	r3, #0
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	79fb      	ldrb	r3, [r7, #7]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d09f      	beq.n	800a134 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3740      	adds	r7, #64	; 0x40
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
	...

0800a200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a204:	b0c0      	sub	sp, #256	; 0x100
 800a206:	af00      	add	r7, sp, #0
 800a208:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a20c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a21c:	68d9      	ldr	r1, [r3, #12]
 800a21e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	ea40 0301 	orr.w	r3, r0, r1
 800a228:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a22a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	431a      	orrs	r2, r3
 800a238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	431a      	orrs	r2, r3
 800a240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a244:	69db      	ldr	r3, [r3, #28]
 800a246:	4313      	orrs	r3, r2
 800a248:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a258:	f021 010c 	bic.w	r1, r1, #12
 800a25c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a266:	430b      	orrs	r3, r1
 800a268:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a26a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a27a:	6999      	ldr	r1, [r3, #24]
 800a27c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	ea40 0301 	orr.w	r3, r0, r1
 800a286:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	4b8f      	ldr	r3, [pc, #572]	; (800a4cc <UART_SetConfig+0x2cc>)
 800a290:	429a      	cmp	r2, r3
 800a292:	d005      	beq.n	800a2a0 <UART_SetConfig+0xa0>
 800a294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	4b8d      	ldr	r3, [pc, #564]	; (800a4d0 <UART_SetConfig+0x2d0>)
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d104      	bne.n	800a2aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a2a0:	f7fd fc6a 	bl	8007b78 <HAL_RCC_GetPCLK2Freq>
 800a2a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a2a8:	e003      	b.n	800a2b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a2aa:	f7fd fc51 	bl	8007b50 <HAL_RCC_GetPCLK1Freq>
 800a2ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2b6:	69db      	ldr	r3, [r3, #28]
 800a2b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2bc:	f040 810c 	bne.w	800a4d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a2c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a2ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	462b      	mov	r3, r5
 800a2d6:	1891      	adds	r1, r2, r2
 800a2d8:	65b9      	str	r1, [r7, #88]	; 0x58
 800a2da:	415b      	adcs	r3, r3
 800a2dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	eb12 0801 	adds.w	r8, r2, r1
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	eb43 0901 	adc.w	r9, r3, r1
 800a2ee:	f04f 0200 	mov.w	r2, #0
 800a2f2:	f04f 0300 	mov.w	r3, #0
 800a2f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a2fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a2fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a302:	4690      	mov	r8, r2
 800a304:	4699      	mov	r9, r3
 800a306:	4623      	mov	r3, r4
 800a308:	eb18 0303 	adds.w	r3, r8, r3
 800a30c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a310:	462b      	mov	r3, r5
 800a312:	eb49 0303 	adc.w	r3, r9, r3
 800a316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a31a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a326:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a32a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a32e:	460b      	mov	r3, r1
 800a330:	18db      	adds	r3, r3, r3
 800a332:	653b      	str	r3, [r7, #80]	; 0x50
 800a334:	4613      	mov	r3, r2
 800a336:	eb42 0303 	adc.w	r3, r2, r3
 800a33a:	657b      	str	r3, [r7, #84]	; 0x54
 800a33c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a340:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a344:	f7f6 fc98 	bl	8000c78 <__aeabi_uldivmod>
 800a348:	4602      	mov	r2, r0
 800a34a:	460b      	mov	r3, r1
 800a34c:	4b61      	ldr	r3, [pc, #388]	; (800a4d4 <UART_SetConfig+0x2d4>)
 800a34e:	fba3 2302 	umull	r2, r3, r3, r2
 800a352:	095b      	lsrs	r3, r3, #5
 800a354:	011c      	lsls	r4, r3, #4
 800a356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a35a:	2200      	movs	r2, #0
 800a35c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a360:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a364:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a368:	4642      	mov	r2, r8
 800a36a:	464b      	mov	r3, r9
 800a36c:	1891      	adds	r1, r2, r2
 800a36e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a370:	415b      	adcs	r3, r3
 800a372:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a374:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a378:	4641      	mov	r1, r8
 800a37a:	eb12 0a01 	adds.w	sl, r2, r1
 800a37e:	4649      	mov	r1, r9
 800a380:	eb43 0b01 	adc.w	fp, r3, r1
 800a384:	f04f 0200 	mov.w	r2, #0
 800a388:	f04f 0300 	mov.w	r3, #0
 800a38c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a390:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a398:	4692      	mov	sl, r2
 800a39a:	469b      	mov	fp, r3
 800a39c:	4643      	mov	r3, r8
 800a39e:	eb1a 0303 	adds.w	r3, sl, r3
 800a3a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3a6:	464b      	mov	r3, r9
 800a3a8:	eb4b 0303 	adc.w	r3, fp, r3
 800a3ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a3b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a3c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	18db      	adds	r3, r3, r3
 800a3c8:	643b      	str	r3, [r7, #64]	; 0x40
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	eb42 0303 	adc.w	r3, r2, r3
 800a3d0:	647b      	str	r3, [r7, #68]	; 0x44
 800a3d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a3d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a3da:	f7f6 fc4d 	bl	8000c78 <__aeabi_uldivmod>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	4b3b      	ldr	r3, [pc, #236]	; (800a4d4 <UART_SetConfig+0x2d4>)
 800a3e6:	fba3 2301 	umull	r2, r3, r3, r1
 800a3ea:	095b      	lsrs	r3, r3, #5
 800a3ec:	2264      	movs	r2, #100	; 0x64
 800a3ee:	fb02 f303 	mul.w	r3, r2, r3
 800a3f2:	1acb      	subs	r3, r1, r3
 800a3f4:	00db      	lsls	r3, r3, #3
 800a3f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a3fa:	4b36      	ldr	r3, [pc, #216]	; (800a4d4 <UART_SetConfig+0x2d4>)
 800a3fc:	fba3 2302 	umull	r2, r3, r3, r2
 800a400:	095b      	lsrs	r3, r3, #5
 800a402:	005b      	lsls	r3, r3, #1
 800a404:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a408:	441c      	add	r4, r3
 800a40a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a40e:	2200      	movs	r2, #0
 800a410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a414:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a418:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a41c:	4642      	mov	r2, r8
 800a41e:	464b      	mov	r3, r9
 800a420:	1891      	adds	r1, r2, r2
 800a422:	63b9      	str	r1, [r7, #56]	; 0x38
 800a424:	415b      	adcs	r3, r3
 800a426:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a428:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a42c:	4641      	mov	r1, r8
 800a42e:	1851      	adds	r1, r2, r1
 800a430:	6339      	str	r1, [r7, #48]	; 0x30
 800a432:	4649      	mov	r1, r9
 800a434:	414b      	adcs	r3, r1
 800a436:	637b      	str	r3, [r7, #52]	; 0x34
 800a438:	f04f 0200 	mov.w	r2, #0
 800a43c:	f04f 0300 	mov.w	r3, #0
 800a440:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a444:	4659      	mov	r1, fp
 800a446:	00cb      	lsls	r3, r1, #3
 800a448:	4651      	mov	r1, sl
 800a44a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a44e:	4651      	mov	r1, sl
 800a450:	00ca      	lsls	r2, r1, #3
 800a452:	4610      	mov	r0, r2
 800a454:	4619      	mov	r1, r3
 800a456:	4603      	mov	r3, r0
 800a458:	4642      	mov	r2, r8
 800a45a:	189b      	adds	r3, r3, r2
 800a45c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a460:	464b      	mov	r3, r9
 800a462:	460a      	mov	r2, r1
 800a464:	eb42 0303 	adc.w	r3, r2, r3
 800a468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a46c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a478:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a47c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a480:	460b      	mov	r3, r1
 800a482:	18db      	adds	r3, r3, r3
 800a484:	62bb      	str	r3, [r7, #40]	; 0x28
 800a486:	4613      	mov	r3, r2
 800a488:	eb42 0303 	adc.w	r3, r2, r3
 800a48c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a48e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a492:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a496:	f7f6 fbef 	bl	8000c78 <__aeabi_uldivmod>
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	4b0d      	ldr	r3, [pc, #52]	; (800a4d4 <UART_SetConfig+0x2d4>)
 800a4a0:	fba3 1302 	umull	r1, r3, r3, r2
 800a4a4:	095b      	lsrs	r3, r3, #5
 800a4a6:	2164      	movs	r1, #100	; 0x64
 800a4a8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	00db      	lsls	r3, r3, #3
 800a4b0:	3332      	adds	r3, #50	; 0x32
 800a4b2:	4a08      	ldr	r2, [pc, #32]	; (800a4d4 <UART_SetConfig+0x2d4>)
 800a4b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b8:	095b      	lsrs	r3, r3, #5
 800a4ba:	f003 0207 	and.w	r2, r3, #7
 800a4be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4422      	add	r2, r4
 800a4c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a4c8:	e106      	b.n	800a6d8 <UART_SetConfig+0x4d8>
 800a4ca:	bf00      	nop
 800a4cc:	40011000 	.word	0x40011000
 800a4d0:	40011400 	.word	0x40011400
 800a4d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a4e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a4e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a4ea:	4642      	mov	r2, r8
 800a4ec:	464b      	mov	r3, r9
 800a4ee:	1891      	adds	r1, r2, r2
 800a4f0:	6239      	str	r1, [r7, #32]
 800a4f2:	415b      	adcs	r3, r3
 800a4f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4fa:	4641      	mov	r1, r8
 800a4fc:	1854      	adds	r4, r2, r1
 800a4fe:	4649      	mov	r1, r9
 800a500:	eb43 0501 	adc.w	r5, r3, r1
 800a504:	f04f 0200 	mov.w	r2, #0
 800a508:	f04f 0300 	mov.w	r3, #0
 800a50c:	00eb      	lsls	r3, r5, #3
 800a50e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a512:	00e2      	lsls	r2, r4, #3
 800a514:	4614      	mov	r4, r2
 800a516:	461d      	mov	r5, r3
 800a518:	4643      	mov	r3, r8
 800a51a:	18e3      	adds	r3, r4, r3
 800a51c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a520:	464b      	mov	r3, r9
 800a522:	eb45 0303 	adc.w	r3, r5, r3
 800a526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a52a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a536:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a53a:	f04f 0200 	mov.w	r2, #0
 800a53e:	f04f 0300 	mov.w	r3, #0
 800a542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a546:	4629      	mov	r1, r5
 800a548:	008b      	lsls	r3, r1, #2
 800a54a:	4621      	mov	r1, r4
 800a54c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a550:	4621      	mov	r1, r4
 800a552:	008a      	lsls	r2, r1, #2
 800a554:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a558:	f7f6 fb8e 	bl	8000c78 <__aeabi_uldivmod>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	4b60      	ldr	r3, [pc, #384]	; (800a6e4 <UART_SetConfig+0x4e4>)
 800a562:	fba3 2302 	umull	r2, r3, r3, r2
 800a566:	095b      	lsrs	r3, r3, #5
 800a568:	011c      	lsls	r4, r3, #4
 800a56a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a56e:	2200      	movs	r2, #0
 800a570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a574:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a578:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a57c:	4642      	mov	r2, r8
 800a57e:	464b      	mov	r3, r9
 800a580:	1891      	adds	r1, r2, r2
 800a582:	61b9      	str	r1, [r7, #24]
 800a584:	415b      	adcs	r3, r3
 800a586:	61fb      	str	r3, [r7, #28]
 800a588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a58c:	4641      	mov	r1, r8
 800a58e:	1851      	adds	r1, r2, r1
 800a590:	6139      	str	r1, [r7, #16]
 800a592:	4649      	mov	r1, r9
 800a594:	414b      	adcs	r3, r1
 800a596:	617b      	str	r3, [r7, #20]
 800a598:	f04f 0200 	mov.w	r2, #0
 800a59c:	f04f 0300 	mov.w	r3, #0
 800a5a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a5a4:	4659      	mov	r1, fp
 800a5a6:	00cb      	lsls	r3, r1, #3
 800a5a8:	4651      	mov	r1, sl
 800a5aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5ae:	4651      	mov	r1, sl
 800a5b0:	00ca      	lsls	r2, r1, #3
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	4642      	mov	r2, r8
 800a5ba:	189b      	adds	r3, r3, r2
 800a5bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a5c0:	464b      	mov	r3, r9
 800a5c2:	460a      	mov	r2, r1
 800a5c4:	eb42 0303 	adc.w	r3, r2, r3
 800a5c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a5cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a5d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a5d8:	f04f 0200 	mov.w	r2, #0
 800a5dc:	f04f 0300 	mov.w	r3, #0
 800a5e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	008b      	lsls	r3, r1, #2
 800a5e8:	4641      	mov	r1, r8
 800a5ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5ee:	4641      	mov	r1, r8
 800a5f0:	008a      	lsls	r2, r1, #2
 800a5f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a5f6:	f7f6 fb3f 	bl	8000c78 <__aeabi_uldivmod>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	4611      	mov	r1, r2
 800a600:	4b38      	ldr	r3, [pc, #224]	; (800a6e4 <UART_SetConfig+0x4e4>)
 800a602:	fba3 2301 	umull	r2, r3, r3, r1
 800a606:	095b      	lsrs	r3, r3, #5
 800a608:	2264      	movs	r2, #100	; 0x64
 800a60a:	fb02 f303 	mul.w	r3, r2, r3
 800a60e:	1acb      	subs	r3, r1, r3
 800a610:	011b      	lsls	r3, r3, #4
 800a612:	3332      	adds	r3, #50	; 0x32
 800a614:	4a33      	ldr	r2, [pc, #204]	; (800a6e4 <UART_SetConfig+0x4e4>)
 800a616:	fba2 2303 	umull	r2, r3, r2, r3
 800a61a:	095b      	lsrs	r3, r3, #5
 800a61c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a620:	441c      	add	r4, r3
 800a622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a626:	2200      	movs	r2, #0
 800a628:	673b      	str	r3, [r7, #112]	; 0x70
 800a62a:	677a      	str	r2, [r7, #116]	; 0x74
 800a62c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a630:	4642      	mov	r2, r8
 800a632:	464b      	mov	r3, r9
 800a634:	1891      	adds	r1, r2, r2
 800a636:	60b9      	str	r1, [r7, #8]
 800a638:	415b      	adcs	r3, r3
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a640:	4641      	mov	r1, r8
 800a642:	1851      	adds	r1, r2, r1
 800a644:	6039      	str	r1, [r7, #0]
 800a646:	4649      	mov	r1, r9
 800a648:	414b      	adcs	r3, r1
 800a64a:	607b      	str	r3, [r7, #4]
 800a64c:	f04f 0200 	mov.w	r2, #0
 800a650:	f04f 0300 	mov.w	r3, #0
 800a654:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a658:	4659      	mov	r1, fp
 800a65a:	00cb      	lsls	r3, r1, #3
 800a65c:	4651      	mov	r1, sl
 800a65e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a662:	4651      	mov	r1, sl
 800a664:	00ca      	lsls	r2, r1, #3
 800a666:	4610      	mov	r0, r2
 800a668:	4619      	mov	r1, r3
 800a66a:	4603      	mov	r3, r0
 800a66c:	4642      	mov	r2, r8
 800a66e:	189b      	adds	r3, r3, r2
 800a670:	66bb      	str	r3, [r7, #104]	; 0x68
 800a672:	464b      	mov	r3, r9
 800a674:	460a      	mov	r2, r1
 800a676:	eb42 0303 	adc.w	r3, r2, r3
 800a67a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a67c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	663b      	str	r3, [r7, #96]	; 0x60
 800a686:	667a      	str	r2, [r7, #100]	; 0x64
 800a688:	f04f 0200 	mov.w	r2, #0
 800a68c:	f04f 0300 	mov.w	r3, #0
 800a690:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a694:	4649      	mov	r1, r9
 800a696:	008b      	lsls	r3, r1, #2
 800a698:	4641      	mov	r1, r8
 800a69a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a69e:	4641      	mov	r1, r8
 800a6a0:	008a      	lsls	r2, r1, #2
 800a6a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a6a6:	f7f6 fae7 	bl	8000c78 <__aeabi_uldivmod>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4b0d      	ldr	r3, [pc, #52]	; (800a6e4 <UART_SetConfig+0x4e4>)
 800a6b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a6b4:	095b      	lsrs	r3, r3, #5
 800a6b6:	2164      	movs	r1, #100	; 0x64
 800a6b8:	fb01 f303 	mul.w	r3, r1, r3
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	011b      	lsls	r3, r3, #4
 800a6c0:	3332      	adds	r3, #50	; 0x32
 800a6c2:	4a08      	ldr	r2, [pc, #32]	; (800a6e4 <UART_SetConfig+0x4e4>)
 800a6c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6c8:	095b      	lsrs	r3, r3, #5
 800a6ca:	f003 020f 	and.w	r2, r3, #15
 800a6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4422      	add	r2, r4
 800a6d6:	609a      	str	r2, [r3, #8]
}
 800a6d8:	bf00      	nop
 800a6da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6e4:	51eb851f 	.word	0x51eb851f

0800a6e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a6ec:	4904      	ldr	r1, [pc, #16]	; (800a700 <MX_FATFS_Init+0x18>)
 800a6ee:	4805      	ldr	r0, [pc, #20]	; (800a704 <MX_FATFS_Init+0x1c>)
 800a6f0:	f002 fbee 	bl	800ced0 <FATFS_LinkDriver>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	4b03      	ldr	r3, [pc, #12]	; (800a708 <MX_FATFS_Init+0x20>)
 800a6fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a6fc:	bf00      	nop
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	20019e88 	.word	0x20019e88
 800a704:	20000964 	.word	0x20000964
 800a708:	20019e84 	.word	0x20019e84

0800a70c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a70c:	b480      	push	{r7}
 800a70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a710:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a712:	4618      	mov	r0, r3
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	4603      	mov	r3, r0
 800a724:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800a726:	79fb      	ldrb	r3, [r7, #7]
 800a728:	4618      	mov	r0, r3
 800a72a:	f7f9 ffcf 	bl	80046cc <USER_SPI_initialize>
 800a72e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a730:	4618      	mov	r0, r3
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	4603      	mov	r3, r0
 800a740:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800a742:	79fb      	ldrb	r3, [r7, #7]
 800a744:	4618      	mov	r0, r3
 800a746:	f7fa f8ad 	bl	80048a4 <USER_SPI_status>
 800a74a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60b9      	str	r1, [r7, #8]
 800a75c:	607a      	str	r2, [r7, #4]
 800a75e:	603b      	str	r3, [r7, #0]
 800a760:	4603      	mov	r3, r0
 800a762:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800a764:	7bf8      	ldrb	r0, [r7, #15]
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	68b9      	ldr	r1, [r7, #8]
 800a76c:	f7fa f8b0 	bl	80048d0 <USER_SPI_read>
 800a770:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b084      	sub	sp, #16
 800a77e:	af00      	add	r7, sp, #0
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]
 800a786:	4603      	mov	r3, r0
 800a788:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800a78a:	7bf8      	ldrb	r0, [r7, #15]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	68b9      	ldr	r1, [r7, #8]
 800a792:	f7fa f903 	bl	800499c <USER_SPI_write>
 800a796:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	603a      	str	r2, [r7, #0]
 800a7aa:	71fb      	strb	r3, [r7, #7]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800a7b0:	79b9      	ldrb	r1, [r7, #6]
 800a7b2:	79fb      	ldrb	r3, [r7, #7]
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fa f96c 	bl	8004a94 <USER_SPI_ioctl>
 800a7bc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
	...

0800a7c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a7d2:	79fb      	ldrb	r3, [r7, #7]
 800a7d4:	4a08      	ldr	r2, [pc, #32]	; (800a7f8 <disk_status+0x30>)
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4413      	add	r3, r2
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	79fa      	ldrb	r2, [r7, #7]
 800a7e0:	4905      	ldr	r1, [pc, #20]	; (800a7f8 <disk_status+0x30>)
 800a7e2:	440a      	add	r2, r1
 800a7e4:	7a12      	ldrb	r2, [r2, #8]
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	4798      	blx	r3
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	20019eb4 	.word	0x20019eb4

0800a7fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	4a0d      	ldr	r2, [pc, #52]	; (800a844 <disk_initialize+0x48>)
 800a80e:	5cd3      	ldrb	r3, [r2, r3]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d111      	bne.n	800a838 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a814:	79fb      	ldrb	r3, [r7, #7]
 800a816:	4a0b      	ldr	r2, [pc, #44]	; (800a844 <disk_initialize+0x48>)
 800a818:	2101      	movs	r1, #1
 800a81a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a81c:	79fb      	ldrb	r3, [r7, #7]
 800a81e:	4a09      	ldr	r2, [pc, #36]	; (800a844 <disk_initialize+0x48>)
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	4413      	add	r3, r2
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	79fa      	ldrb	r2, [r7, #7]
 800a82a:	4906      	ldr	r1, [pc, #24]	; (800a844 <disk_initialize+0x48>)
 800a82c:	440a      	add	r2, r1
 800a82e:	7a12      	ldrb	r2, [r2, #8]
 800a830:	4610      	mov	r0, r2
 800a832:	4798      	blx	r3
 800a834:	4603      	mov	r3, r0
 800a836:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a838:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	20019eb4 	.word	0x20019eb4

0800a848 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a848:	b590      	push	{r4, r7, lr}
 800a84a:	b087      	sub	sp, #28
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60b9      	str	r1, [r7, #8]
 800a850:	607a      	str	r2, [r7, #4]
 800a852:	603b      	str	r3, [r7, #0]
 800a854:	4603      	mov	r3, r0
 800a856:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a858:	7bfb      	ldrb	r3, [r7, #15]
 800a85a:	4a0a      	ldr	r2, [pc, #40]	; (800a884 <disk_read+0x3c>)
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	689c      	ldr	r4, [r3, #8]
 800a864:	7bfb      	ldrb	r3, [r7, #15]
 800a866:	4a07      	ldr	r2, [pc, #28]	; (800a884 <disk_read+0x3c>)
 800a868:	4413      	add	r3, r2
 800a86a:	7a18      	ldrb	r0, [r3, #8]
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	68b9      	ldr	r1, [r7, #8]
 800a872:	47a0      	blx	r4
 800a874:	4603      	mov	r3, r0
 800a876:	75fb      	strb	r3, [r7, #23]
  return res;
 800a878:	7dfb      	ldrb	r3, [r7, #23]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	371c      	adds	r7, #28
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd90      	pop	{r4, r7, pc}
 800a882:	bf00      	nop
 800a884:	20019eb4 	.word	0x20019eb4

0800a888 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a888:	b590      	push	{r4, r7, lr}
 800a88a:	b087      	sub	sp, #28
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60b9      	str	r1, [r7, #8]
 800a890:	607a      	str	r2, [r7, #4]
 800a892:	603b      	str	r3, [r7, #0]
 800a894:	4603      	mov	r3, r0
 800a896:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a898:	7bfb      	ldrb	r3, [r7, #15]
 800a89a:	4a0a      	ldr	r2, [pc, #40]	; (800a8c4 <disk_write+0x3c>)
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	4413      	add	r3, r2
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	68dc      	ldr	r4, [r3, #12]
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
 800a8a6:	4a07      	ldr	r2, [pc, #28]	; (800a8c4 <disk_write+0x3c>)
 800a8a8:	4413      	add	r3, r2
 800a8aa:	7a18      	ldrb	r0, [r3, #8]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	68b9      	ldr	r1, [r7, #8]
 800a8b2:	47a0      	blx	r4
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	75fb      	strb	r3, [r7, #23]
  return res;
 800a8b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	371c      	adds	r7, #28
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd90      	pop	{r4, r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20019eb4 	.word	0x20019eb4

0800a8c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	603a      	str	r2, [r7, #0]
 800a8d2:	71fb      	strb	r3, [r7, #7]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a8d8:	79fb      	ldrb	r3, [r7, #7]
 800a8da:	4a09      	ldr	r2, [pc, #36]	; (800a900 <disk_ioctl+0x38>)
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4413      	add	r3, r2
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	79fa      	ldrb	r2, [r7, #7]
 800a8e6:	4906      	ldr	r1, [pc, #24]	; (800a900 <disk_ioctl+0x38>)
 800a8e8:	440a      	add	r2, r1
 800a8ea:	7a10      	ldrb	r0, [r2, #8]
 800a8ec:	79b9      	ldrb	r1, [r7, #6]
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	4798      	blx	r3
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	73fb      	strb	r3, [r7, #15]
  return res;
 800a8f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	20019eb4 	.word	0x20019eb4

0800a904 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	3301      	adds	r3, #1
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a914:	89fb      	ldrh	r3, [r7, #14]
 800a916:	021b      	lsls	r3, r3, #8
 800a918:	b21a      	sxth	r2, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	b21b      	sxth	r3, r3
 800a920:	4313      	orrs	r3, r2
 800a922:	b21b      	sxth	r3, r3
 800a924:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a926:	89fb      	ldrh	r3, [r7, #14]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3714      	adds	r7, #20
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	3303      	adds	r3, #3
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	021b      	lsls	r3, r3, #8
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	3202      	adds	r2, #2
 800a94c:	7812      	ldrb	r2, [r2, #0]
 800a94e:	4313      	orrs	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	021b      	lsls	r3, r3, #8
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	3201      	adds	r2, #1
 800a95a:	7812      	ldrb	r2, [r2, #0]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	021b      	lsls	r3, r3, #8
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	7812      	ldrb	r2, [r2, #0]
 800a968:	4313      	orrs	r3, r2
 800a96a:	60fb      	str	r3, [r7, #12]
	return rv;
 800a96c:	68fb      	ldr	r3, [r7, #12]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr

0800a97a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a97a:	b480      	push	{r7}
 800a97c:	b083      	sub	sp, #12
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	460b      	mov	r3, r1
 800a984:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	1c5a      	adds	r2, r3, #1
 800a98a:	607a      	str	r2, [r7, #4]
 800a98c:	887a      	ldrh	r2, [r7, #2]
 800a98e:	b2d2      	uxtb	r2, r2
 800a990:	701a      	strb	r2, [r3, #0]
 800a992:	887b      	ldrh	r3, [r7, #2]
 800a994:	0a1b      	lsrs	r3, r3, #8
 800a996:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	1c5a      	adds	r2, r3, #1
 800a99c:	607a      	str	r2, [r7, #4]
 800a99e:	887a      	ldrh	r2, [r7, #2]
 800a9a0:	b2d2      	uxtb	r2, r2
 800a9a2:	701a      	strb	r2, [r3, #0]
}
 800a9a4:	bf00      	nop
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	1c5a      	adds	r2, r3, #1
 800a9be:	607a      	str	r2, [r7, #4]
 800a9c0:	683a      	ldr	r2, [r7, #0]
 800a9c2:	b2d2      	uxtb	r2, r2
 800a9c4:	701a      	strb	r2, [r3, #0]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	0a1b      	lsrs	r3, r3, #8
 800a9ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	1c5a      	adds	r2, r3, #1
 800a9d0:	607a      	str	r2, [r7, #4]
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	b2d2      	uxtb	r2, r2
 800a9d6:	701a      	strb	r2, [r3, #0]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	0a1b      	lsrs	r3, r3, #8
 800a9dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	1c5a      	adds	r2, r3, #1
 800a9e2:	607a      	str	r2, [r7, #4]
 800a9e4:	683a      	ldr	r2, [r7, #0]
 800a9e6:	b2d2      	uxtb	r2, r2
 800a9e8:	701a      	strb	r2, [r3, #0]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	0a1b      	lsrs	r3, r3, #8
 800a9ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	607a      	str	r2, [r7, #4]
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	b2d2      	uxtb	r2, r2
 800a9fa:	701a      	strb	r2, [r3, #0]
}
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800aa08:	b480      	push	{r7}
 800aa0a:	b087      	sub	sp, #28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00d      	beq.n	800aa3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	1c53      	adds	r3, r2, #1
 800aa26:	613b      	str	r3, [r7, #16]
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	1c59      	adds	r1, r3, #1
 800aa2c:	6179      	str	r1, [r7, #20]
 800aa2e:	7812      	ldrb	r2, [r2, #0]
 800aa30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	607b      	str	r3, [r7, #4]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1f1      	bne.n	800aa22 <mem_cpy+0x1a>
	}
}
 800aa3e:	bf00      	nop
 800aa40:	371c      	adds	r7, #28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800aa4a:	b480      	push	{r7}
 800aa4c:	b087      	sub	sp, #28
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	60f8      	str	r0, [r7, #12]
 800aa52:	60b9      	str	r1, [r7, #8]
 800aa54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	1c5a      	adds	r2, r3, #1
 800aa5e:	617a      	str	r2, [r7, #20]
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	b2d2      	uxtb	r2, r2
 800aa64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	607b      	str	r3, [r7, #4]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1f3      	bne.n	800aa5a <mem_set+0x10>
}
 800aa72:	bf00      	nop
 800aa74:	bf00      	nop
 800aa76:	371c      	adds	r7, #28
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800aa80:	b480      	push	{r7}
 800aa82:	b089      	sub	sp, #36	; 0x24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	61fb      	str	r3, [r7, #28]
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800aa94:	2300      	movs	r3, #0
 800aa96:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	1c5a      	adds	r2, r3, #1
 800aa9c:	61fa      	str	r2, [r7, #28]
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	1c5a      	adds	r2, r3, #1
 800aaa6:	61ba      	str	r2, [r7, #24]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	1acb      	subs	r3, r1, r3
 800aaac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	607b      	str	r3, [r7, #4]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d002      	beq.n	800aac0 <mem_cmp+0x40>
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d0eb      	beq.n	800aa98 <mem_cmp+0x18>

	return r;
 800aac0:	697b      	ldr	r3, [r7, #20]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3724      	adds	r7, #36	; 0x24
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr

0800aace <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800aace:	b480      	push	{r7}
 800aad0:	b083      	sub	sp, #12
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800aad8:	e002      	b.n	800aae0 <chk_chr+0x12>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	3301      	adds	r3, #1
 800aade:	607b      	str	r3, [r7, #4]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d005      	beq.n	800aaf4 <chk_chr+0x26>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	461a      	mov	r2, r3
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d1f2      	bne.n	800aada <chk_chr+0xc>
	return *str;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab0e:	2300      	movs	r3, #0
 800ab10:	60bb      	str	r3, [r7, #8]
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	60fb      	str	r3, [r7, #12]
 800ab16:	e029      	b.n	800ab6c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ab18:	4a27      	ldr	r2, [pc, #156]	; (800abb8 <chk_lock+0xb4>)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	011b      	lsls	r3, r3, #4
 800ab1e:	4413      	add	r3, r2
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d01d      	beq.n	800ab62 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ab26:	4a24      	ldr	r2, [pc, #144]	; (800abb8 <chk_lock+0xb4>)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	011b      	lsls	r3, r3, #4
 800ab2c:	4413      	add	r3, r2
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d116      	bne.n	800ab66 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ab38:	4a1f      	ldr	r2, [pc, #124]	; (800abb8 <chk_lock+0xb4>)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	011b      	lsls	r3, r3, #4
 800ab3e:	4413      	add	r3, r2
 800ab40:	3304      	adds	r3, #4
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d10c      	bne.n	800ab66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ab4c:	4a1a      	ldr	r2, [pc, #104]	; (800abb8 <chk_lock+0xb4>)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	011b      	lsls	r3, r3, #4
 800ab52:	4413      	add	r3, r2
 800ab54:	3308      	adds	r3, #8
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d102      	bne.n	800ab66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ab60:	e007      	b.n	800ab72 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ab62:	2301      	movs	r3, #1
 800ab64:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	60fb      	str	r3, [r7, #12]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d9d2      	bls.n	800ab18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d109      	bne.n	800ab8c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d102      	bne.n	800ab84 <chk_lock+0x80>
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d101      	bne.n	800ab88 <chk_lock+0x84>
 800ab84:	2300      	movs	r3, #0
 800ab86:	e010      	b.n	800abaa <chk_lock+0xa6>
 800ab88:	2312      	movs	r3, #18
 800ab8a:	e00e      	b.n	800abaa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d108      	bne.n	800aba4 <chk_lock+0xa0>
 800ab92:	4a09      	ldr	r2, [pc, #36]	; (800abb8 <chk_lock+0xb4>)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	011b      	lsls	r3, r3, #4
 800ab98:	4413      	add	r3, r2
 800ab9a:	330c      	adds	r3, #12
 800ab9c:	881b      	ldrh	r3, [r3, #0]
 800ab9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aba2:	d101      	bne.n	800aba8 <chk_lock+0xa4>
 800aba4:	2310      	movs	r3, #16
 800aba6:	e000      	b.n	800abaa <chk_lock+0xa6>
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	20019e94 	.word	0x20019e94

0800abbc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800abc2:	2300      	movs	r3, #0
 800abc4:	607b      	str	r3, [r7, #4]
 800abc6:	e002      	b.n	800abce <enq_lock+0x12>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	3301      	adds	r3, #1
 800abcc:	607b      	str	r3, [r7, #4]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d806      	bhi.n	800abe2 <enq_lock+0x26>
 800abd4:	4a09      	ldr	r2, [pc, #36]	; (800abfc <enq_lock+0x40>)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	011b      	lsls	r3, r3, #4
 800abda:	4413      	add	r3, r2
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1f2      	bne.n	800abc8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	bf14      	ite	ne
 800abe8:	2301      	movne	r3, #1
 800abea:	2300      	moveq	r3, #0
 800abec:	b2db      	uxtb	r3, r3
}
 800abee:	4618      	mov	r0, r3
 800abf0:	370c      	adds	r7, #12
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	20019e94 	.word	0x20019e94

0800ac00 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	60fb      	str	r3, [r7, #12]
 800ac0e:	e01f      	b.n	800ac50 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ac10:	4a41      	ldr	r2, [pc, #260]	; (800ad18 <inc_lock+0x118>)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	011b      	lsls	r3, r3, #4
 800ac16:	4413      	add	r3, r2
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d113      	bne.n	800ac4a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ac22:	4a3d      	ldr	r2, [pc, #244]	; (800ad18 <inc_lock+0x118>)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	011b      	lsls	r3, r3, #4
 800ac28:	4413      	add	r3, r2
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d109      	bne.n	800ac4a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ac36:	4a38      	ldr	r2, [pc, #224]	; (800ad18 <inc_lock+0x118>)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	011b      	lsls	r3, r3, #4
 800ac3c:	4413      	add	r3, r2
 800ac3e:	3308      	adds	r3, #8
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d006      	beq.n	800ac58 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	60fb      	str	r3, [r7, #12]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d9dc      	bls.n	800ac10 <inc_lock+0x10>
 800ac56:	e000      	b.n	800ac5a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ac58:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d132      	bne.n	800acc6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac60:	2300      	movs	r3, #0
 800ac62:	60fb      	str	r3, [r7, #12]
 800ac64:	e002      	b.n	800ac6c <inc_lock+0x6c>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	60fb      	str	r3, [r7, #12]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d806      	bhi.n	800ac80 <inc_lock+0x80>
 800ac72:	4a29      	ldr	r2, [pc, #164]	; (800ad18 <inc_lock+0x118>)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	011b      	lsls	r3, r3, #4
 800ac78:	4413      	add	r3, r2
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1f2      	bne.n	800ac66 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d101      	bne.n	800ac8a <inc_lock+0x8a>
 800ac86:	2300      	movs	r3, #0
 800ac88:	e040      	b.n	800ad0c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	4922      	ldr	r1, [pc, #136]	; (800ad18 <inc_lock+0x118>)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	011b      	lsls	r3, r3, #4
 800ac94:	440b      	add	r3, r1
 800ac96:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	689a      	ldr	r2, [r3, #8]
 800ac9c:	491e      	ldr	r1, [pc, #120]	; (800ad18 <inc_lock+0x118>)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	011b      	lsls	r3, r3, #4
 800aca2:	440b      	add	r3, r1
 800aca4:	3304      	adds	r3, #4
 800aca6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	695a      	ldr	r2, [r3, #20]
 800acac:	491a      	ldr	r1, [pc, #104]	; (800ad18 <inc_lock+0x118>)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	011b      	lsls	r3, r3, #4
 800acb2:	440b      	add	r3, r1
 800acb4:	3308      	adds	r3, #8
 800acb6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800acb8:	4a17      	ldr	r2, [pc, #92]	; (800ad18 <inc_lock+0x118>)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	011b      	lsls	r3, r3, #4
 800acbe:	4413      	add	r3, r2
 800acc0:	330c      	adds	r3, #12
 800acc2:	2200      	movs	r2, #0
 800acc4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d009      	beq.n	800ace0 <inc_lock+0xe0>
 800accc:	4a12      	ldr	r2, [pc, #72]	; (800ad18 <inc_lock+0x118>)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	011b      	lsls	r3, r3, #4
 800acd2:	4413      	add	r3, r2
 800acd4:	330c      	adds	r3, #12
 800acd6:	881b      	ldrh	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <inc_lock+0xe0>
 800acdc:	2300      	movs	r3, #0
 800acde:	e015      	b.n	800ad0c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d108      	bne.n	800acf8 <inc_lock+0xf8>
 800ace6:	4a0c      	ldr	r2, [pc, #48]	; (800ad18 <inc_lock+0x118>)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	011b      	lsls	r3, r3, #4
 800acec:	4413      	add	r3, r2
 800acee:	330c      	adds	r3, #12
 800acf0:	881b      	ldrh	r3, [r3, #0]
 800acf2:	3301      	adds	r3, #1
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	e001      	b.n	800acfc <inc_lock+0xfc>
 800acf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acfc:	4906      	ldr	r1, [pc, #24]	; (800ad18 <inc_lock+0x118>)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	011b      	lsls	r3, r3, #4
 800ad02:	440b      	add	r3, r1
 800ad04:	330c      	adds	r3, #12
 800ad06:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	3301      	adds	r3, #1
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3714      	adds	r7, #20
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr
 800ad18:	20019e94 	.word	0x20019e94

0800ad1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	607b      	str	r3, [r7, #4]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d825      	bhi.n	800ad7c <dec_lock+0x60>
		n = Files[i].ctr;
 800ad30:	4a17      	ldr	r2, [pc, #92]	; (800ad90 <dec_lock+0x74>)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	011b      	lsls	r3, r3, #4
 800ad36:	4413      	add	r3, r2
 800ad38:	330c      	adds	r3, #12
 800ad3a:	881b      	ldrh	r3, [r3, #0]
 800ad3c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ad3e:	89fb      	ldrh	r3, [r7, #14]
 800ad40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad44:	d101      	bne.n	800ad4a <dec_lock+0x2e>
 800ad46:	2300      	movs	r3, #0
 800ad48:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ad4a:	89fb      	ldrh	r3, [r7, #14]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d002      	beq.n	800ad56 <dec_lock+0x3a>
 800ad50:	89fb      	ldrh	r3, [r7, #14]
 800ad52:	3b01      	subs	r3, #1
 800ad54:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ad56:	4a0e      	ldr	r2, [pc, #56]	; (800ad90 <dec_lock+0x74>)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	011b      	lsls	r3, r3, #4
 800ad5c:	4413      	add	r3, r2
 800ad5e:	330c      	adds	r3, #12
 800ad60:	89fa      	ldrh	r2, [r7, #14]
 800ad62:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ad64:	89fb      	ldrh	r3, [r7, #14]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d105      	bne.n	800ad76 <dec_lock+0x5a>
 800ad6a:	4a09      	ldr	r2, [pc, #36]	; (800ad90 <dec_lock+0x74>)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	011b      	lsls	r3, r3, #4
 800ad70:	4413      	add	r3, r2
 800ad72:	2200      	movs	r2, #0
 800ad74:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	737b      	strb	r3, [r7, #13]
 800ad7a:	e001      	b.n	800ad80 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ad7c:	2302      	movs	r3, #2
 800ad7e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ad80:	7b7b      	ldrb	r3, [r7, #13]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	20019e94 	.word	0x20019e94

0800ad94 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	60fb      	str	r3, [r7, #12]
 800ada0:	e010      	b.n	800adc4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ada2:	4a0d      	ldr	r2, [pc, #52]	; (800add8 <clear_lock+0x44>)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	011b      	lsls	r3, r3, #4
 800ada8:	4413      	add	r3, r2
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d105      	bne.n	800adbe <clear_lock+0x2a>
 800adb2:	4a09      	ldr	r2, [pc, #36]	; (800add8 <clear_lock+0x44>)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	011b      	lsls	r3, r3, #4
 800adb8:	4413      	add	r3, r2
 800adba:	2200      	movs	r2, #0
 800adbc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3301      	adds	r3, #1
 800adc2:	60fb      	str	r3, [r7, #12]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d9eb      	bls.n	800ada2 <clear_lock+0xe>
	}
}
 800adca:	bf00      	nop
 800adcc:	bf00      	nop
 800adce:	3714      	adds	r7, #20
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr
 800add8:	20019e94 	.word	0x20019e94

0800addc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b086      	sub	sp, #24
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ade4:	2300      	movs	r3, #0
 800ade6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	78db      	ldrb	r3, [r3, #3]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d034      	beq.n	800ae5a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	7858      	ldrb	r0, [r3, #1]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae00:	2301      	movs	r3, #1
 800ae02:	697a      	ldr	r2, [r7, #20]
 800ae04:	f7ff fd40 	bl	800a888 <disk_write>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d002      	beq.n	800ae14 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	73fb      	strb	r3, [r7, #15]
 800ae12:	e022      	b.n	800ae5a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	697a      	ldr	r2, [r7, #20]
 800ae20:	1ad2      	subs	r2, r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	699b      	ldr	r3, [r3, #24]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d217      	bcs.n	800ae5a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	789b      	ldrb	r3, [r3, #2]
 800ae2e:	613b      	str	r3, [r7, #16]
 800ae30:	e010      	b.n	800ae54 <sync_window+0x78>
					wsect += fs->fsize;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	4413      	add	r3, r2
 800ae3a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	7858      	ldrb	r0, [r3, #1]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae46:	2301      	movs	r3, #1
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	f7ff fd1d 	bl	800a888 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	3b01      	subs	r3, #1
 800ae52:	613b      	str	r3, [r7, #16]
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d8eb      	bhi.n	800ae32 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ae5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3718      	adds	r7, #24
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d01b      	beq.n	800aeb4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7ff ffad 	bl	800addc <sync_window>
 800ae82:	4603      	mov	r3, r0
 800ae84:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d113      	bne.n	800aeb4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	7858      	ldrb	r0, [r3, #1]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae96:	2301      	movs	r3, #1
 800ae98:	683a      	ldr	r2, [r7, #0]
 800ae9a:	f7ff fcd5 	bl	800a848 <disk_read>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d004      	beq.n	800aeae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800aea4:	f04f 33ff 	mov.w	r3, #4294967295
 800aea8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	683a      	ldr	r2, [r7, #0]
 800aeb2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
	...

0800aec0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7ff ff87 	bl	800addc <sync_window>
 800aece:	4603      	mov	r3, r0
 800aed0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d158      	bne.n	800af8a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	2b03      	cmp	r3, #3
 800aede:	d148      	bne.n	800af72 <sync_fs+0xb2>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	791b      	ldrb	r3, [r3, #4]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d144      	bne.n	800af72 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	3330      	adds	r3, #48	; 0x30
 800aeec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aef0:	2100      	movs	r1, #0
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7ff fda9 	bl	800aa4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	3330      	adds	r3, #48	; 0x30
 800aefc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af00:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800af04:	4618      	mov	r0, r3
 800af06:	f7ff fd38 	bl	800a97a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3330      	adds	r3, #48	; 0x30
 800af0e:	4921      	ldr	r1, [pc, #132]	; (800af94 <sync_fs+0xd4>)
 800af10:	4618      	mov	r0, r3
 800af12:	f7ff fd4d 	bl	800a9b0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	3330      	adds	r3, #48	; 0x30
 800af1a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800af1e:	491e      	ldr	r1, [pc, #120]	; (800af98 <sync_fs+0xd8>)
 800af20:	4618      	mov	r0, r3
 800af22:	f7ff fd45 	bl	800a9b0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	3330      	adds	r3, #48	; 0x30
 800af2a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	4619      	mov	r1, r3
 800af34:	4610      	mov	r0, r2
 800af36:	f7ff fd3b 	bl	800a9b0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3330      	adds	r3, #48	; 0x30
 800af3e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	4619      	mov	r1, r3
 800af48:	4610      	mov	r0, r2
 800af4a:	f7ff fd31 	bl	800a9b0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	69db      	ldr	r3, [r3, #28]
 800af52:	1c5a      	adds	r2, r3, #1
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	7858      	ldrb	r0, [r3, #1]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af66:	2301      	movs	r3, #1
 800af68:	f7ff fc8e 	bl	800a888 <disk_write>
			fs->fsi_flag = 0;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	785b      	ldrb	r3, [r3, #1]
 800af76:	2200      	movs	r2, #0
 800af78:	2100      	movs	r1, #0
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7ff fca4 	bl	800a8c8 <disk_ioctl>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <sync_fs+0xca>
 800af86:	2301      	movs	r3, #1
 800af88:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	41615252 	.word	0x41615252
 800af98:	61417272 	.word	0x61417272

0800af9c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	3b02      	subs	r3, #2
 800afaa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	695b      	ldr	r3, [r3, #20]
 800afb0:	3b02      	subs	r3, #2
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d301      	bcc.n	800afbc <clust2sect+0x20>
 800afb8:	2300      	movs	r3, #0
 800afba:	e008      	b.n	800afce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	895b      	ldrh	r3, [r3, #10]
 800afc0:	461a      	mov	r2, r3
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	fb03 f202 	mul.w	r2, r3, r2
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afcc:	4413      	add	r3, r2
}
 800afce:	4618      	mov	r0, r3
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b086      	sub	sp, #24
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
 800afe2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d904      	bls.n	800affa <get_fat+0x20>
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	695b      	ldr	r3, [r3, #20]
 800aff4:	683a      	ldr	r2, [r7, #0]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d302      	bcc.n	800b000 <get_fat+0x26>
		val = 1;	/* Internal error */
 800affa:	2301      	movs	r3, #1
 800affc:	617b      	str	r3, [r7, #20]
 800affe:	e08f      	b.n	800b120 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b000:	f04f 33ff 	mov.w	r3, #4294967295
 800b004:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	d062      	beq.n	800b0d4 <get_fat+0xfa>
 800b00e:	2b03      	cmp	r3, #3
 800b010:	dc7c      	bgt.n	800b10c <get_fat+0x132>
 800b012:	2b01      	cmp	r3, #1
 800b014:	d002      	beq.n	800b01c <get_fat+0x42>
 800b016:	2b02      	cmp	r3, #2
 800b018:	d042      	beq.n	800b0a0 <get_fat+0xc6>
 800b01a:	e077      	b.n	800b10c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	085b      	lsrs	r3, r3, #1
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	4413      	add	r3, r2
 800b028:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	6a1a      	ldr	r2, [r3, #32]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	0a5b      	lsrs	r3, r3, #9
 800b032:	4413      	add	r3, r2
 800b034:	4619      	mov	r1, r3
 800b036:	6938      	ldr	r0, [r7, #16]
 800b038:	f7ff ff14 	bl	800ae64 <move_window>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d167      	bne.n	800b112 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	1c5a      	adds	r2, r3, #1
 800b046:	60fa      	str	r2, [r7, #12]
 800b048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	4413      	add	r3, r2
 800b050:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b054:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	6a1a      	ldr	r2, [r3, #32]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	0a5b      	lsrs	r3, r3, #9
 800b05e:	4413      	add	r3, r2
 800b060:	4619      	mov	r1, r3
 800b062:	6938      	ldr	r0, [r7, #16]
 800b064:	f7ff fefe 	bl	800ae64 <move_window>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d153      	bne.n	800b116 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	4413      	add	r3, r2
 800b078:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b07c:	021b      	lsls	r3, r3, #8
 800b07e:	461a      	mov	r2, r3
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	4313      	orrs	r3, r2
 800b084:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	f003 0301 	and.w	r3, r3, #1
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <get_fat+0xbc>
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	091b      	lsrs	r3, r3, #4
 800b094:	e002      	b.n	800b09c <get_fat+0xc2>
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b09c:	617b      	str	r3, [r7, #20]
			break;
 800b09e:	e03f      	b.n	800b120 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	6a1a      	ldr	r2, [r3, #32]
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	0a1b      	lsrs	r3, r3, #8
 800b0a8:	4413      	add	r3, r2
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6938      	ldr	r0, [r7, #16]
 800b0ae:	f7ff fed9 	bl	800ae64 <move_window>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d130      	bne.n	800b11a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	005b      	lsls	r3, r3, #1
 800b0c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b0c6:	4413      	add	r3, r2
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7ff fc1b 	bl	800a904 <ld_word>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	617b      	str	r3, [r7, #20]
			break;
 800b0d2:	e025      	b.n	800b120 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	6a1a      	ldr	r2, [r3, #32]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	09db      	lsrs	r3, r3, #7
 800b0dc:	4413      	add	r3, r2
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6938      	ldr	r0, [r7, #16]
 800b0e2:	f7ff febf 	bl	800ae64 <move_window>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d118      	bne.n	800b11e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b0fa:	4413      	add	r3, r2
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7ff fc19 	bl	800a934 <ld_dword>
 800b102:	4603      	mov	r3, r0
 800b104:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b108:	617b      	str	r3, [r7, #20]
			break;
 800b10a:	e009      	b.n	800b120 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b10c:	2301      	movs	r3, #1
 800b10e:	617b      	str	r3, [r7, #20]
 800b110:	e006      	b.n	800b120 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b112:	bf00      	nop
 800b114:	e004      	b.n	800b120 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b116:	bf00      	nop
 800b118:	e002      	b.n	800b120 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b11a:	bf00      	nop
 800b11c:	e000      	b.n	800b120 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b11e:	bf00      	nop
		}
	}

	return val;
 800b120:	697b      	ldr	r3, [r7, #20]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3718      	adds	r7, #24
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b12a:	b590      	push	{r4, r7, lr}
 800b12c:	b089      	sub	sp, #36	; 0x24
 800b12e:	af00      	add	r7, sp, #0
 800b130:	60f8      	str	r0, [r7, #12]
 800b132:	60b9      	str	r1, [r7, #8]
 800b134:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b136:	2302      	movs	r3, #2
 800b138:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	f240 80d9 	bls.w	800b2f4 <put_fat+0x1ca>
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	695b      	ldr	r3, [r3, #20]
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	429a      	cmp	r2, r3
 800b14a:	f080 80d3 	bcs.w	800b2f4 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	2b03      	cmp	r3, #3
 800b154:	f000 8096 	beq.w	800b284 <put_fat+0x15a>
 800b158:	2b03      	cmp	r3, #3
 800b15a:	f300 80cb 	bgt.w	800b2f4 <put_fat+0x1ca>
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d002      	beq.n	800b168 <put_fat+0x3e>
 800b162:	2b02      	cmp	r3, #2
 800b164:	d06e      	beq.n	800b244 <put_fat+0x11a>
 800b166:	e0c5      	b.n	800b2f4 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	61bb      	str	r3, [r7, #24]
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	085b      	lsrs	r3, r3, #1
 800b170:	69ba      	ldr	r2, [r7, #24]
 800b172:	4413      	add	r3, r2
 800b174:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6a1a      	ldr	r2, [r3, #32]
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	0a5b      	lsrs	r3, r3, #9
 800b17e:	4413      	add	r3, r2
 800b180:	4619      	mov	r1, r3
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f7ff fe6e 	bl	800ae64 <move_window>
 800b188:	4603      	mov	r3, r0
 800b18a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b18c:	7ffb      	ldrb	r3, [r7, #31]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f040 80a9 	bne.w	800b2e6 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	1c59      	adds	r1, r3, #1
 800b19e:	61b9      	str	r1, [r7, #24]
 800b1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1a4:	4413      	add	r3, r2
 800b1a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00d      	beq.n	800b1ce <put_fat+0xa4>
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	b25b      	sxtb	r3, r3
 800b1b8:	f003 030f 	and.w	r3, r3, #15
 800b1bc:	b25a      	sxtb	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	011b      	lsls	r3, r3, #4
 800b1c4:	b25b      	sxtb	r3, r3
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	b25b      	sxtb	r3, r3
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	e001      	b.n	800b1d2 <put_fat+0xa8>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	697a      	ldr	r2, [r7, #20]
 800b1d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6a1a      	ldr	r2, [r3, #32]
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	0a5b      	lsrs	r3, r3, #9
 800b1e4:	4413      	add	r3, r2
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f7ff fe3b 	bl	800ae64 <move_window>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b1f2:	7ffb      	ldrb	r3, [r7, #31]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d178      	bne.n	800b2ea <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b204:	4413      	add	r3, r2
 800b206:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	f003 0301 	and.w	r3, r3, #1
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <put_fat+0xf0>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	091b      	lsrs	r3, r3, #4
 800b216:	b2db      	uxtb	r3, r3
 800b218:	e00e      	b.n	800b238 <put_fat+0x10e>
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	b25b      	sxtb	r3, r3
 800b220:	f023 030f 	bic.w	r3, r3, #15
 800b224:	b25a      	sxtb	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	0a1b      	lsrs	r3, r3, #8
 800b22a:	b25b      	sxtb	r3, r3
 800b22c:	f003 030f 	and.w	r3, r3, #15
 800b230:	b25b      	sxtb	r3, r3
 800b232:	4313      	orrs	r3, r2
 800b234:	b25b      	sxtb	r3, r3
 800b236:	b2db      	uxtb	r3, r3
 800b238:	697a      	ldr	r2, [r7, #20]
 800b23a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2201      	movs	r2, #1
 800b240:	70da      	strb	r2, [r3, #3]
			break;
 800b242:	e057      	b.n	800b2f4 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6a1a      	ldr	r2, [r3, #32]
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	0a1b      	lsrs	r3, r3, #8
 800b24c:	4413      	add	r3, r2
 800b24e:	4619      	mov	r1, r3
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7ff fe07 	bl	800ae64 <move_window>
 800b256:	4603      	mov	r3, r0
 800b258:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b25a:	7ffb      	ldrb	r3, [r7, #31]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d146      	bne.n	800b2ee <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	005b      	lsls	r3, r3, #1
 800b26a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b26e:	4413      	add	r3, r2
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	b292      	uxth	r2, r2
 800b274:	4611      	mov	r1, r2
 800b276:	4618      	mov	r0, r3
 800b278:	f7ff fb7f 	bl	800a97a <st_word>
			fs->wflag = 1;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2201      	movs	r2, #1
 800b280:	70da      	strb	r2, [r3, #3]
			break;
 800b282:	e037      	b.n	800b2f4 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6a1a      	ldr	r2, [r3, #32]
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	09db      	lsrs	r3, r3, #7
 800b28c:	4413      	add	r3, r2
 800b28e:	4619      	mov	r1, r3
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f7ff fde7 	bl	800ae64 <move_window>
 800b296:	4603      	mov	r3, r0
 800b298:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b29a:	7ffb      	ldrb	r3, [r7, #31]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d128      	bne.n	800b2f2 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b2b4:	4413      	add	r3, r2
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7ff fb3c 	bl	800a934 <ld_dword>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b2c2:	4323      	orrs	r3, r4
 800b2c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b2d4:	4413      	add	r3, r2
 800b2d6:	6879      	ldr	r1, [r7, #4]
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7ff fb69 	bl	800a9b0 <st_dword>
			fs->wflag = 1;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	70da      	strb	r2, [r3, #3]
			break;
 800b2e4:	e006      	b.n	800b2f4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b2e6:	bf00      	nop
 800b2e8:	e004      	b.n	800b2f4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b2ea:	bf00      	nop
 800b2ec:	e002      	b.n	800b2f4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b2ee:	bf00      	nop
 800b2f0:	e000      	b.n	800b2f4 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b2f2:	bf00      	nop
		}
	}
	return res;
 800b2f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3724      	adds	r7, #36	; 0x24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd90      	pop	{r4, r7, pc}

0800b2fe <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b088      	sub	sp, #32
 800b302:	af00      	add	r7, sp, #0
 800b304:	60f8      	str	r0, [r7, #12]
 800b306:	60b9      	str	r1, [r7, #8]
 800b308:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b30a:	2300      	movs	r3, #0
 800b30c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d904      	bls.n	800b324 <remove_chain+0x26>
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	695b      	ldr	r3, [r3, #20]
 800b31e:	68ba      	ldr	r2, [r7, #8]
 800b320:	429a      	cmp	r2, r3
 800b322:	d301      	bcc.n	800b328 <remove_chain+0x2a>
 800b324:	2302      	movs	r3, #2
 800b326:	e04b      	b.n	800b3c0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00c      	beq.n	800b348 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b32e:	f04f 32ff 	mov.w	r2, #4294967295
 800b332:	6879      	ldr	r1, [r7, #4]
 800b334:	69b8      	ldr	r0, [r7, #24]
 800b336:	f7ff fef8 	bl	800b12a <put_fat>
 800b33a:	4603      	mov	r3, r0
 800b33c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b33e:	7ffb      	ldrb	r3, [r7, #31]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d001      	beq.n	800b348 <remove_chain+0x4a>
 800b344:	7ffb      	ldrb	r3, [r7, #31]
 800b346:	e03b      	b.n	800b3c0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b348:	68b9      	ldr	r1, [r7, #8]
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f7ff fe45 	bl	800afda <get_fat>
 800b350:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d031      	beq.n	800b3bc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d101      	bne.n	800b362 <remove_chain+0x64>
 800b35e:	2302      	movs	r3, #2
 800b360:	e02e      	b.n	800b3c0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b368:	d101      	bne.n	800b36e <remove_chain+0x70>
 800b36a:	2301      	movs	r3, #1
 800b36c:	e028      	b.n	800b3c0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b36e:	2200      	movs	r2, #0
 800b370:	68b9      	ldr	r1, [r7, #8]
 800b372:	69b8      	ldr	r0, [r7, #24]
 800b374:	f7ff fed9 	bl	800b12a <put_fat>
 800b378:	4603      	mov	r3, r0
 800b37a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b37c:	7ffb      	ldrb	r3, [r7, #31]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <remove_chain+0x88>
 800b382:	7ffb      	ldrb	r3, [r7, #31]
 800b384:	e01c      	b.n	800b3c0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	691a      	ldr	r2, [r3, #16]
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	695b      	ldr	r3, [r3, #20]
 800b38e:	3b02      	subs	r3, #2
 800b390:	429a      	cmp	r2, r3
 800b392:	d20b      	bcs.n	800b3ac <remove_chain+0xae>
			fs->free_clst++;
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	691b      	ldr	r3, [r3, #16]
 800b398:	1c5a      	adds	r2, r3, #1
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	791b      	ldrb	r3, [r3, #4]
 800b3a2:	f043 0301 	orr.w	r3, r3, #1
 800b3a6:	b2da      	uxtb	r2, r3
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	695b      	ldr	r3, [r3, #20]
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d3c6      	bcc.n	800b348 <remove_chain+0x4a>
 800b3ba:	e000      	b.n	800b3be <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b3bc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3720      	adds	r7, #32
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b088      	sub	sp, #32
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10d      	bne.n	800b3fa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d004      	beq.n	800b3f4 <create_chain+0x2c>
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	69ba      	ldr	r2, [r7, #24]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d31b      	bcc.n	800b42c <create_chain+0x64>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	61bb      	str	r3, [r7, #24]
 800b3f8:	e018      	b.n	800b42c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b3fa:	6839      	ldr	r1, [r7, #0]
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7ff fdec 	bl	800afda <get_fat>
 800b402:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d801      	bhi.n	800b40e <create_chain+0x46>
 800b40a:	2301      	movs	r3, #1
 800b40c:	e070      	b.n	800b4f0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b414:	d101      	bne.n	800b41a <create_chain+0x52>
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	e06a      	b.n	800b4f0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	429a      	cmp	r2, r3
 800b422:	d201      	bcs.n	800b428 <create_chain+0x60>
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	e063      	b.n	800b4f0 <create_chain+0x128>
		scl = clst;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	3301      	adds	r3, #1
 800b434:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	695b      	ldr	r3, [r3, #20]
 800b43a:	69fa      	ldr	r2, [r7, #28]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d307      	bcc.n	800b450 <create_chain+0x88>
				ncl = 2;
 800b440:	2302      	movs	r3, #2
 800b442:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b444:	69fa      	ldr	r2, [r7, #28]
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d901      	bls.n	800b450 <create_chain+0x88>
 800b44c:	2300      	movs	r3, #0
 800b44e:	e04f      	b.n	800b4f0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b450:	69f9      	ldr	r1, [r7, #28]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7ff fdc1 	bl	800afda <get_fat>
 800b458:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00e      	beq.n	800b47e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2b01      	cmp	r3, #1
 800b464:	d003      	beq.n	800b46e <create_chain+0xa6>
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b46c:	d101      	bne.n	800b472 <create_chain+0xaa>
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	e03e      	b.n	800b4f0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b472:	69fa      	ldr	r2, [r7, #28]
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	429a      	cmp	r2, r3
 800b478:	d1da      	bne.n	800b430 <create_chain+0x68>
 800b47a:	2300      	movs	r3, #0
 800b47c:	e038      	b.n	800b4f0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b47e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b480:	f04f 32ff 	mov.w	r2, #4294967295
 800b484:	69f9      	ldr	r1, [r7, #28]
 800b486:	6938      	ldr	r0, [r7, #16]
 800b488:	f7ff fe4f 	bl	800b12a <put_fat>
 800b48c:	4603      	mov	r3, r0
 800b48e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b490:	7dfb      	ldrb	r3, [r7, #23]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d109      	bne.n	800b4aa <create_chain+0xe2>
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d006      	beq.n	800b4aa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b49c:	69fa      	ldr	r2, [r7, #28]
 800b49e:	6839      	ldr	r1, [r7, #0]
 800b4a0:	6938      	ldr	r0, [r7, #16]
 800b4a2:	f7ff fe42 	bl	800b12a <put_fat>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b4aa:	7dfb      	ldrb	r3, [r7, #23]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d116      	bne.n	800b4de <create_chain+0x116>
		fs->last_clst = ncl;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	69fa      	ldr	r2, [r7, #28]
 800b4b4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	691a      	ldr	r2, [r3, #16]
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	695b      	ldr	r3, [r3, #20]
 800b4be:	3b02      	subs	r3, #2
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d804      	bhi.n	800b4ce <create_chain+0x106>
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	691b      	ldr	r3, [r3, #16]
 800b4c8:	1e5a      	subs	r2, r3, #1
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	791b      	ldrb	r3, [r3, #4]
 800b4d2:	f043 0301 	orr.w	r3, r3, #1
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	711a      	strb	r2, [r3, #4]
 800b4dc:	e007      	b.n	800b4ee <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b4de:	7dfb      	ldrb	r3, [r7, #23]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d102      	bne.n	800b4ea <create_chain+0x122>
 800b4e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4e8:	e000      	b.n	800b4ec <create_chain+0x124>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b4ee:	69fb      	ldr	r3, [r7, #28]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3720      	adds	r7, #32
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b087      	sub	sp, #28
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50c:	3304      	adds	r3, #4
 800b50e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	0a5b      	lsrs	r3, r3, #9
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	8952      	ldrh	r2, [r2, #10]
 800b518:	fbb3 f3f2 	udiv	r3, r3, r2
 800b51c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	1d1a      	adds	r2, r3, #4
 800b522:	613a      	str	r2, [r7, #16]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <clmt_clust+0x3a>
 800b52e:	2300      	movs	r3, #0
 800b530:	e010      	b.n	800b554 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	429a      	cmp	r2, r3
 800b538:	d307      	bcc.n	800b54a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b53a:	697a      	ldr	r2, [r7, #20]
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	617b      	str	r3, [r7, #20]
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	3304      	adds	r3, #4
 800b546:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b548:	e7e9      	b.n	800b51e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b54a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	4413      	add	r3, r2
}
 800b554:	4618      	mov	r0, r3
 800b556:	371c      	adds	r7, #28
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b086      	sub	sp, #24
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b576:	d204      	bcs.n	800b582 <dir_sdi+0x22>
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	f003 031f 	and.w	r3, r3, #31
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d001      	beq.n	800b586 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b582:	2302      	movs	r3, #2
 800b584:	e063      	b.n	800b64e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d106      	bne.n	800b5a6 <dir_sdi+0x46>
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d902      	bls.n	800b5a6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10c      	bne.n	800b5c6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	095b      	lsrs	r3, r3, #5
 800b5b0:	693a      	ldr	r2, [r7, #16]
 800b5b2:	8912      	ldrh	r2, [r2, #8]
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d301      	bcc.n	800b5bc <dir_sdi+0x5c>
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	e048      	b.n	800b64e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	61da      	str	r2, [r3, #28]
 800b5c4:	e029      	b.n	800b61a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	895b      	ldrh	r3, [r3, #10]
 800b5ca:	025b      	lsls	r3, r3, #9
 800b5cc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b5ce:	e019      	b.n	800b604 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6979      	ldr	r1, [r7, #20]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff fd00 	bl	800afda <get_fat>
 800b5da:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5e2:	d101      	bne.n	800b5e8 <dir_sdi+0x88>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e032      	b.n	800b64e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d904      	bls.n	800b5f8 <dir_sdi+0x98>
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	695b      	ldr	r3, [r3, #20]
 800b5f2:	697a      	ldr	r2, [r7, #20]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d301      	bcc.n	800b5fc <dir_sdi+0x9c>
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	e028      	b.n	800b64e <dir_sdi+0xee>
			ofs -= csz;
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	1ad3      	subs	r3, r2, r3
 800b602:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b604:	683a      	ldr	r2, [r7, #0]
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d2e1      	bcs.n	800b5d0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b60c:	6979      	ldr	r1, [r7, #20]
 800b60e:	6938      	ldr	r0, [r7, #16]
 800b610:	f7ff fcc4 	bl	800af9c <clust2sect>
 800b614:	4602      	mov	r2, r0
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	697a      	ldr	r2, [r7, #20]
 800b61e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	69db      	ldr	r3, [r3, #28]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d101      	bne.n	800b62c <dir_sdi+0xcc>
 800b628:	2302      	movs	r3, #2
 800b62a:	e010      	b.n	800b64e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	69da      	ldr	r2, [r3, #28]
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	0a5b      	lsrs	r3, r3, #9
 800b634:	441a      	add	r2, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b646:	441a      	add	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3718      	adds	r7, #24
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b086      	sub	sp, #24
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	695b      	ldr	r3, [r3, #20]
 800b66a:	3320      	adds	r3, #32
 800b66c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	69db      	ldr	r3, [r3, #28]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d003      	beq.n	800b67e <dir_next+0x28>
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b67c:	d301      	bcc.n	800b682 <dir_next+0x2c>
 800b67e:	2304      	movs	r3, #4
 800b680:	e0aa      	b.n	800b7d8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f040 8098 	bne.w	800b7be <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	69db      	ldr	r3, [r3, #28]
 800b692:	1c5a      	adds	r2, r3, #1
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10b      	bne.n	800b6b8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	095b      	lsrs	r3, r3, #5
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	8912      	ldrh	r2, [r2, #8]
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	f0c0 8088 	bcc.w	800b7be <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	61da      	str	r2, [r3, #28]
 800b6b4:	2304      	movs	r3, #4
 800b6b6:	e08f      	b.n	800b7d8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	0a5b      	lsrs	r3, r3, #9
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	8952      	ldrh	r2, [r2, #10]
 800b6c0:	3a01      	subs	r2, #1
 800b6c2:	4013      	ands	r3, r2
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d17a      	bne.n	800b7be <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	f7ff fc82 	bl	800afda <get_fat>
 800b6d6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d801      	bhi.n	800b6e2 <dir_next+0x8c>
 800b6de:	2302      	movs	r3, #2
 800b6e0:	e07a      	b.n	800b7d8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e8:	d101      	bne.n	800b6ee <dir_next+0x98>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e074      	b.n	800b7d8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	695b      	ldr	r3, [r3, #20]
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d358      	bcc.n	800b7aa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d104      	bne.n	800b708 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2200      	movs	r2, #0
 800b702:	61da      	str	r2, [r3, #28]
 800b704:	2304      	movs	r3, #4
 800b706:	e067      	b.n	800b7d8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	699b      	ldr	r3, [r3, #24]
 800b70e:	4619      	mov	r1, r3
 800b710:	4610      	mov	r0, r2
 800b712:	f7ff fe59 	bl	800b3c8 <create_chain>
 800b716:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d101      	bne.n	800b722 <dir_next+0xcc>
 800b71e:	2307      	movs	r3, #7
 800b720:	e05a      	b.n	800b7d8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	2b01      	cmp	r3, #1
 800b726:	d101      	bne.n	800b72c <dir_next+0xd6>
 800b728:	2302      	movs	r3, #2
 800b72a:	e055      	b.n	800b7d8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b732:	d101      	bne.n	800b738 <dir_next+0xe2>
 800b734:	2301      	movs	r3, #1
 800b736:	e04f      	b.n	800b7d8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f7ff fb4f 	bl	800addc <sync_window>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d001      	beq.n	800b748 <dir_next+0xf2>
 800b744:	2301      	movs	r3, #1
 800b746:	e047      	b.n	800b7d8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	3330      	adds	r3, #48	; 0x30
 800b74c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b750:	2100      	movs	r1, #0
 800b752:	4618      	mov	r0, r3
 800b754:	f7ff f979 	bl	800aa4a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b758:	2300      	movs	r3, #0
 800b75a:	613b      	str	r3, [r7, #16]
 800b75c:	6979      	ldr	r1, [r7, #20]
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f7ff fc1c 	bl	800af9c <clust2sect>
 800b764:	4602      	mov	r2, r0
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	62da      	str	r2, [r3, #44]	; 0x2c
 800b76a:	e012      	b.n	800b792 <dir_next+0x13c>
						fs->wflag = 1;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2201      	movs	r2, #1
 800b770:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f7ff fb32 	bl	800addc <sync_window>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <dir_next+0x12c>
 800b77e:	2301      	movs	r3, #1
 800b780:	e02a      	b.n	800b7d8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	3301      	adds	r3, #1
 800b786:	613b      	str	r3, [r7, #16]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78c:	1c5a      	adds	r2, r3, #1
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	62da      	str	r2, [r3, #44]	; 0x2c
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	895b      	ldrh	r3, [r3, #10]
 800b796:	461a      	mov	r2, r3
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d3e6      	bcc.n	800b76c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	1ad2      	subs	r2, r2, r3
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b7b0:	6979      	ldr	r1, [r7, #20]
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f7ff fbf2 	bl	800af9c <clust2sect>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68ba      	ldr	r2, [r7, #8]
 800b7c2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d0:	441a      	add	r2, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b086      	sub	sp, #24
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff feb4 	bl	800b560 <dir_sdi>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d12b      	bne.n	800b85a <dir_alloc+0x7a>
		n = 0;
 800b802:	2300      	movs	r3, #0
 800b804:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	69db      	ldr	r3, [r3, #28]
 800b80a:	4619      	mov	r1, r3
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f7ff fb29 	bl	800ae64 <move_window>
 800b812:	4603      	mov	r3, r0
 800b814:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b816:	7dfb      	ldrb	r3, [r7, #23]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d11d      	bne.n	800b858 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6a1b      	ldr	r3, [r3, #32]
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	2be5      	cmp	r3, #229	; 0xe5
 800b824:	d004      	beq.n	800b830 <dir_alloc+0x50>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a1b      	ldr	r3, [r3, #32]
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d107      	bne.n	800b840 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	3301      	adds	r3, #1
 800b834:	613b      	str	r3, [r7, #16]
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d102      	bne.n	800b844 <dir_alloc+0x64>
 800b83e:	e00c      	b.n	800b85a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b840:	2300      	movs	r3, #0
 800b842:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b844:	2101      	movs	r1, #1
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7ff ff05 	bl	800b656 <dir_next>
 800b84c:	4603      	mov	r3, r0
 800b84e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b850:	7dfb      	ldrb	r3, [r7, #23]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d0d7      	beq.n	800b806 <dir_alloc+0x26>
 800b856:	e000      	b.n	800b85a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b858:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b85a:	7dfb      	ldrb	r3, [r7, #23]
 800b85c:	2b04      	cmp	r3, #4
 800b85e:	d101      	bne.n	800b864 <dir_alloc+0x84>
 800b860:	2307      	movs	r3, #7
 800b862:	75fb      	strb	r3, [r7, #23]
	return res;
 800b864:	7dfb      	ldrb	r3, [r7, #23]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3718      	adds	r7, #24
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b084      	sub	sp, #16
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	331a      	adds	r3, #26
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7ff f841 	bl	800a904 <ld_word>
 800b882:	4603      	mov	r3, r0
 800b884:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	2b03      	cmp	r3, #3
 800b88c:	d109      	bne.n	800b8a2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	3314      	adds	r3, #20
 800b892:	4618      	mov	r0, r3
 800b894:	f7ff f836 	bl	800a904 <ld_word>
 800b898:	4603      	mov	r3, r0
 800b89a:	041b      	lsls	r3, r3, #16
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3710      	adds	r7, #16
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	331a      	adds	r3, #26
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	b292      	uxth	r2, r2
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7ff f859 	bl	800a97a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	2b03      	cmp	r3, #3
 800b8ce:	d109      	bne.n	800b8e4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	f103 0214 	add.w	r2, r3, #20
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	0c1b      	lsrs	r3, r3, #16
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	4619      	mov	r1, r3
 800b8de:	4610      	mov	r0, r2
 800b8e0:	f7ff f84b 	bl	800a97a <st_word>
	}
}
 800b8e4:	bf00      	nop
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7ff fe2f 	bl	800b560 <dir_sdi>
 800b902:	4603      	mov	r3, r0
 800b904:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b906:	7dfb      	ldrb	r3, [r7, #23]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <dir_find+0x24>
 800b90c:	7dfb      	ldrb	r3, [r7, #23]
 800b90e:	e03e      	b.n	800b98e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	69db      	ldr	r3, [r3, #28]
 800b914:	4619      	mov	r1, r3
 800b916:	6938      	ldr	r0, [r7, #16]
 800b918:	f7ff faa4 	bl	800ae64 <move_window>
 800b91c:	4603      	mov	r3, r0
 800b91e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b920:	7dfb      	ldrb	r3, [r7, #23]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d12f      	bne.n	800b986 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a1b      	ldr	r3, [r3, #32]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b92e:	7bfb      	ldrb	r3, [r7, #15]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d102      	bne.n	800b93a <dir_find+0x4e>
 800b934:	2304      	movs	r3, #4
 800b936:	75fb      	strb	r3, [r7, #23]
 800b938:	e028      	b.n	800b98c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a1b      	ldr	r3, [r3, #32]
 800b93e:	330b      	adds	r3, #11
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b946:	b2da      	uxtb	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a1b      	ldr	r3, [r3, #32]
 800b950:	330b      	adds	r3, #11
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	f003 0308 	and.w	r3, r3, #8
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <dir_find+0x86>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6a18      	ldr	r0, [r3, #32]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	3324      	adds	r3, #36	; 0x24
 800b964:	220b      	movs	r2, #11
 800b966:	4619      	mov	r1, r3
 800b968:	f7ff f88a 	bl	800aa80 <mem_cmp>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00b      	beq.n	800b98a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b972:	2100      	movs	r1, #0
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7ff fe6e 	bl	800b656 <dir_next>
 800b97a:	4603      	mov	r3, r0
 800b97c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d0c5      	beq.n	800b910 <dir_find+0x24>
 800b984:	e002      	b.n	800b98c <dir_find+0xa0>
		if (res != FR_OK) break;
 800b986:	bf00      	nop
 800b988:	e000      	b.n	800b98c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b98a:	bf00      	nop

	return res;
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3718      	adds	r7, #24
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b084      	sub	sp, #16
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b9a4:	2101      	movs	r1, #1
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7ff ff1a 	bl	800b7e0 <dir_alloc>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b9b0:	7bfb      	ldrb	r3, [r7, #15]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d11c      	bne.n	800b9f0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	69db      	ldr	r3, [r3, #28]
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	68b8      	ldr	r0, [r7, #8]
 800b9be:	f7ff fa51 	bl	800ae64 <move_window>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b9c6:	7bfb      	ldrb	r3, [r7, #15]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d111      	bne.n	800b9f0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a1b      	ldr	r3, [r3, #32]
 800b9d0:	2220      	movs	r2, #32
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7ff f838 	bl	800aa4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a18      	ldr	r0, [r3, #32]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	3324      	adds	r3, #36	; 0x24
 800b9e2:	220b      	movs	r2, #11
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	f7ff f80f 	bl	800aa08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
	...

0800b9fc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b088      	sub	sp, #32
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	60fb      	str	r3, [r7, #12]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	3324      	adds	r3, #36	; 0x24
 800ba10:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ba12:	220b      	movs	r2, #11
 800ba14:	2120      	movs	r1, #32
 800ba16:	68b8      	ldr	r0, [r7, #8]
 800ba18:	f7ff f817 	bl	800aa4a <mem_set>
	si = i = 0; ni = 8;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	613b      	str	r3, [r7, #16]
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	61fb      	str	r3, [r7, #28]
 800ba24:	2308      	movs	r3, #8
 800ba26:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	1c5a      	adds	r2, r3, #1
 800ba2c:	61fa      	str	r2, [r7, #28]
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	4413      	add	r3, r2
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ba36:	7efb      	ldrb	r3, [r7, #27]
 800ba38:	2b20      	cmp	r3, #32
 800ba3a:	d94e      	bls.n	800bada <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ba3c:	7efb      	ldrb	r3, [r7, #27]
 800ba3e:	2b2f      	cmp	r3, #47	; 0x2f
 800ba40:	d006      	beq.n	800ba50 <create_name+0x54>
 800ba42:	7efb      	ldrb	r3, [r7, #27]
 800ba44:	2b5c      	cmp	r3, #92	; 0x5c
 800ba46:	d110      	bne.n	800ba6a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ba48:	e002      	b.n	800ba50 <create_name+0x54>
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	61fb      	str	r3, [r7, #28]
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	4413      	add	r3, r2
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	2b2f      	cmp	r3, #47	; 0x2f
 800ba5a:	d0f6      	beq.n	800ba4a <create_name+0x4e>
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	4413      	add	r3, r2
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	2b5c      	cmp	r3, #92	; 0x5c
 800ba66:	d0f0      	beq.n	800ba4a <create_name+0x4e>
			break;
 800ba68:	e038      	b.n	800badc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ba6a:	7efb      	ldrb	r3, [r7, #27]
 800ba6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba6e:	d003      	beq.n	800ba78 <create_name+0x7c>
 800ba70:	693a      	ldr	r2, [r7, #16]
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d30c      	bcc.n	800ba92 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	2b0b      	cmp	r3, #11
 800ba7c:	d002      	beq.n	800ba84 <create_name+0x88>
 800ba7e:	7efb      	ldrb	r3, [r7, #27]
 800ba80:	2b2e      	cmp	r3, #46	; 0x2e
 800ba82:	d001      	beq.n	800ba88 <create_name+0x8c>
 800ba84:	2306      	movs	r3, #6
 800ba86:	e044      	b.n	800bb12 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ba88:	2308      	movs	r3, #8
 800ba8a:	613b      	str	r3, [r7, #16]
 800ba8c:	230b      	movs	r3, #11
 800ba8e:	617b      	str	r3, [r7, #20]
			continue;
 800ba90:	e022      	b.n	800bad8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ba92:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	da04      	bge.n	800baa4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ba9a:	7efb      	ldrb	r3, [r7, #27]
 800ba9c:	3b80      	subs	r3, #128	; 0x80
 800ba9e:	4a1f      	ldr	r2, [pc, #124]	; (800bb1c <create_name+0x120>)
 800baa0:	5cd3      	ldrb	r3, [r2, r3]
 800baa2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800baa4:	7efb      	ldrb	r3, [r7, #27]
 800baa6:	4619      	mov	r1, r3
 800baa8:	481d      	ldr	r0, [pc, #116]	; (800bb20 <create_name+0x124>)
 800baaa:	f7ff f810 	bl	800aace <chk_chr>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <create_name+0xbc>
 800bab4:	2306      	movs	r3, #6
 800bab6:	e02c      	b.n	800bb12 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bab8:	7efb      	ldrb	r3, [r7, #27]
 800baba:	2b60      	cmp	r3, #96	; 0x60
 800babc:	d905      	bls.n	800baca <create_name+0xce>
 800babe:	7efb      	ldrb	r3, [r7, #27]
 800bac0:	2b7a      	cmp	r3, #122	; 0x7a
 800bac2:	d802      	bhi.n	800baca <create_name+0xce>
 800bac4:	7efb      	ldrb	r3, [r7, #27]
 800bac6:	3b20      	subs	r3, #32
 800bac8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	1c5a      	adds	r2, r3, #1
 800bace:	613a      	str	r2, [r7, #16]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	4413      	add	r3, r2
 800bad4:	7efa      	ldrb	r2, [r7, #27]
 800bad6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bad8:	e7a6      	b.n	800ba28 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bada:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	441a      	add	r2, r3
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <create_name+0xf4>
 800baec:	2306      	movs	r3, #6
 800baee:	e010      	b.n	800bb12 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	2be5      	cmp	r3, #229	; 0xe5
 800baf6:	d102      	bne.n	800bafe <create_name+0x102>
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	2205      	movs	r2, #5
 800bafc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bafe:	7efb      	ldrb	r3, [r7, #27]
 800bb00:	2b20      	cmp	r3, #32
 800bb02:	d801      	bhi.n	800bb08 <create_name+0x10c>
 800bb04:	2204      	movs	r2, #4
 800bb06:	e000      	b.n	800bb0a <create_name+0x10e>
 800bb08:	2200      	movs	r2, #0
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	330b      	adds	r3, #11
 800bb0e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bb10:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3720      	adds	r7, #32
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	080122a4 	.word	0x080122a4
 800bb20:	08010790 	.word	0x08010790

0800bb24 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bb38:	e002      	b.n	800bb40 <follow_path+0x1c>
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	603b      	str	r3, [r7, #0]
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	2b2f      	cmp	r3, #47	; 0x2f
 800bb46:	d0f8      	beq.n	800bb3a <follow_path+0x16>
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	2b5c      	cmp	r3, #92	; 0x5c
 800bb4e:	d0f4      	beq.n	800bb3a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	2200      	movs	r2, #0
 800bb54:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	2b1f      	cmp	r3, #31
 800bb5c:	d80a      	bhi.n	800bb74 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2280      	movs	r2, #128	; 0x80
 800bb62:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bb66:	2100      	movs	r1, #0
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7ff fcf9 	bl	800b560 <dir_sdi>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	75fb      	strb	r3, [r7, #23]
 800bb72:	e043      	b.n	800bbfc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bb74:	463b      	mov	r3, r7
 800bb76:	4619      	mov	r1, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f7ff ff3f 	bl	800b9fc <create_name>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb82:	7dfb      	ldrb	r3, [r7, #23]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d134      	bne.n	800bbf2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7ff feaf 	bl	800b8ec <dir_find>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bb98:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bb9a:	7dfb      	ldrb	r3, [r7, #23]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00a      	beq.n	800bbb6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bba0:	7dfb      	ldrb	r3, [r7, #23]
 800bba2:	2b04      	cmp	r3, #4
 800bba4:	d127      	bne.n	800bbf6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bba6:	7afb      	ldrb	r3, [r7, #11]
 800bba8:	f003 0304 	and.w	r3, r3, #4
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d122      	bne.n	800bbf6 <follow_path+0xd2>
 800bbb0:	2305      	movs	r3, #5
 800bbb2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bbb4:	e01f      	b.n	800bbf6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bbb6:	7afb      	ldrb	r3, [r7, #11]
 800bbb8:	f003 0304 	and.w	r3, r3, #4
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d11c      	bne.n	800bbfa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	799b      	ldrb	r3, [r3, #6]
 800bbc4:	f003 0310 	and.w	r3, r3, #16
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d102      	bne.n	800bbd2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bbcc:	2305      	movs	r3, #5
 800bbce:	75fb      	strb	r3, [r7, #23]
 800bbd0:	e014      	b.n	800bbfc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	695b      	ldr	r3, [r3, #20]
 800bbdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbe0:	4413      	add	r3, r2
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f7ff fe42 	bl	800b86e <ld_clust>
 800bbea:	4602      	mov	r2, r0
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bbf0:	e7c0      	b.n	800bb74 <follow_path+0x50>
			if (res != FR_OK) break;
 800bbf2:	bf00      	nop
 800bbf4:	e002      	b.n	800bbfc <follow_path+0xd8>
				break;
 800bbf6:	bf00      	nop
 800bbf8:	e000      	b.n	800bbfc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bbfa:	bf00      	nop
			}
		}
	}

	return res;
 800bbfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3718      	adds	r7, #24
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bc06:	b480      	push	{r7}
 800bc08:	b087      	sub	sp, #28
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bc0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc12:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d031      	beq.n	800bc80 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	617b      	str	r3, [r7, #20]
 800bc22:	e002      	b.n	800bc2a <get_ldnumber+0x24>
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	3301      	adds	r3, #1
 800bc28:	617b      	str	r3, [r7, #20]
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	2b20      	cmp	r3, #32
 800bc30:	d903      	bls.n	800bc3a <get_ldnumber+0x34>
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	2b3a      	cmp	r3, #58	; 0x3a
 800bc38:	d1f4      	bne.n	800bc24 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	2b3a      	cmp	r3, #58	; 0x3a
 800bc40:	d11c      	bne.n	800bc7c <get_ldnumber+0x76>
			tp = *path;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	1c5a      	adds	r2, r3, #1
 800bc4c:	60fa      	str	r2, [r7, #12]
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	3b30      	subs	r3, #48	; 0x30
 800bc52:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2b09      	cmp	r3, #9
 800bc58:	d80e      	bhi.n	800bc78 <get_ldnumber+0x72>
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d10a      	bne.n	800bc78 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d107      	bne.n	800bc78 <get_ldnumber+0x72>
					vol = (int)i;
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	617b      	str	r3, [r7, #20]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	697a      	ldr	r2, [r7, #20]
 800bc76:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	e002      	b.n	800bc82 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bc80:	693b      	ldr	r3, [r7, #16]
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	371c      	adds	r7, #28
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
	...

0800bc90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	70da      	strb	r2, [r3, #3]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f04f 32ff 	mov.w	r2, #4294967295
 800bca6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f7ff f8da 	bl	800ae64 <move_window>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d001      	beq.n	800bcba <check_fs+0x2a>
 800bcb6:	2304      	movs	r3, #4
 800bcb8:	e038      	b.n	800bd2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	3330      	adds	r3, #48	; 0x30
 800bcbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fe fe1e 	bl	800a904 <ld_word>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	461a      	mov	r2, r3
 800bccc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d001      	beq.n	800bcd8 <check_fs+0x48>
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	e029      	b.n	800bd2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bcde:	2be9      	cmp	r3, #233	; 0xe9
 800bce0:	d009      	beq.n	800bcf6 <check_fs+0x66>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bce8:	2beb      	cmp	r3, #235	; 0xeb
 800bcea:	d11e      	bne.n	800bd2a <check_fs+0x9a>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800bcf2:	2b90      	cmp	r3, #144	; 0x90
 800bcf4:	d119      	bne.n	800bd2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	3330      	adds	r3, #48	; 0x30
 800bcfa:	3336      	adds	r3, #54	; 0x36
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7fe fe19 	bl	800a934 <ld_dword>
 800bd02:	4603      	mov	r3, r0
 800bd04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bd08:	4a0a      	ldr	r2, [pc, #40]	; (800bd34 <check_fs+0xa4>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d101      	bne.n	800bd12 <check_fs+0x82>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	e00c      	b.n	800bd2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	3330      	adds	r3, #48	; 0x30
 800bd16:	3352      	adds	r3, #82	; 0x52
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7fe fe0b 	bl	800a934 <ld_dword>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	4a05      	ldr	r2, [pc, #20]	; (800bd38 <check_fs+0xa8>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d101      	bne.n	800bd2a <check_fs+0x9a>
 800bd26:	2300      	movs	r3, #0
 800bd28:	e000      	b.n	800bd2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bd2a:	2302      	movs	r3, #2
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	00544146 	.word	0x00544146
 800bd38:	33544146 	.word	0x33544146

0800bd3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b096      	sub	sp, #88	; 0x58
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	4613      	mov	r3, r2
 800bd48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f7ff ff58 	bl	800bc06 <get_ldnumber>
 800bd56:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	da01      	bge.n	800bd62 <find_volume+0x26>
 800bd5e:	230b      	movs	r3, #11
 800bd60:	e22d      	b.n	800c1be <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bd62:	4aa1      	ldr	r2, [pc, #644]	; (800bfe8 <find_volume+0x2ac>)
 800bd64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd6a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d101      	bne.n	800bd76 <find_volume+0x3a>
 800bd72:	230c      	movs	r3, #12
 800bd74:	e223      	b.n	800c1be <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bd7c:	79fb      	ldrb	r3, [r7, #7]
 800bd7e:	f023 0301 	bic.w	r3, r3, #1
 800bd82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d01a      	beq.n	800bdc2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8e:	785b      	ldrb	r3, [r3, #1]
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7fe fd19 	bl	800a7c8 <disk_status>
 800bd96:	4603      	mov	r3, r0
 800bd98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bd9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bda0:	f003 0301 	and.w	r3, r3, #1
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d10c      	bne.n	800bdc2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bda8:	79fb      	ldrb	r3, [r7, #7]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d007      	beq.n	800bdbe <find_volume+0x82>
 800bdae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdb2:	f003 0304 	and.w	r3, r3, #4
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d001      	beq.n	800bdbe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bdba:	230a      	movs	r3, #10
 800bdbc:	e1ff      	b.n	800c1be <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	e1fd      	b.n	800c1be <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bdc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdca:	b2da      	uxtb	r2, r3
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd2:	785b      	ldrb	r3, [r3, #1]
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fe fd11 	bl	800a7fc <disk_initialize>
 800bdda:	4603      	mov	r3, r0
 800bddc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bde0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bde4:	f003 0301 	and.w	r3, r3, #1
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d001      	beq.n	800bdf0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bdec:	2303      	movs	r3, #3
 800bdee:	e1e6      	b.n	800c1be <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bdf0:	79fb      	ldrb	r3, [r7, #7]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d007      	beq.n	800be06 <find_volume+0xca>
 800bdf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdfa:	f003 0304 	and.w	r3, r3, #4
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d001      	beq.n	800be06 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800be02:	230a      	movs	r3, #10
 800be04:	e1db      	b.n	800c1be <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800be06:	2300      	movs	r3, #0
 800be08:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800be0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be0e:	f7ff ff3f 	bl	800bc90 <check_fs>
 800be12:	4603      	mov	r3, r0
 800be14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800be18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be1c:	2b02      	cmp	r3, #2
 800be1e:	d149      	bne.n	800beb4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be20:	2300      	movs	r3, #0
 800be22:	643b      	str	r3, [r7, #64]	; 0x40
 800be24:	e01e      	b.n	800be64 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800be26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be2e:	011b      	lsls	r3, r3, #4
 800be30:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800be34:	4413      	add	r3, r2
 800be36:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800be38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3a:	3304      	adds	r3, #4
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d006      	beq.n	800be50 <find_volume+0x114>
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	3308      	adds	r3, #8
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe fd74 	bl	800a934 <ld_dword>
 800be4c:	4602      	mov	r2, r0
 800be4e:	e000      	b.n	800be52 <find_volume+0x116>
 800be50:	2200      	movs	r2, #0
 800be52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	3358      	adds	r3, #88	; 0x58
 800be58:	443b      	add	r3, r7
 800be5a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be60:	3301      	adds	r3, #1
 800be62:	643b      	str	r3, [r7, #64]	; 0x40
 800be64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be66:	2b03      	cmp	r3, #3
 800be68:	d9dd      	bls.n	800be26 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800be6a:	2300      	movs	r3, #0
 800be6c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800be6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <find_volume+0x13e>
 800be74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be76:	3b01      	subs	r3, #1
 800be78:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800be7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	3358      	adds	r3, #88	; 0x58
 800be80:	443b      	add	r3, r7
 800be82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800be86:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800be88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d005      	beq.n	800be9a <find_volume+0x15e>
 800be8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be92:	f7ff fefd 	bl	800bc90 <check_fs>
 800be96:	4603      	mov	r3, r0
 800be98:	e000      	b.n	800be9c <find_volume+0x160>
 800be9a:	2303      	movs	r3, #3
 800be9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bea0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d905      	bls.n	800beb4 <find_volume+0x178>
 800bea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beaa:	3301      	adds	r3, #1
 800beac:	643b      	str	r3, [r7, #64]	; 0x40
 800beae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beb0:	2b03      	cmp	r3, #3
 800beb2:	d9e2      	bls.n	800be7a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800beb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800beb8:	2b04      	cmp	r3, #4
 800beba:	d101      	bne.n	800bec0 <find_volume+0x184>
 800bebc:	2301      	movs	r3, #1
 800bebe:	e17e      	b.n	800c1be <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bec0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d901      	bls.n	800becc <find_volume+0x190>
 800bec8:	230d      	movs	r3, #13
 800beca:	e178      	b.n	800c1be <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800becc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bece:	3330      	adds	r3, #48	; 0x30
 800bed0:	330b      	adds	r3, #11
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fe fd16 	bl	800a904 <ld_word>
 800bed8:	4603      	mov	r3, r0
 800beda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bede:	d001      	beq.n	800bee4 <find_volume+0x1a8>
 800bee0:	230d      	movs	r3, #13
 800bee2:	e16c      	b.n	800c1be <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee6:	3330      	adds	r3, #48	; 0x30
 800bee8:	3316      	adds	r3, #22
 800beea:	4618      	mov	r0, r3
 800beec:	f7fe fd0a 	bl	800a904 <ld_word>
 800bef0:	4603      	mov	r3, r0
 800bef2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d106      	bne.n	800bf08 <find_volume+0x1cc>
 800befa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befc:	3330      	adds	r3, #48	; 0x30
 800befe:	3324      	adds	r3, #36	; 0x24
 800bf00:	4618      	mov	r0, r3
 800bf02:	f7fe fd17 	bl	800a934 <ld_dword>
 800bf06:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bf08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf0c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf10:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800bf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf16:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1a:	789b      	ldrb	r3, [r3, #2]
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d005      	beq.n	800bf2c <find_volume+0x1f0>
 800bf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf22:	789b      	ldrb	r3, [r3, #2]
 800bf24:	2b02      	cmp	r3, #2
 800bf26:	d001      	beq.n	800bf2c <find_volume+0x1f0>
 800bf28:	230d      	movs	r3, #13
 800bf2a:	e148      	b.n	800c1be <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2e:	789b      	ldrb	r3, [r3, #2]
 800bf30:	461a      	mov	r2, r3
 800bf32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf34:	fb02 f303 	mul.w	r3, r2, r3
 800bf38:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf44:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf48:	895b      	ldrh	r3, [r3, #10]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d008      	beq.n	800bf60 <find_volume+0x224>
 800bf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf50:	895b      	ldrh	r3, [r3, #10]
 800bf52:	461a      	mov	r2, r3
 800bf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf56:	895b      	ldrh	r3, [r3, #10]
 800bf58:	3b01      	subs	r3, #1
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d001      	beq.n	800bf64 <find_volume+0x228>
 800bf60:	230d      	movs	r3, #13
 800bf62:	e12c      	b.n	800c1be <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf66:	3330      	adds	r3, #48	; 0x30
 800bf68:	3311      	adds	r3, #17
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fe fcca 	bl	800a904 <ld_word>
 800bf70:	4603      	mov	r3, r0
 800bf72:	461a      	mov	r2, r3
 800bf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf76:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7a:	891b      	ldrh	r3, [r3, #8]
 800bf7c:	f003 030f 	and.w	r3, r3, #15
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d001      	beq.n	800bf8a <find_volume+0x24e>
 800bf86:	230d      	movs	r3, #13
 800bf88:	e119      	b.n	800c1be <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8c:	3330      	adds	r3, #48	; 0x30
 800bf8e:	3313      	adds	r3, #19
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7fe fcb7 	bl	800a904 <ld_word>
 800bf96:	4603      	mov	r3, r0
 800bf98:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bf9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d106      	bne.n	800bfae <find_volume+0x272>
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa2:	3330      	adds	r3, #48	; 0x30
 800bfa4:	3320      	adds	r3, #32
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fe fcc4 	bl	800a934 <ld_dword>
 800bfac:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb0:	3330      	adds	r3, #48	; 0x30
 800bfb2:	330e      	adds	r3, #14
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7fe fca5 	bl	800a904 <ld_word>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bfbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d101      	bne.n	800bfc8 <find_volume+0x28c>
 800bfc4:	230d      	movs	r3, #13
 800bfc6:	e0fa      	b.n	800c1be <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bfc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bfca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfcc:	4413      	add	r3, r2
 800bfce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfd0:	8912      	ldrh	r2, [r2, #8]
 800bfd2:	0912      	lsrs	r2, r2, #4
 800bfd4:	b292      	uxth	r2, r2
 800bfd6:	4413      	add	r3, r2
 800bfd8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bfda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d204      	bcs.n	800bfec <find_volume+0x2b0>
 800bfe2:	230d      	movs	r3, #13
 800bfe4:	e0eb      	b.n	800c1be <find_volume+0x482>
 800bfe6:	bf00      	nop
 800bfe8:	20019e8c 	.word	0x20019e8c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bfec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bff4:	8952      	ldrh	r2, [r2, #10]
 800bff6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bffa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d101      	bne.n	800c006 <find_volume+0x2ca>
 800c002:	230d      	movs	r3, #13
 800c004:	e0db      	b.n	800c1be <find_volume+0x482>
		fmt = FS_FAT32;
 800c006:	2303      	movs	r3, #3
 800c008:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c012:	4293      	cmp	r3, r2
 800c014:	d802      	bhi.n	800c01c <find_volume+0x2e0>
 800c016:	2302      	movs	r3, #2
 800c018:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c022:	4293      	cmp	r3, r2
 800c024:	d802      	bhi.n	800c02c <find_volume+0x2f0>
 800c026:	2301      	movs	r3, #1
 800c028:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02e:	1c9a      	adds	r2, r3, #2
 800c030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c032:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c036:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c038:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c03a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c03c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c03e:	441a      	add	r2, r3
 800c040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c042:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c044:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	441a      	add	r2, r3
 800c04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c04e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c052:	2b03      	cmp	r3, #3
 800c054:	d11e      	bne.n	800c094 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c058:	3330      	adds	r3, #48	; 0x30
 800c05a:	332a      	adds	r3, #42	; 0x2a
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7fe fc51 	bl	800a904 <ld_word>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d001      	beq.n	800c06c <find_volume+0x330>
 800c068:	230d      	movs	r3, #13
 800c06a:	e0a8      	b.n	800c1be <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06e:	891b      	ldrh	r3, [r3, #8]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d001      	beq.n	800c078 <find_volume+0x33c>
 800c074:	230d      	movs	r3, #13
 800c076:	e0a2      	b.n	800c1be <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07a:	3330      	adds	r3, #48	; 0x30
 800c07c:	332c      	adds	r3, #44	; 0x2c
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fe fc58 	bl	800a934 <ld_dword>
 800c084:	4602      	mov	r2, r0
 800c086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c088:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08c:	695b      	ldr	r3, [r3, #20]
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	647b      	str	r3, [r7, #68]	; 0x44
 800c092:	e01f      	b.n	800c0d4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c096:	891b      	ldrh	r3, [r3, #8]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d101      	bne.n	800c0a0 <find_volume+0x364>
 800c09c:	230d      	movs	r3, #13
 800c09e:	e08e      	b.n	800c1be <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a2:	6a1a      	ldr	r2, [r3, #32]
 800c0a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0a6:	441a      	add	r2, r3
 800c0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0aa:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c0ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c0b0:	2b02      	cmp	r3, #2
 800c0b2:	d103      	bne.n	800c0bc <find_volume+0x380>
 800c0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b6:	695b      	ldr	r3, [r3, #20]
 800c0b8:	005b      	lsls	r3, r3, #1
 800c0ba:	e00a      	b.n	800c0d2 <find_volume+0x396>
 800c0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0be:	695a      	ldr	r2, [r3, #20]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	005b      	lsls	r3, r3, #1
 800c0c4:	4413      	add	r3, r2
 800c0c6:	085a      	lsrs	r2, r3, #1
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	f003 0301 	and.w	r3, r3, #1
 800c0d0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c0d2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d6:	699a      	ldr	r2, [r3, #24]
 800c0d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0da:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c0de:	0a5b      	lsrs	r3, r3, #9
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d201      	bcs.n	800c0e8 <find_volume+0x3ac>
 800c0e4:	230d      	movs	r3, #13
 800c0e6:	e06a      	b.n	800c1be <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ee:	611a      	str	r2, [r3, #16]
 800c0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f2:	691a      	ldr	r2, [r3, #16]
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fa:	2280      	movs	r2, #128	; 0x80
 800c0fc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c0fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c102:	2b03      	cmp	r3, #3
 800c104:	d149      	bne.n	800c19a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c108:	3330      	adds	r3, #48	; 0x30
 800c10a:	3330      	adds	r3, #48	; 0x30
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7fe fbf9 	bl	800a904 <ld_word>
 800c112:	4603      	mov	r3, r0
 800c114:	2b01      	cmp	r3, #1
 800c116:	d140      	bne.n	800c19a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c11a:	3301      	adds	r3, #1
 800c11c:	4619      	mov	r1, r3
 800c11e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c120:	f7fe fea0 	bl	800ae64 <move_window>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d137      	bne.n	800c19a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12c:	2200      	movs	r2, #0
 800c12e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c132:	3330      	adds	r3, #48	; 0x30
 800c134:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c138:	4618      	mov	r0, r3
 800c13a:	f7fe fbe3 	bl	800a904 <ld_word>
 800c13e:	4603      	mov	r3, r0
 800c140:	461a      	mov	r2, r3
 800c142:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c146:	429a      	cmp	r2, r3
 800c148:	d127      	bne.n	800c19a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14c:	3330      	adds	r3, #48	; 0x30
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fe fbf0 	bl	800a934 <ld_dword>
 800c154:	4603      	mov	r3, r0
 800c156:	4a1c      	ldr	r2, [pc, #112]	; (800c1c8 <find_volume+0x48c>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d11e      	bne.n	800c19a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15e:	3330      	adds	r3, #48	; 0x30
 800c160:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c164:	4618      	mov	r0, r3
 800c166:	f7fe fbe5 	bl	800a934 <ld_dword>
 800c16a:	4603      	mov	r3, r0
 800c16c:	4a17      	ldr	r2, [pc, #92]	; (800c1cc <find_volume+0x490>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d113      	bne.n	800c19a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c174:	3330      	adds	r3, #48	; 0x30
 800c176:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fe fbda 	bl	800a934 <ld_dword>
 800c180:	4602      	mov	r2, r0
 800c182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c184:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c188:	3330      	adds	r3, #48	; 0x30
 800c18a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fe fbd0 	bl	800a934 <ld_dword>
 800c194:	4602      	mov	r2, r0
 800c196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c198:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c19c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c1a0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c1a2:	4b0b      	ldr	r3, [pc, #44]	; (800c1d0 <find_volume+0x494>)
 800c1a4:	881b      	ldrh	r3, [r3, #0]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	4b09      	ldr	r3, [pc, #36]	; (800c1d0 <find_volume+0x494>)
 800c1ac:	801a      	strh	r2, [r3, #0]
 800c1ae:	4b08      	ldr	r3, [pc, #32]	; (800c1d0 <find_volume+0x494>)
 800c1b0:	881a      	ldrh	r2, [r3, #0]
 800c1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c1b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c1b8:	f7fe fdec 	bl	800ad94 <clear_lock>
#endif
	return FR_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3758      	adds	r7, #88	; 0x58
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	41615252 	.word	0x41615252
 800c1cc:	61417272 	.word	0x61417272
 800c1d0:	20019e90 	.word	0x20019e90

0800c1d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c1de:	2309      	movs	r3, #9
 800c1e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d01c      	beq.n	800c222 <validate+0x4e>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d018      	beq.n	800c222 <validate+0x4e>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d013      	beq.n	800c222 <validate+0x4e>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	889a      	ldrh	r2, [r3, #4]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	88db      	ldrh	r3, [r3, #6]
 800c204:	429a      	cmp	r2, r3
 800c206:	d10c      	bne.n	800c222 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	785b      	ldrb	r3, [r3, #1]
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fe fada 	bl	800a7c8 <disk_status>
 800c214:	4603      	mov	r3, r0
 800c216:	f003 0301 	and.w	r3, r3, #1
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d101      	bne.n	800c222 <validate+0x4e>
			res = FR_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c222:	7bfb      	ldrb	r3, [r7, #15]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d102      	bne.n	800c22e <validate+0x5a>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	e000      	b.n	800c230 <validate+0x5c>
 800c22e:	2300      	movs	r3, #0
 800c230:	683a      	ldr	r2, [r7, #0]
 800c232:	6013      	str	r3, [r2, #0]
	return res;
 800c234:	7bfb      	ldrb	r3, [r7, #15]
}
 800c236:	4618      	mov	r0, r3
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
	...

0800c240 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b088      	sub	sp, #32
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	4613      	mov	r3, r2
 800c24c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c252:	f107 0310 	add.w	r3, r7, #16
 800c256:	4618      	mov	r0, r3
 800c258:	f7ff fcd5 	bl	800bc06 <get_ldnumber>
 800c25c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	2b00      	cmp	r3, #0
 800c262:	da01      	bge.n	800c268 <f_mount+0x28>
 800c264:	230b      	movs	r3, #11
 800c266:	e02b      	b.n	800c2c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c268:	4a17      	ldr	r2, [pc, #92]	; (800c2c8 <f_mount+0x88>)
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c270:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d005      	beq.n	800c284 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c278:	69b8      	ldr	r0, [r7, #24]
 800c27a:	f7fe fd8b 	bl	800ad94 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	2200      	movs	r2, #0
 800c282:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d002      	beq.n	800c290 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	490d      	ldr	r1, [pc, #52]	; (800c2c8 <f_mount+0x88>)
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d002      	beq.n	800c2a6 <f_mount+0x66>
 800c2a0:	79fb      	ldrb	r3, [r7, #7]
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d001      	beq.n	800c2aa <f_mount+0x6a>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	e00a      	b.n	800c2c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c2aa:	f107 010c 	add.w	r1, r7, #12
 800c2ae:	f107 0308 	add.w	r3, r7, #8
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7ff fd41 	bl	800bd3c <find_volume>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c2be:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3720      	adds	r7, #32
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	20019e8c 	.word	0x20019e8c

0800c2cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b098      	sub	sp, #96	; 0x60
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d101      	bne.n	800c2e4 <f_open+0x18>
 800c2e0:	2309      	movs	r3, #9
 800c2e2:	e1ad      	b.n	800c640 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c2e4:	79fb      	ldrb	r3, [r7, #7]
 800c2e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c2ec:	79fa      	ldrb	r2, [r7, #7]
 800c2ee:	f107 0110 	add.w	r1, r7, #16
 800c2f2:	f107 0308 	add.w	r3, r7, #8
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7ff fd20 	bl	800bd3c <find_volume>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c302:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c306:	2b00      	cmp	r3, #0
 800c308:	f040 8191 	bne.w	800c62e <f_open+0x362>
		dj.obj.fs = fs;
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	f107 0314 	add.w	r3, r7, #20
 800c316:	4611      	mov	r1, r2
 800c318:	4618      	mov	r0, r3
 800c31a:	f7ff fc03 	bl	800bb24 <follow_path>
 800c31e:	4603      	mov	r3, r0
 800c320:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c324:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d11a      	bne.n	800c362 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c32c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c330:	b25b      	sxtb	r3, r3
 800c332:	2b00      	cmp	r3, #0
 800c334:	da03      	bge.n	800c33e <f_open+0x72>
				res = FR_INVALID_NAME;
 800c336:	2306      	movs	r3, #6
 800c338:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c33c:	e011      	b.n	800c362 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c33e:	79fb      	ldrb	r3, [r7, #7]
 800c340:	f023 0301 	bic.w	r3, r3, #1
 800c344:	2b00      	cmp	r3, #0
 800c346:	bf14      	ite	ne
 800c348:	2301      	movne	r3, #1
 800c34a:	2300      	moveq	r3, #0
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	461a      	mov	r2, r3
 800c350:	f107 0314 	add.w	r3, r7, #20
 800c354:	4611      	mov	r1, r2
 800c356:	4618      	mov	r0, r3
 800c358:	f7fe fbd4 	bl	800ab04 <chk_lock>
 800c35c:	4603      	mov	r3, r0
 800c35e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c362:	79fb      	ldrb	r3, [r7, #7]
 800c364:	f003 031c 	and.w	r3, r3, #28
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d07f      	beq.n	800c46c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c36c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c370:	2b00      	cmp	r3, #0
 800c372:	d017      	beq.n	800c3a4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c374:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c378:	2b04      	cmp	r3, #4
 800c37a:	d10e      	bne.n	800c39a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c37c:	f7fe fc1e 	bl	800abbc <enq_lock>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d006      	beq.n	800c394 <f_open+0xc8>
 800c386:	f107 0314 	add.w	r3, r7, #20
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7ff fb03 	bl	800b996 <dir_register>
 800c390:	4603      	mov	r3, r0
 800c392:	e000      	b.n	800c396 <f_open+0xca>
 800c394:	2312      	movs	r3, #18
 800c396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c39a:	79fb      	ldrb	r3, [r7, #7]
 800c39c:	f043 0308 	orr.w	r3, r3, #8
 800c3a0:	71fb      	strb	r3, [r7, #7]
 800c3a2:	e010      	b.n	800c3c6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c3a4:	7ebb      	ldrb	r3, [r7, #26]
 800c3a6:	f003 0311 	and.w	r3, r3, #17
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d003      	beq.n	800c3b6 <f_open+0xea>
					res = FR_DENIED;
 800c3ae:	2307      	movs	r3, #7
 800c3b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c3b4:	e007      	b.n	800c3c6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c3b6:	79fb      	ldrb	r3, [r7, #7]
 800c3b8:	f003 0304 	and.w	r3, r3, #4
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <f_open+0xfa>
 800c3c0:	2308      	movs	r3, #8
 800c3c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c3c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d168      	bne.n	800c4a0 <f_open+0x1d4>
 800c3ce:	79fb      	ldrb	r3, [r7, #7]
 800c3d0:	f003 0308 	and.w	r3, r3, #8
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d063      	beq.n	800c4a0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c3d8:	f7fe f998 	bl	800a70c <get_fattime>
 800c3dc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e0:	330e      	adds	r3, #14
 800c3e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fe fae3 	bl	800a9b0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ec:	3316      	adds	r3, #22
 800c3ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fe fadd 	bl	800a9b0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f8:	330b      	adds	r3, #11
 800c3fa:	2220      	movs	r2, #32
 800c3fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c402:	4611      	mov	r1, r2
 800c404:	4618      	mov	r0, r3
 800c406:	f7ff fa32 	bl	800b86e <ld_clust>
 800c40a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c410:	2200      	movs	r2, #0
 800c412:	4618      	mov	r0, r3
 800c414:	f7ff fa4a 	bl	800b8ac <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c41a:	331c      	adds	r3, #28
 800c41c:	2100      	movs	r1, #0
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fe fac6 	bl	800a9b0 <st_dword>
					fs->wflag = 1;
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	2201      	movs	r2, #1
 800c428:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c42a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d037      	beq.n	800c4a0 <f_open+0x1d4>
						dw = fs->winsect;
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c434:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c436:	f107 0314 	add.w	r3, r7, #20
 800c43a:	2200      	movs	r2, #0
 800c43c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c43e:	4618      	mov	r0, r3
 800c440:	f7fe ff5d 	bl	800b2fe <remove_chain>
 800c444:	4603      	mov	r3, r0
 800c446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c44a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d126      	bne.n	800c4a0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c456:	4618      	mov	r0, r3
 800c458:	f7fe fd04 	bl	800ae64 <move_window>
 800c45c:	4603      	mov	r3, r0
 800c45e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c466:	3a01      	subs	r2, #1
 800c468:	60da      	str	r2, [r3, #12]
 800c46a:	e019      	b.n	800c4a0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c46c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c470:	2b00      	cmp	r3, #0
 800c472:	d115      	bne.n	800c4a0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c474:	7ebb      	ldrb	r3, [r7, #26]
 800c476:	f003 0310 	and.w	r3, r3, #16
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d003      	beq.n	800c486 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c47e:	2304      	movs	r3, #4
 800c480:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c484:	e00c      	b.n	800c4a0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c486:	79fb      	ldrb	r3, [r7, #7]
 800c488:	f003 0302 	and.w	r3, r3, #2
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d007      	beq.n	800c4a0 <f_open+0x1d4>
 800c490:	7ebb      	ldrb	r3, [r7, #26]
 800c492:	f003 0301 	and.w	r3, r3, #1
 800c496:	2b00      	cmp	r3, #0
 800c498:	d002      	beq.n	800c4a0 <f_open+0x1d4>
						res = FR_DENIED;
 800c49a:	2307      	movs	r3, #7
 800c49c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c4a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d128      	bne.n	800c4fa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c4a8:	79fb      	ldrb	r3, [r7, #7]
 800c4aa:	f003 0308 	and.w	r3, r3, #8
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d003      	beq.n	800c4ba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c4b2:	79fb      	ldrb	r3, [r7, #7]
 800c4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c4c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4c8:	79fb      	ldrb	r3, [r7, #7]
 800c4ca:	f023 0301 	bic.w	r3, r3, #1
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	bf14      	ite	ne
 800c4d2:	2301      	movne	r3, #1
 800c4d4:	2300      	moveq	r3, #0
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	461a      	mov	r2, r3
 800c4da:	f107 0314 	add.w	r3, r7, #20
 800c4de:	4611      	mov	r1, r2
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7fe fb8d 	bl	800ac00 <inc_lock>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d102      	bne.n	800c4fa <f_open+0x22e>
 800c4f4:	2302      	movs	r3, #2
 800c4f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c4fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f040 8095 	bne.w	800c62e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c508:	4611      	mov	r1, r2
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7ff f9af 	bl	800b86e <ld_clust>
 800c510:	4602      	mov	r2, r0
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c518:	331c      	adds	r3, #28
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fe fa0a 	bl	800a934 <ld_dword>
 800c520:	4602      	mov	r2, r0
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2200      	movs	r2, #0
 800c52a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c52c:	693a      	ldr	r2, [r7, #16]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	88da      	ldrh	r2, [r3, #6]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	79fa      	ldrb	r2, [r7, #7]
 800c53e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2200      	movs	r2, #0
 800c544:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2200      	movs	r2, #0
 800c54a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2200      	movs	r2, #0
 800c550:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	3330      	adds	r3, #48	; 0x30
 800c556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c55a:	2100      	movs	r1, #0
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fe fa74 	bl	800aa4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c562:	79fb      	ldrb	r3, [r7, #7]
 800c564:	f003 0320 	and.w	r3, r3, #32
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d060      	beq.n	800c62e <f_open+0x362>
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d05c      	beq.n	800c62e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	68da      	ldr	r2, [r3, #12]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	895b      	ldrh	r3, [r3, #10]
 800c580:	025b      	lsls	r3, r3, #9
 800c582:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	689b      	ldr	r3, [r3, #8]
 800c588:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	657b      	str	r3, [r7, #84]	; 0x54
 800c590:	e016      	b.n	800c5c0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe fd1f 	bl	800afda <get_fat>
 800c59c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c59e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d802      	bhi.n	800c5aa <f_open+0x2de>
 800c5a4:	2302      	movs	r3, #2
 800c5a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c5aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b0:	d102      	bne.n	800c5b8 <f_open+0x2ec>
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c5b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c5ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5bc:	1ad3      	subs	r3, r2, r3
 800c5be:	657b      	str	r3, [r7, #84]	; 0x54
 800c5c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d103      	bne.n	800c5d0 <f_open+0x304>
 800c5c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c5ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d8e0      	bhi.n	800c592 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c5d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d127      	bne.n	800c62e <f_open+0x362>
 800c5de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d022      	beq.n	800c62e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fe fcd5 	bl	800af9c <clust2sect>
 800c5f2:	6478      	str	r0, [r7, #68]	; 0x44
 800c5f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d103      	bne.n	800c602 <f_open+0x336>
						res = FR_INT_ERR;
 800c5fa:	2302      	movs	r3, #2
 800c5fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c600:	e015      	b.n	800c62e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c604:	0a5a      	lsrs	r2, r3, #9
 800c606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c608:	441a      	add	r2, r3
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	7858      	ldrb	r0, [r3, #1]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6a1a      	ldr	r2, [r3, #32]
 800c61c:	2301      	movs	r3, #1
 800c61e:	f7fe f913 	bl	800a848 <disk_read>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d002      	beq.n	800c62e <f_open+0x362>
 800c628:	2301      	movs	r3, #1
 800c62a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c62e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c632:	2b00      	cmp	r3, #0
 800c634:	d002      	beq.n	800c63c <f_open+0x370>
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2200      	movs	r2, #0
 800c63a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c63c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c640:	4618      	mov	r0, r3
 800c642:	3760      	adds	r7, #96	; 0x60
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b08e      	sub	sp, #56	; 0x38
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	607a      	str	r2, [r7, #4]
 800c654:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	2200      	movs	r2, #0
 800c65e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f107 0214 	add.w	r2, r7, #20
 800c666:	4611      	mov	r1, r2
 800c668:	4618      	mov	r0, r3
 800c66a:	f7ff fdb3 	bl	800c1d4 <validate>
 800c66e:	4603      	mov	r3, r0
 800c670:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c674:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d107      	bne.n	800c68c <f_read+0x44>
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	7d5b      	ldrb	r3, [r3, #21]
 800c680:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c684:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d002      	beq.n	800c692 <f_read+0x4a>
 800c68c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c690:	e115      	b.n	800c8be <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	7d1b      	ldrb	r3, [r3, #20]
 800c696:	f003 0301 	and.w	r3, r3, #1
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d101      	bne.n	800c6a2 <f_read+0x5a>
 800c69e:	2307      	movs	r3, #7
 800c6a0:	e10d      	b.n	800c8be <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	68da      	ldr	r2, [r3, #12]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	6a3b      	ldr	r3, [r7, #32]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	f240 80fe 	bls.w	800c8b4 <f_read+0x26c>
 800c6b8:	6a3b      	ldr	r3, [r7, #32]
 800c6ba:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c6bc:	e0fa      	b.n	800c8b4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	699b      	ldr	r3, [r3, #24]
 800c6c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f040 80c6 	bne.w	800c858 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	699b      	ldr	r3, [r3, #24]
 800c6d0:	0a5b      	lsrs	r3, r3, #9
 800c6d2:	697a      	ldr	r2, [r7, #20]
 800c6d4:	8952      	ldrh	r2, [r2, #10]
 800c6d6:	3a01      	subs	r2, #1
 800c6d8:	4013      	ands	r3, r2
 800c6da:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d12f      	bne.n	800c742 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	699b      	ldr	r3, [r3, #24]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d103      	bne.n	800c6f2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	633b      	str	r3, [r7, #48]	; 0x30
 800c6f0:	e013      	b.n	800c71a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d007      	beq.n	800c70a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	699b      	ldr	r3, [r3, #24]
 800c6fe:	4619      	mov	r1, r3
 800c700:	68f8      	ldr	r0, [r7, #12]
 800c702:	f7fe fef9 	bl	800b4f8 <clmt_clust>
 800c706:	6338      	str	r0, [r7, #48]	; 0x30
 800c708:	e007      	b.n	800c71a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c70a:	68fa      	ldr	r2, [r7, #12]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	69db      	ldr	r3, [r3, #28]
 800c710:	4619      	mov	r1, r3
 800c712:	4610      	mov	r0, r2
 800c714:	f7fe fc61 	bl	800afda <get_fat>
 800c718:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d804      	bhi.n	800c72a <f_read+0xe2>
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2202      	movs	r2, #2
 800c724:	755a      	strb	r2, [r3, #21]
 800c726:	2302      	movs	r3, #2
 800c728:	e0c9      	b.n	800c8be <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c730:	d104      	bne.n	800c73c <f_read+0xf4>
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2201      	movs	r2, #1
 800c736:	755a      	strb	r2, [r3, #21]
 800c738:	2301      	movs	r3, #1
 800c73a:	e0c0      	b.n	800c8be <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c740:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c742:	697a      	ldr	r2, [r7, #20]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	69db      	ldr	r3, [r3, #28]
 800c748:	4619      	mov	r1, r3
 800c74a:	4610      	mov	r0, r2
 800c74c:	f7fe fc26 	bl	800af9c <clust2sect>
 800c750:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d104      	bne.n	800c762 <f_read+0x11a>
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2202      	movs	r2, #2
 800c75c:	755a      	strb	r2, [r3, #21]
 800c75e:	2302      	movs	r3, #2
 800c760:	e0ad      	b.n	800c8be <f_read+0x276>
			sect += csect;
 800c762:	69ba      	ldr	r2, [r7, #24]
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	4413      	add	r3, r2
 800c768:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	0a5b      	lsrs	r3, r3, #9
 800c76e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c772:	2b00      	cmp	r3, #0
 800c774:	d039      	beq.n	800c7ea <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c776:	69fa      	ldr	r2, [r7, #28]
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	4413      	add	r3, r2
 800c77c:	697a      	ldr	r2, [r7, #20]
 800c77e:	8952      	ldrh	r2, [r2, #10]
 800c780:	4293      	cmp	r3, r2
 800c782:	d905      	bls.n	800c790 <f_read+0x148>
					cc = fs->csize - csect;
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	895b      	ldrh	r3, [r3, #10]
 800c788:	461a      	mov	r2, r3
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	1ad3      	subs	r3, r2, r3
 800c78e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	7858      	ldrb	r0, [r3, #1]
 800c794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c796:	69ba      	ldr	r2, [r7, #24]
 800c798:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c79a:	f7fe f855 	bl	800a848 <disk_read>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d004      	beq.n	800c7ae <f_read+0x166>
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	755a      	strb	r2, [r3, #21]
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e087      	b.n	800c8be <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	7d1b      	ldrb	r3, [r3, #20]
 800c7b2:	b25b      	sxtb	r3, r3
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	da14      	bge.n	800c7e2 <f_read+0x19a>
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	6a1a      	ldr	r2, [r3, #32]
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	1ad3      	subs	r3, r2, r3
 800c7c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d90d      	bls.n	800c7e2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6a1a      	ldr	r2, [r3, #32]
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	1ad3      	subs	r3, r2, r3
 800c7ce:	025b      	lsls	r3, r3, #9
 800c7d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7d2:	18d0      	adds	r0, r2, r3
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	3330      	adds	r3, #48	; 0x30
 800c7d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7dc:	4619      	mov	r1, r3
 800c7de:	f7fe f913 	bl	800aa08 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e4:	025b      	lsls	r3, r3, #9
 800c7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c7e8:	e050      	b.n	800c88c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	69ba      	ldr	r2, [r7, #24]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d02e      	beq.n	800c852 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	7d1b      	ldrb	r3, [r3, #20]
 800c7f8:	b25b      	sxtb	r3, r3
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	da18      	bge.n	800c830 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	7858      	ldrb	r0, [r3, #1]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6a1a      	ldr	r2, [r3, #32]
 800c80c:	2301      	movs	r3, #1
 800c80e:	f7fe f83b 	bl	800a888 <disk_write>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d004      	beq.n	800c822 <f_read+0x1da>
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2201      	movs	r2, #1
 800c81c:	755a      	strb	r2, [r3, #21]
 800c81e:	2301      	movs	r3, #1
 800c820:	e04d      	b.n	800c8be <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	7d1b      	ldrb	r3, [r3, #20]
 800c826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c82a:	b2da      	uxtb	r2, r3
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	7858      	ldrb	r0, [r3, #1]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c83a:	2301      	movs	r3, #1
 800c83c:	69ba      	ldr	r2, [r7, #24]
 800c83e:	f7fe f803 	bl	800a848 <disk_read>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d004      	beq.n	800c852 <f_read+0x20a>
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2201      	movs	r2, #1
 800c84c:	755a      	strb	r2, [r3, #21]
 800c84e:	2301      	movs	r3, #1
 800c850:	e035      	b.n	800c8be <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	69ba      	ldr	r2, [r7, #24]
 800c856:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	699b      	ldr	r3, [r3, #24]
 800c85c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c860:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c864:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d901      	bls.n	800c872 <f_read+0x22a>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	699b      	ldr	r3, [r3, #24]
 800c87c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c880:	4413      	add	r3, r2
 800c882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c884:	4619      	mov	r1, r3
 800c886:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c888:	f7fe f8be 	bl	800aa08 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c88c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c890:	4413      	add	r3, r2
 800c892:	627b      	str	r3, [r7, #36]	; 0x24
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	699a      	ldr	r2, [r3, #24]
 800c898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89a:	441a      	add	r2, r3
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	619a      	str	r2, [r3, #24]
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a6:	441a      	add	r2, r3
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	601a      	str	r2, [r3, #0]
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f47f af01 	bne.w	800c6be <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3738      	adds	r7, #56	; 0x38
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b08c      	sub	sp, #48	; 0x30
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	60f8      	str	r0, [r7, #12]
 800c8ce:	60b9      	str	r1, [r7, #8]
 800c8d0:	607a      	str	r2, [r7, #4]
 800c8d2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f107 0210 	add.w	r2, r7, #16
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7ff fc74 	bl	800c1d4 <validate>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c8f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d107      	bne.n	800c90a <f_write+0x44>
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	7d5b      	ldrb	r3, [r3, #21]
 800c8fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c906:	2b00      	cmp	r3, #0
 800c908:	d002      	beq.n	800c910 <f_write+0x4a>
 800c90a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c90e:	e14b      	b.n	800cba8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	7d1b      	ldrb	r3, [r3, #20]
 800c914:	f003 0302 	and.w	r3, r3, #2
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d101      	bne.n	800c920 <f_write+0x5a>
 800c91c:	2307      	movs	r3, #7
 800c91e:	e143      	b.n	800cba8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	699a      	ldr	r2, [r3, #24]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	441a      	add	r2, r3
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	699b      	ldr	r3, [r3, #24]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	f080 812d 	bcs.w	800cb8c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	699b      	ldr	r3, [r3, #24]
 800c936:	43db      	mvns	r3, r3
 800c938:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c93a:	e127      	b.n	800cb8c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	699b      	ldr	r3, [r3, #24]
 800c940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c944:	2b00      	cmp	r3, #0
 800c946:	f040 80e3 	bne.w	800cb10 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	699b      	ldr	r3, [r3, #24]
 800c94e:	0a5b      	lsrs	r3, r3, #9
 800c950:	693a      	ldr	r2, [r7, #16]
 800c952:	8952      	ldrh	r2, [r2, #10]
 800c954:	3a01      	subs	r2, #1
 800c956:	4013      	ands	r3, r2
 800c958:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d143      	bne.n	800c9e8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	699b      	ldr	r3, [r3, #24]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d10c      	bne.n	800c982 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	689b      	ldr	r3, [r3, #8]
 800c96c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c970:	2b00      	cmp	r3, #0
 800c972:	d11a      	bne.n	800c9aa <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2100      	movs	r1, #0
 800c978:	4618      	mov	r0, r3
 800c97a:	f7fe fd25 	bl	800b3c8 <create_chain>
 800c97e:	62b8      	str	r0, [r7, #40]	; 0x28
 800c980:	e013      	b.n	800c9aa <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c986:	2b00      	cmp	r3, #0
 800c988:	d007      	beq.n	800c99a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	699b      	ldr	r3, [r3, #24]
 800c98e:	4619      	mov	r1, r3
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f7fe fdb1 	bl	800b4f8 <clmt_clust>
 800c996:	62b8      	str	r0, [r7, #40]	; 0x28
 800c998:	e007      	b.n	800c9aa <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	69db      	ldr	r3, [r3, #28]
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	4610      	mov	r0, r2
 800c9a4:	f7fe fd10 	bl	800b3c8 <create_chain>
 800c9a8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f000 80f2 	beq.w	800cb96 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d104      	bne.n	800c9c2 <f_write+0xfc>
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2202      	movs	r2, #2
 800c9bc:	755a      	strb	r2, [r3, #21]
 800c9be:	2302      	movs	r3, #2
 800c9c0:	e0f2      	b.n	800cba8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c8:	d104      	bne.n	800c9d4 <f_write+0x10e>
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	755a      	strb	r2, [r3, #21]
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e0e9      	b.n	800cba8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9d8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	689b      	ldr	r3, [r3, #8]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d102      	bne.n	800c9e8 <f_write+0x122>
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9e6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	7d1b      	ldrb	r3, [r3, #20]
 800c9ec:	b25b      	sxtb	r3, r3
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	da18      	bge.n	800ca24 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	7858      	ldrb	r0, [r3, #1]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6a1a      	ldr	r2, [r3, #32]
 800ca00:	2301      	movs	r3, #1
 800ca02:	f7fd ff41 	bl	800a888 <disk_write>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d004      	beq.n	800ca16 <f_write+0x150>
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	755a      	strb	r2, [r3, #21]
 800ca12:	2301      	movs	r3, #1
 800ca14:	e0c8      	b.n	800cba8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	7d1b      	ldrb	r3, [r3, #20]
 800ca1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ca24:	693a      	ldr	r2, [r7, #16]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	69db      	ldr	r3, [r3, #28]
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	f7fe fab5 	bl	800af9c <clust2sect>
 800ca32:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d104      	bne.n	800ca44 <f_write+0x17e>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2202      	movs	r2, #2
 800ca3e:	755a      	strb	r2, [r3, #21]
 800ca40:	2302      	movs	r3, #2
 800ca42:	e0b1      	b.n	800cba8 <f_write+0x2e2>
			sect += csect;
 800ca44:	697a      	ldr	r2, [r7, #20]
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	4413      	add	r3, r2
 800ca4a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	0a5b      	lsrs	r3, r3, #9
 800ca50:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ca52:	6a3b      	ldr	r3, [r7, #32]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d03c      	beq.n	800cad2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ca58:	69ba      	ldr	r2, [r7, #24]
 800ca5a:	6a3b      	ldr	r3, [r7, #32]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	693a      	ldr	r2, [r7, #16]
 800ca60:	8952      	ldrh	r2, [r2, #10]
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d905      	bls.n	800ca72 <f_write+0x1ac>
					cc = fs->csize - csect;
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	895b      	ldrh	r3, [r3, #10]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	1ad3      	subs	r3, r2, r3
 800ca70:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	7858      	ldrb	r0, [r3, #1]
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	697a      	ldr	r2, [r7, #20]
 800ca7a:	69f9      	ldr	r1, [r7, #28]
 800ca7c:	f7fd ff04 	bl	800a888 <disk_write>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d004      	beq.n	800ca90 <f_write+0x1ca>
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	755a      	strb	r2, [r3, #21]
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e08b      	b.n	800cba8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6a1a      	ldr	r2, [r3, #32]
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	1ad3      	subs	r3, r2, r3
 800ca98:	6a3a      	ldr	r2, [r7, #32]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d915      	bls.n	800caca <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6a1a      	ldr	r2, [r3, #32]
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	1ad3      	subs	r3, r2, r3
 800caac:	025b      	lsls	r3, r3, #9
 800caae:	69fa      	ldr	r2, [r7, #28]
 800cab0:	4413      	add	r3, r2
 800cab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cab6:	4619      	mov	r1, r3
 800cab8:	f7fd ffa6 	bl	800aa08 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	7d1b      	ldrb	r3, [r3, #20]
 800cac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cac4:	b2da      	uxtb	r2, r3
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800caca:	6a3b      	ldr	r3, [r7, #32]
 800cacc:	025b      	lsls	r3, r3, #9
 800cace:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800cad0:	e03f      	b.n	800cb52 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	6a1b      	ldr	r3, [r3, #32]
 800cad6:	697a      	ldr	r2, [r7, #20]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d016      	beq.n	800cb0a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	699a      	ldr	r2, [r3, #24]
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d210      	bcs.n	800cb0a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	7858      	ldrb	r0, [r3, #1]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800caf2:	2301      	movs	r3, #1
 800caf4:	697a      	ldr	r2, [r7, #20]
 800caf6:	f7fd fea7 	bl	800a848 <disk_read>
 800cafa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d004      	beq.n	800cb0a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2201      	movs	r2, #1
 800cb04:	755a      	strb	r2, [r3, #21]
 800cb06:	2301      	movs	r3, #1
 800cb08:	e04e      	b.n	800cba8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	697a      	ldr	r2, [r7, #20]
 800cb0e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	699b      	ldr	r3, [r3, #24]
 800cb14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb18:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cb1c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cb1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d901      	bls.n	800cb2a <f_write+0x264>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	699b      	ldr	r3, [r3, #24]
 800cb34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb38:	4413      	add	r3, r2
 800cb3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb3c:	69f9      	ldr	r1, [r7, #28]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7fd ff62 	bl	800aa08 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	7d1b      	ldrb	r3, [r3, #20]
 800cb48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb4c:	b2da      	uxtb	r2, r3
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cb52:	69fa      	ldr	r2, [r7, #28]
 800cb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb56:	4413      	add	r3, r2
 800cb58:	61fb      	str	r3, [r7, #28]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	699a      	ldr	r2, [r3, #24]
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb60:	441a      	add	r2, r3
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	619a      	str	r2, [r3, #24]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	68da      	ldr	r2, [r3, #12]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	bf38      	it	cc
 800cb72:	461a      	movcc	r2, r3
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	60da      	str	r2, [r3, #12]
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7e:	441a      	add	r2, r3
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb88:	1ad3      	subs	r3, r2, r3
 800cb8a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	f47f aed4 	bne.w	800c93c <f_write+0x76>
 800cb94:	e000      	b.n	800cb98 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cb96:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	7d1b      	ldrb	r3, [r3, #20]
 800cb9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cba0:	b2da      	uxtb	r2, r3
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3730      	adds	r7, #48	; 0x30
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b086      	sub	sp, #24
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f107 0208 	add.w	r2, r7, #8
 800cbbe:	4611      	mov	r1, r2
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7ff fb07 	bl	800c1d4 <validate>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cbca:	7dfb      	ldrb	r3, [r7, #23]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d168      	bne.n	800cca2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	7d1b      	ldrb	r3, [r3, #20]
 800cbd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d062      	beq.n	800cca2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	7d1b      	ldrb	r3, [r3, #20]
 800cbe0:	b25b      	sxtb	r3, r3
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	da15      	bge.n	800cc12 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	7858      	ldrb	r0, [r3, #1]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6a1a      	ldr	r2, [r3, #32]
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	f7fd fe47 	bl	800a888 <disk_write>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d001      	beq.n	800cc04 <f_sync+0x54>
 800cc00:	2301      	movs	r3, #1
 800cc02:	e04f      	b.n	800cca4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	7d1b      	ldrb	r3, [r3, #20]
 800cc08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc0c:	b2da      	uxtb	r2, r3
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cc12:	f7fd fd7b 	bl	800a70c <get_fattime>
 800cc16:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cc18:	68ba      	ldr	r2, [r7, #8]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1e:	4619      	mov	r1, r3
 800cc20:	4610      	mov	r0, r2
 800cc22:	f7fe f91f 	bl	800ae64 <move_window>
 800cc26:	4603      	mov	r3, r0
 800cc28:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cc2a:	7dfb      	ldrb	r3, [r7, #23]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d138      	bne.n	800cca2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc34:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	330b      	adds	r3, #11
 800cc3a:	781a      	ldrb	r2, [r3, #0]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	330b      	adds	r3, #11
 800cc40:	f042 0220 	orr.w	r2, r2, #32
 800cc44:	b2d2      	uxtb	r2, r2
 800cc46:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6818      	ldr	r0, [r3, #0]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	461a      	mov	r2, r3
 800cc52:	68f9      	ldr	r1, [r7, #12]
 800cc54:	f7fe fe2a 	bl	800b8ac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f103 021c 	add.w	r2, r3, #28
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	4619      	mov	r1, r3
 800cc64:	4610      	mov	r0, r2
 800cc66:	f7fd fea3 	bl	800a9b0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	3316      	adds	r3, #22
 800cc6e:	6939      	ldr	r1, [r7, #16]
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7fd fe9d 	bl	800a9b0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	3312      	adds	r3, #18
 800cc7a:	2100      	movs	r1, #0
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7fd fe7c 	bl	800a97a <st_word>
					fs->wflag = 1;
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	2201      	movs	r2, #1
 800cc86:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fe f918 	bl	800aec0 <sync_fs>
 800cc90:	4603      	mov	r3, r0
 800cc92:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	7d1b      	ldrb	r3, [r3, #20]
 800cc98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc9c:	b2da      	uxtb	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cca2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3718      	adds	r7, #24
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f7ff ff7b 	bl	800cbb0 <f_sync>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d118      	bne.n	800ccf6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f107 0208 	add.w	r2, r7, #8
 800ccca:	4611      	mov	r1, r2
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7ff fa81 	bl	800c1d4 <validate>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ccd6:	7bfb      	ldrb	r3, [r7, #15]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d10c      	bne.n	800ccf6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7fe f81b 	bl	800ad1c <dec_lock>
 800cce6:	4603      	mov	r3, r0
 800cce8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ccea:	7bfb      	ldrb	r3, [r7, #15]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d102      	bne.n	800ccf6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ccf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800cd0c:	78fb      	ldrb	r3, [r7, #3]
 800cd0e:	2b0a      	cmp	r3, #10
 800cd10:	d103      	bne.n	800cd1a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800cd12:	210d      	movs	r1, #13
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f7ff fff3 	bl	800cd00 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	db25      	blt.n	800cd72 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	1c5a      	adds	r2, r3, #1
 800cd2a:	60fa      	str	r2, [r7, #12]
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	4413      	add	r3, r2
 800cd30:	78fa      	ldrb	r2, [r7, #3]
 800cd32:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2b3c      	cmp	r3, #60	; 0x3c
 800cd38:	dd12      	ble.n	800cd60 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6818      	ldr	r0, [r3, #0]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f103 010c 	add.w	r1, r3, #12
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	f107 0308 	add.w	r3, r7, #8
 800cd4a:	f7ff fdbc 	bl	800c8c6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800cd4e:	68ba      	ldr	r2, [r7, #8]
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d101      	bne.n	800cd5a <putc_bfd+0x5a>
 800cd56:	2300      	movs	r3, #0
 800cd58:	e001      	b.n	800cd5e <putc_bfd+0x5e>
 800cd5a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd5e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	1c5a      	adds	r2, r3, #1
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	609a      	str	r2, [r3, #8]
 800cd70:	e000      	b.n	800cd74 <putc_bfd+0x74>
	if (i < 0) return;
 800cd72:	bf00      	nop
}
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b084      	sub	sp, #16
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	db16      	blt.n	800cdb8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6818      	ldr	r0, [r3, #0]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f103 010c 	add.w	r1, r3, #12
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	461a      	mov	r2, r3
 800cd9a:	f107 030c 	add.w	r3, r7, #12
 800cd9e:	f7ff fd92 	bl	800c8c6 <f_write>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d107      	bne.n	800cdb8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d102      	bne.n	800cdb8 <putc_flush+0x3e>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	e001      	b.n	800cdbc <putc_flush+0x42>
	return EOF;
 800cdb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3710      	adds	r7, #16
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	683a      	ldr	r2, [r7, #0]
 800cdd2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	605a      	str	r2, [r3, #4]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685a      	ldr	r2, [r3, #4]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	609a      	str	r2, [r3, #8]
}
 800cde2:	bf00      	nop
 800cde4:	370c      	adds	r7, #12
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr

0800cdee <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b096      	sub	sp, #88	; 0x58
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
 800cdf6:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800cdf8:	f107 030c 	add.w	r3, r7, #12
 800cdfc:	6839      	ldr	r1, [r7, #0]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7ff ffe0 	bl	800cdc4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800ce04:	e009      	b.n	800ce1a <f_puts+0x2c>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	1c5a      	adds	r2, r3, #1
 800ce0a:	607a      	str	r2, [r7, #4]
 800ce0c:	781a      	ldrb	r2, [r3, #0]
 800ce0e:	f107 030c 	add.w	r3, r7, #12
 800ce12:	4611      	mov	r1, r2
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7ff ff73 	bl	800cd00 <putc_bfd>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1f1      	bne.n	800ce06 <f_puts+0x18>
	return putc_flush(&pb);
 800ce22:	f107 030c 	add.w	r3, r7, #12
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7ff ffa7 	bl	800cd7a <putc_flush>
 800ce2c:	4603      	mov	r3, r0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3758      	adds	r7, #88	; 0x58
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
	...

0800ce38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b087      	sub	sp, #28
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	4613      	mov	r3, r2
 800ce44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ce46:	2301      	movs	r3, #1
 800ce48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ce4e:	4b1f      	ldr	r3, [pc, #124]	; (800cecc <FATFS_LinkDriverEx+0x94>)
 800ce50:	7a5b      	ldrb	r3, [r3, #9]
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d131      	bne.n	800cebc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ce58:	4b1c      	ldr	r3, [pc, #112]	; (800cecc <FATFS_LinkDriverEx+0x94>)
 800ce5a:	7a5b      	ldrb	r3, [r3, #9]
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	461a      	mov	r2, r3
 800ce60:	4b1a      	ldr	r3, [pc, #104]	; (800cecc <FATFS_LinkDriverEx+0x94>)
 800ce62:	2100      	movs	r1, #0
 800ce64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ce66:	4b19      	ldr	r3, [pc, #100]	; (800cecc <FATFS_LinkDriverEx+0x94>)
 800ce68:	7a5b      	ldrb	r3, [r3, #9]
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	4a17      	ldr	r2, [pc, #92]	; (800cecc <FATFS_LinkDriverEx+0x94>)
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	4413      	add	r3, r2
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ce76:	4b15      	ldr	r3, [pc, #84]	; (800cecc <FATFS_LinkDriverEx+0x94>)
 800ce78:	7a5b      	ldrb	r3, [r3, #9]
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	4b13      	ldr	r3, [pc, #76]	; (800cecc <FATFS_LinkDriverEx+0x94>)
 800ce80:	4413      	add	r3, r2
 800ce82:	79fa      	ldrb	r2, [r7, #7]
 800ce84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ce86:	4b11      	ldr	r3, [pc, #68]	; (800cecc <FATFS_LinkDriverEx+0x94>)
 800ce88:	7a5b      	ldrb	r3, [r3, #9]
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	1c5a      	adds	r2, r3, #1
 800ce8e:	b2d1      	uxtb	r1, r2
 800ce90:	4a0e      	ldr	r2, [pc, #56]	; (800cecc <FATFS_LinkDriverEx+0x94>)
 800ce92:	7251      	strb	r1, [r2, #9]
 800ce94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ce96:	7dbb      	ldrb	r3, [r7, #22]
 800ce98:	3330      	adds	r3, #48	; 0x30
 800ce9a:	b2da      	uxtb	r2, r3
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	3301      	adds	r3, #1
 800cea4:	223a      	movs	r2, #58	; 0x3a
 800cea6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	3302      	adds	r3, #2
 800ceac:	222f      	movs	r2, #47	; 0x2f
 800ceae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	3303      	adds	r3, #3
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cebc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	371c      	adds	r7, #28
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	20019eb4 	.word	0x20019eb4

0800ced0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ceda:	2200      	movs	r2, #0
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f7ff ffaa 	bl	800ce38 <FATFS_LinkDriverEx>
 800cee4:	4603      	mov	r3, r0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
	...

0800cef0 <_strtol_l.constprop.0>:
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cef6:	d001      	beq.n	800cefc <_strtol_l.constprop.0+0xc>
 800cef8:	2b24      	cmp	r3, #36	; 0x24
 800cefa:	d906      	bls.n	800cf0a <_strtol_l.constprop.0+0x1a>
 800cefc:	f001 f832 	bl	800df64 <__errno>
 800cf00:	2316      	movs	r3, #22
 800cf02:	6003      	str	r3, [r0, #0]
 800cf04:	2000      	movs	r0, #0
 800cf06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cff0 <_strtol_l.constprop.0+0x100>
 800cf0e:	460d      	mov	r5, r1
 800cf10:	462e      	mov	r6, r5
 800cf12:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf16:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cf1a:	f017 0708 	ands.w	r7, r7, #8
 800cf1e:	d1f7      	bne.n	800cf10 <_strtol_l.constprop.0+0x20>
 800cf20:	2c2d      	cmp	r4, #45	; 0x2d
 800cf22:	d132      	bne.n	800cf8a <_strtol_l.constprop.0+0x9a>
 800cf24:	782c      	ldrb	r4, [r5, #0]
 800cf26:	2701      	movs	r7, #1
 800cf28:	1cb5      	adds	r5, r6, #2
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d05b      	beq.n	800cfe6 <_strtol_l.constprop.0+0xf6>
 800cf2e:	2b10      	cmp	r3, #16
 800cf30:	d109      	bne.n	800cf46 <_strtol_l.constprop.0+0x56>
 800cf32:	2c30      	cmp	r4, #48	; 0x30
 800cf34:	d107      	bne.n	800cf46 <_strtol_l.constprop.0+0x56>
 800cf36:	782c      	ldrb	r4, [r5, #0]
 800cf38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cf3c:	2c58      	cmp	r4, #88	; 0x58
 800cf3e:	d14d      	bne.n	800cfdc <_strtol_l.constprop.0+0xec>
 800cf40:	786c      	ldrb	r4, [r5, #1]
 800cf42:	2310      	movs	r3, #16
 800cf44:	3502      	adds	r5, #2
 800cf46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cf4a:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf4e:	f04f 0e00 	mov.w	lr, #0
 800cf52:	fbb8 f9f3 	udiv	r9, r8, r3
 800cf56:	4676      	mov	r6, lr
 800cf58:	fb03 8a19 	mls	sl, r3, r9, r8
 800cf5c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cf60:	f1bc 0f09 	cmp.w	ip, #9
 800cf64:	d816      	bhi.n	800cf94 <_strtol_l.constprop.0+0xa4>
 800cf66:	4664      	mov	r4, ip
 800cf68:	42a3      	cmp	r3, r4
 800cf6a:	dd24      	ble.n	800cfb6 <_strtol_l.constprop.0+0xc6>
 800cf6c:	f1be 3fff 	cmp.w	lr, #4294967295
 800cf70:	d008      	beq.n	800cf84 <_strtol_l.constprop.0+0x94>
 800cf72:	45b1      	cmp	r9, r6
 800cf74:	d31c      	bcc.n	800cfb0 <_strtol_l.constprop.0+0xc0>
 800cf76:	d101      	bne.n	800cf7c <_strtol_l.constprop.0+0x8c>
 800cf78:	45a2      	cmp	sl, r4
 800cf7a:	db19      	blt.n	800cfb0 <_strtol_l.constprop.0+0xc0>
 800cf7c:	fb06 4603 	mla	r6, r6, r3, r4
 800cf80:	f04f 0e01 	mov.w	lr, #1
 800cf84:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf88:	e7e8      	b.n	800cf5c <_strtol_l.constprop.0+0x6c>
 800cf8a:	2c2b      	cmp	r4, #43	; 0x2b
 800cf8c:	bf04      	itt	eq
 800cf8e:	782c      	ldrbeq	r4, [r5, #0]
 800cf90:	1cb5      	addeq	r5, r6, #2
 800cf92:	e7ca      	b.n	800cf2a <_strtol_l.constprop.0+0x3a>
 800cf94:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cf98:	f1bc 0f19 	cmp.w	ip, #25
 800cf9c:	d801      	bhi.n	800cfa2 <_strtol_l.constprop.0+0xb2>
 800cf9e:	3c37      	subs	r4, #55	; 0x37
 800cfa0:	e7e2      	b.n	800cf68 <_strtol_l.constprop.0+0x78>
 800cfa2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cfa6:	f1bc 0f19 	cmp.w	ip, #25
 800cfaa:	d804      	bhi.n	800cfb6 <_strtol_l.constprop.0+0xc6>
 800cfac:	3c57      	subs	r4, #87	; 0x57
 800cfae:	e7db      	b.n	800cf68 <_strtol_l.constprop.0+0x78>
 800cfb0:	f04f 3eff 	mov.w	lr, #4294967295
 800cfb4:	e7e6      	b.n	800cf84 <_strtol_l.constprop.0+0x94>
 800cfb6:	f1be 3fff 	cmp.w	lr, #4294967295
 800cfba:	d105      	bne.n	800cfc8 <_strtol_l.constprop.0+0xd8>
 800cfbc:	2322      	movs	r3, #34	; 0x22
 800cfbe:	6003      	str	r3, [r0, #0]
 800cfc0:	4646      	mov	r6, r8
 800cfc2:	b942      	cbnz	r2, 800cfd6 <_strtol_l.constprop.0+0xe6>
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	e79e      	b.n	800cf06 <_strtol_l.constprop.0+0x16>
 800cfc8:	b107      	cbz	r7, 800cfcc <_strtol_l.constprop.0+0xdc>
 800cfca:	4276      	negs	r6, r6
 800cfcc:	2a00      	cmp	r2, #0
 800cfce:	d0f9      	beq.n	800cfc4 <_strtol_l.constprop.0+0xd4>
 800cfd0:	f1be 0f00 	cmp.w	lr, #0
 800cfd4:	d000      	beq.n	800cfd8 <_strtol_l.constprop.0+0xe8>
 800cfd6:	1e69      	subs	r1, r5, #1
 800cfd8:	6011      	str	r1, [r2, #0]
 800cfda:	e7f3      	b.n	800cfc4 <_strtol_l.constprop.0+0xd4>
 800cfdc:	2430      	movs	r4, #48	; 0x30
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d1b1      	bne.n	800cf46 <_strtol_l.constprop.0+0x56>
 800cfe2:	2308      	movs	r3, #8
 800cfe4:	e7af      	b.n	800cf46 <_strtol_l.constprop.0+0x56>
 800cfe6:	2c30      	cmp	r4, #48	; 0x30
 800cfe8:	d0a5      	beq.n	800cf36 <_strtol_l.constprop.0+0x46>
 800cfea:	230a      	movs	r3, #10
 800cfec:	e7ab      	b.n	800cf46 <_strtol_l.constprop.0+0x56>
 800cfee:	bf00      	nop
 800cff0:	08012325 	.word	0x08012325

0800cff4 <strtol>:
 800cff4:	4613      	mov	r3, r2
 800cff6:	460a      	mov	r2, r1
 800cff8:	4601      	mov	r1, r0
 800cffa:	4802      	ldr	r0, [pc, #8]	; (800d004 <strtol+0x10>)
 800cffc:	6800      	ldr	r0, [r0, #0]
 800cffe:	f7ff bf77 	b.w	800cef0 <_strtol_l.constprop.0>
 800d002:	bf00      	nop
 800d004:	200009d0 	.word	0x200009d0

0800d008 <__cvt>:
 800d008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d00c:	ec55 4b10 	vmov	r4, r5, d0
 800d010:	2d00      	cmp	r5, #0
 800d012:	460e      	mov	r6, r1
 800d014:	4619      	mov	r1, r3
 800d016:	462b      	mov	r3, r5
 800d018:	bfbb      	ittet	lt
 800d01a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d01e:	461d      	movlt	r5, r3
 800d020:	2300      	movge	r3, #0
 800d022:	232d      	movlt	r3, #45	; 0x2d
 800d024:	700b      	strb	r3, [r1, #0]
 800d026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d028:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d02c:	4691      	mov	r9, r2
 800d02e:	f023 0820 	bic.w	r8, r3, #32
 800d032:	bfbc      	itt	lt
 800d034:	4622      	movlt	r2, r4
 800d036:	4614      	movlt	r4, r2
 800d038:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d03c:	d005      	beq.n	800d04a <__cvt+0x42>
 800d03e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d042:	d100      	bne.n	800d046 <__cvt+0x3e>
 800d044:	3601      	adds	r6, #1
 800d046:	2102      	movs	r1, #2
 800d048:	e000      	b.n	800d04c <__cvt+0x44>
 800d04a:	2103      	movs	r1, #3
 800d04c:	ab03      	add	r3, sp, #12
 800d04e:	9301      	str	r3, [sp, #4]
 800d050:	ab02      	add	r3, sp, #8
 800d052:	9300      	str	r3, [sp, #0]
 800d054:	ec45 4b10 	vmov	d0, r4, r5
 800d058:	4653      	mov	r3, sl
 800d05a:	4632      	mov	r2, r6
 800d05c:	f001 f864 	bl	800e128 <_dtoa_r>
 800d060:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d064:	4607      	mov	r7, r0
 800d066:	d102      	bne.n	800d06e <__cvt+0x66>
 800d068:	f019 0f01 	tst.w	r9, #1
 800d06c:	d022      	beq.n	800d0b4 <__cvt+0xac>
 800d06e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d072:	eb07 0906 	add.w	r9, r7, r6
 800d076:	d110      	bne.n	800d09a <__cvt+0x92>
 800d078:	783b      	ldrb	r3, [r7, #0]
 800d07a:	2b30      	cmp	r3, #48	; 0x30
 800d07c:	d10a      	bne.n	800d094 <__cvt+0x8c>
 800d07e:	2200      	movs	r2, #0
 800d080:	2300      	movs	r3, #0
 800d082:	4620      	mov	r0, r4
 800d084:	4629      	mov	r1, r5
 800d086:	f7f3 fd37 	bl	8000af8 <__aeabi_dcmpeq>
 800d08a:	b918      	cbnz	r0, 800d094 <__cvt+0x8c>
 800d08c:	f1c6 0601 	rsb	r6, r6, #1
 800d090:	f8ca 6000 	str.w	r6, [sl]
 800d094:	f8da 3000 	ldr.w	r3, [sl]
 800d098:	4499      	add	r9, r3
 800d09a:	2200      	movs	r2, #0
 800d09c:	2300      	movs	r3, #0
 800d09e:	4620      	mov	r0, r4
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	f7f3 fd29 	bl	8000af8 <__aeabi_dcmpeq>
 800d0a6:	b108      	cbz	r0, 800d0ac <__cvt+0xa4>
 800d0a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800d0ac:	2230      	movs	r2, #48	; 0x30
 800d0ae:	9b03      	ldr	r3, [sp, #12]
 800d0b0:	454b      	cmp	r3, r9
 800d0b2:	d307      	bcc.n	800d0c4 <__cvt+0xbc>
 800d0b4:	9b03      	ldr	r3, [sp, #12]
 800d0b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0b8:	1bdb      	subs	r3, r3, r7
 800d0ba:	4638      	mov	r0, r7
 800d0bc:	6013      	str	r3, [r2, #0]
 800d0be:	b004      	add	sp, #16
 800d0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0c4:	1c59      	adds	r1, r3, #1
 800d0c6:	9103      	str	r1, [sp, #12]
 800d0c8:	701a      	strb	r2, [r3, #0]
 800d0ca:	e7f0      	b.n	800d0ae <__cvt+0xa6>

0800d0cc <__exponent>:
 800d0cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2900      	cmp	r1, #0
 800d0d2:	bfb8      	it	lt
 800d0d4:	4249      	neglt	r1, r1
 800d0d6:	f803 2b02 	strb.w	r2, [r3], #2
 800d0da:	bfb4      	ite	lt
 800d0dc:	222d      	movlt	r2, #45	; 0x2d
 800d0de:	222b      	movge	r2, #43	; 0x2b
 800d0e0:	2909      	cmp	r1, #9
 800d0e2:	7042      	strb	r2, [r0, #1]
 800d0e4:	dd2a      	ble.n	800d13c <__exponent+0x70>
 800d0e6:	f10d 0207 	add.w	r2, sp, #7
 800d0ea:	4617      	mov	r7, r2
 800d0ec:	260a      	movs	r6, #10
 800d0ee:	4694      	mov	ip, r2
 800d0f0:	fb91 f5f6 	sdiv	r5, r1, r6
 800d0f4:	fb06 1415 	mls	r4, r6, r5, r1
 800d0f8:	3430      	adds	r4, #48	; 0x30
 800d0fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d0fe:	460c      	mov	r4, r1
 800d100:	2c63      	cmp	r4, #99	; 0x63
 800d102:	f102 32ff 	add.w	r2, r2, #4294967295
 800d106:	4629      	mov	r1, r5
 800d108:	dcf1      	bgt.n	800d0ee <__exponent+0x22>
 800d10a:	3130      	adds	r1, #48	; 0x30
 800d10c:	f1ac 0402 	sub.w	r4, ip, #2
 800d110:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d114:	1c41      	adds	r1, r0, #1
 800d116:	4622      	mov	r2, r4
 800d118:	42ba      	cmp	r2, r7
 800d11a:	d30a      	bcc.n	800d132 <__exponent+0x66>
 800d11c:	f10d 0209 	add.w	r2, sp, #9
 800d120:	eba2 020c 	sub.w	r2, r2, ip
 800d124:	42bc      	cmp	r4, r7
 800d126:	bf88      	it	hi
 800d128:	2200      	movhi	r2, #0
 800d12a:	4413      	add	r3, r2
 800d12c:	1a18      	subs	r0, r3, r0
 800d12e:	b003      	add	sp, #12
 800d130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d132:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d136:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d13a:	e7ed      	b.n	800d118 <__exponent+0x4c>
 800d13c:	2330      	movs	r3, #48	; 0x30
 800d13e:	3130      	adds	r1, #48	; 0x30
 800d140:	7083      	strb	r3, [r0, #2]
 800d142:	70c1      	strb	r1, [r0, #3]
 800d144:	1d03      	adds	r3, r0, #4
 800d146:	e7f1      	b.n	800d12c <__exponent+0x60>

0800d148 <_printf_float>:
 800d148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14c:	ed2d 8b02 	vpush	{d8}
 800d150:	b08d      	sub	sp, #52	; 0x34
 800d152:	460c      	mov	r4, r1
 800d154:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d158:	4616      	mov	r6, r2
 800d15a:	461f      	mov	r7, r3
 800d15c:	4605      	mov	r5, r0
 800d15e:	f000 feb7 	bl	800ded0 <_localeconv_r>
 800d162:	f8d0 a000 	ldr.w	sl, [r0]
 800d166:	4650      	mov	r0, sl
 800d168:	f7f3 f89a 	bl	80002a0 <strlen>
 800d16c:	2300      	movs	r3, #0
 800d16e:	930a      	str	r3, [sp, #40]	; 0x28
 800d170:	6823      	ldr	r3, [r4, #0]
 800d172:	9305      	str	r3, [sp, #20]
 800d174:	f8d8 3000 	ldr.w	r3, [r8]
 800d178:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d17c:	3307      	adds	r3, #7
 800d17e:	f023 0307 	bic.w	r3, r3, #7
 800d182:	f103 0208 	add.w	r2, r3, #8
 800d186:	f8c8 2000 	str.w	r2, [r8]
 800d18a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d18e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d192:	9307      	str	r3, [sp, #28]
 800d194:	f8cd 8018 	str.w	r8, [sp, #24]
 800d198:	ee08 0a10 	vmov	s16, r0
 800d19c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d1a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1a4:	4b9e      	ldr	r3, [pc, #632]	; (800d420 <_printf_float+0x2d8>)
 800d1a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1aa:	f7f3 fcd7 	bl	8000b5c <__aeabi_dcmpun>
 800d1ae:	bb88      	cbnz	r0, 800d214 <_printf_float+0xcc>
 800d1b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1b4:	4b9a      	ldr	r3, [pc, #616]	; (800d420 <_printf_float+0x2d8>)
 800d1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ba:	f7f3 fcb1 	bl	8000b20 <__aeabi_dcmple>
 800d1be:	bb48      	cbnz	r0, 800d214 <_printf_float+0xcc>
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	4640      	mov	r0, r8
 800d1c6:	4649      	mov	r1, r9
 800d1c8:	f7f3 fca0 	bl	8000b0c <__aeabi_dcmplt>
 800d1cc:	b110      	cbz	r0, 800d1d4 <_printf_float+0x8c>
 800d1ce:	232d      	movs	r3, #45	; 0x2d
 800d1d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1d4:	4a93      	ldr	r2, [pc, #588]	; (800d424 <_printf_float+0x2dc>)
 800d1d6:	4b94      	ldr	r3, [pc, #592]	; (800d428 <_printf_float+0x2e0>)
 800d1d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d1dc:	bf94      	ite	ls
 800d1de:	4690      	movls	r8, r2
 800d1e0:	4698      	movhi	r8, r3
 800d1e2:	2303      	movs	r3, #3
 800d1e4:	6123      	str	r3, [r4, #16]
 800d1e6:	9b05      	ldr	r3, [sp, #20]
 800d1e8:	f023 0304 	bic.w	r3, r3, #4
 800d1ec:	6023      	str	r3, [r4, #0]
 800d1ee:	f04f 0900 	mov.w	r9, #0
 800d1f2:	9700      	str	r7, [sp, #0]
 800d1f4:	4633      	mov	r3, r6
 800d1f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800d1f8:	4621      	mov	r1, r4
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	f000 f9da 	bl	800d5b4 <_printf_common>
 800d200:	3001      	adds	r0, #1
 800d202:	f040 8090 	bne.w	800d326 <_printf_float+0x1de>
 800d206:	f04f 30ff 	mov.w	r0, #4294967295
 800d20a:	b00d      	add	sp, #52	; 0x34
 800d20c:	ecbd 8b02 	vpop	{d8}
 800d210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d214:	4642      	mov	r2, r8
 800d216:	464b      	mov	r3, r9
 800d218:	4640      	mov	r0, r8
 800d21a:	4649      	mov	r1, r9
 800d21c:	f7f3 fc9e 	bl	8000b5c <__aeabi_dcmpun>
 800d220:	b140      	cbz	r0, 800d234 <_printf_float+0xec>
 800d222:	464b      	mov	r3, r9
 800d224:	2b00      	cmp	r3, #0
 800d226:	bfbc      	itt	lt
 800d228:	232d      	movlt	r3, #45	; 0x2d
 800d22a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d22e:	4a7f      	ldr	r2, [pc, #508]	; (800d42c <_printf_float+0x2e4>)
 800d230:	4b7f      	ldr	r3, [pc, #508]	; (800d430 <_printf_float+0x2e8>)
 800d232:	e7d1      	b.n	800d1d8 <_printf_float+0x90>
 800d234:	6863      	ldr	r3, [r4, #4]
 800d236:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d23a:	9206      	str	r2, [sp, #24]
 800d23c:	1c5a      	adds	r2, r3, #1
 800d23e:	d13f      	bne.n	800d2c0 <_printf_float+0x178>
 800d240:	2306      	movs	r3, #6
 800d242:	6063      	str	r3, [r4, #4]
 800d244:	9b05      	ldr	r3, [sp, #20]
 800d246:	6861      	ldr	r1, [r4, #4]
 800d248:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d24c:	2300      	movs	r3, #0
 800d24e:	9303      	str	r3, [sp, #12]
 800d250:	ab0a      	add	r3, sp, #40	; 0x28
 800d252:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d256:	ab09      	add	r3, sp, #36	; 0x24
 800d258:	ec49 8b10 	vmov	d0, r8, r9
 800d25c:	9300      	str	r3, [sp, #0]
 800d25e:	6022      	str	r2, [r4, #0]
 800d260:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d264:	4628      	mov	r0, r5
 800d266:	f7ff fecf 	bl	800d008 <__cvt>
 800d26a:	9b06      	ldr	r3, [sp, #24]
 800d26c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d26e:	2b47      	cmp	r3, #71	; 0x47
 800d270:	4680      	mov	r8, r0
 800d272:	d108      	bne.n	800d286 <_printf_float+0x13e>
 800d274:	1cc8      	adds	r0, r1, #3
 800d276:	db02      	blt.n	800d27e <_printf_float+0x136>
 800d278:	6863      	ldr	r3, [r4, #4]
 800d27a:	4299      	cmp	r1, r3
 800d27c:	dd41      	ble.n	800d302 <_printf_float+0x1ba>
 800d27e:	f1ab 0302 	sub.w	r3, fp, #2
 800d282:	fa5f fb83 	uxtb.w	fp, r3
 800d286:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d28a:	d820      	bhi.n	800d2ce <_printf_float+0x186>
 800d28c:	3901      	subs	r1, #1
 800d28e:	465a      	mov	r2, fp
 800d290:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d294:	9109      	str	r1, [sp, #36]	; 0x24
 800d296:	f7ff ff19 	bl	800d0cc <__exponent>
 800d29a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d29c:	1813      	adds	r3, r2, r0
 800d29e:	2a01      	cmp	r2, #1
 800d2a0:	4681      	mov	r9, r0
 800d2a2:	6123      	str	r3, [r4, #16]
 800d2a4:	dc02      	bgt.n	800d2ac <_printf_float+0x164>
 800d2a6:	6822      	ldr	r2, [r4, #0]
 800d2a8:	07d2      	lsls	r2, r2, #31
 800d2aa:	d501      	bpl.n	800d2b0 <_printf_float+0x168>
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	6123      	str	r3, [r4, #16]
 800d2b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d09c      	beq.n	800d1f2 <_printf_float+0xaa>
 800d2b8:	232d      	movs	r3, #45	; 0x2d
 800d2ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2be:	e798      	b.n	800d1f2 <_printf_float+0xaa>
 800d2c0:	9a06      	ldr	r2, [sp, #24]
 800d2c2:	2a47      	cmp	r2, #71	; 0x47
 800d2c4:	d1be      	bne.n	800d244 <_printf_float+0xfc>
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d1bc      	bne.n	800d244 <_printf_float+0xfc>
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e7b9      	b.n	800d242 <_printf_float+0xfa>
 800d2ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d2d2:	d118      	bne.n	800d306 <_printf_float+0x1be>
 800d2d4:	2900      	cmp	r1, #0
 800d2d6:	6863      	ldr	r3, [r4, #4]
 800d2d8:	dd0b      	ble.n	800d2f2 <_printf_float+0x1aa>
 800d2da:	6121      	str	r1, [r4, #16]
 800d2dc:	b913      	cbnz	r3, 800d2e4 <_printf_float+0x19c>
 800d2de:	6822      	ldr	r2, [r4, #0]
 800d2e0:	07d0      	lsls	r0, r2, #31
 800d2e2:	d502      	bpl.n	800d2ea <_printf_float+0x1a2>
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	440b      	add	r3, r1
 800d2e8:	6123      	str	r3, [r4, #16]
 800d2ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800d2ec:	f04f 0900 	mov.w	r9, #0
 800d2f0:	e7de      	b.n	800d2b0 <_printf_float+0x168>
 800d2f2:	b913      	cbnz	r3, 800d2fa <_printf_float+0x1b2>
 800d2f4:	6822      	ldr	r2, [r4, #0]
 800d2f6:	07d2      	lsls	r2, r2, #31
 800d2f8:	d501      	bpl.n	800d2fe <_printf_float+0x1b6>
 800d2fa:	3302      	adds	r3, #2
 800d2fc:	e7f4      	b.n	800d2e8 <_printf_float+0x1a0>
 800d2fe:	2301      	movs	r3, #1
 800d300:	e7f2      	b.n	800d2e8 <_printf_float+0x1a0>
 800d302:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d308:	4299      	cmp	r1, r3
 800d30a:	db05      	blt.n	800d318 <_printf_float+0x1d0>
 800d30c:	6823      	ldr	r3, [r4, #0]
 800d30e:	6121      	str	r1, [r4, #16]
 800d310:	07d8      	lsls	r0, r3, #31
 800d312:	d5ea      	bpl.n	800d2ea <_printf_float+0x1a2>
 800d314:	1c4b      	adds	r3, r1, #1
 800d316:	e7e7      	b.n	800d2e8 <_printf_float+0x1a0>
 800d318:	2900      	cmp	r1, #0
 800d31a:	bfd4      	ite	le
 800d31c:	f1c1 0202 	rsble	r2, r1, #2
 800d320:	2201      	movgt	r2, #1
 800d322:	4413      	add	r3, r2
 800d324:	e7e0      	b.n	800d2e8 <_printf_float+0x1a0>
 800d326:	6823      	ldr	r3, [r4, #0]
 800d328:	055a      	lsls	r2, r3, #21
 800d32a:	d407      	bmi.n	800d33c <_printf_float+0x1f4>
 800d32c:	6923      	ldr	r3, [r4, #16]
 800d32e:	4642      	mov	r2, r8
 800d330:	4631      	mov	r1, r6
 800d332:	4628      	mov	r0, r5
 800d334:	47b8      	blx	r7
 800d336:	3001      	adds	r0, #1
 800d338:	d12c      	bne.n	800d394 <_printf_float+0x24c>
 800d33a:	e764      	b.n	800d206 <_printf_float+0xbe>
 800d33c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d340:	f240 80e0 	bls.w	800d504 <_printf_float+0x3bc>
 800d344:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d348:	2200      	movs	r2, #0
 800d34a:	2300      	movs	r3, #0
 800d34c:	f7f3 fbd4 	bl	8000af8 <__aeabi_dcmpeq>
 800d350:	2800      	cmp	r0, #0
 800d352:	d034      	beq.n	800d3be <_printf_float+0x276>
 800d354:	4a37      	ldr	r2, [pc, #220]	; (800d434 <_printf_float+0x2ec>)
 800d356:	2301      	movs	r3, #1
 800d358:	4631      	mov	r1, r6
 800d35a:	4628      	mov	r0, r5
 800d35c:	47b8      	blx	r7
 800d35e:	3001      	adds	r0, #1
 800d360:	f43f af51 	beq.w	800d206 <_printf_float+0xbe>
 800d364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d368:	429a      	cmp	r2, r3
 800d36a:	db02      	blt.n	800d372 <_printf_float+0x22a>
 800d36c:	6823      	ldr	r3, [r4, #0]
 800d36e:	07d8      	lsls	r0, r3, #31
 800d370:	d510      	bpl.n	800d394 <_printf_float+0x24c>
 800d372:	ee18 3a10 	vmov	r3, s16
 800d376:	4652      	mov	r2, sl
 800d378:	4631      	mov	r1, r6
 800d37a:	4628      	mov	r0, r5
 800d37c:	47b8      	blx	r7
 800d37e:	3001      	adds	r0, #1
 800d380:	f43f af41 	beq.w	800d206 <_printf_float+0xbe>
 800d384:	f04f 0800 	mov.w	r8, #0
 800d388:	f104 091a 	add.w	r9, r4, #26
 800d38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d38e:	3b01      	subs	r3, #1
 800d390:	4543      	cmp	r3, r8
 800d392:	dc09      	bgt.n	800d3a8 <_printf_float+0x260>
 800d394:	6823      	ldr	r3, [r4, #0]
 800d396:	079b      	lsls	r3, r3, #30
 800d398:	f100 8107 	bmi.w	800d5aa <_printf_float+0x462>
 800d39c:	68e0      	ldr	r0, [r4, #12]
 800d39e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3a0:	4298      	cmp	r0, r3
 800d3a2:	bfb8      	it	lt
 800d3a4:	4618      	movlt	r0, r3
 800d3a6:	e730      	b.n	800d20a <_printf_float+0xc2>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	464a      	mov	r2, r9
 800d3ac:	4631      	mov	r1, r6
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	47b8      	blx	r7
 800d3b2:	3001      	adds	r0, #1
 800d3b4:	f43f af27 	beq.w	800d206 <_printf_float+0xbe>
 800d3b8:	f108 0801 	add.w	r8, r8, #1
 800d3bc:	e7e6      	b.n	800d38c <_printf_float+0x244>
 800d3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	dc39      	bgt.n	800d438 <_printf_float+0x2f0>
 800d3c4:	4a1b      	ldr	r2, [pc, #108]	; (800d434 <_printf_float+0x2ec>)
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	4631      	mov	r1, r6
 800d3ca:	4628      	mov	r0, r5
 800d3cc:	47b8      	blx	r7
 800d3ce:	3001      	adds	r0, #1
 800d3d0:	f43f af19 	beq.w	800d206 <_printf_float+0xbe>
 800d3d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	d102      	bne.n	800d3e2 <_printf_float+0x29a>
 800d3dc:	6823      	ldr	r3, [r4, #0]
 800d3de:	07d9      	lsls	r1, r3, #31
 800d3e0:	d5d8      	bpl.n	800d394 <_printf_float+0x24c>
 800d3e2:	ee18 3a10 	vmov	r3, s16
 800d3e6:	4652      	mov	r2, sl
 800d3e8:	4631      	mov	r1, r6
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	47b8      	blx	r7
 800d3ee:	3001      	adds	r0, #1
 800d3f0:	f43f af09 	beq.w	800d206 <_printf_float+0xbe>
 800d3f4:	f04f 0900 	mov.w	r9, #0
 800d3f8:	f104 0a1a 	add.w	sl, r4, #26
 800d3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3fe:	425b      	negs	r3, r3
 800d400:	454b      	cmp	r3, r9
 800d402:	dc01      	bgt.n	800d408 <_printf_float+0x2c0>
 800d404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d406:	e792      	b.n	800d32e <_printf_float+0x1e6>
 800d408:	2301      	movs	r3, #1
 800d40a:	4652      	mov	r2, sl
 800d40c:	4631      	mov	r1, r6
 800d40e:	4628      	mov	r0, r5
 800d410:	47b8      	blx	r7
 800d412:	3001      	adds	r0, #1
 800d414:	f43f aef7 	beq.w	800d206 <_printf_float+0xbe>
 800d418:	f109 0901 	add.w	r9, r9, #1
 800d41c:	e7ee      	b.n	800d3fc <_printf_float+0x2b4>
 800d41e:	bf00      	nop
 800d420:	7fefffff 	.word	0x7fefffff
 800d424:	08012425 	.word	0x08012425
 800d428:	08012429 	.word	0x08012429
 800d42c:	0801242d 	.word	0x0801242d
 800d430:	08012431 	.word	0x08012431
 800d434:	08012435 	.word	0x08012435
 800d438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d43a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d43c:	429a      	cmp	r2, r3
 800d43e:	bfa8      	it	ge
 800d440:	461a      	movge	r2, r3
 800d442:	2a00      	cmp	r2, #0
 800d444:	4691      	mov	r9, r2
 800d446:	dc37      	bgt.n	800d4b8 <_printf_float+0x370>
 800d448:	f04f 0b00 	mov.w	fp, #0
 800d44c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d450:	f104 021a 	add.w	r2, r4, #26
 800d454:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d456:	9305      	str	r3, [sp, #20]
 800d458:	eba3 0309 	sub.w	r3, r3, r9
 800d45c:	455b      	cmp	r3, fp
 800d45e:	dc33      	bgt.n	800d4c8 <_printf_float+0x380>
 800d460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d464:	429a      	cmp	r2, r3
 800d466:	db3b      	blt.n	800d4e0 <_printf_float+0x398>
 800d468:	6823      	ldr	r3, [r4, #0]
 800d46a:	07da      	lsls	r2, r3, #31
 800d46c:	d438      	bmi.n	800d4e0 <_printf_float+0x398>
 800d46e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d472:	eba2 0903 	sub.w	r9, r2, r3
 800d476:	9b05      	ldr	r3, [sp, #20]
 800d478:	1ad2      	subs	r2, r2, r3
 800d47a:	4591      	cmp	r9, r2
 800d47c:	bfa8      	it	ge
 800d47e:	4691      	movge	r9, r2
 800d480:	f1b9 0f00 	cmp.w	r9, #0
 800d484:	dc35      	bgt.n	800d4f2 <_printf_float+0x3aa>
 800d486:	f04f 0800 	mov.w	r8, #0
 800d48a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d48e:	f104 0a1a 	add.w	sl, r4, #26
 800d492:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d496:	1a9b      	subs	r3, r3, r2
 800d498:	eba3 0309 	sub.w	r3, r3, r9
 800d49c:	4543      	cmp	r3, r8
 800d49e:	f77f af79 	ble.w	800d394 <_printf_float+0x24c>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	4652      	mov	r2, sl
 800d4a6:	4631      	mov	r1, r6
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	47b8      	blx	r7
 800d4ac:	3001      	adds	r0, #1
 800d4ae:	f43f aeaa 	beq.w	800d206 <_printf_float+0xbe>
 800d4b2:	f108 0801 	add.w	r8, r8, #1
 800d4b6:	e7ec      	b.n	800d492 <_printf_float+0x34a>
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	4631      	mov	r1, r6
 800d4bc:	4642      	mov	r2, r8
 800d4be:	4628      	mov	r0, r5
 800d4c0:	47b8      	blx	r7
 800d4c2:	3001      	adds	r0, #1
 800d4c4:	d1c0      	bne.n	800d448 <_printf_float+0x300>
 800d4c6:	e69e      	b.n	800d206 <_printf_float+0xbe>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	4631      	mov	r1, r6
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	9205      	str	r2, [sp, #20]
 800d4d0:	47b8      	blx	r7
 800d4d2:	3001      	adds	r0, #1
 800d4d4:	f43f ae97 	beq.w	800d206 <_printf_float+0xbe>
 800d4d8:	9a05      	ldr	r2, [sp, #20]
 800d4da:	f10b 0b01 	add.w	fp, fp, #1
 800d4de:	e7b9      	b.n	800d454 <_printf_float+0x30c>
 800d4e0:	ee18 3a10 	vmov	r3, s16
 800d4e4:	4652      	mov	r2, sl
 800d4e6:	4631      	mov	r1, r6
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	47b8      	blx	r7
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	d1be      	bne.n	800d46e <_printf_float+0x326>
 800d4f0:	e689      	b.n	800d206 <_printf_float+0xbe>
 800d4f2:	9a05      	ldr	r2, [sp, #20]
 800d4f4:	464b      	mov	r3, r9
 800d4f6:	4442      	add	r2, r8
 800d4f8:	4631      	mov	r1, r6
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	47b8      	blx	r7
 800d4fe:	3001      	adds	r0, #1
 800d500:	d1c1      	bne.n	800d486 <_printf_float+0x33e>
 800d502:	e680      	b.n	800d206 <_printf_float+0xbe>
 800d504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d506:	2a01      	cmp	r2, #1
 800d508:	dc01      	bgt.n	800d50e <_printf_float+0x3c6>
 800d50a:	07db      	lsls	r3, r3, #31
 800d50c:	d53a      	bpl.n	800d584 <_printf_float+0x43c>
 800d50e:	2301      	movs	r3, #1
 800d510:	4642      	mov	r2, r8
 800d512:	4631      	mov	r1, r6
 800d514:	4628      	mov	r0, r5
 800d516:	47b8      	blx	r7
 800d518:	3001      	adds	r0, #1
 800d51a:	f43f ae74 	beq.w	800d206 <_printf_float+0xbe>
 800d51e:	ee18 3a10 	vmov	r3, s16
 800d522:	4652      	mov	r2, sl
 800d524:	4631      	mov	r1, r6
 800d526:	4628      	mov	r0, r5
 800d528:	47b8      	blx	r7
 800d52a:	3001      	adds	r0, #1
 800d52c:	f43f ae6b 	beq.w	800d206 <_printf_float+0xbe>
 800d530:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d534:	2200      	movs	r2, #0
 800d536:	2300      	movs	r3, #0
 800d538:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d53c:	f7f3 fadc 	bl	8000af8 <__aeabi_dcmpeq>
 800d540:	b9d8      	cbnz	r0, 800d57a <_printf_float+0x432>
 800d542:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d546:	f108 0201 	add.w	r2, r8, #1
 800d54a:	4631      	mov	r1, r6
 800d54c:	4628      	mov	r0, r5
 800d54e:	47b8      	blx	r7
 800d550:	3001      	adds	r0, #1
 800d552:	d10e      	bne.n	800d572 <_printf_float+0x42a>
 800d554:	e657      	b.n	800d206 <_printf_float+0xbe>
 800d556:	2301      	movs	r3, #1
 800d558:	4652      	mov	r2, sl
 800d55a:	4631      	mov	r1, r6
 800d55c:	4628      	mov	r0, r5
 800d55e:	47b8      	blx	r7
 800d560:	3001      	adds	r0, #1
 800d562:	f43f ae50 	beq.w	800d206 <_printf_float+0xbe>
 800d566:	f108 0801 	add.w	r8, r8, #1
 800d56a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d56c:	3b01      	subs	r3, #1
 800d56e:	4543      	cmp	r3, r8
 800d570:	dcf1      	bgt.n	800d556 <_printf_float+0x40e>
 800d572:	464b      	mov	r3, r9
 800d574:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d578:	e6da      	b.n	800d330 <_printf_float+0x1e8>
 800d57a:	f04f 0800 	mov.w	r8, #0
 800d57e:	f104 0a1a 	add.w	sl, r4, #26
 800d582:	e7f2      	b.n	800d56a <_printf_float+0x422>
 800d584:	2301      	movs	r3, #1
 800d586:	4642      	mov	r2, r8
 800d588:	e7df      	b.n	800d54a <_printf_float+0x402>
 800d58a:	2301      	movs	r3, #1
 800d58c:	464a      	mov	r2, r9
 800d58e:	4631      	mov	r1, r6
 800d590:	4628      	mov	r0, r5
 800d592:	47b8      	blx	r7
 800d594:	3001      	adds	r0, #1
 800d596:	f43f ae36 	beq.w	800d206 <_printf_float+0xbe>
 800d59a:	f108 0801 	add.w	r8, r8, #1
 800d59e:	68e3      	ldr	r3, [r4, #12]
 800d5a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5a2:	1a5b      	subs	r3, r3, r1
 800d5a4:	4543      	cmp	r3, r8
 800d5a6:	dcf0      	bgt.n	800d58a <_printf_float+0x442>
 800d5a8:	e6f8      	b.n	800d39c <_printf_float+0x254>
 800d5aa:	f04f 0800 	mov.w	r8, #0
 800d5ae:	f104 0919 	add.w	r9, r4, #25
 800d5b2:	e7f4      	b.n	800d59e <_printf_float+0x456>

0800d5b4 <_printf_common>:
 800d5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b8:	4616      	mov	r6, r2
 800d5ba:	4699      	mov	r9, r3
 800d5bc:	688a      	ldr	r2, [r1, #8]
 800d5be:	690b      	ldr	r3, [r1, #16]
 800d5c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	bfb8      	it	lt
 800d5c8:	4613      	movlt	r3, r2
 800d5ca:	6033      	str	r3, [r6, #0]
 800d5cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d5d0:	4607      	mov	r7, r0
 800d5d2:	460c      	mov	r4, r1
 800d5d4:	b10a      	cbz	r2, 800d5da <_printf_common+0x26>
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	6033      	str	r3, [r6, #0]
 800d5da:	6823      	ldr	r3, [r4, #0]
 800d5dc:	0699      	lsls	r1, r3, #26
 800d5de:	bf42      	ittt	mi
 800d5e0:	6833      	ldrmi	r3, [r6, #0]
 800d5e2:	3302      	addmi	r3, #2
 800d5e4:	6033      	strmi	r3, [r6, #0]
 800d5e6:	6825      	ldr	r5, [r4, #0]
 800d5e8:	f015 0506 	ands.w	r5, r5, #6
 800d5ec:	d106      	bne.n	800d5fc <_printf_common+0x48>
 800d5ee:	f104 0a19 	add.w	sl, r4, #25
 800d5f2:	68e3      	ldr	r3, [r4, #12]
 800d5f4:	6832      	ldr	r2, [r6, #0]
 800d5f6:	1a9b      	subs	r3, r3, r2
 800d5f8:	42ab      	cmp	r3, r5
 800d5fa:	dc26      	bgt.n	800d64a <_printf_common+0x96>
 800d5fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d600:	1e13      	subs	r3, r2, #0
 800d602:	6822      	ldr	r2, [r4, #0]
 800d604:	bf18      	it	ne
 800d606:	2301      	movne	r3, #1
 800d608:	0692      	lsls	r2, r2, #26
 800d60a:	d42b      	bmi.n	800d664 <_printf_common+0xb0>
 800d60c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d610:	4649      	mov	r1, r9
 800d612:	4638      	mov	r0, r7
 800d614:	47c0      	blx	r8
 800d616:	3001      	adds	r0, #1
 800d618:	d01e      	beq.n	800d658 <_printf_common+0xa4>
 800d61a:	6823      	ldr	r3, [r4, #0]
 800d61c:	6922      	ldr	r2, [r4, #16]
 800d61e:	f003 0306 	and.w	r3, r3, #6
 800d622:	2b04      	cmp	r3, #4
 800d624:	bf02      	ittt	eq
 800d626:	68e5      	ldreq	r5, [r4, #12]
 800d628:	6833      	ldreq	r3, [r6, #0]
 800d62a:	1aed      	subeq	r5, r5, r3
 800d62c:	68a3      	ldr	r3, [r4, #8]
 800d62e:	bf0c      	ite	eq
 800d630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d634:	2500      	movne	r5, #0
 800d636:	4293      	cmp	r3, r2
 800d638:	bfc4      	itt	gt
 800d63a:	1a9b      	subgt	r3, r3, r2
 800d63c:	18ed      	addgt	r5, r5, r3
 800d63e:	2600      	movs	r6, #0
 800d640:	341a      	adds	r4, #26
 800d642:	42b5      	cmp	r5, r6
 800d644:	d11a      	bne.n	800d67c <_printf_common+0xc8>
 800d646:	2000      	movs	r0, #0
 800d648:	e008      	b.n	800d65c <_printf_common+0xa8>
 800d64a:	2301      	movs	r3, #1
 800d64c:	4652      	mov	r2, sl
 800d64e:	4649      	mov	r1, r9
 800d650:	4638      	mov	r0, r7
 800d652:	47c0      	blx	r8
 800d654:	3001      	adds	r0, #1
 800d656:	d103      	bne.n	800d660 <_printf_common+0xac>
 800d658:	f04f 30ff 	mov.w	r0, #4294967295
 800d65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d660:	3501      	adds	r5, #1
 800d662:	e7c6      	b.n	800d5f2 <_printf_common+0x3e>
 800d664:	18e1      	adds	r1, r4, r3
 800d666:	1c5a      	adds	r2, r3, #1
 800d668:	2030      	movs	r0, #48	; 0x30
 800d66a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d66e:	4422      	add	r2, r4
 800d670:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d674:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d678:	3302      	adds	r3, #2
 800d67a:	e7c7      	b.n	800d60c <_printf_common+0x58>
 800d67c:	2301      	movs	r3, #1
 800d67e:	4622      	mov	r2, r4
 800d680:	4649      	mov	r1, r9
 800d682:	4638      	mov	r0, r7
 800d684:	47c0      	blx	r8
 800d686:	3001      	adds	r0, #1
 800d688:	d0e6      	beq.n	800d658 <_printf_common+0xa4>
 800d68a:	3601      	adds	r6, #1
 800d68c:	e7d9      	b.n	800d642 <_printf_common+0x8e>
	...

0800d690 <_printf_i>:
 800d690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d694:	7e0f      	ldrb	r7, [r1, #24]
 800d696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d698:	2f78      	cmp	r7, #120	; 0x78
 800d69a:	4691      	mov	r9, r2
 800d69c:	4680      	mov	r8, r0
 800d69e:	460c      	mov	r4, r1
 800d6a0:	469a      	mov	sl, r3
 800d6a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d6a6:	d807      	bhi.n	800d6b8 <_printf_i+0x28>
 800d6a8:	2f62      	cmp	r7, #98	; 0x62
 800d6aa:	d80a      	bhi.n	800d6c2 <_printf_i+0x32>
 800d6ac:	2f00      	cmp	r7, #0
 800d6ae:	f000 80d4 	beq.w	800d85a <_printf_i+0x1ca>
 800d6b2:	2f58      	cmp	r7, #88	; 0x58
 800d6b4:	f000 80c0 	beq.w	800d838 <_printf_i+0x1a8>
 800d6b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d6c0:	e03a      	b.n	800d738 <_printf_i+0xa8>
 800d6c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d6c6:	2b15      	cmp	r3, #21
 800d6c8:	d8f6      	bhi.n	800d6b8 <_printf_i+0x28>
 800d6ca:	a101      	add	r1, pc, #4	; (adr r1, 800d6d0 <_printf_i+0x40>)
 800d6cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6d0:	0800d729 	.word	0x0800d729
 800d6d4:	0800d73d 	.word	0x0800d73d
 800d6d8:	0800d6b9 	.word	0x0800d6b9
 800d6dc:	0800d6b9 	.word	0x0800d6b9
 800d6e0:	0800d6b9 	.word	0x0800d6b9
 800d6e4:	0800d6b9 	.word	0x0800d6b9
 800d6e8:	0800d73d 	.word	0x0800d73d
 800d6ec:	0800d6b9 	.word	0x0800d6b9
 800d6f0:	0800d6b9 	.word	0x0800d6b9
 800d6f4:	0800d6b9 	.word	0x0800d6b9
 800d6f8:	0800d6b9 	.word	0x0800d6b9
 800d6fc:	0800d841 	.word	0x0800d841
 800d700:	0800d769 	.word	0x0800d769
 800d704:	0800d7fb 	.word	0x0800d7fb
 800d708:	0800d6b9 	.word	0x0800d6b9
 800d70c:	0800d6b9 	.word	0x0800d6b9
 800d710:	0800d863 	.word	0x0800d863
 800d714:	0800d6b9 	.word	0x0800d6b9
 800d718:	0800d769 	.word	0x0800d769
 800d71c:	0800d6b9 	.word	0x0800d6b9
 800d720:	0800d6b9 	.word	0x0800d6b9
 800d724:	0800d803 	.word	0x0800d803
 800d728:	682b      	ldr	r3, [r5, #0]
 800d72a:	1d1a      	adds	r2, r3, #4
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	602a      	str	r2, [r5, #0]
 800d730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d738:	2301      	movs	r3, #1
 800d73a:	e09f      	b.n	800d87c <_printf_i+0x1ec>
 800d73c:	6820      	ldr	r0, [r4, #0]
 800d73e:	682b      	ldr	r3, [r5, #0]
 800d740:	0607      	lsls	r7, r0, #24
 800d742:	f103 0104 	add.w	r1, r3, #4
 800d746:	6029      	str	r1, [r5, #0]
 800d748:	d501      	bpl.n	800d74e <_printf_i+0xbe>
 800d74a:	681e      	ldr	r6, [r3, #0]
 800d74c:	e003      	b.n	800d756 <_printf_i+0xc6>
 800d74e:	0646      	lsls	r6, r0, #25
 800d750:	d5fb      	bpl.n	800d74a <_printf_i+0xba>
 800d752:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d756:	2e00      	cmp	r6, #0
 800d758:	da03      	bge.n	800d762 <_printf_i+0xd2>
 800d75a:	232d      	movs	r3, #45	; 0x2d
 800d75c:	4276      	negs	r6, r6
 800d75e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d762:	485a      	ldr	r0, [pc, #360]	; (800d8cc <_printf_i+0x23c>)
 800d764:	230a      	movs	r3, #10
 800d766:	e012      	b.n	800d78e <_printf_i+0xfe>
 800d768:	682b      	ldr	r3, [r5, #0]
 800d76a:	6820      	ldr	r0, [r4, #0]
 800d76c:	1d19      	adds	r1, r3, #4
 800d76e:	6029      	str	r1, [r5, #0]
 800d770:	0605      	lsls	r5, r0, #24
 800d772:	d501      	bpl.n	800d778 <_printf_i+0xe8>
 800d774:	681e      	ldr	r6, [r3, #0]
 800d776:	e002      	b.n	800d77e <_printf_i+0xee>
 800d778:	0641      	lsls	r1, r0, #25
 800d77a:	d5fb      	bpl.n	800d774 <_printf_i+0xe4>
 800d77c:	881e      	ldrh	r6, [r3, #0]
 800d77e:	4853      	ldr	r0, [pc, #332]	; (800d8cc <_printf_i+0x23c>)
 800d780:	2f6f      	cmp	r7, #111	; 0x6f
 800d782:	bf0c      	ite	eq
 800d784:	2308      	moveq	r3, #8
 800d786:	230a      	movne	r3, #10
 800d788:	2100      	movs	r1, #0
 800d78a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d78e:	6865      	ldr	r5, [r4, #4]
 800d790:	60a5      	str	r5, [r4, #8]
 800d792:	2d00      	cmp	r5, #0
 800d794:	bfa2      	ittt	ge
 800d796:	6821      	ldrge	r1, [r4, #0]
 800d798:	f021 0104 	bicge.w	r1, r1, #4
 800d79c:	6021      	strge	r1, [r4, #0]
 800d79e:	b90e      	cbnz	r6, 800d7a4 <_printf_i+0x114>
 800d7a0:	2d00      	cmp	r5, #0
 800d7a2:	d04b      	beq.n	800d83c <_printf_i+0x1ac>
 800d7a4:	4615      	mov	r5, r2
 800d7a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d7aa:	fb03 6711 	mls	r7, r3, r1, r6
 800d7ae:	5dc7      	ldrb	r7, [r0, r7]
 800d7b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d7b4:	4637      	mov	r7, r6
 800d7b6:	42bb      	cmp	r3, r7
 800d7b8:	460e      	mov	r6, r1
 800d7ba:	d9f4      	bls.n	800d7a6 <_printf_i+0x116>
 800d7bc:	2b08      	cmp	r3, #8
 800d7be:	d10b      	bne.n	800d7d8 <_printf_i+0x148>
 800d7c0:	6823      	ldr	r3, [r4, #0]
 800d7c2:	07de      	lsls	r6, r3, #31
 800d7c4:	d508      	bpl.n	800d7d8 <_printf_i+0x148>
 800d7c6:	6923      	ldr	r3, [r4, #16]
 800d7c8:	6861      	ldr	r1, [r4, #4]
 800d7ca:	4299      	cmp	r1, r3
 800d7cc:	bfde      	ittt	le
 800d7ce:	2330      	movle	r3, #48	; 0x30
 800d7d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d7d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d7d8:	1b52      	subs	r2, r2, r5
 800d7da:	6122      	str	r2, [r4, #16]
 800d7dc:	f8cd a000 	str.w	sl, [sp]
 800d7e0:	464b      	mov	r3, r9
 800d7e2:	aa03      	add	r2, sp, #12
 800d7e4:	4621      	mov	r1, r4
 800d7e6:	4640      	mov	r0, r8
 800d7e8:	f7ff fee4 	bl	800d5b4 <_printf_common>
 800d7ec:	3001      	adds	r0, #1
 800d7ee:	d14a      	bne.n	800d886 <_printf_i+0x1f6>
 800d7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f4:	b004      	add	sp, #16
 800d7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7fa:	6823      	ldr	r3, [r4, #0]
 800d7fc:	f043 0320 	orr.w	r3, r3, #32
 800d800:	6023      	str	r3, [r4, #0]
 800d802:	4833      	ldr	r0, [pc, #204]	; (800d8d0 <_printf_i+0x240>)
 800d804:	2778      	movs	r7, #120	; 0x78
 800d806:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d80a:	6823      	ldr	r3, [r4, #0]
 800d80c:	6829      	ldr	r1, [r5, #0]
 800d80e:	061f      	lsls	r7, r3, #24
 800d810:	f851 6b04 	ldr.w	r6, [r1], #4
 800d814:	d402      	bmi.n	800d81c <_printf_i+0x18c>
 800d816:	065f      	lsls	r7, r3, #25
 800d818:	bf48      	it	mi
 800d81a:	b2b6      	uxthmi	r6, r6
 800d81c:	07df      	lsls	r7, r3, #31
 800d81e:	bf48      	it	mi
 800d820:	f043 0320 	orrmi.w	r3, r3, #32
 800d824:	6029      	str	r1, [r5, #0]
 800d826:	bf48      	it	mi
 800d828:	6023      	strmi	r3, [r4, #0]
 800d82a:	b91e      	cbnz	r6, 800d834 <_printf_i+0x1a4>
 800d82c:	6823      	ldr	r3, [r4, #0]
 800d82e:	f023 0320 	bic.w	r3, r3, #32
 800d832:	6023      	str	r3, [r4, #0]
 800d834:	2310      	movs	r3, #16
 800d836:	e7a7      	b.n	800d788 <_printf_i+0xf8>
 800d838:	4824      	ldr	r0, [pc, #144]	; (800d8cc <_printf_i+0x23c>)
 800d83a:	e7e4      	b.n	800d806 <_printf_i+0x176>
 800d83c:	4615      	mov	r5, r2
 800d83e:	e7bd      	b.n	800d7bc <_printf_i+0x12c>
 800d840:	682b      	ldr	r3, [r5, #0]
 800d842:	6826      	ldr	r6, [r4, #0]
 800d844:	6961      	ldr	r1, [r4, #20]
 800d846:	1d18      	adds	r0, r3, #4
 800d848:	6028      	str	r0, [r5, #0]
 800d84a:	0635      	lsls	r5, r6, #24
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	d501      	bpl.n	800d854 <_printf_i+0x1c4>
 800d850:	6019      	str	r1, [r3, #0]
 800d852:	e002      	b.n	800d85a <_printf_i+0x1ca>
 800d854:	0670      	lsls	r0, r6, #25
 800d856:	d5fb      	bpl.n	800d850 <_printf_i+0x1c0>
 800d858:	8019      	strh	r1, [r3, #0]
 800d85a:	2300      	movs	r3, #0
 800d85c:	6123      	str	r3, [r4, #16]
 800d85e:	4615      	mov	r5, r2
 800d860:	e7bc      	b.n	800d7dc <_printf_i+0x14c>
 800d862:	682b      	ldr	r3, [r5, #0]
 800d864:	1d1a      	adds	r2, r3, #4
 800d866:	602a      	str	r2, [r5, #0]
 800d868:	681d      	ldr	r5, [r3, #0]
 800d86a:	6862      	ldr	r2, [r4, #4]
 800d86c:	2100      	movs	r1, #0
 800d86e:	4628      	mov	r0, r5
 800d870:	f7f2 fcc6 	bl	8000200 <memchr>
 800d874:	b108      	cbz	r0, 800d87a <_printf_i+0x1ea>
 800d876:	1b40      	subs	r0, r0, r5
 800d878:	6060      	str	r0, [r4, #4]
 800d87a:	6863      	ldr	r3, [r4, #4]
 800d87c:	6123      	str	r3, [r4, #16]
 800d87e:	2300      	movs	r3, #0
 800d880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d884:	e7aa      	b.n	800d7dc <_printf_i+0x14c>
 800d886:	6923      	ldr	r3, [r4, #16]
 800d888:	462a      	mov	r2, r5
 800d88a:	4649      	mov	r1, r9
 800d88c:	4640      	mov	r0, r8
 800d88e:	47d0      	blx	sl
 800d890:	3001      	adds	r0, #1
 800d892:	d0ad      	beq.n	800d7f0 <_printf_i+0x160>
 800d894:	6823      	ldr	r3, [r4, #0]
 800d896:	079b      	lsls	r3, r3, #30
 800d898:	d413      	bmi.n	800d8c2 <_printf_i+0x232>
 800d89a:	68e0      	ldr	r0, [r4, #12]
 800d89c:	9b03      	ldr	r3, [sp, #12]
 800d89e:	4298      	cmp	r0, r3
 800d8a0:	bfb8      	it	lt
 800d8a2:	4618      	movlt	r0, r3
 800d8a4:	e7a6      	b.n	800d7f4 <_printf_i+0x164>
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	4632      	mov	r2, r6
 800d8aa:	4649      	mov	r1, r9
 800d8ac:	4640      	mov	r0, r8
 800d8ae:	47d0      	blx	sl
 800d8b0:	3001      	adds	r0, #1
 800d8b2:	d09d      	beq.n	800d7f0 <_printf_i+0x160>
 800d8b4:	3501      	adds	r5, #1
 800d8b6:	68e3      	ldr	r3, [r4, #12]
 800d8b8:	9903      	ldr	r1, [sp, #12]
 800d8ba:	1a5b      	subs	r3, r3, r1
 800d8bc:	42ab      	cmp	r3, r5
 800d8be:	dcf2      	bgt.n	800d8a6 <_printf_i+0x216>
 800d8c0:	e7eb      	b.n	800d89a <_printf_i+0x20a>
 800d8c2:	2500      	movs	r5, #0
 800d8c4:	f104 0619 	add.w	r6, r4, #25
 800d8c8:	e7f5      	b.n	800d8b6 <_printf_i+0x226>
 800d8ca:	bf00      	nop
 800d8cc:	08012437 	.word	0x08012437
 800d8d0:	08012448 	.word	0x08012448

0800d8d4 <std>:
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	b510      	push	{r4, lr}
 800d8d8:	4604      	mov	r4, r0
 800d8da:	e9c0 3300 	strd	r3, r3, [r0]
 800d8de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8e2:	6083      	str	r3, [r0, #8]
 800d8e4:	8181      	strh	r1, [r0, #12]
 800d8e6:	6643      	str	r3, [r0, #100]	; 0x64
 800d8e8:	81c2      	strh	r2, [r0, #14]
 800d8ea:	6183      	str	r3, [r0, #24]
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	2208      	movs	r2, #8
 800d8f0:	305c      	adds	r0, #92	; 0x5c
 800d8f2:	f000 fa53 	bl	800dd9c <memset>
 800d8f6:	4b0d      	ldr	r3, [pc, #52]	; (800d92c <std+0x58>)
 800d8f8:	6263      	str	r3, [r4, #36]	; 0x24
 800d8fa:	4b0d      	ldr	r3, [pc, #52]	; (800d930 <std+0x5c>)
 800d8fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8fe:	4b0d      	ldr	r3, [pc, #52]	; (800d934 <std+0x60>)
 800d900:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d902:	4b0d      	ldr	r3, [pc, #52]	; (800d938 <std+0x64>)
 800d904:	6323      	str	r3, [r4, #48]	; 0x30
 800d906:	4b0d      	ldr	r3, [pc, #52]	; (800d93c <std+0x68>)
 800d908:	6224      	str	r4, [r4, #32]
 800d90a:	429c      	cmp	r4, r3
 800d90c:	d006      	beq.n	800d91c <std+0x48>
 800d90e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d912:	4294      	cmp	r4, r2
 800d914:	d002      	beq.n	800d91c <std+0x48>
 800d916:	33d0      	adds	r3, #208	; 0xd0
 800d918:	429c      	cmp	r4, r3
 800d91a:	d105      	bne.n	800d928 <std+0x54>
 800d91c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d924:	f000 bb48 	b.w	800dfb8 <__retarget_lock_init_recursive>
 800d928:	bd10      	pop	{r4, pc}
 800d92a:	bf00      	nop
 800d92c:	0800dbb9 	.word	0x0800dbb9
 800d930:	0800dbdb 	.word	0x0800dbdb
 800d934:	0800dc13 	.word	0x0800dc13
 800d938:	0800dc37 	.word	0x0800dc37
 800d93c:	20019ec0 	.word	0x20019ec0

0800d940 <stdio_exit_handler>:
 800d940:	4a02      	ldr	r2, [pc, #8]	; (800d94c <stdio_exit_handler+0xc>)
 800d942:	4903      	ldr	r1, [pc, #12]	; (800d950 <stdio_exit_handler+0x10>)
 800d944:	4803      	ldr	r0, [pc, #12]	; (800d954 <stdio_exit_handler+0x14>)
 800d946:	f000 b869 	b.w	800da1c <_fwalk_sglue>
 800d94a:	bf00      	nop
 800d94c:	20000978 	.word	0x20000978
 800d950:	0800f9c1 	.word	0x0800f9c1
 800d954:	20000984 	.word	0x20000984

0800d958 <cleanup_stdio>:
 800d958:	6841      	ldr	r1, [r0, #4]
 800d95a:	4b0c      	ldr	r3, [pc, #48]	; (800d98c <cleanup_stdio+0x34>)
 800d95c:	4299      	cmp	r1, r3
 800d95e:	b510      	push	{r4, lr}
 800d960:	4604      	mov	r4, r0
 800d962:	d001      	beq.n	800d968 <cleanup_stdio+0x10>
 800d964:	f002 f82c 	bl	800f9c0 <_fflush_r>
 800d968:	68a1      	ldr	r1, [r4, #8]
 800d96a:	4b09      	ldr	r3, [pc, #36]	; (800d990 <cleanup_stdio+0x38>)
 800d96c:	4299      	cmp	r1, r3
 800d96e:	d002      	beq.n	800d976 <cleanup_stdio+0x1e>
 800d970:	4620      	mov	r0, r4
 800d972:	f002 f825 	bl	800f9c0 <_fflush_r>
 800d976:	68e1      	ldr	r1, [r4, #12]
 800d978:	4b06      	ldr	r3, [pc, #24]	; (800d994 <cleanup_stdio+0x3c>)
 800d97a:	4299      	cmp	r1, r3
 800d97c:	d004      	beq.n	800d988 <cleanup_stdio+0x30>
 800d97e:	4620      	mov	r0, r4
 800d980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d984:	f002 b81c 	b.w	800f9c0 <_fflush_r>
 800d988:	bd10      	pop	{r4, pc}
 800d98a:	bf00      	nop
 800d98c:	20019ec0 	.word	0x20019ec0
 800d990:	20019f28 	.word	0x20019f28
 800d994:	20019f90 	.word	0x20019f90

0800d998 <global_stdio_init.part.0>:
 800d998:	b510      	push	{r4, lr}
 800d99a:	4b0b      	ldr	r3, [pc, #44]	; (800d9c8 <global_stdio_init.part.0+0x30>)
 800d99c:	4c0b      	ldr	r4, [pc, #44]	; (800d9cc <global_stdio_init.part.0+0x34>)
 800d99e:	4a0c      	ldr	r2, [pc, #48]	; (800d9d0 <global_stdio_init.part.0+0x38>)
 800d9a0:	601a      	str	r2, [r3, #0]
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	2104      	movs	r1, #4
 800d9a8:	f7ff ff94 	bl	800d8d4 <std>
 800d9ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	2109      	movs	r1, #9
 800d9b4:	f7ff ff8e 	bl	800d8d4 <std>
 800d9b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d9bc:	2202      	movs	r2, #2
 800d9be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9c2:	2112      	movs	r1, #18
 800d9c4:	f7ff bf86 	b.w	800d8d4 <std>
 800d9c8:	20019ff8 	.word	0x20019ff8
 800d9cc:	20019ec0 	.word	0x20019ec0
 800d9d0:	0800d941 	.word	0x0800d941

0800d9d4 <__sfp_lock_acquire>:
 800d9d4:	4801      	ldr	r0, [pc, #4]	; (800d9dc <__sfp_lock_acquire+0x8>)
 800d9d6:	f000 baf0 	b.w	800dfba <__retarget_lock_acquire_recursive>
 800d9da:	bf00      	nop
 800d9dc:	2001a001 	.word	0x2001a001

0800d9e0 <__sfp_lock_release>:
 800d9e0:	4801      	ldr	r0, [pc, #4]	; (800d9e8 <__sfp_lock_release+0x8>)
 800d9e2:	f000 baeb 	b.w	800dfbc <__retarget_lock_release_recursive>
 800d9e6:	bf00      	nop
 800d9e8:	2001a001 	.word	0x2001a001

0800d9ec <__sinit>:
 800d9ec:	b510      	push	{r4, lr}
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	f7ff fff0 	bl	800d9d4 <__sfp_lock_acquire>
 800d9f4:	6a23      	ldr	r3, [r4, #32]
 800d9f6:	b11b      	cbz	r3, 800da00 <__sinit+0x14>
 800d9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9fc:	f7ff bff0 	b.w	800d9e0 <__sfp_lock_release>
 800da00:	4b04      	ldr	r3, [pc, #16]	; (800da14 <__sinit+0x28>)
 800da02:	6223      	str	r3, [r4, #32]
 800da04:	4b04      	ldr	r3, [pc, #16]	; (800da18 <__sinit+0x2c>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d1f5      	bne.n	800d9f8 <__sinit+0xc>
 800da0c:	f7ff ffc4 	bl	800d998 <global_stdio_init.part.0>
 800da10:	e7f2      	b.n	800d9f8 <__sinit+0xc>
 800da12:	bf00      	nop
 800da14:	0800d959 	.word	0x0800d959
 800da18:	20019ff8 	.word	0x20019ff8

0800da1c <_fwalk_sglue>:
 800da1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da20:	4607      	mov	r7, r0
 800da22:	4688      	mov	r8, r1
 800da24:	4614      	mov	r4, r2
 800da26:	2600      	movs	r6, #0
 800da28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da2c:	f1b9 0901 	subs.w	r9, r9, #1
 800da30:	d505      	bpl.n	800da3e <_fwalk_sglue+0x22>
 800da32:	6824      	ldr	r4, [r4, #0]
 800da34:	2c00      	cmp	r4, #0
 800da36:	d1f7      	bne.n	800da28 <_fwalk_sglue+0xc>
 800da38:	4630      	mov	r0, r6
 800da3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da3e:	89ab      	ldrh	r3, [r5, #12]
 800da40:	2b01      	cmp	r3, #1
 800da42:	d907      	bls.n	800da54 <_fwalk_sglue+0x38>
 800da44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da48:	3301      	adds	r3, #1
 800da4a:	d003      	beq.n	800da54 <_fwalk_sglue+0x38>
 800da4c:	4629      	mov	r1, r5
 800da4e:	4638      	mov	r0, r7
 800da50:	47c0      	blx	r8
 800da52:	4306      	orrs	r6, r0
 800da54:	3568      	adds	r5, #104	; 0x68
 800da56:	e7e9      	b.n	800da2c <_fwalk_sglue+0x10>

0800da58 <_puts_r>:
 800da58:	6a03      	ldr	r3, [r0, #32]
 800da5a:	b570      	push	{r4, r5, r6, lr}
 800da5c:	6884      	ldr	r4, [r0, #8]
 800da5e:	4605      	mov	r5, r0
 800da60:	460e      	mov	r6, r1
 800da62:	b90b      	cbnz	r3, 800da68 <_puts_r+0x10>
 800da64:	f7ff ffc2 	bl	800d9ec <__sinit>
 800da68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da6a:	07db      	lsls	r3, r3, #31
 800da6c:	d405      	bmi.n	800da7a <_puts_r+0x22>
 800da6e:	89a3      	ldrh	r3, [r4, #12]
 800da70:	0598      	lsls	r0, r3, #22
 800da72:	d402      	bmi.n	800da7a <_puts_r+0x22>
 800da74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da76:	f000 faa0 	bl	800dfba <__retarget_lock_acquire_recursive>
 800da7a:	89a3      	ldrh	r3, [r4, #12]
 800da7c:	0719      	lsls	r1, r3, #28
 800da7e:	d513      	bpl.n	800daa8 <_puts_r+0x50>
 800da80:	6923      	ldr	r3, [r4, #16]
 800da82:	b18b      	cbz	r3, 800daa8 <_puts_r+0x50>
 800da84:	3e01      	subs	r6, #1
 800da86:	68a3      	ldr	r3, [r4, #8]
 800da88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800da8c:	3b01      	subs	r3, #1
 800da8e:	60a3      	str	r3, [r4, #8]
 800da90:	b9e9      	cbnz	r1, 800dace <_puts_r+0x76>
 800da92:	2b00      	cmp	r3, #0
 800da94:	da2e      	bge.n	800daf4 <_puts_r+0x9c>
 800da96:	4622      	mov	r2, r4
 800da98:	210a      	movs	r1, #10
 800da9a:	4628      	mov	r0, r5
 800da9c:	f000 f8cf 	bl	800dc3e <__swbuf_r>
 800daa0:	3001      	adds	r0, #1
 800daa2:	d007      	beq.n	800dab4 <_puts_r+0x5c>
 800daa4:	250a      	movs	r5, #10
 800daa6:	e007      	b.n	800dab8 <_puts_r+0x60>
 800daa8:	4621      	mov	r1, r4
 800daaa:	4628      	mov	r0, r5
 800daac:	f000 f904 	bl	800dcb8 <__swsetup_r>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	d0e7      	beq.n	800da84 <_puts_r+0x2c>
 800dab4:	f04f 35ff 	mov.w	r5, #4294967295
 800dab8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800daba:	07da      	lsls	r2, r3, #31
 800dabc:	d405      	bmi.n	800daca <_puts_r+0x72>
 800dabe:	89a3      	ldrh	r3, [r4, #12]
 800dac0:	059b      	lsls	r3, r3, #22
 800dac2:	d402      	bmi.n	800daca <_puts_r+0x72>
 800dac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dac6:	f000 fa79 	bl	800dfbc <__retarget_lock_release_recursive>
 800daca:	4628      	mov	r0, r5
 800dacc:	bd70      	pop	{r4, r5, r6, pc}
 800dace:	2b00      	cmp	r3, #0
 800dad0:	da04      	bge.n	800dadc <_puts_r+0x84>
 800dad2:	69a2      	ldr	r2, [r4, #24]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	dc06      	bgt.n	800dae6 <_puts_r+0x8e>
 800dad8:	290a      	cmp	r1, #10
 800dada:	d004      	beq.n	800dae6 <_puts_r+0x8e>
 800dadc:	6823      	ldr	r3, [r4, #0]
 800dade:	1c5a      	adds	r2, r3, #1
 800dae0:	6022      	str	r2, [r4, #0]
 800dae2:	7019      	strb	r1, [r3, #0]
 800dae4:	e7cf      	b.n	800da86 <_puts_r+0x2e>
 800dae6:	4622      	mov	r2, r4
 800dae8:	4628      	mov	r0, r5
 800daea:	f000 f8a8 	bl	800dc3e <__swbuf_r>
 800daee:	3001      	adds	r0, #1
 800daf0:	d1c9      	bne.n	800da86 <_puts_r+0x2e>
 800daf2:	e7df      	b.n	800dab4 <_puts_r+0x5c>
 800daf4:	6823      	ldr	r3, [r4, #0]
 800daf6:	250a      	movs	r5, #10
 800daf8:	1c5a      	adds	r2, r3, #1
 800dafa:	6022      	str	r2, [r4, #0]
 800dafc:	701d      	strb	r5, [r3, #0]
 800dafe:	e7db      	b.n	800dab8 <_puts_r+0x60>

0800db00 <puts>:
 800db00:	4b02      	ldr	r3, [pc, #8]	; (800db0c <puts+0xc>)
 800db02:	4601      	mov	r1, r0
 800db04:	6818      	ldr	r0, [r3, #0]
 800db06:	f7ff bfa7 	b.w	800da58 <_puts_r>
 800db0a:	bf00      	nop
 800db0c:	200009d0 	.word	0x200009d0

0800db10 <sniprintf>:
 800db10:	b40c      	push	{r2, r3}
 800db12:	b530      	push	{r4, r5, lr}
 800db14:	4b17      	ldr	r3, [pc, #92]	; (800db74 <sniprintf+0x64>)
 800db16:	1e0c      	subs	r4, r1, #0
 800db18:	681d      	ldr	r5, [r3, #0]
 800db1a:	b09d      	sub	sp, #116	; 0x74
 800db1c:	da08      	bge.n	800db30 <sniprintf+0x20>
 800db1e:	238b      	movs	r3, #139	; 0x8b
 800db20:	602b      	str	r3, [r5, #0]
 800db22:	f04f 30ff 	mov.w	r0, #4294967295
 800db26:	b01d      	add	sp, #116	; 0x74
 800db28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db2c:	b002      	add	sp, #8
 800db2e:	4770      	bx	lr
 800db30:	f44f 7302 	mov.w	r3, #520	; 0x208
 800db34:	f8ad 3014 	strh.w	r3, [sp, #20]
 800db38:	bf14      	ite	ne
 800db3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800db3e:	4623      	moveq	r3, r4
 800db40:	9304      	str	r3, [sp, #16]
 800db42:	9307      	str	r3, [sp, #28]
 800db44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db48:	9002      	str	r0, [sp, #8]
 800db4a:	9006      	str	r0, [sp, #24]
 800db4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800db50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800db52:	ab21      	add	r3, sp, #132	; 0x84
 800db54:	a902      	add	r1, sp, #8
 800db56:	4628      	mov	r0, r5
 800db58:	9301      	str	r3, [sp, #4]
 800db5a:	f001 fdad 	bl	800f6b8 <_svfiprintf_r>
 800db5e:	1c43      	adds	r3, r0, #1
 800db60:	bfbc      	itt	lt
 800db62:	238b      	movlt	r3, #139	; 0x8b
 800db64:	602b      	strlt	r3, [r5, #0]
 800db66:	2c00      	cmp	r4, #0
 800db68:	d0dd      	beq.n	800db26 <sniprintf+0x16>
 800db6a:	9b02      	ldr	r3, [sp, #8]
 800db6c:	2200      	movs	r2, #0
 800db6e:	701a      	strb	r2, [r3, #0]
 800db70:	e7d9      	b.n	800db26 <sniprintf+0x16>
 800db72:	bf00      	nop
 800db74:	200009d0 	.word	0x200009d0

0800db78 <siprintf>:
 800db78:	b40e      	push	{r1, r2, r3}
 800db7a:	b500      	push	{lr}
 800db7c:	b09c      	sub	sp, #112	; 0x70
 800db7e:	ab1d      	add	r3, sp, #116	; 0x74
 800db80:	9002      	str	r0, [sp, #8]
 800db82:	9006      	str	r0, [sp, #24]
 800db84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800db88:	4809      	ldr	r0, [pc, #36]	; (800dbb0 <siprintf+0x38>)
 800db8a:	9107      	str	r1, [sp, #28]
 800db8c:	9104      	str	r1, [sp, #16]
 800db8e:	4909      	ldr	r1, [pc, #36]	; (800dbb4 <siprintf+0x3c>)
 800db90:	f853 2b04 	ldr.w	r2, [r3], #4
 800db94:	9105      	str	r1, [sp, #20]
 800db96:	6800      	ldr	r0, [r0, #0]
 800db98:	9301      	str	r3, [sp, #4]
 800db9a:	a902      	add	r1, sp, #8
 800db9c:	f001 fd8c 	bl	800f6b8 <_svfiprintf_r>
 800dba0:	9b02      	ldr	r3, [sp, #8]
 800dba2:	2200      	movs	r2, #0
 800dba4:	701a      	strb	r2, [r3, #0]
 800dba6:	b01c      	add	sp, #112	; 0x70
 800dba8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbac:	b003      	add	sp, #12
 800dbae:	4770      	bx	lr
 800dbb0:	200009d0 	.word	0x200009d0
 800dbb4:	ffff0208 	.word	0xffff0208

0800dbb8 <__sread>:
 800dbb8:	b510      	push	{r4, lr}
 800dbba:	460c      	mov	r4, r1
 800dbbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbc0:	f000 f9ac 	bl	800df1c <_read_r>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	bfab      	itete	ge
 800dbc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dbca:	89a3      	ldrhlt	r3, [r4, #12]
 800dbcc:	181b      	addge	r3, r3, r0
 800dbce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dbd2:	bfac      	ite	ge
 800dbd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dbd6:	81a3      	strhlt	r3, [r4, #12]
 800dbd8:	bd10      	pop	{r4, pc}

0800dbda <__swrite>:
 800dbda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbde:	461f      	mov	r7, r3
 800dbe0:	898b      	ldrh	r3, [r1, #12]
 800dbe2:	05db      	lsls	r3, r3, #23
 800dbe4:	4605      	mov	r5, r0
 800dbe6:	460c      	mov	r4, r1
 800dbe8:	4616      	mov	r6, r2
 800dbea:	d505      	bpl.n	800dbf8 <__swrite+0x1e>
 800dbec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbf0:	2302      	movs	r3, #2
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	f000 f980 	bl	800def8 <_lseek_r>
 800dbf8:	89a3      	ldrh	r3, [r4, #12]
 800dbfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc02:	81a3      	strh	r3, [r4, #12]
 800dc04:	4632      	mov	r2, r6
 800dc06:	463b      	mov	r3, r7
 800dc08:	4628      	mov	r0, r5
 800dc0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc0e:	f000 b997 	b.w	800df40 <_write_r>

0800dc12 <__sseek>:
 800dc12:	b510      	push	{r4, lr}
 800dc14:	460c      	mov	r4, r1
 800dc16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc1a:	f000 f96d 	bl	800def8 <_lseek_r>
 800dc1e:	1c43      	adds	r3, r0, #1
 800dc20:	89a3      	ldrh	r3, [r4, #12]
 800dc22:	bf15      	itete	ne
 800dc24:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc2e:	81a3      	strheq	r3, [r4, #12]
 800dc30:	bf18      	it	ne
 800dc32:	81a3      	strhne	r3, [r4, #12]
 800dc34:	bd10      	pop	{r4, pc}

0800dc36 <__sclose>:
 800dc36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc3a:	f000 b94d 	b.w	800ded8 <_close_r>

0800dc3e <__swbuf_r>:
 800dc3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc40:	460e      	mov	r6, r1
 800dc42:	4614      	mov	r4, r2
 800dc44:	4605      	mov	r5, r0
 800dc46:	b118      	cbz	r0, 800dc50 <__swbuf_r+0x12>
 800dc48:	6a03      	ldr	r3, [r0, #32]
 800dc4a:	b90b      	cbnz	r3, 800dc50 <__swbuf_r+0x12>
 800dc4c:	f7ff fece 	bl	800d9ec <__sinit>
 800dc50:	69a3      	ldr	r3, [r4, #24]
 800dc52:	60a3      	str	r3, [r4, #8]
 800dc54:	89a3      	ldrh	r3, [r4, #12]
 800dc56:	071a      	lsls	r2, r3, #28
 800dc58:	d525      	bpl.n	800dca6 <__swbuf_r+0x68>
 800dc5a:	6923      	ldr	r3, [r4, #16]
 800dc5c:	b31b      	cbz	r3, 800dca6 <__swbuf_r+0x68>
 800dc5e:	6823      	ldr	r3, [r4, #0]
 800dc60:	6922      	ldr	r2, [r4, #16]
 800dc62:	1a98      	subs	r0, r3, r2
 800dc64:	6963      	ldr	r3, [r4, #20]
 800dc66:	b2f6      	uxtb	r6, r6
 800dc68:	4283      	cmp	r3, r0
 800dc6a:	4637      	mov	r7, r6
 800dc6c:	dc04      	bgt.n	800dc78 <__swbuf_r+0x3a>
 800dc6e:	4621      	mov	r1, r4
 800dc70:	4628      	mov	r0, r5
 800dc72:	f001 fea5 	bl	800f9c0 <_fflush_r>
 800dc76:	b9e0      	cbnz	r0, 800dcb2 <__swbuf_r+0x74>
 800dc78:	68a3      	ldr	r3, [r4, #8]
 800dc7a:	3b01      	subs	r3, #1
 800dc7c:	60a3      	str	r3, [r4, #8]
 800dc7e:	6823      	ldr	r3, [r4, #0]
 800dc80:	1c5a      	adds	r2, r3, #1
 800dc82:	6022      	str	r2, [r4, #0]
 800dc84:	701e      	strb	r6, [r3, #0]
 800dc86:	6962      	ldr	r2, [r4, #20]
 800dc88:	1c43      	adds	r3, r0, #1
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d004      	beq.n	800dc98 <__swbuf_r+0x5a>
 800dc8e:	89a3      	ldrh	r3, [r4, #12]
 800dc90:	07db      	lsls	r3, r3, #31
 800dc92:	d506      	bpl.n	800dca2 <__swbuf_r+0x64>
 800dc94:	2e0a      	cmp	r6, #10
 800dc96:	d104      	bne.n	800dca2 <__swbuf_r+0x64>
 800dc98:	4621      	mov	r1, r4
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	f001 fe90 	bl	800f9c0 <_fflush_r>
 800dca0:	b938      	cbnz	r0, 800dcb2 <__swbuf_r+0x74>
 800dca2:	4638      	mov	r0, r7
 800dca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dca6:	4621      	mov	r1, r4
 800dca8:	4628      	mov	r0, r5
 800dcaa:	f000 f805 	bl	800dcb8 <__swsetup_r>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d0d5      	beq.n	800dc5e <__swbuf_r+0x20>
 800dcb2:	f04f 37ff 	mov.w	r7, #4294967295
 800dcb6:	e7f4      	b.n	800dca2 <__swbuf_r+0x64>

0800dcb8 <__swsetup_r>:
 800dcb8:	b538      	push	{r3, r4, r5, lr}
 800dcba:	4b2a      	ldr	r3, [pc, #168]	; (800dd64 <__swsetup_r+0xac>)
 800dcbc:	4605      	mov	r5, r0
 800dcbe:	6818      	ldr	r0, [r3, #0]
 800dcc0:	460c      	mov	r4, r1
 800dcc2:	b118      	cbz	r0, 800dccc <__swsetup_r+0x14>
 800dcc4:	6a03      	ldr	r3, [r0, #32]
 800dcc6:	b90b      	cbnz	r3, 800dccc <__swsetup_r+0x14>
 800dcc8:	f7ff fe90 	bl	800d9ec <__sinit>
 800dccc:	89a3      	ldrh	r3, [r4, #12]
 800dcce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcd2:	0718      	lsls	r0, r3, #28
 800dcd4:	d422      	bmi.n	800dd1c <__swsetup_r+0x64>
 800dcd6:	06d9      	lsls	r1, r3, #27
 800dcd8:	d407      	bmi.n	800dcea <__swsetup_r+0x32>
 800dcda:	2309      	movs	r3, #9
 800dcdc:	602b      	str	r3, [r5, #0]
 800dcde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dce2:	81a3      	strh	r3, [r4, #12]
 800dce4:	f04f 30ff 	mov.w	r0, #4294967295
 800dce8:	e034      	b.n	800dd54 <__swsetup_r+0x9c>
 800dcea:	0758      	lsls	r0, r3, #29
 800dcec:	d512      	bpl.n	800dd14 <__swsetup_r+0x5c>
 800dcee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcf0:	b141      	cbz	r1, 800dd04 <__swsetup_r+0x4c>
 800dcf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcf6:	4299      	cmp	r1, r3
 800dcf8:	d002      	beq.n	800dd00 <__swsetup_r+0x48>
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	f001 f806 	bl	800ed0c <_free_r>
 800dd00:	2300      	movs	r3, #0
 800dd02:	6363      	str	r3, [r4, #52]	; 0x34
 800dd04:	89a3      	ldrh	r3, [r4, #12]
 800dd06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd0a:	81a3      	strh	r3, [r4, #12]
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	6063      	str	r3, [r4, #4]
 800dd10:	6923      	ldr	r3, [r4, #16]
 800dd12:	6023      	str	r3, [r4, #0]
 800dd14:	89a3      	ldrh	r3, [r4, #12]
 800dd16:	f043 0308 	orr.w	r3, r3, #8
 800dd1a:	81a3      	strh	r3, [r4, #12]
 800dd1c:	6923      	ldr	r3, [r4, #16]
 800dd1e:	b94b      	cbnz	r3, 800dd34 <__swsetup_r+0x7c>
 800dd20:	89a3      	ldrh	r3, [r4, #12]
 800dd22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd2a:	d003      	beq.n	800dd34 <__swsetup_r+0x7c>
 800dd2c:	4621      	mov	r1, r4
 800dd2e:	4628      	mov	r0, r5
 800dd30:	f001 fea6 	bl	800fa80 <__smakebuf_r>
 800dd34:	89a0      	ldrh	r0, [r4, #12]
 800dd36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd3a:	f010 0301 	ands.w	r3, r0, #1
 800dd3e:	d00a      	beq.n	800dd56 <__swsetup_r+0x9e>
 800dd40:	2300      	movs	r3, #0
 800dd42:	60a3      	str	r3, [r4, #8]
 800dd44:	6963      	ldr	r3, [r4, #20]
 800dd46:	425b      	negs	r3, r3
 800dd48:	61a3      	str	r3, [r4, #24]
 800dd4a:	6923      	ldr	r3, [r4, #16]
 800dd4c:	b943      	cbnz	r3, 800dd60 <__swsetup_r+0xa8>
 800dd4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd52:	d1c4      	bne.n	800dcde <__swsetup_r+0x26>
 800dd54:	bd38      	pop	{r3, r4, r5, pc}
 800dd56:	0781      	lsls	r1, r0, #30
 800dd58:	bf58      	it	pl
 800dd5a:	6963      	ldrpl	r3, [r4, #20]
 800dd5c:	60a3      	str	r3, [r4, #8]
 800dd5e:	e7f4      	b.n	800dd4a <__swsetup_r+0x92>
 800dd60:	2000      	movs	r0, #0
 800dd62:	e7f7      	b.n	800dd54 <__swsetup_r+0x9c>
 800dd64:	200009d0 	.word	0x200009d0

0800dd68 <memmove>:
 800dd68:	4288      	cmp	r0, r1
 800dd6a:	b510      	push	{r4, lr}
 800dd6c:	eb01 0402 	add.w	r4, r1, r2
 800dd70:	d902      	bls.n	800dd78 <memmove+0x10>
 800dd72:	4284      	cmp	r4, r0
 800dd74:	4623      	mov	r3, r4
 800dd76:	d807      	bhi.n	800dd88 <memmove+0x20>
 800dd78:	1e43      	subs	r3, r0, #1
 800dd7a:	42a1      	cmp	r1, r4
 800dd7c:	d008      	beq.n	800dd90 <memmove+0x28>
 800dd7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd86:	e7f8      	b.n	800dd7a <memmove+0x12>
 800dd88:	4402      	add	r2, r0
 800dd8a:	4601      	mov	r1, r0
 800dd8c:	428a      	cmp	r2, r1
 800dd8e:	d100      	bne.n	800dd92 <memmove+0x2a>
 800dd90:	bd10      	pop	{r4, pc}
 800dd92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd9a:	e7f7      	b.n	800dd8c <memmove+0x24>

0800dd9c <memset>:
 800dd9c:	4402      	add	r2, r0
 800dd9e:	4603      	mov	r3, r0
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d100      	bne.n	800dda6 <memset+0xa>
 800dda4:	4770      	bx	lr
 800dda6:	f803 1b01 	strb.w	r1, [r3], #1
 800ddaa:	e7f9      	b.n	800dda0 <memset+0x4>

0800ddac <strcat>:
 800ddac:	b510      	push	{r4, lr}
 800ddae:	4602      	mov	r2, r0
 800ddb0:	7814      	ldrb	r4, [r2, #0]
 800ddb2:	4613      	mov	r3, r2
 800ddb4:	3201      	adds	r2, #1
 800ddb6:	2c00      	cmp	r4, #0
 800ddb8:	d1fa      	bne.n	800ddb0 <strcat+0x4>
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ddc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ddc4:	2a00      	cmp	r2, #0
 800ddc6:	d1f9      	bne.n	800ddbc <strcat+0x10>
 800ddc8:	bd10      	pop	{r4, pc}

0800ddca <strncat>:
 800ddca:	b530      	push	{r4, r5, lr}
 800ddcc:	4604      	mov	r4, r0
 800ddce:	7825      	ldrb	r5, [r4, #0]
 800ddd0:	4623      	mov	r3, r4
 800ddd2:	3401      	adds	r4, #1
 800ddd4:	2d00      	cmp	r5, #0
 800ddd6:	d1fa      	bne.n	800ddce <strncat+0x4>
 800ddd8:	3a01      	subs	r2, #1
 800ddda:	d304      	bcc.n	800dde6 <strncat+0x1c>
 800dddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dde0:	f803 4b01 	strb.w	r4, [r3], #1
 800dde4:	b904      	cbnz	r4, 800dde8 <strncat+0x1e>
 800dde6:	bd30      	pop	{r4, r5, pc}
 800dde8:	2a00      	cmp	r2, #0
 800ddea:	d1f5      	bne.n	800ddd8 <strncat+0xe>
 800ddec:	701a      	strb	r2, [r3, #0]
 800ddee:	e7f3      	b.n	800ddd8 <strncat+0xe>

0800ddf0 <strncpy>:
 800ddf0:	b510      	push	{r4, lr}
 800ddf2:	3901      	subs	r1, #1
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	b132      	cbz	r2, 800de06 <strncpy+0x16>
 800ddf8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ddfc:	f803 4b01 	strb.w	r4, [r3], #1
 800de00:	3a01      	subs	r2, #1
 800de02:	2c00      	cmp	r4, #0
 800de04:	d1f7      	bne.n	800ddf6 <strncpy+0x6>
 800de06:	441a      	add	r2, r3
 800de08:	2100      	movs	r1, #0
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d100      	bne.n	800de10 <strncpy+0x20>
 800de0e:	bd10      	pop	{r4, pc}
 800de10:	f803 1b01 	strb.w	r1, [r3], #1
 800de14:	e7f9      	b.n	800de0a <strncpy+0x1a>
	...

0800de18 <strtok>:
 800de18:	4b16      	ldr	r3, [pc, #88]	; (800de74 <strtok+0x5c>)
 800de1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de1c:	681e      	ldr	r6, [r3, #0]
 800de1e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800de20:	4605      	mov	r5, r0
 800de22:	b9fc      	cbnz	r4, 800de64 <strtok+0x4c>
 800de24:	2050      	movs	r0, #80	; 0x50
 800de26:	9101      	str	r1, [sp, #4]
 800de28:	f000 ffbc 	bl	800eda4 <malloc>
 800de2c:	9901      	ldr	r1, [sp, #4]
 800de2e:	6470      	str	r0, [r6, #68]	; 0x44
 800de30:	4602      	mov	r2, r0
 800de32:	b920      	cbnz	r0, 800de3e <strtok+0x26>
 800de34:	4b10      	ldr	r3, [pc, #64]	; (800de78 <strtok+0x60>)
 800de36:	4811      	ldr	r0, [pc, #68]	; (800de7c <strtok+0x64>)
 800de38:	215b      	movs	r1, #91	; 0x5b
 800de3a:	f000 f8cf 	bl	800dfdc <__assert_func>
 800de3e:	e9c0 4400 	strd	r4, r4, [r0]
 800de42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800de46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800de4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800de4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800de52:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800de56:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800de5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800de5e:	6184      	str	r4, [r0, #24]
 800de60:	7704      	strb	r4, [r0, #28]
 800de62:	6244      	str	r4, [r0, #36]	; 0x24
 800de64:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800de66:	2301      	movs	r3, #1
 800de68:	4628      	mov	r0, r5
 800de6a:	b002      	add	sp, #8
 800de6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de70:	f000 b806 	b.w	800de80 <__strtok_r>
 800de74:	200009d0 	.word	0x200009d0
 800de78:	08012459 	.word	0x08012459
 800de7c:	08012470 	.word	0x08012470

0800de80 <__strtok_r>:
 800de80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de82:	b908      	cbnz	r0, 800de88 <__strtok_r+0x8>
 800de84:	6810      	ldr	r0, [r2, #0]
 800de86:	b188      	cbz	r0, 800deac <__strtok_r+0x2c>
 800de88:	4604      	mov	r4, r0
 800de8a:	4620      	mov	r0, r4
 800de8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800de90:	460f      	mov	r7, r1
 800de92:	f817 6b01 	ldrb.w	r6, [r7], #1
 800de96:	b91e      	cbnz	r6, 800dea0 <__strtok_r+0x20>
 800de98:	b965      	cbnz	r5, 800deb4 <__strtok_r+0x34>
 800de9a:	6015      	str	r5, [r2, #0]
 800de9c:	4628      	mov	r0, r5
 800de9e:	e005      	b.n	800deac <__strtok_r+0x2c>
 800dea0:	42b5      	cmp	r5, r6
 800dea2:	d1f6      	bne.n	800de92 <__strtok_r+0x12>
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d1f0      	bne.n	800de8a <__strtok_r+0xa>
 800dea8:	6014      	str	r4, [r2, #0]
 800deaa:	7003      	strb	r3, [r0, #0]
 800deac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deae:	461c      	mov	r4, r3
 800deb0:	e00c      	b.n	800decc <__strtok_r+0x4c>
 800deb2:	b915      	cbnz	r5, 800deba <__strtok_r+0x3a>
 800deb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800deb8:	460e      	mov	r6, r1
 800deba:	f816 5b01 	ldrb.w	r5, [r6], #1
 800debe:	42ab      	cmp	r3, r5
 800dec0:	d1f7      	bne.n	800deb2 <__strtok_r+0x32>
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d0f3      	beq.n	800deae <__strtok_r+0x2e>
 800dec6:	2300      	movs	r3, #0
 800dec8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800decc:	6014      	str	r4, [r2, #0]
 800dece:	e7ed      	b.n	800deac <__strtok_r+0x2c>

0800ded0 <_localeconv_r>:
 800ded0:	4800      	ldr	r0, [pc, #0]	; (800ded4 <_localeconv_r+0x4>)
 800ded2:	4770      	bx	lr
 800ded4:	20000ac4 	.word	0x20000ac4

0800ded8 <_close_r>:
 800ded8:	b538      	push	{r3, r4, r5, lr}
 800deda:	4d06      	ldr	r5, [pc, #24]	; (800def4 <_close_r+0x1c>)
 800dedc:	2300      	movs	r3, #0
 800dede:	4604      	mov	r4, r0
 800dee0:	4608      	mov	r0, r1
 800dee2:	602b      	str	r3, [r5, #0]
 800dee4:	f7f6 f9ef 	bl	80042c6 <_close>
 800dee8:	1c43      	adds	r3, r0, #1
 800deea:	d102      	bne.n	800def2 <_close_r+0x1a>
 800deec:	682b      	ldr	r3, [r5, #0]
 800deee:	b103      	cbz	r3, 800def2 <_close_r+0x1a>
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	bd38      	pop	{r3, r4, r5, pc}
 800def4:	20019ffc 	.word	0x20019ffc

0800def8 <_lseek_r>:
 800def8:	b538      	push	{r3, r4, r5, lr}
 800defa:	4d07      	ldr	r5, [pc, #28]	; (800df18 <_lseek_r+0x20>)
 800defc:	4604      	mov	r4, r0
 800defe:	4608      	mov	r0, r1
 800df00:	4611      	mov	r1, r2
 800df02:	2200      	movs	r2, #0
 800df04:	602a      	str	r2, [r5, #0]
 800df06:	461a      	mov	r2, r3
 800df08:	f7f6 fa04 	bl	8004314 <_lseek>
 800df0c:	1c43      	adds	r3, r0, #1
 800df0e:	d102      	bne.n	800df16 <_lseek_r+0x1e>
 800df10:	682b      	ldr	r3, [r5, #0]
 800df12:	b103      	cbz	r3, 800df16 <_lseek_r+0x1e>
 800df14:	6023      	str	r3, [r4, #0]
 800df16:	bd38      	pop	{r3, r4, r5, pc}
 800df18:	20019ffc 	.word	0x20019ffc

0800df1c <_read_r>:
 800df1c:	b538      	push	{r3, r4, r5, lr}
 800df1e:	4d07      	ldr	r5, [pc, #28]	; (800df3c <_read_r+0x20>)
 800df20:	4604      	mov	r4, r0
 800df22:	4608      	mov	r0, r1
 800df24:	4611      	mov	r1, r2
 800df26:	2200      	movs	r2, #0
 800df28:	602a      	str	r2, [r5, #0]
 800df2a:	461a      	mov	r2, r3
 800df2c:	f7f6 f992 	bl	8004254 <_read>
 800df30:	1c43      	adds	r3, r0, #1
 800df32:	d102      	bne.n	800df3a <_read_r+0x1e>
 800df34:	682b      	ldr	r3, [r5, #0]
 800df36:	b103      	cbz	r3, 800df3a <_read_r+0x1e>
 800df38:	6023      	str	r3, [r4, #0]
 800df3a:	bd38      	pop	{r3, r4, r5, pc}
 800df3c:	20019ffc 	.word	0x20019ffc

0800df40 <_write_r>:
 800df40:	b538      	push	{r3, r4, r5, lr}
 800df42:	4d07      	ldr	r5, [pc, #28]	; (800df60 <_write_r+0x20>)
 800df44:	4604      	mov	r4, r0
 800df46:	4608      	mov	r0, r1
 800df48:	4611      	mov	r1, r2
 800df4a:	2200      	movs	r2, #0
 800df4c:	602a      	str	r2, [r5, #0]
 800df4e:	461a      	mov	r2, r3
 800df50:	f7f6 f99d 	bl	800428e <_write>
 800df54:	1c43      	adds	r3, r0, #1
 800df56:	d102      	bne.n	800df5e <_write_r+0x1e>
 800df58:	682b      	ldr	r3, [r5, #0]
 800df5a:	b103      	cbz	r3, 800df5e <_write_r+0x1e>
 800df5c:	6023      	str	r3, [r4, #0]
 800df5e:	bd38      	pop	{r3, r4, r5, pc}
 800df60:	20019ffc 	.word	0x20019ffc

0800df64 <__errno>:
 800df64:	4b01      	ldr	r3, [pc, #4]	; (800df6c <__errno+0x8>)
 800df66:	6818      	ldr	r0, [r3, #0]
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	200009d0 	.word	0x200009d0

0800df70 <__libc_init_array>:
 800df70:	b570      	push	{r4, r5, r6, lr}
 800df72:	4d0d      	ldr	r5, [pc, #52]	; (800dfa8 <__libc_init_array+0x38>)
 800df74:	4c0d      	ldr	r4, [pc, #52]	; (800dfac <__libc_init_array+0x3c>)
 800df76:	1b64      	subs	r4, r4, r5
 800df78:	10a4      	asrs	r4, r4, #2
 800df7a:	2600      	movs	r6, #0
 800df7c:	42a6      	cmp	r6, r4
 800df7e:	d109      	bne.n	800df94 <__libc_init_array+0x24>
 800df80:	4d0b      	ldr	r5, [pc, #44]	; (800dfb0 <__libc_init_array+0x40>)
 800df82:	4c0c      	ldr	r4, [pc, #48]	; (800dfb4 <__libc_init_array+0x44>)
 800df84:	f001 ffe4 	bl	800ff50 <_init>
 800df88:	1b64      	subs	r4, r4, r5
 800df8a:	10a4      	asrs	r4, r4, #2
 800df8c:	2600      	movs	r6, #0
 800df8e:	42a6      	cmp	r6, r4
 800df90:	d105      	bne.n	800df9e <__libc_init_array+0x2e>
 800df92:	bd70      	pop	{r4, r5, r6, pc}
 800df94:	f855 3b04 	ldr.w	r3, [r5], #4
 800df98:	4798      	blx	r3
 800df9a:	3601      	adds	r6, #1
 800df9c:	e7ee      	b.n	800df7c <__libc_init_array+0xc>
 800df9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfa2:	4798      	blx	r3
 800dfa4:	3601      	adds	r6, #1
 800dfa6:	e7f2      	b.n	800df8e <__libc_init_array+0x1e>
 800dfa8:	080126f8 	.word	0x080126f8
 800dfac:	080126f8 	.word	0x080126f8
 800dfb0:	080126f8 	.word	0x080126f8
 800dfb4:	080126fc 	.word	0x080126fc

0800dfb8 <__retarget_lock_init_recursive>:
 800dfb8:	4770      	bx	lr

0800dfba <__retarget_lock_acquire_recursive>:
 800dfba:	4770      	bx	lr

0800dfbc <__retarget_lock_release_recursive>:
 800dfbc:	4770      	bx	lr

0800dfbe <memcpy>:
 800dfbe:	440a      	add	r2, r1
 800dfc0:	4291      	cmp	r1, r2
 800dfc2:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfc6:	d100      	bne.n	800dfca <memcpy+0xc>
 800dfc8:	4770      	bx	lr
 800dfca:	b510      	push	{r4, lr}
 800dfcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfd4:	4291      	cmp	r1, r2
 800dfd6:	d1f9      	bne.n	800dfcc <memcpy+0xe>
 800dfd8:	bd10      	pop	{r4, pc}
	...

0800dfdc <__assert_func>:
 800dfdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfde:	4614      	mov	r4, r2
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	4b09      	ldr	r3, [pc, #36]	; (800e008 <__assert_func+0x2c>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4605      	mov	r5, r0
 800dfe8:	68d8      	ldr	r0, [r3, #12]
 800dfea:	b14c      	cbz	r4, 800e000 <__assert_func+0x24>
 800dfec:	4b07      	ldr	r3, [pc, #28]	; (800e00c <__assert_func+0x30>)
 800dfee:	9100      	str	r1, [sp, #0]
 800dff0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dff4:	4906      	ldr	r1, [pc, #24]	; (800e010 <__assert_func+0x34>)
 800dff6:	462b      	mov	r3, r5
 800dff8:	f001 fd0a 	bl	800fa10 <fiprintf>
 800dffc:	f001 fdae 	bl	800fb5c <abort>
 800e000:	4b04      	ldr	r3, [pc, #16]	; (800e014 <__assert_func+0x38>)
 800e002:	461c      	mov	r4, r3
 800e004:	e7f3      	b.n	800dfee <__assert_func+0x12>
 800e006:	bf00      	nop
 800e008:	200009d0 	.word	0x200009d0
 800e00c:	080124ca 	.word	0x080124ca
 800e010:	080124d7 	.word	0x080124d7
 800e014:	08012505 	.word	0x08012505

0800e018 <quorem>:
 800e018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e01c:	6903      	ldr	r3, [r0, #16]
 800e01e:	690c      	ldr	r4, [r1, #16]
 800e020:	42a3      	cmp	r3, r4
 800e022:	4607      	mov	r7, r0
 800e024:	db7e      	blt.n	800e124 <quorem+0x10c>
 800e026:	3c01      	subs	r4, #1
 800e028:	f101 0814 	add.w	r8, r1, #20
 800e02c:	f100 0514 	add.w	r5, r0, #20
 800e030:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e034:	9301      	str	r3, [sp, #4]
 800e036:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e03a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e03e:	3301      	adds	r3, #1
 800e040:	429a      	cmp	r2, r3
 800e042:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e046:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e04a:	fbb2 f6f3 	udiv	r6, r2, r3
 800e04e:	d331      	bcc.n	800e0b4 <quorem+0x9c>
 800e050:	f04f 0e00 	mov.w	lr, #0
 800e054:	4640      	mov	r0, r8
 800e056:	46ac      	mov	ip, r5
 800e058:	46f2      	mov	sl, lr
 800e05a:	f850 2b04 	ldr.w	r2, [r0], #4
 800e05e:	b293      	uxth	r3, r2
 800e060:	fb06 e303 	mla	r3, r6, r3, lr
 800e064:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e068:	0c1a      	lsrs	r2, r3, #16
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	ebaa 0303 	sub.w	r3, sl, r3
 800e070:	f8dc a000 	ldr.w	sl, [ip]
 800e074:	fa13 f38a 	uxtah	r3, r3, sl
 800e078:	fb06 220e 	mla	r2, r6, lr, r2
 800e07c:	9300      	str	r3, [sp, #0]
 800e07e:	9b00      	ldr	r3, [sp, #0]
 800e080:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e084:	b292      	uxth	r2, r2
 800e086:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e08a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e08e:	f8bd 3000 	ldrh.w	r3, [sp]
 800e092:	4581      	cmp	r9, r0
 800e094:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e098:	f84c 3b04 	str.w	r3, [ip], #4
 800e09c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e0a0:	d2db      	bcs.n	800e05a <quorem+0x42>
 800e0a2:	f855 300b 	ldr.w	r3, [r5, fp]
 800e0a6:	b92b      	cbnz	r3, 800e0b4 <quorem+0x9c>
 800e0a8:	9b01      	ldr	r3, [sp, #4]
 800e0aa:	3b04      	subs	r3, #4
 800e0ac:	429d      	cmp	r5, r3
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	d32c      	bcc.n	800e10c <quorem+0xf4>
 800e0b2:	613c      	str	r4, [r7, #16]
 800e0b4:	4638      	mov	r0, r7
 800e0b6:	f001 f9a5 	bl	800f404 <__mcmp>
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	db22      	blt.n	800e104 <quorem+0xec>
 800e0be:	3601      	adds	r6, #1
 800e0c0:	4629      	mov	r1, r5
 800e0c2:	2000      	movs	r0, #0
 800e0c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800e0c8:	f8d1 c000 	ldr.w	ip, [r1]
 800e0cc:	b293      	uxth	r3, r2
 800e0ce:	1ac3      	subs	r3, r0, r3
 800e0d0:	0c12      	lsrs	r2, r2, #16
 800e0d2:	fa13 f38c 	uxtah	r3, r3, ip
 800e0d6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e0da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0e4:	45c1      	cmp	r9, r8
 800e0e6:	f841 3b04 	str.w	r3, [r1], #4
 800e0ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e0ee:	d2e9      	bcs.n	800e0c4 <quorem+0xac>
 800e0f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0f8:	b922      	cbnz	r2, 800e104 <quorem+0xec>
 800e0fa:	3b04      	subs	r3, #4
 800e0fc:	429d      	cmp	r5, r3
 800e0fe:	461a      	mov	r2, r3
 800e100:	d30a      	bcc.n	800e118 <quorem+0x100>
 800e102:	613c      	str	r4, [r7, #16]
 800e104:	4630      	mov	r0, r6
 800e106:	b003      	add	sp, #12
 800e108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e10c:	6812      	ldr	r2, [r2, #0]
 800e10e:	3b04      	subs	r3, #4
 800e110:	2a00      	cmp	r2, #0
 800e112:	d1ce      	bne.n	800e0b2 <quorem+0x9a>
 800e114:	3c01      	subs	r4, #1
 800e116:	e7c9      	b.n	800e0ac <quorem+0x94>
 800e118:	6812      	ldr	r2, [r2, #0]
 800e11a:	3b04      	subs	r3, #4
 800e11c:	2a00      	cmp	r2, #0
 800e11e:	d1f0      	bne.n	800e102 <quorem+0xea>
 800e120:	3c01      	subs	r4, #1
 800e122:	e7eb      	b.n	800e0fc <quorem+0xe4>
 800e124:	2000      	movs	r0, #0
 800e126:	e7ee      	b.n	800e106 <quorem+0xee>

0800e128 <_dtoa_r>:
 800e128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e12c:	ed2d 8b04 	vpush	{d8-d9}
 800e130:	69c5      	ldr	r5, [r0, #28]
 800e132:	b093      	sub	sp, #76	; 0x4c
 800e134:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e138:	ec57 6b10 	vmov	r6, r7, d0
 800e13c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e140:	9107      	str	r1, [sp, #28]
 800e142:	4604      	mov	r4, r0
 800e144:	920a      	str	r2, [sp, #40]	; 0x28
 800e146:	930d      	str	r3, [sp, #52]	; 0x34
 800e148:	b975      	cbnz	r5, 800e168 <_dtoa_r+0x40>
 800e14a:	2010      	movs	r0, #16
 800e14c:	f000 fe2a 	bl	800eda4 <malloc>
 800e150:	4602      	mov	r2, r0
 800e152:	61e0      	str	r0, [r4, #28]
 800e154:	b920      	cbnz	r0, 800e160 <_dtoa_r+0x38>
 800e156:	4bae      	ldr	r3, [pc, #696]	; (800e410 <_dtoa_r+0x2e8>)
 800e158:	21ef      	movs	r1, #239	; 0xef
 800e15a:	48ae      	ldr	r0, [pc, #696]	; (800e414 <_dtoa_r+0x2ec>)
 800e15c:	f7ff ff3e 	bl	800dfdc <__assert_func>
 800e160:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e164:	6005      	str	r5, [r0, #0]
 800e166:	60c5      	str	r5, [r0, #12]
 800e168:	69e3      	ldr	r3, [r4, #28]
 800e16a:	6819      	ldr	r1, [r3, #0]
 800e16c:	b151      	cbz	r1, 800e184 <_dtoa_r+0x5c>
 800e16e:	685a      	ldr	r2, [r3, #4]
 800e170:	604a      	str	r2, [r1, #4]
 800e172:	2301      	movs	r3, #1
 800e174:	4093      	lsls	r3, r2
 800e176:	608b      	str	r3, [r1, #8]
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 ff07 	bl	800ef8c <_Bfree>
 800e17e:	69e3      	ldr	r3, [r4, #28]
 800e180:	2200      	movs	r2, #0
 800e182:	601a      	str	r2, [r3, #0]
 800e184:	1e3b      	subs	r3, r7, #0
 800e186:	bfbb      	ittet	lt
 800e188:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e18c:	9303      	strlt	r3, [sp, #12]
 800e18e:	2300      	movge	r3, #0
 800e190:	2201      	movlt	r2, #1
 800e192:	bfac      	ite	ge
 800e194:	f8c8 3000 	strge.w	r3, [r8]
 800e198:	f8c8 2000 	strlt.w	r2, [r8]
 800e19c:	4b9e      	ldr	r3, [pc, #632]	; (800e418 <_dtoa_r+0x2f0>)
 800e19e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e1a2:	ea33 0308 	bics.w	r3, r3, r8
 800e1a6:	d11b      	bne.n	800e1e0 <_dtoa_r+0xb8>
 800e1a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e1aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800e1ae:	6013      	str	r3, [r2, #0]
 800e1b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e1b4:	4333      	orrs	r3, r6
 800e1b6:	f000 8593 	beq.w	800ece0 <_dtoa_r+0xbb8>
 800e1ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1bc:	b963      	cbnz	r3, 800e1d8 <_dtoa_r+0xb0>
 800e1be:	4b97      	ldr	r3, [pc, #604]	; (800e41c <_dtoa_r+0x2f4>)
 800e1c0:	e027      	b.n	800e212 <_dtoa_r+0xea>
 800e1c2:	4b97      	ldr	r3, [pc, #604]	; (800e420 <_dtoa_r+0x2f8>)
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	3308      	adds	r3, #8
 800e1c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e1ca:	6013      	str	r3, [r2, #0]
 800e1cc:	9800      	ldr	r0, [sp, #0]
 800e1ce:	b013      	add	sp, #76	; 0x4c
 800e1d0:	ecbd 8b04 	vpop	{d8-d9}
 800e1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d8:	4b90      	ldr	r3, [pc, #576]	; (800e41c <_dtoa_r+0x2f4>)
 800e1da:	9300      	str	r3, [sp, #0]
 800e1dc:	3303      	adds	r3, #3
 800e1de:	e7f3      	b.n	800e1c8 <_dtoa_r+0xa0>
 800e1e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	ec51 0b17 	vmov	r0, r1, d7
 800e1ea:	eeb0 8a47 	vmov.f32	s16, s14
 800e1ee:	eef0 8a67 	vmov.f32	s17, s15
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f7f2 fc80 	bl	8000af8 <__aeabi_dcmpeq>
 800e1f8:	4681      	mov	r9, r0
 800e1fa:	b160      	cbz	r0, 800e216 <_dtoa_r+0xee>
 800e1fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e1fe:	2301      	movs	r3, #1
 800e200:	6013      	str	r3, [r2, #0]
 800e202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e204:	2b00      	cmp	r3, #0
 800e206:	f000 8568 	beq.w	800ecda <_dtoa_r+0xbb2>
 800e20a:	4b86      	ldr	r3, [pc, #536]	; (800e424 <_dtoa_r+0x2fc>)
 800e20c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e20e:	6013      	str	r3, [r2, #0]
 800e210:	3b01      	subs	r3, #1
 800e212:	9300      	str	r3, [sp, #0]
 800e214:	e7da      	b.n	800e1cc <_dtoa_r+0xa4>
 800e216:	aa10      	add	r2, sp, #64	; 0x40
 800e218:	a911      	add	r1, sp, #68	; 0x44
 800e21a:	4620      	mov	r0, r4
 800e21c:	eeb0 0a48 	vmov.f32	s0, s16
 800e220:	eef0 0a68 	vmov.f32	s1, s17
 800e224:	f001 f994 	bl	800f550 <__d2b>
 800e228:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e22c:	4682      	mov	sl, r0
 800e22e:	2d00      	cmp	r5, #0
 800e230:	d07f      	beq.n	800e332 <_dtoa_r+0x20a>
 800e232:	ee18 3a90 	vmov	r3, s17
 800e236:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e23a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e23e:	ec51 0b18 	vmov	r0, r1, d8
 800e242:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e246:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e24a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e24e:	4619      	mov	r1, r3
 800e250:	2200      	movs	r2, #0
 800e252:	4b75      	ldr	r3, [pc, #468]	; (800e428 <_dtoa_r+0x300>)
 800e254:	f7f2 f830 	bl	80002b8 <__aeabi_dsub>
 800e258:	a367      	add	r3, pc, #412	; (adr r3, 800e3f8 <_dtoa_r+0x2d0>)
 800e25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25e:	f7f2 f9e3 	bl	8000628 <__aeabi_dmul>
 800e262:	a367      	add	r3, pc, #412	; (adr r3, 800e400 <_dtoa_r+0x2d8>)
 800e264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e268:	f7f2 f828 	bl	80002bc <__adddf3>
 800e26c:	4606      	mov	r6, r0
 800e26e:	4628      	mov	r0, r5
 800e270:	460f      	mov	r7, r1
 800e272:	f7f2 f96f 	bl	8000554 <__aeabi_i2d>
 800e276:	a364      	add	r3, pc, #400	; (adr r3, 800e408 <_dtoa_r+0x2e0>)
 800e278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27c:	f7f2 f9d4 	bl	8000628 <__aeabi_dmul>
 800e280:	4602      	mov	r2, r0
 800e282:	460b      	mov	r3, r1
 800e284:	4630      	mov	r0, r6
 800e286:	4639      	mov	r1, r7
 800e288:	f7f2 f818 	bl	80002bc <__adddf3>
 800e28c:	4606      	mov	r6, r0
 800e28e:	460f      	mov	r7, r1
 800e290:	f7f2 fc7a 	bl	8000b88 <__aeabi_d2iz>
 800e294:	2200      	movs	r2, #0
 800e296:	4683      	mov	fp, r0
 800e298:	2300      	movs	r3, #0
 800e29a:	4630      	mov	r0, r6
 800e29c:	4639      	mov	r1, r7
 800e29e:	f7f2 fc35 	bl	8000b0c <__aeabi_dcmplt>
 800e2a2:	b148      	cbz	r0, 800e2b8 <_dtoa_r+0x190>
 800e2a4:	4658      	mov	r0, fp
 800e2a6:	f7f2 f955 	bl	8000554 <__aeabi_i2d>
 800e2aa:	4632      	mov	r2, r6
 800e2ac:	463b      	mov	r3, r7
 800e2ae:	f7f2 fc23 	bl	8000af8 <__aeabi_dcmpeq>
 800e2b2:	b908      	cbnz	r0, 800e2b8 <_dtoa_r+0x190>
 800e2b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e2b8:	f1bb 0f16 	cmp.w	fp, #22
 800e2bc:	d857      	bhi.n	800e36e <_dtoa_r+0x246>
 800e2be:	4b5b      	ldr	r3, [pc, #364]	; (800e42c <_dtoa_r+0x304>)
 800e2c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c8:	ec51 0b18 	vmov	r0, r1, d8
 800e2cc:	f7f2 fc1e 	bl	8000b0c <__aeabi_dcmplt>
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	d04e      	beq.n	800e372 <_dtoa_r+0x24a>
 800e2d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e2d8:	2300      	movs	r3, #0
 800e2da:	930c      	str	r3, [sp, #48]	; 0x30
 800e2dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2de:	1b5b      	subs	r3, r3, r5
 800e2e0:	1e5a      	subs	r2, r3, #1
 800e2e2:	bf45      	ittet	mi
 800e2e4:	f1c3 0301 	rsbmi	r3, r3, #1
 800e2e8:	9305      	strmi	r3, [sp, #20]
 800e2ea:	2300      	movpl	r3, #0
 800e2ec:	2300      	movmi	r3, #0
 800e2ee:	9206      	str	r2, [sp, #24]
 800e2f0:	bf54      	ite	pl
 800e2f2:	9305      	strpl	r3, [sp, #20]
 800e2f4:	9306      	strmi	r3, [sp, #24]
 800e2f6:	f1bb 0f00 	cmp.w	fp, #0
 800e2fa:	db3c      	blt.n	800e376 <_dtoa_r+0x24e>
 800e2fc:	9b06      	ldr	r3, [sp, #24]
 800e2fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e302:	445b      	add	r3, fp
 800e304:	9306      	str	r3, [sp, #24]
 800e306:	2300      	movs	r3, #0
 800e308:	9308      	str	r3, [sp, #32]
 800e30a:	9b07      	ldr	r3, [sp, #28]
 800e30c:	2b09      	cmp	r3, #9
 800e30e:	d868      	bhi.n	800e3e2 <_dtoa_r+0x2ba>
 800e310:	2b05      	cmp	r3, #5
 800e312:	bfc4      	itt	gt
 800e314:	3b04      	subgt	r3, #4
 800e316:	9307      	strgt	r3, [sp, #28]
 800e318:	9b07      	ldr	r3, [sp, #28]
 800e31a:	f1a3 0302 	sub.w	r3, r3, #2
 800e31e:	bfcc      	ite	gt
 800e320:	2500      	movgt	r5, #0
 800e322:	2501      	movle	r5, #1
 800e324:	2b03      	cmp	r3, #3
 800e326:	f200 8085 	bhi.w	800e434 <_dtoa_r+0x30c>
 800e32a:	e8df f003 	tbb	[pc, r3]
 800e32e:	3b2e      	.short	0x3b2e
 800e330:	5839      	.short	0x5839
 800e332:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e336:	441d      	add	r5, r3
 800e338:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e33c:	2b20      	cmp	r3, #32
 800e33e:	bfc1      	itttt	gt
 800e340:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e344:	fa08 f803 	lslgt.w	r8, r8, r3
 800e348:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e34c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e350:	bfd6      	itet	le
 800e352:	f1c3 0320 	rsble	r3, r3, #32
 800e356:	ea48 0003 	orrgt.w	r0, r8, r3
 800e35a:	fa06 f003 	lslle.w	r0, r6, r3
 800e35e:	f7f2 f8e9 	bl	8000534 <__aeabi_ui2d>
 800e362:	2201      	movs	r2, #1
 800e364:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e368:	3d01      	subs	r5, #1
 800e36a:	920e      	str	r2, [sp, #56]	; 0x38
 800e36c:	e76f      	b.n	800e24e <_dtoa_r+0x126>
 800e36e:	2301      	movs	r3, #1
 800e370:	e7b3      	b.n	800e2da <_dtoa_r+0x1b2>
 800e372:	900c      	str	r0, [sp, #48]	; 0x30
 800e374:	e7b2      	b.n	800e2dc <_dtoa_r+0x1b4>
 800e376:	9b05      	ldr	r3, [sp, #20]
 800e378:	eba3 030b 	sub.w	r3, r3, fp
 800e37c:	9305      	str	r3, [sp, #20]
 800e37e:	f1cb 0300 	rsb	r3, fp, #0
 800e382:	9308      	str	r3, [sp, #32]
 800e384:	2300      	movs	r3, #0
 800e386:	930b      	str	r3, [sp, #44]	; 0x2c
 800e388:	e7bf      	b.n	800e30a <_dtoa_r+0x1e2>
 800e38a:	2300      	movs	r3, #0
 800e38c:	9309      	str	r3, [sp, #36]	; 0x24
 800e38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e390:	2b00      	cmp	r3, #0
 800e392:	dc52      	bgt.n	800e43a <_dtoa_r+0x312>
 800e394:	2301      	movs	r3, #1
 800e396:	9301      	str	r3, [sp, #4]
 800e398:	9304      	str	r3, [sp, #16]
 800e39a:	461a      	mov	r2, r3
 800e39c:	920a      	str	r2, [sp, #40]	; 0x28
 800e39e:	e00b      	b.n	800e3b8 <_dtoa_r+0x290>
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	e7f3      	b.n	800e38c <_dtoa_r+0x264>
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3aa:	445b      	add	r3, fp
 800e3ac:	9301      	str	r3, [sp, #4]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	9304      	str	r3, [sp, #16]
 800e3b4:	bfb8      	it	lt
 800e3b6:	2301      	movlt	r3, #1
 800e3b8:	69e0      	ldr	r0, [r4, #28]
 800e3ba:	2100      	movs	r1, #0
 800e3bc:	2204      	movs	r2, #4
 800e3be:	f102 0614 	add.w	r6, r2, #20
 800e3c2:	429e      	cmp	r6, r3
 800e3c4:	d93d      	bls.n	800e442 <_dtoa_r+0x31a>
 800e3c6:	6041      	str	r1, [r0, #4]
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	f000 fd9f 	bl	800ef0c <_Balloc>
 800e3ce:	9000      	str	r0, [sp, #0]
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	d139      	bne.n	800e448 <_dtoa_r+0x320>
 800e3d4:	4b16      	ldr	r3, [pc, #88]	; (800e430 <_dtoa_r+0x308>)
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	f240 11af 	movw	r1, #431	; 0x1af
 800e3dc:	e6bd      	b.n	800e15a <_dtoa_r+0x32>
 800e3de:	2301      	movs	r3, #1
 800e3e0:	e7e1      	b.n	800e3a6 <_dtoa_r+0x27e>
 800e3e2:	2501      	movs	r5, #1
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	9307      	str	r3, [sp, #28]
 800e3e8:	9509      	str	r5, [sp, #36]	; 0x24
 800e3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ee:	9301      	str	r3, [sp, #4]
 800e3f0:	9304      	str	r3, [sp, #16]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	2312      	movs	r3, #18
 800e3f6:	e7d1      	b.n	800e39c <_dtoa_r+0x274>
 800e3f8:	636f4361 	.word	0x636f4361
 800e3fc:	3fd287a7 	.word	0x3fd287a7
 800e400:	8b60c8b3 	.word	0x8b60c8b3
 800e404:	3fc68a28 	.word	0x3fc68a28
 800e408:	509f79fb 	.word	0x509f79fb
 800e40c:	3fd34413 	.word	0x3fd34413
 800e410:	08012459 	.word	0x08012459
 800e414:	08012513 	.word	0x08012513
 800e418:	7ff00000 	.word	0x7ff00000
 800e41c:	0801250f 	.word	0x0801250f
 800e420:	08012506 	.word	0x08012506
 800e424:	08012436 	.word	0x08012436
 800e428:	3ff80000 	.word	0x3ff80000
 800e42c:	08012600 	.word	0x08012600
 800e430:	0801256b 	.word	0x0801256b
 800e434:	2301      	movs	r3, #1
 800e436:	9309      	str	r3, [sp, #36]	; 0x24
 800e438:	e7d7      	b.n	800e3ea <_dtoa_r+0x2c2>
 800e43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e43c:	9301      	str	r3, [sp, #4]
 800e43e:	9304      	str	r3, [sp, #16]
 800e440:	e7ba      	b.n	800e3b8 <_dtoa_r+0x290>
 800e442:	3101      	adds	r1, #1
 800e444:	0052      	lsls	r2, r2, #1
 800e446:	e7ba      	b.n	800e3be <_dtoa_r+0x296>
 800e448:	69e3      	ldr	r3, [r4, #28]
 800e44a:	9a00      	ldr	r2, [sp, #0]
 800e44c:	601a      	str	r2, [r3, #0]
 800e44e:	9b04      	ldr	r3, [sp, #16]
 800e450:	2b0e      	cmp	r3, #14
 800e452:	f200 80a8 	bhi.w	800e5a6 <_dtoa_r+0x47e>
 800e456:	2d00      	cmp	r5, #0
 800e458:	f000 80a5 	beq.w	800e5a6 <_dtoa_r+0x47e>
 800e45c:	f1bb 0f00 	cmp.w	fp, #0
 800e460:	dd38      	ble.n	800e4d4 <_dtoa_r+0x3ac>
 800e462:	4bc0      	ldr	r3, [pc, #768]	; (800e764 <_dtoa_r+0x63c>)
 800e464:	f00b 020f 	and.w	r2, fp, #15
 800e468:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e46c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e470:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e474:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e478:	d019      	beq.n	800e4ae <_dtoa_r+0x386>
 800e47a:	4bbb      	ldr	r3, [pc, #748]	; (800e768 <_dtoa_r+0x640>)
 800e47c:	ec51 0b18 	vmov	r0, r1, d8
 800e480:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e484:	f7f2 f9fa 	bl	800087c <__aeabi_ddiv>
 800e488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e48c:	f008 080f 	and.w	r8, r8, #15
 800e490:	2503      	movs	r5, #3
 800e492:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e768 <_dtoa_r+0x640>
 800e496:	f1b8 0f00 	cmp.w	r8, #0
 800e49a:	d10a      	bne.n	800e4b2 <_dtoa_r+0x38a>
 800e49c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4a0:	4632      	mov	r2, r6
 800e4a2:	463b      	mov	r3, r7
 800e4a4:	f7f2 f9ea 	bl	800087c <__aeabi_ddiv>
 800e4a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4ac:	e02b      	b.n	800e506 <_dtoa_r+0x3de>
 800e4ae:	2502      	movs	r5, #2
 800e4b0:	e7ef      	b.n	800e492 <_dtoa_r+0x36a>
 800e4b2:	f018 0f01 	tst.w	r8, #1
 800e4b6:	d008      	beq.n	800e4ca <_dtoa_r+0x3a2>
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	4639      	mov	r1, r7
 800e4bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e4c0:	f7f2 f8b2 	bl	8000628 <__aeabi_dmul>
 800e4c4:	3501      	adds	r5, #1
 800e4c6:	4606      	mov	r6, r0
 800e4c8:	460f      	mov	r7, r1
 800e4ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e4ce:	f109 0908 	add.w	r9, r9, #8
 800e4d2:	e7e0      	b.n	800e496 <_dtoa_r+0x36e>
 800e4d4:	f000 809f 	beq.w	800e616 <_dtoa_r+0x4ee>
 800e4d8:	f1cb 0600 	rsb	r6, fp, #0
 800e4dc:	4ba1      	ldr	r3, [pc, #644]	; (800e764 <_dtoa_r+0x63c>)
 800e4de:	4fa2      	ldr	r7, [pc, #648]	; (800e768 <_dtoa_r+0x640>)
 800e4e0:	f006 020f 	and.w	r2, r6, #15
 800e4e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ec:	ec51 0b18 	vmov	r0, r1, d8
 800e4f0:	f7f2 f89a 	bl	8000628 <__aeabi_dmul>
 800e4f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4f8:	1136      	asrs	r6, r6, #4
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	2502      	movs	r5, #2
 800e4fe:	2e00      	cmp	r6, #0
 800e500:	d17e      	bne.n	800e600 <_dtoa_r+0x4d8>
 800e502:	2b00      	cmp	r3, #0
 800e504:	d1d0      	bne.n	800e4a8 <_dtoa_r+0x380>
 800e506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e508:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	f000 8084 	beq.w	800e61a <_dtoa_r+0x4f2>
 800e512:	4b96      	ldr	r3, [pc, #600]	; (800e76c <_dtoa_r+0x644>)
 800e514:	2200      	movs	r2, #0
 800e516:	4640      	mov	r0, r8
 800e518:	4649      	mov	r1, r9
 800e51a:	f7f2 faf7 	bl	8000b0c <__aeabi_dcmplt>
 800e51e:	2800      	cmp	r0, #0
 800e520:	d07b      	beq.n	800e61a <_dtoa_r+0x4f2>
 800e522:	9b04      	ldr	r3, [sp, #16]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d078      	beq.n	800e61a <_dtoa_r+0x4f2>
 800e528:	9b01      	ldr	r3, [sp, #4]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	dd39      	ble.n	800e5a2 <_dtoa_r+0x47a>
 800e52e:	4b90      	ldr	r3, [pc, #576]	; (800e770 <_dtoa_r+0x648>)
 800e530:	2200      	movs	r2, #0
 800e532:	4640      	mov	r0, r8
 800e534:	4649      	mov	r1, r9
 800e536:	f7f2 f877 	bl	8000628 <__aeabi_dmul>
 800e53a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e53e:	9e01      	ldr	r6, [sp, #4]
 800e540:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e544:	3501      	adds	r5, #1
 800e546:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e54a:	4628      	mov	r0, r5
 800e54c:	f7f2 f802 	bl	8000554 <__aeabi_i2d>
 800e550:	4642      	mov	r2, r8
 800e552:	464b      	mov	r3, r9
 800e554:	f7f2 f868 	bl	8000628 <__aeabi_dmul>
 800e558:	4b86      	ldr	r3, [pc, #536]	; (800e774 <_dtoa_r+0x64c>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	f7f1 feae 	bl	80002bc <__adddf3>
 800e560:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e568:	9303      	str	r3, [sp, #12]
 800e56a:	2e00      	cmp	r6, #0
 800e56c:	d158      	bne.n	800e620 <_dtoa_r+0x4f8>
 800e56e:	4b82      	ldr	r3, [pc, #520]	; (800e778 <_dtoa_r+0x650>)
 800e570:	2200      	movs	r2, #0
 800e572:	4640      	mov	r0, r8
 800e574:	4649      	mov	r1, r9
 800e576:	f7f1 fe9f 	bl	80002b8 <__aeabi_dsub>
 800e57a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e57e:	4680      	mov	r8, r0
 800e580:	4689      	mov	r9, r1
 800e582:	f7f2 fae1 	bl	8000b48 <__aeabi_dcmpgt>
 800e586:	2800      	cmp	r0, #0
 800e588:	f040 8296 	bne.w	800eab8 <_dtoa_r+0x990>
 800e58c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e590:	4640      	mov	r0, r8
 800e592:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e596:	4649      	mov	r1, r9
 800e598:	f7f2 fab8 	bl	8000b0c <__aeabi_dcmplt>
 800e59c:	2800      	cmp	r0, #0
 800e59e:	f040 8289 	bne.w	800eab4 <_dtoa_r+0x98c>
 800e5a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e5a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	f2c0 814e 	blt.w	800e84a <_dtoa_r+0x722>
 800e5ae:	f1bb 0f0e 	cmp.w	fp, #14
 800e5b2:	f300 814a 	bgt.w	800e84a <_dtoa_r+0x722>
 800e5b6:	4b6b      	ldr	r3, [pc, #428]	; (800e764 <_dtoa_r+0x63c>)
 800e5b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e5bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e5c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f280 80dc 	bge.w	800e780 <_dtoa_r+0x658>
 800e5c8:	9b04      	ldr	r3, [sp, #16]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	f300 80d8 	bgt.w	800e780 <_dtoa_r+0x658>
 800e5d0:	f040 826f 	bne.w	800eab2 <_dtoa_r+0x98a>
 800e5d4:	4b68      	ldr	r3, [pc, #416]	; (800e778 <_dtoa_r+0x650>)
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	4640      	mov	r0, r8
 800e5da:	4649      	mov	r1, r9
 800e5dc:	f7f2 f824 	bl	8000628 <__aeabi_dmul>
 800e5e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5e4:	f7f2 faa6 	bl	8000b34 <__aeabi_dcmpge>
 800e5e8:	9e04      	ldr	r6, [sp, #16]
 800e5ea:	4637      	mov	r7, r6
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	f040 8245 	bne.w	800ea7c <_dtoa_r+0x954>
 800e5f2:	9d00      	ldr	r5, [sp, #0]
 800e5f4:	2331      	movs	r3, #49	; 0x31
 800e5f6:	f805 3b01 	strb.w	r3, [r5], #1
 800e5fa:	f10b 0b01 	add.w	fp, fp, #1
 800e5fe:	e241      	b.n	800ea84 <_dtoa_r+0x95c>
 800e600:	07f2      	lsls	r2, r6, #31
 800e602:	d505      	bpl.n	800e610 <_dtoa_r+0x4e8>
 800e604:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e608:	f7f2 f80e 	bl	8000628 <__aeabi_dmul>
 800e60c:	3501      	adds	r5, #1
 800e60e:	2301      	movs	r3, #1
 800e610:	1076      	asrs	r6, r6, #1
 800e612:	3708      	adds	r7, #8
 800e614:	e773      	b.n	800e4fe <_dtoa_r+0x3d6>
 800e616:	2502      	movs	r5, #2
 800e618:	e775      	b.n	800e506 <_dtoa_r+0x3de>
 800e61a:	9e04      	ldr	r6, [sp, #16]
 800e61c:	465f      	mov	r7, fp
 800e61e:	e792      	b.n	800e546 <_dtoa_r+0x41e>
 800e620:	9900      	ldr	r1, [sp, #0]
 800e622:	4b50      	ldr	r3, [pc, #320]	; (800e764 <_dtoa_r+0x63c>)
 800e624:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e628:	4431      	add	r1, r6
 800e62a:	9102      	str	r1, [sp, #8]
 800e62c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e62e:	eeb0 9a47 	vmov.f32	s18, s14
 800e632:	eef0 9a67 	vmov.f32	s19, s15
 800e636:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e63a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e63e:	2900      	cmp	r1, #0
 800e640:	d044      	beq.n	800e6cc <_dtoa_r+0x5a4>
 800e642:	494e      	ldr	r1, [pc, #312]	; (800e77c <_dtoa_r+0x654>)
 800e644:	2000      	movs	r0, #0
 800e646:	f7f2 f919 	bl	800087c <__aeabi_ddiv>
 800e64a:	ec53 2b19 	vmov	r2, r3, d9
 800e64e:	f7f1 fe33 	bl	80002b8 <__aeabi_dsub>
 800e652:	9d00      	ldr	r5, [sp, #0]
 800e654:	ec41 0b19 	vmov	d9, r0, r1
 800e658:	4649      	mov	r1, r9
 800e65a:	4640      	mov	r0, r8
 800e65c:	f7f2 fa94 	bl	8000b88 <__aeabi_d2iz>
 800e660:	4606      	mov	r6, r0
 800e662:	f7f1 ff77 	bl	8000554 <__aeabi_i2d>
 800e666:	4602      	mov	r2, r0
 800e668:	460b      	mov	r3, r1
 800e66a:	4640      	mov	r0, r8
 800e66c:	4649      	mov	r1, r9
 800e66e:	f7f1 fe23 	bl	80002b8 <__aeabi_dsub>
 800e672:	3630      	adds	r6, #48	; 0x30
 800e674:	f805 6b01 	strb.w	r6, [r5], #1
 800e678:	ec53 2b19 	vmov	r2, r3, d9
 800e67c:	4680      	mov	r8, r0
 800e67e:	4689      	mov	r9, r1
 800e680:	f7f2 fa44 	bl	8000b0c <__aeabi_dcmplt>
 800e684:	2800      	cmp	r0, #0
 800e686:	d164      	bne.n	800e752 <_dtoa_r+0x62a>
 800e688:	4642      	mov	r2, r8
 800e68a:	464b      	mov	r3, r9
 800e68c:	4937      	ldr	r1, [pc, #220]	; (800e76c <_dtoa_r+0x644>)
 800e68e:	2000      	movs	r0, #0
 800e690:	f7f1 fe12 	bl	80002b8 <__aeabi_dsub>
 800e694:	ec53 2b19 	vmov	r2, r3, d9
 800e698:	f7f2 fa38 	bl	8000b0c <__aeabi_dcmplt>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	f040 80b6 	bne.w	800e80e <_dtoa_r+0x6e6>
 800e6a2:	9b02      	ldr	r3, [sp, #8]
 800e6a4:	429d      	cmp	r5, r3
 800e6a6:	f43f af7c 	beq.w	800e5a2 <_dtoa_r+0x47a>
 800e6aa:	4b31      	ldr	r3, [pc, #196]	; (800e770 <_dtoa_r+0x648>)
 800e6ac:	ec51 0b19 	vmov	r0, r1, d9
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f7f1 ffb9 	bl	8000628 <__aeabi_dmul>
 800e6b6:	4b2e      	ldr	r3, [pc, #184]	; (800e770 <_dtoa_r+0x648>)
 800e6b8:	ec41 0b19 	vmov	d9, r0, r1
 800e6bc:	2200      	movs	r2, #0
 800e6be:	4640      	mov	r0, r8
 800e6c0:	4649      	mov	r1, r9
 800e6c2:	f7f1 ffb1 	bl	8000628 <__aeabi_dmul>
 800e6c6:	4680      	mov	r8, r0
 800e6c8:	4689      	mov	r9, r1
 800e6ca:	e7c5      	b.n	800e658 <_dtoa_r+0x530>
 800e6cc:	ec51 0b17 	vmov	r0, r1, d7
 800e6d0:	f7f1 ffaa 	bl	8000628 <__aeabi_dmul>
 800e6d4:	9b02      	ldr	r3, [sp, #8]
 800e6d6:	9d00      	ldr	r5, [sp, #0]
 800e6d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e6da:	ec41 0b19 	vmov	d9, r0, r1
 800e6de:	4649      	mov	r1, r9
 800e6e0:	4640      	mov	r0, r8
 800e6e2:	f7f2 fa51 	bl	8000b88 <__aeabi_d2iz>
 800e6e6:	4606      	mov	r6, r0
 800e6e8:	f7f1 ff34 	bl	8000554 <__aeabi_i2d>
 800e6ec:	3630      	adds	r6, #48	; 0x30
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	4640      	mov	r0, r8
 800e6f4:	4649      	mov	r1, r9
 800e6f6:	f7f1 fddf 	bl	80002b8 <__aeabi_dsub>
 800e6fa:	f805 6b01 	strb.w	r6, [r5], #1
 800e6fe:	9b02      	ldr	r3, [sp, #8]
 800e700:	429d      	cmp	r5, r3
 800e702:	4680      	mov	r8, r0
 800e704:	4689      	mov	r9, r1
 800e706:	f04f 0200 	mov.w	r2, #0
 800e70a:	d124      	bne.n	800e756 <_dtoa_r+0x62e>
 800e70c:	4b1b      	ldr	r3, [pc, #108]	; (800e77c <_dtoa_r+0x654>)
 800e70e:	ec51 0b19 	vmov	r0, r1, d9
 800e712:	f7f1 fdd3 	bl	80002bc <__adddf3>
 800e716:	4602      	mov	r2, r0
 800e718:	460b      	mov	r3, r1
 800e71a:	4640      	mov	r0, r8
 800e71c:	4649      	mov	r1, r9
 800e71e:	f7f2 fa13 	bl	8000b48 <__aeabi_dcmpgt>
 800e722:	2800      	cmp	r0, #0
 800e724:	d173      	bne.n	800e80e <_dtoa_r+0x6e6>
 800e726:	ec53 2b19 	vmov	r2, r3, d9
 800e72a:	4914      	ldr	r1, [pc, #80]	; (800e77c <_dtoa_r+0x654>)
 800e72c:	2000      	movs	r0, #0
 800e72e:	f7f1 fdc3 	bl	80002b8 <__aeabi_dsub>
 800e732:	4602      	mov	r2, r0
 800e734:	460b      	mov	r3, r1
 800e736:	4640      	mov	r0, r8
 800e738:	4649      	mov	r1, r9
 800e73a:	f7f2 f9e7 	bl	8000b0c <__aeabi_dcmplt>
 800e73e:	2800      	cmp	r0, #0
 800e740:	f43f af2f 	beq.w	800e5a2 <_dtoa_r+0x47a>
 800e744:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e746:	1e6b      	subs	r3, r5, #1
 800e748:	930f      	str	r3, [sp, #60]	; 0x3c
 800e74a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e74e:	2b30      	cmp	r3, #48	; 0x30
 800e750:	d0f8      	beq.n	800e744 <_dtoa_r+0x61c>
 800e752:	46bb      	mov	fp, r7
 800e754:	e04a      	b.n	800e7ec <_dtoa_r+0x6c4>
 800e756:	4b06      	ldr	r3, [pc, #24]	; (800e770 <_dtoa_r+0x648>)
 800e758:	f7f1 ff66 	bl	8000628 <__aeabi_dmul>
 800e75c:	4680      	mov	r8, r0
 800e75e:	4689      	mov	r9, r1
 800e760:	e7bd      	b.n	800e6de <_dtoa_r+0x5b6>
 800e762:	bf00      	nop
 800e764:	08012600 	.word	0x08012600
 800e768:	080125d8 	.word	0x080125d8
 800e76c:	3ff00000 	.word	0x3ff00000
 800e770:	40240000 	.word	0x40240000
 800e774:	401c0000 	.word	0x401c0000
 800e778:	40140000 	.word	0x40140000
 800e77c:	3fe00000 	.word	0x3fe00000
 800e780:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e784:	9d00      	ldr	r5, [sp, #0]
 800e786:	4642      	mov	r2, r8
 800e788:	464b      	mov	r3, r9
 800e78a:	4630      	mov	r0, r6
 800e78c:	4639      	mov	r1, r7
 800e78e:	f7f2 f875 	bl	800087c <__aeabi_ddiv>
 800e792:	f7f2 f9f9 	bl	8000b88 <__aeabi_d2iz>
 800e796:	9001      	str	r0, [sp, #4]
 800e798:	f7f1 fedc 	bl	8000554 <__aeabi_i2d>
 800e79c:	4642      	mov	r2, r8
 800e79e:	464b      	mov	r3, r9
 800e7a0:	f7f1 ff42 	bl	8000628 <__aeabi_dmul>
 800e7a4:	4602      	mov	r2, r0
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	4630      	mov	r0, r6
 800e7aa:	4639      	mov	r1, r7
 800e7ac:	f7f1 fd84 	bl	80002b8 <__aeabi_dsub>
 800e7b0:	9e01      	ldr	r6, [sp, #4]
 800e7b2:	9f04      	ldr	r7, [sp, #16]
 800e7b4:	3630      	adds	r6, #48	; 0x30
 800e7b6:	f805 6b01 	strb.w	r6, [r5], #1
 800e7ba:	9e00      	ldr	r6, [sp, #0]
 800e7bc:	1bae      	subs	r6, r5, r6
 800e7be:	42b7      	cmp	r7, r6
 800e7c0:	4602      	mov	r2, r0
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	d134      	bne.n	800e830 <_dtoa_r+0x708>
 800e7c6:	f7f1 fd79 	bl	80002bc <__adddf3>
 800e7ca:	4642      	mov	r2, r8
 800e7cc:	464b      	mov	r3, r9
 800e7ce:	4606      	mov	r6, r0
 800e7d0:	460f      	mov	r7, r1
 800e7d2:	f7f2 f9b9 	bl	8000b48 <__aeabi_dcmpgt>
 800e7d6:	b9c8      	cbnz	r0, 800e80c <_dtoa_r+0x6e4>
 800e7d8:	4642      	mov	r2, r8
 800e7da:	464b      	mov	r3, r9
 800e7dc:	4630      	mov	r0, r6
 800e7de:	4639      	mov	r1, r7
 800e7e0:	f7f2 f98a 	bl	8000af8 <__aeabi_dcmpeq>
 800e7e4:	b110      	cbz	r0, 800e7ec <_dtoa_r+0x6c4>
 800e7e6:	9b01      	ldr	r3, [sp, #4]
 800e7e8:	07db      	lsls	r3, r3, #31
 800e7ea:	d40f      	bmi.n	800e80c <_dtoa_r+0x6e4>
 800e7ec:	4651      	mov	r1, sl
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	f000 fbcc 	bl	800ef8c <_Bfree>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7f8:	702b      	strb	r3, [r5, #0]
 800e7fa:	f10b 0301 	add.w	r3, fp, #1
 800e7fe:	6013      	str	r3, [r2, #0]
 800e800:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e802:	2b00      	cmp	r3, #0
 800e804:	f43f ace2 	beq.w	800e1cc <_dtoa_r+0xa4>
 800e808:	601d      	str	r5, [r3, #0]
 800e80a:	e4df      	b.n	800e1cc <_dtoa_r+0xa4>
 800e80c:	465f      	mov	r7, fp
 800e80e:	462b      	mov	r3, r5
 800e810:	461d      	mov	r5, r3
 800e812:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e816:	2a39      	cmp	r2, #57	; 0x39
 800e818:	d106      	bne.n	800e828 <_dtoa_r+0x700>
 800e81a:	9a00      	ldr	r2, [sp, #0]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d1f7      	bne.n	800e810 <_dtoa_r+0x6e8>
 800e820:	9900      	ldr	r1, [sp, #0]
 800e822:	2230      	movs	r2, #48	; 0x30
 800e824:	3701      	adds	r7, #1
 800e826:	700a      	strb	r2, [r1, #0]
 800e828:	781a      	ldrb	r2, [r3, #0]
 800e82a:	3201      	adds	r2, #1
 800e82c:	701a      	strb	r2, [r3, #0]
 800e82e:	e790      	b.n	800e752 <_dtoa_r+0x62a>
 800e830:	4ba3      	ldr	r3, [pc, #652]	; (800eac0 <_dtoa_r+0x998>)
 800e832:	2200      	movs	r2, #0
 800e834:	f7f1 fef8 	bl	8000628 <__aeabi_dmul>
 800e838:	2200      	movs	r2, #0
 800e83a:	2300      	movs	r3, #0
 800e83c:	4606      	mov	r6, r0
 800e83e:	460f      	mov	r7, r1
 800e840:	f7f2 f95a 	bl	8000af8 <__aeabi_dcmpeq>
 800e844:	2800      	cmp	r0, #0
 800e846:	d09e      	beq.n	800e786 <_dtoa_r+0x65e>
 800e848:	e7d0      	b.n	800e7ec <_dtoa_r+0x6c4>
 800e84a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e84c:	2a00      	cmp	r2, #0
 800e84e:	f000 80ca 	beq.w	800e9e6 <_dtoa_r+0x8be>
 800e852:	9a07      	ldr	r2, [sp, #28]
 800e854:	2a01      	cmp	r2, #1
 800e856:	f300 80ad 	bgt.w	800e9b4 <_dtoa_r+0x88c>
 800e85a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e85c:	2a00      	cmp	r2, #0
 800e85e:	f000 80a5 	beq.w	800e9ac <_dtoa_r+0x884>
 800e862:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e866:	9e08      	ldr	r6, [sp, #32]
 800e868:	9d05      	ldr	r5, [sp, #20]
 800e86a:	9a05      	ldr	r2, [sp, #20]
 800e86c:	441a      	add	r2, r3
 800e86e:	9205      	str	r2, [sp, #20]
 800e870:	9a06      	ldr	r2, [sp, #24]
 800e872:	2101      	movs	r1, #1
 800e874:	441a      	add	r2, r3
 800e876:	4620      	mov	r0, r4
 800e878:	9206      	str	r2, [sp, #24]
 800e87a:	f000 fc3d 	bl	800f0f8 <__i2b>
 800e87e:	4607      	mov	r7, r0
 800e880:	b165      	cbz	r5, 800e89c <_dtoa_r+0x774>
 800e882:	9b06      	ldr	r3, [sp, #24]
 800e884:	2b00      	cmp	r3, #0
 800e886:	dd09      	ble.n	800e89c <_dtoa_r+0x774>
 800e888:	42ab      	cmp	r3, r5
 800e88a:	9a05      	ldr	r2, [sp, #20]
 800e88c:	bfa8      	it	ge
 800e88e:	462b      	movge	r3, r5
 800e890:	1ad2      	subs	r2, r2, r3
 800e892:	9205      	str	r2, [sp, #20]
 800e894:	9a06      	ldr	r2, [sp, #24]
 800e896:	1aed      	subs	r5, r5, r3
 800e898:	1ad3      	subs	r3, r2, r3
 800e89a:	9306      	str	r3, [sp, #24]
 800e89c:	9b08      	ldr	r3, [sp, #32]
 800e89e:	b1f3      	cbz	r3, 800e8de <_dtoa_r+0x7b6>
 800e8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	f000 80a3 	beq.w	800e9ee <_dtoa_r+0x8c6>
 800e8a8:	2e00      	cmp	r6, #0
 800e8aa:	dd10      	ble.n	800e8ce <_dtoa_r+0x7a6>
 800e8ac:	4639      	mov	r1, r7
 800e8ae:	4632      	mov	r2, r6
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	f000 fce1 	bl	800f278 <__pow5mult>
 800e8b6:	4652      	mov	r2, sl
 800e8b8:	4601      	mov	r1, r0
 800e8ba:	4607      	mov	r7, r0
 800e8bc:	4620      	mov	r0, r4
 800e8be:	f000 fc31 	bl	800f124 <__multiply>
 800e8c2:	4651      	mov	r1, sl
 800e8c4:	4680      	mov	r8, r0
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f000 fb60 	bl	800ef8c <_Bfree>
 800e8cc:	46c2      	mov	sl, r8
 800e8ce:	9b08      	ldr	r3, [sp, #32]
 800e8d0:	1b9a      	subs	r2, r3, r6
 800e8d2:	d004      	beq.n	800e8de <_dtoa_r+0x7b6>
 800e8d4:	4651      	mov	r1, sl
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	f000 fcce 	bl	800f278 <__pow5mult>
 800e8dc:	4682      	mov	sl, r0
 800e8de:	2101      	movs	r1, #1
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	f000 fc09 	bl	800f0f8 <__i2b>
 800e8e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	4606      	mov	r6, r0
 800e8ec:	f340 8081 	ble.w	800e9f2 <_dtoa_r+0x8ca>
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	4601      	mov	r1, r0
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	f000 fcbf 	bl	800f278 <__pow5mult>
 800e8fa:	9b07      	ldr	r3, [sp, #28]
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	4606      	mov	r6, r0
 800e900:	dd7a      	ble.n	800e9f8 <_dtoa_r+0x8d0>
 800e902:	f04f 0800 	mov.w	r8, #0
 800e906:	6933      	ldr	r3, [r6, #16]
 800e908:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e90c:	6918      	ldr	r0, [r3, #16]
 800e90e:	f000 fba5 	bl	800f05c <__hi0bits>
 800e912:	f1c0 0020 	rsb	r0, r0, #32
 800e916:	9b06      	ldr	r3, [sp, #24]
 800e918:	4418      	add	r0, r3
 800e91a:	f010 001f 	ands.w	r0, r0, #31
 800e91e:	f000 8094 	beq.w	800ea4a <_dtoa_r+0x922>
 800e922:	f1c0 0320 	rsb	r3, r0, #32
 800e926:	2b04      	cmp	r3, #4
 800e928:	f340 8085 	ble.w	800ea36 <_dtoa_r+0x90e>
 800e92c:	9b05      	ldr	r3, [sp, #20]
 800e92e:	f1c0 001c 	rsb	r0, r0, #28
 800e932:	4403      	add	r3, r0
 800e934:	9305      	str	r3, [sp, #20]
 800e936:	9b06      	ldr	r3, [sp, #24]
 800e938:	4403      	add	r3, r0
 800e93a:	4405      	add	r5, r0
 800e93c:	9306      	str	r3, [sp, #24]
 800e93e:	9b05      	ldr	r3, [sp, #20]
 800e940:	2b00      	cmp	r3, #0
 800e942:	dd05      	ble.n	800e950 <_dtoa_r+0x828>
 800e944:	4651      	mov	r1, sl
 800e946:	461a      	mov	r2, r3
 800e948:	4620      	mov	r0, r4
 800e94a:	f000 fcef 	bl	800f32c <__lshift>
 800e94e:	4682      	mov	sl, r0
 800e950:	9b06      	ldr	r3, [sp, #24]
 800e952:	2b00      	cmp	r3, #0
 800e954:	dd05      	ble.n	800e962 <_dtoa_r+0x83a>
 800e956:	4631      	mov	r1, r6
 800e958:	461a      	mov	r2, r3
 800e95a:	4620      	mov	r0, r4
 800e95c:	f000 fce6 	bl	800f32c <__lshift>
 800e960:	4606      	mov	r6, r0
 800e962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e964:	2b00      	cmp	r3, #0
 800e966:	d072      	beq.n	800ea4e <_dtoa_r+0x926>
 800e968:	4631      	mov	r1, r6
 800e96a:	4650      	mov	r0, sl
 800e96c:	f000 fd4a 	bl	800f404 <__mcmp>
 800e970:	2800      	cmp	r0, #0
 800e972:	da6c      	bge.n	800ea4e <_dtoa_r+0x926>
 800e974:	2300      	movs	r3, #0
 800e976:	4651      	mov	r1, sl
 800e978:	220a      	movs	r2, #10
 800e97a:	4620      	mov	r0, r4
 800e97c:	f000 fb28 	bl	800efd0 <__multadd>
 800e980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e982:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e986:	4682      	mov	sl, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	f000 81b0 	beq.w	800ecee <_dtoa_r+0xbc6>
 800e98e:	2300      	movs	r3, #0
 800e990:	4639      	mov	r1, r7
 800e992:	220a      	movs	r2, #10
 800e994:	4620      	mov	r0, r4
 800e996:	f000 fb1b 	bl	800efd0 <__multadd>
 800e99a:	9b01      	ldr	r3, [sp, #4]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	4607      	mov	r7, r0
 800e9a0:	f300 8096 	bgt.w	800ead0 <_dtoa_r+0x9a8>
 800e9a4:	9b07      	ldr	r3, [sp, #28]
 800e9a6:	2b02      	cmp	r3, #2
 800e9a8:	dc59      	bgt.n	800ea5e <_dtoa_r+0x936>
 800e9aa:	e091      	b.n	800ead0 <_dtoa_r+0x9a8>
 800e9ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e9ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e9b2:	e758      	b.n	800e866 <_dtoa_r+0x73e>
 800e9b4:	9b04      	ldr	r3, [sp, #16]
 800e9b6:	1e5e      	subs	r6, r3, #1
 800e9b8:	9b08      	ldr	r3, [sp, #32]
 800e9ba:	42b3      	cmp	r3, r6
 800e9bc:	bfbf      	itttt	lt
 800e9be:	9b08      	ldrlt	r3, [sp, #32]
 800e9c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e9c2:	9608      	strlt	r6, [sp, #32]
 800e9c4:	1af3      	sublt	r3, r6, r3
 800e9c6:	bfb4      	ite	lt
 800e9c8:	18d2      	addlt	r2, r2, r3
 800e9ca:	1b9e      	subge	r6, r3, r6
 800e9cc:	9b04      	ldr	r3, [sp, #16]
 800e9ce:	bfbc      	itt	lt
 800e9d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e9d2:	2600      	movlt	r6, #0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	bfb7      	itett	lt
 800e9d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e9dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e9e0:	1a9d      	sublt	r5, r3, r2
 800e9e2:	2300      	movlt	r3, #0
 800e9e4:	e741      	b.n	800e86a <_dtoa_r+0x742>
 800e9e6:	9e08      	ldr	r6, [sp, #32]
 800e9e8:	9d05      	ldr	r5, [sp, #20]
 800e9ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e9ec:	e748      	b.n	800e880 <_dtoa_r+0x758>
 800e9ee:	9a08      	ldr	r2, [sp, #32]
 800e9f0:	e770      	b.n	800e8d4 <_dtoa_r+0x7ac>
 800e9f2:	9b07      	ldr	r3, [sp, #28]
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	dc19      	bgt.n	800ea2c <_dtoa_r+0x904>
 800e9f8:	9b02      	ldr	r3, [sp, #8]
 800e9fa:	b9bb      	cbnz	r3, 800ea2c <_dtoa_r+0x904>
 800e9fc:	9b03      	ldr	r3, [sp, #12]
 800e9fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea02:	b99b      	cbnz	r3, 800ea2c <_dtoa_r+0x904>
 800ea04:	9b03      	ldr	r3, [sp, #12]
 800ea06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea0a:	0d1b      	lsrs	r3, r3, #20
 800ea0c:	051b      	lsls	r3, r3, #20
 800ea0e:	b183      	cbz	r3, 800ea32 <_dtoa_r+0x90a>
 800ea10:	9b05      	ldr	r3, [sp, #20]
 800ea12:	3301      	adds	r3, #1
 800ea14:	9305      	str	r3, [sp, #20]
 800ea16:	9b06      	ldr	r3, [sp, #24]
 800ea18:	3301      	adds	r3, #1
 800ea1a:	9306      	str	r3, [sp, #24]
 800ea1c:	f04f 0801 	mov.w	r8, #1
 800ea20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	f47f af6f 	bne.w	800e906 <_dtoa_r+0x7de>
 800ea28:	2001      	movs	r0, #1
 800ea2a:	e774      	b.n	800e916 <_dtoa_r+0x7ee>
 800ea2c:	f04f 0800 	mov.w	r8, #0
 800ea30:	e7f6      	b.n	800ea20 <_dtoa_r+0x8f8>
 800ea32:	4698      	mov	r8, r3
 800ea34:	e7f4      	b.n	800ea20 <_dtoa_r+0x8f8>
 800ea36:	d082      	beq.n	800e93e <_dtoa_r+0x816>
 800ea38:	9a05      	ldr	r2, [sp, #20]
 800ea3a:	331c      	adds	r3, #28
 800ea3c:	441a      	add	r2, r3
 800ea3e:	9205      	str	r2, [sp, #20]
 800ea40:	9a06      	ldr	r2, [sp, #24]
 800ea42:	441a      	add	r2, r3
 800ea44:	441d      	add	r5, r3
 800ea46:	9206      	str	r2, [sp, #24]
 800ea48:	e779      	b.n	800e93e <_dtoa_r+0x816>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	e7f4      	b.n	800ea38 <_dtoa_r+0x910>
 800ea4e:	9b04      	ldr	r3, [sp, #16]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	dc37      	bgt.n	800eac4 <_dtoa_r+0x99c>
 800ea54:	9b07      	ldr	r3, [sp, #28]
 800ea56:	2b02      	cmp	r3, #2
 800ea58:	dd34      	ble.n	800eac4 <_dtoa_r+0x99c>
 800ea5a:	9b04      	ldr	r3, [sp, #16]
 800ea5c:	9301      	str	r3, [sp, #4]
 800ea5e:	9b01      	ldr	r3, [sp, #4]
 800ea60:	b963      	cbnz	r3, 800ea7c <_dtoa_r+0x954>
 800ea62:	4631      	mov	r1, r6
 800ea64:	2205      	movs	r2, #5
 800ea66:	4620      	mov	r0, r4
 800ea68:	f000 fab2 	bl	800efd0 <__multadd>
 800ea6c:	4601      	mov	r1, r0
 800ea6e:	4606      	mov	r6, r0
 800ea70:	4650      	mov	r0, sl
 800ea72:	f000 fcc7 	bl	800f404 <__mcmp>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	f73f adbb 	bgt.w	800e5f2 <_dtoa_r+0x4ca>
 800ea7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea7e:	9d00      	ldr	r5, [sp, #0]
 800ea80:	ea6f 0b03 	mvn.w	fp, r3
 800ea84:	f04f 0800 	mov.w	r8, #0
 800ea88:	4631      	mov	r1, r6
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	f000 fa7e 	bl	800ef8c <_Bfree>
 800ea90:	2f00      	cmp	r7, #0
 800ea92:	f43f aeab 	beq.w	800e7ec <_dtoa_r+0x6c4>
 800ea96:	f1b8 0f00 	cmp.w	r8, #0
 800ea9a:	d005      	beq.n	800eaa8 <_dtoa_r+0x980>
 800ea9c:	45b8      	cmp	r8, r7
 800ea9e:	d003      	beq.n	800eaa8 <_dtoa_r+0x980>
 800eaa0:	4641      	mov	r1, r8
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f000 fa72 	bl	800ef8c <_Bfree>
 800eaa8:	4639      	mov	r1, r7
 800eaaa:	4620      	mov	r0, r4
 800eaac:	f000 fa6e 	bl	800ef8c <_Bfree>
 800eab0:	e69c      	b.n	800e7ec <_dtoa_r+0x6c4>
 800eab2:	2600      	movs	r6, #0
 800eab4:	4637      	mov	r7, r6
 800eab6:	e7e1      	b.n	800ea7c <_dtoa_r+0x954>
 800eab8:	46bb      	mov	fp, r7
 800eaba:	4637      	mov	r7, r6
 800eabc:	e599      	b.n	800e5f2 <_dtoa_r+0x4ca>
 800eabe:	bf00      	nop
 800eac0:	40240000 	.word	0x40240000
 800eac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	f000 80c8 	beq.w	800ec5c <_dtoa_r+0xb34>
 800eacc:	9b04      	ldr	r3, [sp, #16]
 800eace:	9301      	str	r3, [sp, #4]
 800ead0:	2d00      	cmp	r5, #0
 800ead2:	dd05      	ble.n	800eae0 <_dtoa_r+0x9b8>
 800ead4:	4639      	mov	r1, r7
 800ead6:	462a      	mov	r2, r5
 800ead8:	4620      	mov	r0, r4
 800eada:	f000 fc27 	bl	800f32c <__lshift>
 800eade:	4607      	mov	r7, r0
 800eae0:	f1b8 0f00 	cmp.w	r8, #0
 800eae4:	d05b      	beq.n	800eb9e <_dtoa_r+0xa76>
 800eae6:	6879      	ldr	r1, [r7, #4]
 800eae8:	4620      	mov	r0, r4
 800eaea:	f000 fa0f 	bl	800ef0c <_Balloc>
 800eaee:	4605      	mov	r5, r0
 800eaf0:	b928      	cbnz	r0, 800eafe <_dtoa_r+0x9d6>
 800eaf2:	4b83      	ldr	r3, [pc, #524]	; (800ed00 <_dtoa_r+0xbd8>)
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800eafa:	f7ff bb2e 	b.w	800e15a <_dtoa_r+0x32>
 800eafe:	693a      	ldr	r2, [r7, #16]
 800eb00:	3202      	adds	r2, #2
 800eb02:	0092      	lsls	r2, r2, #2
 800eb04:	f107 010c 	add.w	r1, r7, #12
 800eb08:	300c      	adds	r0, #12
 800eb0a:	f7ff fa58 	bl	800dfbe <memcpy>
 800eb0e:	2201      	movs	r2, #1
 800eb10:	4629      	mov	r1, r5
 800eb12:	4620      	mov	r0, r4
 800eb14:	f000 fc0a 	bl	800f32c <__lshift>
 800eb18:	9b00      	ldr	r3, [sp, #0]
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	9304      	str	r3, [sp, #16]
 800eb1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb22:	4413      	add	r3, r2
 800eb24:	9308      	str	r3, [sp, #32]
 800eb26:	9b02      	ldr	r3, [sp, #8]
 800eb28:	f003 0301 	and.w	r3, r3, #1
 800eb2c:	46b8      	mov	r8, r7
 800eb2e:	9306      	str	r3, [sp, #24]
 800eb30:	4607      	mov	r7, r0
 800eb32:	9b04      	ldr	r3, [sp, #16]
 800eb34:	4631      	mov	r1, r6
 800eb36:	3b01      	subs	r3, #1
 800eb38:	4650      	mov	r0, sl
 800eb3a:	9301      	str	r3, [sp, #4]
 800eb3c:	f7ff fa6c 	bl	800e018 <quorem>
 800eb40:	4641      	mov	r1, r8
 800eb42:	9002      	str	r0, [sp, #8]
 800eb44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800eb48:	4650      	mov	r0, sl
 800eb4a:	f000 fc5b 	bl	800f404 <__mcmp>
 800eb4e:	463a      	mov	r2, r7
 800eb50:	9005      	str	r0, [sp, #20]
 800eb52:	4631      	mov	r1, r6
 800eb54:	4620      	mov	r0, r4
 800eb56:	f000 fc71 	bl	800f43c <__mdiff>
 800eb5a:	68c2      	ldr	r2, [r0, #12]
 800eb5c:	4605      	mov	r5, r0
 800eb5e:	bb02      	cbnz	r2, 800eba2 <_dtoa_r+0xa7a>
 800eb60:	4601      	mov	r1, r0
 800eb62:	4650      	mov	r0, sl
 800eb64:	f000 fc4e 	bl	800f404 <__mcmp>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	4629      	mov	r1, r5
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	9209      	str	r2, [sp, #36]	; 0x24
 800eb70:	f000 fa0c 	bl	800ef8c <_Bfree>
 800eb74:	9b07      	ldr	r3, [sp, #28]
 800eb76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb78:	9d04      	ldr	r5, [sp, #16]
 800eb7a:	ea43 0102 	orr.w	r1, r3, r2
 800eb7e:	9b06      	ldr	r3, [sp, #24]
 800eb80:	4319      	orrs	r1, r3
 800eb82:	d110      	bne.n	800eba6 <_dtoa_r+0xa7e>
 800eb84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eb88:	d029      	beq.n	800ebde <_dtoa_r+0xab6>
 800eb8a:	9b05      	ldr	r3, [sp, #20]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	dd02      	ble.n	800eb96 <_dtoa_r+0xa6e>
 800eb90:	9b02      	ldr	r3, [sp, #8]
 800eb92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800eb96:	9b01      	ldr	r3, [sp, #4]
 800eb98:	f883 9000 	strb.w	r9, [r3]
 800eb9c:	e774      	b.n	800ea88 <_dtoa_r+0x960>
 800eb9e:	4638      	mov	r0, r7
 800eba0:	e7ba      	b.n	800eb18 <_dtoa_r+0x9f0>
 800eba2:	2201      	movs	r2, #1
 800eba4:	e7e1      	b.n	800eb6a <_dtoa_r+0xa42>
 800eba6:	9b05      	ldr	r3, [sp, #20]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	db04      	blt.n	800ebb6 <_dtoa_r+0xa8e>
 800ebac:	9907      	ldr	r1, [sp, #28]
 800ebae:	430b      	orrs	r3, r1
 800ebb0:	9906      	ldr	r1, [sp, #24]
 800ebb2:	430b      	orrs	r3, r1
 800ebb4:	d120      	bne.n	800ebf8 <_dtoa_r+0xad0>
 800ebb6:	2a00      	cmp	r2, #0
 800ebb8:	dded      	ble.n	800eb96 <_dtoa_r+0xa6e>
 800ebba:	4651      	mov	r1, sl
 800ebbc:	2201      	movs	r2, #1
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f000 fbb4 	bl	800f32c <__lshift>
 800ebc4:	4631      	mov	r1, r6
 800ebc6:	4682      	mov	sl, r0
 800ebc8:	f000 fc1c 	bl	800f404 <__mcmp>
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	dc03      	bgt.n	800ebd8 <_dtoa_r+0xab0>
 800ebd0:	d1e1      	bne.n	800eb96 <_dtoa_r+0xa6e>
 800ebd2:	f019 0f01 	tst.w	r9, #1
 800ebd6:	d0de      	beq.n	800eb96 <_dtoa_r+0xa6e>
 800ebd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ebdc:	d1d8      	bne.n	800eb90 <_dtoa_r+0xa68>
 800ebde:	9a01      	ldr	r2, [sp, #4]
 800ebe0:	2339      	movs	r3, #57	; 0x39
 800ebe2:	7013      	strb	r3, [r2, #0]
 800ebe4:	462b      	mov	r3, r5
 800ebe6:	461d      	mov	r5, r3
 800ebe8:	3b01      	subs	r3, #1
 800ebea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ebee:	2a39      	cmp	r2, #57	; 0x39
 800ebf0:	d06c      	beq.n	800eccc <_dtoa_r+0xba4>
 800ebf2:	3201      	adds	r2, #1
 800ebf4:	701a      	strb	r2, [r3, #0]
 800ebf6:	e747      	b.n	800ea88 <_dtoa_r+0x960>
 800ebf8:	2a00      	cmp	r2, #0
 800ebfa:	dd07      	ble.n	800ec0c <_dtoa_r+0xae4>
 800ebfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ec00:	d0ed      	beq.n	800ebde <_dtoa_r+0xab6>
 800ec02:	9a01      	ldr	r2, [sp, #4]
 800ec04:	f109 0301 	add.w	r3, r9, #1
 800ec08:	7013      	strb	r3, [r2, #0]
 800ec0a:	e73d      	b.n	800ea88 <_dtoa_r+0x960>
 800ec0c:	9b04      	ldr	r3, [sp, #16]
 800ec0e:	9a08      	ldr	r2, [sp, #32]
 800ec10:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d043      	beq.n	800eca0 <_dtoa_r+0xb78>
 800ec18:	4651      	mov	r1, sl
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	220a      	movs	r2, #10
 800ec1e:	4620      	mov	r0, r4
 800ec20:	f000 f9d6 	bl	800efd0 <__multadd>
 800ec24:	45b8      	cmp	r8, r7
 800ec26:	4682      	mov	sl, r0
 800ec28:	f04f 0300 	mov.w	r3, #0
 800ec2c:	f04f 020a 	mov.w	r2, #10
 800ec30:	4641      	mov	r1, r8
 800ec32:	4620      	mov	r0, r4
 800ec34:	d107      	bne.n	800ec46 <_dtoa_r+0xb1e>
 800ec36:	f000 f9cb 	bl	800efd0 <__multadd>
 800ec3a:	4680      	mov	r8, r0
 800ec3c:	4607      	mov	r7, r0
 800ec3e:	9b04      	ldr	r3, [sp, #16]
 800ec40:	3301      	adds	r3, #1
 800ec42:	9304      	str	r3, [sp, #16]
 800ec44:	e775      	b.n	800eb32 <_dtoa_r+0xa0a>
 800ec46:	f000 f9c3 	bl	800efd0 <__multadd>
 800ec4a:	4639      	mov	r1, r7
 800ec4c:	4680      	mov	r8, r0
 800ec4e:	2300      	movs	r3, #0
 800ec50:	220a      	movs	r2, #10
 800ec52:	4620      	mov	r0, r4
 800ec54:	f000 f9bc 	bl	800efd0 <__multadd>
 800ec58:	4607      	mov	r7, r0
 800ec5a:	e7f0      	b.n	800ec3e <_dtoa_r+0xb16>
 800ec5c:	9b04      	ldr	r3, [sp, #16]
 800ec5e:	9301      	str	r3, [sp, #4]
 800ec60:	9d00      	ldr	r5, [sp, #0]
 800ec62:	4631      	mov	r1, r6
 800ec64:	4650      	mov	r0, sl
 800ec66:	f7ff f9d7 	bl	800e018 <quorem>
 800ec6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ec6e:	9b00      	ldr	r3, [sp, #0]
 800ec70:	f805 9b01 	strb.w	r9, [r5], #1
 800ec74:	1aea      	subs	r2, r5, r3
 800ec76:	9b01      	ldr	r3, [sp, #4]
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	dd07      	ble.n	800ec8c <_dtoa_r+0xb64>
 800ec7c:	4651      	mov	r1, sl
 800ec7e:	2300      	movs	r3, #0
 800ec80:	220a      	movs	r2, #10
 800ec82:	4620      	mov	r0, r4
 800ec84:	f000 f9a4 	bl	800efd0 <__multadd>
 800ec88:	4682      	mov	sl, r0
 800ec8a:	e7ea      	b.n	800ec62 <_dtoa_r+0xb3a>
 800ec8c:	9b01      	ldr	r3, [sp, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	bfc8      	it	gt
 800ec92:	461d      	movgt	r5, r3
 800ec94:	9b00      	ldr	r3, [sp, #0]
 800ec96:	bfd8      	it	le
 800ec98:	2501      	movle	r5, #1
 800ec9a:	441d      	add	r5, r3
 800ec9c:	f04f 0800 	mov.w	r8, #0
 800eca0:	4651      	mov	r1, sl
 800eca2:	2201      	movs	r2, #1
 800eca4:	4620      	mov	r0, r4
 800eca6:	f000 fb41 	bl	800f32c <__lshift>
 800ecaa:	4631      	mov	r1, r6
 800ecac:	4682      	mov	sl, r0
 800ecae:	f000 fba9 	bl	800f404 <__mcmp>
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	dc96      	bgt.n	800ebe4 <_dtoa_r+0xabc>
 800ecb6:	d102      	bne.n	800ecbe <_dtoa_r+0xb96>
 800ecb8:	f019 0f01 	tst.w	r9, #1
 800ecbc:	d192      	bne.n	800ebe4 <_dtoa_r+0xabc>
 800ecbe:	462b      	mov	r3, r5
 800ecc0:	461d      	mov	r5, r3
 800ecc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecc6:	2a30      	cmp	r2, #48	; 0x30
 800ecc8:	d0fa      	beq.n	800ecc0 <_dtoa_r+0xb98>
 800ecca:	e6dd      	b.n	800ea88 <_dtoa_r+0x960>
 800eccc:	9a00      	ldr	r2, [sp, #0]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d189      	bne.n	800ebe6 <_dtoa_r+0xabe>
 800ecd2:	f10b 0b01 	add.w	fp, fp, #1
 800ecd6:	2331      	movs	r3, #49	; 0x31
 800ecd8:	e796      	b.n	800ec08 <_dtoa_r+0xae0>
 800ecda:	4b0a      	ldr	r3, [pc, #40]	; (800ed04 <_dtoa_r+0xbdc>)
 800ecdc:	f7ff ba99 	b.w	800e212 <_dtoa_r+0xea>
 800ece0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	f47f aa6d 	bne.w	800e1c2 <_dtoa_r+0x9a>
 800ece8:	4b07      	ldr	r3, [pc, #28]	; (800ed08 <_dtoa_r+0xbe0>)
 800ecea:	f7ff ba92 	b.w	800e212 <_dtoa_r+0xea>
 800ecee:	9b01      	ldr	r3, [sp, #4]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	dcb5      	bgt.n	800ec60 <_dtoa_r+0xb38>
 800ecf4:	9b07      	ldr	r3, [sp, #28]
 800ecf6:	2b02      	cmp	r3, #2
 800ecf8:	f73f aeb1 	bgt.w	800ea5e <_dtoa_r+0x936>
 800ecfc:	e7b0      	b.n	800ec60 <_dtoa_r+0xb38>
 800ecfe:	bf00      	nop
 800ed00:	0801256b 	.word	0x0801256b
 800ed04:	08012435 	.word	0x08012435
 800ed08:	08012506 	.word	0x08012506

0800ed0c <_free_r>:
 800ed0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed0e:	2900      	cmp	r1, #0
 800ed10:	d044      	beq.n	800ed9c <_free_r+0x90>
 800ed12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed16:	9001      	str	r0, [sp, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ed1e:	bfb8      	it	lt
 800ed20:	18e4      	addlt	r4, r4, r3
 800ed22:	f000 f8e7 	bl	800eef4 <__malloc_lock>
 800ed26:	4a1e      	ldr	r2, [pc, #120]	; (800eda0 <_free_r+0x94>)
 800ed28:	9801      	ldr	r0, [sp, #4]
 800ed2a:	6813      	ldr	r3, [r2, #0]
 800ed2c:	b933      	cbnz	r3, 800ed3c <_free_r+0x30>
 800ed2e:	6063      	str	r3, [r4, #4]
 800ed30:	6014      	str	r4, [r2, #0]
 800ed32:	b003      	add	sp, #12
 800ed34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed38:	f000 b8e2 	b.w	800ef00 <__malloc_unlock>
 800ed3c:	42a3      	cmp	r3, r4
 800ed3e:	d908      	bls.n	800ed52 <_free_r+0x46>
 800ed40:	6825      	ldr	r5, [r4, #0]
 800ed42:	1961      	adds	r1, r4, r5
 800ed44:	428b      	cmp	r3, r1
 800ed46:	bf01      	itttt	eq
 800ed48:	6819      	ldreq	r1, [r3, #0]
 800ed4a:	685b      	ldreq	r3, [r3, #4]
 800ed4c:	1949      	addeq	r1, r1, r5
 800ed4e:	6021      	streq	r1, [r4, #0]
 800ed50:	e7ed      	b.n	800ed2e <_free_r+0x22>
 800ed52:	461a      	mov	r2, r3
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	b10b      	cbz	r3, 800ed5c <_free_r+0x50>
 800ed58:	42a3      	cmp	r3, r4
 800ed5a:	d9fa      	bls.n	800ed52 <_free_r+0x46>
 800ed5c:	6811      	ldr	r1, [r2, #0]
 800ed5e:	1855      	adds	r5, r2, r1
 800ed60:	42a5      	cmp	r5, r4
 800ed62:	d10b      	bne.n	800ed7c <_free_r+0x70>
 800ed64:	6824      	ldr	r4, [r4, #0]
 800ed66:	4421      	add	r1, r4
 800ed68:	1854      	adds	r4, r2, r1
 800ed6a:	42a3      	cmp	r3, r4
 800ed6c:	6011      	str	r1, [r2, #0]
 800ed6e:	d1e0      	bne.n	800ed32 <_free_r+0x26>
 800ed70:	681c      	ldr	r4, [r3, #0]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	6053      	str	r3, [r2, #4]
 800ed76:	440c      	add	r4, r1
 800ed78:	6014      	str	r4, [r2, #0]
 800ed7a:	e7da      	b.n	800ed32 <_free_r+0x26>
 800ed7c:	d902      	bls.n	800ed84 <_free_r+0x78>
 800ed7e:	230c      	movs	r3, #12
 800ed80:	6003      	str	r3, [r0, #0]
 800ed82:	e7d6      	b.n	800ed32 <_free_r+0x26>
 800ed84:	6825      	ldr	r5, [r4, #0]
 800ed86:	1961      	adds	r1, r4, r5
 800ed88:	428b      	cmp	r3, r1
 800ed8a:	bf04      	itt	eq
 800ed8c:	6819      	ldreq	r1, [r3, #0]
 800ed8e:	685b      	ldreq	r3, [r3, #4]
 800ed90:	6063      	str	r3, [r4, #4]
 800ed92:	bf04      	itt	eq
 800ed94:	1949      	addeq	r1, r1, r5
 800ed96:	6021      	streq	r1, [r4, #0]
 800ed98:	6054      	str	r4, [r2, #4]
 800ed9a:	e7ca      	b.n	800ed32 <_free_r+0x26>
 800ed9c:	b003      	add	sp, #12
 800ed9e:	bd30      	pop	{r4, r5, pc}
 800eda0:	2001a004 	.word	0x2001a004

0800eda4 <malloc>:
 800eda4:	4b02      	ldr	r3, [pc, #8]	; (800edb0 <malloc+0xc>)
 800eda6:	4601      	mov	r1, r0
 800eda8:	6818      	ldr	r0, [r3, #0]
 800edaa:	f000 b823 	b.w	800edf4 <_malloc_r>
 800edae:	bf00      	nop
 800edb0:	200009d0 	.word	0x200009d0

0800edb4 <sbrk_aligned>:
 800edb4:	b570      	push	{r4, r5, r6, lr}
 800edb6:	4e0e      	ldr	r6, [pc, #56]	; (800edf0 <sbrk_aligned+0x3c>)
 800edb8:	460c      	mov	r4, r1
 800edba:	6831      	ldr	r1, [r6, #0]
 800edbc:	4605      	mov	r5, r0
 800edbe:	b911      	cbnz	r1, 800edc6 <sbrk_aligned+0x12>
 800edc0:	f000 febc 	bl	800fb3c <_sbrk_r>
 800edc4:	6030      	str	r0, [r6, #0]
 800edc6:	4621      	mov	r1, r4
 800edc8:	4628      	mov	r0, r5
 800edca:	f000 feb7 	bl	800fb3c <_sbrk_r>
 800edce:	1c43      	adds	r3, r0, #1
 800edd0:	d00a      	beq.n	800ede8 <sbrk_aligned+0x34>
 800edd2:	1cc4      	adds	r4, r0, #3
 800edd4:	f024 0403 	bic.w	r4, r4, #3
 800edd8:	42a0      	cmp	r0, r4
 800edda:	d007      	beq.n	800edec <sbrk_aligned+0x38>
 800eddc:	1a21      	subs	r1, r4, r0
 800edde:	4628      	mov	r0, r5
 800ede0:	f000 feac 	bl	800fb3c <_sbrk_r>
 800ede4:	3001      	adds	r0, #1
 800ede6:	d101      	bne.n	800edec <sbrk_aligned+0x38>
 800ede8:	f04f 34ff 	mov.w	r4, #4294967295
 800edec:	4620      	mov	r0, r4
 800edee:	bd70      	pop	{r4, r5, r6, pc}
 800edf0:	2001a008 	.word	0x2001a008

0800edf4 <_malloc_r>:
 800edf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edf8:	1ccd      	adds	r5, r1, #3
 800edfa:	f025 0503 	bic.w	r5, r5, #3
 800edfe:	3508      	adds	r5, #8
 800ee00:	2d0c      	cmp	r5, #12
 800ee02:	bf38      	it	cc
 800ee04:	250c      	movcc	r5, #12
 800ee06:	2d00      	cmp	r5, #0
 800ee08:	4607      	mov	r7, r0
 800ee0a:	db01      	blt.n	800ee10 <_malloc_r+0x1c>
 800ee0c:	42a9      	cmp	r1, r5
 800ee0e:	d905      	bls.n	800ee1c <_malloc_r+0x28>
 800ee10:	230c      	movs	r3, #12
 800ee12:	603b      	str	r3, [r7, #0]
 800ee14:	2600      	movs	r6, #0
 800ee16:	4630      	mov	r0, r6
 800ee18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800eef0 <_malloc_r+0xfc>
 800ee20:	f000 f868 	bl	800eef4 <__malloc_lock>
 800ee24:	f8d8 3000 	ldr.w	r3, [r8]
 800ee28:	461c      	mov	r4, r3
 800ee2a:	bb5c      	cbnz	r4, 800ee84 <_malloc_r+0x90>
 800ee2c:	4629      	mov	r1, r5
 800ee2e:	4638      	mov	r0, r7
 800ee30:	f7ff ffc0 	bl	800edb4 <sbrk_aligned>
 800ee34:	1c43      	adds	r3, r0, #1
 800ee36:	4604      	mov	r4, r0
 800ee38:	d155      	bne.n	800eee6 <_malloc_r+0xf2>
 800ee3a:	f8d8 4000 	ldr.w	r4, [r8]
 800ee3e:	4626      	mov	r6, r4
 800ee40:	2e00      	cmp	r6, #0
 800ee42:	d145      	bne.n	800eed0 <_malloc_r+0xdc>
 800ee44:	2c00      	cmp	r4, #0
 800ee46:	d048      	beq.n	800eeda <_malloc_r+0xe6>
 800ee48:	6823      	ldr	r3, [r4, #0]
 800ee4a:	4631      	mov	r1, r6
 800ee4c:	4638      	mov	r0, r7
 800ee4e:	eb04 0903 	add.w	r9, r4, r3
 800ee52:	f000 fe73 	bl	800fb3c <_sbrk_r>
 800ee56:	4581      	cmp	r9, r0
 800ee58:	d13f      	bne.n	800eeda <_malloc_r+0xe6>
 800ee5a:	6821      	ldr	r1, [r4, #0]
 800ee5c:	1a6d      	subs	r5, r5, r1
 800ee5e:	4629      	mov	r1, r5
 800ee60:	4638      	mov	r0, r7
 800ee62:	f7ff ffa7 	bl	800edb4 <sbrk_aligned>
 800ee66:	3001      	adds	r0, #1
 800ee68:	d037      	beq.n	800eeda <_malloc_r+0xe6>
 800ee6a:	6823      	ldr	r3, [r4, #0]
 800ee6c:	442b      	add	r3, r5
 800ee6e:	6023      	str	r3, [r4, #0]
 800ee70:	f8d8 3000 	ldr.w	r3, [r8]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d038      	beq.n	800eeea <_malloc_r+0xf6>
 800ee78:	685a      	ldr	r2, [r3, #4]
 800ee7a:	42a2      	cmp	r2, r4
 800ee7c:	d12b      	bne.n	800eed6 <_malloc_r+0xe2>
 800ee7e:	2200      	movs	r2, #0
 800ee80:	605a      	str	r2, [r3, #4]
 800ee82:	e00f      	b.n	800eea4 <_malloc_r+0xb0>
 800ee84:	6822      	ldr	r2, [r4, #0]
 800ee86:	1b52      	subs	r2, r2, r5
 800ee88:	d41f      	bmi.n	800eeca <_malloc_r+0xd6>
 800ee8a:	2a0b      	cmp	r2, #11
 800ee8c:	d917      	bls.n	800eebe <_malloc_r+0xca>
 800ee8e:	1961      	adds	r1, r4, r5
 800ee90:	42a3      	cmp	r3, r4
 800ee92:	6025      	str	r5, [r4, #0]
 800ee94:	bf18      	it	ne
 800ee96:	6059      	strne	r1, [r3, #4]
 800ee98:	6863      	ldr	r3, [r4, #4]
 800ee9a:	bf08      	it	eq
 800ee9c:	f8c8 1000 	streq.w	r1, [r8]
 800eea0:	5162      	str	r2, [r4, r5]
 800eea2:	604b      	str	r3, [r1, #4]
 800eea4:	4638      	mov	r0, r7
 800eea6:	f104 060b 	add.w	r6, r4, #11
 800eeaa:	f000 f829 	bl	800ef00 <__malloc_unlock>
 800eeae:	f026 0607 	bic.w	r6, r6, #7
 800eeb2:	1d23      	adds	r3, r4, #4
 800eeb4:	1af2      	subs	r2, r6, r3
 800eeb6:	d0ae      	beq.n	800ee16 <_malloc_r+0x22>
 800eeb8:	1b9b      	subs	r3, r3, r6
 800eeba:	50a3      	str	r3, [r4, r2]
 800eebc:	e7ab      	b.n	800ee16 <_malloc_r+0x22>
 800eebe:	42a3      	cmp	r3, r4
 800eec0:	6862      	ldr	r2, [r4, #4]
 800eec2:	d1dd      	bne.n	800ee80 <_malloc_r+0x8c>
 800eec4:	f8c8 2000 	str.w	r2, [r8]
 800eec8:	e7ec      	b.n	800eea4 <_malloc_r+0xb0>
 800eeca:	4623      	mov	r3, r4
 800eecc:	6864      	ldr	r4, [r4, #4]
 800eece:	e7ac      	b.n	800ee2a <_malloc_r+0x36>
 800eed0:	4634      	mov	r4, r6
 800eed2:	6876      	ldr	r6, [r6, #4]
 800eed4:	e7b4      	b.n	800ee40 <_malloc_r+0x4c>
 800eed6:	4613      	mov	r3, r2
 800eed8:	e7cc      	b.n	800ee74 <_malloc_r+0x80>
 800eeda:	230c      	movs	r3, #12
 800eedc:	603b      	str	r3, [r7, #0]
 800eede:	4638      	mov	r0, r7
 800eee0:	f000 f80e 	bl	800ef00 <__malloc_unlock>
 800eee4:	e797      	b.n	800ee16 <_malloc_r+0x22>
 800eee6:	6025      	str	r5, [r4, #0]
 800eee8:	e7dc      	b.n	800eea4 <_malloc_r+0xb0>
 800eeea:	605b      	str	r3, [r3, #4]
 800eeec:	deff      	udf	#255	; 0xff
 800eeee:	bf00      	nop
 800eef0:	2001a004 	.word	0x2001a004

0800eef4 <__malloc_lock>:
 800eef4:	4801      	ldr	r0, [pc, #4]	; (800eefc <__malloc_lock+0x8>)
 800eef6:	f7ff b860 	b.w	800dfba <__retarget_lock_acquire_recursive>
 800eefa:	bf00      	nop
 800eefc:	2001a000 	.word	0x2001a000

0800ef00 <__malloc_unlock>:
 800ef00:	4801      	ldr	r0, [pc, #4]	; (800ef08 <__malloc_unlock+0x8>)
 800ef02:	f7ff b85b 	b.w	800dfbc <__retarget_lock_release_recursive>
 800ef06:	bf00      	nop
 800ef08:	2001a000 	.word	0x2001a000

0800ef0c <_Balloc>:
 800ef0c:	b570      	push	{r4, r5, r6, lr}
 800ef0e:	69c6      	ldr	r6, [r0, #28]
 800ef10:	4604      	mov	r4, r0
 800ef12:	460d      	mov	r5, r1
 800ef14:	b976      	cbnz	r6, 800ef34 <_Balloc+0x28>
 800ef16:	2010      	movs	r0, #16
 800ef18:	f7ff ff44 	bl	800eda4 <malloc>
 800ef1c:	4602      	mov	r2, r0
 800ef1e:	61e0      	str	r0, [r4, #28]
 800ef20:	b920      	cbnz	r0, 800ef2c <_Balloc+0x20>
 800ef22:	4b18      	ldr	r3, [pc, #96]	; (800ef84 <_Balloc+0x78>)
 800ef24:	4818      	ldr	r0, [pc, #96]	; (800ef88 <_Balloc+0x7c>)
 800ef26:	216b      	movs	r1, #107	; 0x6b
 800ef28:	f7ff f858 	bl	800dfdc <__assert_func>
 800ef2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef30:	6006      	str	r6, [r0, #0]
 800ef32:	60c6      	str	r6, [r0, #12]
 800ef34:	69e6      	ldr	r6, [r4, #28]
 800ef36:	68f3      	ldr	r3, [r6, #12]
 800ef38:	b183      	cbz	r3, 800ef5c <_Balloc+0x50>
 800ef3a:	69e3      	ldr	r3, [r4, #28]
 800ef3c:	68db      	ldr	r3, [r3, #12]
 800ef3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef42:	b9b8      	cbnz	r0, 800ef74 <_Balloc+0x68>
 800ef44:	2101      	movs	r1, #1
 800ef46:	fa01 f605 	lsl.w	r6, r1, r5
 800ef4a:	1d72      	adds	r2, r6, #5
 800ef4c:	0092      	lsls	r2, r2, #2
 800ef4e:	4620      	mov	r0, r4
 800ef50:	f000 fe0b 	bl	800fb6a <_calloc_r>
 800ef54:	b160      	cbz	r0, 800ef70 <_Balloc+0x64>
 800ef56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef5a:	e00e      	b.n	800ef7a <_Balloc+0x6e>
 800ef5c:	2221      	movs	r2, #33	; 0x21
 800ef5e:	2104      	movs	r1, #4
 800ef60:	4620      	mov	r0, r4
 800ef62:	f000 fe02 	bl	800fb6a <_calloc_r>
 800ef66:	69e3      	ldr	r3, [r4, #28]
 800ef68:	60f0      	str	r0, [r6, #12]
 800ef6a:	68db      	ldr	r3, [r3, #12]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d1e4      	bne.n	800ef3a <_Balloc+0x2e>
 800ef70:	2000      	movs	r0, #0
 800ef72:	bd70      	pop	{r4, r5, r6, pc}
 800ef74:	6802      	ldr	r2, [r0, #0]
 800ef76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef80:	e7f7      	b.n	800ef72 <_Balloc+0x66>
 800ef82:	bf00      	nop
 800ef84:	08012459 	.word	0x08012459
 800ef88:	0801257c 	.word	0x0801257c

0800ef8c <_Bfree>:
 800ef8c:	b570      	push	{r4, r5, r6, lr}
 800ef8e:	69c6      	ldr	r6, [r0, #28]
 800ef90:	4605      	mov	r5, r0
 800ef92:	460c      	mov	r4, r1
 800ef94:	b976      	cbnz	r6, 800efb4 <_Bfree+0x28>
 800ef96:	2010      	movs	r0, #16
 800ef98:	f7ff ff04 	bl	800eda4 <malloc>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	61e8      	str	r0, [r5, #28]
 800efa0:	b920      	cbnz	r0, 800efac <_Bfree+0x20>
 800efa2:	4b09      	ldr	r3, [pc, #36]	; (800efc8 <_Bfree+0x3c>)
 800efa4:	4809      	ldr	r0, [pc, #36]	; (800efcc <_Bfree+0x40>)
 800efa6:	218f      	movs	r1, #143	; 0x8f
 800efa8:	f7ff f818 	bl	800dfdc <__assert_func>
 800efac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800efb0:	6006      	str	r6, [r0, #0]
 800efb2:	60c6      	str	r6, [r0, #12]
 800efb4:	b13c      	cbz	r4, 800efc6 <_Bfree+0x3a>
 800efb6:	69eb      	ldr	r3, [r5, #28]
 800efb8:	6862      	ldr	r2, [r4, #4]
 800efba:	68db      	ldr	r3, [r3, #12]
 800efbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800efc0:	6021      	str	r1, [r4, #0]
 800efc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800efc6:	bd70      	pop	{r4, r5, r6, pc}
 800efc8:	08012459 	.word	0x08012459
 800efcc:	0801257c 	.word	0x0801257c

0800efd0 <__multadd>:
 800efd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efd4:	690d      	ldr	r5, [r1, #16]
 800efd6:	4607      	mov	r7, r0
 800efd8:	460c      	mov	r4, r1
 800efda:	461e      	mov	r6, r3
 800efdc:	f101 0c14 	add.w	ip, r1, #20
 800efe0:	2000      	movs	r0, #0
 800efe2:	f8dc 3000 	ldr.w	r3, [ip]
 800efe6:	b299      	uxth	r1, r3
 800efe8:	fb02 6101 	mla	r1, r2, r1, r6
 800efec:	0c1e      	lsrs	r6, r3, #16
 800efee:	0c0b      	lsrs	r3, r1, #16
 800eff0:	fb02 3306 	mla	r3, r2, r6, r3
 800eff4:	b289      	uxth	r1, r1
 800eff6:	3001      	adds	r0, #1
 800eff8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800effc:	4285      	cmp	r5, r0
 800effe:	f84c 1b04 	str.w	r1, [ip], #4
 800f002:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f006:	dcec      	bgt.n	800efe2 <__multadd+0x12>
 800f008:	b30e      	cbz	r6, 800f04e <__multadd+0x7e>
 800f00a:	68a3      	ldr	r3, [r4, #8]
 800f00c:	42ab      	cmp	r3, r5
 800f00e:	dc19      	bgt.n	800f044 <__multadd+0x74>
 800f010:	6861      	ldr	r1, [r4, #4]
 800f012:	4638      	mov	r0, r7
 800f014:	3101      	adds	r1, #1
 800f016:	f7ff ff79 	bl	800ef0c <_Balloc>
 800f01a:	4680      	mov	r8, r0
 800f01c:	b928      	cbnz	r0, 800f02a <__multadd+0x5a>
 800f01e:	4602      	mov	r2, r0
 800f020:	4b0c      	ldr	r3, [pc, #48]	; (800f054 <__multadd+0x84>)
 800f022:	480d      	ldr	r0, [pc, #52]	; (800f058 <__multadd+0x88>)
 800f024:	21ba      	movs	r1, #186	; 0xba
 800f026:	f7fe ffd9 	bl	800dfdc <__assert_func>
 800f02a:	6922      	ldr	r2, [r4, #16]
 800f02c:	3202      	adds	r2, #2
 800f02e:	f104 010c 	add.w	r1, r4, #12
 800f032:	0092      	lsls	r2, r2, #2
 800f034:	300c      	adds	r0, #12
 800f036:	f7fe ffc2 	bl	800dfbe <memcpy>
 800f03a:	4621      	mov	r1, r4
 800f03c:	4638      	mov	r0, r7
 800f03e:	f7ff ffa5 	bl	800ef8c <_Bfree>
 800f042:	4644      	mov	r4, r8
 800f044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f048:	3501      	adds	r5, #1
 800f04a:	615e      	str	r6, [r3, #20]
 800f04c:	6125      	str	r5, [r4, #16]
 800f04e:	4620      	mov	r0, r4
 800f050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f054:	0801256b 	.word	0x0801256b
 800f058:	0801257c 	.word	0x0801257c

0800f05c <__hi0bits>:
 800f05c:	0c03      	lsrs	r3, r0, #16
 800f05e:	041b      	lsls	r3, r3, #16
 800f060:	b9d3      	cbnz	r3, 800f098 <__hi0bits+0x3c>
 800f062:	0400      	lsls	r0, r0, #16
 800f064:	2310      	movs	r3, #16
 800f066:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f06a:	bf04      	itt	eq
 800f06c:	0200      	lsleq	r0, r0, #8
 800f06e:	3308      	addeq	r3, #8
 800f070:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f074:	bf04      	itt	eq
 800f076:	0100      	lsleq	r0, r0, #4
 800f078:	3304      	addeq	r3, #4
 800f07a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f07e:	bf04      	itt	eq
 800f080:	0080      	lsleq	r0, r0, #2
 800f082:	3302      	addeq	r3, #2
 800f084:	2800      	cmp	r0, #0
 800f086:	db05      	blt.n	800f094 <__hi0bits+0x38>
 800f088:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f08c:	f103 0301 	add.w	r3, r3, #1
 800f090:	bf08      	it	eq
 800f092:	2320      	moveq	r3, #32
 800f094:	4618      	mov	r0, r3
 800f096:	4770      	bx	lr
 800f098:	2300      	movs	r3, #0
 800f09a:	e7e4      	b.n	800f066 <__hi0bits+0xa>

0800f09c <__lo0bits>:
 800f09c:	6803      	ldr	r3, [r0, #0]
 800f09e:	f013 0207 	ands.w	r2, r3, #7
 800f0a2:	d00c      	beq.n	800f0be <__lo0bits+0x22>
 800f0a4:	07d9      	lsls	r1, r3, #31
 800f0a6:	d422      	bmi.n	800f0ee <__lo0bits+0x52>
 800f0a8:	079a      	lsls	r2, r3, #30
 800f0aa:	bf49      	itett	mi
 800f0ac:	085b      	lsrmi	r3, r3, #1
 800f0ae:	089b      	lsrpl	r3, r3, #2
 800f0b0:	6003      	strmi	r3, [r0, #0]
 800f0b2:	2201      	movmi	r2, #1
 800f0b4:	bf5c      	itt	pl
 800f0b6:	6003      	strpl	r3, [r0, #0]
 800f0b8:	2202      	movpl	r2, #2
 800f0ba:	4610      	mov	r0, r2
 800f0bc:	4770      	bx	lr
 800f0be:	b299      	uxth	r1, r3
 800f0c0:	b909      	cbnz	r1, 800f0c6 <__lo0bits+0x2a>
 800f0c2:	0c1b      	lsrs	r3, r3, #16
 800f0c4:	2210      	movs	r2, #16
 800f0c6:	b2d9      	uxtb	r1, r3
 800f0c8:	b909      	cbnz	r1, 800f0ce <__lo0bits+0x32>
 800f0ca:	3208      	adds	r2, #8
 800f0cc:	0a1b      	lsrs	r3, r3, #8
 800f0ce:	0719      	lsls	r1, r3, #28
 800f0d0:	bf04      	itt	eq
 800f0d2:	091b      	lsreq	r3, r3, #4
 800f0d4:	3204      	addeq	r2, #4
 800f0d6:	0799      	lsls	r1, r3, #30
 800f0d8:	bf04      	itt	eq
 800f0da:	089b      	lsreq	r3, r3, #2
 800f0dc:	3202      	addeq	r2, #2
 800f0de:	07d9      	lsls	r1, r3, #31
 800f0e0:	d403      	bmi.n	800f0ea <__lo0bits+0x4e>
 800f0e2:	085b      	lsrs	r3, r3, #1
 800f0e4:	f102 0201 	add.w	r2, r2, #1
 800f0e8:	d003      	beq.n	800f0f2 <__lo0bits+0x56>
 800f0ea:	6003      	str	r3, [r0, #0]
 800f0ec:	e7e5      	b.n	800f0ba <__lo0bits+0x1e>
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	e7e3      	b.n	800f0ba <__lo0bits+0x1e>
 800f0f2:	2220      	movs	r2, #32
 800f0f4:	e7e1      	b.n	800f0ba <__lo0bits+0x1e>
	...

0800f0f8 <__i2b>:
 800f0f8:	b510      	push	{r4, lr}
 800f0fa:	460c      	mov	r4, r1
 800f0fc:	2101      	movs	r1, #1
 800f0fe:	f7ff ff05 	bl	800ef0c <_Balloc>
 800f102:	4602      	mov	r2, r0
 800f104:	b928      	cbnz	r0, 800f112 <__i2b+0x1a>
 800f106:	4b05      	ldr	r3, [pc, #20]	; (800f11c <__i2b+0x24>)
 800f108:	4805      	ldr	r0, [pc, #20]	; (800f120 <__i2b+0x28>)
 800f10a:	f240 1145 	movw	r1, #325	; 0x145
 800f10e:	f7fe ff65 	bl	800dfdc <__assert_func>
 800f112:	2301      	movs	r3, #1
 800f114:	6144      	str	r4, [r0, #20]
 800f116:	6103      	str	r3, [r0, #16]
 800f118:	bd10      	pop	{r4, pc}
 800f11a:	bf00      	nop
 800f11c:	0801256b 	.word	0x0801256b
 800f120:	0801257c 	.word	0x0801257c

0800f124 <__multiply>:
 800f124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f128:	4691      	mov	r9, r2
 800f12a:	690a      	ldr	r2, [r1, #16]
 800f12c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f130:	429a      	cmp	r2, r3
 800f132:	bfb8      	it	lt
 800f134:	460b      	movlt	r3, r1
 800f136:	460c      	mov	r4, r1
 800f138:	bfbc      	itt	lt
 800f13a:	464c      	movlt	r4, r9
 800f13c:	4699      	movlt	r9, r3
 800f13e:	6927      	ldr	r7, [r4, #16]
 800f140:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f144:	68a3      	ldr	r3, [r4, #8]
 800f146:	6861      	ldr	r1, [r4, #4]
 800f148:	eb07 060a 	add.w	r6, r7, sl
 800f14c:	42b3      	cmp	r3, r6
 800f14e:	b085      	sub	sp, #20
 800f150:	bfb8      	it	lt
 800f152:	3101      	addlt	r1, #1
 800f154:	f7ff feda 	bl	800ef0c <_Balloc>
 800f158:	b930      	cbnz	r0, 800f168 <__multiply+0x44>
 800f15a:	4602      	mov	r2, r0
 800f15c:	4b44      	ldr	r3, [pc, #272]	; (800f270 <__multiply+0x14c>)
 800f15e:	4845      	ldr	r0, [pc, #276]	; (800f274 <__multiply+0x150>)
 800f160:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f164:	f7fe ff3a 	bl	800dfdc <__assert_func>
 800f168:	f100 0514 	add.w	r5, r0, #20
 800f16c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f170:	462b      	mov	r3, r5
 800f172:	2200      	movs	r2, #0
 800f174:	4543      	cmp	r3, r8
 800f176:	d321      	bcc.n	800f1bc <__multiply+0x98>
 800f178:	f104 0314 	add.w	r3, r4, #20
 800f17c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f180:	f109 0314 	add.w	r3, r9, #20
 800f184:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f188:	9202      	str	r2, [sp, #8]
 800f18a:	1b3a      	subs	r2, r7, r4
 800f18c:	3a15      	subs	r2, #21
 800f18e:	f022 0203 	bic.w	r2, r2, #3
 800f192:	3204      	adds	r2, #4
 800f194:	f104 0115 	add.w	r1, r4, #21
 800f198:	428f      	cmp	r7, r1
 800f19a:	bf38      	it	cc
 800f19c:	2204      	movcc	r2, #4
 800f19e:	9201      	str	r2, [sp, #4]
 800f1a0:	9a02      	ldr	r2, [sp, #8]
 800f1a2:	9303      	str	r3, [sp, #12]
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d80c      	bhi.n	800f1c2 <__multiply+0x9e>
 800f1a8:	2e00      	cmp	r6, #0
 800f1aa:	dd03      	ble.n	800f1b4 <__multiply+0x90>
 800f1ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d05b      	beq.n	800f26c <__multiply+0x148>
 800f1b4:	6106      	str	r6, [r0, #16]
 800f1b6:	b005      	add	sp, #20
 800f1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1bc:	f843 2b04 	str.w	r2, [r3], #4
 800f1c0:	e7d8      	b.n	800f174 <__multiply+0x50>
 800f1c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800f1c6:	f1ba 0f00 	cmp.w	sl, #0
 800f1ca:	d024      	beq.n	800f216 <__multiply+0xf2>
 800f1cc:	f104 0e14 	add.w	lr, r4, #20
 800f1d0:	46a9      	mov	r9, r5
 800f1d2:	f04f 0c00 	mov.w	ip, #0
 800f1d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f1da:	f8d9 1000 	ldr.w	r1, [r9]
 800f1de:	fa1f fb82 	uxth.w	fp, r2
 800f1e2:	b289      	uxth	r1, r1
 800f1e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800f1e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f1ec:	f8d9 2000 	ldr.w	r2, [r9]
 800f1f0:	4461      	add	r1, ip
 800f1f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f1f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800f1fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f1fe:	b289      	uxth	r1, r1
 800f200:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f204:	4577      	cmp	r7, lr
 800f206:	f849 1b04 	str.w	r1, [r9], #4
 800f20a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f20e:	d8e2      	bhi.n	800f1d6 <__multiply+0xb2>
 800f210:	9a01      	ldr	r2, [sp, #4]
 800f212:	f845 c002 	str.w	ip, [r5, r2]
 800f216:	9a03      	ldr	r2, [sp, #12]
 800f218:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f21c:	3304      	adds	r3, #4
 800f21e:	f1b9 0f00 	cmp.w	r9, #0
 800f222:	d021      	beq.n	800f268 <__multiply+0x144>
 800f224:	6829      	ldr	r1, [r5, #0]
 800f226:	f104 0c14 	add.w	ip, r4, #20
 800f22a:	46ae      	mov	lr, r5
 800f22c:	f04f 0a00 	mov.w	sl, #0
 800f230:	f8bc b000 	ldrh.w	fp, [ip]
 800f234:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f238:	fb09 220b 	mla	r2, r9, fp, r2
 800f23c:	4452      	add	r2, sl
 800f23e:	b289      	uxth	r1, r1
 800f240:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f244:	f84e 1b04 	str.w	r1, [lr], #4
 800f248:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f24c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f250:	f8be 1000 	ldrh.w	r1, [lr]
 800f254:	fb09 110a 	mla	r1, r9, sl, r1
 800f258:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f25c:	4567      	cmp	r7, ip
 800f25e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f262:	d8e5      	bhi.n	800f230 <__multiply+0x10c>
 800f264:	9a01      	ldr	r2, [sp, #4]
 800f266:	50a9      	str	r1, [r5, r2]
 800f268:	3504      	adds	r5, #4
 800f26a:	e799      	b.n	800f1a0 <__multiply+0x7c>
 800f26c:	3e01      	subs	r6, #1
 800f26e:	e79b      	b.n	800f1a8 <__multiply+0x84>
 800f270:	0801256b 	.word	0x0801256b
 800f274:	0801257c 	.word	0x0801257c

0800f278 <__pow5mult>:
 800f278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f27c:	4615      	mov	r5, r2
 800f27e:	f012 0203 	ands.w	r2, r2, #3
 800f282:	4606      	mov	r6, r0
 800f284:	460f      	mov	r7, r1
 800f286:	d007      	beq.n	800f298 <__pow5mult+0x20>
 800f288:	4c25      	ldr	r4, [pc, #148]	; (800f320 <__pow5mult+0xa8>)
 800f28a:	3a01      	subs	r2, #1
 800f28c:	2300      	movs	r3, #0
 800f28e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f292:	f7ff fe9d 	bl	800efd0 <__multadd>
 800f296:	4607      	mov	r7, r0
 800f298:	10ad      	asrs	r5, r5, #2
 800f29a:	d03d      	beq.n	800f318 <__pow5mult+0xa0>
 800f29c:	69f4      	ldr	r4, [r6, #28]
 800f29e:	b97c      	cbnz	r4, 800f2c0 <__pow5mult+0x48>
 800f2a0:	2010      	movs	r0, #16
 800f2a2:	f7ff fd7f 	bl	800eda4 <malloc>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	61f0      	str	r0, [r6, #28]
 800f2aa:	b928      	cbnz	r0, 800f2b8 <__pow5mult+0x40>
 800f2ac:	4b1d      	ldr	r3, [pc, #116]	; (800f324 <__pow5mult+0xac>)
 800f2ae:	481e      	ldr	r0, [pc, #120]	; (800f328 <__pow5mult+0xb0>)
 800f2b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f2b4:	f7fe fe92 	bl	800dfdc <__assert_func>
 800f2b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f2bc:	6004      	str	r4, [r0, #0]
 800f2be:	60c4      	str	r4, [r0, #12]
 800f2c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f2c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f2c8:	b94c      	cbnz	r4, 800f2de <__pow5mult+0x66>
 800f2ca:	f240 2171 	movw	r1, #625	; 0x271
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	f7ff ff12 	bl	800f0f8 <__i2b>
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f2da:	4604      	mov	r4, r0
 800f2dc:	6003      	str	r3, [r0, #0]
 800f2de:	f04f 0900 	mov.w	r9, #0
 800f2e2:	07eb      	lsls	r3, r5, #31
 800f2e4:	d50a      	bpl.n	800f2fc <__pow5mult+0x84>
 800f2e6:	4639      	mov	r1, r7
 800f2e8:	4622      	mov	r2, r4
 800f2ea:	4630      	mov	r0, r6
 800f2ec:	f7ff ff1a 	bl	800f124 <__multiply>
 800f2f0:	4639      	mov	r1, r7
 800f2f2:	4680      	mov	r8, r0
 800f2f4:	4630      	mov	r0, r6
 800f2f6:	f7ff fe49 	bl	800ef8c <_Bfree>
 800f2fa:	4647      	mov	r7, r8
 800f2fc:	106d      	asrs	r5, r5, #1
 800f2fe:	d00b      	beq.n	800f318 <__pow5mult+0xa0>
 800f300:	6820      	ldr	r0, [r4, #0]
 800f302:	b938      	cbnz	r0, 800f314 <__pow5mult+0x9c>
 800f304:	4622      	mov	r2, r4
 800f306:	4621      	mov	r1, r4
 800f308:	4630      	mov	r0, r6
 800f30a:	f7ff ff0b 	bl	800f124 <__multiply>
 800f30e:	6020      	str	r0, [r4, #0]
 800f310:	f8c0 9000 	str.w	r9, [r0]
 800f314:	4604      	mov	r4, r0
 800f316:	e7e4      	b.n	800f2e2 <__pow5mult+0x6a>
 800f318:	4638      	mov	r0, r7
 800f31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f31e:	bf00      	nop
 800f320:	080126c8 	.word	0x080126c8
 800f324:	08012459 	.word	0x08012459
 800f328:	0801257c 	.word	0x0801257c

0800f32c <__lshift>:
 800f32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f330:	460c      	mov	r4, r1
 800f332:	6849      	ldr	r1, [r1, #4]
 800f334:	6923      	ldr	r3, [r4, #16]
 800f336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f33a:	68a3      	ldr	r3, [r4, #8]
 800f33c:	4607      	mov	r7, r0
 800f33e:	4691      	mov	r9, r2
 800f340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f344:	f108 0601 	add.w	r6, r8, #1
 800f348:	42b3      	cmp	r3, r6
 800f34a:	db0b      	blt.n	800f364 <__lshift+0x38>
 800f34c:	4638      	mov	r0, r7
 800f34e:	f7ff fddd 	bl	800ef0c <_Balloc>
 800f352:	4605      	mov	r5, r0
 800f354:	b948      	cbnz	r0, 800f36a <__lshift+0x3e>
 800f356:	4602      	mov	r2, r0
 800f358:	4b28      	ldr	r3, [pc, #160]	; (800f3fc <__lshift+0xd0>)
 800f35a:	4829      	ldr	r0, [pc, #164]	; (800f400 <__lshift+0xd4>)
 800f35c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f360:	f7fe fe3c 	bl	800dfdc <__assert_func>
 800f364:	3101      	adds	r1, #1
 800f366:	005b      	lsls	r3, r3, #1
 800f368:	e7ee      	b.n	800f348 <__lshift+0x1c>
 800f36a:	2300      	movs	r3, #0
 800f36c:	f100 0114 	add.w	r1, r0, #20
 800f370:	f100 0210 	add.w	r2, r0, #16
 800f374:	4618      	mov	r0, r3
 800f376:	4553      	cmp	r3, sl
 800f378:	db33      	blt.n	800f3e2 <__lshift+0xb6>
 800f37a:	6920      	ldr	r0, [r4, #16]
 800f37c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f380:	f104 0314 	add.w	r3, r4, #20
 800f384:	f019 091f 	ands.w	r9, r9, #31
 800f388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f38c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f390:	d02b      	beq.n	800f3ea <__lshift+0xbe>
 800f392:	f1c9 0e20 	rsb	lr, r9, #32
 800f396:	468a      	mov	sl, r1
 800f398:	2200      	movs	r2, #0
 800f39a:	6818      	ldr	r0, [r3, #0]
 800f39c:	fa00 f009 	lsl.w	r0, r0, r9
 800f3a0:	4310      	orrs	r0, r2
 800f3a2:	f84a 0b04 	str.w	r0, [sl], #4
 800f3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3aa:	459c      	cmp	ip, r3
 800f3ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800f3b0:	d8f3      	bhi.n	800f39a <__lshift+0x6e>
 800f3b2:	ebac 0304 	sub.w	r3, ip, r4
 800f3b6:	3b15      	subs	r3, #21
 800f3b8:	f023 0303 	bic.w	r3, r3, #3
 800f3bc:	3304      	adds	r3, #4
 800f3be:	f104 0015 	add.w	r0, r4, #21
 800f3c2:	4584      	cmp	ip, r0
 800f3c4:	bf38      	it	cc
 800f3c6:	2304      	movcc	r3, #4
 800f3c8:	50ca      	str	r2, [r1, r3]
 800f3ca:	b10a      	cbz	r2, 800f3d0 <__lshift+0xa4>
 800f3cc:	f108 0602 	add.w	r6, r8, #2
 800f3d0:	3e01      	subs	r6, #1
 800f3d2:	4638      	mov	r0, r7
 800f3d4:	612e      	str	r6, [r5, #16]
 800f3d6:	4621      	mov	r1, r4
 800f3d8:	f7ff fdd8 	bl	800ef8c <_Bfree>
 800f3dc:	4628      	mov	r0, r5
 800f3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	e7c5      	b.n	800f376 <__lshift+0x4a>
 800f3ea:	3904      	subs	r1, #4
 800f3ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f3f4:	459c      	cmp	ip, r3
 800f3f6:	d8f9      	bhi.n	800f3ec <__lshift+0xc0>
 800f3f8:	e7ea      	b.n	800f3d0 <__lshift+0xa4>
 800f3fa:	bf00      	nop
 800f3fc:	0801256b 	.word	0x0801256b
 800f400:	0801257c 	.word	0x0801257c

0800f404 <__mcmp>:
 800f404:	b530      	push	{r4, r5, lr}
 800f406:	6902      	ldr	r2, [r0, #16]
 800f408:	690c      	ldr	r4, [r1, #16]
 800f40a:	1b12      	subs	r2, r2, r4
 800f40c:	d10e      	bne.n	800f42c <__mcmp+0x28>
 800f40e:	f100 0314 	add.w	r3, r0, #20
 800f412:	3114      	adds	r1, #20
 800f414:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f418:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f41c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f420:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f424:	42a5      	cmp	r5, r4
 800f426:	d003      	beq.n	800f430 <__mcmp+0x2c>
 800f428:	d305      	bcc.n	800f436 <__mcmp+0x32>
 800f42a:	2201      	movs	r2, #1
 800f42c:	4610      	mov	r0, r2
 800f42e:	bd30      	pop	{r4, r5, pc}
 800f430:	4283      	cmp	r3, r0
 800f432:	d3f3      	bcc.n	800f41c <__mcmp+0x18>
 800f434:	e7fa      	b.n	800f42c <__mcmp+0x28>
 800f436:	f04f 32ff 	mov.w	r2, #4294967295
 800f43a:	e7f7      	b.n	800f42c <__mcmp+0x28>

0800f43c <__mdiff>:
 800f43c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f440:	460c      	mov	r4, r1
 800f442:	4606      	mov	r6, r0
 800f444:	4611      	mov	r1, r2
 800f446:	4620      	mov	r0, r4
 800f448:	4690      	mov	r8, r2
 800f44a:	f7ff ffdb 	bl	800f404 <__mcmp>
 800f44e:	1e05      	subs	r5, r0, #0
 800f450:	d110      	bne.n	800f474 <__mdiff+0x38>
 800f452:	4629      	mov	r1, r5
 800f454:	4630      	mov	r0, r6
 800f456:	f7ff fd59 	bl	800ef0c <_Balloc>
 800f45a:	b930      	cbnz	r0, 800f46a <__mdiff+0x2e>
 800f45c:	4b3a      	ldr	r3, [pc, #232]	; (800f548 <__mdiff+0x10c>)
 800f45e:	4602      	mov	r2, r0
 800f460:	f240 2137 	movw	r1, #567	; 0x237
 800f464:	4839      	ldr	r0, [pc, #228]	; (800f54c <__mdiff+0x110>)
 800f466:	f7fe fdb9 	bl	800dfdc <__assert_func>
 800f46a:	2301      	movs	r3, #1
 800f46c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f474:	bfa4      	itt	ge
 800f476:	4643      	movge	r3, r8
 800f478:	46a0      	movge	r8, r4
 800f47a:	4630      	mov	r0, r6
 800f47c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f480:	bfa6      	itte	ge
 800f482:	461c      	movge	r4, r3
 800f484:	2500      	movge	r5, #0
 800f486:	2501      	movlt	r5, #1
 800f488:	f7ff fd40 	bl	800ef0c <_Balloc>
 800f48c:	b920      	cbnz	r0, 800f498 <__mdiff+0x5c>
 800f48e:	4b2e      	ldr	r3, [pc, #184]	; (800f548 <__mdiff+0x10c>)
 800f490:	4602      	mov	r2, r0
 800f492:	f240 2145 	movw	r1, #581	; 0x245
 800f496:	e7e5      	b.n	800f464 <__mdiff+0x28>
 800f498:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f49c:	6926      	ldr	r6, [r4, #16]
 800f49e:	60c5      	str	r5, [r0, #12]
 800f4a0:	f104 0914 	add.w	r9, r4, #20
 800f4a4:	f108 0514 	add.w	r5, r8, #20
 800f4a8:	f100 0e14 	add.w	lr, r0, #20
 800f4ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f4b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f4b4:	f108 0210 	add.w	r2, r8, #16
 800f4b8:	46f2      	mov	sl, lr
 800f4ba:	2100      	movs	r1, #0
 800f4bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800f4c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f4c4:	fa11 f88b 	uxtah	r8, r1, fp
 800f4c8:	b299      	uxth	r1, r3
 800f4ca:	0c1b      	lsrs	r3, r3, #16
 800f4cc:	eba8 0801 	sub.w	r8, r8, r1
 800f4d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f4d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f4d8:	fa1f f888 	uxth.w	r8, r8
 800f4dc:	1419      	asrs	r1, r3, #16
 800f4de:	454e      	cmp	r6, r9
 800f4e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f4e4:	f84a 3b04 	str.w	r3, [sl], #4
 800f4e8:	d8e8      	bhi.n	800f4bc <__mdiff+0x80>
 800f4ea:	1b33      	subs	r3, r6, r4
 800f4ec:	3b15      	subs	r3, #21
 800f4ee:	f023 0303 	bic.w	r3, r3, #3
 800f4f2:	3304      	adds	r3, #4
 800f4f4:	3415      	adds	r4, #21
 800f4f6:	42a6      	cmp	r6, r4
 800f4f8:	bf38      	it	cc
 800f4fa:	2304      	movcc	r3, #4
 800f4fc:	441d      	add	r5, r3
 800f4fe:	4473      	add	r3, lr
 800f500:	469e      	mov	lr, r3
 800f502:	462e      	mov	r6, r5
 800f504:	4566      	cmp	r6, ip
 800f506:	d30e      	bcc.n	800f526 <__mdiff+0xea>
 800f508:	f10c 0203 	add.w	r2, ip, #3
 800f50c:	1b52      	subs	r2, r2, r5
 800f50e:	f022 0203 	bic.w	r2, r2, #3
 800f512:	3d03      	subs	r5, #3
 800f514:	45ac      	cmp	ip, r5
 800f516:	bf38      	it	cc
 800f518:	2200      	movcc	r2, #0
 800f51a:	4413      	add	r3, r2
 800f51c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f520:	b17a      	cbz	r2, 800f542 <__mdiff+0x106>
 800f522:	6107      	str	r7, [r0, #16]
 800f524:	e7a4      	b.n	800f470 <__mdiff+0x34>
 800f526:	f856 8b04 	ldr.w	r8, [r6], #4
 800f52a:	fa11 f288 	uxtah	r2, r1, r8
 800f52e:	1414      	asrs	r4, r2, #16
 800f530:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f534:	b292      	uxth	r2, r2
 800f536:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f53a:	f84e 2b04 	str.w	r2, [lr], #4
 800f53e:	1421      	asrs	r1, r4, #16
 800f540:	e7e0      	b.n	800f504 <__mdiff+0xc8>
 800f542:	3f01      	subs	r7, #1
 800f544:	e7ea      	b.n	800f51c <__mdiff+0xe0>
 800f546:	bf00      	nop
 800f548:	0801256b 	.word	0x0801256b
 800f54c:	0801257c 	.word	0x0801257c

0800f550 <__d2b>:
 800f550:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f554:	460f      	mov	r7, r1
 800f556:	2101      	movs	r1, #1
 800f558:	ec59 8b10 	vmov	r8, r9, d0
 800f55c:	4616      	mov	r6, r2
 800f55e:	f7ff fcd5 	bl	800ef0c <_Balloc>
 800f562:	4604      	mov	r4, r0
 800f564:	b930      	cbnz	r0, 800f574 <__d2b+0x24>
 800f566:	4602      	mov	r2, r0
 800f568:	4b24      	ldr	r3, [pc, #144]	; (800f5fc <__d2b+0xac>)
 800f56a:	4825      	ldr	r0, [pc, #148]	; (800f600 <__d2b+0xb0>)
 800f56c:	f240 310f 	movw	r1, #783	; 0x30f
 800f570:	f7fe fd34 	bl	800dfdc <__assert_func>
 800f574:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f57c:	bb2d      	cbnz	r5, 800f5ca <__d2b+0x7a>
 800f57e:	9301      	str	r3, [sp, #4]
 800f580:	f1b8 0300 	subs.w	r3, r8, #0
 800f584:	d026      	beq.n	800f5d4 <__d2b+0x84>
 800f586:	4668      	mov	r0, sp
 800f588:	9300      	str	r3, [sp, #0]
 800f58a:	f7ff fd87 	bl	800f09c <__lo0bits>
 800f58e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f592:	b1e8      	cbz	r0, 800f5d0 <__d2b+0x80>
 800f594:	f1c0 0320 	rsb	r3, r0, #32
 800f598:	fa02 f303 	lsl.w	r3, r2, r3
 800f59c:	430b      	orrs	r3, r1
 800f59e:	40c2      	lsrs	r2, r0
 800f5a0:	6163      	str	r3, [r4, #20]
 800f5a2:	9201      	str	r2, [sp, #4]
 800f5a4:	9b01      	ldr	r3, [sp, #4]
 800f5a6:	61a3      	str	r3, [r4, #24]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	bf14      	ite	ne
 800f5ac:	2202      	movne	r2, #2
 800f5ae:	2201      	moveq	r2, #1
 800f5b0:	6122      	str	r2, [r4, #16]
 800f5b2:	b1bd      	cbz	r5, 800f5e4 <__d2b+0x94>
 800f5b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f5b8:	4405      	add	r5, r0
 800f5ba:	603d      	str	r5, [r7, #0]
 800f5bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f5c0:	6030      	str	r0, [r6, #0]
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	b003      	add	sp, #12
 800f5c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f5ce:	e7d6      	b.n	800f57e <__d2b+0x2e>
 800f5d0:	6161      	str	r1, [r4, #20]
 800f5d2:	e7e7      	b.n	800f5a4 <__d2b+0x54>
 800f5d4:	a801      	add	r0, sp, #4
 800f5d6:	f7ff fd61 	bl	800f09c <__lo0bits>
 800f5da:	9b01      	ldr	r3, [sp, #4]
 800f5dc:	6163      	str	r3, [r4, #20]
 800f5de:	3020      	adds	r0, #32
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	e7e5      	b.n	800f5b0 <__d2b+0x60>
 800f5e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f5e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f5ec:	6038      	str	r0, [r7, #0]
 800f5ee:	6918      	ldr	r0, [r3, #16]
 800f5f0:	f7ff fd34 	bl	800f05c <__hi0bits>
 800f5f4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f5f8:	e7e2      	b.n	800f5c0 <__d2b+0x70>
 800f5fa:	bf00      	nop
 800f5fc:	0801256b 	.word	0x0801256b
 800f600:	0801257c 	.word	0x0801257c

0800f604 <__ssputs_r>:
 800f604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f608:	688e      	ldr	r6, [r1, #8]
 800f60a:	461f      	mov	r7, r3
 800f60c:	42be      	cmp	r6, r7
 800f60e:	680b      	ldr	r3, [r1, #0]
 800f610:	4682      	mov	sl, r0
 800f612:	460c      	mov	r4, r1
 800f614:	4690      	mov	r8, r2
 800f616:	d82c      	bhi.n	800f672 <__ssputs_r+0x6e>
 800f618:	898a      	ldrh	r2, [r1, #12]
 800f61a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f61e:	d026      	beq.n	800f66e <__ssputs_r+0x6a>
 800f620:	6965      	ldr	r5, [r4, #20]
 800f622:	6909      	ldr	r1, [r1, #16]
 800f624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f628:	eba3 0901 	sub.w	r9, r3, r1
 800f62c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f630:	1c7b      	adds	r3, r7, #1
 800f632:	444b      	add	r3, r9
 800f634:	106d      	asrs	r5, r5, #1
 800f636:	429d      	cmp	r5, r3
 800f638:	bf38      	it	cc
 800f63a:	461d      	movcc	r5, r3
 800f63c:	0553      	lsls	r3, r2, #21
 800f63e:	d527      	bpl.n	800f690 <__ssputs_r+0x8c>
 800f640:	4629      	mov	r1, r5
 800f642:	f7ff fbd7 	bl	800edf4 <_malloc_r>
 800f646:	4606      	mov	r6, r0
 800f648:	b360      	cbz	r0, 800f6a4 <__ssputs_r+0xa0>
 800f64a:	6921      	ldr	r1, [r4, #16]
 800f64c:	464a      	mov	r2, r9
 800f64e:	f7fe fcb6 	bl	800dfbe <memcpy>
 800f652:	89a3      	ldrh	r3, [r4, #12]
 800f654:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f65c:	81a3      	strh	r3, [r4, #12]
 800f65e:	6126      	str	r6, [r4, #16]
 800f660:	6165      	str	r5, [r4, #20]
 800f662:	444e      	add	r6, r9
 800f664:	eba5 0509 	sub.w	r5, r5, r9
 800f668:	6026      	str	r6, [r4, #0]
 800f66a:	60a5      	str	r5, [r4, #8]
 800f66c:	463e      	mov	r6, r7
 800f66e:	42be      	cmp	r6, r7
 800f670:	d900      	bls.n	800f674 <__ssputs_r+0x70>
 800f672:	463e      	mov	r6, r7
 800f674:	6820      	ldr	r0, [r4, #0]
 800f676:	4632      	mov	r2, r6
 800f678:	4641      	mov	r1, r8
 800f67a:	f7fe fb75 	bl	800dd68 <memmove>
 800f67e:	68a3      	ldr	r3, [r4, #8]
 800f680:	1b9b      	subs	r3, r3, r6
 800f682:	60a3      	str	r3, [r4, #8]
 800f684:	6823      	ldr	r3, [r4, #0]
 800f686:	4433      	add	r3, r6
 800f688:	6023      	str	r3, [r4, #0]
 800f68a:	2000      	movs	r0, #0
 800f68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f690:	462a      	mov	r2, r5
 800f692:	f000 fa92 	bl	800fbba <_realloc_r>
 800f696:	4606      	mov	r6, r0
 800f698:	2800      	cmp	r0, #0
 800f69a:	d1e0      	bne.n	800f65e <__ssputs_r+0x5a>
 800f69c:	6921      	ldr	r1, [r4, #16]
 800f69e:	4650      	mov	r0, sl
 800f6a0:	f7ff fb34 	bl	800ed0c <_free_r>
 800f6a4:	230c      	movs	r3, #12
 800f6a6:	f8ca 3000 	str.w	r3, [sl]
 800f6aa:	89a3      	ldrh	r3, [r4, #12]
 800f6ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6b0:	81a3      	strh	r3, [r4, #12]
 800f6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800f6b6:	e7e9      	b.n	800f68c <__ssputs_r+0x88>

0800f6b8 <_svfiprintf_r>:
 800f6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6bc:	4698      	mov	r8, r3
 800f6be:	898b      	ldrh	r3, [r1, #12]
 800f6c0:	061b      	lsls	r3, r3, #24
 800f6c2:	b09d      	sub	sp, #116	; 0x74
 800f6c4:	4607      	mov	r7, r0
 800f6c6:	460d      	mov	r5, r1
 800f6c8:	4614      	mov	r4, r2
 800f6ca:	d50e      	bpl.n	800f6ea <_svfiprintf_r+0x32>
 800f6cc:	690b      	ldr	r3, [r1, #16]
 800f6ce:	b963      	cbnz	r3, 800f6ea <_svfiprintf_r+0x32>
 800f6d0:	2140      	movs	r1, #64	; 0x40
 800f6d2:	f7ff fb8f 	bl	800edf4 <_malloc_r>
 800f6d6:	6028      	str	r0, [r5, #0]
 800f6d8:	6128      	str	r0, [r5, #16]
 800f6da:	b920      	cbnz	r0, 800f6e6 <_svfiprintf_r+0x2e>
 800f6dc:	230c      	movs	r3, #12
 800f6de:	603b      	str	r3, [r7, #0]
 800f6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6e4:	e0d0      	b.n	800f888 <_svfiprintf_r+0x1d0>
 800f6e6:	2340      	movs	r3, #64	; 0x40
 800f6e8:	616b      	str	r3, [r5, #20]
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	9309      	str	r3, [sp, #36]	; 0x24
 800f6ee:	2320      	movs	r3, #32
 800f6f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6f8:	2330      	movs	r3, #48	; 0x30
 800f6fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f8a0 <_svfiprintf_r+0x1e8>
 800f6fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f702:	f04f 0901 	mov.w	r9, #1
 800f706:	4623      	mov	r3, r4
 800f708:	469a      	mov	sl, r3
 800f70a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f70e:	b10a      	cbz	r2, 800f714 <_svfiprintf_r+0x5c>
 800f710:	2a25      	cmp	r2, #37	; 0x25
 800f712:	d1f9      	bne.n	800f708 <_svfiprintf_r+0x50>
 800f714:	ebba 0b04 	subs.w	fp, sl, r4
 800f718:	d00b      	beq.n	800f732 <_svfiprintf_r+0x7a>
 800f71a:	465b      	mov	r3, fp
 800f71c:	4622      	mov	r2, r4
 800f71e:	4629      	mov	r1, r5
 800f720:	4638      	mov	r0, r7
 800f722:	f7ff ff6f 	bl	800f604 <__ssputs_r>
 800f726:	3001      	adds	r0, #1
 800f728:	f000 80a9 	beq.w	800f87e <_svfiprintf_r+0x1c6>
 800f72c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f72e:	445a      	add	r2, fp
 800f730:	9209      	str	r2, [sp, #36]	; 0x24
 800f732:	f89a 3000 	ldrb.w	r3, [sl]
 800f736:	2b00      	cmp	r3, #0
 800f738:	f000 80a1 	beq.w	800f87e <_svfiprintf_r+0x1c6>
 800f73c:	2300      	movs	r3, #0
 800f73e:	f04f 32ff 	mov.w	r2, #4294967295
 800f742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f746:	f10a 0a01 	add.w	sl, sl, #1
 800f74a:	9304      	str	r3, [sp, #16]
 800f74c:	9307      	str	r3, [sp, #28]
 800f74e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f752:	931a      	str	r3, [sp, #104]	; 0x68
 800f754:	4654      	mov	r4, sl
 800f756:	2205      	movs	r2, #5
 800f758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f75c:	4850      	ldr	r0, [pc, #320]	; (800f8a0 <_svfiprintf_r+0x1e8>)
 800f75e:	f7f0 fd4f 	bl	8000200 <memchr>
 800f762:	9a04      	ldr	r2, [sp, #16]
 800f764:	b9d8      	cbnz	r0, 800f79e <_svfiprintf_r+0xe6>
 800f766:	06d0      	lsls	r0, r2, #27
 800f768:	bf44      	itt	mi
 800f76a:	2320      	movmi	r3, #32
 800f76c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f770:	0711      	lsls	r1, r2, #28
 800f772:	bf44      	itt	mi
 800f774:	232b      	movmi	r3, #43	; 0x2b
 800f776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f77a:	f89a 3000 	ldrb.w	r3, [sl]
 800f77e:	2b2a      	cmp	r3, #42	; 0x2a
 800f780:	d015      	beq.n	800f7ae <_svfiprintf_r+0xf6>
 800f782:	9a07      	ldr	r2, [sp, #28]
 800f784:	4654      	mov	r4, sl
 800f786:	2000      	movs	r0, #0
 800f788:	f04f 0c0a 	mov.w	ip, #10
 800f78c:	4621      	mov	r1, r4
 800f78e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f792:	3b30      	subs	r3, #48	; 0x30
 800f794:	2b09      	cmp	r3, #9
 800f796:	d94d      	bls.n	800f834 <_svfiprintf_r+0x17c>
 800f798:	b1b0      	cbz	r0, 800f7c8 <_svfiprintf_r+0x110>
 800f79a:	9207      	str	r2, [sp, #28]
 800f79c:	e014      	b.n	800f7c8 <_svfiprintf_r+0x110>
 800f79e:	eba0 0308 	sub.w	r3, r0, r8
 800f7a2:	fa09 f303 	lsl.w	r3, r9, r3
 800f7a6:	4313      	orrs	r3, r2
 800f7a8:	9304      	str	r3, [sp, #16]
 800f7aa:	46a2      	mov	sl, r4
 800f7ac:	e7d2      	b.n	800f754 <_svfiprintf_r+0x9c>
 800f7ae:	9b03      	ldr	r3, [sp, #12]
 800f7b0:	1d19      	adds	r1, r3, #4
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	9103      	str	r1, [sp, #12]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	bfbb      	ittet	lt
 800f7ba:	425b      	neglt	r3, r3
 800f7bc:	f042 0202 	orrlt.w	r2, r2, #2
 800f7c0:	9307      	strge	r3, [sp, #28]
 800f7c2:	9307      	strlt	r3, [sp, #28]
 800f7c4:	bfb8      	it	lt
 800f7c6:	9204      	strlt	r2, [sp, #16]
 800f7c8:	7823      	ldrb	r3, [r4, #0]
 800f7ca:	2b2e      	cmp	r3, #46	; 0x2e
 800f7cc:	d10c      	bne.n	800f7e8 <_svfiprintf_r+0x130>
 800f7ce:	7863      	ldrb	r3, [r4, #1]
 800f7d0:	2b2a      	cmp	r3, #42	; 0x2a
 800f7d2:	d134      	bne.n	800f83e <_svfiprintf_r+0x186>
 800f7d4:	9b03      	ldr	r3, [sp, #12]
 800f7d6:	1d1a      	adds	r2, r3, #4
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	9203      	str	r2, [sp, #12]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	bfb8      	it	lt
 800f7e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f7e4:	3402      	adds	r4, #2
 800f7e6:	9305      	str	r3, [sp, #20]
 800f7e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f8b0 <_svfiprintf_r+0x1f8>
 800f7ec:	7821      	ldrb	r1, [r4, #0]
 800f7ee:	2203      	movs	r2, #3
 800f7f0:	4650      	mov	r0, sl
 800f7f2:	f7f0 fd05 	bl	8000200 <memchr>
 800f7f6:	b138      	cbz	r0, 800f808 <_svfiprintf_r+0x150>
 800f7f8:	9b04      	ldr	r3, [sp, #16]
 800f7fa:	eba0 000a 	sub.w	r0, r0, sl
 800f7fe:	2240      	movs	r2, #64	; 0x40
 800f800:	4082      	lsls	r2, r0
 800f802:	4313      	orrs	r3, r2
 800f804:	3401      	adds	r4, #1
 800f806:	9304      	str	r3, [sp, #16]
 800f808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f80c:	4825      	ldr	r0, [pc, #148]	; (800f8a4 <_svfiprintf_r+0x1ec>)
 800f80e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f812:	2206      	movs	r2, #6
 800f814:	f7f0 fcf4 	bl	8000200 <memchr>
 800f818:	2800      	cmp	r0, #0
 800f81a:	d038      	beq.n	800f88e <_svfiprintf_r+0x1d6>
 800f81c:	4b22      	ldr	r3, [pc, #136]	; (800f8a8 <_svfiprintf_r+0x1f0>)
 800f81e:	bb1b      	cbnz	r3, 800f868 <_svfiprintf_r+0x1b0>
 800f820:	9b03      	ldr	r3, [sp, #12]
 800f822:	3307      	adds	r3, #7
 800f824:	f023 0307 	bic.w	r3, r3, #7
 800f828:	3308      	adds	r3, #8
 800f82a:	9303      	str	r3, [sp, #12]
 800f82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f82e:	4433      	add	r3, r6
 800f830:	9309      	str	r3, [sp, #36]	; 0x24
 800f832:	e768      	b.n	800f706 <_svfiprintf_r+0x4e>
 800f834:	fb0c 3202 	mla	r2, ip, r2, r3
 800f838:	460c      	mov	r4, r1
 800f83a:	2001      	movs	r0, #1
 800f83c:	e7a6      	b.n	800f78c <_svfiprintf_r+0xd4>
 800f83e:	2300      	movs	r3, #0
 800f840:	3401      	adds	r4, #1
 800f842:	9305      	str	r3, [sp, #20]
 800f844:	4619      	mov	r1, r3
 800f846:	f04f 0c0a 	mov.w	ip, #10
 800f84a:	4620      	mov	r0, r4
 800f84c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f850:	3a30      	subs	r2, #48	; 0x30
 800f852:	2a09      	cmp	r2, #9
 800f854:	d903      	bls.n	800f85e <_svfiprintf_r+0x1a6>
 800f856:	2b00      	cmp	r3, #0
 800f858:	d0c6      	beq.n	800f7e8 <_svfiprintf_r+0x130>
 800f85a:	9105      	str	r1, [sp, #20]
 800f85c:	e7c4      	b.n	800f7e8 <_svfiprintf_r+0x130>
 800f85e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f862:	4604      	mov	r4, r0
 800f864:	2301      	movs	r3, #1
 800f866:	e7f0      	b.n	800f84a <_svfiprintf_r+0x192>
 800f868:	ab03      	add	r3, sp, #12
 800f86a:	9300      	str	r3, [sp, #0]
 800f86c:	462a      	mov	r2, r5
 800f86e:	4b0f      	ldr	r3, [pc, #60]	; (800f8ac <_svfiprintf_r+0x1f4>)
 800f870:	a904      	add	r1, sp, #16
 800f872:	4638      	mov	r0, r7
 800f874:	f7fd fc68 	bl	800d148 <_printf_float>
 800f878:	1c42      	adds	r2, r0, #1
 800f87a:	4606      	mov	r6, r0
 800f87c:	d1d6      	bne.n	800f82c <_svfiprintf_r+0x174>
 800f87e:	89ab      	ldrh	r3, [r5, #12]
 800f880:	065b      	lsls	r3, r3, #25
 800f882:	f53f af2d 	bmi.w	800f6e0 <_svfiprintf_r+0x28>
 800f886:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f888:	b01d      	add	sp, #116	; 0x74
 800f88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f88e:	ab03      	add	r3, sp, #12
 800f890:	9300      	str	r3, [sp, #0]
 800f892:	462a      	mov	r2, r5
 800f894:	4b05      	ldr	r3, [pc, #20]	; (800f8ac <_svfiprintf_r+0x1f4>)
 800f896:	a904      	add	r1, sp, #16
 800f898:	4638      	mov	r0, r7
 800f89a:	f7fd fef9 	bl	800d690 <_printf_i>
 800f89e:	e7eb      	b.n	800f878 <_svfiprintf_r+0x1c0>
 800f8a0:	080126d4 	.word	0x080126d4
 800f8a4:	080126de 	.word	0x080126de
 800f8a8:	0800d149 	.word	0x0800d149
 800f8ac:	0800f605 	.word	0x0800f605
 800f8b0:	080126da 	.word	0x080126da

0800f8b4 <__sflush_r>:
 800f8b4:	898a      	ldrh	r2, [r1, #12]
 800f8b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ba:	4605      	mov	r5, r0
 800f8bc:	0710      	lsls	r0, r2, #28
 800f8be:	460c      	mov	r4, r1
 800f8c0:	d458      	bmi.n	800f974 <__sflush_r+0xc0>
 800f8c2:	684b      	ldr	r3, [r1, #4]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	dc05      	bgt.n	800f8d4 <__sflush_r+0x20>
 800f8c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	dc02      	bgt.n	800f8d4 <__sflush_r+0x20>
 800f8ce:	2000      	movs	r0, #0
 800f8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8d6:	2e00      	cmp	r6, #0
 800f8d8:	d0f9      	beq.n	800f8ce <__sflush_r+0x1a>
 800f8da:	2300      	movs	r3, #0
 800f8dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f8e0:	682f      	ldr	r7, [r5, #0]
 800f8e2:	6a21      	ldr	r1, [r4, #32]
 800f8e4:	602b      	str	r3, [r5, #0]
 800f8e6:	d032      	beq.n	800f94e <__sflush_r+0x9a>
 800f8e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f8ea:	89a3      	ldrh	r3, [r4, #12]
 800f8ec:	075a      	lsls	r2, r3, #29
 800f8ee:	d505      	bpl.n	800f8fc <__sflush_r+0x48>
 800f8f0:	6863      	ldr	r3, [r4, #4]
 800f8f2:	1ac0      	subs	r0, r0, r3
 800f8f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8f6:	b10b      	cbz	r3, 800f8fc <__sflush_r+0x48>
 800f8f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f8fa:	1ac0      	subs	r0, r0, r3
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	4602      	mov	r2, r0
 800f900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f902:	6a21      	ldr	r1, [r4, #32]
 800f904:	4628      	mov	r0, r5
 800f906:	47b0      	blx	r6
 800f908:	1c43      	adds	r3, r0, #1
 800f90a:	89a3      	ldrh	r3, [r4, #12]
 800f90c:	d106      	bne.n	800f91c <__sflush_r+0x68>
 800f90e:	6829      	ldr	r1, [r5, #0]
 800f910:	291d      	cmp	r1, #29
 800f912:	d82b      	bhi.n	800f96c <__sflush_r+0xb8>
 800f914:	4a29      	ldr	r2, [pc, #164]	; (800f9bc <__sflush_r+0x108>)
 800f916:	410a      	asrs	r2, r1
 800f918:	07d6      	lsls	r6, r2, #31
 800f91a:	d427      	bmi.n	800f96c <__sflush_r+0xb8>
 800f91c:	2200      	movs	r2, #0
 800f91e:	6062      	str	r2, [r4, #4]
 800f920:	04d9      	lsls	r1, r3, #19
 800f922:	6922      	ldr	r2, [r4, #16]
 800f924:	6022      	str	r2, [r4, #0]
 800f926:	d504      	bpl.n	800f932 <__sflush_r+0x7e>
 800f928:	1c42      	adds	r2, r0, #1
 800f92a:	d101      	bne.n	800f930 <__sflush_r+0x7c>
 800f92c:	682b      	ldr	r3, [r5, #0]
 800f92e:	b903      	cbnz	r3, 800f932 <__sflush_r+0x7e>
 800f930:	6560      	str	r0, [r4, #84]	; 0x54
 800f932:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f934:	602f      	str	r7, [r5, #0]
 800f936:	2900      	cmp	r1, #0
 800f938:	d0c9      	beq.n	800f8ce <__sflush_r+0x1a>
 800f93a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f93e:	4299      	cmp	r1, r3
 800f940:	d002      	beq.n	800f948 <__sflush_r+0x94>
 800f942:	4628      	mov	r0, r5
 800f944:	f7ff f9e2 	bl	800ed0c <_free_r>
 800f948:	2000      	movs	r0, #0
 800f94a:	6360      	str	r0, [r4, #52]	; 0x34
 800f94c:	e7c0      	b.n	800f8d0 <__sflush_r+0x1c>
 800f94e:	2301      	movs	r3, #1
 800f950:	4628      	mov	r0, r5
 800f952:	47b0      	blx	r6
 800f954:	1c41      	adds	r1, r0, #1
 800f956:	d1c8      	bne.n	800f8ea <__sflush_r+0x36>
 800f958:	682b      	ldr	r3, [r5, #0]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d0c5      	beq.n	800f8ea <__sflush_r+0x36>
 800f95e:	2b1d      	cmp	r3, #29
 800f960:	d001      	beq.n	800f966 <__sflush_r+0xb2>
 800f962:	2b16      	cmp	r3, #22
 800f964:	d101      	bne.n	800f96a <__sflush_r+0xb6>
 800f966:	602f      	str	r7, [r5, #0]
 800f968:	e7b1      	b.n	800f8ce <__sflush_r+0x1a>
 800f96a:	89a3      	ldrh	r3, [r4, #12]
 800f96c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f970:	81a3      	strh	r3, [r4, #12]
 800f972:	e7ad      	b.n	800f8d0 <__sflush_r+0x1c>
 800f974:	690f      	ldr	r7, [r1, #16]
 800f976:	2f00      	cmp	r7, #0
 800f978:	d0a9      	beq.n	800f8ce <__sflush_r+0x1a>
 800f97a:	0793      	lsls	r3, r2, #30
 800f97c:	680e      	ldr	r6, [r1, #0]
 800f97e:	bf08      	it	eq
 800f980:	694b      	ldreq	r3, [r1, #20]
 800f982:	600f      	str	r7, [r1, #0]
 800f984:	bf18      	it	ne
 800f986:	2300      	movne	r3, #0
 800f988:	eba6 0807 	sub.w	r8, r6, r7
 800f98c:	608b      	str	r3, [r1, #8]
 800f98e:	f1b8 0f00 	cmp.w	r8, #0
 800f992:	dd9c      	ble.n	800f8ce <__sflush_r+0x1a>
 800f994:	6a21      	ldr	r1, [r4, #32]
 800f996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f998:	4643      	mov	r3, r8
 800f99a:	463a      	mov	r2, r7
 800f99c:	4628      	mov	r0, r5
 800f99e:	47b0      	blx	r6
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	dc06      	bgt.n	800f9b2 <__sflush_r+0xfe>
 800f9a4:	89a3      	ldrh	r3, [r4, #12]
 800f9a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9aa:	81a3      	strh	r3, [r4, #12]
 800f9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b0:	e78e      	b.n	800f8d0 <__sflush_r+0x1c>
 800f9b2:	4407      	add	r7, r0
 800f9b4:	eba8 0800 	sub.w	r8, r8, r0
 800f9b8:	e7e9      	b.n	800f98e <__sflush_r+0xda>
 800f9ba:	bf00      	nop
 800f9bc:	dfbffffe 	.word	0xdfbffffe

0800f9c0 <_fflush_r>:
 800f9c0:	b538      	push	{r3, r4, r5, lr}
 800f9c2:	690b      	ldr	r3, [r1, #16]
 800f9c4:	4605      	mov	r5, r0
 800f9c6:	460c      	mov	r4, r1
 800f9c8:	b913      	cbnz	r3, 800f9d0 <_fflush_r+0x10>
 800f9ca:	2500      	movs	r5, #0
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	bd38      	pop	{r3, r4, r5, pc}
 800f9d0:	b118      	cbz	r0, 800f9da <_fflush_r+0x1a>
 800f9d2:	6a03      	ldr	r3, [r0, #32]
 800f9d4:	b90b      	cbnz	r3, 800f9da <_fflush_r+0x1a>
 800f9d6:	f7fe f809 	bl	800d9ec <__sinit>
 800f9da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d0f3      	beq.n	800f9ca <_fflush_r+0xa>
 800f9e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f9e4:	07d0      	lsls	r0, r2, #31
 800f9e6:	d404      	bmi.n	800f9f2 <_fflush_r+0x32>
 800f9e8:	0599      	lsls	r1, r3, #22
 800f9ea:	d402      	bmi.n	800f9f2 <_fflush_r+0x32>
 800f9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9ee:	f7fe fae4 	bl	800dfba <__retarget_lock_acquire_recursive>
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	4621      	mov	r1, r4
 800f9f6:	f7ff ff5d 	bl	800f8b4 <__sflush_r>
 800f9fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9fc:	07da      	lsls	r2, r3, #31
 800f9fe:	4605      	mov	r5, r0
 800fa00:	d4e4      	bmi.n	800f9cc <_fflush_r+0xc>
 800fa02:	89a3      	ldrh	r3, [r4, #12]
 800fa04:	059b      	lsls	r3, r3, #22
 800fa06:	d4e1      	bmi.n	800f9cc <_fflush_r+0xc>
 800fa08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa0a:	f7fe fad7 	bl	800dfbc <__retarget_lock_release_recursive>
 800fa0e:	e7dd      	b.n	800f9cc <_fflush_r+0xc>

0800fa10 <fiprintf>:
 800fa10:	b40e      	push	{r1, r2, r3}
 800fa12:	b503      	push	{r0, r1, lr}
 800fa14:	4601      	mov	r1, r0
 800fa16:	ab03      	add	r3, sp, #12
 800fa18:	4805      	ldr	r0, [pc, #20]	; (800fa30 <fiprintf+0x20>)
 800fa1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa1e:	6800      	ldr	r0, [r0, #0]
 800fa20:	9301      	str	r3, [sp, #4]
 800fa22:	f000 f92f 	bl	800fc84 <_vfiprintf_r>
 800fa26:	b002      	add	sp, #8
 800fa28:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa2c:	b003      	add	sp, #12
 800fa2e:	4770      	bx	lr
 800fa30:	200009d0 	.word	0x200009d0

0800fa34 <__swhatbuf_r>:
 800fa34:	b570      	push	{r4, r5, r6, lr}
 800fa36:	460c      	mov	r4, r1
 800fa38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa3c:	2900      	cmp	r1, #0
 800fa3e:	b096      	sub	sp, #88	; 0x58
 800fa40:	4615      	mov	r5, r2
 800fa42:	461e      	mov	r6, r3
 800fa44:	da0d      	bge.n	800fa62 <__swhatbuf_r+0x2e>
 800fa46:	89a3      	ldrh	r3, [r4, #12]
 800fa48:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fa4c:	f04f 0100 	mov.w	r1, #0
 800fa50:	bf0c      	ite	eq
 800fa52:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fa56:	2340      	movne	r3, #64	; 0x40
 800fa58:	2000      	movs	r0, #0
 800fa5a:	6031      	str	r1, [r6, #0]
 800fa5c:	602b      	str	r3, [r5, #0]
 800fa5e:	b016      	add	sp, #88	; 0x58
 800fa60:	bd70      	pop	{r4, r5, r6, pc}
 800fa62:	466a      	mov	r2, sp
 800fa64:	f000 f848 	bl	800faf8 <_fstat_r>
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	dbec      	blt.n	800fa46 <__swhatbuf_r+0x12>
 800fa6c:	9901      	ldr	r1, [sp, #4]
 800fa6e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fa72:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fa76:	4259      	negs	r1, r3
 800fa78:	4159      	adcs	r1, r3
 800fa7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa7e:	e7eb      	b.n	800fa58 <__swhatbuf_r+0x24>

0800fa80 <__smakebuf_r>:
 800fa80:	898b      	ldrh	r3, [r1, #12]
 800fa82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa84:	079d      	lsls	r5, r3, #30
 800fa86:	4606      	mov	r6, r0
 800fa88:	460c      	mov	r4, r1
 800fa8a:	d507      	bpl.n	800fa9c <__smakebuf_r+0x1c>
 800fa8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa90:	6023      	str	r3, [r4, #0]
 800fa92:	6123      	str	r3, [r4, #16]
 800fa94:	2301      	movs	r3, #1
 800fa96:	6163      	str	r3, [r4, #20]
 800fa98:	b002      	add	sp, #8
 800fa9a:	bd70      	pop	{r4, r5, r6, pc}
 800fa9c:	ab01      	add	r3, sp, #4
 800fa9e:	466a      	mov	r2, sp
 800faa0:	f7ff ffc8 	bl	800fa34 <__swhatbuf_r>
 800faa4:	9900      	ldr	r1, [sp, #0]
 800faa6:	4605      	mov	r5, r0
 800faa8:	4630      	mov	r0, r6
 800faaa:	f7ff f9a3 	bl	800edf4 <_malloc_r>
 800faae:	b948      	cbnz	r0, 800fac4 <__smakebuf_r+0x44>
 800fab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fab4:	059a      	lsls	r2, r3, #22
 800fab6:	d4ef      	bmi.n	800fa98 <__smakebuf_r+0x18>
 800fab8:	f023 0303 	bic.w	r3, r3, #3
 800fabc:	f043 0302 	orr.w	r3, r3, #2
 800fac0:	81a3      	strh	r3, [r4, #12]
 800fac2:	e7e3      	b.n	800fa8c <__smakebuf_r+0xc>
 800fac4:	89a3      	ldrh	r3, [r4, #12]
 800fac6:	6020      	str	r0, [r4, #0]
 800fac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800facc:	81a3      	strh	r3, [r4, #12]
 800face:	9b00      	ldr	r3, [sp, #0]
 800fad0:	6163      	str	r3, [r4, #20]
 800fad2:	9b01      	ldr	r3, [sp, #4]
 800fad4:	6120      	str	r0, [r4, #16]
 800fad6:	b15b      	cbz	r3, 800faf0 <__smakebuf_r+0x70>
 800fad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fadc:	4630      	mov	r0, r6
 800fade:	f000 f81d 	bl	800fb1c <_isatty_r>
 800fae2:	b128      	cbz	r0, 800faf0 <__smakebuf_r+0x70>
 800fae4:	89a3      	ldrh	r3, [r4, #12]
 800fae6:	f023 0303 	bic.w	r3, r3, #3
 800faea:	f043 0301 	orr.w	r3, r3, #1
 800faee:	81a3      	strh	r3, [r4, #12]
 800faf0:	89a3      	ldrh	r3, [r4, #12]
 800faf2:	431d      	orrs	r5, r3
 800faf4:	81a5      	strh	r5, [r4, #12]
 800faf6:	e7cf      	b.n	800fa98 <__smakebuf_r+0x18>

0800faf8 <_fstat_r>:
 800faf8:	b538      	push	{r3, r4, r5, lr}
 800fafa:	4d07      	ldr	r5, [pc, #28]	; (800fb18 <_fstat_r+0x20>)
 800fafc:	2300      	movs	r3, #0
 800fafe:	4604      	mov	r4, r0
 800fb00:	4608      	mov	r0, r1
 800fb02:	4611      	mov	r1, r2
 800fb04:	602b      	str	r3, [r5, #0]
 800fb06:	f7f4 fbea 	bl	80042de <_fstat>
 800fb0a:	1c43      	adds	r3, r0, #1
 800fb0c:	d102      	bne.n	800fb14 <_fstat_r+0x1c>
 800fb0e:	682b      	ldr	r3, [r5, #0]
 800fb10:	b103      	cbz	r3, 800fb14 <_fstat_r+0x1c>
 800fb12:	6023      	str	r3, [r4, #0]
 800fb14:	bd38      	pop	{r3, r4, r5, pc}
 800fb16:	bf00      	nop
 800fb18:	20019ffc 	.word	0x20019ffc

0800fb1c <_isatty_r>:
 800fb1c:	b538      	push	{r3, r4, r5, lr}
 800fb1e:	4d06      	ldr	r5, [pc, #24]	; (800fb38 <_isatty_r+0x1c>)
 800fb20:	2300      	movs	r3, #0
 800fb22:	4604      	mov	r4, r0
 800fb24:	4608      	mov	r0, r1
 800fb26:	602b      	str	r3, [r5, #0]
 800fb28:	f7f4 fbe9 	bl	80042fe <_isatty>
 800fb2c:	1c43      	adds	r3, r0, #1
 800fb2e:	d102      	bne.n	800fb36 <_isatty_r+0x1a>
 800fb30:	682b      	ldr	r3, [r5, #0]
 800fb32:	b103      	cbz	r3, 800fb36 <_isatty_r+0x1a>
 800fb34:	6023      	str	r3, [r4, #0]
 800fb36:	bd38      	pop	{r3, r4, r5, pc}
 800fb38:	20019ffc 	.word	0x20019ffc

0800fb3c <_sbrk_r>:
 800fb3c:	b538      	push	{r3, r4, r5, lr}
 800fb3e:	4d06      	ldr	r5, [pc, #24]	; (800fb58 <_sbrk_r+0x1c>)
 800fb40:	2300      	movs	r3, #0
 800fb42:	4604      	mov	r4, r0
 800fb44:	4608      	mov	r0, r1
 800fb46:	602b      	str	r3, [r5, #0]
 800fb48:	f7f4 fbf2 	bl	8004330 <_sbrk>
 800fb4c:	1c43      	adds	r3, r0, #1
 800fb4e:	d102      	bne.n	800fb56 <_sbrk_r+0x1a>
 800fb50:	682b      	ldr	r3, [r5, #0]
 800fb52:	b103      	cbz	r3, 800fb56 <_sbrk_r+0x1a>
 800fb54:	6023      	str	r3, [r4, #0]
 800fb56:	bd38      	pop	{r3, r4, r5, pc}
 800fb58:	20019ffc 	.word	0x20019ffc

0800fb5c <abort>:
 800fb5c:	b508      	push	{r3, lr}
 800fb5e:	2006      	movs	r0, #6
 800fb60:	f000 f9d2 	bl	800ff08 <raise>
 800fb64:	2001      	movs	r0, #1
 800fb66:	f7f4 fb6b 	bl	8004240 <_exit>

0800fb6a <_calloc_r>:
 800fb6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb6c:	fba1 2402 	umull	r2, r4, r1, r2
 800fb70:	b94c      	cbnz	r4, 800fb86 <_calloc_r+0x1c>
 800fb72:	4611      	mov	r1, r2
 800fb74:	9201      	str	r2, [sp, #4]
 800fb76:	f7ff f93d 	bl	800edf4 <_malloc_r>
 800fb7a:	9a01      	ldr	r2, [sp, #4]
 800fb7c:	4605      	mov	r5, r0
 800fb7e:	b930      	cbnz	r0, 800fb8e <_calloc_r+0x24>
 800fb80:	4628      	mov	r0, r5
 800fb82:	b003      	add	sp, #12
 800fb84:	bd30      	pop	{r4, r5, pc}
 800fb86:	220c      	movs	r2, #12
 800fb88:	6002      	str	r2, [r0, #0]
 800fb8a:	2500      	movs	r5, #0
 800fb8c:	e7f8      	b.n	800fb80 <_calloc_r+0x16>
 800fb8e:	4621      	mov	r1, r4
 800fb90:	f7fe f904 	bl	800dd9c <memset>
 800fb94:	e7f4      	b.n	800fb80 <_calloc_r+0x16>

0800fb96 <__ascii_mbtowc>:
 800fb96:	b082      	sub	sp, #8
 800fb98:	b901      	cbnz	r1, 800fb9c <__ascii_mbtowc+0x6>
 800fb9a:	a901      	add	r1, sp, #4
 800fb9c:	b142      	cbz	r2, 800fbb0 <__ascii_mbtowc+0x1a>
 800fb9e:	b14b      	cbz	r3, 800fbb4 <__ascii_mbtowc+0x1e>
 800fba0:	7813      	ldrb	r3, [r2, #0]
 800fba2:	600b      	str	r3, [r1, #0]
 800fba4:	7812      	ldrb	r2, [r2, #0]
 800fba6:	1e10      	subs	r0, r2, #0
 800fba8:	bf18      	it	ne
 800fbaa:	2001      	movne	r0, #1
 800fbac:	b002      	add	sp, #8
 800fbae:	4770      	bx	lr
 800fbb0:	4610      	mov	r0, r2
 800fbb2:	e7fb      	b.n	800fbac <__ascii_mbtowc+0x16>
 800fbb4:	f06f 0001 	mvn.w	r0, #1
 800fbb8:	e7f8      	b.n	800fbac <__ascii_mbtowc+0x16>

0800fbba <_realloc_r>:
 800fbba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbbe:	4680      	mov	r8, r0
 800fbc0:	4614      	mov	r4, r2
 800fbc2:	460e      	mov	r6, r1
 800fbc4:	b921      	cbnz	r1, 800fbd0 <_realloc_r+0x16>
 800fbc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbca:	4611      	mov	r1, r2
 800fbcc:	f7ff b912 	b.w	800edf4 <_malloc_r>
 800fbd0:	b92a      	cbnz	r2, 800fbde <_realloc_r+0x24>
 800fbd2:	f7ff f89b 	bl	800ed0c <_free_r>
 800fbd6:	4625      	mov	r5, r4
 800fbd8:	4628      	mov	r0, r5
 800fbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbde:	f000 f9af 	bl	800ff40 <_malloc_usable_size_r>
 800fbe2:	4284      	cmp	r4, r0
 800fbe4:	4607      	mov	r7, r0
 800fbe6:	d802      	bhi.n	800fbee <_realloc_r+0x34>
 800fbe8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fbec:	d812      	bhi.n	800fc14 <_realloc_r+0x5a>
 800fbee:	4621      	mov	r1, r4
 800fbf0:	4640      	mov	r0, r8
 800fbf2:	f7ff f8ff 	bl	800edf4 <_malloc_r>
 800fbf6:	4605      	mov	r5, r0
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	d0ed      	beq.n	800fbd8 <_realloc_r+0x1e>
 800fbfc:	42bc      	cmp	r4, r7
 800fbfe:	4622      	mov	r2, r4
 800fc00:	4631      	mov	r1, r6
 800fc02:	bf28      	it	cs
 800fc04:	463a      	movcs	r2, r7
 800fc06:	f7fe f9da 	bl	800dfbe <memcpy>
 800fc0a:	4631      	mov	r1, r6
 800fc0c:	4640      	mov	r0, r8
 800fc0e:	f7ff f87d 	bl	800ed0c <_free_r>
 800fc12:	e7e1      	b.n	800fbd8 <_realloc_r+0x1e>
 800fc14:	4635      	mov	r5, r6
 800fc16:	e7df      	b.n	800fbd8 <_realloc_r+0x1e>

0800fc18 <__ascii_wctomb>:
 800fc18:	b149      	cbz	r1, 800fc2e <__ascii_wctomb+0x16>
 800fc1a:	2aff      	cmp	r2, #255	; 0xff
 800fc1c:	bf85      	ittet	hi
 800fc1e:	238a      	movhi	r3, #138	; 0x8a
 800fc20:	6003      	strhi	r3, [r0, #0]
 800fc22:	700a      	strbls	r2, [r1, #0]
 800fc24:	f04f 30ff 	movhi.w	r0, #4294967295
 800fc28:	bf98      	it	ls
 800fc2a:	2001      	movls	r0, #1
 800fc2c:	4770      	bx	lr
 800fc2e:	4608      	mov	r0, r1
 800fc30:	4770      	bx	lr

0800fc32 <__sfputc_r>:
 800fc32:	6893      	ldr	r3, [r2, #8]
 800fc34:	3b01      	subs	r3, #1
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	b410      	push	{r4}
 800fc3a:	6093      	str	r3, [r2, #8]
 800fc3c:	da08      	bge.n	800fc50 <__sfputc_r+0x1e>
 800fc3e:	6994      	ldr	r4, [r2, #24]
 800fc40:	42a3      	cmp	r3, r4
 800fc42:	db01      	blt.n	800fc48 <__sfputc_r+0x16>
 800fc44:	290a      	cmp	r1, #10
 800fc46:	d103      	bne.n	800fc50 <__sfputc_r+0x1e>
 800fc48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc4c:	f7fd bff7 	b.w	800dc3e <__swbuf_r>
 800fc50:	6813      	ldr	r3, [r2, #0]
 800fc52:	1c58      	adds	r0, r3, #1
 800fc54:	6010      	str	r0, [r2, #0]
 800fc56:	7019      	strb	r1, [r3, #0]
 800fc58:	4608      	mov	r0, r1
 800fc5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc5e:	4770      	bx	lr

0800fc60 <__sfputs_r>:
 800fc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc62:	4606      	mov	r6, r0
 800fc64:	460f      	mov	r7, r1
 800fc66:	4614      	mov	r4, r2
 800fc68:	18d5      	adds	r5, r2, r3
 800fc6a:	42ac      	cmp	r4, r5
 800fc6c:	d101      	bne.n	800fc72 <__sfputs_r+0x12>
 800fc6e:	2000      	movs	r0, #0
 800fc70:	e007      	b.n	800fc82 <__sfputs_r+0x22>
 800fc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc76:	463a      	mov	r2, r7
 800fc78:	4630      	mov	r0, r6
 800fc7a:	f7ff ffda 	bl	800fc32 <__sfputc_r>
 800fc7e:	1c43      	adds	r3, r0, #1
 800fc80:	d1f3      	bne.n	800fc6a <__sfputs_r+0xa>
 800fc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fc84 <_vfiprintf_r>:
 800fc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc88:	460d      	mov	r5, r1
 800fc8a:	b09d      	sub	sp, #116	; 0x74
 800fc8c:	4614      	mov	r4, r2
 800fc8e:	4698      	mov	r8, r3
 800fc90:	4606      	mov	r6, r0
 800fc92:	b118      	cbz	r0, 800fc9c <_vfiprintf_r+0x18>
 800fc94:	6a03      	ldr	r3, [r0, #32]
 800fc96:	b90b      	cbnz	r3, 800fc9c <_vfiprintf_r+0x18>
 800fc98:	f7fd fea8 	bl	800d9ec <__sinit>
 800fc9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc9e:	07d9      	lsls	r1, r3, #31
 800fca0:	d405      	bmi.n	800fcae <_vfiprintf_r+0x2a>
 800fca2:	89ab      	ldrh	r3, [r5, #12]
 800fca4:	059a      	lsls	r2, r3, #22
 800fca6:	d402      	bmi.n	800fcae <_vfiprintf_r+0x2a>
 800fca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcaa:	f7fe f986 	bl	800dfba <__retarget_lock_acquire_recursive>
 800fcae:	89ab      	ldrh	r3, [r5, #12]
 800fcb0:	071b      	lsls	r3, r3, #28
 800fcb2:	d501      	bpl.n	800fcb8 <_vfiprintf_r+0x34>
 800fcb4:	692b      	ldr	r3, [r5, #16]
 800fcb6:	b99b      	cbnz	r3, 800fce0 <_vfiprintf_r+0x5c>
 800fcb8:	4629      	mov	r1, r5
 800fcba:	4630      	mov	r0, r6
 800fcbc:	f7fd fffc 	bl	800dcb8 <__swsetup_r>
 800fcc0:	b170      	cbz	r0, 800fce0 <_vfiprintf_r+0x5c>
 800fcc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fcc4:	07dc      	lsls	r4, r3, #31
 800fcc6:	d504      	bpl.n	800fcd2 <_vfiprintf_r+0x4e>
 800fcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800fccc:	b01d      	add	sp, #116	; 0x74
 800fcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd2:	89ab      	ldrh	r3, [r5, #12]
 800fcd4:	0598      	lsls	r0, r3, #22
 800fcd6:	d4f7      	bmi.n	800fcc8 <_vfiprintf_r+0x44>
 800fcd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcda:	f7fe f96f 	bl	800dfbc <__retarget_lock_release_recursive>
 800fcde:	e7f3      	b.n	800fcc8 <_vfiprintf_r+0x44>
 800fce0:	2300      	movs	r3, #0
 800fce2:	9309      	str	r3, [sp, #36]	; 0x24
 800fce4:	2320      	movs	r3, #32
 800fce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcea:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcee:	2330      	movs	r3, #48	; 0x30
 800fcf0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fea4 <_vfiprintf_r+0x220>
 800fcf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcf8:	f04f 0901 	mov.w	r9, #1
 800fcfc:	4623      	mov	r3, r4
 800fcfe:	469a      	mov	sl, r3
 800fd00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd04:	b10a      	cbz	r2, 800fd0a <_vfiprintf_r+0x86>
 800fd06:	2a25      	cmp	r2, #37	; 0x25
 800fd08:	d1f9      	bne.n	800fcfe <_vfiprintf_r+0x7a>
 800fd0a:	ebba 0b04 	subs.w	fp, sl, r4
 800fd0e:	d00b      	beq.n	800fd28 <_vfiprintf_r+0xa4>
 800fd10:	465b      	mov	r3, fp
 800fd12:	4622      	mov	r2, r4
 800fd14:	4629      	mov	r1, r5
 800fd16:	4630      	mov	r0, r6
 800fd18:	f7ff ffa2 	bl	800fc60 <__sfputs_r>
 800fd1c:	3001      	adds	r0, #1
 800fd1e:	f000 80a9 	beq.w	800fe74 <_vfiprintf_r+0x1f0>
 800fd22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd24:	445a      	add	r2, fp
 800fd26:	9209      	str	r2, [sp, #36]	; 0x24
 800fd28:	f89a 3000 	ldrb.w	r3, [sl]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f000 80a1 	beq.w	800fe74 <_vfiprintf_r+0x1f0>
 800fd32:	2300      	movs	r3, #0
 800fd34:	f04f 32ff 	mov.w	r2, #4294967295
 800fd38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd3c:	f10a 0a01 	add.w	sl, sl, #1
 800fd40:	9304      	str	r3, [sp, #16]
 800fd42:	9307      	str	r3, [sp, #28]
 800fd44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd48:	931a      	str	r3, [sp, #104]	; 0x68
 800fd4a:	4654      	mov	r4, sl
 800fd4c:	2205      	movs	r2, #5
 800fd4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd52:	4854      	ldr	r0, [pc, #336]	; (800fea4 <_vfiprintf_r+0x220>)
 800fd54:	f7f0 fa54 	bl	8000200 <memchr>
 800fd58:	9a04      	ldr	r2, [sp, #16]
 800fd5a:	b9d8      	cbnz	r0, 800fd94 <_vfiprintf_r+0x110>
 800fd5c:	06d1      	lsls	r1, r2, #27
 800fd5e:	bf44      	itt	mi
 800fd60:	2320      	movmi	r3, #32
 800fd62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd66:	0713      	lsls	r3, r2, #28
 800fd68:	bf44      	itt	mi
 800fd6a:	232b      	movmi	r3, #43	; 0x2b
 800fd6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd70:	f89a 3000 	ldrb.w	r3, [sl]
 800fd74:	2b2a      	cmp	r3, #42	; 0x2a
 800fd76:	d015      	beq.n	800fda4 <_vfiprintf_r+0x120>
 800fd78:	9a07      	ldr	r2, [sp, #28]
 800fd7a:	4654      	mov	r4, sl
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	f04f 0c0a 	mov.w	ip, #10
 800fd82:	4621      	mov	r1, r4
 800fd84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd88:	3b30      	subs	r3, #48	; 0x30
 800fd8a:	2b09      	cmp	r3, #9
 800fd8c:	d94d      	bls.n	800fe2a <_vfiprintf_r+0x1a6>
 800fd8e:	b1b0      	cbz	r0, 800fdbe <_vfiprintf_r+0x13a>
 800fd90:	9207      	str	r2, [sp, #28]
 800fd92:	e014      	b.n	800fdbe <_vfiprintf_r+0x13a>
 800fd94:	eba0 0308 	sub.w	r3, r0, r8
 800fd98:	fa09 f303 	lsl.w	r3, r9, r3
 800fd9c:	4313      	orrs	r3, r2
 800fd9e:	9304      	str	r3, [sp, #16]
 800fda0:	46a2      	mov	sl, r4
 800fda2:	e7d2      	b.n	800fd4a <_vfiprintf_r+0xc6>
 800fda4:	9b03      	ldr	r3, [sp, #12]
 800fda6:	1d19      	adds	r1, r3, #4
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	9103      	str	r1, [sp, #12]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	bfbb      	ittet	lt
 800fdb0:	425b      	neglt	r3, r3
 800fdb2:	f042 0202 	orrlt.w	r2, r2, #2
 800fdb6:	9307      	strge	r3, [sp, #28]
 800fdb8:	9307      	strlt	r3, [sp, #28]
 800fdba:	bfb8      	it	lt
 800fdbc:	9204      	strlt	r2, [sp, #16]
 800fdbe:	7823      	ldrb	r3, [r4, #0]
 800fdc0:	2b2e      	cmp	r3, #46	; 0x2e
 800fdc2:	d10c      	bne.n	800fdde <_vfiprintf_r+0x15a>
 800fdc4:	7863      	ldrb	r3, [r4, #1]
 800fdc6:	2b2a      	cmp	r3, #42	; 0x2a
 800fdc8:	d134      	bne.n	800fe34 <_vfiprintf_r+0x1b0>
 800fdca:	9b03      	ldr	r3, [sp, #12]
 800fdcc:	1d1a      	adds	r2, r3, #4
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	9203      	str	r2, [sp, #12]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	bfb8      	it	lt
 800fdd6:	f04f 33ff 	movlt.w	r3, #4294967295
 800fdda:	3402      	adds	r4, #2
 800fddc:	9305      	str	r3, [sp, #20]
 800fdde:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800feb4 <_vfiprintf_r+0x230>
 800fde2:	7821      	ldrb	r1, [r4, #0]
 800fde4:	2203      	movs	r2, #3
 800fde6:	4650      	mov	r0, sl
 800fde8:	f7f0 fa0a 	bl	8000200 <memchr>
 800fdec:	b138      	cbz	r0, 800fdfe <_vfiprintf_r+0x17a>
 800fdee:	9b04      	ldr	r3, [sp, #16]
 800fdf0:	eba0 000a 	sub.w	r0, r0, sl
 800fdf4:	2240      	movs	r2, #64	; 0x40
 800fdf6:	4082      	lsls	r2, r0
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	3401      	adds	r4, #1
 800fdfc:	9304      	str	r3, [sp, #16]
 800fdfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe02:	4829      	ldr	r0, [pc, #164]	; (800fea8 <_vfiprintf_r+0x224>)
 800fe04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe08:	2206      	movs	r2, #6
 800fe0a:	f7f0 f9f9 	bl	8000200 <memchr>
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	d03f      	beq.n	800fe92 <_vfiprintf_r+0x20e>
 800fe12:	4b26      	ldr	r3, [pc, #152]	; (800feac <_vfiprintf_r+0x228>)
 800fe14:	bb1b      	cbnz	r3, 800fe5e <_vfiprintf_r+0x1da>
 800fe16:	9b03      	ldr	r3, [sp, #12]
 800fe18:	3307      	adds	r3, #7
 800fe1a:	f023 0307 	bic.w	r3, r3, #7
 800fe1e:	3308      	adds	r3, #8
 800fe20:	9303      	str	r3, [sp, #12]
 800fe22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe24:	443b      	add	r3, r7
 800fe26:	9309      	str	r3, [sp, #36]	; 0x24
 800fe28:	e768      	b.n	800fcfc <_vfiprintf_r+0x78>
 800fe2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe2e:	460c      	mov	r4, r1
 800fe30:	2001      	movs	r0, #1
 800fe32:	e7a6      	b.n	800fd82 <_vfiprintf_r+0xfe>
 800fe34:	2300      	movs	r3, #0
 800fe36:	3401      	adds	r4, #1
 800fe38:	9305      	str	r3, [sp, #20]
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	f04f 0c0a 	mov.w	ip, #10
 800fe40:	4620      	mov	r0, r4
 800fe42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe46:	3a30      	subs	r2, #48	; 0x30
 800fe48:	2a09      	cmp	r2, #9
 800fe4a:	d903      	bls.n	800fe54 <_vfiprintf_r+0x1d0>
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d0c6      	beq.n	800fdde <_vfiprintf_r+0x15a>
 800fe50:	9105      	str	r1, [sp, #20]
 800fe52:	e7c4      	b.n	800fdde <_vfiprintf_r+0x15a>
 800fe54:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe58:	4604      	mov	r4, r0
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	e7f0      	b.n	800fe40 <_vfiprintf_r+0x1bc>
 800fe5e:	ab03      	add	r3, sp, #12
 800fe60:	9300      	str	r3, [sp, #0]
 800fe62:	462a      	mov	r2, r5
 800fe64:	4b12      	ldr	r3, [pc, #72]	; (800feb0 <_vfiprintf_r+0x22c>)
 800fe66:	a904      	add	r1, sp, #16
 800fe68:	4630      	mov	r0, r6
 800fe6a:	f7fd f96d 	bl	800d148 <_printf_float>
 800fe6e:	4607      	mov	r7, r0
 800fe70:	1c78      	adds	r0, r7, #1
 800fe72:	d1d6      	bne.n	800fe22 <_vfiprintf_r+0x19e>
 800fe74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe76:	07d9      	lsls	r1, r3, #31
 800fe78:	d405      	bmi.n	800fe86 <_vfiprintf_r+0x202>
 800fe7a:	89ab      	ldrh	r3, [r5, #12]
 800fe7c:	059a      	lsls	r2, r3, #22
 800fe7e:	d402      	bmi.n	800fe86 <_vfiprintf_r+0x202>
 800fe80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe82:	f7fe f89b 	bl	800dfbc <__retarget_lock_release_recursive>
 800fe86:	89ab      	ldrh	r3, [r5, #12]
 800fe88:	065b      	lsls	r3, r3, #25
 800fe8a:	f53f af1d 	bmi.w	800fcc8 <_vfiprintf_r+0x44>
 800fe8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe90:	e71c      	b.n	800fccc <_vfiprintf_r+0x48>
 800fe92:	ab03      	add	r3, sp, #12
 800fe94:	9300      	str	r3, [sp, #0]
 800fe96:	462a      	mov	r2, r5
 800fe98:	4b05      	ldr	r3, [pc, #20]	; (800feb0 <_vfiprintf_r+0x22c>)
 800fe9a:	a904      	add	r1, sp, #16
 800fe9c:	4630      	mov	r0, r6
 800fe9e:	f7fd fbf7 	bl	800d690 <_printf_i>
 800fea2:	e7e4      	b.n	800fe6e <_vfiprintf_r+0x1ea>
 800fea4:	080126d4 	.word	0x080126d4
 800fea8:	080126de 	.word	0x080126de
 800feac:	0800d149 	.word	0x0800d149
 800feb0:	0800fc61 	.word	0x0800fc61
 800feb4:	080126da 	.word	0x080126da

0800feb8 <_raise_r>:
 800feb8:	291f      	cmp	r1, #31
 800feba:	b538      	push	{r3, r4, r5, lr}
 800febc:	4604      	mov	r4, r0
 800febe:	460d      	mov	r5, r1
 800fec0:	d904      	bls.n	800fecc <_raise_r+0x14>
 800fec2:	2316      	movs	r3, #22
 800fec4:	6003      	str	r3, [r0, #0]
 800fec6:	f04f 30ff 	mov.w	r0, #4294967295
 800feca:	bd38      	pop	{r3, r4, r5, pc}
 800fecc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fece:	b112      	cbz	r2, 800fed6 <_raise_r+0x1e>
 800fed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fed4:	b94b      	cbnz	r3, 800feea <_raise_r+0x32>
 800fed6:	4620      	mov	r0, r4
 800fed8:	f000 f830 	bl	800ff3c <_getpid_r>
 800fedc:	462a      	mov	r2, r5
 800fede:	4601      	mov	r1, r0
 800fee0:	4620      	mov	r0, r4
 800fee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fee6:	f000 b817 	b.w	800ff18 <_kill_r>
 800feea:	2b01      	cmp	r3, #1
 800feec:	d00a      	beq.n	800ff04 <_raise_r+0x4c>
 800feee:	1c59      	adds	r1, r3, #1
 800fef0:	d103      	bne.n	800fefa <_raise_r+0x42>
 800fef2:	2316      	movs	r3, #22
 800fef4:	6003      	str	r3, [r0, #0]
 800fef6:	2001      	movs	r0, #1
 800fef8:	e7e7      	b.n	800feca <_raise_r+0x12>
 800fefa:	2400      	movs	r4, #0
 800fefc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff00:	4628      	mov	r0, r5
 800ff02:	4798      	blx	r3
 800ff04:	2000      	movs	r0, #0
 800ff06:	e7e0      	b.n	800feca <_raise_r+0x12>

0800ff08 <raise>:
 800ff08:	4b02      	ldr	r3, [pc, #8]	; (800ff14 <raise+0xc>)
 800ff0a:	4601      	mov	r1, r0
 800ff0c:	6818      	ldr	r0, [r3, #0]
 800ff0e:	f7ff bfd3 	b.w	800feb8 <_raise_r>
 800ff12:	bf00      	nop
 800ff14:	200009d0 	.word	0x200009d0

0800ff18 <_kill_r>:
 800ff18:	b538      	push	{r3, r4, r5, lr}
 800ff1a:	4d07      	ldr	r5, [pc, #28]	; (800ff38 <_kill_r+0x20>)
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	4604      	mov	r4, r0
 800ff20:	4608      	mov	r0, r1
 800ff22:	4611      	mov	r1, r2
 800ff24:	602b      	str	r3, [r5, #0]
 800ff26:	f7f4 f97b 	bl	8004220 <_kill>
 800ff2a:	1c43      	adds	r3, r0, #1
 800ff2c:	d102      	bne.n	800ff34 <_kill_r+0x1c>
 800ff2e:	682b      	ldr	r3, [r5, #0]
 800ff30:	b103      	cbz	r3, 800ff34 <_kill_r+0x1c>
 800ff32:	6023      	str	r3, [r4, #0]
 800ff34:	bd38      	pop	{r3, r4, r5, pc}
 800ff36:	bf00      	nop
 800ff38:	20019ffc 	.word	0x20019ffc

0800ff3c <_getpid_r>:
 800ff3c:	f7f4 b968 	b.w	8004210 <_getpid>

0800ff40 <_malloc_usable_size_r>:
 800ff40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff44:	1f18      	subs	r0, r3, #4
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	bfbc      	itt	lt
 800ff4a:	580b      	ldrlt	r3, [r1, r0]
 800ff4c:	18c0      	addlt	r0, r0, r3
 800ff4e:	4770      	bx	lr

0800ff50 <_init>:
 800ff50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff52:	bf00      	nop
 800ff54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff56:	bc08      	pop	{r3}
 800ff58:	469e      	mov	lr, r3
 800ff5a:	4770      	bx	lr

0800ff5c <_fini>:
 800ff5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff5e:	bf00      	nop
 800ff60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff62:	bc08      	pop	{r3}
 800ff64:	469e      	mov	lr, r3
 800ff66:	4770      	bx	lr

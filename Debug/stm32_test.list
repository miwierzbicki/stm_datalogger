
stm32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f704  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002654  0800f8a8  0800f8a8  0001f8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011efc  08011efc  00030aa4  2**0
                  CONTENTS
  4 .ARM          00000008  08011efc  08011efc  00021efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f04  08011f04  00030aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f04  08011f04  00021f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f08  08011f08  00021f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000aa4  20000000  08011f0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019470  20000aa4  080129b0  00030aa4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20019f14  080129b0  00039f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030aa4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030ad4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d8de  00000000  00000000  00030b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004710  00000000  00000000  0004e3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad8  00000000  00000000  00052b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014dc  00000000  00000000  000545e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e794  00000000  00000000  00055abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002590c  00000000  00000000  00074250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a917d  00000000  00000000  00099b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000082dc  00000000  00000000  00142cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0014afb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000aa4 	.word	0x20000aa4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f88c 	.word	0x0800f88c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000aa8 	.word	0x20000aa8
 80001dc:	0800f88c 	.word	0x0800f88c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b970 	b.w	8000f10 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9e08      	ldr	r6, [sp, #32]
 8000c4e:	460d      	mov	r5, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	460f      	mov	r7, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4694      	mov	ip, r2
 8000c5c:	d965      	bls.n	8000d2a <__udivmoddi4+0xe2>
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	b143      	cbz	r3, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c68:	f1c3 0220 	rsb	r2, r3, #32
 8000c6c:	409f      	lsls	r7, r3
 8000c6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c72:	4317      	orrs	r7, r2
 8000c74:	409c      	lsls	r4, r3
 8000c76:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7a:	fa1f f58c 	uxth.w	r5, ip
 8000c7e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c82:	0c22      	lsrs	r2, r4, #16
 8000c84:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c8c:	fb01 f005 	mul.w	r0, r1, r5
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c9c:	f080 811c 	bcs.w	8000ed8 <__udivmoddi4+0x290>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f240 8119 	bls.w	8000ed8 <__udivmoddi4+0x290>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4462      	add	r2, ip
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cba:	fb00 f505 	mul.w	r5, r0, r5
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d90a      	bls.n	8000cd8 <__udivmoddi4+0x90>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x294>
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x294>
 8000cd4:	4464      	add	r4, ip
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11e      	cbz	r6, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40dc      	lsrs	r4, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0xbc>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f000 80ed 	beq.w	8000ed2 <__udivmoddi4+0x28a>
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	fab3 f183 	clz	r1, r3
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	d149      	bne.n	8000da0 <__udivmoddi4+0x158>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	d302      	bcc.n	8000d16 <__udivmoddi4+0xce>
 8000d10:	4282      	cmp	r2, r0
 8000d12:	f200 80f8 	bhi.w	8000f06 <__udivmoddi4+0x2be>
 8000d16:	1a84      	subs	r4, r0, r2
 8000d18:	eb65 0203 	sbc.w	r2, r5, r3
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	4617      	mov	r7, r2
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d0e2      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	e9c6 4700 	strd	r4, r7, [r6]
 8000d28:	e7df      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d2a:	b902      	cbnz	r2, 8000d2e <__udivmoddi4+0xe6>
 8000d2c:	deff      	udf	#255	; 0xff
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8090 	bne.w	8000e58 <__udivmoddi4+0x210>
 8000d38:	1a8a      	subs	r2, r1, r2
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2101      	movs	r1, #1
 8000d44:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d48:	fb07 2015 	mls	r0, r7, r5, r2
 8000d4c:	0c22      	lsrs	r2, r4, #16
 8000d4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d52:	fb0e f005 	mul.w	r0, lr, r5
 8000d56:	4290      	cmp	r0, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x124>
 8000d5a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d5e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x122>
 8000d64:	4290      	cmp	r0, r2
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2b8>
 8000d6a:	4645      	mov	r5, r8
 8000d6c:	1a12      	subs	r2, r2, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d74:	fb07 2210 	mls	r2, r7, r0, r2
 8000d78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x14e>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x14c>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2c2>
 8000d94:	4610      	mov	r0, r2
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d9e:	e79f      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000da0:	f1c1 0720 	rsb	r7, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa05 f401 	lsl.w	r4, r5, r1
 8000db2:	fa20 f307 	lsr.w	r3, r0, r7
 8000db6:	40fd      	lsrs	r5, r7
 8000db8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dca:	0c1c      	lsrs	r4, r3, #16
 8000dcc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dd4:	42a5      	cmp	r5, r4
 8000dd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dda:	fa00 f001 	lsl.w	r0, r0, r1
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b0>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2b4>
 8000dec:	42a5      	cmp	r5, r4
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2b4>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4464      	add	r4, ip
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	b29d      	uxth	r5, r3
 8000dfc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e00:	fb09 4413 	mls	r4, r9, r3, r4
 8000e04:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e08:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1da>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e26:	fba3 9502 	umull	r9, r5, r3, r2
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46ae      	mov	lr, r5
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x29c>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x298>
 8000e38:	b156      	cbz	r6, 8000e50 <__udivmoddi4+0x208>
 8000e3a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e3e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e42:	fa04 f707 	lsl.w	r7, r4, r7
 8000e46:	40ca      	lsrs	r2, r1
 8000e48:	40cc      	lsrs	r4, r1
 8000e4a:	4317      	orrs	r7, r2
 8000e4c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e58:	f1c3 0120 	rsb	r1, r3, #32
 8000e5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e60:	fa20 f201 	lsr.w	r2, r0, r1
 8000e64:	fa25 f101 	lsr.w	r1, r5, r1
 8000e68:	409d      	lsls	r5, r3
 8000e6a:	432a      	orrs	r2, r5
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1510 	mls	r5, r7, r0, r1
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e82:	fb00 f50e 	mul.w	r5, r0, lr
 8000e86:	428d      	cmp	r5, r1
 8000e88:	fa04 f403 	lsl.w	r4, r4, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x258>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e98:	428d      	cmp	r5, r1
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1b49      	subs	r1, r1, r5
 8000ea2:	b292      	uxth	r2, r2
 8000ea4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ea8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	fb05 f10e 	mul.w	r1, r5, lr
 8000eb4:	4291      	cmp	r1, r2
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x282>
 8000eb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ebc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec6:	3d02      	subs	r5, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	1a52      	subs	r2, r2, r1
 8000ecc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0xfc>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xa2>
 8000ed8:	4639      	mov	r1, r7
 8000eda:	e6e6      	b.n	8000caa <__udivmoddi4+0x62>
 8000edc:	4610      	mov	r0, r2
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x90>
 8000ee0:	4548      	cmp	r0, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f0>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eec:	3b01      	subs	r3, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f0>
 8000ef0:	4645      	mov	r5, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x282>
 8000ef4:	462b      	mov	r3, r5
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1da>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x258>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b0>
 8000f00:	3d02      	subs	r5, #2
 8000f02:	4462      	add	r2, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x124>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e70a      	b.n	8000d20 <__udivmoddi4+0xd8>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x14e>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <adc_int_init>:
#include "encoder.h"

ADC_HandleTypeDef *hadc1_new;
I2C_HandleTypeDef *hi2c2_new;

void adc_int_init(ADC_HandleTypeDef *hadc1) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	hadc1_new=hadc1;
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <adc_int_init+0x1c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000ac0 	.word	0x20000ac0

08000f34 <adc_ext_init>:

void adc_ext_init(I2C_HandleTypeDef *hi2c2) {
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	hi2c2_new=hi2c2;
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <adc_ext_init+0x1c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000ac4 	.word	0x20000ac4

08000f54 <adc_select_ch>:


void adc_select_ch(uint32_t channel) { //trzeba wywolywac za kazdym razem przed konwersją adc bo inaczej będzie tylko ch0!!!!!!!!
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	//wartości channel = ADC_CHANNEL_0, 1, 2, 3
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc1_new, &sConfig) != HAL_OK)
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <adc_select_ch+0x44>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f107 0208 	add.w	r2, r7, #8
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f004 f99f 	bl	80052c4 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <adc_select_ch+0x3c>
	{
	Error_Handler();
 8000f8c:	f001 facc 	bl	8002528 <Error_Handler>
	}
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000ac0 	.word	0x20000ac0

08000f9c <getValueAdcExtCh0>:
    //send_uart(adcStr);
}



float getValueAdcExtCh0(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af02      	add	r7, sp, #8
	#define ADS1115_ADDRESS 0x48
	unsigned char ADSwrite[6];
	int16_t reading;
	volatile float voltage;
	const float voltageConv = 6.114 / 32768.0;
 8000fa2:	4b24      	ldr	r3, [pc, #144]	; (8001034 <getValueAdcExtCh0+0x98>)
 8000fa4:	613b      	str	r3, [r7, #16]
	ADSwrite[0] = 0x01;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	723b      	strb	r3, [r7, #8]
	ADSwrite[1] = 0xC1; //11000001
 8000faa:	23c1      	movs	r3, #193	; 0xc1
 8000fac:	727b      	strb	r3, [r7, #9]
	ADSwrite[2] = 0x83; //10000011 LSB
 8000fae:	2383      	movs	r3, #131	; 0x83
 8000fb0:	72bb      	strb	r3, [r7, #10]

	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 8000fb2:	4b21      	ldr	r3, [pc, #132]	; (8001038 <getValueAdcExtCh0+0x9c>)
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	f107 0208 	add.w	r2, r7, #8
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	2190      	movs	r1, #144	; 0x90
 8000fc2:	f004 ffd1 	bl	8005f68 <HAL_I2C_Master_Transmit>
	ADSwrite[0] = 0x00;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <getValueAdcExtCh0+0x9c>)
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	f107 0208 	add.w	r2, r7, #8
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	2190      	movs	r1, #144	; 0x90
 8000fda:	f004 ffc5 	bl	8005f68 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000fde:	2014      	movs	r0, #20
 8000fe0:	f003 ffbc 	bl	8004f5c <HAL_Delay>

	HAL_I2C_Master_Receive(hi2c2_new, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <getValueAdcExtCh0+0x9c>)
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	f107 0208 	add.w	r2, r7, #8
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	2190      	movs	r1, #144	; 0x90
 8000ff4:	f005 f8b6 	bl	8006164 <HAL_I2C_Master_Receive>
	reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 8000ff8:	7a3b      	ldrb	r3, [r7, #8]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	7a7b      	ldrb	r3, [r7, #9]
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	82fb      	strh	r3, [r7, #22]
	if(reading < 0) {
 8001006:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800100a:	2b00      	cmp	r3, #0
 800100c:	da01      	bge.n	8001012 <getValueAdcExtCh0+0x76>
		reading = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	82fb      	strh	r3, [r7, #22]
	}
	return voltage = reading * voltageConv;
 8001012:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001026:	edc7 7a01 	vstr	s15, [r7, #4]
//	char str[20];
//	sprintf(str, "ext_ch0=%.3f V\n\r", voltage);
//	send_uart(str);

}
 800102a:	eeb0 0a67 	vmov.f32	s0, s15
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	3943a5e3 	.word	0x3943a5e3
 8001038:	20000ac4 	.word	0x20000ac4

0800103c <getValueAdcExtCh1>:
float getValueAdcExtCh1(void) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af02      	add	r7, sp, #8
#define ADS1115_ADDRESS 0x48
	unsigned char ADSwrite[6];
	int16_t reading;
	volatile float voltage;
	const float voltageConv = 6.114 / 32768.0;
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <getValueAdcExtCh1+0x98>)
 8001044:	613b      	str	r3, [r7, #16]
	ADSwrite[0] = 0x01;
 8001046:	2301      	movs	r3, #1
 8001048:	723b      	strb	r3, [r7, #8]
	ADSwrite[1] =  0xD1; //11000001
 800104a:	23d1      	movs	r3, #209	; 0xd1
 800104c:	727b      	strb	r3, [r7, #9]
	ADSwrite[2] = 0x83; //10000011 LSB
 800104e:	2383      	movs	r3, #131	; 0x83
 8001050:	72bb      	strb	r3, [r7, #10]

	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <getValueAdcExtCh1+0x9c>)
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	f107 0208 	add.w	r2, r7, #8
 800105a:	2364      	movs	r3, #100	; 0x64
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2303      	movs	r3, #3
 8001060:	2190      	movs	r1, #144	; 0x90
 8001062:	f004 ff81 	bl	8005f68 <HAL_I2C_Master_Transmit>
	ADSwrite[0] = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <getValueAdcExtCh1+0x9c>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	f107 0208 	add.w	r2, r7, #8
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	2190      	movs	r1, #144	; 0x90
 800107a:	f004 ff75 	bl	8005f68 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800107e:	2014      	movs	r0, #20
 8001080:	f003 ff6c 	bl	8004f5c <HAL_Delay>

	HAL_I2C_Master_Receive(hi2c2_new, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <getValueAdcExtCh1+0x9c>)
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	f107 0208 	add.w	r2, r7, #8
 800108c:	2364      	movs	r3, #100	; 0x64
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2302      	movs	r3, #2
 8001092:	2190      	movs	r1, #144	; 0x90
 8001094:	f005 f866 	bl	8006164 <HAL_I2C_Master_Receive>
	reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 8001098:	7a3b      	ldrb	r3, [r7, #8]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	7a7b      	ldrb	r3, [r7, #9]
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	82fb      	strh	r3, [r7, #22]
	if(reading < 0) {
 80010a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da01      	bge.n	80010b2 <getValueAdcExtCh1+0x76>
		reading = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	82fb      	strh	r3, [r7, #22]
	}
	return voltage = reading * voltageConv;
 80010b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010be:	edd7 7a04 	vldr	s15, [r7, #16]
 80010c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c6:	edc7 7a01 	vstr	s15, [r7, #4]
}
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	3943a5e3 	.word	0x3943a5e3
 80010d8:	20000ac4 	.word	0x20000ac4

080010dc <getValueAdcExtCh2>:
float getValueAdcExtCh2(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af02      	add	r7, sp, #8
#define ADS1115_ADDRESS 0x48
	unsigned char ADSwrite[6];
	int16_t reading;
	volatile float voltage;
	const float voltageConv = 6.114 / 32768.0;
 80010e2:	4b24      	ldr	r3, [pc, #144]	; (8001174 <getValueAdcExtCh2+0x98>)
 80010e4:	613b      	str	r3, [r7, #16]
	ADSwrite[0] = 0x01;
 80010e6:	2301      	movs	r3, #1
 80010e8:	723b      	strb	r3, [r7, #8]
	ADSwrite[1] = 0xE1; //11000001
 80010ea:	23e1      	movs	r3, #225	; 0xe1
 80010ec:	727b      	strb	r3, [r7, #9]
	ADSwrite[2] = 0x83; //10000011 LSB
 80010ee:	2383      	movs	r3, #131	; 0x83
 80010f0:	72bb      	strb	r3, [r7, #10]

	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <getValueAdcExtCh2+0x9c>)
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	f107 0208 	add.w	r2, r7, #8
 80010fa:	2364      	movs	r3, #100	; 0x64
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2303      	movs	r3, #3
 8001100:	2190      	movs	r1, #144	; 0x90
 8001102:	f004 ff31 	bl	8005f68 <HAL_I2C_Master_Transmit>
	ADSwrite[0] = 0x00;
 8001106:	2300      	movs	r3, #0
 8001108:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <getValueAdcExtCh2+0x9c>)
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	f107 0208 	add.w	r2, r7, #8
 8001112:	2364      	movs	r3, #100	; 0x64
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	2190      	movs	r1, #144	; 0x90
 800111a:	f004 ff25 	bl	8005f68 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800111e:	2014      	movs	r0, #20
 8001120:	f003 ff1c 	bl	8004f5c <HAL_Delay>

	HAL_I2C_Master_Receive(hi2c2_new, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <getValueAdcExtCh2+0x9c>)
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	f107 0208 	add.w	r2, r7, #8
 800112c:	2364      	movs	r3, #100	; 0x64
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2302      	movs	r3, #2
 8001132:	2190      	movs	r1, #144	; 0x90
 8001134:	f005 f816 	bl	8006164 <HAL_I2C_Master_Receive>
	reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 8001138:	7a3b      	ldrb	r3, [r7, #8]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	7a7b      	ldrb	r3, [r7, #9]
 8001140:	b21b      	sxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	82fb      	strh	r3, [r7, #22]
	if(reading < 0) {
 8001146:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800114a:	2b00      	cmp	r3, #0
 800114c:	da01      	bge.n	8001152 <getValueAdcExtCh2+0x76>
		reading = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	82fb      	strh	r3, [r7, #22]
	}
	return voltage = reading * voltageConv;
 8001152:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800115e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001166:	edc7 7a01 	vstr	s15, [r7, #4]
}
 800116a:	eeb0 0a67 	vmov.f32	s0, s15
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	3943a5e3 	.word	0x3943a5e3
 8001178:	20000ac4 	.word	0x20000ac4

0800117c <getValueAdcExtCh3>:
float getValueAdcExtCh3(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af02      	add	r7, sp, #8
#define ADS1115_ADDRESS 0x48
	unsigned char ADSwrite[6];
	int16_t reading;
	volatile float voltage;
	const float voltageConv = 6.114 / 32768.0;
 8001182:	4b24      	ldr	r3, [pc, #144]	; (8001214 <getValueAdcExtCh3+0x98>)
 8001184:	613b      	str	r3, [r7, #16]
	ADSwrite[0] = 0x01;
 8001186:	2301      	movs	r3, #1
 8001188:	723b      	strb	r3, [r7, #8]
	ADSwrite[1] = 0xF1; //11000001
 800118a:	23f1      	movs	r3, #241	; 0xf1
 800118c:	727b      	strb	r3, [r7, #9]
	ADSwrite[2] = 0x83; //10000011 LSB
 800118e:	2383      	movs	r3, #131	; 0x83
 8001190:	72bb      	strb	r3, [r7, #10]

	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <getValueAdcExtCh3+0x9c>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	f107 0208 	add.w	r2, r7, #8
 800119a:	2364      	movs	r3, #100	; 0x64
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2303      	movs	r3, #3
 80011a0:	2190      	movs	r1, #144	; 0x90
 80011a2:	f004 fee1 	bl	8005f68 <HAL_I2C_Master_Transmit>
	ADSwrite[0] = 0x00;
 80011a6:	2300      	movs	r3, #0
 80011a8:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(hi2c2_new, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <getValueAdcExtCh3+0x9c>)
 80011ac:	6818      	ldr	r0, [r3, #0]
 80011ae:	f107 0208 	add.w	r2, r7, #8
 80011b2:	2364      	movs	r3, #100	; 0x64
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	2190      	movs	r1, #144	; 0x90
 80011ba:	f004 fed5 	bl	8005f68 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80011be:	2014      	movs	r0, #20
 80011c0:	f003 fecc 	bl	8004f5c <HAL_Delay>

	HAL_I2C_Master_Receive(hi2c2_new, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <getValueAdcExtCh3+0x9c>)
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	f107 0208 	add.w	r2, r7, #8
 80011cc:	2364      	movs	r3, #100	; 0x64
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2302      	movs	r3, #2
 80011d2:	2190      	movs	r1, #144	; 0x90
 80011d4:	f004 ffc6 	bl	8006164 <HAL_I2C_Master_Receive>
	reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 80011d8:	7a3b      	ldrb	r3, [r7, #8]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b21a      	sxth	r2, r3
 80011de:	7a7b      	ldrb	r3, [r7, #9]
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	82fb      	strh	r3, [r7, #22]
	if(reading < 0) {
 80011e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	da01      	bge.n	80011f2 <getValueAdcExtCh3+0x76>
		reading = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	82fb      	strh	r3, [r7, #22]
	}
	return voltage = reading * voltageConv;
 80011f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001206:	edc7 7a01 	vstr	s15, [r7, #4]
}
 800120a:	eeb0 0a67 	vmov.f32	s0, s15
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	3943a5e3 	.word	0x3943a5e3
 8001218:	20000ac4 	.word	0x20000ac4

0800121c <getValueAdcIntCh0>:
float getValueAdcIntCh0(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
	uint32_t value;
	adc_select_ch(ADC_CHANNEL_0);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff fe96 	bl	8000f54 <adc_select_ch>
	HAL_ADC_Start(hadc1_new);
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <getValueAdcIntCh0+0x60>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f003 fefd 	bl	800502c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1_new, HAL_MAX_DELAY);
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <getValueAdcIntCh0+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f04f 31ff 	mov.w	r1, #4294967295
 800123a:	4618      	mov	r0, r3
 800123c:	f003 ffaa 	bl	8005194 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(hadc1_new);
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <getValueAdcIntCh0+0x60>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f004 f830 	bl	80052aa <HAL_ADC_GetValue>
 800124a:	6078      	str	r0, [r7, #4]
	float voltage = 3.3f * value / 4096.0f;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001256:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001280 <getValueAdcIntCh0+0x64>
 800125a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800125e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001284 <getValueAdcIntCh0+0x68>
 8001262:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001266:	edc7 7a00 	vstr	s15, [r7]
	//sprintf(adcStr, "a3=%lu (%.3f V)\n\r", value, voltage);
	return voltage;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	ee07 3a90 	vmov	s15, r3
	//send_uart(adcStr);
}
 8001270:	eeb0 0a67 	vmov.f32	s0, s15
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000ac0 	.word	0x20000ac0
 8001280:	40533333 	.word	0x40533333
 8001284:	45800000 	.word	0x45800000

08001288 <getValueAdcIntCh1>:
float getValueAdcIntCh1(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
	uint32_t value;
	adc_select_ch(ADC_CHANNEL_1);
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff fe60 	bl	8000f54 <adc_select_ch>
	HAL_ADC_Start(hadc1_new);
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <getValueAdcIntCh1+0x60>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f003 fec7 	bl	800502c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1_new, HAL_MAX_DELAY);
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <getValueAdcIntCh1+0x60>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f04f 31ff 	mov.w	r1, #4294967295
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 ff74 	bl	8005194 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(hadc1_new);
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <getValueAdcIntCh1+0x60>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 fffa 	bl	80052aa <HAL_ADC_GetValue>
 80012b6:	6078      	str	r0, [r7, #4]
	float voltage = 3.3f * value / 4096.0f;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80012ec <getValueAdcIntCh1+0x64>
 80012c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ca:	eddf 6a09 	vldr	s13, [pc, #36]	; 80012f0 <getValueAdcIntCh1+0x68>
 80012ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d2:	edc7 7a00 	vstr	s15, [r7]
	//sprintf(adcStr, "a3=%lu (%.3f V)\n\r", value, voltage);
	return voltage;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	ee07 3a90 	vmov	s15, r3
	//send_uart(adcStr);
}
 80012dc:	eeb0 0a67 	vmov.f32	s0, s15
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000ac0 	.word	0x20000ac0
 80012ec:	40533333 	.word	0x40533333
 80012f0:	45800000 	.word	0x45800000

080012f4 <getValueAdcIntCh2>:
float getValueAdcIntCh2(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	uint32_t value;
	adc_select_ch(ADC_CHANNEL_2);
 80012fa:	2002      	movs	r0, #2
 80012fc:	f7ff fe2a 	bl	8000f54 <adc_select_ch>
	HAL_ADC_Start(hadc1_new);
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <getValueAdcIntCh2+0x60>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fe91 	bl	800502c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1_new, HAL_MAX_DELAY);
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <getValueAdcIntCh2+0x60>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f04f 31ff 	mov.w	r1, #4294967295
 8001312:	4618      	mov	r0, r3
 8001314:	f003 ff3e 	bl	8005194 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(hadc1_new);
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <getValueAdcIntCh2+0x60>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f003 ffc4 	bl	80052aa <HAL_ADC_GetValue>
 8001322:	6078      	str	r0, [r7, #4]
	float voltage = 3.3f * value / 4096.0f;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001358 <getValueAdcIntCh2+0x64>
 8001332:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001336:	eddf 6a09 	vldr	s13, [pc, #36]	; 800135c <getValueAdcIntCh2+0x68>
 800133a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800133e:	edc7 7a00 	vstr	s15, [r7]
	//sprintf(adcStr, "a3=%lu (%.3f V)\n\r", value, voltage);
	return voltage;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	ee07 3a90 	vmov	s15, r3
	//send_uart(adcStr);
}
 8001348:	eeb0 0a67 	vmov.f32	s0, s15
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000ac0 	.word	0x20000ac0
 8001358:	40533333 	.word	0x40533333
 800135c:	45800000 	.word	0x45800000

08001360 <getValueAdcIntCh3>:
float getValueAdcIntCh3(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	uint32_t value;
	adc_select_ch(ADC_CHANNEL_3);
 8001366:	2003      	movs	r0, #3
 8001368:	f7ff fdf4 	bl	8000f54 <adc_select_ch>
	HAL_ADC_Start(hadc1_new);
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <getValueAdcIntCh3+0x60>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f003 fe5b 	bl	800502c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1_new, HAL_MAX_DELAY);
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <getValueAdcIntCh3+0x60>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f04f 31ff 	mov.w	r1, #4294967295
 800137e:	4618      	mov	r0, r3
 8001380:	f003 ff08 	bl	8005194 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(hadc1_new);
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <getValueAdcIntCh3+0x60>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f003 ff8e 	bl	80052aa <HAL_ADC_GetValue>
 800138e:	6078      	str	r0, [r7, #4]
	float voltage = 3.3f * value / 4096.0f;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800139a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80013c4 <getValueAdcIntCh3+0x64>
 800139e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013a2:	eddf 6a09 	vldr	s13, [pc, #36]	; 80013c8 <getValueAdcIntCh3+0x68>
 80013a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013aa:	edc7 7a00 	vstr	s15, [r7]
	//sprintf(adcStr, "a3=%lu (%.3f V)\n\r", value, voltage);
	return voltage;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	ee07 3a90 	vmov	s15, r3
	//send_uart(adcStr);
}
 80013b4:	eeb0 0a67 	vmov.f32	s0, s15
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000ac0 	.word	0x20000ac0
 80013c4:	40533333 	.word	0x40533333
 80013c8:	45800000 	.word	0x45800000

080013cc <getValueDs1>:
const uint8_t ds1addr[] = {0x28, 0x0, 0x2f, 0xfd, 0x5, 0x0, 0x0, 0x50};
const uint8_t ds2addr[] = {0x28, 0xc3, 0xa5, 0xfd, 0x5, 0x0, 0x0, 0xe0};
const uint8_t ds3addr[];


float getValueDs1(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
		oneWireReset();
 80013d2:	f000 f8f9 	bl	80015c8 <oneWireReset>
		oneWireWrite(0x55);
 80013d6:	2055      	movs	r0, #85	; 0x55
 80013d8:	f000 f972 	bl	80016c0 <oneWireWrite>

		for(int i=0; i<8; i++) {
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
 80013e0:	e009      	b.n	80013f6 <getValueDs1+0x2a>
			oneWireWrite(ds1addr[i]);
 80013e2:	4a2b      	ldr	r2, [pc, #172]	; (8001490 <getValueDs1+0xc4>)
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f968 	bl	80016c0 <oneWireWrite>
		for(int i=0; i<8; i++) {
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	3301      	adds	r3, #1
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	2b07      	cmp	r3, #7
 80013fa:	ddf2      	ble.n	80013e2 <getValueDs1+0x16>
		}
		oneWireWrite(0x44);
 80013fc:	2044      	movs	r0, #68	; 0x44
 80013fe:	f000 f95f 	bl	80016c0 <oneWireWrite>
		HAL_Delay(95);
 8001402:	205f      	movs	r0, #95	; 0x5f
 8001404:	f003 fdaa 	bl	8004f5c <HAL_Delay>
		oneWireReset();
 8001408:	f000 f8de 	bl	80015c8 <oneWireReset>
		oneWireWrite(0x55);
 800140c:	2055      	movs	r0, #85	; 0x55
 800140e:	f000 f957 	bl	80016c0 <oneWireWrite>
		for(int i=0; i<8; i++) {
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	e009      	b.n	800142c <getValueDs1+0x60>
			oneWireWrite(ds1addr[i]);
 8001418:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <getValueDs1+0xc4>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f000 f94d 	bl	80016c0 <oneWireWrite>
		for(int i=0; i<8; i++) {
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	3301      	adds	r3, #1
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2b07      	cmp	r3, #7
 8001430:	ddf2      	ble.n	8001418 <getValueDs1+0x4c>
		}
		oneWireWrite(0xbe);
 8001432:	20be      	movs	r0, #190	; 0xbe
 8001434:	f000 f944 	bl	80016c0 <oneWireWrite>
		int i;
		uint8_t rom_code[9];
		for (i = 0; i < 9; i++)
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e00b      	b.n	8001456 <getValueDs1+0x8a>
		  rom_code[i] = oneWireRead();
 800143e:	f000 f95b 	bl	80016f8 <oneWireRead>
 8001442:	4603      	mov	r3, r0
 8001444:	4619      	mov	r1, r3
 8001446:	1d3a      	adds	r2, r7, #4
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	4413      	add	r3, r2
 800144c:	460a      	mov	r2, r1
 800144e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 9; i++)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3301      	adds	r3, #1
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2b08      	cmp	r3, #8
 800145a:	ddf0      	ble.n	800143e <getValueDs1+0x72>
		float temp= ((rom_code[1]<<8) | (rom_code[0]));
 800145c:	797b      	ldrb	r3, [r7, #5]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	793a      	ldrb	r2, [r7, #4]
 8001462:	4313      	orrs	r3, r2
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146c:	edc7 7a04 	vstr	s15, [r7, #16]

		//send_uart_float(temp);
		return temp = temp/16.0f;
 8001470:	ed97 7a04 	vldr	s14, [r7, #16]
 8001474:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147c:	edc7 7a04 	vstr	s15, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	ee07 3a90 	vmov	s15, r3
}
 8001486:	eeb0 0a67 	vmov.f32	s0, s15
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	0801002c 	.word	0x0801002c

08001494 <getValueDs2>:

float getValueDs2(void) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
	oneWireReset();
 800149a:	f000 f895 	bl	80015c8 <oneWireReset>
	oneWireWrite(0x55);
 800149e:	2055      	movs	r0, #85	; 0x55
 80014a0:	f000 f90e 	bl	80016c0 <oneWireWrite>

	for(int i=0; i<8; i++) {
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	e009      	b.n	80014be <getValueDs2+0x2a>
		oneWireWrite(ds2addr[i]);
 80014aa:	4a2b      	ldr	r2, [pc, #172]	; (8001558 <getValueDs2+0xc4>)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f904 	bl	80016c0 <oneWireWrite>
	for(int i=0; i<8; i++) {
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	3301      	adds	r3, #1
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	2b07      	cmp	r3, #7
 80014c2:	ddf2      	ble.n	80014aa <getValueDs2+0x16>
	}
	oneWireWrite(0x44);
 80014c4:	2044      	movs	r0, #68	; 0x44
 80014c6:	f000 f8fb 	bl	80016c0 <oneWireWrite>
	HAL_Delay(95);
 80014ca:	205f      	movs	r0, #95	; 0x5f
 80014cc:	f003 fd46 	bl	8004f5c <HAL_Delay>
	oneWireReset();
 80014d0:	f000 f87a 	bl	80015c8 <oneWireReset>
	oneWireWrite(0x55);
 80014d4:	2055      	movs	r0, #85	; 0x55
 80014d6:	f000 f8f3 	bl	80016c0 <oneWireWrite>
	for(int i=0; i<8; i++) {
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	e009      	b.n	80014f4 <getValueDs2+0x60>
		oneWireWrite(ds2addr[i]);
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <getValueDs2+0xc4>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4413      	add	r3, r2
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f8e9 	bl	80016c0 <oneWireWrite>
	for(int i=0; i<8; i++) {
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b07      	cmp	r3, #7
 80014f8:	ddf2      	ble.n	80014e0 <getValueDs2+0x4c>
	}
	oneWireWrite(0xbe);
 80014fa:	20be      	movs	r0, #190	; 0xbe
 80014fc:	f000 f8e0 	bl	80016c0 <oneWireWrite>
	int i;
	uint8_t rom_code[9];
	for (i = 0; i < 9; i++)
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e00b      	b.n	800151e <getValueDs2+0x8a>
	  rom_code[i] = oneWireRead();
 8001506:	f000 f8f7 	bl	80016f8 <oneWireRead>
 800150a:	4603      	mov	r3, r0
 800150c:	4619      	mov	r1, r3
 800150e:	1d3a      	adds	r2, r7, #4
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	4413      	add	r3, r2
 8001514:	460a      	mov	r2, r1
 8001516:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 9; i++)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3301      	adds	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2b08      	cmp	r3, #8
 8001522:	ddf0      	ble.n	8001506 <getValueDs2+0x72>
	float temp= ((rom_code[1]<<8) | (rom_code[0]));
 8001524:	797b      	ldrb	r3, [r7, #5]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	793a      	ldrb	r2, [r7, #4]
 800152a:	4313      	orrs	r3, r2
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001534:	edc7 7a04 	vstr	s15, [r7, #16]

	//send_uart_float(temp);
	return temp = temp/16.0f;
 8001538:	ed97 7a04 	vldr	s14, [r7, #16]
 800153c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001540:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001544:	edc7 7a04 	vstr	s15, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	ee07 3a90 	vmov	s15, r3

}
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	08010034 	.word	0x08010034

0800155c <getValueDs3>:

float getValueDs3(void) {
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	return 0.0;
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	ee07 3a90 	vmov	s15, r3
}
 8001568:	eeb0 0a67 	vmov.f32	s0, s15
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <ds18_init>:


void ds18_init(TIM_HandleTypeDef *htim10) {
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	htim10_new=htim10;
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <ds18_init+0x1c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000ac8 	.word	0x20000ac8

08001594 <delay_us>:


void delay_us(uint32_t us)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim10_new, 0);
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <delay_us+0x30>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24
	  while (__HAL_TIM_GET_COUNTER(htim10_new) < us) {}
 80015a6:	bf00      	nop
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <delay_us+0x30>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d8f8      	bhi.n	80015a8 <delay_us+0x14>
}
 80015b6:	bf00      	nop
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	20000ac8 	.word	0x20000ac8

080015c8 <oneWireReset>:

HAL_StatusTypeDef oneWireReset(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2102      	movs	r1, #2
 80015d2:	4811      	ldr	r0, [pc, #68]	; (8001618 <oneWireReset+0x50>)
 80015d4:	f004 fb52 	bl	8005c7c <HAL_GPIO_WritePin>
  delay_us(480);
 80015d8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80015dc:	f7ff ffda 	bl	8001594 <delay_us>
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2102      	movs	r1, #2
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <oneWireReset+0x50>)
 80015e6:	f004 fb49 	bl	8005c7c <HAL_GPIO_WritePin>
  delay_us(70);
 80015ea:	2046      	movs	r0, #70	; 0x46
 80015ec:	f7ff ffd2 	bl	8001594 <delay_us>
  rc = HAL_GPIO_ReadPin(DSO_DATA_GPIO_Port, DSO_DATA_Pin);
 80015f0:	2102      	movs	r1, #2
 80015f2:	4809      	ldr	r0, [pc, #36]	; (8001618 <oneWireReset+0x50>)
 80015f4:	f004 fb2a 	bl	8005c4c <HAL_GPIO_ReadPin>
 80015f8:	4603      	mov	r3, r0
 80015fa:	607b      	str	r3, [r7, #4]
  delay_us(410);
 80015fc:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001600:	f7ff ffc8 	bl	8001594 <delay_us>

  if (rc == 0)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <oneWireReset+0x46>
    return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <oneWireReset+0x48>
  else
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40020400 	.word	0x40020400

0800161c <bitWrite>:

void bitWrite(int value)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if (value) {
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d010      	beq.n	800164c <bitWrite+0x30>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	2102      	movs	r1, #2
 800162e:	4811      	ldr	r0, [pc, #68]	; (8001674 <bitWrite+0x58>)
 8001630:	f004 fb24 	bl	8005c7c <HAL_GPIO_WritePin>
    delay_us(6);
 8001634:	2006      	movs	r0, #6
 8001636:	f7ff ffad 	bl	8001594 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	2102      	movs	r1, #2
 800163e:	480d      	ldr	r0, [pc, #52]	; (8001674 <bitWrite+0x58>)
 8001640:	f004 fb1c 	bl	8005c7c <HAL_GPIO_WritePin>
    delay_us(64);
 8001644:	2040      	movs	r0, #64	; 0x40
 8001646:	f7ff ffa5 	bl	8001594 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 800164a:	e00f      	b.n	800166c <bitWrite+0x50>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	2102      	movs	r1, #2
 8001650:	4808      	ldr	r0, [pc, #32]	; (8001674 <bitWrite+0x58>)
 8001652:	f004 fb13 	bl	8005c7c <HAL_GPIO_WritePin>
    delay_us(60);
 8001656:	203c      	movs	r0, #60	; 0x3c
 8001658:	f7ff ff9c 	bl	8001594 <delay_us>
    HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 800165c:	2201      	movs	r2, #1
 800165e:	2102      	movs	r1, #2
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <bitWrite+0x58>)
 8001662:	f004 fb0b 	bl	8005c7c <HAL_GPIO_WritePin>
    delay_us(10);
 8001666:	200a      	movs	r0, #10
 8001668:	f7ff ff94 	bl	8001594 <delay_us>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40020400 	.word	0x40020400

08001678 <bitRead>:


int bitRead(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2102      	movs	r1, #2
 8001682:	480e      	ldr	r0, [pc, #56]	; (80016bc <bitRead+0x44>)
 8001684:	f004 fafa 	bl	8005c7c <HAL_GPIO_WritePin>
  delay_us(6);
 8001688:	2006      	movs	r0, #6
 800168a:	f7ff ff83 	bl	8001594 <delay_us>
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	2102      	movs	r1, #2
 8001692:	480a      	ldr	r0, [pc, #40]	; (80016bc <bitRead+0x44>)
 8001694:	f004 faf2 	bl	8005c7c <HAL_GPIO_WritePin>
  delay_us(9);
 8001698:	2009      	movs	r0, #9
 800169a:	f7ff ff7b 	bl	8001594 <delay_us>
  rc = HAL_GPIO_ReadPin(DSO_DATA_GPIO_Port, DSO_DATA_Pin);
 800169e:	2102      	movs	r1, #2
 80016a0:	4806      	ldr	r0, [pc, #24]	; (80016bc <bitRead+0x44>)
 80016a2:	f004 fad3 	bl	8005c4c <HAL_GPIO_ReadPin>
 80016a6:	4603      	mov	r3, r0
 80016a8:	607b      	str	r3, [r7, #4]
  delay_us(55);
 80016aa:	2037      	movs	r0, #55	; 0x37
 80016ac:	f7ff ff72 	bl	8001594 <delay_us>
  return rc;
 80016b0:	687b      	ldr	r3, [r7, #4]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40020400 	.word	0x40020400

080016c0 <oneWireWrite>:

void oneWireWrite(uint8_t byte)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	e00b      	b.n	80016e8 <oneWireWrite+0x28>
    bitWrite(byte & 0x01);
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ffa0 	bl	800161c <bitWrite>
    byte >>= 1;
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	085b      	lsrs	r3, r3, #1
 80016e0:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b07      	cmp	r3, #7
 80016ec:	ddf0      	ble.n	80016d0 <oneWireWrite+0x10>
  }
}
 80016ee:	bf00      	nop
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <oneWireRead>:

uint8_t oneWireRead(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	e00e      	b.n	8001726 <oneWireRead+0x2e>
    value >>= 1;
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	085b      	lsrs	r3, r3, #1
 800170c:	71fb      	strb	r3, [r7, #7]
    if (bitRead())
 800170e:	f7ff ffb3 	bl	8001678 <bitRead>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <oneWireRead+0x28>
      value |= 0x80;
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800171e:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b07      	cmp	r3, #7
 800172a:	dded      	ble.n	8001708 <oneWireRead+0x10>
  }
  return value;
 800172c:	79fb      	ldrb	r3, [r7, #7]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <encSetRange>:


TIM_HandleTypeDef *htim1_new;


void encSetRange(uint16_t min, uint16_t max) {
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	460a      	mov	r2, r1
 8001742:	80fb      	strh	r3, [r7, #6]
 8001744:	4613      	mov	r3, r2
 8001746:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(htim1_new, max);
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <encSetRange+0x30>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	88ba      	ldrh	r2, [r7, #4]
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <encSetRange+0x30>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	88ba      	ldrh	r2, [r7, #4]
 8001758:	60da      	str	r2, [r3, #12]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000acc 	.word	0x20000acc

0800176c <encSetPos>:

void encSetPos(uint16_t encPos) {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(htim1_new, encPos);
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <encSetPos+0x20>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	88fa      	ldrh	r2, [r7, #6]
 800177e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	20000acc 	.word	0x20000acc

08001790 <encoderGet>:

uint32_t encoderGet(void) {
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(htim1_new);
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <encoderGet+0x18>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000acc 	.word	0x20000acc

080017ac <encoderInit>:

void encoderInit(TIM_HandleTypeDef *htim1) {
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	htim1_new=htim1;
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <encoderInit+0x1c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000acc 	.word	0x20000acc

080017cc <entrySelected>:

bool entrySelected(int16_t id) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
    if (encoderGet() == id) {
 80017d6:	f7ff ffdb 	bl	8001790 <encoderGet>
 80017da:	4602      	mov	r2, r0
 80017dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d101      	bne.n	80017e8 <entrySelected+0x1c>
        return true;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <entrySelected+0x1e>
    }
    return false;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <entryClicked>:

bool entryClicked(int16_t id) {
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	80fb      	strh	r3, [r7, #6]
    if (encoderGet() == id && isClicked()) {
 80017fc:	f7ff ffc8 	bl	8001790 <encoderGet>
 8001800:	4602      	mov	r2, r0
 8001802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001806:	429a      	cmp	r2, r3
 8001808:	d106      	bne.n	8001818 <entryClicked+0x26>
 800180a:	f000 f8b3 	bl	8001974 <isClicked>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <entryClicked+0x26>
        return true;
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <entryClicked+0x28>
    }
    return false;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <send_uart>:
int8_t ch2przerwanie=0;
int8_t ch3przerwanie=0;
int8_t ch4przerwanie=0;


void send_uart(char *string) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7fe fd37 	bl	80002a0 <strlen>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart6, (uint8_t *)string, len, HAL_MAX_DELAY);
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	b29a      	uxth	r2, r3
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <send_uart+0x2c>)
 8001842:	f008 f9fa 	bl	8009c3a <HAL_UART_Transmit>
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000d58 	.word	0x20000d58

08001854 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0a      	ldr	r2, [pc, #40]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d10d      	bne.n	8001882 <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_TIM_Base_Stop_IT(htim);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f007 f8e4 	bl	8008a34 <HAL_TIM_Base_Stop_IT>
		if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)==GPIO_PIN_RESET) {
 800186c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001872:	f004 f9eb 	bl	8005c4c <HAL_GPIO_ReadPin>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <HAL_TIM_PeriodElapsedCallback+0x2e>
			sendToUart=1;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]

			}
		}
	}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40014800 	.word	0x40014800
 8001890:	40020400 	.word	0x40020400
 8001894:	20000d9c 	.word	0x20000d9c

08001898 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t pulse;
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7f1b      	ldrb	r3, [r3, #28]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d10d      	bne.n	80018c4 <HAL_TIM_OC_DelayElapsedCallback+0x2c>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80018a8:	2100      	movs	r1, #0
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f007 fdc8 	bl	8009440 <HAL_TIM_ReadCapturedValue>
 80018b0:	60f8      	str	r0, [r7, #12]
    ch1przerwanie=1;
 80018b2:	4b23      	ldr	r3, [pc, #140]	; (8001940 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (pulse + 999)); //to wartosc pulse dla kazdego timera
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	f202 32e7 	addw	r2, r2, #999	; 0x3e7
 80018c2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7f1b      	ldrb	r3, [r3, #28]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d10e      	bne.n	80018ea <HAL_TIM_OC_DelayElapsedCallback+0x52>
  pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80018cc:	2104      	movs	r1, #4
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f007 fdb6 	bl	8009440 <HAL_TIM_ReadCapturedValue>
 80018d4:	60f8      	str	r0, [r7, #12]
  ch2przerwanie=1;
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
  /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
    __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (pulse + 9318));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f503 5311 	add.w	r3, r3, #9280	; 0x2440
 80018e6:	3326      	adds	r3, #38	; 0x26
 80018e8:	6393      	str	r3, [r2, #56]	; 0x38
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7f1b      	ldrb	r3, [r3, #28]
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d10e      	bne.n	8001910 <HAL_TIM_OC_DelayElapsedCallback+0x78>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80018f2:	2108      	movs	r1, #8
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f007 fda3 	bl	8009440 <HAL_TIM_ReadCapturedValue>
 80018fa:	60f8      	str	r0, [r7, #12]
    ch3przerwanie=1;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, (pulse + 36000));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 800190c:	33a0      	adds	r3, #160	; 0xa0
 800190e:	63d3      	str	r3, [r2, #60]	; 0x3c
    }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7f1b      	ldrb	r3, [r3, #28]
 8001914:	2b08      	cmp	r3, #8
 8001916:	d10f      	bne.n	8001938 <HAL_TIM_OC_DelayElapsedCallback+0xa0>
    pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001918:	210c      	movs	r1, #12
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f007 fd90 	bl	8009440 <HAL_TIM_ReadCapturedValue>
 8001920:	60f8      	str	r0, [r7, #12]
    ch4przerwanie=1;
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
    /* Set the Capture Compare Register value */ //z github https://github.com/cnoviello/mastering-stm32-2nd/blame/2183a2c5fe25fd9229abd21dab4f23658036dd3f/Nucleo-L476RG/CH11/Core/Src/main-ex7.c#L61
      __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, (pulse + 67000));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001932:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001936:	6413      	str	r3, [r2, #64]	; 0x40
    }
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000d9d 	.word	0x20000d9d
 8001944:	20000d9e 	.word	0x20000d9e
 8001948:	20000d9f 	.word	0x20000d9f
 800194c:	20000da0 	.word	0x20000da0

08001950 <HAL_GPIO_EXTI_Callback>:


char charAr[50];


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
	  if(GPIO_Pin == ENC_BTN_Pin) {
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001960:	d102      	bne.n	8001968 <HAL_GPIO_EXTI_Callback+0x18>
		  HAL_TIM_Base_Start_IT(&htim11);
 8001962:	4803      	ldr	r0, [pc, #12]	; (8001970 <HAL_GPIO_EXTI_Callback+0x20>)
 8001964:	f007 f804 	bl	8008970 <HAL_TIM_Base_Start_IT>
	  }
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000d10 	.word	0x20000d10

08001974 <isClicked>:


bool isClicked(void) {
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
	if(sendToUart==1) {
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <isClicked+0x24>)
 800197a:	f993 3000 	ldrsb.w	r3, [r3]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d104      	bne.n	800198c <isClicked+0x18>
		sendToUart=0;
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <isClicked+0x24>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
		return true;
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <isClicked+0x1a>
	}
	else {
		return false;
 800198c:	2300      	movs	r3, #0
	}
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	20000d9c 	.word	0x20000d9c

0800199c <send_uart_uint32>:

void send_uart_uint32(uint32_t value) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    char buffer[20];
    snprintf(buffer, sizeof(buffer), "%lu \n\r", value);
 80019a4:	f107 000c 	add.w	r0, r7, #12
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <send_uart_uint32+0x3c>)
 80019ac:	2114      	movs	r1, #20
 80019ae:	f00b fdb7 	bl	800d520 <sniprintf>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fc72 	bl	80002a0 <strlen>
 80019bc:	4603      	mov	r3, r0
 80019be:	b29a      	uxth	r2, r3
 80019c0:	f107 010c 	add.w	r1, r7, #12
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
 80019c8:	4804      	ldr	r0, [pc, #16]	; (80019dc <send_uart_uint32+0x40>)
 80019ca:	f008 f936 	bl	8009c3a <HAL_UART_Transmit>
}
 80019ce:	bf00      	nop
 80019d0:	3720      	adds	r7, #32
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	0800f8a8 	.word	0x0800f8a8
 80019dc:	20000d58 	.word	0x20000d58

080019e0 <getRtcString>:
    snprintf(buffer, sizeof(buffer), "%0.2f \n\r", value);
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
}
RTC_TimeTypeDef time;
RTC_DateTypeDef date;
char* getRtcString(void)  {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b09c      	sub	sp, #112	; 0x70
 80019e4:	af02      	add	r7, sp, #8
	static char dateTime[100];
	char rtcTimeStr[50];
	char rtcDateStr[50];
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80019e6:	2200      	movs	r2, #0
 80019e8:	4918      	ldr	r1, [pc, #96]	; (8001a4c <getRtcString+0x6c>)
 80019ea:	4819      	ldr	r0, [pc, #100]	; (8001a50 <getRtcString+0x70>)
 80019ec:	f006 f8f6 	bl	8007bdc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80019f0:	2200      	movs	r2, #0
 80019f2:	4918      	ldr	r1, [pc, #96]	; (8001a54 <getRtcString+0x74>)
 80019f4:	4816      	ldr	r0, [pc, #88]	; (8001a50 <getRtcString+0x70>)
 80019f6:	f006 f9d3 	bl	8007da0 <HAL_RTC_GetDate>
	sprintf(rtcTimeStr, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <getRtcString+0x6c>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <getRtcString+0x6c>)
 8001a02:	785b      	ldrb	r3, [r3, #1]
 8001a04:	4619      	mov	r1, r3
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <getRtcString+0x6c>)
 8001a08:	789b      	ldrb	r3, [r3, #2]
 8001a0a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	460b      	mov	r3, r1
 8001a12:	4911      	ldr	r1, [pc, #68]	; (8001a58 <getRtcString+0x78>)
 8001a14:	f00b fdb8 	bl	800d588 <siprintf>
	sprintf(rtcDateStr, "%02d/%02d/%02d", date.Date, date.Month, date.Year);
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <getRtcString+0x74>)
 8001a1a:	789b      	ldrb	r3, [r3, #2]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <getRtcString+0x74>)
 8001a20:	785b      	ldrb	r3, [r3, #1]
 8001a22:	4619      	mov	r1, r3
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <getRtcString+0x74>)
 8001a26:	78db      	ldrb	r3, [r3, #3]
 8001a28:	4638      	mov	r0, r7
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	490b      	ldr	r1, [pc, #44]	; (8001a5c <getRtcString+0x7c>)
 8001a30:	f00b fdaa 	bl	800d588 <siprintf>
	sprintf(dateTime, "%s %s", rtcTimeStr, rtcDateStr);
 8001a34:	463b      	mov	r3, r7
 8001a36:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a3a:	4909      	ldr	r1, [pc, #36]	; (8001a60 <getRtcString+0x80>)
 8001a3c:	4809      	ldr	r0, [pc, #36]	; (8001a64 <getRtcString+0x84>)
 8001a3e:	f00b fda3 	bl	800d588 <siprintf>

	return dateTime;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <getRtcString+0x84>)
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3768      	adds	r7, #104	; 0x68
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000da4 	.word	0x20000da4
 8001a50:	20000bc0 	.word	0x20000bc0
 8001a54:	20000db8 	.word	0x20000db8
 8001a58:	0800f8bc 	.word	0x0800f8bc
 8001a5c:	0800f8cc 	.word	0x0800f8cc
 8001a60:	0800f8dc 	.word	0x0800f8dc
 8001a64:	20000dc4 	.word	0x20000dc4

08001a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	f5ad 6d08 	sub.w	sp, sp, #2176	; 0x880
 8001a6e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a70:	f003 fa02 	bl	8004e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a74:	f000 f9b8 	bl	8001de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a78:	f000 fcc6 	bl	8002408 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a7c:	f000 fa1e 	bl	8001ebc <MX_ADC1_Init>
  MX_I2C1_Init();
 8001a80:	f000 fa6e 	bl	8001f60 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001a84:	f000 fa9a 	bl	8001fbc <MX_I2C2_Init>
  MX_SPI1_Init();
 8001a88:	f000 fb20 	bl	80020cc <MX_SPI1_Init>
  MX_TIM1_Init();
 8001a8c:	f000 fb54 	bl	8002138 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8001a90:	f000 fc90 	bl	80023b4 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001a94:	f000 fc46 	bl	8002324 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001a98:	f000 fc68 	bl	800236c <MX_TIM11_Init>
  MX_TIM2_Init();
 8001a9c:	f000 fba2 	bl	80021e4 <MX_TIM2_Init>
  MX_FATFS_Init();
 8001aa0:	f008 fc40 	bl	800a324 <MX_FATFS_Init>
  MX_RTC_Init();
 8001aa4:	f000 fab8 	bl	8002018 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  encoderInit(&htim1);
 8001aa8:	48b7      	ldr	r0, [pc, #732]	; (8001d88 <main+0x320>)
 8001aaa:	f7ff fe7f 	bl	80017ac <encoderInit>

  ds18_init(&htim10);
 8001aae:	48b7      	ldr	r0, [pc, #732]	; (8001d8c <main+0x324>)
 8001ab0:	f7ff fd60 	bl	8001574 <ds18_init>




  adc_int_init(&hadc1);
 8001ab4:	48b6      	ldr	r0, [pc, #728]	; (8001d90 <main+0x328>)
 8001ab6:	f7ff fa2d 	bl	8000f14 <adc_int_init>
  adc_ext_init(&hi2c2);
 8001aba:	48b6      	ldr	r0, [pc, #728]	; (8001d94 <main+0x32c>)
 8001abc:	f7ff fa3a 	bl	8000f34 <adc_ext_init>
  huart_ds_init(&huart6);
 8001ac0:	48b5      	ldr	r0, [pc, #724]	; (8001d98 <main+0x330>)
 8001ac2:	f000 fd3b 	bl	800253c <huart_ds_init>
  sendRtcHandler(&hrtc);
 8001ac6:	48b5      	ldr	r0, [pc, #724]	; (8001d9c <main+0x334>)
 8001ac8:	f000 fd48 	bl	800255c <sendRtcHandler>
  HAL_TIM_Base_Start(&htim10);
 8001acc:	48af      	ldr	r0, [pc, #700]	; (8001d8c <main+0x324>)
 8001ace:	f006 fef5 	bl	80088bc <HAL_TIM_Base_Start>
  displayInit();
 8001ad2:	f001 fc07 	bl	80032e4 <displayInit>
  //wire_reset();

  CircularBuffer_Init(&cb);
 8001ad6:	48b2      	ldr	r0, [pc, #712]	; (8001da0 <main+0x338>)
 8001ad8:	f001 fc0a 	bl	80032f0 <CircularBuffer_Init>
  sd_init();
 8001adc:	f001 fcca 	bl	8003474 <sd_init>
  send_uart("total: ");
 8001ae0:	48b0      	ldr	r0, [pc, #704]	; (8001da4 <main+0x33c>)
 8001ae2:	f7ff fe9f 	bl	8001824 <send_uart>
  send_uart_uint32(sd_totalspace());
 8001ae6:	f001 fd2b 	bl	8003540 <sd_totalspace>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff55 	bl	800199c <send_uart_uint32>
  send_uart("\n\rfree: ");
 8001af2:	48ad      	ldr	r0, [pc, #692]	; (8001da8 <main+0x340>)
 8001af4:	f7ff fe96 	bl	8001824 <send_uart>
  send_uart_uint32(sd_freespace());
 8001af8:	f001 fcec 	bl	80034d4 <sd_freespace>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff4c 	bl	800199c <send_uart_uint32>
  send_uart("\n\r");
 8001b04:	48a9      	ldr	r0, [pc, #676]	; (8001dac <main+0x344>)
 8001b06:	f7ff fe8d 	bl	8001824 <send_uart>

  debug=false;
 8001b0a:	4ba9      	ldr	r3, [pc, #676]	; (8001db0 <main+0x348>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001b10:	213c      	movs	r1, #60	; 0x3c
 8001b12:	489d      	ldr	r0, [pc, #628]	; (8001d88 <main+0x320>)
 8001b14:	f007 f9ba 	bl	8008e8c <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001b18:	2100      	movs	r1, #0
 8001b1a:	48a6      	ldr	r0, [pc, #664]	; (8001db4 <main+0x34c>)
 8001b1c:	f007 f812 	bl	8008b44 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001b20:	2104      	movs	r1, #4
 8001b22:	48a4      	ldr	r0, [pc, #656]	; (8001db4 <main+0x34c>)
 8001b24:	f007 f80e 	bl	8008b44 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001b28:	2108      	movs	r1, #8
 8001b2a:	48a2      	ldr	r0, [pc, #648]	; (8001db4 <main+0x34c>)
 8001b2c:	f007 f80a 	bl	8008b44 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001b30:	210c      	movs	r1, #12
 8001b32:	48a0      	ldr	r0, [pc, #640]	; (8001db4 <main+0x34c>)
 8001b34:	f007 f806 	bl	8008b44 <HAL_TIM_OC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(debug) {
 8001b38:	4b9d      	ldr	r3, [pc, #628]	; (8001db0 <main+0x348>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80e7 	beq.w	8001d10 <main+0x2a8>
		  bool needToWrite=false;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
		  if(ch1przerwanie==1) {
 8001b48:	4b9b      	ldr	r3, [pc, #620]	; (8001db8 <main+0x350>)
 8001b4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d107      	bne.n	8001b62 <main+0xfa>
			  ch1Enable();
 8001b52:	f000 ffdf 	bl	8002b14 <ch1Enable>
			  ch1przerwanie=0;
 8001b56:	4b98      	ldr	r3, [pc, #608]	; (8001db8 <main+0x350>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
			  needToWrite=true;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
		  }
		  if(ch2przerwanie==1) {
 8001b62:	4b96      	ldr	r3, [pc, #600]	; (8001dbc <main+0x354>)
 8001b64:	f993 3000 	ldrsb.w	r3, [r3]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d107      	bne.n	8001b7c <main+0x114>
			  ch2przerwanie=0;
 8001b6c:	4b93      	ldr	r3, [pc, #588]	; (8001dbc <main+0x354>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
			  ch2Enable();
 8001b72:	f001 f82f 	bl	8002bd4 <ch2Enable>
			  needToWrite=true;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
		  }
		  if(ch3przerwanie==1) {
 8001b7c:	4b90      	ldr	r3, [pc, #576]	; (8001dc0 <main+0x358>)
 8001b7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <main+0x12e>
			  ch3przerwanie=0;
 8001b86:	4b8e      	ldr	r3, [pc, #568]	; (8001dc0 <main+0x358>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
			  ch3Enable();
 8001b8c:	f001 f882 	bl	8002c94 <ch3Enable>
			  needToWrite=true;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
			  }
		  if(ch4przerwanie==1) {
 8001b96:	4b8b      	ldr	r3, [pc, #556]	; (8001dc4 <main+0x35c>)
 8001b98:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d107      	bne.n	8001bb0 <main+0x148>
			  ch4przerwanie=0;
 8001ba0:	4b88      	ldr	r3, [pc, #544]	; (8001dc4 <main+0x35c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
			  ch4Enable();
 8001ba6:	f001 f8d5 	bl	8002d54 <ch4Enable>
			  needToWrite=true;
 8001baa:	2301      	movs	r3, #1
 8001bac:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
		  }
		  if(needToWrite) {
 8001bb0:	f897 3877 	ldrb.w	r3, [r7, #2167]	; 0x877
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80a6 	beq.w	8001d06 <main+0x29e>

			  char* dateTimeStr = getRtcString();
 8001bba:	f7ff ff11 	bl	80019e0 <getRtcString>
 8001bbe:	f8c7 0868 	str.w	r0, [r7, #2152]	; 0x868
			  char finalResults[2048] = "";
 8001bc2:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8001bc6:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f00b fde8 	bl	800d7ac <memset>
			  char temp[100];
			  bool allNulls=true;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	f887 3876 	strb.w	r3, [r7, #2166]	; 0x876
			  snprintf(finalResults, sizeof(finalResults), "%s,", dateTimeStr);
 8001be2:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001be6:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8001bea:	4a77      	ldr	r2, [pc, #476]	; (8001dc8 <main+0x360>)
 8001bec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bf0:	f00b fc96 	bl	800d520 <sniprintf>

			  for (int i = 0; i < 11; i++) {
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 3870 	str.w	r3, [r7, #2160]	; 0x870
 8001bfa:	e054      	b.n	8001ca6 <main+0x23e>
				  if (sensors[i].hasValue) {
 8001bfc:	4a73      	ldr	r2, [pc, #460]	; (8001dcc <main+0x364>)
 8001bfe:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001c02:	015b      	lsls	r3, r3, #5
 8001c04:	4413      	add	r3, r2
 8001c06:	331c      	adds	r3, #28
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d016      	beq.n	8001c3c <main+0x1d4>
					  snprintf(temp, sizeof(temp), "%f", sensors[i].lastValue);
 8001c0e:	4a6f      	ldr	r2, [pc, #444]	; (8001dcc <main+0x364>)
 8001c10:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001c14:	015b      	lsls	r3, r3, #5
 8001c16:	4413      	add	r3, r2
 8001c18:	3318      	adds	r3, #24
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fcab 	bl	8000578 <__aeabi_f2d>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	1d38      	adds	r0, r7, #4
 8001c28:	e9cd 2300 	strd	r2, r3, [sp]
 8001c2c:	4a68      	ldr	r2, [pc, #416]	; (8001dd0 <main+0x368>)
 8001c2e:	2164      	movs	r1, #100	; 0x64
 8001c30:	f00b fc76 	bl	800d520 <sniprintf>
					  allNulls=false;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 3876 	strb.w	r3, [r7, #2166]	; 0x876
 8001c3a:	e005      	b.n	8001c48 <main+0x1e0>
				  } else {
					  snprintf(temp, sizeof(temp), "");
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4a65      	ldr	r2, [pc, #404]	; (8001dd4 <main+0x36c>)
 8001c40:	2164      	movs	r1, #100	; 0x64
 8001c42:	4618      	mov	r0, r3
 8001c44:	f00b fc6c 	bl	800d520 <sniprintf>
				  }
				  strncat(finalResults, temp, sizeof(finalResults) - strlen(finalResults) - 1);
 8001c48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fb27 	bl	80002a0 <strlen>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8001c58:	3307      	adds	r3, #7
 8001c5a:	1d39      	adds	r1, r7, #4
 8001c5c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001c60:	461a      	mov	r2, r3
 8001c62:	f00b fdab 	bl	800d7bc <strncat>

				  // Dodaj przecinek, chyba że to ostatni element
				  if (i < 10) {
 8001c66:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001c6a:	2b09      	cmp	r3, #9
 8001c6c:	dc0e      	bgt.n	8001c8c <main+0x224>
					  strncat(finalResults, ",", sizeof(finalResults) - strlen(finalResults) - 1);
 8001c6e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fb14 	bl	80002a0 <strlen>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8001c7e:	3307      	adds	r3, #7
 8001c80:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001c84:	461a      	mov	r2, r3
 8001c86:	4954      	ldr	r1, [pc, #336]	; (8001dd8 <main+0x370>)
 8001c88:	f00b fd98 	bl	800d7bc <strncat>
				  }
				  sensors[i].hasValue = false; // Resetowanie flagi
 8001c8c:	4a4f      	ldr	r2, [pc, #316]	; (8001dcc <main+0x364>)
 8001c8e:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001c92:	015b      	lsls	r3, r3, #5
 8001c94:	4413      	add	r3, r2
 8001c96:	331c      	adds	r3, #28
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 11; i++) {
 8001c9c:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f8c7 3870 	str.w	r3, [r7, #2160]	; 0x870
 8001ca6:	f8d7 3870 	ldr.w	r3, [r7, #2160]	; 0x870
 8001caa:	2b0a      	cmp	r3, #10
 8001cac:	dda6      	ble.n	8001bfc <main+0x194>
			  }
			      strncat(finalResults, "\n", sizeof(finalResults) - strlen(finalResults) - 1);
 8001cae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe faf4 	bl	80002a0 <strlen>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8001cbe:	3307      	adds	r3, #7
 8001cc0:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4945      	ldr	r1, [pc, #276]	; (8001ddc <main+0x374>)
 8001cc8:	f00b fd78 	bl	800d7bc <strncat>
			      if(!allNulls) {
 8001ccc:	f897 3876 	ldrb.w	r3, [r7, #2166]	; 0x876
 8001cd0:	f083 0301 	eor.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d005      	beq.n	8001ce6 <main+0x27e>
			    	  CircularBuffer_Add(&cb, finalResults);
 8001cda:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cde:	4619      	mov	r1, r3
 8001ce0:	482f      	ldr	r0, [pc, #188]	; (8001da0 <main+0x338>)
 8001ce2:	f001 fb1d 	bl	8003320 <CircularBuffer_Add>
			      }

			      dataFromBuff = CircularBuffer_Read(&cb);
 8001ce6:	482e      	ldr	r0, [pc, #184]	; (8001da0 <main+0x338>)
 8001ce8:	f001 fb6c 	bl	80033c4 <CircularBuffer_Read>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4a3c      	ldr	r2, [pc, #240]	; (8001de0 <main+0x378>)
 8001cf0:	6013      	str	r3, [r2, #0]
				  send_uart(dataFromBuff);
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <main+0x378>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fd94 	bl	8001824 <send_uart>
				  sd_writeline(dataFromBuff);
 8001cfc:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <main+0x378>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f001 fca5 	bl	8003650 <sd_writeline>

			      //send_uart(finalResults);
		  }
		  leds[4].state=true;
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <main+0x37c>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8001d0e:	e003      	b.n	8001d18 <main+0x2b0>
	  }
	  else {
		  leds[4].state=false;
 8001d10:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <main+0x37c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  }
	displayMenu();
 8001d18:	f001 fabc 	bl	8003294 <displayMenu>
	for(int i=0; i<sizeof(leds)/sizeof(leds[0]); i++) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 8001d22:	e02b      	b.n	8001d7c <main+0x314>
		if(leds[i].state) {
 8001d24:	4a2f      	ldr	r2, [pc, #188]	; (8001de4 <main+0x37c>)
 8001d26:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	799b      	ldrb	r3, [r3, #6]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00f      	beq.n	8001d54 <main+0x2ec>
			HAL_GPIO_WritePin(leds[i].port, leds[i].pin, GPIO_PIN_SET);
 8001d34:	4a2b      	ldr	r2, [pc, #172]	; (8001de4 <main+0x37c>)
 8001d36:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001d3a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001d3e:	4a29      	ldr	r2, [pc, #164]	; (8001de4 <main+0x37c>)
 8001d40:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	889b      	ldrh	r3, [r3, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f003 ff95 	bl	8005c7c <HAL_GPIO_WritePin>
 8001d52:	e00e      	b.n	8001d72 <main+0x30a>
		}
		else {
			HAL_GPIO_WritePin(leds[i].port, leds[i].pin, GPIO_PIN_RESET);
 8001d54:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <main+0x37c>)
 8001d56:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001d5a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001d5e:	4a21      	ldr	r2, [pc, #132]	; (8001de4 <main+0x37c>)
 8001d60:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	889b      	ldrh	r3, [r3, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f003 ff85 	bl	8005c7c <HAL_GPIO_WritePin>
	for(int i=0; i<sizeof(leds)/sizeof(leds[0]); i++) {
 8001d72:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001d76:	3301      	adds	r3, #1
 8001d78:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 8001d7c:	f8d7 386c 	ldr.w	r3, [r7, #2156]	; 0x86c
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d9cf      	bls.n	8001d24 <main+0x2bc>
	  if(debug) {
 8001d84:	e6d8      	b.n	8001b38 <main+0xd0>
 8001d86:	bf00      	nop
 8001d88:	20000c38 	.word	0x20000c38
 8001d8c:	20000cc8 	.word	0x20000cc8
 8001d90:	20000ad0 	.word	0x20000ad0
 8001d94:	20000b6c 	.word	0x20000b6c
 8001d98:	20000d58 	.word	0x20000d58
 8001d9c:	20000bc0 	.word	0x20000bc0
 8001da0:	20000e48 	.word	0x20000e48
 8001da4:	0800f8e4 	.word	0x0800f8e4
 8001da8:	0800f8ec 	.word	0x0800f8ec
 8001dac:	0800f8f8 	.word	0x0800f8f8
 8001db0:	20000dbc 	.word	0x20000dbc
 8001db4:	20000c80 	.word	0x20000c80
 8001db8:	20000d9d 	.word	0x20000d9d
 8001dbc:	20000d9e 	.word	0x20000d9e
 8001dc0:	20000d9f 	.word	0x20000d9f
 8001dc4:	20000da0 	.word	0x20000da0
 8001dc8:	0800f8fc 	.word	0x0800f8fc
 8001dcc:	20000030 	.word	0x20000030
 8001dd0:	0800f900 	.word	0x0800f900
 8001dd4:	0800f904 	.word	0x0800f904
 8001dd8:	0800f908 	.word	0x0800f908
 8001ddc:	0800f90c 	.word	0x0800f90c
 8001de0:	20000dc0 	.word	0x20000dc0
 8001de4:	20000000 	.word	0x20000000

08001de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b094      	sub	sp, #80	; 0x50
 8001dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	2230      	movs	r2, #48	; 0x30
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f00b fcd8 	bl	800d7ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <SystemClock_Config+0xcc>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	4a27      	ldr	r2, [pc, #156]	; (8001eb4 <SystemClock_Config+0xcc>)
 8001e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1c:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <SystemClock_Config+0xcc>)
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e28:	2300      	movs	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <SystemClock_Config+0xd0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a21      	ldr	r2, [pc, #132]	; (8001eb8 <SystemClock_Config+0xd0>)
 8001e32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <SystemClock_Config+0xd0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001e44:	230a      	movs	r3, #10
 8001e46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e4c:	2310      	movs	r3, #16
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e50:	2301      	movs	r3, #1
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e54:	2302      	movs	r3, #2
 8001e56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001e60:	2364      	movs	r3, #100	; 0x64
 8001e62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e64:	2302      	movs	r3, #2
 8001e66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e6c:	f107 0320 	add.w	r3, r7, #32
 8001e70:	4618      	mov	r0, r3
 8001e72:	f005 f85b 	bl	8006f2c <HAL_RCC_OscConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e7c:	f000 fb54 	bl	8002528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e80:	230f      	movs	r3, #15
 8001e82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e84:	2302      	movs	r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	2103      	movs	r1, #3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f005 fabd 	bl	800741c <HAL_RCC_ClockConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ea8:	f000 fb3e 	bl	8002528 <Error_Handler>
  }
}
 8001eac:	bf00      	nop
 8001eae:	3750      	adds	r7, #80	; 0x50
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40007000 	.word	0x40007000

08001ebc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ec2:	463b      	mov	r3, r7
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ece:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <MX_ADC1_Init+0x98>)
 8001ed0:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <MX_ADC1_Init+0x9c>)
 8001ed2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ed4:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <MX_ADC1_Init+0x98>)
 8001ed6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001eda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001edc:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <MX_ADC1_Init+0x98>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <MX_ADC1_Init+0x98>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <MX_ADC1_Init+0x98>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001eee:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <MX_ADC1_Init+0x98>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <MX_ADC1_Init+0x98>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001efc:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <MX_ADC1_Init+0x98>)
 8001efe:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <MX_ADC1_Init+0xa0>)
 8001f00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f02:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <MX_ADC1_Init+0x98>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <MX_ADC1_Init+0x98>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <MX_ADC1_Init+0x98>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <MX_ADC1_Init+0x98>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f1c:	480d      	ldr	r0, [pc, #52]	; (8001f54 <MX_ADC1_Init+0x98>)
 8001f1e:	f003 f841 	bl	8004fa4 <HAL_ADC_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f28:	f000 fafe 	bl	8002528 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f30:	2301      	movs	r3, #1
 8001f32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001f34:	2302      	movs	r3, #2
 8001f36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f38:	463b      	mov	r3, r7
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4805      	ldr	r0, [pc, #20]	; (8001f54 <MX_ADC1_Init+0x98>)
 8001f3e:	f003 f9c1 	bl	80052c4 <HAL_ADC_ConfigChannel>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f48:	f000 faee 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000ad0 	.word	0x20000ad0
 8001f58:	40012000 	.word	0x40012000
 8001f5c:	0f000001 	.word	0x0f000001

08001f60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f66:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <MX_I2C1_Init+0x54>)
 8001f68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f6c:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <MX_I2C1_Init+0x58>)
 8001f6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f9c:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <MX_I2C1_Init+0x50>)
 8001f9e:	f003 fe9f 	bl	8005ce0 <HAL_I2C_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fa8:	f000 fabe 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000b18 	.word	0x20000b18
 8001fb4:	40005400 	.word	0x40005400
 8001fb8:	000186a0 	.word	0x000186a0

08001fbc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <MX_I2C2_Init+0x50>)
 8001fc2:	4a13      	ldr	r2, [pc, #76]	; (8002010 <MX_I2C2_Init+0x54>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <MX_I2C2_Init+0x50>)
 8001fc8:	4a12      	ldr	r2, [pc, #72]	; (8002014 <MX_I2C2_Init+0x58>)
 8001fca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <MX_I2C2_Init+0x50>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <MX_I2C2_Init+0x50>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_I2C2_Init+0x50>)
 8001fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fde:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <MX_I2C2_Init+0x50>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_I2C2_Init+0x50>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <MX_I2C2_Init+0x50>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_I2C2_Init+0x50>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ff8:	4804      	ldr	r0, [pc, #16]	; (800200c <MX_I2C2_Init+0x50>)
 8001ffa:	f003 fe71 	bl	8005ce0 <HAL_I2C_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002004:	f000 fa90 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000b6c 	.word	0x20000b6c
 8002010:	40005800 	.word	0x40005800
 8002014:	000186a0 	.word	0x000186a0

08002018 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800202c:	2300      	movs	r3, #0
 800202e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <MX_RTC_Init+0xac>)
 8002032:	4a25      	ldr	r2, [pc, #148]	; (80020c8 <MX_RTC_Init+0xb0>)
 8002034:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002036:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <MX_RTC_Init+0xac>)
 8002038:	2200      	movs	r2, #0
 800203a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <MX_RTC_Init+0xac>)
 800203e:	227f      	movs	r2, #127	; 0x7f
 8002040:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <MX_RTC_Init+0xac>)
 8002044:	22ff      	movs	r2, #255	; 0xff
 8002046:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002048:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <MX_RTC_Init+0xac>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <MX_RTC_Init+0xac>)
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <MX_RTC_Init+0xac>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800205a:	481a      	ldr	r0, [pc, #104]	; (80020c4 <MX_RTC_Init+0xac>)
 800205c:	f005 fcae 	bl	80079bc <HAL_RTC_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002066:	f000 fa5f 	bl	8002528 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 800206a:	2301      	movs	r3, #1
 800206c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800206e:	2300      	movs	r3, #0
 8002070:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002072:	2300      	movs	r3, #0
 8002074:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2201      	movs	r2, #1
 8002082:	4619      	mov	r1, r3
 8002084:	480f      	ldr	r0, [pc, #60]	; (80020c4 <MX_RTC_Init+0xac>)
 8002086:	f005 fd0f 	bl	8007aa8 <HAL_RTC_SetTime>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002090:	f000 fa4a 	bl	8002528 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8002094:	2303      	movs	r3, #3
 8002096:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8002098:	2312      	movs	r3, #18
 800209a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x6;
 800209c:	2306      	movs	r3, #6
 800209e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 80020a0:	2323      	movs	r3, #35	; 0x23
 80020a2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80020a4:	463b      	mov	r3, r7
 80020a6:	2201      	movs	r2, #1
 80020a8:	4619      	mov	r1, r3
 80020aa:	4806      	ldr	r0, [pc, #24]	; (80020c4 <MX_RTC_Init+0xac>)
 80020ac:	f005 fdf4 	bl	8007c98 <HAL_RTC_SetDate>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80020b6:	f000 fa37 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000bc0 	.word	0x20000bc0
 80020c8:	40002800 	.word	0x40002800

080020cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <MX_SPI1_Init+0x64>)
 80020d2:	4a18      	ldr	r2, [pc, #96]	; (8002134 <MX_SPI1_Init+0x68>)
 80020d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <MX_SPI1_Init+0x64>)
 80020d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <MX_SPI1_Init+0x64>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <MX_SPI1_Init+0x64>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <MX_SPI1_Init+0x64>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020f0:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <MX_SPI1_Init+0x64>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <MX_SPI1_Init+0x64>)
 80020f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <MX_SPI1_Init+0x64>)
 8002100:	2220      	movs	r2, #32
 8002102:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <MX_SPI1_Init+0x64>)
 8002106:	2200      	movs	r2, #0
 8002108:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <MX_SPI1_Init+0x64>)
 800210c:	2200      	movs	r2, #0
 800210e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <MX_SPI1_Init+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <MX_SPI1_Init+0x64>)
 8002118:	220a      	movs	r2, #10
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800211c:	4804      	ldr	r0, [pc, #16]	; (8002130 <MX_SPI1_Init+0x64>)
 800211e:	f005 ff4b 	bl	8007fb8 <HAL_SPI_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002128:	f000 f9fe 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000be0 	.word	0x20000be0
 8002134:	40013000 	.word	0x40013000

08002138 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08c      	sub	sp, #48	; 0x30
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800213e:	f107 030c 	add.w	r3, r7, #12
 8002142:	2224      	movs	r2, #36	; 0x24
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f00b fb30 	bl	800d7ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <MX_TIM1_Init+0xa4>)
 8002156:	4a22      	ldr	r2, [pc, #136]	; (80021e0 <MX_TIM1_Init+0xa8>)
 8002158:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <MX_TIM1_Init+0xa4>)
 800215c:	2201      	movs	r2, #1
 800215e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002160:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <MX_TIM1_Init+0xa4>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40;
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <MX_TIM1_Init+0xa4>)
 8002168:	2228      	movs	r2, #40	; 0x28
 800216a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <MX_TIM1_Init+0xa4>)
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <MX_TIM1_Init+0xa4>)
 8002174:	2200      	movs	r2, #0
 8002176:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <MX_TIM1_Init+0xa4>)
 800217a:	2200      	movs	r2, #0
 800217c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800217e:	2301      	movs	r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002186:	2301      	movs	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800218e:	230f      	movs	r3, #15
 8002190:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002196:	2301      	movs	r3, #1
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800219a:	2300      	movs	r3, #0
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800219e:	230f      	movs	r3, #15
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80021a2:	f107 030c 	add.w	r3, r7, #12
 80021a6:	4619      	mov	r1, r3
 80021a8:	480c      	ldr	r0, [pc, #48]	; (80021dc <MX_TIM1_Init+0xa4>)
 80021aa:	f006 fdc9 	bl	8008d40 <HAL_TIM_Encoder_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80021b4:	f000 f9b8 	bl	8002528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b8:	2300      	movs	r3, #0
 80021ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	4619      	mov	r1, r3
 80021c4:	4805      	ldr	r0, [pc, #20]	; (80021dc <MX_TIM1_Init+0xa4>)
 80021c6:	f007 fc69 	bl	8009a9c <HAL_TIMEx_MasterConfigSynchronization>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80021d0:	f000 f9aa 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021d4:	bf00      	nop
 80021d6:	3730      	adds	r7, #48	; 0x30
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000c38 	.word	0x20000c38
 80021e0:	40010000 	.word	0x40010000

080021e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08e      	sub	sp, #56	; 0x38
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f8:	f107 0320 	add.w	r3, r7, #32
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
 8002210:	615a      	str	r2, [r3, #20]
 8002212:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002214:	4b41      	ldr	r3, [pc, #260]	; (800231c <MX_TIM2_Init+0x138>)
 8002216:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800221a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12000;
 800221c:	4b3f      	ldr	r3, [pc, #252]	; (800231c <MX_TIM2_Init+0x138>)
 800221e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002222:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002224:	4b3d      	ldr	r3, [pc, #244]	; (800231c <MX_TIM2_Init+0x138>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800222a:	4b3c      	ldr	r3, [pc, #240]	; (800231c <MX_TIM2_Init+0x138>)
 800222c:	f04f 32ff 	mov.w	r2, #4294967295
 8002230:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002232:	4b3a      	ldr	r3, [pc, #232]	; (800231c <MX_TIM2_Init+0x138>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002238:	4b38      	ldr	r3, [pc, #224]	; (800231c <MX_TIM2_Init+0x138>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800223e:	4837      	ldr	r0, [pc, #220]	; (800231c <MX_TIM2_Init+0x138>)
 8002240:	f006 faec 	bl	800881c <HAL_TIM_Base_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800224a:	f000 f96d 	bl	8002528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800224e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002258:	4619      	mov	r1, r3
 800225a:	4830      	ldr	r0, [pc, #192]	; (800231c <MX_TIM2_Init+0x138>)
 800225c:	f007 f828 	bl	80092b0 <HAL_TIM_ConfigClockSource>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002266:	f000 f95f 	bl	8002528 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800226a:	482c      	ldr	r0, [pc, #176]	; (800231c <MX_TIM2_Init+0x138>)
 800226c:	f006 fc11 	bl	8008a92 <HAL_TIM_OC_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002276:	f000 f957 	bl	8002528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002282:	f107 0320 	add.w	r3, r7, #32
 8002286:	4619      	mov	r1, r3
 8002288:	4824      	ldr	r0, [pc, #144]	; (800231c <MX_TIM2_Init+0x138>)
 800228a:	f007 fc07 	bl	8009a9c <HAL_TIMEx_MasterConfigSynchronization>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002294:	f000 f948 	bl	8002528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002298:	2330      	movs	r3, #48	; 0x30
 800229a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6659;
 800229c:	f641 2303 	movw	r3, #6659	; 0x1a03
 80022a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	2200      	movs	r2, #0
 80022ae:	4619      	mov	r1, r3
 80022b0:	481a      	ldr	r0, [pc, #104]	; (800231c <MX_TIM2_Init+0x138>)
 80022b2:	f006 ffa1 	bl	80091f8 <HAL_TIM_OC_ConfigChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80022bc:	f000 f934 	bl	8002528 <Error_Handler>
  }
  sConfigOC.Pulse = 13500;
 80022c0:	f243 43bc 	movw	r3, #13500	; 0x34bc
 80022c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	2204      	movs	r2, #4
 80022ca:	4619      	mov	r1, r3
 80022cc:	4813      	ldr	r0, [pc, #76]	; (800231c <MX_TIM2_Init+0x138>)
 80022ce:	f006 ff93 	bl	80091f8 <HAL_TIM_OC_ConfigChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80022d8:	f000 f926 	bl	8002528 <Error_Handler>
  }
  sConfigOC.Pulse = 36000;
 80022dc:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 80022e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	2208      	movs	r2, #8
 80022e6:	4619      	mov	r1, r3
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <MX_TIM2_Init+0x138>)
 80022ea:	f006 ff85 	bl	80091f8 <HAL_TIM_OC_ConfigChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 80022f4:	f000 f918 	bl	8002528 <Error_Handler>
  }
  sConfigOC.Pulse = 67000;
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <MX_TIM2_Init+0x13c>)
 80022fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	220c      	movs	r2, #12
 8002300:	4619      	mov	r1, r3
 8002302:	4806      	ldr	r0, [pc, #24]	; (800231c <MX_TIM2_Init+0x138>)
 8002304:	f006 ff78 	bl	80091f8 <HAL_TIM_OC_ConfigChannel>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 800230e:	f000 f90b 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	3738      	adds	r7, #56	; 0x38
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000c80 	.word	0x20000c80
 8002320:	000105b8 	.word	0x000105b8

08002324 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002328:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <MX_TIM10_Init+0x40>)
 800232a:	4a0f      	ldr	r2, [pc, #60]	; (8002368 <MX_TIM10_Init+0x44>)
 800232c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <MX_TIM10_Init+0x40>)
 8002330:	224f      	movs	r2, #79	; 0x4f
 8002332:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <MX_TIM10_Init+0x40>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <MX_TIM10_Init+0x40>)
 800233c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002340:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <MX_TIM10_Init+0x40>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <MX_TIM10_Init+0x40>)
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <MX_TIM10_Init+0x40>)
 8002350:	f006 fa64 	bl	800881c <HAL_TIM_Base_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800235a:	f000 f8e5 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000cc8 	.word	0x20000cc8
 8002368:	40014400 	.word	0x40014400

0800236c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <MX_TIM11_Init+0x40>)
 8002372:	4a0f      	ldr	r2, [pc, #60]	; (80023b0 <MX_TIM11_Init+0x44>)
 8002374:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10;
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <MX_TIM11_Init+0x40>)
 8002378:	220a      	movs	r2, #10
 800237a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <MX_TIM11_Init+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <MX_TIM11_Init+0x40>)
 8002384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002388:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <MX_TIM11_Init+0x40>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <MX_TIM11_Init+0x40>)
 8002392:	2200      	movs	r2, #0
 8002394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <MX_TIM11_Init+0x40>)
 8002398:	f006 fa40 	bl	800881c <HAL_TIM_Base_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80023a2:	f000 f8c1 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000d10 	.word	0x20000d10
 80023b0:	40014800 	.word	0x40014800

080023b4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <MX_USART6_UART_Init+0x4c>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <MX_USART6_UART_Init+0x50>)
 80023bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <MX_USART6_UART_Init+0x4c>)
 80023c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <MX_USART6_UART_Init+0x4c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <MX_USART6_UART_Init+0x4c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <MX_USART6_UART_Init+0x4c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <MX_USART6_UART_Init+0x4c>)
 80023da:	220c      	movs	r2, #12
 80023dc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <MX_USART6_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <MX_USART6_UART_Init+0x4c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023ea:	4805      	ldr	r0, [pc, #20]	; (8002400 <MX_USART6_UART_Init+0x4c>)
 80023ec:	f007 fbd8 	bl	8009ba0 <HAL_UART_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80023f6:	f000 f897 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000d58 	.word	0x20000d58
 8002404:	40011400 	.word	0x40011400

08002408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	60da      	str	r2, [r3, #12]
 800241c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	4b3e      	ldr	r3, [pc, #248]	; (800251c <MX_GPIO_Init+0x114>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a3d      	ldr	r2, [pc, #244]	; (800251c <MX_GPIO_Init+0x114>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <MX_GPIO_Init+0x114>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	4b37      	ldr	r3, [pc, #220]	; (800251c <MX_GPIO_Init+0x114>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a36      	ldr	r2, [pc, #216]	; (800251c <MX_GPIO_Init+0x114>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b34      	ldr	r3, [pc, #208]	; (800251c <MX_GPIO_Init+0x114>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	607b      	str	r3, [r7, #4]
 8002454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_SD_Pin|LED5_Pin, GPIO_PIN_RESET);
 8002456:	2200      	movs	r2, #0
 8002458:	f248 0110 	movw	r1, #32784	; 0x8010
 800245c:	4830      	ldr	r0, [pc, #192]	; (8002520 <MX_GPIO_Init+0x118>)
 800245e:	f003 fc0d 	bl	8005c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSO_DATA_GPIO_Port, DSO_DATA_Pin, GPIO_PIN_SET);
 8002462:	2201      	movs	r2, #1
 8002464:	2102      	movs	r1, #2
 8002466:	482f      	ldr	r0, [pc, #188]	; (8002524 <MX_GPIO_Init+0x11c>)
 8002468:	f003 fc08 	bl	8005c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|LED4_Pin|LED3_Pin, GPIO_PIN_RESET);
 800246c:	2200      	movs	r2, #0
 800246e:	f243 0118 	movw	r1, #12312	; 0x3018
 8002472:	482c      	ldr	r0, [pc, #176]	; (8002524 <MX_GPIO_Init+0x11c>)
 8002474:	f003 fc02 	bl	8005c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_SD_Pin LED5_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin|LED5_Pin;
 8002478:	f248 0310 	movw	r3, #32784	; 0x8010
 800247c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247e:	2301      	movs	r3, #1
 8002480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	4619      	mov	r1, r3
 8002490:	4823      	ldr	r0, [pc, #140]	; (8002520 <MX_GPIO_Init+0x118>)
 8002492:	f003 fa57 	bl	8005944 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSO_DATA_Pin */
  GPIO_InitStruct.Pin = DSO_DATA_Pin;
 8002496:	2302      	movs	r3, #2
 8002498:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800249a:	2311      	movs	r3, #17
 800249c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800249e:	2301      	movs	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DSO_DATA_GPIO_Port, &GPIO_InitStruct);
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	4619      	mov	r1, r3
 80024ac:	481d      	ldr	r0, [pc, #116]	; (8002524 <MX_GPIO_Init+0x11c>)
 80024ae:	f003 fa49 	bl	8005944 <HAL_GPIO_Init>

  /*Configure GPIO pin : DET_SD_Pin */
  GPIO_InitStruct.Pin = DET_SD_Pin;
 80024b2:	2304      	movs	r3, #4
 80024b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DET_SD_GPIO_Port, &GPIO_InitStruct);
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	4619      	mov	r1, r3
 80024c4:	4817      	ldr	r0, [pc, #92]	; (8002524 <MX_GPIO_Init+0x11c>)
 80024c6:	f003 fa3d 	bl	8005944 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED4_Pin|LED3_Pin;
 80024ca:	f243 0318 	movw	r3, #12312	; 0x3018
 80024ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d0:	2301      	movs	r3, #1
 80024d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2300      	movs	r3, #0
 80024da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024dc:	f107 030c 	add.w	r3, r7, #12
 80024e0:	4619      	mov	r1, r3
 80024e2:	4810      	ldr	r0, [pc, #64]	; (8002524 <MX_GPIO_Init+0x11c>)
 80024e4:	f003 fa2e 	bl	8005944 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BTN_Pin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 80024e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	4619      	mov	r1, r3
 80024fe:	4809      	ldr	r0, [pc, #36]	; (8002524 <MX_GPIO_Init+0x11c>)
 8002500:	f003 fa20 	bl	8005944 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	2100      	movs	r1, #0
 8002508:	2017      	movs	r0, #23
 800250a:	f003 f9e4 	bl	80058d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800250e:	2017      	movs	r0, #23
 8002510:	f003 f9fd 	bl	800590e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002514:	bf00      	nop
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	40020000 	.word	0x40020000
 8002524:	40020400 	.word	0x40020400

08002528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800252c:	b672      	cpsid	i
}
 800252e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  send_uart("error handler loop"); //dodane
 8002530:	4801      	ldr	r0, [pc, #4]	; (8002538 <Error_Handler+0x10>)
 8002532:	f7ff f977 	bl	8001824 <send_uart>
 8002536:	e7fb      	b.n	8002530 <Error_Handler+0x8>
 8002538:	0800f910 	.word	0x0800f910

0800253c <huart_ds_init>:
int sensorAdcExt=0;
UART_HandleTypeDef *huart6_new;
RTC_HandleTypeDef *hrtc_new;
bool sdUnmounted;

void huart_ds_init(UART_HandleTypeDef *huart6) {
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	huart6_new=huart6;
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <huart_ds_init+0x1c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6013      	str	r3, [r2, #0]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000e2c 	.word	0x20000e2c

0800255c <sendRtcHandler>:

void sendRtcHandler(RTC_HandleTypeDef *hrtc) {
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	hrtc_new=hrtc;
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <sendRtcHandler+0x1c>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6013      	str	r3, [r2, #0]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000e30 	.word	0x20000e30

0800257c <backButton>:

void backButton(uint8_t back_pos, uint8_t target_screen, uint16_t encoder_pos) { //usunac encoder_pos bo nieuzywane
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
 8002586:	460b      	mov	r3, r1
 8002588:	71bb      	strb	r3, [r7, #6]
 800258a:	4613      	mov	r3, r2
 800258c:	80bb      	strh	r3, [r7, #4]
	ssd1306_SetCursor(0, 56);
 800258e:	2138      	movs	r1, #56	; 0x38
 8002590:	2000      	movs	r0, #0
 8002592:	f002 fc27 	bl	8004de4 <ssd1306_SetCursor>
	ssd1306_WriteString("COFNIJ", Font_6x8, entrySelected(back_pos) ? Black : White);
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	b21b      	sxth	r3, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff f916 	bl	80017cc <entrySelected>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f083 0301 	eor.w	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	4a0b      	ldr	r2, [pc, #44]	; (80025d8 <backButton+0x5c>)
 80025aa:	ca06      	ldmia	r2, {r1, r2}
 80025ac:	480b      	ldr	r0, [pc, #44]	; (80025dc <backButton+0x60>)
 80025ae:	f002 fbf3 	bl	8004d98 <ssd1306_WriteString>
	if(entryClicked(back_pos)) {
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	b21b      	sxth	r3, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff f91b 	bl	80017f2 <entryClicked>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <backButton+0x52>
		encSetPos(0);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f7ff f8d2 	bl	800176c <encSetPos>
		//confirm=true;
		screen = target_screen;
 80025c8:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <backButton+0x64>)
 80025ca:	79bb      	ldrb	r3, [r7, #6]
 80025cc:	7013      	strb	r3, [r2, #0]
	}
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200008a8 	.word	0x200008a8
 80025dc:	0800f924 	.word	0x0800f924
 80025e0:	20000e28 	.word	0x20000e28

080025e4 <listAllItemsFromMenu>:

void listAllItemsFromMenu(Menu *menu) {
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < menu->entry_count; ++i) { //-> bo entry_count na stercie cpu jest (heap)
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e031      	b.n	8002656 <listAllItemsFromMenu+0x72>
			ssd1306_SetCursor(0, i*10);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	0092      	lsls	r2, r2, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	4619      	mov	r1, r3
 8002602:	2000      	movs	r0, #0
 8002604:	f002 fbee 	bl	8004de4 <ssd1306_SetCursor>
			if(entryClicked(i)) {
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	b21b      	sxth	r3, r3
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff f8f0 	bl	80017f2 <entryClicked>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <listAllItemsFromMenu+0x44>
				screen = menu->entries[i].entry;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	3201      	adds	r2, #1
 800261e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <listAllItemsFromMenu+0x88>)
 8002624:	701a      	strb	r2, [r3, #0]
				break;
 8002626:	e01c      	b.n	8002662 <listAllItemsFromMenu+0x7e>
			}
			ssd1306_WriteString(menu->entries[i].entry_string, Font_7x10, entrySelected(i) ? Black : White);
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3301      	adds	r3, #1
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	685c      	ldr	r4, [r3, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	b21b      	sxth	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff f8c7 	bl	80017cc <entrySelected>
 800263e:	4603      	mov	r3, r0
 8002640:	f083 0301 	eor.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <listAllItemsFromMenu+0x8c>)
 8002648:	ca06      	ldmia	r2, {r1, r2}
 800264a:	4620      	mov	r0, r4
 800264c:	f002 fba4 	bl	8004d98 <ssd1306_WriteString>
	for (int i = 0; i < menu->entry_count; ++i) { //-> bo entry_count na stercie cpu jest (heap)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3301      	adds	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	429a      	cmp	r2, r3
 800265e:	dbc8      	blt.n	80025f2 <listAllItemsFromMenu+0xe>
		  }
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bd90      	pop	{r4, r7, pc}
 800266a:	bf00      	nop
 800266c:	20000e28 	.word	0x20000e28
 8002670:	200008b0 	.word	0x200008b0

08002674 <drawMainMenu>:

void drawMainMenu(Menu *menu) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	encSetRange(0, 4);
 800267c:	2104      	movs	r1, #4
 800267e:	2000      	movs	r0, #0
 8002680:	f7ff f85a 	bl	8001738 <encSetRange>
	listAllItemsFromMenu(menu);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ffad 	bl	80025e4 <listAllItemsFromMenu>
	uint32_t encVal = encoderGet();
 800268a:	f7ff f881 	bl	8001790 <encoderGet>
 800268e:	60f8      	str	r0, [r7, #12]
	char charArVal[4];
	sprintf(charArVal, "%lu", encVal);
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	490f      	ldr	r1, [pc, #60]	; (80026d4 <drawMainMenu+0x60>)
 8002698:	4618      	mov	r0, r3
 800269a:	f00a ff75 	bl	800d588 <siprintf>
	ssd1306_SetCursor(0, 44);
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	2000      	movs	r0, #0
 80026a2:	f002 fb9f 	bl	8004de4 <ssd1306_SetCursor>
	ssd1306_WriteString(charArVal, Font_7x10, White);
 80026a6:	4a0c      	ldr	r2, [pc, #48]	; (80026d8 <drawMainMenu+0x64>)
 80026a8:	f107 0008 	add.w	r0, r7, #8
 80026ac:	2301      	movs	r3, #1
 80026ae:	ca06      	ldmia	r2, {r1, r2}
 80026b0:	f002 fb72 	bl	8004d98 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 54);
 80026b4:	2136      	movs	r1, #54	; 0x36
 80026b6:	2000      	movs	r0, #0
 80026b8:	f002 fb94 	bl	8004de4 <ssd1306_SetCursor>
	ssd1306_WriteString(getRtcString(), Font_7x10, White);
 80026bc:	f7ff f990 	bl	80019e0 <getRtcString>
 80026c0:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <drawMainMenu+0x64>)
 80026c2:	2301      	movs	r3, #1
 80026c4:	ca06      	ldmia	r2, {r1, r2}
 80026c6:	f002 fb67 	bl	8004d98 <ssd1306_WriteString>

}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	0800f92c 	.word	0x0800f92c
 80026d8:	200008b0 	.word	0x200008b0

080026dc <drawSensorConfig>:

void drawSensorConfig(Menu *menu) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	encSetRange(0, 3);
 80026e4:	2103      	movs	r1, #3
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7ff f826 	bl	8001738 <encSetRange>
	listAllItemsFromMenu(menu);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff79 	bl	80025e4 <listAllItemsFromMenu>
	backButton(3, MAIN_MENU, 1);
 80026f2:	2201      	movs	r2, #1
 80026f4:	2100      	movs	r1, #0
 80026f6:	2003      	movs	r0, #3
 80026f8:	f7ff ff40 	bl	800257c <backButton>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <drawSdConfig>:

volatile bool dataOverwrite=false;
char strDataOverwrite[6];
char* unmountString="";
char* restartAlertString="";
void drawSdConfig(Menu *menu) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
//	detSd();
	encSetRange(0, 2);
 800270c:	2102      	movs	r1, #2
 800270e:	2000      	movs	r0, #0
 8002710:	f7ff f812 	bl	8001738 <encSetRange>
	ssd1306_SetCursor(0, 0);
 8002714:	2100      	movs	r1, #0
 8002716:	2000      	movs	r0, #0
 8002718:	f002 fb64 	bl	8004de4 <ssd1306_SetCursor>
	ssd1306_WriteString("SD status:", Font_7x10, White);
 800271c:	4a5d      	ldr	r2, [pc, #372]	; (8002894 <drawSdConfig+0x190>)
 800271e:	2301      	movs	r3, #1
 8002720:	ca06      	ldmia	r2, {r1, r2}
 8002722:	485d      	ldr	r0, [pc, #372]	; (8002898 <drawSdConfig+0x194>)
 8002724:	f002 fb38 	bl	8004d98 <ssd1306_WriteString>
	ssd1306_SetCursor(70, 0);
 8002728:	2100      	movs	r1, #0
 800272a:	2046      	movs	r0, #70	; 0x46
 800272c:	f002 fb5a 	bl	8004de4 <ssd1306_SetCursor>
	if(!sdReady) {
 8002730:	4b5a      	ldr	r3, [pc, #360]	; (800289c <drawSdConfig+0x198>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	f083 0301 	eor.w	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d022      	beq.n	8002784 <drawSdConfig+0x80>
		ssd1306_WriteString(" ERROR", Font_7x10, White);
 800273e:	4a55      	ldr	r2, [pc, #340]	; (8002894 <drawSdConfig+0x190>)
 8002740:	2301      	movs	r3, #1
 8002742:	ca06      	ldmia	r2, {r1, r2}
 8002744:	4856      	ldr	r0, [pc, #344]	; (80028a0 <drawSdConfig+0x19c>)
 8002746:	f002 fb27 	bl	8004d98 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 10);
 800274a:	210a      	movs	r1, #10
 800274c:	2000      	movs	r0, #0
 800274e:	f002 fb49 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString(getFresultString(fresult), Font_7x10, White);
 8002752:	4b54      	ldr	r3, [pc, #336]	; (80028a4 <drawSdConfig+0x1a0>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	4618      	mov	r0, r3
 800275a:	f000 ffd9 	bl	8003710 <getFresultString>
 800275e:	4a4d      	ldr	r2, [pc, #308]	; (8002894 <drawSdConfig+0x190>)
 8002760:	2301      	movs	r3, #1
 8002762:	ca06      	ldmia	r2, {r1, r2}
 8002764:	f002 fb18 	bl	8004d98 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 20);
 8002768:	2114      	movs	r1, #20
 800276a:	2000      	movs	r0, #0
 800276c:	f002 fb3a 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString("Start forbidden", Font_7x10, White);
 8002770:	4a48      	ldr	r2, [pc, #288]	; (8002894 <drawSdConfig+0x190>)
 8002772:	2301      	movs	r3, #1
 8002774:	ca06      	ldmia	r2, {r1, r2}
 8002776:	484c      	ldr	r0, [pc, #304]	; (80028a8 <drawSdConfig+0x1a4>)
 8002778:	f002 fb0e 	bl	8004d98 <ssd1306_WriteString>
		leds[2].state=true;
 800277c:	4b4b      	ldr	r3, [pc, #300]	; (80028ac <drawSdConfig+0x1a8>)
 800277e:	2201      	movs	r2, #1
 8002780:	759a      	strb	r2, [r3, #22]
 8002782:	e07d      	b.n	8002880 <drawSdConfig+0x17c>

	}
	else {
		ssd1306_WriteString(getFresultString(fresult), Font_7x10, White);
 8002784:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <drawSdConfig+0x1a0>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	4618      	mov	r0, r3
 800278c:	f000 ffc0 	bl	8003710 <getFresultString>
 8002790:	4a40      	ldr	r2, [pc, #256]	; (8002894 <drawSdConfig+0x190>)
 8002792:	2301      	movs	r3, #1
 8002794:	ca06      	ldmia	r2, {r1, r2}
 8002796:	f002 faff 	bl	8004d98 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 10);
 800279a:	210a      	movs	r1, #10
 800279c:	2000      	movs	r0, #0
 800279e:	f002 fb21 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString("Overwrite: ", Font_7x10, entrySelected(0) ? Black : White);
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7ff f812 	bl	80017cc <entrySelected>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f083 0301 	eor.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	4a38      	ldr	r2, [pc, #224]	; (8002894 <drawSdConfig+0x190>)
 80027b2:	ca06      	ldmia	r2, {r1, r2}
 80027b4:	483e      	ldr	r0, [pc, #248]	; (80028b0 <drawSdConfig+0x1ac>)
 80027b6:	f002 faef 	bl	8004d98 <ssd1306_WriteString>
//					}
//					else {
//						dataOverwrite=false;
//					}
//		}
		ssd1306_SetCursor(75, 10);
 80027ba:	210a      	movs	r1, #10
 80027bc:	204b      	movs	r0, #75	; 0x4b
 80027be:	f002 fb11 	bl	8004de4 <ssd1306_SetCursor>
		sprintf(strDataOverwrite, "%s", dataOverwrite ? "true" : "false");
 80027c2:	4b3c      	ldr	r3, [pc, #240]	; (80028b4 <drawSdConfig+0x1b0>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <drawSdConfig+0xcc>
 80027cc:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <drawSdConfig+0x1b4>)
 80027ce:	e000      	b.n	80027d2 <drawSdConfig+0xce>
 80027d0:	4b3a      	ldr	r3, [pc, #232]	; (80028bc <drawSdConfig+0x1b8>)
 80027d2:	461a      	mov	r2, r3
 80027d4:	493a      	ldr	r1, [pc, #232]	; (80028c0 <drawSdConfig+0x1bc>)
 80027d6:	483b      	ldr	r0, [pc, #236]	; (80028c4 <drawSdConfig+0x1c0>)
 80027d8:	f00a fed6 	bl	800d588 <siprintf>
		ssd1306_WriteString(strDataOverwrite, Font_7x10, entrySelected(0) ? Black : White);
 80027dc:	2000      	movs	r0, #0
 80027de:	f7fe fff5 	bl	80017cc <entrySelected>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f083 0301 	eor.w	r3, r3, #1
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	4a2a      	ldr	r2, [pc, #168]	; (8002894 <drawSdConfig+0x190>)
 80027ec:	ca06      	ldmia	r2, {r1, r2}
 80027ee:	4835      	ldr	r0, [pc, #212]	; (80028c4 <drawSdConfig+0x1c0>)
 80027f0:	f002 fad2 	bl	8004d98 <ssd1306_WriteString>
		ssd1306_SetCursor(0,20);
 80027f4:	2114      	movs	r1, #20
 80027f6:	2000      	movs	r0, #0
 80027f8:	f002 faf4 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString("Unmount SD", Font_7x10, entrySelected(1) ? Black : White);
 80027fc:	2001      	movs	r0, #1
 80027fe:	f7fe ffe5 	bl	80017cc <entrySelected>
 8002802:	4603      	mov	r3, r0
 8002804:	f083 0301 	eor.w	r3, r3, #1
 8002808:	b2db      	uxtb	r3, r3
 800280a:	4a22      	ldr	r2, [pc, #136]	; (8002894 <drawSdConfig+0x190>)
 800280c:	ca06      	ldmia	r2, {r1, r2}
 800280e:	482e      	ldr	r0, [pc, #184]	; (80028c8 <drawSdConfig+0x1c4>)
 8002810:	f002 fac2 	bl	8004d98 <ssd1306_WriteString>

		if(entrySelected(1) && entryClicked(1)) {
 8002814:	2001      	movs	r0, #1
 8002816:	f7fe ffd9 	bl	80017cc <entrySelected>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d019      	beq.n	8002854 <drawSdConfig+0x150>
 8002820:	2001      	movs	r0, #1
 8002822:	f7fe ffe6 	bl	80017f2 <entryClicked>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d013      	beq.n	8002854 <drawSdConfig+0x150>
			sd_demount();
 800282c:	f000 fe0c 	bl	8003448 <sd_demount>
			sdUnmounted=true;
 8002830:	4b26      	ldr	r3, [pc, #152]	; (80028cc <drawSdConfig+0x1c8>)
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
			unmountString="                    ";
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <drawSdConfig+0x1cc>)
 8002838:	4a26      	ldr	r2, [pc, #152]	; (80028d4 <drawSdConfig+0x1d0>)
 800283a:	601a      	str	r2, [r3, #0]
			unmountString="Unmount SD success";
 800283c:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <drawSdConfig+0x1cc>)
 800283e:	4a26      	ldr	r2, [pc, #152]	; (80028d8 <drawSdConfig+0x1d4>)
 8002840:	601a      	str	r2, [r3, #0]
			restartAlertString="                  ";
 8002842:	4b26      	ldr	r3, [pc, #152]	; (80028dc <drawSdConfig+0x1d8>)
 8002844:	4a26      	ldr	r2, [pc, #152]	; (80028e0 <drawSdConfig+0x1dc>)
 8002846:	601a      	str	r2, [r3, #0]
			restartAlertString="RESTART NEEDED!";
 8002848:	4b24      	ldr	r3, [pc, #144]	; (80028dc <drawSdConfig+0x1d8>)
 800284a:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <drawSdConfig+0x1e0>)
 800284c:	601a      	str	r2, [r3, #0]
			leds[2].state=true;
 800284e:	4b17      	ldr	r3, [pc, #92]	; (80028ac <drawSdConfig+0x1a8>)
 8002850:	2201      	movs	r2, #1
 8002852:	759a      	strb	r2, [r3, #22]
		}
		ssd1306_SetCursor(0,30);
 8002854:	211e      	movs	r1, #30
 8002856:	2000      	movs	r0, #0
 8002858:	f002 fac4 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString(unmountString, Font_7x10, White);
 800285c:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <drawSdConfig+0x1cc>)
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <drawSdConfig+0x190>)
 8002862:	2301      	movs	r3, #1
 8002864:	ca06      	ldmia	r2, {r1, r2}
 8002866:	f002 fa97 	bl	8004d98 <ssd1306_WriteString>
		ssd1306_SetCursor(0,40);
 800286a:	2128      	movs	r1, #40	; 0x28
 800286c:	2000      	movs	r0, #0
 800286e:	f002 fab9 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString(restartAlertString, Font_7x10, White);
 8002872:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <drawSdConfig+0x1d8>)
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	4a07      	ldr	r2, [pc, #28]	; (8002894 <drawSdConfig+0x190>)
 8002878:	2301      	movs	r3, #1
 800287a:	ca06      	ldmia	r2, {r1, r2}
 800287c:	f002 fa8c 	bl	8004d98 <ssd1306_WriteString>
	}
	backButton(2, MAIN_MENU, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	2100      	movs	r1, #0
 8002884:	2002      	movs	r0, #2
 8002886:	f7ff fe79 	bl	800257c <backButton>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200008b0 	.word	0x200008b0
 8002898:	0800f934 	.word	0x0800f934
 800289c:	20019964 	.word	0x20019964
 80028a0:	0800f940 	.word	0x0800f940
 80028a4:	20019950 	.word	0x20019950
 80028a8:	0800f948 	.word	0x0800f948
 80028ac:	20000000 	.word	0x20000000
 80028b0:	0800f958 	.word	0x0800f958
 80028b4:	20000e35 	.word	0x20000e35
 80028b8:	0800f964 	.word	0x0800f964
 80028bc:	0800f96c 	.word	0x0800f96c
 80028c0:	0800f974 	.word	0x0800f974
 80028c4:	20000e38 	.word	0x20000e38
 80028c8:	0800f978 	.word	0x0800f978
 80028cc:	20000e34 	.word	0x20000e34
 80028d0:	20000028 	.word	0x20000028
 80028d4:	0800f984 	.word	0x0800f984
 80028d8:	0800f99c 	.word	0x0800f99c
 80028dc:	2000002c 	.word	0x2000002c
 80028e0:	0800f9b0 	.word	0x0800f9b0
 80028e4:	0800f9c4 	.word	0x0800f9c4

080028e8 <drawSensorConfigAdcExt>:




void drawSensorConfigAdcExt(Menu *menu) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	encSetRange(0, 4);
 80028f0:	2104      	movs	r1, #4
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7fe ff20 	bl	8001738 <encSetRange>
	listAllItemsFromMenu(menu);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fe73 	bl	80025e4 <listAllItemsFromMenu>
	backButton(4, MAIN_MENU, 4);
 80028fe:	2204      	movs	r2, #4
 8002900:	2100      	movs	r1, #0
 8002902:	2004      	movs	r0, #4
 8002904:	f7ff fe3a 	bl	800257c <backButton>
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <drawSensorConfigAdcInt>:
void drawSensorConfigAdcInt(Menu *menu) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	encSetRange(0, 4);
 8002918:	2104      	movs	r1, #4
 800291a:	2000      	movs	r0, #0
 800291c:	f7fe ff0c 	bl	8001738 <encSetRange>
	listAllItemsFromMenu(menu);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff fe5f 	bl	80025e4 <listAllItemsFromMenu>
	backButton(4, MAIN_MENU, 4);
 8002926:	2204      	movs	r2, #4
 8002928:	2100      	movs	r1, #0
 800292a:	2004      	movs	r0, #4
 800292c:	f7ff fe26 	bl	800257c <backButton>
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <drawSensorConfigDS18>:
void drawSensorConfigDS18(Menu *menu) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	encSetRange(0, 1);
 8002940:	2101      	movs	r1, #1
 8002942:	2000      	movs	r0, #0
 8002944:	f7fe fef8 	bl	8001738 <encSetRange>
	listAllItemsFromMenu(menu);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff fe4b 	bl	80025e4 <listAllItemsFromMenu>
	backButton(3, MAIN_MENU, 3);
 800294e:	2203      	movs	r2, #3
 8002950:	2100      	movs	r1, #0
 8002952:	2003      	movs	r0, #3
 8002954:	f7ff fe12 	bl	800257c <backButton>
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <drawSensorOptions>:
uint16_t samplingRates[] = {10,50,100,500};
volatile uint8_t  samplingIndex = 0;
volatile int counter=0;
char sampl1str[10]="???";

void drawSensorOptions(uint8_t index) {
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
	ssd1306_WriteString(sensors[index].name, Font_11x18, White);
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	015b      	lsls	r3, r3, #5
 800296e:	4a4e      	ldr	r2, [pc, #312]	; (8002aa8 <drawSensorOptions+0x148>)
 8002970:	1898      	adds	r0, r3, r2
 8002972:	4a4e      	ldr	r2, [pc, #312]	; (8002aac <drawSensorOptions+0x14c>)
 8002974:	2301      	movs	r3, #1
 8002976:	ca06      	ldmia	r2, {r1, r2}
 8002978:	f002 fa0e 	bl	8004d98 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 800297c:	2112      	movs	r1, #18
 800297e:	2000      	movs	r0, #0
 8002980:	f002 fa30 	bl	8004de4 <ssd1306_SetCursor>
	char isEnabledStr[20];
	if(entrySelected(0) && entryClicked(0)) {
 8002984:	2000      	movs	r0, #0
 8002986:	f7fe ff21 	bl	80017cc <entrySelected>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01f      	beq.n	80029d0 <drawSensorOptions+0x70>
 8002990:	2000      	movs	r0, #0
 8002992:	f7fe ff2e 	bl	80017f2 <entryClicked>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d019      	beq.n	80029d0 <drawSensorOptions+0x70>
		if(sensors[index].isEnabled==false) {
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	4a42      	ldr	r2, [pc, #264]	; (8002aa8 <drawSensorOptions+0x148>)
 80029a0:	015b      	lsls	r3, r3, #5
 80029a2:	4413      	add	r3, r2
 80029a4:	3314      	adds	r3, #20
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	f083 0301 	eor.w	r3, r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <drawSensorOptions+0x62>
			sensors[index].isEnabled=true;
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	4a3c      	ldr	r2, [pc, #240]	; (8002aa8 <drawSensorOptions+0x148>)
 80029b6:	015b      	lsls	r3, r3, #5
 80029b8:	4413      	add	r3, r2
 80029ba:	3314      	adds	r3, #20
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	e006      	b.n	80029d0 <drawSensorOptions+0x70>
		}
		else {
			sensors[index].isEnabled=false;
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	4a38      	ldr	r2, [pc, #224]	; (8002aa8 <drawSensorOptions+0x148>)
 80029c6:	015b      	lsls	r3, r3, #5
 80029c8:	4413      	add	r3, r2
 80029ca:	3314      	adds	r3, #20
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
		}
	}
	sprintf(isEnabledStr, "enabled: %s", sensors[index].isEnabled ? "true" : "false");
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	4a35      	ldr	r2, [pc, #212]	; (8002aa8 <drawSensorOptions+0x148>)
 80029d4:	015b      	lsls	r3, r3, #5
 80029d6:	4413      	add	r3, r2
 80029d8:	3314      	adds	r3, #20
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <drawSensorOptions+0x84>
 80029e0:	4a33      	ldr	r2, [pc, #204]	; (8002ab0 <drawSensorOptions+0x150>)
 80029e2:	e000      	b.n	80029e6 <drawSensorOptions+0x86>
 80029e4:	4a33      	ldr	r2, [pc, #204]	; (8002ab4 <drawSensorOptions+0x154>)
 80029e6:	f107 030c 	add.w	r3, r7, #12
 80029ea:	4933      	ldr	r1, [pc, #204]	; (8002ab8 <drawSensorOptions+0x158>)
 80029ec:	4618      	mov	r0, r3
 80029ee:	f00a fdcb 	bl	800d588 <siprintf>
	ssd1306_WriteString(isEnabledStr, Font_7x10, entrySelected(0) ? Black : White);
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7fe feea 	bl	80017cc <entrySelected>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f083 0301 	eor.w	r3, r3, #1
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <drawSensorOptions+0x15c>)
 8002a02:	f107 000c 	add.w	r0, r7, #12
 8002a06:	ca06      	ldmia	r2, {r1, r2}
 8002a08:	f002 f9c6 	bl	8004d98 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 28);
 8002a0c:	211c      	movs	r1, #28
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f002 f9e8 	bl	8004de4 <ssd1306_SetCursor>
	ssd1306_WriteString("period [ms]: ", Font_7x10, White);
 8002a14:	4a29      	ldr	r2, [pc, #164]	; (8002abc <drawSensorOptions+0x15c>)
 8002a16:	2301      	movs	r3, #1
 8002a18:	ca06      	ldmia	r2, {r1, r2}
 8002a1a:	4829      	ldr	r0, [pc, #164]	; (8002ac0 <drawSensorOptions+0x160>)
 8002a1c:	f002 f9bc 	bl	8004d98 <ssd1306_WriteString>
	ssd1306_SetCursor(90, 28);
 8002a20:	211c      	movs	r1, #28
 8002a22:	205a      	movs	r0, #90	; 0x5a
 8002a24:	f002 f9de 	bl	8004de4 <ssd1306_SetCursor>
	sprintf(sampl1str, "%d\n\r", sensors[index].samplingRate);
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	4a1f      	ldr	r2, [pc, #124]	; (8002aa8 <drawSensorOptions+0x148>)
 8002a2c:	015b      	lsls	r3, r3, #5
 8002a2e:	4413      	add	r3, r2
 8002a30:	3316      	adds	r3, #22
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4923      	ldr	r1, [pc, #140]	; (8002ac4 <drawSensorOptions+0x164>)
 8002a38:	4823      	ldr	r0, [pc, #140]	; (8002ac8 <drawSensorOptions+0x168>)
 8002a3a:	f00a fda5 	bl	800d588 <siprintf>
	ssd1306_WriteString(sampl1str, Font_7x10, entrySelected(1) ? Black : White);
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f7fe fec4 	bl	80017cc <entrySelected>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f083 0301 	eor.w	r3, r3, #1
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <drawSensorOptions+0x15c>)
 8002a4e:	ca06      	ldmia	r2, {r1, r2}
 8002a50:	481d      	ldr	r0, [pc, #116]	; (8002ac8 <drawSensorOptions+0x168>)
 8002a52:	f002 f9a1 	bl	8004d98 <ssd1306_WriteString>
	if(entrySelected(1) && entryClicked(1)) { //tu sie dzieje cos dziwnego
 8002a56:	2001      	movs	r0, #1
 8002a58:	f7fe feb8 	bl	80017cc <entrySelected>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01e      	beq.n	8002aa0 <drawSensorOptions+0x140>
 8002a62:	2001      	movs	r0, #1
 8002a64:	f7fe fec5 	bl	80017f2 <entryClicked>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d018      	beq.n	8002aa0 <drawSensorOptions+0x140>
		//send_uart("klikniete\n\r");
		counter++;
 8002a6e:	4b17      	ldr	r3, [pc, #92]	; (8002acc <drawSensorOptions+0x16c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	4a15      	ldr	r2, [pc, #84]	; (8002acc <drawSensorOptions+0x16c>)
 8002a76:	6013      	str	r3, [r2, #0]
		if(counter>4) {
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <drawSensorOptions+0x16c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	dd02      	ble.n	8002a86 <drawSensorOptions+0x126>
			counter=1;
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <drawSensorOptions+0x16c>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
		}
		sensors[index].samplingRate = samplingRates[counter-1];
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <drawSensorOptions+0x16c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	1e5a      	subs	r2, r3, #1
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	4910      	ldr	r1, [pc, #64]	; (8002ad0 <drawSensorOptions+0x170>)
 8002a90:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <drawSensorOptions+0x148>)
 8002a96:	015b      	lsls	r3, r3, #5
 8002a98:	4413      	add	r3, r2
 8002a9a:	3316      	adds	r3, #22
 8002a9c:	460a      	mov	r2, r1
 8002a9e:	801a      	strh	r2, [r3, #0]
	}

}
 8002aa0:	bf00      	nop
 8002aa2:	3720      	adds	r7, #32
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000030 	.word	0x20000030
 8002aac:	200008b8 	.word	0x200008b8
 8002ab0:	0800f964 	.word	0x0800f964
 8002ab4:	0800f96c 	.word	0x0800f96c
 8002ab8:	0800f9d4 	.word	0x0800f9d4
 8002abc:	200008b0 	.word	0x200008b0
 8002ac0:	0800f9e0 	.word	0x0800f9e0
 8002ac4:	0800f9f0 	.word	0x0800f9f0
 8002ac8:	200002a0 	.word	0x200002a0
 8002acc:	20000e40 	.word	0x20000e40
 8002ad0:	20000298 	.word	0x20000298

08002ad4 <drawSensorConfigGeneric>:


void drawSensorConfigGeneric(Menu *menu) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
	encSetRange(0, 2);
 8002adc:	2102      	movs	r1, #2
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f7fe fe2a 	bl	8001738 <encSetRange>
	ssd1306_SetCursor(0, 0);
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f002 f97c 	bl	8004de4 <ssd1306_SetCursor>
	drawSensorOptions(screen-SENSOR_CONFIG_ADC_EXT0);
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <drawSensorConfigGeneric+0x3c>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	3b0a      	subs	r3, #10
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff ff32 	bl	8002960 <drawSensorOptions>
	backButton(2, MAIN_MENU, 2);
 8002afc:	2202      	movs	r2, #2
 8002afe:	2100      	movs	r1, #0
 8002b00:	2002      	movs	r0, #2
 8002b02:	f7ff fd3b 	bl	800257c <backButton>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000e28 	.word	0x20000e28

08002b14 <ch1Enable>:
volatile char result[1000]="";
volatile float value;
volatile char temp[50];
void ch1Enable(void) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0


	for(int i=0; i<11; i++) {
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	e04a      	b.n	8002bb6 <ch1Enable+0xa2>
		if(sensors[i].samplingRate==10 && sensors[i].isEnabled) {
 8002b20:	4a29      	ldr	r2, [pc, #164]	; (8002bc8 <ch1Enable+0xb4>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	015b      	lsls	r3, r3, #5
 8002b26:	4413      	add	r3, r2
 8002b28:	3316      	adds	r3, #22
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	2b0a      	cmp	r3, #10
 8002b2e:	d13f      	bne.n	8002bb0 <ch1Enable+0x9c>
 8002b30:	4a25      	ldr	r2, [pc, #148]	; (8002bc8 <ch1Enable+0xb4>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	015b      	lsls	r3, r3, #5
 8002b36:	4413      	add	r3, r2
 8002b38:	3314      	adds	r3, #20
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d037      	beq.n	8002bb0 <ch1Enable+0x9c>
			for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002b40:	2300      	movs	r3, #0
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	e031      	b.n	8002baa <ch1Enable+0x96>
				if(strcmp(sensors[i].name, mapSensors[j].sensorName)==0) { //zamiast tego
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	015b      	lsls	r3, r3, #5
 8002b4a:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <ch1Enable+0xb4>)
 8002b4c:	1898      	adds	r0, r3, r2
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4a1c      	ldr	r2, [pc, #112]	; (8002bcc <ch1Enable+0xb8>)
 8002b5a:	4413      	add	r3, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f7fd fb3f 	bl	80001e0 <strcmp>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d11d      	bne.n	8002ba4 <ch1Enable+0x90>
					value = mapSensors[j].function();
 8002b68:	4918      	ldr	r1, [pc, #96]	; (8002bcc <ch1Enable+0xb8>)
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	440b      	add	r3, r1
 8002b76:	3314      	adds	r3, #20
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4798      	blx	r3
 8002b7c:	eef0 7a40 	vmov.f32	s15, s0
 8002b80:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <ch1Enable+0xbc>)
 8002b82:	edc3 7a00 	vstr	s15, [r3]
					sensors[i].lastValue=value;
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <ch1Enable+0xbc>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	490f      	ldr	r1, [pc, #60]	; (8002bc8 <ch1Enable+0xb4>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	015b      	lsls	r3, r3, #5
 8002b90:	440b      	add	r3, r1
 8002b92:	3318      	adds	r3, #24
 8002b94:	601a      	str	r2, [r3, #0]
					sensors[i].hasValue=true;
 8002b96:	4a0c      	ldr	r2, [pc, #48]	; (8002bc8 <ch1Enable+0xb4>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	015b      	lsls	r3, r3, #5
 8002b9c:	4413      	add	r3, r2
 8002b9e:	331c      	adds	r3, #28
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	603b      	str	r3, [r7, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b0a      	cmp	r3, #10
 8002bae:	d9ca      	bls.n	8002b46 <ch1Enable+0x32>
	for(int i=0; i<11; i++) {
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	607b      	str	r3, [r7, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b0a      	cmp	r3, #10
 8002bba:	ddb1      	ble.n	8002b20 <ch1Enable+0xc>
			}
		}
		else {
		}
	}
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000030 	.word	0x20000030
 8002bcc:	20000190 	.word	0x20000190
 8002bd0:	20000e44 	.word	0x20000e44

08002bd4 <ch2Enable>:

void ch2Enable(void) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
	for(int i=0; i<11; i++) {
 8002bda:	2300      	movs	r3, #0
 8002bdc:	607b      	str	r3, [r7, #4]
 8002bde:	e04a      	b.n	8002c76 <ch2Enable+0xa2>
			if(sensors[i].samplingRate==50 && sensors[i].isEnabled) {
 8002be0:	4a29      	ldr	r2, [pc, #164]	; (8002c88 <ch2Enable+0xb4>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	015b      	lsls	r3, r3, #5
 8002be6:	4413      	add	r3, r2
 8002be8:	3316      	adds	r3, #22
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	2b32      	cmp	r3, #50	; 0x32
 8002bee:	d13f      	bne.n	8002c70 <ch2Enable+0x9c>
 8002bf0:	4a25      	ldr	r2, [pc, #148]	; (8002c88 <ch2Enable+0xb4>)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	015b      	lsls	r3, r3, #5
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3314      	adds	r3, #20
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d037      	beq.n	8002c70 <ch2Enable+0x9c>
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002c00:	2300      	movs	r3, #0
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	e031      	b.n	8002c6a <ch2Enable+0x96>
					if(strcmp(sensors[i].name, mapSensors[j].sensorName)==0) { //zamiast tego
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	015b      	lsls	r3, r3, #5
 8002c0a:	4a1f      	ldr	r2, [pc, #124]	; (8002c88 <ch2Enable+0xb4>)
 8002c0c:	1898      	adds	r0, r3, r2
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <ch2Enable+0xb8>)
 8002c1a:	4413      	add	r3, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f7fd fadf 	bl	80001e0 <strcmp>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d11d      	bne.n	8002c64 <ch2Enable+0x90>
						value = mapSensors[j].function();
 8002c28:	4918      	ldr	r1, [pc, #96]	; (8002c8c <ch2Enable+0xb8>)
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	440b      	add	r3, r1
 8002c36:	3314      	adds	r3, #20
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4798      	blx	r3
 8002c3c:	eef0 7a40 	vmov.f32	s15, s0
 8002c40:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <ch2Enable+0xbc>)
 8002c42:	edc3 7a00 	vstr	s15, [r3]
						sensors[i].lastValue=value;
 8002c46:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <ch2Enable+0xbc>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	490f      	ldr	r1, [pc, #60]	; (8002c88 <ch2Enable+0xb4>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	015b      	lsls	r3, r3, #5
 8002c50:	440b      	add	r3, r1
 8002c52:	3318      	adds	r3, #24
 8002c54:	601a      	str	r2, [r3, #0]
						sensors[i].hasValue=true;
 8002c56:	4a0c      	ldr	r2, [pc, #48]	; (8002c88 <ch2Enable+0xb4>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	015b      	lsls	r3, r3, #5
 8002c5c:	4413      	add	r3, r2
 8002c5e:	331c      	adds	r3, #28
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	603b      	str	r3, [r7, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b0a      	cmp	r3, #10
 8002c6e:	d9ca      	bls.n	8002c06 <ch2Enable+0x32>
	for(int i=0; i<11; i++) {
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3301      	adds	r3, #1
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b0a      	cmp	r3, #10
 8002c7a:	ddb1      	ble.n	8002be0 <ch2Enable+0xc>
			else {

			}

		}
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000030 	.word	0x20000030
 8002c8c:	20000190 	.word	0x20000190
 8002c90:	20000e44 	.word	0x20000e44

08002c94 <ch3Enable>:

void ch3Enable(void) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
	for(int i=0; i<11; i++) {
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	e04a      	b.n	8002d36 <ch3Enable+0xa2>
			if(sensors[i].samplingRate==100 && sensors[i].isEnabled) {
 8002ca0:	4a29      	ldr	r2, [pc, #164]	; (8002d48 <ch3Enable+0xb4>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	015b      	lsls	r3, r3, #5
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3316      	adds	r3, #22
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	2b64      	cmp	r3, #100	; 0x64
 8002cae:	d13f      	bne.n	8002d30 <ch3Enable+0x9c>
 8002cb0:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <ch3Enable+0xb4>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	015b      	lsls	r3, r3, #5
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3314      	adds	r3, #20
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d037      	beq.n	8002d30 <ch3Enable+0x9c>
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	e031      	b.n	8002d2a <ch3Enable+0x96>
					if(strcmp(sensors[i].name, mapSensors[j].sensorName)==0) { //zamiast tego
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	015b      	lsls	r3, r3, #5
 8002cca:	4a1f      	ldr	r2, [pc, #124]	; (8002d48 <ch3Enable+0xb4>)
 8002ccc:	1898      	adds	r0, r3, r2
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4a1c      	ldr	r2, [pc, #112]	; (8002d4c <ch3Enable+0xb8>)
 8002cda:	4413      	add	r3, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f7fd fa7f 	bl	80001e0 <strcmp>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d11d      	bne.n	8002d24 <ch3Enable+0x90>
						value = mapSensors[j].function();
 8002ce8:	4918      	ldr	r1, [pc, #96]	; (8002d4c <ch3Enable+0xb8>)
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3314      	adds	r3, #20
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4798      	blx	r3
 8002cfc:	eef0 7a40 	vmov.f32	s15, s0
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <ch3Enable+0xbc>)
 8002d02:	edc3 7a00 	vstr	s15, [r3]
						sensors[i].lastValue=value;
 8002d06:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <ch3Enable+0xbc>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	490f      	ldr	r1, [pc, #60]	; (8002d48 <ch3Enable+0xb4>)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	015b      	lsls	r3, r3, #5
 8002d10:	440b      	add	r3, r1
 8002d12:	3318      	adds	r3, #24
 8002d14:	601a      	str	r2, [r3, #0]
						sensors[i].hasValue=true;
 8002d16:	4a0c      	ldr	r2, [pc, #48]	; (8002d48 <ch3Enable+0xb4>)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	015b      	lsls	r3, r3, #5
 8002d1c:	4413      	add	r3, r2
 8002d1e:	331c      	adds	r3, #28
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b0a      	cmp	r3, #10
 8002d2e:	d9ca      	bls.n	8002cc6 <ch3Enable+0x32>
	for(int i=0; i<11; i++) {
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3301      	adds	r3, #1
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b0a      	cmp	r3, #10
 8002d3a:	ddb1      	ble.n	8002ca0 <ch3Enable+0xc>
			else {

			}

		}
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000030 	.word	0x20000030
 8002d4c:	20000190 	.word	0x20000190
 8002d50:	20000e44 	.word	0x20000e44

08002d54 <ch4Enable>:

void ch4Enable(void) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
	for(int i=0; i<11; i++) {
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	e04b      	b.n	8002df8 <ch4Enable+0xa4>
			if(sensors[i].samplingRate==500 && sensors[i].isEnabled) {
 8002d60:	4a29      	ldr	r2, [pc, #164]	; (8002e08 <ch4Enable+0xb4>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	015b      	lsls	r3, r3, #5
 8002d66:	4413      	add	r3, r2
 8002d68:	3316      	adds	r3, #22
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d70:	d13f      	bne.n	8002df2 <ch4Enable+0x9e>
 8002d72:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <ch4Enable+0xb4>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	015b      	lsls	r3, r3, #5
 8002d78:	4413      	add	r3, r2
 8002d7a:	3314      	adds	r3, #20
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d037      	beq.n	8002df2 <ch4Enable+0x9e>
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002d82:	2300      	movs	r3, #0
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	e031      	b.n	8002dec <ch4Enable+0x98>
					if(strcmp(sensors[i].name, mapSensors[j].sensorName)==0) { //zamiast tego
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	015b      	lsls	r3, r3, #5
 8002d8c:	4a1e      	ldr	r2, [pc, #120]	; (8002e08 <ch4Enable+0xb4>)
 8002d8e:	1898      	adds	r0, r3, r2
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4a1c      	ldr	r2, [pc, #112]	; (8002e0c <ch4Enable+0xb8>)
 8002d9c:	4413      	add	r3, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f7fd fa1e 	bl	80001e0 <strcmp>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d11d      	bne.n	8002de6 <ch4Enable+0x92>
						value = mapSensors[j].function();
 8002daa:	4918      	ldr	r1, [pc, #96]	; (8002e0c <ch4Enable+0xb8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	3314      	adds	r3, #20
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4798      	blx	r3
 8002dbe:	eef0 7a40 	vmov.f32	s15, s0
 8002dc2:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <ch4Enable+0xbc>)
 8002dc4:	edc3 7a00 	vstr	s15, [r3]
						sensors[i].lastValue=value;
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <ch4Enable+0xbc>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	490e      	ldr	r1, [pc, #56]	; (8002e08 <ch4Enable+0xb4>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	015b      	lsls	r3, r3, #5
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3318      	adds	r3, #24
 8002dd6:	601a      	str	r2, [r3, #0]
						sensors[i].hasValue=true;
 8002dd8:	4a0b      	ldr	r2, [pc, #44]	; (8002e08 <ch4Enable+0xb4>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	015b      	lsls	r3, r3, #5
 8002dde:	4413      	add	r3, r2
 8002de0:	331c      	adds	r3, #28
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<sizeof(mapSensors)/sizeof(MapSensors); j++) {
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b0a      	cmp	r3, #10
 8002df0:	d9ca      	bls.n	8002d88 <ch4Enable+0x34>
	for(int i=0; i<11; i++) {
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3301      	adds	r3, #1
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b0a      	cmp	r3, #10
 8002dfc:	ddb0      	ble.n	8002d60 <ch4Enable+0xc>
					}
				}
			}
			else {}
		}
}
 8002dfe:	bf00      	nop
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20000030 	.word	0x20000030
 8002e0c:	20000190 	.word	0x20000190
 8002e10:	20000e44 	.word	0x20000e44

08002e14 <debugAdcInt>:


void debugAdcInt(Menu *menu) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08c      	sub	sp, #48	; 0x30
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	encSetRange(0,1);
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f7fe fc8a 	bl	8001738 <encSetRange>
	ssd1306_SetCursor(0, 0);
 8002e24:	2100      	movs	r1, #0
 8002e26:	2000      	movs	r0, #0
 8002e28:	f001 ffdc 	bl	8004de4 <ssd1306_SetCursor>
	char str[40];
	sprintf(str, "int_ch0=%.3f V", getValueAdcIntCh0());
 8002e2c:	f7fe f9f6 	bl	800121c <getValueAdcIntCh0>
 8002e30:	ee10 3a10 	vmov	r3, s0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd fb9f 	bl	8000578 <__aeabi_f2d>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	f107 0008 	add.w	r0, r7, #8
 8002e42:	493b      	ldr	r1, [pc, #236]	; (8002f30 <debugAdcInt+0x11c>)
 8002e44:	f00a fba0 	bl	800d588 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8002e48:	4a3a      	ldr	r2, [pc, #232]	; (8002f34 <debugAdcInt+0x120>)
 8002e4a:	f107 0008 	add.w	r0, r7, #8
 8002e4e:	2301      	movs	r3, #1
 8002e50:	ca06      	ldmia	r2, {r1, r2}
 8002e52:	f001 ffa1 	bl	8004d98 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 10);
 8002e56:	210a      	movs	r1, #10
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f001 ffc3 	bl	8004de4 <ssd1306_SetCursor>
	sprintf(str, "int_ch1=%.3f V", getValueAdcIntCh1());
 8002e5e:	f7fe fa13 	bl	8001288 <getValueAdcIntCh1>
 8002e62:	ee10 3a10 	vmov	r3, s0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd fb86 	bl	8000578 <__aeabi_f2d>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	f107 0008 	add.w	r0, r7, #8
 8002e74:	4930      	ldr	r1, [pc, #192]	; (8002f38 <debugAdcInt+0x124>)
 8002e76:	f00a fb87 	bl	800d588 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8002e7a:	4a2e      	ldr	r2, [pc, #184]	; (8002f34 <debugAdcInt+0x120>)
 8002e7c:	f107 0008 	add.w	r0, r7, #8
 8002e80:	2301      	movs	r3, #1
 8002e82:	ca06      	ldmia	r2, {r1, r2}
 8002e84:	f001 ff88 	bl	8004d98 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 8002e88:	2114      	movs	r1, #20
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f001 ffaa 	bl	8004de4 <ssd1306_SetCursor>
	sprintf(str, "int_ch2=%.3f V", getValueAdcIntCh2());
 8002e90:	f7fe fa30 	bl	80012f4 <getValueAdcIntCh2>
 8002e94:	ee10 3a10 	vmov	r3, s0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fb6d 	bl	8000578 <__aeabi_f2d>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	f107 0008 	add.w	r0, r7, #8
 8002ea6:	4925      	ldr	r1, [pc, #148]	; (8002f3c <debugAdcInt+0x128>)
 8002ea8:	f00a fb6e 	bl	800d588 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8002eac:	4a21      	ldr	r2, [pc, #132]	; (8002f34 <debugAdcInt+0x120>)
 8002eae:	f107 0008 	add.w	r0, r7, #8
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	ca06      	ldmia	r2, {r1, r2}
 8002eb6:	f001 ff6f 	bl	8004d98 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 30);
 8002eba:	211e      	movs	r1, #30
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f001 ff91 	bl	8004de4 <ssd1306_SetCursor>
	sprintf(str, "int_ch3=%.3f V", getValueAdcIntCh3());
 8002ec2:	f7fe fa4d 	bl	8001360 <getValueAdcIntCh3>
 8002ec6:	ee10 3a10 	vmov	r3, s0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fd fb54 	bl	8000578 <__aeabi_f2d>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	f107 0008 	add.w	r0, r7, #8
 8002ed8:	4919      	ldr	r1, [pc, #100]	; (8002f40 <debugAdcInt+0x12c>)
 8002eda:	f00a fb55 	bl	800d588 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8002ede:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <debugAdcInt+0x120>)
 8002ee0:	f107 0008 	add.w	r0, r7, #8
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	ca06      	ldmia	r2, {r1, r2}
 8002ee8:	f001 ff56 	bl	8004d98 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 50);
 8002eec:	2132      	movs	r1, #50	; 0x32
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f001 ff78 	bl	8004de4 <ssd1306_SetCursor>
	sprintf(str, "ds18_2=%.2f C", getValueDs2());
 8002ef4:	f7fe face 	bl	8001494 <getValueDs2>
 8002ef8:	ee10 3a10 	vmov	r3, s0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fb3b 	bl	8000578 <__aeabi_f2d>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	f107 0008 	add.w	r0, r7, #8
 8002f0a:	490e      	ldr	r1, [pc, #56]	; (8002f44 <debugAdcInt+0x130>)
 8002f0c:	f00a fb3c 	bl	800d588 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8002f10:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <debugAdcInt+0x120>)
 8002f12:	f107 0008 	add.w	r0, r7, #8
 8002f16:	2301      	movs	r3, #1
 8002f18:	ca06      	ldmia	r2, {r1, r2}
 8002f1a:	f001 ff3d 	bl	8004d98 <ssd1306_WriteString>
	backButton(1, MAIN_MENU, 1);
 8002f1e:	2201      	movs	r2, #1
 8002f20:	2100      	movs	r1, #0
 8002f22:	2001      	movs	r0, #1
 8002f24:	f7ff fb2a 	bl	800257c <backButton>
}
 8002f28:	bf00      	nop
 8002f2a:	3730      	adds	r7, #48	; 0x30
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	0800f9f8 	.word	0x0800f9f8
 8002f34:	200008b0 	.word	0x200008b0
 8002f38:	0800fa08 	.word	0x0800fa08
 8002f3c:	0800fa18 	.word	0x0800fa18
 8002f40:	0800fa28 	.word	0x0800fa28
 8002f44:	0800fa38 	.word	0x0800fa38

08002f48 <debugAdcExt>:

void debugAdcExt(Menu *menu) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08c      	sub	sp, #48	; 0x30
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	char str[40];
	sprintf(str, "ext_ch0=%.3f V", getValueAdcExtCh0());
 8002f50:	f7fe f824 	bl	8000f9c <getValueAdcExtCh0>
 8002f54:	ee10 3a10 	vmov	r3, s0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd fb0d 	bl	8000578 <__aeabi_f2d>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	f107 0008 	add.w	r0, r7, #8
 8002f66:	4931      	ldr	r1, [pc, #196]	; (800302c <debugAdcExt+0xe4>)
 8002f68:	f00a fb0e 	bl	800d588 <siprintf>
	ssd1306_SetCursor(0, 0);
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f001 ff38 	bl	8004de4 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, White);
 8002f74:	4a2e      	ldr	r2, [pc, #184]	; (8003030 <debugAdcExt+0xe8>)
 8002f76:	f107 0008 	add.w	r0, r7, #8
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	ca06      	ldmia	r2, {r1, r2}
 8002f7e:	f001 ff0b 	bl	8004d98 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 10);
 8002f82:	210a      	movs	r1, #10
 8002f84:	2000      	movs	r0, #0
 8002f86:	f001 ff2d 	bl	8004de4 <ssd1306_SetCursor>
	sprintf(str, "ext_ch1=%.3f V", getValueAdcExtCh1());
 8002f8a:	f7fe f857 	bl	800103c <getValueAdcExtCh1>
 8002f8e:	ee10 3a10 	vmov	r3, s0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd faf0 	bl	8000578 <__aeabi_f2d>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	f107 0008 	add.w	r0, r7, #8
 8002fa0:	4924      	ldr	r1, [pc, #144]	; (8003034 <debugAdcExt+0xec>)
 8002fa2:	f00a faf1 	bl	800d588 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8002fa6:	4a22      	ldr	r2, [pc, #136]	; (8003030 <debugAdcExt+0xe8>)
 8002fa8:	f107 0008 	add.w	r0, r7, #8
 8002fac:	2301      	movs	r3, #1
 8002fae:	ca06      	ldmia	r2, {r1, r2}
 8002fb0:	f001 fef2 	bl	8004d98 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 20);
 8002fb4:	2114      	movs	r1, #20
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f001 ff14 	bl	8004de4 <ssd1306_SetCursor>
	sprintf(str, "ext_ch2=%.3f V", getValueAdcExtCh2());
 8002fbc:	f7fe f88e 	bl	80010dc <getValueAdcExtCh2>
 8002fc0:	ee10 3a10 	vmov	r3, s0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd fad7 	bl	8000578 <__aeabi_f2d>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	f107 0008 	add.w	r0, r7, #8
 8002fd2:	4919      	ldr	r1, [pc, #100]	; (8003038 <debugAdcExt+0xf0>)
 8002fd4:	f00a fad8 	bl	800d588 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8002fd8:	4a15      	ldr	r2, [pc, #84]	; (8003030 <debugAdcExt+0xe8>)
 8002fda:	f107 0008 	add.w	r0, r7, #8
 8002fde:	2301      	movs	r3, #1
 8002fe0:	ca06      	ldmia	r2, {r1, r2}
 8002fe2:	f001 fed9 	bl	8004d98 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 30);
 8002fe6:	211e      	movs	r1, #30
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f001 fefb 	bl	8004de4 <ssd1306_SetCursor>
	sprintf(str, "ext_ch3=%.3f V", getValueAdcExtCh3());
 8002fee:	f7fe f8c5 	bl	800117c <getValueAdcExtCh3>
 8002ff2:	ee10 3a10 	vmov	r3, s0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd fabe 	bl	8000578 <__aeabi_f2d>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	f107 0008 	add.w	r0, r7, #8
 8003004:	490d      	ldr	r1, [pc, #52]	; (800303c <debugAdcExt+0xf4>)
 8003006:	f00a fabf 	bl	800d588 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 800300a:	4a09      	ldr	r2, [pc, #36]	; (8003030 <debugAdcExt+0xe8>)
 800300c:	f107 0008 	add.w	r0, r7, #8
 8003010:	2301      	movs	r3, #1
 8003012:	ca06      	ldmia	r2, {r1, r2}
 8003014:	f001 fec0 	bl	8004d98 <ssd1306_WriteString>

	backButton(1, MAIN_MENU, 1);
 8003018:	2201      	movs	r2, #1
 800301a:	2100      	movs	r1, #0
 800301c:	2001      	movs	r0, #1
 800301e:	f7ff faad 	bl	800257c <backButton>
}
 8003022:	bf00      	nop
 8003024:	3730      	adds	r7, #48	; 0x30
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	0800fa48 	.word	0x0800fa48
 8003030:	200008b0 	.word	0x200008b0
 8003034:	0800fa58 	.word	0x0800fa58
 8003038:	0800fa68 	.word	0x0800fa68
 800303c:	0800fa78 	.word	0x0800fa78

08003040 <drawOnoffMeasure>:
	backButton(1, MAIN_MENU, 1);
}

char *measureStatusStr="";
char* restartDetSdString="";
void drawOnoffMeasure(Menu *menu) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

	uint8_t currPos;
	if(!sdReady) {
 8003048:	4b79      	ldr	r3, [pc, #484]	; (8003230 <drawOnoffMeasure+0x1f0>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	f083 0301 	eor.w	r3, r3, #1
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d028      	beq.n	80030a8 <drawOnoffMeasure+0x68>
		ssd1306_SetCursor(0, 0);
 8003056:	2100      	movs	r1, #0
 8003058:	2000      	movs	r0, #0
 800305a:	f001 fec3 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString("SD ERROR!", Font_11x18, White);
 800305e:	4a75      	ldr	r2, [pc, #468]	; (8003234 <drawOnoffMeasure+0x1f4>)
 8003060:	2301      	movs	r3, #1
 8003062:	ca06      	ldmia	r2, {r1, r2}
 8003064:	4874      	ldr	r0, [pc, #464]	; (8003238 <drawOnoffMeasure+0x1f8>)
 8003066:	f001 fe97 	bl	8004d98 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 800306a:	2112      	movs	r1, #18
 800306c:	2000      	movs	r0, #0
 800306e:	f001 feb9 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString(getFresultString(fresult), Font_7x10, White);
 8003072:	4b72      	ldr	r3, [pc, #456]	; (800323c <drawOnoffMeasure+0x1fc>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fb49 	bl	8003710 <getFresultString>
 800307e:	4a70      	ldr	r2, [pc, #448]	; (8003240 <drawOnoffMeasure+0x200>)
 8003080:	2301      	movs	r3, #1
 8003082:	ca06      	ldmia	r2, {r1, r2}
 8003084:	f001 fe88 	bl	8004d98 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 28);
 8003088:	211c      	movs	r1, #28
 800308a:	2000      	movs	r0, #0
 800308c:	f001 feaa 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString("RESTART NEEDED!", Font_7x10, White);
 8003090:	4a6b      	ldr	r2, [pc, #428]	; (8003240 <drawOnoffMeasure+0x200>)
 8003092:	2301      	movs	r3, #1
 8003094:	ca06      	ldmia	r2, {r1, r2}
 8003096:	486b      	ldr	r0, [pc, #428]	; (8003244 <drawOnoffMeasure+0x204>)
 8003098:	f001 fe7e 	bl	8004d98 <ssd1306_WriteString>
		leds[2].state=true;
 800309c:	4b6a      	ldr	r3, [pc, #424]	; (8003248 <drawOnoffMeasure+0x208>)
 800309e:	2201      	movs	r2, #1
 80030a0:	759a      	strb	r2, [r3, #22]
		currPos=0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	e0ba      	b.n	800321e <drawOnoffMeasure+0x1de>
	}
	else if(sdUnmounted) {
 80030a8:	4b68      	ldr	r3, [pc, #416]	; (800324c <drawOnoffMeasure+0x20c>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d021      	beq.n	80030f4 <drawOnoffMeasure+0xb4>
		ssd1306_SetCursor(0, 0);
 80030b0:	2100      	movs	r1, #0
 80030b2:	2000      	movs	r0, #0
 80030b4:	f001 fe96 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString("RESTART", Font_11x18, White);
 80030b8:	4a5e      	ldr	r2, [pc, #376]	; (8003234 <drawOnoffMeasure+0x1f4>)
 80030ba:	2301      	movs	r3, #1
 80030bc:	ca06      	ldmia	r2, {r1, r2}
 80030be:	4864      	ldr	r0, [pc, #400]	; (8003250 <drawOnoffMeasure+0x210>)
 80030c0:	f001 fe6a 	bl	8004d98 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 80030c4:	2112      	movs	r1, #18
 80030c6:	2000      	movs	r0, #0
 80030c8:	f001 fe8c 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString("NEEDED", Font_11x18, White);
 80030cc:	4a59      	ldr	r2, [pc, #356]	; (8003234 <drawOnoffMeasure+0x1f4>)
 80030ce:	2301      	movs	r3, #1
 80030d0:	ca06      	ldmia	r2, {r1, r2}
 80030d2:	4860      	ldr	r0, [pc, #384]	; (8003254 <drawOnoffMeasure+0x214>)
 80030d4:	f001 fe60 	bl	8004d98 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 36);
 80030d8:	2124      	movs	r1, #36	; 0x24
 80030da:	2000      	movs	r0, #0
 80030dc:	f001 fe82 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString("after unmounting SD!", Font_6x8, White);
 80030e0:	4a5d      	ldr	r2, [pc, #372]	; (8003258 <drawOnoffMeasure+0x218>)
 80030e2:	2301      	movs	r3, #1
 80030e4:	ca06      	ldmia	r2, {r1, r2}
 80030e6:	485d      	ldr	r0, [pc, #372]	; (800325c <drawOnoffMeasure+0x21c>)
 80030e8:	f001 fe56 	bl	8004d98 <ssd1306_WriteString>
		leds[2].state=true;
 80030ec:	4b56      	ldr	r3, [pc, #344]	; (8003248 <drawOnoffMeasure+0x208>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	759a      	strb	r2, [r3, #22]
 80030f2:	e094      	b.n	800321e <drawOnoffMeasure+0x1de>
	}
	else {
		leds[2].state=false;
 80030f4:	4b54      	ldr	r3, [pc, #336]	; (8003248 <drawOnoffMeasure+0x208>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	759a      	strb	r2, [r3, #22]
		ssd1306_SetCursor(0, 0);
 80030fa:	2100      	movs	r1, #0
 80030fc:	2000      	movs	r0, #0
 80030fe:	f001 fe71 	bl	8004de4 <ssd1306_SetCursor>
		currPos=-8;
 8003102:	23f8      	movs	r3, #248	; 0xf8
 8003104:	73fb      	strb	r3, [r7, #15]
		//char sensorDetailsStr[30];
		encSetRange(0,2);
 8003106:	2102      	movs	r1, #2
 8003108:	2000      	movs	r0, #0
 800310a:	f7fe fb15 	bl	8001738 <encSetRange>

		ssd1306_SetCursor(0, 0);
 800310e:	2100      	movs	r1, #0
 8003110:	2000      	movs	r0, #0
 8003112:	f001 fe67 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString("START", Font_11x18, entrySelected(0) ? Black : White);
 8003116:	2000      	movs	r0, #0
 8003118:	f7fe fb58 	bl	80017cc <entrySelected>
 800311c:	4603      	mov	r3, r0
 800311e:	f083 0301 	eor.w	r3, r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	4a43      	ldr	r2, [pc, #268]	; (8003234 <drawOnoffMeasure+0x1f4>)
 8003126:	ca06      	ldmia	r2, {r1, r2}
 8003128:	484d      	ldr	r0, [pc, #308]	; (8003260 <drawOnoffMeasure+0x220>)
 800312a:	f001 fe35 	bl	8004d98 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 18);
 800312e:	2112      	movs	r1, #18
 8003130:	2000      	movs	r0, #0
 8003132:	f001 fe57 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString("STOP", Font_11x18, entrySelected(1) ? Black : White);
 8003136:	2001      	movs	r0, #1
 8003138:	f7fe fb48 	bl	80017cc <entrySelected>
 800313c:	4603      	mov	r3, r0
 800313e:	f083 0301 	eor.w	r3, r3, #1
 8003142:	b2db      	uxtb	r3, r3
 8003144:	4a3b      	ldr	r2, [pc, #236]	; (8003234 <drawOnoffMeasure+0x1f4>)
 8003146:	ca06      	ldmia	r2, {r1, r2}
 8003148:	4846      	ldr	r0, [pc, #280]	; (8003264 <drawOnoffMeasure+0x224>)
 800314a:	f001 fe25 	bl	8004d98 <ssd1306_WriteString>


		if(entrySelected(0) && entryClicked(0)) {
 800314e:	2000      	movs	r0, #0
 8003150:	f7fe fb3c 	bl	80017cc <entrySelected>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d034      	beq.n	80031c4 <drawOnoffMeasure+0x184>
 800315a:	2000      	movs	r0, #0
 800315c:	f7fe fb49 	bl	80017f2 <entryClicked>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d02e      	beq.n	80031c4 <drawOnoffMeasure+0x184>
			if(debug) {
 8003166:	4b40      	ldr	r3, [pc, #256]	; (8003268 <drawOnoffMeasure+0x228>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <drawOnoffMeasure+0x13c>
				measureStatusStr="                ";
 800316e:	4b3f      	ldr	r3, [pc, #252]	; (800326c <drawOnoffMeasure+0x22c>)
 8003170:	4a3f      	ldr	r2, [pc, #252]	; (8003270 <drawOnoffMeasure+0x230>)
 8003172:	601a      	str	r2, [r3, #0]
				measureStatusStr="Already started!";
 8003174:	4b3d      	ldr	r3, [pc, #244]	; (800326c <drawOnoffMeasure+0x22c>)
 8003176:	4a3f      	ldr	r2, [pc, #252]	; (8003274 <drawOnoffMeasure+0x234>)
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e023      	b.n	80031c4 <drawOnoffMeasure+0x184>
			}
			else {
				if(sd_openfile()==FR_OK) {
 800317c:	f000 fa18 	bl	80035b0 <sd_openfile>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d112      	bne.n	80031ac <drawOnoffMeasure+0x16c>
					if(sd_writeline("<NEW_MEASURE_BEGIN>\n")==FR_OK) {
 8003186:	483c      	ldr	r0, [pc, #240]	; (8003278 <drawOnoffMeasure+0x238>)
 8003188:	f000 fa62 	bl	8003650 <sd_writeline>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d118      	bne.n	80031c4 <drawOnoffMeasure+0x184>
						sd_writeline("timestamp,adc_ext_ch0,adc_ext_ch1,adc_ext_ch2,adc_ext_ch3,adc_int_ch0,adc_int_ch1,adc_int_ch2,adc_int_ch3,ds18b20_1,ds18b20_2,ds18b20_3\n");
 8003192:	483a      	ldr	r0, [pc, #232]	; (800327c <drawOnoffMeasure+0x23c>)
 8003194:	f000 fa5c 	bl	8003650 <sd_writeline>
						debug=true;
 8003198:	4b33      	ldr	r3, [pc, #204]	; (8003268 <drawOnoffMeasure+0x228>)
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
						measureStatusStr="                ";
 800319e:	4b33      	ldr	r3, [pc, #204]	; (800326c <drawOnoffMeasure+0x22c>)
 80031a0:	4a33      	ldr	r2, [pc, #204]	; (8003270 <drawOnoffMeasure+0x230>)
 80031a2:	601a      	str	r2, [r3, #0]
						measureStatusStr="Measure started";
 80031a4:	4b31      	ldr	r3, [pc, #196]	; (800326c <drawOnoffMeasure+0x22c>)
 80031a6:	4a36      	ldr	r2, [pc, #216]	; (8003280 <drawOnoffMeasure+0x240>)
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	e00b      	b.n	80031c4 <drawOnoffMeasure+0x184>
					}
				}
				else {
					measureStatusStr="                ";
 80031ac:	4b2f      	ldr	r3, [pc, #188]	; (800326c <drawOnoffMeasure+0x22c>)
 80031ae:	4a30      	ldr	r2, [pc, #192]	; (8003270 <drawOnoffMeasure+0x230>)
 80031b0:	601a      	str	r2, [r3, #0]
					measureStatusStr="SD not detected!";
 80031b2:	4b2e      	ldr	r3, [pc, #184]	; (800326c <drawOnoffMeasure+0x22c>)
 80031b4:	4a33      	ldr	r2, [pc, #204]	; (8003284 <drawOnoffMeasure+0x244>)
 80031b6:	601a      	str	r2, [r3, #0]
					restartDetSdString="Restart needed";
 80031b8:	4b33      	ldr	r3, [pc, #204]	; (8003288 <drawOnoffMeasure+0x248>)
 80031ba:	4a34      	ldr	r2, [pc, #208]	; (800328c <drawOnoffMeasure+0x24c>)
 80031bc:	601a      	str	r2, [r3, #0]
					leds[2].state=true;
 80031be:	4b22      	ldr	r3, [pc, #136]	; (8003248 <drawOnoffMeasure+0x208>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	759a      	strb	r2, [r3, #22]
				}
			}
		}
		if(entrySelected(1) && entryClicked(1)) {
 80031c4:	2001      	movs	r0, #1
 80031c6:	f7fe fb01 	bl	80017cc <entrySelected>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d010      	beq.n	80031f2 <drawOnoffMeasure+0x1b2>
 80031d0:	2001      	movs	r0, #1
 80031d2:	f7fe fb0e 	bl	80017f2 <entryClicked>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <drawOnoffMeasure+0x1b2>
			debug=false;
 80031dc:	4b22      	ldr	r3, [pc, #136]	; (8003268 <drawOnoffMeasure+0x228>)
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
			sd_closefile();
 80031e2:	f000 fa7b 	bl	80036dc <sd_closefile>
			//sd_demount();
			measureStatusStr="                ";
 80031e6:	4b21      	ldr	r3, [pc, #132]	; (800326c <drawOnoffMeasure+0x22c>)
 80031e8:	4a21      	ldr	r2, [pc, #132]	; (8003270 <drawOnoffMeasure+0x230>)
 80031ea:	601a      	str	r2, [r3, #0]
			measureStatusStr="Measure stopped";
 80031ec:	4b1f      	ldr	r3, [pc, #124]	; (800326c <drawOnoffMeasure+0x22c>)
 80031ee:	4a28      	ldr	r2, [pc, #160]	; (8003290 <drawOnoffMeasure+0x250>)
 80031f0:	601a      	str	r2, [r3, #0]
		}
		ssd1306_SetCursor(0, 36);
 80031f2:	2124      	movs	r1, #36	; 0x24
 80031f4:	2000      	movs	r0, #0
 80031f6:	f001 fdf5 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString(measureStatusStr, Font_6x8, White);
 80031fa:	4b1c      	ldr	r3, [pc, #112]	; (800326c <drawOnoffMeasure+0x22c>)
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	4a16      	ldr	r2, [pc, #88]	; (8003258 <drawOnoffMeasure+0x218>)
 8003200:	2301      	movs	r3, #1
 8003202:	ca06      	ldmia	r2, {r1, r2}
 8003204:	f001 fdc8 	bl	8004d98 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 46);
 8003208:	212e      	movs	r1, #46	; 0x2e
 800320a:	2000      	movs	r0, #0
 800320c:	f001 fdea 	bl	8004de4 <ssd1306_SetCursor>
		ssd1306_WriteString(restartDetSdString, Font_6x8, White);
 8003210:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <drawOnoffMeasure+0x248>)
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	4a10      	ldr	r2, [pc, #64]	; (8003258 <drawOnoffMeasure+0x218>)
 8003216:	2301      	movs	r3, #1
 8003218:	ca06      	ldmia	r2, {r1, r2}
 800321a:	f001 fdbd 	bl	8004d98 <ssd1306_WriteString>
//		sd_readfile();
//		sd_closefile();
	//}
	//ssd1306_WriteString(rtcDateStr, Font_7x10, White);

	backButton(2, MAIN_MENU, 2);
 800321e:	2202      	movs	r2, #2
 8003220:	2100      	movs	r1, #0
 8003222:	2002      	movs	r0, #2
 8003224:	f7ff f9aa 	bl	800257c <backButton>

}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20019964 	.word	0x20019964
 8003234:	200008b8 	.word	0x200008b8
 8003238:	0800fa88 	.word	0x0800fa88
 800323c:	20019950 	.word	0x20019950
 8003240:	200008b0 	.word	0x200008b0
 8003244:	0800f9c4 	.word	0x0800f9c4
 8003248:	20000000 	.word	0x20000000
 800324c:	20000e34 	.word	0x20000e34
 8003250:	0800fa94 	.word	0x0800fa94
 8003254:	0800fa9c 	.word	0x0800fa9c
 8003258:	200008a8 	.word	0x200008a8
 800325c:	0800faa4 	.word	0x0800faa4
 8003260:	0800fabc 	.word	0x0800fabc
 8003264:	0800fac4 	.word	0x0800fac4
 8003268:	20000dbc 	.word	0x20000dbc
 800326c:	200002ac 	.word	0x200002ac
 8003270:	0800facc 	.word	0x0800facc
 8003274:	0800fae0 	.word	0x0800fae0
 8003278:	0800faf4 	.word	0x0800faf4
 800327c:	0800fb0c 	.word	0x0800fb0c
 8003280:	0800fb98 	.word	0x0800fb98
 8003284:	0800fba8 	.word	0x0800fba8
 8003288:	200002b0 	.word	0x200002b0
 800328c:	0800fbbc 	.word	0x0800fbbc
 8003290:	0800fbcc 	.word	0x0800fbcc

08003294 <displayMenu>:
	[ONOFF_MEASURE] = {drawOnoffMeasure, 0, {}},
	[DEBUG_ADC_INT] = {debugAdcInt, 0, {}},
	[DEBUG_ADC_EXT] = {debugAdcExt, 0, {}}
};

void displayMenu(void) {
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8003298:	2000      	movs	r0, #0
 800329a:	f001 fc55 	bl	8004b48 <ssd1306_Fill>

	menu[screen].function(&menu[screen]);
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <displayMenu+0x48>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	4619      	mov	r1, r3
 80032a6:	4a0e      	ldr	r2, [pc, #56]	; (80032e0 <displayMenu+0x4c>)
 80032a8:	460b      	mov	r3, r1
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	440b      	add	r3, r1
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <displayMenu+0x48>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	4619      	mov	r1, r3
 80032bc:	460b      	mov	r3, r1
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	440b      	add	r3, r1
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4906      	ldr	r1, [pc, #24]	; (80032e0 <displayMenu+0x4c>)
 80032c6:	440b      	add	r3, r1
 80032c8:	4618      	mov	r0, r3
 80032ca:	4790      	blx	r2
	ssd1306_UpdateScreen();
 80032cc:	f001 fc60 	bl	8004b90 <ssd1306_UpdateScreen>
	//clearEncButton();
	HAL_Delay(1);
 80032d0:	2001      	movs	r0, #1
 80032d2:	f001 fe43 	bl	8004f5c <HAL_Delay>

}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000e28 	.word	0x20000e28
 80032e0:	200002b4 	.word	0x200002b4

080032e4 <displayInit>:
#include "ssd1306_tests.h"
#include "ssd1306.h"



void displayInit(void) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80032e8:	f001 fbc4 	bl	8004a74 <ssd1306_Init>
}
 80032ec:	bf00      	nop
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <CircularBuffer_Init>:
    int tail;
} CircularBuffer;



void CircularBuffer_Init(CircularBuffer* cb) {
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
    cb->head = 0;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80032fe:	461a      	mov	r2, r3
 8003300:	2300      	movs	r3, #0
 8003302:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
    cb->tail = 0;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800330c:	461a      	mov	r2, r3
 800330e:	2300      	movs	r3, #0
 8003310:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <CircularBuffer_Add>:

volatile CircularBuffer cb;

void CircularBuffer_Add(CircularBuffer* cb, char* str) {
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
    strncpy(cb->data[cb->head], str, STR_SIZE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003330:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8003334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003338:	fb02 f303 	mul.w	r3, r2, r3
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	4413      	add	r3, r2
 8003340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003344:	6839      	ldr	r1, [r7, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f00a fa4b 	bl	800d7e2 <strncpy>
    cb->head = (cb->head + 1) % BUF_SIZE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003352:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <CircularBuffer_Add+0xa0>)
 800335a:	fb83 1302 	smull	r1, r3, r3, r2
 800335e:	1159      	asrs	r1, r3, #5
 8003360:	17d3      	asrs	r3, r2, #31
 8003362:	1acb      	subs	r3, r1, r3
 8003364:	2164      	movs	r1, #100	; 0x64
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	f502 32c0 	add.w	r2, r2, #98304	; 0x18000
 8003372:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
    if (cb->head == cb->tail) {
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800337c:	f8d3 26a0 	ldr.w	r2, [r3, #1696]	; 0x6a0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003386:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 800338a:	429a      	cmp	r2, r3
 800338c:	d114      	bne.n	80033b8 <CircularBuffer_Add+0x98>
        cb->tail = (cb->tail + 1) % BUF_SIZE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003394:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <CircularBuffer_Add+0xa0>)
 800339c:	fb83 1302 	smull	r1, r3, r3, r2
 80033a0:	1159      	asrs	r1, r3, #5
 80033a2:	17d3      	asrs	r3, r2, #31
 80033a4:	1acb      	subs	r3, r1, r3
 80033a6:	2164      	movs	r1, #100	; 0x64
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	f502 32c0 	add.w	r2, r2, #98304	; 0x18000
 80033b4:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
    }
}
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	51eb851f 	.word	0x51eb851f

080033c4 <CircularBuffer_Read>:

char* CircularBuffer_Read(CircularBuffer* cb) {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
    if (cb->head == cb->tail) {
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80033d2:	f8d3 26a0 	ldr.w	r2, [r3, #1696]	; 0x6a0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80033dc:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d104      	bne.n	80033ee <CircularBuffer_Read+0x2a>
        printf("bufor jest pusty\n");
 80033e4:	4815      	ldr	r0, [pc, #84]	; (800343c <CircularBuffer_Read+0x78>)
 80033e6:	f00a f893 	bl	800d510 <puts>
        //return NULL;
        return ""; //pusty char żeby nie dodawac do zapisu nic wtedy
 80033ea:	4b15      	ldr	r3, [pc, #84]	; (8003440 <CircularBuffer_Read+0x7c>)
 80033ec:	e021      	b.n	8003432 <CircularBuffer_Read+0x6e>
    }
    char* str = cb->data[cb->tail];
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80033f4:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 80033f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033fc:	fb02 f303 	mul.w	r3, r2, r3
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
    cb->tail = (cb->tail + 1) % BUF_SIZE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800340c:	f8d3 36a4 	ldr.w	r3, [r3, #1700]	; 0x6a4
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <CircularBuffer_Read+0x80>)
 8003414:	fb83 1302 	smull	r1, r3, r3, r2
 8003418:	1159      	asrs	r1, r3, #5
 800341a:	17d3      	asrs	r3, r2, #31
 800341c:	1acb      	subs	r3, r1, r3
 800341e:	2164      	movs	r1, #100	; 0x64
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	f502 32c0 	add.w	r2, r2, #98304	; 0x18000
 800342c:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
    return str;
 8003430:	68fb      	ldr	r3, [r7, #12]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	0800fcb8 	.word	0x0800fcb8
 8003440:	0800fccc 	.word	0x0800fccc
 8003444:	51eb851f 	.word	0x51eb851f

08003448 <sd_demount>:
bool sdReady = false;
// functions



void sd_demount() {
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, "", 0);
 800344c:	2200      	movs	r2, #0
 800344e:	4906      	ldr	r1, [pc, #24]	; (8003468 <sd_demount+0x20>)
 8003450:	2000      	movs	r0, #0
 8003452:	f008 fd13 	bl	800be7c <f_mount>
 8003456:	4603      	mov	r3, r0
 8003458:	461a      	mov	r2, r3
 800345a:	4b04      	ldr	r3, [pc, #16]	; (800346c <sd_demount+0x24>)
 800345c:	701a      	strb	r2, [r3, #0]
	send_uart("<drive unmounted>\n\r");
 800345e:	4804      	ldr	r0, [pc, #16]	; (8003470 <sd_demount+0x28>)
 8003460:	f7fe f9e0 	bl	8001824 <send_uart>
}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}
 8003468:	0800fcd0 	.word	0x0800fcd0
 800346c:	20019950 	.word	0x20019950
 8003470:	0800fcd4 	.word	0x0800fcd4

08003474 <sd_init>:

void sd_init() {
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "/", 1);
 8003478:	2201      	movs	r2, #1
 800347a:	490f      	ldr	r1, [pc, #60]	; (80034b8 <sd_init+0x44>)
 800347c:	480f      	ldr	r0, [pc, #60]	; (80034bc <sd_init+0x48>)
 800347e:	f008 fcfd 	bl	800be7c <f_mount>
 8003482:	4603      	mov	r3, r0
 8003484:	461a      	mov	r2, r3
 8003486:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <sd_init+0x4c>)
 8003488:	701a      	strb	r2, [r3, #0]

	if(fresult==FR_OK) {
 800348a:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <sd_init+0x4c>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d106      	bne.n	80034a2 <sd_init+0x2e>
		sdReady = true;
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <sd_init+0x50>)
 8003496:	2201      	movs	r2, #1
 8003498:	701a      	strb	r2, [r3, #0]
		send_uart("\rsd status: FR_OK\n\r");
 800349a:	480b      	ldr	r0, [pc, #44]	; (80034c8 <sd_init+0x54>)
 800349c:	f7fe f9c2 	bl	8001824 <send_uart>
	else {
		sdReady = false;
		send_uart("\rsd status: SD ERR\n\r");
		leds[1].state=true;
	}
}
 80034a0:	e008      	b.n	80034b4 <sd_init+0x40>
		sdReady = false;
 80034a2:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <sd_init+0x50>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
		send_uart("\rsd status: SD ERR\n\r");
 80034a8:	4808      	ldr	r0, [pc, #32]	; (80034cc <sd_init+0x58>)
 80034aa:	f7fe f9bb 	bl	8001824 <send_uart>
		leds[1].state=true;
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <sd_init+0x5c>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	739a      	strb	r2, [r3, #14]
}
 80034b4:	bf00      	nop
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	0800fce8 	.word	0x0800fce8
 80034bc:	200194f0 	.word	0x200194f0
 80034c0:	20019950 	.word	0x20019950
 80034c4:	20019964 	.word	0x20019964
 80034c8:	0800fcec 	.word	0x0800fcec
 80034cc:	0800fd00 	.word	0x0800fd00
 80034d0:	20000000 	.word	0x20000000

080034d4 <sd_freespace>:

uint32_t sd_freespace() {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
	if(sdReady) {
 80034d8:	4b13      	ldr	r3, [pc, #76]	; (8003528 <sd_freespace+0x54>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d020      	beq.n	8003522 <sd_freespace+0x4e>
		f_getfree("", &fre_clust, &pfs);
 80034e0:	4a12      	ldr	r2, [pc, #72]	; (800352c <sd_freespace+0x58>)
 80034e2:	4913      	ldr	r1, [pc, #76]	; (8003530 <sd_freespace+0x5c>)
 80034e4:	4813      	ldr	r0, [pc, #76]	; (8003534 <sd_freespace+0x60>)
 80034e6:	f009 f8ea 	bl	800c6be <f_getfree>
		return free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <sd_freespace+0x58>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	895b      	ldrh	r3, [r3, #10]
 80034f0:	461a      	mov	r2, r3
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <sd_freespace+0x5c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fd f81a 	bl	8000534 <__aeabi_ui2d>
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <sd_freespace+0x64>)
 8003506:	f7fd f88f 	bl	8000628 <__aeabi_dmul>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4610      	mov	r0, r2
 8003510:	4619      	mov	r1, r3
 8003512:	f7fd fb61 	bl	8000bd8 <__aeabi_d2uiz>
 8003516:	4603      	mov	r3, r0
 8003518:	4a08      	ldr	r2, [pc, #32]	; (800353c <sd_freespace+0x68>)
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b07      	ldr	r3, [pc, #28]	; (800353c <sd_freespace+0x68>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	e000      	b.n	8003524 <sd_freespace+0x50>
	}
	else {
		return 0;
 8003522:	2300      	movs	r3, #0
	}

}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20019964 	.word	0x20019964
 800352c:	20019954 	.word	0x20019954
 8003530:	20019958 	.word	0x20019958
 8003534:	0800fcd0 	.word	0x0800fcd0
 8003538:	3fe00000 	.word	0x3fe00000
 800353c:	20019960 	.word	0x20019960

08003540 <sd_totalspace>:

uint32_t sd_totalspace() {
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
	if(sdReady) {
 8003544:	4b14      	ldr	r3, [pc, #80]	; (8003598 <sd_totalspace+0x58>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d021      	beq.n	8003590 <sd_totalspace+0x50>
		f_getfree("", &fre_clust, &pfs);
 800354c:	4a13      	ldr	r2, [pc, #76]	; (800359c <sd_totalspace+0x5c>)
 800354e:	4914      	ldr	r1, [pc, #80]	; (80035a0 <sd_totalspace+0x60>)
 8003550:	4814      	ldr	r0, [pc, #80]	; (80035a4 <sd_totalspace+0x64>)
 8003552:	f009 f8b4 	bl	800c6be <f_getfree>
		return total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8003556:	4b11      	ldr	r3, [pc, #68]	; (800359c <sd_totalspace+0x5c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	3b02      	subs	r3, #2
 800355e:	4a0f      	ldr	r2, [pc, #60]	; (800359c <sd_totalspace+0x5c>)
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	8952      	ldrh	r2, [r2, #10]
 8003564:	fb02 f303 	mul.w	r3, r2, r3
 8003568:	4618      	mov	r0, r3
 800356a:	f7fc ffe3 	bl	8000534 <__aeabi_ui2d>
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <sd_totalspace+0x68>)
 8003574:	f7fd f858 	bl	8000628 <__aeabi_dmul>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	f7fd fb2a 	bl	8000bd8 <__aeabi_d2uiz>
 8003584:	4603      	mov	r3, r0
 8003586:	4a09      	ldr	r2, [pc, #36]	; (80035ac <sd_totalspace+0x6c>)
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <sd_totalspace+0x6c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	e000      	b.n	8003592 <sd_totalspace+0x52>
	}
	else {
		return 0;
 8003590:	2300      	movs	r3, #0
	}

}
 8003592:	4618      	mov	r0, r3
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20019964 	.word	0x20019964
 800359c:	20019954 	.word	0x20019954
 80035a0:	20019958 	.word	0x20019958
 80035a4:	0800fcd0 	.word	0x0800fcd0
 80035a8:	3fe00000 	.word	0x3fe00000
 80035ac:	2001995c 	.word	0x2001995c

080035b0 <sd_openfile>:
		}
	}
}
volatile BYTE SD_SAVEMODE;
static unsigned int file_number = 1;
FRESULT sd_openfile() {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
	char filename[12];
	if(sdReady) {
 80035b6:	4b1d      	ldr	r3, [pc, #116]	; (800362c <sd_openfile+0x7c>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d02b      	beq.n	8003616 <sd_openfile+0x66>
		sprintf(filename, "%03u.txt", file_number);
 80035be:	4b1c      	ldr	r3, [pc, #112]	; (8003630 <sd_openfile+0x80>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	1d3b      	adds	r3, r7, #4
 80035c4:	491b      	ldr	r1, [pc, #108]	; (8003634 <sd_openfile+0x84>)
 80035c6:	4618      	mov	r0, r3
 80035c8:	f009 ffde 	bl	800d588 <siprintf>
		fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_READ | FA_WRITE);
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	2233      	movs	r2, #51	; 0x33
 80035d0:	4619      	mov	r1, r3
 80035d2:	4819      	ldr	r0, [pc, #100]	; (8003638 <sd_openfile+0x88>)
 80035d4:	f008 fc98 	bl	800bf08 <f_open>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	4b17      	ldr	r3, [pc, #92]	; (800363c <sd_openfile+0x8c>)
 80035de:	701a      	strb	r2, [r3, #0]

		if(fresult!=FR_OK) {
 80035e0:	4b16      	ldr	r3, [pc, #88]	; (800363c <sd_openfile+0x8c>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <sd_openfile+0x4e>
			sdReady=false;
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <sd_openfile+0x7c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
			send_uart("\r<cannot open file! sd_openfile>\n\r");
 80035f0:	4813      	ldr	r0, [pc, #76]	; (8003640 <sd_openfile+0x90>)
 80035f2:	f7fe f917 	bl	8001824 <send_uart>

			leds[1].state=true;
 80035f6:	4b13      	ldr	r3, [pc, #76]	; (8003644 <sd_openfile+0x94>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	739a      	strb	r2, [r3, #14]
 80035fc:	e007      	b.n	800360e <sd_openfile+0x5e>
		}
		else {
			file_number++;
 80035fe:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <sd_openfile+0x80>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3301      	adds	r3, #1
 8003604:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <sd_openfile+0x80>)
 8003606:	6013      	str	r3, [r2, #0]
			send_uart("<file opened>\n\r");
 8003608:	480f      	ldr	r0, [pc, #60]	; (8003648 <sd_openfile+0x98>)
 800360a:	f7fe f90b 	bl	8001824 <send_uart>
			//sd_writeline("timestamp,adc_ext_ch0,adc_ext_ch1,adc_ext_ch2,adc_ext_ch3,adc_int_ch0,adc_int_ch1,adc_int_ch2,adc_int_ch3,ds18b20_1,ds18b20_2,ds18b20_3\n");
		}
		return fresult;
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <sd_openfile+0x8c>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	e005      	b.n	8003622 <sd_openfile+0x72>
	}
	else {send_uart("<sdReady returned false! sd_openfile>"); return fresult; leds[1].state=true;}
 8003616:	480d      	ldr	r0, [pc, #52]	; (800364c <sd_openfile+0x9c>)
 8003618:	f7fe f904 	bl	8001824 <send_uart>
 800361c:	4b07      	ldr	r3, [pc, #28]	; (800363c <sd_openfile+0x8c>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	b2db      	uxtb	r3, r3
	return FR_DISK_ERR;
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20019964 	.word	0x20019964
 8003630:	2000089c 	.word	0x2000089c
 8003634:	0800fd5c 	.word	0x0800fd5c
 8003638:	20019720 	.word	0x20019720
 800363c:	20019950 	.word	0x20019950
 8003640:	0800fd68 	.word	0x0800fd68
 8003644:	20000000 	.word	0x20000000
 8003648:	0800fd8c 	.word	0x0800fd8c
 800364c:	0800fd9c 	.word	0x0800fd9c

08003650 <sd_writeline>:
static unsigned int line_count = 0;
FRESULT sd_writeline(const char* sdWriteBuff) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	if(sdReady) {
 8003658:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <sd_writeline+0x70>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d023      	beq.n	80036a8 <sd_writeline+0x58>
			//f_puts(sdWriteBuff, &fil);
			if(f_puts(sdWriteBuff, &fil)<0) {
 8003660:	4918      	ldr	r1, [pc, #96]	; (80036c4 <sd_writeline+0x74>)
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f009 f957 	bl	800c916 <f_puts>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	da01      	bge.n	8003672 <sd_writeline+0x22>
				return FR_DISK_ERR;
 800366e:	2301      	movs	r3, #1
 8003670:	e021      	b.n	80036b6 <sd_writeline+0x66>
				send_uart("f_puts error <0 \n\r");
				leds[1].state=true;
			}
			line_count++;
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <sd_writeline+0x78>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3301      	adds	r3, #1
 8003678:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <sd_writeline+0x78>)
 800367a:	6013      	str	r3, [r2, #0]
			if(line_count>=100) {
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <sd_writeline+0x78>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b63      	cmp	r3, #99	; 0x63
 8003682:	d909      	bls.n	8003698 <sd_writeline+0x48>
				line_count=0;
 8003684:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <sd_writeline+0x78>)
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
				sd_closefile();
 800368a:	f000 f827 	bl	80036dc <sd_closefile>
				sd_openfile();
 800368e:	f7ff ff8f 	bl	80035b0 <sd_openfile>
				sd_writeline("timestamp,adc_ext_ch0,adc_ext_ch1,adc_ext_ch2,adc_ext_ch3,adc_int_ch0,adc_int_ch1,adc_int_ch2,adc_int_ch3,ds18b20_1,ds18b20_2,ds18b20_3\n");
 8003692:	480e      	ldr	r0, [pc, #56]	; (80036cc <sd_writeline+0x7c>)
 8003694:	f7ff ffdc 	bl	8003650 <sd_writeline>
			}

			f_sync(&fil);
 8003698:	480a      	ldr	r0, [pc, #40]	; (80036c4 <sd_writeline+0x74>)
 800369a:	f008 ff68 	bl	800c56e <f_sync>
			send_uart("\r<line written>\n\r");
 800369e:	480c      	ldr	r0, [pc, #48]	; (80036d0 <sd_writeline+0x80>)
 80036a0:	f7fe f8c0 	bl	8001824 <send_uart>
			return FR_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e006      	b.n	80036b6 <sd_writeline+0x66>
		}
	else {send_uart("<sd_writeline: cannot write line>");leds[1].state=true;}
 80036a8:	480a      	ldr	r0, [pc, #40]	; (80036d4 <sd_writeline+0x84>)
 80036aa:	f7fe f8bb 	bl	8001824 <send_uart>
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <sd_writeline+0x88>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	739a      	strb	r2, [r3, #14]
	return FR_DISK_ERR;
 80036b4:	2301      	movs	r3, #1
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20019964 	.word	0x20019964
 80036c4:	20019720 	.word	0x20019720
 80036c8:	20019968 	.word	0x20019968
 80036cc:	0800fdc4 	.word	0x0800fdc4
 80036d0:	0800fe50 	.word	0x0800fe50
 80036d4:	0800fe64 	.word	0x0800fe64
 80036d8:	20000000 	.word	0x20000000

080036dc <sd_closefile>:


void sd_closefile() {
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
	if(sdReady) {
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <sd_closefile+0x24>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d009      	beq.n	80036fc <sd_closefile+0x20>
		fresult = f_close(&fil);
 80036e8:	4806      	ldr	r0, [pc, #24]	; (8003704 <sd_closefile+0x28>)
 80036ea:	f008 ffbe 	bl	800c66a <f_close>
 80036ee:	4603      	mov	r3, r0
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <sd_closefile+0x2c>)
 80036f4:	701a      	strb	r2, [r3, #0]
		send_uart("\r<file closed>\n\r");
 80036f6:	4805      	ldr	r0, [pc, #20]	; (800370c <sd_closefile+0x30>)
 80036f8:	f7fe f894 	bl	8001824 <send_uart>
	}
}
 80036fc:	bf00      	nop
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20019964 	.word	0x20019964
 8003704:	20019720 	.word	0x20019720
 8003708:	20019950 	.word	0x20019950
 800370c:	0800fe88 	.word	0x0800fe88

08003710 <getFresultString>:

const char* getFresultString(FRESULT fr)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
    switch (fr)
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	2b13      	cmp	r3, #19
 800371e:	d853      	bhi.n	80037c8 <getFresultString+0xb8>
 8003720:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <getFresultString+0x18>)
 8003722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003726:	bf00      	nop
 8003728:	08003779 	.word	0x08003779
 800372c:	0800377d 	.word	0x0800377d
 8003730:	08003781 	.word	0x08003781
 8003734:	08003785 	.word	0x08003785
 8003738:	08003789 	.word	0x08003789
 800373c:	0800378d 	.word	0x0800378d
 8003740:	08003791 	.word	0x08003791
 8003744:	08003795 	.word	0x08003795
 8003748:	08003799 	.word	0x08003799
 800374c:	0800379d 	.word	0x0800379d
 8003750:	080037a1 	.word	0x080037a1
 8003754:	080037a5 	.word	0x080037a5
 8003758:	080037a9 	.word	0x080037a9
 800375c:	080037ad 	.word	0x080037ad
 8003760:	080037b1 	.word	0x080037b1
 8003764:	080037b5 	.word	0x080037b5
 8003768:	080037b9 	.word	0x080037b9
 800376c:	080037bd 	.word	0x080037bd
 8003770:	080037c1 	.word	0x080037c1
 8003774:	080037c5 	.word	0x080037c5
    {
        case FR_OK:                   return "FR_OK";
 8003778:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <getFresultString+0xc8>)
 800377a:	e026      	b.n	80037ca <getFresultString+0xba>
        case FR_DISK_ERR:             return "FR_DISK_ERR";
 800377c:	4b17      	ldr	r3, [pc, #92]	; (80037dc <getFresultString+0xcc>)
 800377e:	e024      	b.n	80037ca <getFresultString+0xba>
        case FR_INT_ERR:              return "FR_INT_ERR";
 8003780:	4b17      	ldr	r3, [pc, #92]	; (80037e0 <getFresultString+0xd0>)
 8003782:	e022      	b.n	80037ca <getFresultString+0xba>
        case FR_NOT_READY:            return "FR_NOT_READY";
 8003784:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <getFresultString+0xd4>)
 8003786:	e020      	b.n	80037ca <getFresultString+0xba>
        case FR_NO_FILE:              return "FR_NO_FILE";
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <getFresultString+0xd8>)
 800378a:	e01e      	b.n	80037ca <getFresultString+0xba>
        case FR_NO_PATH:              return "FR_NO_PATH";
 800378c:	4b17      	ldr	r3, [pc, #92]	; (80037ec <getFresultString+0xdc>)
 800378e:	e01c      	b.n	80037ca <getFresultString+0xba>
        case FR_INVALID_NAME:         return "FR_INVALID_NAME";
 8003790:	4b17      	ldr	r3, [pc, #92]	; (80037f0 <getFresultString+0xe0>)
 8003792:	e01a      	b.n	80037ca <getFresultString+0xba>
        case FR_DENIED:               return "FR_DENIED";
 8003794:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <getFresultString+0xe4>)
 8003796:	e018      	b.n	80037ca <getFresultString+0xba>
        case FR_EXIST:                return "FR_EXIST";
 8003798:	4b17      	ldr	r3, [pc, #92]	; (80037f8 <getFresultString+0xe8>)
 800379a:	e016      	b.n	80037ca <getFresultString+0xba>
        case FR_INVALID_OBJECT:       return "FR_INVALID_OBJECT";
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <getFresultString+0xec>)
 800379e:	e014      	b.n	80037ca <getFresultString+0xba>
        case FR_WRITE_PROTECTED:      return "FR_WRITE_PROTECTED";
 80037a0:	4b17      	ldr	r3, [pc, #92]	; (8003800 <getFresultString+0xf0>)
 80037a2:	e012      	b.n	80037ca <getFresultString+0xba>
        case FR_INVALID_DRIVE:        return "FR_INVALID_DRIVE";
 80037a4:	4b17      	ldr	r3, [pc, #92]	; (8003804 <getFresultString+0xf4>)
 80037a6:	e010      	b.n	80037ca <getFresultString+0xba>
        case FR_NOT_ENABLED:          return "FR_NOT_ENABLED";
 80037a8:	4b17      	ldr	r3, [pc, #92]	; (8003808 <getFresultString+0xf8>)
 80037aa:	e00e      	b.n	80037ca <getFresultString+0xba>
        case FR_NO_FILESYSTEM:        return "FR_NO_FILESYSTEM";
 80037ac:	4b17      	ldr	r3, [pc, #92]	; (800380c <getFresultString+0xfc>)
 80037ae:	e00c      	b.n	80037ca <getFresultString+0xba>
        case FR_MKFS_ABORTED:         return "FR_MKFS_ABORTED";
 80037b0:	4b17      	ldr	r3, [pc, #92]	; (8003810 <getFresultString+0x100>)
 80037b2:	e00a      	b.n	80037ca <getFresultString+0xba>
        case FR_TIMEOUT:              return "FR_TIMEOUT";
 80037b4:	4b17      	ldr	r3, [pc, #92]	; (8003814 <getFresultString+0x104>)
 80037b6:	e008      	b.n	80037ca <getFresultString+0xba>
        case FR_LOCKED:               return "FR_LOCKED";
 80037b8:	4b17      	ldr	r3, [pc, #92]	; (8003818 <getFresultString+0x108>)
 80037ba:	e006      	b.n	80037ca <getFresultString+0xba>
        case FR_NOT_ENOUGH_CORE:      return "FR_NOT_ENOUGH_CORE";
 80037bc:	4b17      	ldr	r3, [pc, #92]	; (800381c <getFresultString+0x10c>)
 80037be:	e004      	b.n	80037ca <getFresultString+0xba>
        case FR_TOO_MANY_OPEN_FILES:  return "FR_TOO_MANY_OPEN_FILES";
 80037c0:	4b17      	ldr	r3, [pc, #92]	; (8003820 <getFresultString+0x110>)
 80037c2:	e002      	b.n	80037ca <getFresultString+0xba>
        case FR_INVALID_PARAMETER:    return "FR_INVALID_PARAMETER";
 80037c4:	4b17      	ldr	r3, [pc, #92]	; (8003824 <getFresultString+0x114>)
 80037c6:	e000      	b.n	80037ca <getFresultString+0xba>
        default:                      return "Unknown Error";
 80037c8:	4b17      	ldr	r3, [pc, #92]	; (8003828 <getFresultString+0x118>)
    }
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	0800fe9c 	.word	0x0800fe9c
 80037dc:	0800fea4 	.word	0x0800fea4
 80037e0:	0800feb0 	.word	0x0800feb0
 80037e4:	0800febc 	.word	0x0800febc
 80037e8:	0800fecc 	.word	0x0800fecc
 80037ec:	0800fed8 	.word	0x0800fed8
 80037f0:	0800fee4 	.word	0x0800fee4
 80037f4:	0800fef4 	.word	0x0800fef4
 80037f8:	0800ff00 	.word	0x0800ff00
 80037fc:	0800ff0c 	.word	0x0800ff0c
 8003800:	0800ff20 	.word	0x0800ff20
 8003804:	0800ff34 	.word	0x0800ff34
 8003808:	0800ff48 	.word	0x0800ff48
 800380c:	0800ff58 	.word	0x0800ff58
 8003810:	0800ff6c 	.word	0x0800ff6c
 8003814:	0800ff7c 	.word	0x0800ff7c
 8003818:	0800ff88 	.word	0x0800ff88
 800381c:	0800ff94 	.word	0x0800ff94
 8003820:	0800ffa8 	.word	0x0800ffa8
 8003824:	0800ffc0 	.word	0x0800ffc0
 8003828:	0800ffd8 	.word	0x0800ffd8

0800382c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	607b      	str	r3, [r7, #4]
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_MspInit+0x4c>)
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	4a0f      	ldr	r2, [pc, #60]	; (8003878 <HAL_MspInit+0x4c>)
 800383c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003840:	6453      	str	r3, [r2, #68]	; 0x44
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <HAL_MspInit+0x4c>)
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800384a:	607b      	str	r3, [r7, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_MspInit+0x4c>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	4a08      	ldr	r2, [pc, #32]	; (8003878 <HAL_MspInit+0x4c>)
 8003858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385c:	6413      	str	r3, [r2, #64]	; 0x40
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_MspInit+0x4c>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800

0800387c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08a      	sub	sp, #40	; 0x28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003884:	f107 0314 	add.w	r3, r7, #20
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a17      	ldr	r2, [pc, #92]	; (80038f8 <HAL_ADC_MspInit+0x7c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d127      	bne.n	80038ee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	4b16      	ldr	r3, [pc, #88]	; (80038fc <HAL_ADC_MspInit+0x80>)
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	4a15      	ldr	r2, [pc, #84]	; (80038fc <HAL_ADC_MspInit+0x80>)
 80038a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ac:	6453      	str	r3, [r2, #68]	; 0x44
 80038ae:	4b13      	ldr	r3, [pc, #76]	; (80038fc <HAL_ADC_MspInit+0x80>)
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <HAL_ADC_MspInit+0x80>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a0e      	ldr	r2, [pc, #56]	; (80038fc <HAL_ADC_MspInit+0x80>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <HAL_ADC_MspInit+0x80>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN0_INT_Pin|ADC1_IN1_INT_Pin|ADC1_IN2_INT_Pin|ADC1_IN3_INT_Pin;
 80038d6:	230f      	movs	r3, #15
 80038d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038da:	2303      	movs	r3, #3
 80038dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e2:	f107 0314 	add.w	r3, r7, #20
 80038e6:	4619      	mov	r1, r3
 80038e8:	4805      	ldr	r0, [pc, #20]	; (8003900 <HAL_ADC_MspInit+0x84>)
 80038ea:	f002 f82b 	bl	8005944 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80038ee:	bf00      	nop
 80038f0:	3728      	adds	r7, #40	; 0x28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40012000 	.word	0x40012000
 80038fc:	40023800 	.word	0x40023800
 8003900:	40020000 	.word	0x40020000

08003904 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08c      	sub	sp, #48	; 0x30
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 031c 	add.w	r3, r7, #28
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a3b      	ldr	r2, [pc, #236]	; (8003a10 <HAL_I2C_MspInit+0x10c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d12c      	bne.n	8003980 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	4b3a      	ldr	r3, [pc, #232]	; (8003a14 <HAL_I2C_MspInit+0x110>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4a39      	ldr	r2, [pc, #228]	; (8003a14 <HAL_I2C_MspInit+0x110>)
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	6313      	str	r3, [r2, #48]	; 0x30
 8003936:	4b37      	ldr	r3, [pc, #220]	; (8003a14 <HAL_I2C_MspInit+0x110>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	61bb      	str	r3, [r7, #24]
 8003940:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
 8003942:	23c0      	movs	r3, #192	; 0xc0
 8003944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003946:	2312      	movs	r3, #18
 8003948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	2300      	movs	r3, #0
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394e:	2303      	movs	r3, #3
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003952:	2304      	movs	r3, #4
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003956:	f107 031c 	add.w	r3, r7, #28
 800395a:	4619      	mov	r1, r3
 800395c:	482e      	ldr	r0, [pc, #184]	; (8003a18 <HAL_I2C_MspInit+0x114>)
 800395e:	f001 fff1 	bl	8005944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	4b2b      	ldr	r3, [pc, #172]	; (8003a14 <HAL_I2C_MspInit+0x110>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	4a2a      	ldr	r2, [pc, #168]	; (8003a14 <HAL_I2C_MspInit+0x110>)
 800396c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003970:	6413      	str	r3, [r2, #64]	; 0x40
 8003972:	4b28      	ldr	r3, [pc, #160]	; (8003a14 <HAL_I2C_MspInit+0x110>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800397e:	e042      	b.n	8003a06 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a25      	ldr	r2, [pc, #148]	; (8003a1c <HAL_I2C_MspInit+0x118>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d13d      	bne.n	8003a06 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <HAL_I2C_MspInit+0x110>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	4a20      	ldr	r2, [pc, #128]	; (8003a14 <HAL_I2C_MspInit+0x110>)
 8003994:	f043 0302 	orr.w	r3, r3, #2
 8003998:	6313      	str	r3, [r2, #48]	; 0x30
 800399a:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <HAL_I2C_MspInit+0x110>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SCL_ADS_Pin;
 80039a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039ac:	2312      	movs	r3, #18
 80039ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b4:	2303      	movs	r3, #3
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80039b8:	2304      	movs	r3, #4
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCL_ADS_GPIO_Port, &GPIO_InitStruct);
 80039bc:	f107 031c 	add.w	r3, r7, #28
 80039c0:	4619      	mov	r1, r3
 80039c2:	4815      	ldr	r0, [pc, #84]	; (8003a18 <HAL_I2C_MspInit+0x114>)
 80039c4:	f001 ffbe 	bl	8005944 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDA_ADS_Pin;
 80039c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039ce:	2312      	movs	r3, #18
 80039d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d6:	2303      	movs	r3, #3
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80039da:	2309      	movs	r3, #9
 80039dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDA_ADS_GPIO_Port, &GPIO_InitStruct);
 80039de:	f107 031c 	add.w	r3, r7, #28
 80039e2:	4619      	mov	r1, r3
 80039e4:	480c      	ldr	r0, [pc, #48]	; (8003a18 <HAL_I2C_MspInit+0x114>)
 80039e6:	f001 ffad 	bl	8005944 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <HAL_I2C_MspInit+0x110>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	4a08      	ldr	r2, [pc, #32]	; (8003a14 <HAL_I2C_MspInit+0x110>)
 80039f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039f8:	6413      	str	r3, [r2, #64]	; 0x40
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <HAL_I2C_MspInit+0x110>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
}
 8003a06:	bf00      	nop
 8003a08:	3730      	adds	r7, #48	; 0x30
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40005400 	.word	0x40005400
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40020400 	.word	0x40020400
 8003a1c:	40005800 	.word	0x40005800

08003a20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a28:	f107 0308 	add.w	r3, r7, #8
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	60da      	str	r2, [r3, #12]
 8003a36:	611a      	str	r2, [r3, #16]
 8003a38:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a0c      	ldr	r2, [pc, #48]	; (8003a70 <HAL_RTC_MspInit+0x50>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d111      	bne.n	8003a68 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a44:	2302      	movs	r3, #2
 8003a46:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a4c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a4e:	f107 0308 	add.w	r3, r7, #8
 8003a52:	4618      	mov	r0, r3
 8003a54:	f003 fec2 	bl	80077dc <HAL_RCCEx_PeriphCLKConfig>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003a5e:	f7fe fd63 	bl	8002528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a62:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <HAL_RTC_MspInit+0x54>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a68:	bf00      	nop
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40002800 	.word	0x40002800
 8003a74:	42470e3c 	.word	0x42470e3c

08003a78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	; 0x28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a80:	f107 0314 	add.w	r3, r7, #20
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a21      	ldr	r2, [pc, #132]	; (8003b1c <HAL_SPI_MspInit+0xa4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d13b      	bne.n	8003b12 <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <HAL_SPI_MspInit+0xa8>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <HAL_SPI_MspInit+0xa8>)
 8003aa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <HAL_SPI_MspInit+0xa8>)
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_SPI_MspInit+0xa8>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	4a18      	ldr	r2, [pc, #96]	; (8003b20 <HAL_SPI_MspInit+0xa8>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac6:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <HAL_SPI_MspInit+0xa8>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_SD_Pin;
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ae2:	2305      	movs	r3, #5
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SCK_SD_GPIO_Port, &GPIO_InitStruct);
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	4619      	mov	r1, r3
 8003aec:	480d      	ldr	r0, [pc, #52]	; (8003b24 <HAL_SPI_MspInit+0xac>)
 8003aee:	f001 ff29 	bl	8005944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_SD_Pin|MOSI_SD_Pin;
 8003af2:	23c0      	movs	r3, #192	; 0xc0
 8003af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af6:	2302      	movs	r3, #2
 8003af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003afa:	2301      	movs	r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003afe:	2303      	movs	r3, #3
 8003b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b02:	2305      	movs	r3, #5
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b06:	f107 0314 	add.w	r3, r7, #20
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4805      	ldr	r0, [pc, #20]	; (8003b24 <HAL_SPI_MspInit+0xac>)
 8003b0e:	f001 ff19 	bl	8005944 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b12:	bf00      	nop
 8003b14:	3728      	adds	r7, #40	; 0x28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40013000 	.word	0x40013000
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40020000 	.word	0x40020000

08003b28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	; 0x28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b30:	f107 0314 	add.w	r3, r7, #20
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a21      	ldr	r2, [pc, #132]	; (8003bcc <HAL_TIM_Encoder_MspInit+0xa4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d13c      	bne.n	8003bc4 <HAL_TIM_Encoder_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xa8>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	4a1f      	ldr	r2, [pc, #124]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xa8>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	6453      	str	r3, [r2, #68]	; 0x44
 8003b5a:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xa8>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xa8>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	4a18      	ldr	r2, [pc, #96]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xa8>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30
 8003b76:	4b16      	ldr	r3, [pc, #88]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xa8>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8003b82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b90:	2300      	movs	r3, #0
 8003b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b94:	2301      	movs	r3, #1
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b98:	f107 0314 	add.w	r3, r7, #20
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	480d      	ldr	r0, [pc, #52]	; (8003bd4 <HAL_TIM_Encoder_MspInit+0xac>)
 8003ba0:	f001 fed0 	bl	8005944 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	2019      	movs	r0, #25
 8003baa:	f001 fe94 	bl	80058d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003bae:	2019      	movs	r0, #25
 8003bb0:	f001 fead 	bl	800590e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	201a      	movs	r0, #26
 8003bba:	f001 fe8c 	bl	80058d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003bbe:	201a      	movs	r0, #26
 8003bc0:	f001 fea5 	bl	800590e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003bc4:	bf00      	nop
 8003bc6:	3728      	adds	r7, #40	; 0x28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40010000 	.word	0x40010000
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40020000 	.word	0x40020000

08003bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be8:	d116      	bne.n	8003c18 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <HAL_TIM_Base_MspInit+0xb8>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <HAL_TIM_Base_MspInit+0xb8>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfa:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_TIM_Base_MspInit+0xb8>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c06:	2200      	movs	r2, #0
 8003c08:	2100      	movs	r1, #0
 8003c0a:	201c      	movs	r0, #28
 8003c0c:	f001 fe63 	bl	80058d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c10:	201c      	movs	r0, #28
 8003c12:	f001 fe7c 	bl	800590e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003c16:	e036      	b.n	8003c86 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <HAL_TIM_Base_MspInit+0xbc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d116      	bne.n	8003c50 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <HAL_TIM_Base_MspInit+0xb8>)
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	4a19      	ldr	r2, [pc, #100]	; (8003c90 <HAL_TIM_Base_MspInit+0xb8>)
 8003c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c30:	6453      	str	r3, [r2, #68]	; 0x44
 8003c32:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <HAL_TIM_Base_MspInit+0xb8>)
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2100      	movs	r1, #0
 8003c42:	2019      	movs	r0, #25
 8003c44:	f001 fe47 	bl	80058d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c48:	2019      	movs	r0, #25
 8003c4a:	f001 fe60 	bl	800590e <HAL_NVIC_EnableIRQ>
}
 8003c4e:	e01a      	b.n	8003c86 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a10      	ldr	r2, [pc, #64]	; (8003c98 <HAL_TIM_Base_MspInit+0xc0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d115      	bne.n	8003c86 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <HAL_TIM_Base_MspInit+0xb8>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	4a0b      	ldr	r2, [pc, #44]	; (8003c90 <HAL_TIM_Base_MspInit+0xb8>)
 8003c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c68:	6453      	str	r3, [r2, #68]	; 0x44
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_TIM_Base_MspInit+0xb8>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003c76:	2200      	movs	r2, #0
 8003c78:	2100      	movs	r1, #0
 8003c7a:	201a      	movs	r0, #26
 8003c7c:	f001 fe2b 	bl	80058d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003c80:	201a      	movs	r0, #26
 8003c82:	f001 fe44 	bl	800590e <HAL_NVIC_EnableIRQ>
}
 8003c86:	bf00      	nop
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40014400 	.word	0x40014400
 8003c98:	40014800 	.word	0x40014800

08003c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca4:	f107 0314 	add.w	r3, r7, #20
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	60da      	str	r2, [r3, #12]
 8003cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a19      	ldr	r2, [pc, #100]	; (8003d20 <HAL_UART_MspInit+0x84>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d12c      	bne.n	8003d18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <HAL_UART_MspInit+0x88>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	4a17      	ldr	r2, [pc, #92]	; (8003d24 <HAL_UART_MspInit+0x88>)
 8003cc8:	f043 0320 	orr.w	r3, r3, #32
 8003ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cce:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <HAL_UART_MspInit+0x88>)
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <HAL_UART_MspInit+0x88>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	4a10      	ldr	r2, [pc, #64]	; (8003d24 <HAL_UART_MspInit+0x88>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cea:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <HAL_UART_MspInit+0x88>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003cf6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d04:	2303      	movs	r3, #3
 8003d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003d08:	2308      	movs	r3, #8
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d0c:	f107 0314 	add.w	r3, r7, #20
 8003d10:	4619      	mov	r1, r3
 8003d12:	4805      	ldr	r0, [pc, #20]	; (8003d28 <HAL_UART_MspInit+0x8c>)
 8003d14:	f001 fe16 	bl	8005944 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003d18:	bf00      	nop
 8003d1a:	3728      	adds	r7, #40	; 0x28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40011400 	.word	0x40011400
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40020000 	.word	0x40020000

08003d2c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003d30:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <SDTimer_Handler+0x40>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d006      	beq.n	8003d48 <SDTimer_Handler+0x1c>
    Timer1--;
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <SDTimer_Handler+0x40>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <SDTimer_Handler+0x40>)
 8003d46:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <SDTimer_Handler+0x44>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d006      	beq.n	8003d60 <SDTimer_Handler+0x34>
    Timer2--;
 8003d52:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <SDTimer_Handler+0x44>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <SDTimer_Handler+0x44>)
 8003d5e:	701a      	strb	r2, [r3, #0]
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	2001996d 	.word	0x2001996d
 8003d70:	2001996e 	.word	0x2001996e

08003d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d78:	e7fe      	b.n	8003d78 <NMI_Handler+0x4>

08003d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d7e:	e7fe      	b.n	8003d7e <HardFault_Handler+0x4>

08003d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d84:	e7fe      	b.n	8003d84 <MemManage_Handler+0x4>

08003d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d86:	b480      	push	{r7}
 8003d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d8a:	e7fe      	b.n	8003d8a <BusFault_Handler+0x4>

08003d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d90:	e7fe      	b.n	8003d90 <UsageFault_Handler+0x4>

08003d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d92:	b480      	push	{r7}
 8003d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dae:	b480      	push	{r7}
 8003db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003db2:	bf00      	nop
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <SysTick_Handler+0x30>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <SysTick_Handler+0x30>)
 8003dcc:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8003dce:	4b07      	ldr	r3, [pc, #28]	; (8003dec <SysTick_Handler+0x30>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b09      	cmp	r3, #9
 8003dd6:	d904      	bls.n	8003de2 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <SysTick_Handler+0x30>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8003dde:	f7ff ffa5 	bl	8003d2c <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003de2:	f001 f89b 	bl	8004f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	2001996c 	.word	0x2001996c

08003df0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8003df4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003df8:	f001 ff5a 	bl	8005cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003dfc:	bf00      	nop
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e04:	4803      	ldr	r0, [pc, #12]	; (8003e14 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003e06:	f005 f8ef 	bl	8008fe8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003e0a:	4803      	ldr	r0, [pc, #12]	; (8003e18 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003e0c:	f005 f8ec 	bl	8008fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003e10:	bf00      	nop
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000c38 	.word	0x20000c38
 8003e18:	20000cc8 	.word	0x20000cc8

08003e1c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e20:	4803      	ldr	r0, [pc, #12]	; (8003e30 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003e22:	f005 f8e1 	bl	8008fe8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003e26:	4803      	ldr	r0, [pc, #12]	; (8003e34 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003e28:	f005 f8de 	bl	8008fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003e2c:	bf00      	nop
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20000c38 	.word	0x20000c38
 8003e34:	20000d10 	.word	0x20000d10

08003e38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e3c:	4802      	ldr	r0, [pc, #8]	; (8003e48 <TIM2_IRQHandler+0x10>)
 8003e3e:	f005 f8d3 	bl	8008fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000c80 	.word	0x20000c80

08003e4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return 1;
 8003e50:	2301      	movs	r3, #1
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <_kill>:

int _kill(int pid, int sig)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e66:	f009 fd19 	bl	800d89c <__errno>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2216      	movs	r2, #22
 8003e6e:	601a      	str	r2, [r3, #0]
  return -1;
 8003e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_exit>:

void _exit (int status)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e84:	f04f 31ff 	mov.w	r1, #4294967295
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ffe7 	bl	8003e5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e8e:	e7fe      	b.n	8003e8e <_exit+0x12>

08003e90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	e00a      	b.n	8003eb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ea2:	f3af 8000 	nop.w
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	60ba      	str	r2, [r7, #8]
 8003eae:	b2ca      	uxtb	r2, r1
 8003eb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	dbf0      	blt.n	8003ea2 <_read+0x12>
  }

  return len;
 8003ec0:	687b      	ldr	r3, [r7, #4]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b086      	sub	sp, #24
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	e009      	b.n	8003ef0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	60ba      	str	r2, [r7, #8]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	3301      	adds	r3, #1
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	dbf1      	blt.n	8003edc <_write+0x12>
  }
  return len;
 8003ef8:	687b      	ldr	r3, [r7, #4]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <_close>:

int _close(int file)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f2a:	605a      	str	r2, [r3, #4]
  return 0;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <_isatty>:

int _isatty(int file)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f42:	2301      	movs	r3, #1
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <_sbrk+0x5c>)
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <_sbrk+0x60>)
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f80:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <_sbrk+0x64>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <_sbrk+0x64>)
 8003f8a:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <_sbrk+0x68>)
 8003f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f8e:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <_sbrk+0x64>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d207      	bcs.n	8003fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f9c:	f009 fc7e 	bl	800d89c <__errno>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	220c      	movs	r2, #12
 8003fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003faa:	e009      	b.n	8003fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <_sbrk+0x64>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fb2:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <_sbrk+0x64>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4413      	add	r3, r2
 8003fba:	4a05      	ldr	r2, [pc, #20]	; (8003fd0 <_sbrk+0x64>)
 8003fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20020000 	.word	0x20020000
 8003fcc:	00000400 	.word	0x00000400
 8003fd0:	20019970 	.word	0x20019970
 8003fd4:	20019f18 	.word	0x20019f18

08003fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <SystemInit+0x20>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	4a05      	ldr	r2, [pc, #20]	; (8003ff8 <SystemInit+0x20>)
 8003fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004004:	f000 ff9e 	bl	8004f44 <HAL_GetTick>
 8004008:	4603      	mov	r3, r0
 800400a:	4a04      	ldr	r2, [pc, #16]	; (800401c <SPI_Timer_On+0x20>)
 800400c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800400e:	4a04      	ldr	r2, [pc, #16]	; (8004020 <SPI_Timer_On+0x24>)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6013      	str	r3, [r2, #0]
}
 8004014:	bf00      	nop
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20019978 	.word	0x20019978
 8004020:	2001997c 	.word	0x2001997c

08004024 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004028:	f000 ff8c 	bl	8004f44 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <SPI_Timer_Status+0x24>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	1ad2      	subs	r2, r2, r3
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <SPI_Timer_Status+0x28>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	bf34      	ite	cc
 800403c:	2301      	movcc	r3, #1
 800403e:	2300      	movcs	r3, #0
 8004040:	b2db      	uxtb	r3, r3
}
 8004042:	4618      	mov	r0, r3
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20019978 	.word	0x20019978
 800404c:	2001997c 	.word	0x2001997c

08004050 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af02      	add	r7, sp, #8
 8004056:	4603      	mov	r3, r0
 8004058:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800405a:	f107 020f 	add.w	r2, r7, #15
 800405e:	1df9      	adds	r1, r7, #7
 8004060:	2332      	movs	r3, #50	; 0x32
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2301      	movs	r3, #1
 8004066:	4804      	ldr	r0, [pc, #16]	; (8004078 <xchg_spi+0x28>)
 8004068:	f004 f96b 	bl	8008342 <HAL_SPI_TransmitReceive>
    return rxDat;
 800406c:	7bfb      	ldrb	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20000be0 	.word	0x20000be0

0800407c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800407c:	b590      	push	{r4, r7, lr}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e00a      	b.n	80040a2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	18d4      	adds	r4, r2, r3
 8004092:	20ff      	movs	r0, #255	; 0xff
 8004094:	f7ff ffdc 	bl	8004050 <xchg_spi>
 8004098:	4603      	mov	r3, r0
 800409a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3301      	adds	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d3f0      	bcc.n	800408c <rcvr_spi_multi+0x10>
	}
}
 80040aa:	bf00      	nop
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd90      	pop	{r4, r7, pc}

080040b4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	f04f 33ff 	mov.w	r3, #4294967295
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4803      	ldr	r0, [pc, #12]	; (80040d8 <xmit_spi_multi+0x24>)
 80040ca:	f003 fffe 	bl	80080ca <HAL_SPI_Transmit>
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000be0 	.word	0x20000be0

080040dc <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80040e4:	f000 ff2e 	bl	8004f44 <HAL_GetTick>
 80040e8:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80040ee:	20ff      	movs	r0, #255	; 0xff
 80040f0:	f7ff ffae 	bl	8004050 <xchg_spi>
 80040f4:	4603      	mov	r3, r0
 80040f6:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	2bff      	cmp	r3, #255	; 0xff
 80040fc:	d007      	beq.n	800410e <wait_ready+0x32>
 80040fe:	f000 ff21 	bl	8004f44 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	429a      	cmp	r2, r3
 800410c:	d8ef      	bhi.n	80040ee <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	2bff      	cmp	r3, #255	; 0xff
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004128:	2201      	movs	r2, #1
 800412a:	2110      	movs	r1, #16
 800412c:	4803      	ldr	r0, [pc, #12]	; (800413c <despiselect+0x18>)
 800412e:	f001 fda5 	bl	8005c7c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004132:	20ff      	movs	r0, #255	; 0xff
 8004134:	f7ff ff8c 	bl	8004050 <xchg_spi>

}
 8004138:	bf00      	nop
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40020000 	.word	0x40020000

08004140 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004144:	2200      	movs	r2, #0
 8004146:	2110      	movs	r1, #16
 8004148:	4809      	ldr	r0, [pc, #36]	; (8004170 <spiselect+0x30>)
 800414a:	f001 fd97 	bl	8005c7c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800414e:	20ff      	movs	r0, #255	; 0xff
 8004150:	f7ff ff7e 	bl	8004050 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004154:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004158:	f7ff ffc0 	bl	80040dc <wait_ready>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <spiselect+0x26>
 8004162:	2301      	movs	r3, #1
 8004164:	e002      	b.n	800416c <spiselect+0x2c>

	despiselect();
 8004166:	f7ff ffdd 	bl	8004124 <despiselect>
	return 0;	/* Timeout */
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40020000 	.word	0x40020000

08004174 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800417e:	20c8      	movs	r0, #200	; 0xc8
 8004180:	f7ff ff3c 	bl	8003ffc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004184:	20ff      	movs	r0, #255	; 0xff
 8004186:	f7ff ff63 	bl	8004050 <xchg_spi>
 800418a:	4603      	mov	r3, r0
 800418c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2bff      	cmp	r3, #255	; 0xff
 8004192:	d104      	bne.n	800419e <rcvr_datablock+0x2a>
 8004194:	f7ff ff46 	bl	8004024 <SPI_Timer_Status>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f2      	bne.n	8004184 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	2bfe      	cmp	r3, #254	; 0xfe
 80041a2:	d001      	beq.n	80041a8 <rcvr_datablock+0x34>
 80041a4:	2300      	movs	r3, #0
 80041a6:	e00a      	b.n	80041be <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80041a8:	6839      	ldr	r1, [r7, #0]
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff ff66 	bl	800407c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80041b0:	20ff      	movs	r0, #255	; 0xff
 80041b2:	f7ff ff4d 	bl	8004050 <xchg_spi>
 80041b6:	20ff      	movs	r0, #255	; 0xff
 80041b8:	f7ff ff4a 	bl	8004050 <xchg_spi>

	return 1;						/* Function succeeded */
 80041bc:	2301      	movs	r3, #1
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	460b      	mov	r3, r1
 80041d0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80041d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041d6:	f7ff ff81 	bl	80040dc <wait_ready>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <xmit_datablock+0x1e>
 80041e0:	2300      	movs	r3, #0
 80041e2:	e01e      	b.n	8004222 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff ff32 	bl	8004050 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	2bfd      	cmp	r3, #253	; 0xfd
 80041f0:	d016      	beq.n	8004220 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80041f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff ff5c 	bl	80040b4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80041fc:	20ff      	movs	r0, #255	; 0xff
 80041fe:	f7ff ff27 	bl	8004050 <xchg_spi>
 8004202:	20ff      	movs	r0, #255	; 0xff
 8004204:	f7ff ff24 	bl	8004050 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004208:	20ff      	movs	r0, #255	; 0xff
 800420a:	f7ff ff21 	bl	8004050 <xchg_spi>
 800420e:	4603      	mov	r3, r0
 8004210:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	2b05      	cmp	r3, #5
 800421a:	d001      	beq.n	8004220 <xmit_datablock+0x5a>
 800421c:	2300      	movs	r3, #0
 800421e:	e000      	b.n	8004222 <xmit_datablock+0x5c>
	}
	return 1;
 8004220:	2301      	movs	r3, #1
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	4603      	mov	r3, r0
 8004232:	6039      	str	r1, [r7, #0]
 8004234:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	2b00      	cmp	r3, #0
 800423c:	da0e      	bge.n	800425c <send_cmd+0x32>
		cmd &= 0x7F;
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004244:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004246:	2100      	movs	r1, #0
 8004248:	2037      	movs	r0, #55	; 0x37
 800424a:	f7ff ffee 	bl	800422a <send_cmd>
 800424e:	4603      	mov	r3, r0
 8004250:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004252:	7bbb      	ldrb	r3, [r7, #14]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d901      	bls.n	800425c <send_cmd+0x32>
 8004258:	7bbb      	ldrb	r3, [r7, #14]
 800425a:	e051      	b.n	8004300 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	2b0c      	cmp	r3, #12
 8004260:	d008      	beq.n	8004274 <send_cmd+0x4a>
		despiselect();
 8004262:	f7ff ff5f 	bl	8004124 <despiselect>
		if (!spiselect()) return 0xFF;
 8004266:	f7ff ff6b 	bl	8004140 <spiselect>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <send_cmd+0x4a>
 8004270:	23ff      	movs	r3, #255	; 0xff
 8004272:	e045      	b.n	8004300 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800427a:	b2db      	uxtb	r3, r3
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fee7 	bl	8004050 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	0e1b      	lsrs	r3, r3, #24
 8004286:	b2db      	uxtb	r3, r3
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fee1 	bl	8004050 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	b2db      	uxtb	r3, r3
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fedb 	bl	8004050 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff fed5 	bl	8004050 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fed0 	bl	8004050 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <send_cmd+0x94>
 80042ba:	2395      	movs	r3, #149	; 0x95
 80042bc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d101      	bne.n	80042c8 <send_cmd+0x9e>
 80042c4:	2387      	movs	r3, #135	; 0x87
 80042c6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fec0 	bl	8004050 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	2b0c      	cmp	r3, #12
 80042d4:	d102      	bne.n	80042dc <send_cmd+0xb2>
 80042d6:	20ff      	movs	r0, #255	; 0xff
 80042d8:	f7ff feba 	bl	8004050 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80042dc:	230a      	movs	r3, #10
 80042de:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80042e0:	20ff      	movs	r0, #255	; 0xff
 80042e2:	f7ff feb5 	bl	8004050 <xchg_spi>
 80042e6:	4603      	mov	r3, r0
 80042e8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80042ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	da05      	bge.n	80042fe <send_cmd+0xd4>
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80042fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004308:	b590      	push	{r4, r7, lr}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <USER_SPI_initialize+0x14>
 8004318:	2301      	movs	r3, #1
 800431a:	e0d6      	b.n	80044ca <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800431c:	4b6d      	ldr	r3, [pc, #436]	; (80044d4 <USER_SPI_initialize+0x1cc>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <USER_SPI_initialize+0x2a>
 800432a:	4b6a      	ldr	r3, [pc, #424]	; (80044d4 <USER_SPI_initialize+0x1cc>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	e0cb      	b.n	80044ca <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004332:	4b69      	ldr	r3, [pc, #420]	; (80044d8 <USER_SPI_initialize+0x1d0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800433c:	4b66      	ldr	r3, [pc, #408]	; (80044d8 <USER_SPI_initialize+0x1d0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8004344:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004346:	230a      	movs	r3, #10
 8004348:	73fb      	strb	r3, [r7, #15]
 800434a:	e005      	b.n	8004358 <USER_SPI_initialize+0x50>
 800434c:	20ff      	movs	r0, #255	; 0xff
 800434e:	f7ff fe7f 	bl	8004050 <xchg_spi>
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	3b01      	subs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f6      	bne.n	800434c <USER_SPI_initialize+0x44>

	ty = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004362:	2100      	movs	r1, #0
 8004364:	2000      	movs	r0, #0
 8004366:	f7ff ff60 	bl	800422a <send_cmd>
 800436a:	4603      	mov	r3, r0
 800436c:	2b01      	cmp	r3, #1
 800436e:	f040 808b 	bne.w	8004488 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004372:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004376:	f7ff fe41 	bl	8003ffc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800437a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800437e:	2008      	movs	r0, #8
 8004380:	f7ff ff53 	bl	800422a <send_cmd>
 8004384:	4603      	mov	r3, r0
 8004386:	2b01      	cmp	r3, #1
 8004388:	d151      	bne.n	800442e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]
 800438e:	e00d      	b.n	80043ac <USER_SPI_initialize+0xa4>
 8004390:	7bfc      	ldrb	r4, [r7, #15]
 8004392:	20ff      	movs	r0, #255	; 0xff
 8004394:	f7ff fe5c 	bl	8004050 <xchg_spi>
 8004398:	4603      	mov	r3, r0
 800439a:	461a      	mov	r2, r3
 800439c:	f104 0310 	add.w	r3, r4, #16
 80043a0:	443b      	add	r3, r7
 80043a2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	3301      	adds	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d9ee      	bls.n	8004390 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80043b2:	7abb      	ldrb	r3, [r7, #10]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d167      	bne.n	8004488 <USER_SPI_initialize+0x180>
 80043b8:	7afb      	ldrb	r3, [r7, #11]
 80043ba:	2baa      	cmp	r3, #170	; 0xaa
 80043bc:	d164      	bne.n	8004488 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80043be:	bf00      	nop
 80043c0:	f7ff fe30 	bl	8004024 <SPI_Timer_Status>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <USER_SPI_initialize+0xd2>
 80043ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80043ce:	20a9      	movs	r0, #169	; 0xa9
 80043d0:	f7ff ff2b 	bl	800422a <send_cmd>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f2      	bne.n	80043c0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80043da:	f7ff fe23 	bl	8004024 <SPI_Timer_Status>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d051      	beq.n	8004488 <USER_SPI_initialize+0x180>
 80043e4:	2100      	movs	r1, #0
 80043e6:	203a      	movs	r0, #58	; 0x3a
 80043e8:	f7ff ff1f 	bl	800422a <send_cmd>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d14a      	bne.n	8004488 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]
 80043f6:	e00d      	b.n	8004414 <USER_SPI_initialize+0x10c>
 80043f8:	7bfc      	ldrb	r4, [r7, #15]
 80043fa:	20ff      	movs	r0, #255	; 0xff
 80043fc:	f7ff fe28 	bl	8004050 <xchg_spi>
 8004400:	4603      	mov	r3, r0
 8004402:	461a      	mov	r2, r3
 8004404:	f104 0310 	add.w	r3, r4, #16
 8004408:	443b      	add	r3, r7
 800440a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	3301      	adds	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	2b03      	cmp	r3, #3
 8004418:	d9ee      	bls.n	80043f8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800441a:	7a3b      	ldrb	r3, [r7, #8]
 800441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <USER_SPI_initialize+0x120>
 8004424:	230c      	movs	r3, #12
 8004426:	e000      	b.n	800442a <USER_SPI_initialize+0x122>
 8004428:	2304      	movs	r3, #4
 800442a:	737b      	strb	r3, [r7, #13]
 800442c:	e02c      	b.n	8004488 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800442e:	2100      	movs	r1, #0
 8004430:	20a9      	movs	r0, #169	; 0xa9
 8004432:	f7ff fefa 	bl	800422a <send_cmd>
 8004436:	4603      	mov	r3, r0
 8004438:	2b01      	cmp	r3, #1
 800443a:	d804      	bhi.n	8004446 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800443c:	2302      	movs	r3, #2
 800443e:	737b      	strb	r3, [r7, #13]
 8004440:	23a9      	movs	r3, #169	; 0xa9
 8004442:	73bb      	strb	r3, [r7, #14]
 8004444:	e003      	b.n	800444e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004446:	2301      	movs	r3, #1
 8004448:	737b      	strb	r3, [r7, #13]
 800444a:	2301      	movs	r3, #1
 800444c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800444e:	bf00      	nop
 8004450:	f7ff fde8 	bl	8004024 <SPI_Timer_Status>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <USER_SPI_initialize+0x162>
 800445a:	7bbb      	ldrb	r3, [r7, #14]
 800445c:	2100      	movs	r1, #0
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fee3 	bl	800422a <send_cmd>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f2      	bne.n	8004450 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800446a:	f7ff fddb 	bl	8004024 <SPI_Timer_Status>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <USER_SPI_initialize+0x17c>
 8004474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004478:	2010      	movs	r0, #16
 800447a:	f7ff fed6 	bl	800422a <send_cmd>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <USER_SPI_initialize+0x180>
				ty = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004488:	4a14      	ldr	r2, [pc, #80]	; (80044dc <USER_SPI_initialize+0x1d4>)
 800448a:	7b7b      	ldrb	r3, [r7, #13]
 800448c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800448e:	f7ff fe49 	bl	8004124 <despiselect>

	if (ty) {			/* OK */
 8004492:	7b7b      	ldrb	r3, [r7, #13]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d012      	beq.n	80044be <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <USER_SPI_initialize+0x1d0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80044a2:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <USER_SPI_initialize+0x1d0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0210 	orr.w	r2, r2, #16
 80044aa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80044ac:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <USER_SPI_initialize+0x1cc>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	f023 0301 	bic.w	r3, r3, #1
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <USER_SPI_initialize+0x1cc>)
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	e002      	b.n	80044c4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <USER_SPI_initialize+0x1cc>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <USER_SPI_initialize+0x1cc>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd90      	pop	{r4, r7, pc}
 80044d2:	bf00      	nop
 80044d4:	200008a4 	.word	0x200008a4
 80044d8:	20000be0 	.word	0x20000be0
 80044dc:	20019974 	.word	0x20019974

080044e0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <USER_SPI_status+0x14>
 80044f0:	2301      	movs	r3, #1
 80044f2:	e002      	b.n	80044fa <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <USER_SPI_status+0x28>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	b2db      	uxtb	r3, r3
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	200008a4 	.word	0x200008a4

0800450c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4603      	mov	r3, r0
 800451a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <USER_SPI_read+0x1c>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <USER_SPI_read+0x20>
 8004528:	2304      	movs	r3, #4
 800452a:	e04d      	b.n	80045c8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800452c:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <USER_SPI_read+0xc4>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <USER_SPI_read+0x32>
 800453a:	2303      	movs	r3, #3
 800453c:	e044      	b.n	80045c8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800453e:	4b25      	ldr	r3, [pc, #148]	; (80045d4 <USER_SPI_read+0xc8>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d102      	bne.n	8004550 <USER_SPI_read+0x44>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	025b      	lsls	r3, r3, #9
 800454e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d111      	bne.n	800457a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	2011      	movs	r0, #17
 800455a:	f7ff fe66 	bl	800422a <send_cmd>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d129      	bne.n	80045b8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004564:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004568:	68b8      	ldr	r0, [r7, #8]
 800456a:	f7ff fe03 	bl	8004174 <rcvr_datablock>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d021      	beq.n	80045b8 <USER_SPI_read+0xac>
			count = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	e01e      	b.n	80045b8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	2012      	movs	r0, #18
 800457e:	f7ff fe54 	bl	800422a <send_cmd>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d117      	bne.n	80045b8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800458c:	68b8      	ldr	r0, [r7, #8]
 800458e:	f7ff fdf1 	bl	8004174 <rcvr_datablock>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <USER_SPI_read+0xa2>
				buff += 512;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800459e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1ed      	bne.n	8004588 <USER_SPI_read+0x7c>
 80045ac:	e000      	b.n	80045b0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80045ae:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80045b0:	2100      	movs	r1, #0
 80045b2:	200c      	movs	r0, #12
 80045b4:	f7ff fe39 	bl	800422a <send_cmd>
		}
	}
	despiselect();
 80045b8:	f7ff fdb4 	bl	8004124 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bf14      	ite	ne
 80045c2:	2301      	movne	r3, #1
 80045c4:	2300      	moveq	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	200008a4 	.word	0x200008a4
 80045d4:	20019974 	.word	0x20019974

080045d8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	4603      	mov	r3, r0
 80045e6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d102      	bne.n	80045f4 <USER_SPI_write+0x1c>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <USER_SPI_write+0x20>
 80045f4:	2304      	movs	r3, #4
 80045f6:	e063      	b.n	80046c0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80045f8:	4b33      	ldr	r3, [pc, #204]	; (80046c8 <USER_SPI_write+0xf0>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <USER_SPI_write+0x32>
 8004606:	2303      	movs	r3, #3
 8004608:	e05a      	b.n	80046c0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800460a:	4b2f      	ldr	r3, [pc, #188]	; (80046c8 <USER_SPI_write+0xf0>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <USER_SPI_write+0x44>
 8004618:	2302      	movs	r3, #2
 800461a:	e051      	b.n	80046c0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800461c:	4b2b      	ldr	r3, [pc, #172]	; (80046cc <USER_SPI_write+0xf4>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <USER_SPI_write+0x56>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	025b      	lsls	r3, r3, #9
 800462c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d110      	bne.n	8004656 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	2018      	movs	r0, #24
 8004638:	f7ff fdf7 	bl	800422a <send_cmd>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d136      	bne.n	80046b0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004642:	21fe      	movs	r1, #254	; 0xfe
 8004644:	68b8      	ldr	r0, [r7, #8]
 8004646:	f7ff fdbe 	bl	80041c6 <xmit_datablock>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d02f      	beq.n	80046b0 <USER_SPI_write+0xd8>
			count = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	e02c      	b.n	80046b0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004656:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <USER_SPI_write+0xf4>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	f003 0306 	and.w	r3, r3, #6
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <USER_SPI_write+0x92>
 8004662:	6839      	ldr	r1, [r7, #0]
 8004664:	2097      	movs	r0, #151	; 0x97
 8004666:	f7ff fde0 	bl	800422a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	2019      	movs	r0, #25
 800466e:	f7ff fddc 	bl	800422a <send_cmd>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d11b      	bne.n	80046b0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004678:	21fc      	movs	r1, #252	; 0xfc
 800467a:	68b8      	ldr	r0, [r7, #8]
 800467c:	f7ff fda3 	bl	80041c6 <xmit_datablock>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <USER_SPI_write+0xc4>
				buff += 512;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800468c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	3b01      	subs	r3, #1
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ee      	bne.n	8004678 <USER_SPI_write+0xa0>
 800469a:	e000      	b.n	800469e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800469c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800469e:	21fd      	movs	r1, #253	; 0xfd
 80046a0:	2000      	movs	r0, #0
 80046a2:	f7ff fd90 	bl	80041c6 <xmit_datablock>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <USER_SPI_write+0xd8>
 80046ac:	2301      	movs	r3, #1
 80046ae:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80046b0:	f7ff fd38 	bl	8004124 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bf14      	ite	ne
 80046ba:	2301      	movne	r3, #1
 80046bc:	2300      	moveq	r3, #0
 80046be:	b2db      	uxtb	r3, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	200008a4 	.word	0x200008a4
 80046cc:	20019974 	.word	0x20019974

080046d0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08c      	sub	sp, #48	; 0x30
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	603a      	str	r2, [r7, #0]
 80046da:	71fb      	strb	r3, [r7, #7]
 80046dc:	460b      	mov	r3, r1
 80046de:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <USER_SPI_ioctl+0x1a>
 80046e6:	2304      	movs	r3, #4
 80046e8:	e15a      	b.n	80049a0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80046ea:	4baf      	ldr	r3, [pc, #700]	; (80049a8 <USER_SPI_ioctl+0x2d8>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <USER_SPI_ioctl+0x2c>
 80046f8:	2303      	movs	r3, #3
 80046fa:	e151      	b.n	80049a0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8004702:	79bb      	ldrb	r3, [r7, #6]
 8004704:	2b04      	cmp	r3, #4
 8004706:	f200 8136 	bhi.w	8004976 <USER_SPI_ioctl+0x2a6>
 800470a:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <USER_SPI_ioctl+0x40>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	08004725 	.word	0x08004725
 8004714:	08004739 	.word	0x08004739
 8004718:	08004977 	.word	0x08004977
 800471c:	080047e5 	.word	0x080047e5
 8004720:	080048db 	.word	0x080048db
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004724:	f7ff fd0c 	bl	8004140 <spiselect>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 8127 	beq.w	800497e <USER_SPI_ioctl+0x2ae>
 8004730:	2300      	movs	r3, #0
 8004732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004736:	e122      	b.n	800497e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004738:	2100      	movs	r1, #0
 800473a:	2009      	movs	r0, #9
 800473c:	f7ff fd75 	bl	800422a <send_cmd>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	f040 811d 	bne.w	8004982 <USER_SPI_ioctl+0x2b2>
 8004748:	f107 030c 	add.w	r3, r7, #12
 800474c:	2110      	movs	r1, #16
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fd10 	bl	8004174 <rcvr_datablock>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8113 	beq.w	8004982 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800475c:	7b3b      	ldrb	r3, [r7, #12]
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d111      	bne.n	800478a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004766:	7d7b      	ldrb	r3, [r7, #21]
 8004768:	461a      	mov	r2, r3
 800476a:	7d3b      	ldrb	r3, [r7, #20]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	4413      	add	r3, r2
 8004770:	461a      	mov	r2, r3
 8004772:	7cfb      	ldrb	r3, [r7, #19]
 8004774:	041b      	lsls	r3, r3, #16
 8004776:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800477a:	4413      	add	r3, r2
 800477c:	3301      	adds	r3, #1
 800477e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	029a      	lsls	r2, r3, #10
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	e028      	b.n	80047dc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800478a:	7c7b      	ldrb	r3, [r7, #17]
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	b2da      	uxtb	r2, r3
 8004792:	7dbb      	ldrb	r3, [r7, #22]
 8004794:	09db      	lsrs	r3, r3, #7
 8004796:	b2db      	uxtb	r3, r3
 8004798:	4413      	add	r3, r2
 800479a:	b2da      	uxtb	r2, r3
 800479c:	7d7b      	ldrb	r3, [r7, #21]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f003 0306 	and.w	r3, r3, #6
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	4413      	add	r3, r2
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	3302      	adds	r3, #2
 80047ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80047b2:	7d3b      	ldrb	r3, [r7, #20]
 80047b4:	099b      	lsrs	r3, r3, #6
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	7cfb      	ldrb	r3, [r7, #19]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	441a      	add	r2, r3
 80047c0:	7cbb      	ldrb	r3, [r7, #18]
 80047c2:	029b      	lsls	r3, r3, #10
 80047c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047c8:	4413      	add	r3, r2
 80047ca:	3301      	adds	r3, #1
 80047cc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80047ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80047d2:	3b09      	subs	r3, #9
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	409a      	lsls	r2, r3
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80047e2:	e0ce      	b.n	8004982 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80047e4:	4b71      	ldr	r3, [pc, #452]	; (80049ac <USER_SPI_ioctl+0x2dc>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d031      	beq.n	8004854 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80047f0:	2100      	movs	r1, #0
 80047f2:	208d      	movs	r0, #141	; 0x8d
 80047f4:	f7ff fd19 	bl	800422a <send_cmd>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f040 80c3 	bne.w	8004986 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004800:	20ff      	movs	r0, #255	; 0xff
 8004802:	f7ff fc25 	bl	8004050 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004806:	f107 030c 	add.w	r3, r7, #12
 800480a:	2110      	movs	r1, #16
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fcb1 	bl	8004174 <rcvr_datablock>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80b6 	beq.w	8004986 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800481a:	2330      	movs	r3, #48	; 0x30
 800481c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004820:	e007      	b.n	8004832 <USER_SPI_ioctl+0x162>
 8004822:	20ff      	movs	r0, #255	; 0xff
 8004824:	f7ff fc14 	bl	8004050 <xchg_spi>
 8004828:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800482c:	3b01      	subs	r3, #1
 800482e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004832:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f3      	bne.n	8004822 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800483a:	7dbb      	ldrb	r3, [r7, #22]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	2310      	movs	r3, #16
 8004844:	fa03 f202 	lsl.w	r2, r3, r2
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004852:	e098      	b.n	8004986 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004854:	2100      	movs	r1, #0
 8004856:	2009      	movs	r0, #9
 8004858:	f7ff fce7 	bl	800422a <send_cmd>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	f040 8091 	bne.w	8004986 <USER_SPI_ioctl+0x2b6>
 8004864:	f107 030c 	add.w	r3, r7, #12
 8004868:	2110      	movs	r1, #16
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff fc82 	bl	8004174 <rcvr_datablock>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8087 	beq.w	8004986 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004878:	4b4c      	ldr	r3, [pc, #304]	; (80049ac <USER_SPI_ioctl+0x2dc>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d012      	beq.n	80048aa <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004884:	7dbb      	ldrb	r3, [r7, #22]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800488c:	7dfa      	ldrb	r2, [r7, #23]
 800488e:	09d2      	lsrs	r2, r2, #7
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	4413      	add	r3, r2
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	7e7b      	ldrb	r3, [r7, #25]
 8004898:	099b      	lsrs	r3, r3, #6
 800489a:	b2db      	uxtb	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	e013      	b.n	80048d2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80048aa:	7dbb      	ldrb	r3, [r7, #22]
 80048ac:	109b      	asrs	r3, r3, #2
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	3301      	adds	r3, #1
 80048b6:	7dfa      	ldrb	r2, [r7, #23]
 80048b8:	00d2      	lsls	r2, r2, #3
 80048ba:	f002 0218 	and.w	r2, r2, #24
 80048be:	7df9      	ldrb	r1, [r7, #23]
 80048c0:	0949      	lsrs	r1, r1, #5
 80048c2:	b2c9      	uxtb	r1, r1
 80048c4:	440a      	add	r2, r1
 80048c6:	3201      	adds	r2, #1
 80048c8:	fb02 f303 	mul.w	r3, r2, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80048d8:	e055      	b.n	8004986 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80048da:	4b34      	ldr	r3, [pc, #208]	; (80049ac <USER_SPI_ioctl+0x2dc>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	f003 0306 	and.w	r3, r3, #6
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d051      	beq.n	800498a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80048e6:	f107 020c 	add.w	r2, r7, #12
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	210b      	movs	r1, #11
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff feee 	bl	80046d0 <USER_SPI_ioctl>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d149      	bne.n	800498e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80048fa:	7b3b      	ldrb	r3, [r7, #12]
 80048fc:	099b      	lsrs	r3, r3, #6
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d104      	bne.n	800490e <USER_SPI_ioctl+0x23e>
 8004904:	7dbb      	ldrb	r3, [r7, #22]
 8004906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d041      	beq.n	8004992 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	623b      	str	r3, [r7, #32]
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800491e:	4b23      	ldr	r3, [pc, #140]	; (80049ac <USER_SPI_ioctl+0x2dc>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d105      	bne.n	8004936 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	025b      	lsls	r3, r3, #9
 800492e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	025b      	lsls	r3, r3, #9
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004938:	2020      	movs	r0, #32
 800493a:	f7ff fc76 	bl	800422a <send_cmd>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d128      	bne.n	8004996 <USER_SPI_ioctl+0x2c6>
 8004944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004946:	2021      	movs	r0, #33	; 0x21
 8004948:	f7ff fc6f 	bl	800422a <send_cmd>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d121      	bne.n	8004996 <USER_SPI_ioctl+0x2c6>
 8004952:	2100      	movs	r1, #0
 8004954:	2026      	movs	r0, #38	; 0x26
 8004956:	f7ff fc68 	bl	800422a <send_cmd>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d11a      	bne.n	8004996 <USER_SPI_ioctl+0x2c6>
 8004960:	f247 5030 	movw	r0, #30000	; 0x7530
 8004964:	f7ff fbba 	bl	80040dc <wait_ready>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d013      	beq.n	8004996 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800496e:	2300      	movs	r3, #0
 8004970:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004974:	e00f      	b.n	8004996 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004976:	2304      	movs	r3, #4
 8004978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800497c:	e00c      	b.n	8004998 <USER_SPI_ioctl+0x2c8>
		break;
 800497e:	bf00      	nop
 8004980:	e00a      	b.n	8004998 <USER_SPI_ioctl+0x2c8>
		break;
 8004982:	bf00      	nop
 8004984:	e008      	b.n	8004998 <USER_SPI_ioctl+0x2c8>
		break;
 8004986:	bf00      	nop
 8004988:	e006      	b.n	8004998 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800498a:	bf00      	nop
 800498c:	e004      	b.n	8004998 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800498e:	bf00      	nop
 8004990:	e002      	b.n	8004998 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004992:	bf00      	nop
 8004994:	e000      	b.n	8004998 <USER_SPI_ioctl+0x2c8>
		break;
 8004996:	bf00      	nop
	}

	despiselect();
 8004998:	f7ff fbc4 	bl	8004124 <despiselect>

	return res;
 800499c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3730      	adds	r7, #48	; 0x30
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	200008a4 	.word	0x200008a4
 80049ac:	20019974 	.word	0x20019974

080049b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80049b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049b4:	480d      	ldr	r0, [pc, #52]	; (80049ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80049b6:	490e      	ldr	r1, [pc, #56]	; (80049f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80049b8:	4a0e      	ldr	r2, [pc, #56]	; (80049f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049bc:	e002      	b.n	80049c4 <LoopCopyDataInit>

080049be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049c2:	3304      	adds	r3, #4

080049c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049c8:	d3f9      	bcc.n	80049be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049ca:	4a0b      	ldr	r2, [pc, #44]	; (80049f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80049cc:	4c0b      	ldr	r4, [pc, #44]	; (80049fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80049ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049d0:	e001      	b.n	80049d6 <LoopFillZerobss>

080049d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049d4:	3204      	adds	r2, #4

080049d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049d8:	d3fb      	bcc.n	80049d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80049da:	f7ff fafd 	bl	8003fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049de:	f008 ff63 	bl	800d8a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049e2:	f7fd f841 	bl	8001a68 <main>
  bx  lr    
 80049e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80049e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049f0:	20000aa4 	.word	0x20000aa4
  ldr r2, =_sidata
 80049f4:	08011f0c 	.word	0x08011f0c
  ldr r2, =_sbss
 80049f8:	20000aa4 	.word	0x20000aa4
  ldr r4, =_ebss
 80049fc:	20019f14 	.word	0x20019f14

08004a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a00:	e7fe      	b.n	8004a00 <ADC_IRQHandler>

08004a02 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004a02:	b480      	push	{r7}
 8004a04:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004a06:	bf00      	nop
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af04      	add	r7, sp, #16
 8004a16:	4603      	mov	r3, r0
 8004a18:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1e:	9302      	str	r3, [sp, #8]
 8004a20:	2301      	movs	r3, #1
 8004a22:	9301      	str	r3, [sp, #4]
 8004a24:	1dfb      	adds	r3, r7, #7
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	2301      	movs	r3, #1
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2178      	movs	r1, #120	; 0x78
 8004a2e:	4803      	ldr	r0, [pc, #12]	; (8004a3c <ssd1306_WriteCommand+0x2c>)
 8004a30:	f001 fdbe 	bl	80065b0 <HAL_I2C_Mem_Write>
}
 8004a34:	bf00      	nop
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20000b18 	.word	0x20000b18

08004a40 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af04      	add	r7, sp, #16
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a52:	9202      	str	r2, [sp, #8]
 8004a54:	9301      	str	r3, [sp, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	2240      	movs	r2, #64	; 0x40
 8004a5e:	2178      	movs	r1, #120	; 0x78
 8004a60:	4803      	ldr	r0, [pc, #12]	; (8004a70 <ssd1306_WriteData+0x30>)
 8004a62:	f001 fda5 	bl	80065b0 <HAL_I2C_Mem_Write>
}
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000b18 	.word	0x20000b18

08004a74 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004a78:	f7ff ffc3 	bl	8004a02 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004a7c:	2064      	movs	r0, #100	; 0x64
 8004a7e:	f000 fa6d 	bl	8004f5c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004a82:	2000      	movs	r0, #0
 8004a84:	f000 f9da 	bl	8004e3c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004a88:	2020      	movs	r0, #32
 8004a8a:	f7ff ffc1 	bl	8004a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004a8e:	2000      	movs	r0, #0
 8004a90:	f7ff ffbe 	bl	8004a10 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004a94:	20b0      	movs	r0, #176	; 0xb0
 8004a96:	f7ff ffbb 	bl	8004a10 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004a9a:	20c8      	movs	r0, #200	; 0xc8
 8004a9c:	f7ff ffb8 	bl	8004a10 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	f7ff ffb5 	bl	8004a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004aa6:	2010      	movs	r0, #16
 8004aa8:	f7ff ffb2 	bl	8004a10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004aac:	2040      	movs	r0, #64	; 0x40
 8004aae:	f7ff ffaf 	bl	8004a10 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004ab2:	20ff      	movs	r0, #255	; 0xff
 8004ab4:	f000 f9ae 	bl	8004e14 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004ab8:	20a1      	movs	r0, #161	; 0xa1
 8004aba:	f7ff ffa9 	bl	8004a10 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004abe:	20a6      	movs	r0, #166	; 0xa6
 8004ac0:	f7ff ffa6 	bl	8004a10 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004ac4:	20a8      	movs	r0, #168	; 0xa8
 8004ac6:	f7ff ffa3 	bl	8004a10 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004aca:	203f      	movs	r0, #63	; 0x3f
 8004acc:	f7ff ffa0 	bl	8004a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004ad0:	20a4      	movs	r0, #164	; 0xa4
 8004ad2:	f7ff ff9d 	bl	8004a10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004ad6:	20d3      	movs	r0, #211	; 0xd3
 8004ad8:	f7ff ff9a 	bl	8004a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004adc:	2000      	movs	r0, #0
 8004ade:	f7ff ff97 	bl	8004a10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004ae2:	20d5      	movs	r0, #213	; 0xd5
 8004ae4:	f7ff ff94 	bl	8004a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004ae8:	20f0      	movs	r0, #240	; 0xf0
 8004aea:	f7ff ff91 	bl	8004a10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004aee:	20d9      	movs	r0, #217	; 0xd9
 8004af0:	f7ff ff8e 	bl	8004a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004af4:	2022      	movs	r0, #34	; 0x22
 8004af6:	f7ff ff8b 	bl	8004a10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004afa:	20da      	movs	r0, #218	; 0xda
 8004afc:	f7ff ff88 	bl	8004a10 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004b00:	2012      	movs	r0, #18
 8004b02:	f7ff ff85 	bl	8004a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004b06:	20db      	movs	r0, #219	; 0xdb
 8004b08:	f7ff ff82 	bl	8004a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004b0c:	2020      	movs	r0, #32
 8004b0e:	f7ff ff7f 	bl	8004a10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004b12:	208d      	movs	r0, #141	; 0x8d
 8004b14:	f7ff ff7c 	bl	8004a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004b18:	2014      	movs	r0, #20
 8004b1a:	f7ff ff79 	bl	8004a10 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004b1e:	2001      	movs	r0, #1
 8004b20:	f000 f98c 	bl	8004e3c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004b24:	2000      	movs	r0, #0
 8004b26:	f000 f80f 	bl	8004b48 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004b2a:	f000 f831 	bl	8004b90 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <ssd1306_Init+0xd0>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004b34:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <ssd1306_Init+0xd0>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004b3a:	4b02      	ldr	r3, [pc, #8]	; (8004b44 <ssd1306_Init+0xd0>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	711a      	strb	r2, [r3, #4]
}
 8004b40:	bf00      	nop
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20019d80 	.word	0x20019d80

08004b48 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	e00d      	b.n	8004b74 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <ssd1306_Fill+0x1a>
 8004b5e:	2100      	movs	r1, #0
 8004b60:	e000      	b.n	8004b64 <ssd1306_Fill+0x1c>
 8004b62:	21ff      	movs	r1, #255	; 0xff
 8004b64:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <ssd1306_Fill+0x44>)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	460a      	mov	r2, r1
 8004b6c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3301      	adds	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7a:	d3ed      	bcc.n	8004b58 <ssd1306_Fill+0x10>
    }
}
 8004b7c:	bf00      	nop
 8004b7e:	bf00      	nop
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20019980 	.word	0x20019980

08004b90 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004b96:	2300      	movs	r3, #0
 8004b98:	71fb      	strb	r3, [r7, #7]
 8004b9a:	e016      	b.n	8004bca <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	3b50      	subs	r3, #80	; 0x50
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff ff34 	bl	8004a10 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f7ff ff31 	bl	8004a10 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004bae:	2010      	movs	r0, #16
 8004bb0:	f7ff ff2e 	bl	8004a10 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004bb4:	79fb      	ldrb	r3, [r7, #7]
 8004bb6:	01db      	lsls	r3, r3, #7
 8004bb8:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <ssd1306_UpdateScreen+0x4c>)
 8004bba:	4413      	add	r3, r2
 8004bbc:	2180      	movs	r1, #128	; 0x80
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff ff3e 	bl	8004a40 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	71fb      	strb	r3, [r7, #7]
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	2b07      	cmp	r3, #7
 8004bce:	d9e5      	bls.n	8004b9c <ssd1306_UpdateScreen+0xc>
    }
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20019980 	.word	0x20019980

08004be0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
 8004bea:	460b      	mov	r3, r1
 8004bec:	71bb      	strb	r3, [r7, #6]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	db3d      	blt.n	8004c76 <ssd1306_DrawPixel+0x96>
 8004bfa:	79bb      	ldrb	r3, [r7, #6]
 8004bfc:	2b3f      	cmp	r3, #63	; 0x3f
 8004bfe:	d83a      	bhi.n	8004c76 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004c00:	797b      	ldrb	r3, [r7, #5]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d11a      	bne.n	8004c3c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004c06:	79fa      	ldrb	r2, [r7, #7]
 8004c08:	79bb      	ldrb	r3, [r7, #6]
 8004c0a:	08db      	lsrs	r3, r3, #3
 8004c0c:	b2d8      	uxtb	r0, r3
 8004c0e:	4603      	mov	r3, r0
 8004c10:	01db      	lsls	r3, r3, #7
 8004c12:	4413      	add	r3, r2
 8004c14:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <ssd1306_DrawPixel+0xa4>)
 8004c16:	5cd3      	ldrb	r3, [r2, r3]
 8004c18:	b25a      	sxtb	r2, r3
 8004c1a:	79bb      	ldrb	r3, [r7, #6]
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	2101      	movs	r1, #1
 8004c22:	fa01 f303 	lsl.w	r3, r1, r3
 8004c26:	b25b      	sxtb	r3, r3
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	b259      	sxtb	r1, r3
 8004c2c:	79fa      	ldrb	r2, [r7, #7]
 8004c2e:	4603      	mov	r3, r0
 8004c30:	01db      	lsls	r3, r3, #7
 8004c32:	4413      	add	r3, r2
 8004c34:	b2c9      	uxtb	r1, r1
 8004c36:	4a13      	ldr	r2, [pc, #76]	; (8004c84 <ssd1306_DrawPixel+0xa4>)
 8004c38:	54d1      	strb	r1, [r2, r3]
 8004c3a:	e01d      	b.n	8004c78 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004c3c:	79fa      	ldrb	r2, [r7, #7]
 8004c3e:	79bb      	ldrb	r3, [r7, #6]
 8004c40:	08db      	lsrs	r3, r3, #3
 8004c42:	b2d8      	uxtb	r0, r3
 8004c44:	4603      	mov	r3, r0
 8004c46:	01db      	lsls	r3, r3, #7
 8004c48:	4413      	add	r3, r2
 8004c4a:	4a0e      	ldr	r2, [pc, #56]	; (8004c84 <ssd1306_DrawPixel+0xa4>)
 8004c4c:	5cd3      	ldrb	r3, [r2, r3]
 8004c4e:	b25a      	sxtb	r2, r3
 8004c50:	79bb      	ldrb	r3, [r7, #6]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	2101      	movs	r1, #1
 8004c58:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5c:	b25b      	sxtb	r3, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	b25b      	sxtb	r3, r3
 8004c62:	4013      	ands	r3, r2
 8004c64:	b259      	sxtb	r1, r3
 8004c66:	79fa      	ldrb	r2, [r7, #7]
 8004c68:	4603      	mov	r3, r0
 8004c6a:	01db      	lsls	r3, r3, #7
 8004c6c:	4413      	add	r3, r2
 8004c6e:	b2c9      	uxtb	r1, r1
 8004c70:	4a04      	ldr	r2, [pc, #16]	; (8004c84 <ssd1306_DrawPixel+0xa4>)
 8004c72:	54d1      	strb	r1, [r2, r3]
 8004c74:	e000      	b.n	8004c78 <ssd1306_DrawPixel+0x98>
        return;
 8004c76:	bf00      	nop
    }
}
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20019980 	.word	0x20019980

08004c88 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b089      	sub	sp, #36	; 0x24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4604      	mov	r4, r0
 8004c90:	1d38      	adds	r0, r7, #4
 8004c92:	e880 0006 	stmia.w	r0, {r1, r2}
 8004c96:	461a      	mov	r2, r3
 8004c98:	4623      	mov	r3, r4
 8004c9a:	73fb      	strb	r3, [r7, #15]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	2b1f      	cmp	r3, #31
 8004ca4:	d902      	bls.n	8004cac <ssd1306_WriteChar+0x24>
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	2b7e      	cmp	r3, #126	; 0x7e
 8004caa:	d901      	bls.n	8004cb0 <ssd1306_WriteChar+0x28>
        return 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	e06d      	b.n	8004d8c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004cb0:	4b38      	ldr	r3, [pc, #224]	; (8004d94 <ssd1306_WriteChar+0x10c>)
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	793b      	ldrb	r3, [r7, #4]
 8004cb8:	4413      	add	r3, r2
 8004cba:	2b80      	cmp	r3, #128	; 0x80
 8004cbc:	dc06      	bgt.n	8004ccc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004cbe:	4b35      	ldr	r3, [pc, #212]	; (8004d94 <ssd1306_WriteChar+0x10c>)
 8004cc0:	885b      	ldrh	r3, [r3, #2]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	797b      	ldrb	r3, [r7, #5]
 8004cc6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	dd01      	ble.n	8004cd0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	e05d      	b.n	8004d8c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	e04c      	b.n	8004d70 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	3b20      	subs	r3, #32
 8004cdc:	7979      	ldrb	r1, [r7, #5]
 8004cde:	fb01 f303 	mul.w	r3, r1, r3
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	440b      	add	r3, r1
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	4413      	add	r3, r2
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61bb      	str	r3, [r7, #24]
 8004cf4:	e034      	b.n	8004d60 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d012      	beq.n	8004d2c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004d06:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <ssd1306_WriteChar+0x10c>)
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	4413      	add	r3, r2
 8004d12:	b2d8      	uxtb	r0, r3
 8004d14:	4b1f      	ldr	r3, [pc, #124]	; (8004d94 <ssd1306_WriteChar+0x10c>)
 8004d16:	885b      	ldrh	r3, [r3, #2]
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	4413      	add	r3, r2
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	7bba      	ldrb	r2, [r7, #14]
 8004d24:	4619      	mov	r1, r3
 8004d26:	f7ff ff5b 	bl	8004be0 <ssd1306_DrawPixel>
 8004d2a:	e016      	b.n	8004d5a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004d2c:	4b19      	ldr	r3, [pc, #100]	; (8004d94 <ssd1306_WriteChar+0x10c>)
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	4413      	add	r3, r2
 8004d38:	b2d8      	uxtb	r0, r3
 8004d3a:	4b16      	ldr	r3, [pc, #88]	; (8004d94 <ssd1306_WriteChar+0x10c>)
 8004d3c:	885b      	ldrh	r3, [r3, #2]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	4413      	add	r3, r2
 8004d46:	b2d9      	uxtb	r1, r3
 8004d48:	7bbb      	ldrb	r3, [r7, #14]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	bf0c      	ite	eq
 8004d4e:	2301      	moveq	r3, #1
 8004d50:	2300      	movne	r3, #0
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	f7ff ff43 	bl	8004be0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	61bb      	str	r3, [r7, #24]
 8004d60:	793b      	ldrb	r3, [r7, #4]
 8004d62:	461a      	mov	r2, r3
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d3c5      	bcc.n	8004cf6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	61fb      	str	r3, [r7, #28]
 8004d70:	797b      	ldrb	r3, [r7, #5]
 8004d72:	461a      	mov	r2, r3
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d3ad      	bcc.n	8004cd6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <ssd1306_WriteChar+0x10c>)
 8004d7c:	881a      	ldrh	r2, [r3, #0]
 8004d7e:	793b      	ldrb	r3, [r7, #4]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	4413      	add	r3, r2
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <ssd1306_WriteChar+0x10c>)
 8004d88:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3724      	adds	r7, #36	; 0x24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd90      	pop	{r4, r7, pc}
 8004d94:	20019d80 	.word	0x20019d80

08004d98 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	1d38      	adds	r0, r7, #4
 8004da2:	e880 0006 	stmia.w	r0, {r1, r2}
 8004da6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8004da8:	e012      	b.n	8004dd0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	7818      	ldrb	r0, [r3, #0]
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	1d3a      	adds	r2, r7, #4
 8004db2:	ca06      	ldmia	r2, {r1, r2}
 8004db4:	f7ff ff68 	bl	8004c88 <ssd1306_WriteChar>
 8004db8:	4603      	mov	r3, r0
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d002      	beq.n	8004dca <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	e008      	b.n	8004ddc <ssd1306_WriteString+0x44>
        }
        str++;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e8      	bne.n	8004daa <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	781b      	ldrb	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	4603      	mov	r3, r0
 8004dec:	460a      	mov	r2, r1
 8004dee:	71fb      	strb	r3, [r7, #7]
 8004df0:	4613      	mov	r3, r2
 8004df2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <ssd1306_SetCursor+0x2c>)
 8004dfa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004dfc:	79bb      	ldrb	r3, [r7, #6]
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	4b03      	ldr	r3, [pc, #12]	; (8004e10 <ssd1306_SetCursor+0x2c>)
 8004e02:	805a      	strh	r2, [r3, #2]
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	20019d80 	.word	0x20019d80

08004e14 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004e1e:	2381      	movs	r3, #129	; 0x81
 8004e20:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff fdf3 	bl	8004a10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff fdef 	bl	8004a10 <ssd1306_WriteCommand>
}
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004e4c:	23af      	movs	r3, #175	; 0xaf
 8004e4e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004e50:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <ssd1306_SetDisplayOn+0x38>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	715a      	strb	r2, [r3, #5]
 8004e56:	e004      	b.n	8004e62 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004e58:	23ae      	movs	r3, #174	; 0xae
 8004e5a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <ssd1306_SetDisplayOn+0x38>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fdd3 	bl	8004a10 <ssd1306_WriteCommand>
}
 8004e6a:	bf00      	nop
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20019d80 	.word	0x20019d80

08004e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e7c:	4b0e      	ldr	r3, [pc, #56]	; (8004eb8 <HAL_Init+0x40>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a0d      	ldr	r2, [pc, #52]	; (8004eb8 <HAL_Init+0x40>)
 8004e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_Init+0x40>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a0a      	ldr	r2, [pc, #40]	; (8004eb8 <HAL_Init+0x40>)
 8004e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e94:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <HAL_Init+0x40>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a07      	ldr	r2, [pc, #28]	; (8004eb8 <HAL_Init+0x40>)
 8004e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ea0:	2003      	movs	r0, #3
 8004ea2:	f000 fd0d 	bl	80058c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ea6:	200f      	movs	r0, #15
 8004ea8:	f000 f808 	bl	8004ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004eac:	f7fe fcbe 	bl	800382c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40023c00 	.word	0x40023c00

08004ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ec4:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <HAL_InitTick+0x54>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <HAL_InitTick+0x58>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fd25 	bl	800592a <HAL_SYSTICK_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e00e      	b.n	8004f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b0f      	cmp	r3, #15
 8004eee:	d80a      	bhi.n	8004f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef8:	f000 fced 	bl	80058d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004efc:	4a06      	ldr	r2, [pc, #24]	; (8004f18 <HAL_InitTick+0x5c>)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	e000      	b.n	8004f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	200008a0 	.word	0x200008a0
 8004f14:	200008c4 	.word	0x200008c4
 8004f18:	200008c0 	.word	0x200008c0

08004f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_IncTick+0x20>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_IncTick+0x24>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <HAL_IncTick+0x24>)
 8004f2e:	6013      	str	r3, [r2, #0]
}
 8004f30:	bf00      	nop
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	200008c4 	.word	0x200008c4
 8004f40:	20019d88 	.word	0x20019d88

08004f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  return uwTick;
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <HAL_GetTick+0x14>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	20019d88 	.word	0x20019d88

08004f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f64:	f7ff ffee 	bl	8004f44 <HAL_GetTick>
 8004f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d005      	beq.n	8004f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <HAL_Delay+0x44>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f82:	bf00      	nop
 8004f84:	f7ff ffde 	bl	8004f44 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d8f7      	bhi.n	8004f84 <HAL_Delay+0x28>
  {
  }
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	200008c4 	.word	0x200008c4

08004fa4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e033      	b.n	8005022 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fe fc5a 	bl	800387c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d118      	bne.n	8005014 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004fea:	f023 0302 	bic.w	r3, r3, #2
 8004fee:	f043 0202 	orr.w	r2, r3, #2
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fa96 	bl	8005528 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	f043 0201 	orr.w	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	641a      	str	r2, [r3, #64]	; 0x40
 8005012:	e001      	b.n	8005018 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_ADC_Start+0x1a>
 8005042:	2302      	movs	r3, #2
 8005044:	e097      	b.n	8005176 <HAL_ADC_Start+0x14a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b01      	cmp	r3, #1
 800505a:	d018      	beq.n	800508e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800506c:	4b45      	ldr	r3, [pc, #276]	; (8005184 <HAL_ADC_Start+0x158>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a45      	ldr	r2, [pc, #276]	; (8005188 <HAL_ADC_Start+0x15c>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	0c9a      	lsrs	r2, r3, #18
 8005078:	4613      	mov	r3, r2
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	4413      	add	r3, r2
 800507e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005080:	e002      	b.n	8005088 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	3b01      	subs	r3, #1
 8005086:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f9      	bne.n	8005082 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b01      	cmp	r3, #1
 800509a:	d15f      	bne.n	800515c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050da:	d106      	bne.n	80050ea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e0:	f023 0206 	bic.w	r2, r3, #6
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	645a      	str	r2, [r3, #68]	; 0x44
 80050e8:	e002      	b.n	80050f0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050f8:	4b24      	ldr	r3, [pc, #144]	; (800518c <HAL_ADC_Start+0x160>)
 80050fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005104:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10f      	bne.n	8005132 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d129      	bne.n	8005174 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	e020      	b.n	8005174 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a16      	ldr	r2, [pc, #88]	; (8005190 <HAL_ADC_Start+0x164>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d11b      	bne.n	8005174 <HAL_ADC_Start+0x148>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d114      	bne.n	8005174 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005158:	609a      	str	r2, [r3, #8]
 800515a:	e00b      	b.n	8005174 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	f043 0210 	orr.w	r2, r3, #16
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516c:	f043 0201 	orr.w	r2, r3, #1
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	200008a0 	.word	0x200008a0
 8005188:	431bde83 	.word	0x431bde83
 800518c:	40012300 	.word	0x40012300
 8005190:	40012000 	.word	0x40012000

08005194 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b0:	d113      	bne.n	80051da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80051bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c0:	d10b      	bne.n	80051da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e063      	b.n	80052a2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80051da:	f7ff feb3 	bl	8004f44 <HAL_GetTick>
 80051de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80051e0:	e021      	b.n	8005226 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e8:	d01d      	beq.n	8005226 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <HAL_ADC_PollForConversion+0x6c>
 80051f0:	f7ff fea8 	bl	8004f44 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d212      	bcs.n	8005226 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b02      	cmp	r3, #2
 800520c:	d00b      	beq.n	8005226 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f043 0204 	orr.w	r2, r3, #4
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e03d      	b.n	80052a2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b02      	cmp	r3, #2
 8005232:	d1d6      	bne.n	80051e2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0212 	mvn.w	r2, #18
 800523c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d123      	bne.n	80052a0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800525c:	2b00      	cmp	r3, #0
 800525e:	d11f      	bne.n	80052a0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800526a:	2b00      	cmp	r3, #0
 800526c:	d006      	beq.n	800527c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005278:	2b00      	cmp	r3, #0
 800527a:	d111      	bne.n	80052a0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	f043 0201 	orr.w	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_ADC_ConfigChannel+0x1c>
 80052dc:	2302      	movs	r3, #2
 80052de:	e113      	b.n	8005508 <HAL_ADC_ConfigChannel+0x244>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b09      	cmp	r3, #9
 80052ee:	d925      	bls.n	800533c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68d9      	ldr	r1, [r3, #12]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	4613      	mov	r3, r2
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	4413      	add	r3, r2
 8005304:	3b1e      	subs	r3, #30
 8005306:	2207      	movs	r2, #7
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	43da      	mvns	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	400a      	ands	r2, r1
 8005314:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68d9      	ldr	r1, [r3, #12]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	b29b      	uxth	r3, r3
 8005326:	4618      	mov	r0, r3
 8005328:	4603      	mov	r3, r0
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	4403      	add	r3, r0
 800532e:	3b1e      	subs	r3, #30
 8005330:	409a      	lsls	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	60da      	str	r2, [r3, #12]
 800533a:	e022      	b.n	8005382 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6919      	ldr	r1, [r3, #16]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	461a      	mov	r2, r3
 800534a:	4613      	mov	r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	4413      	add	r3, r2
 8005350:	2207      	movs	r2, #7
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
 8005356:	43da      	mvns	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	400a      	ands	r2, r1
 800535e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6919      	ldr	r1, [r3, #16]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	b29b      	uxth	r3, r3
 8005370:	4618      	mov	r0, r3
 8005372:	4603      	mov	r3, r0
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	4403      	add	r3, r0
 8005378:	409a      	lsls	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b06      	cmp	r3, #6
 8005388:	d824      	bhi.n	80053d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	3b05      	subs	r3, #5
 800539c:	221f      	movs	r2, #31
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	43da      	mvns	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	400a      	ands	r2, r1
 80053aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	4618      	mov	r0, r3
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	4613      	mov	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	3b05      	subs	r3, #5
 80053c6:	fa00 f203 	lsl.w	r2, r0, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	635a      	str	r2, [r3, #52]	; 0x34
 80053d2:	e04c      	b.n	800546e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b0c      	cmp	r3, #12
 80053da:	d824      	bhi.n	8005426 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	3b23      	subs	r3, #35	; 0x23
 80053ee:	221f      	movs	r2, #31
 80053f0:	fa02 f303 	lsl.w	r3, r2, r3
 80053f4:	43da      	mvns	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	400a      	ands	r2, r1
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	b29b      	uxth	r3, r3
 800540a:	4618      	mov	r0, r3
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	3b23      	subs	r3, #35	; 0x23
 8005418:	fa00 f203 	lsl.w	r2, r0, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
 8005424:	e023      	b.n	800546e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	3b41      	subs	r3, #65	; 0x41
 8005438:	221f      	movs	r2, #31
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	43da      	mvns	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	400a      	ands	r2, r1
 8005446:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	4618      	mov	r0, r3
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	3b41      	subs	r3, #65	; 0x41
 8005462:	fa00 f203 	lsl.w	r2, r0, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800546e:	4b29      	ldr	r3, [pc, #164]	; (8005514 <HAL_ADC_ConfigChannel+0x250>)
 8005470:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a28      	ldr	r2, [pc, #160]	; (8005518 <HAL_ADC_ConfigChannel+0x254>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d10f      	bne.n	800549c <HAL_ADC_ConfigChannel+0x1d8>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b12      	cmp	r3, #18
 8005482:	d10b      	bne.n	800549c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <HAL_ADC_ConfigChannel+0x254>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d12b      	bne.n	80054fe <HAL_ADC_ConfigChannel+0x23a>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1c      	ldr	r2, [pc, #112]	; (800551c <HAL_ADC_ConfigChannel+0x258>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d003      	beq.n	80054b8 <HAL_ADC_ConfigChannel+0x1f4>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b11      	cmp	r3, #17
 80054b6:	d122      	bne.n	80054fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a11      	ldr	r2, [pc, #68]	; (800551c <HAL_ADC_ConfigChannel+0x258>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d111      	bne.n	80054fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80054da:	4b11      	ldr	r3, [pc, #68]	; (8005520 <HAL_ADC_ConfigChannel+0x25c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a11      	ldr	r2, [pc, #68]	; (8005524 <HAL_ADC_ConfigChannel+0x260>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	0c9a      	lsrs	r2, r3, #18
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80054f0:	e002      	b.n	80054f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f9      	bne.n	80054f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	40012300 	.word	0x40012300
 8005518:	40012000 	.word	0x40012000
 800551c:	10000012 	.word	0x10000012
 8005520:	200008a0 	.word	0x200008a0
 8005524:	431bde83 	.word	0x431bde83

08005528 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005530:	4b79      	ldr	r3, [pc, #484]	; (8005718 <ADC_Init+0x1f0>)
 8005532:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	431a      	orrs	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800555c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6859      	ldr	r1, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	021a      	lsls	r2, r3, #8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005580:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6859      	ldr	r1, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689a      	ldr	r2, [r3, #8]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6899      	ldr	r1, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ba:	4a58      	ldr	r2, [pc, #352]	; (800571c <ADC_Init+0x1f4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d022      	beq.n	8005606 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6899      	ldr	r1, [r3, #8]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6899      	ldr	r1, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	609a      	str	r2, [r3, #8]
 8005604:	e00f      	b.n	8005626 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005624:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0202 	bic.w	r2, r2, #2
 8005634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6899      	ldr	r1, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	7e1b      	ldrb	r3, [r3, #24]
 8005640:	005a      	lsls	r2, r3, #1
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d01b      	beq.n	800568c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005662:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005672:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6859      	ldr	r1, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	3b01      	subs	r3, #1
 8005680:	035a      	lsls	r2, r3, #13
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	605a      	str	r2, [r3, #4]
 800568a:	e007      	b.n	800569c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800569a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80056aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	051a      	lsls	r2, r3, #20
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6899      	ldr	r1, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056de:	025a      	lsls	r2, r3, #9
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6899      	ldr	r1, [r3, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	029a      	lsls	r2, r3, #10
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	609a      	str	r2, [r3, #8]
}
 800570c:	bf00      	nop
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	40012300 	.word	0x40012300
 800571c:	0f000001 	.word	0x0f000001

08005720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <__NVIC_SetPriorityGrouping+0x44>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800573c:	4013      	ands	r3, r2
 800573e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800574c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005752:	4a04      	ldr	r2, [pc, #16]	; (8005764 <__NVIC_SetPriorityGrouping+0x44>)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	60d3      	str	r3, [r2, #12]
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	e000ed00 	.word	0xe000ed00

08005768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800576c:	4b04      	ldr	r3, [pc, #16]	; (8005780 <__NVIC_GetPriorityGrouping+0x18>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	0a1b      	lsrs	r3, r3, #8
 8005772:	f003 0307 	and.w	r3, r3, #7
}
 8005776:	4618      	mov	r0, r3
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	e000ed00 	.word	0xe000ed00

08005784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	4603      	mov	r3, r0
 800578c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800578e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005792:	2b00      	cmp	r3, #0
 8005794:	db0b      	blt.n	80057ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005796:	79fb      	ldrb	r3, [r7, #7]
 8005798:	f003 021f 	and.w	r2, r3, #31
 800579c:	4907      	ldr	r1, [pc, #28]	; (80057bc <__NVIC_EnableIRQ+0x38>)
 800579e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	2001      	movs	r0, #1
 80057a6:	fa00 f202 	lsl.w	r2, r0, r2
 80057aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	e000e100 	.word	0xe000e100

080057c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	6039      	str	r1, [r7, #0]
 80057ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	db0a      	blt.n	80057ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	490c      	ldr	r1, [pc, #48]	; (800580c <__NVIC_SetPriority+0x4c>)
 80057da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057de:	0112      	lsls	r2, r2, #4
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	440b      	add	r3, r1
 80057e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057e8:	e00a      	b.n	8005800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	4908      	ldr	r1, [pc, #32]	; (8005810 <__NVIC_SetPriority+0x50>)
 80057f0:	79fb      	ldrb	r3, [r7, #7]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	3b04      	subs	r3, #4
 80057f8:	0112      	lsls	r2, r2, #4
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	440b      	add	r3, r1
 80057fe:	761a      	strb	r2, [r3, #24]
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	e000e100 	.word	0xe000e100
 8005810:	e000ed00 	.word	0xe000ed00

08005814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005814:	b480      	push	{r7}
 8005816:	b089      	sub	sp, #36	; 0x24
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f1c3 0307 	rsb	r3, r3, #7
 800582e:	2b04      	cmp	r3, #4
 8005830:	bf28      	it	cs
 8005832:	2304      	movcs	r3, #4
 8005834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	3304      	adds	r3, #4
 800583a:	2b06      	cmp	r3, #6
 800583c:	d902      	bls.n	8005844 <NVIC_EncodePriority+0x30>
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	3b03      	subs	r3, #3
 8005842:	e000      	b.n	8005846 <NVIC_EncodePriority+0x32>
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005848:	f04f 32ff 	mov.w	r2, #4294967295
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	fa02 f303 	lsl.w	r3, r2, r3
 8005852:	43da      	mvns	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	401a      	ands	r2, r3
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800585c:	f04f 31ff 	mov.w	r1, #4294967295
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	fa01 f303 	lsl.w	r3, r1, r3
 8005866:	43d9      	mvns	r1, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800586c:	4313      	orrs	r3, r2
         );
}
 800586e:	4618      	mov	r0, r3
 8005870:	3724      	adds	r7, #36	; 0x24
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3b01      	subs	r3, #1
 8005888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800588c:	d301      	bcc.n	8005892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800588e:	2301      	movs	r3, #1
 8005890:	e00f      	b.n	80058b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005892:	4a0a      	ldr	r2, [pc, #40]	; (80058bc <SysTick_Config+0x40>)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3b01      	subs	r3, #1
 8005898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800589a:	210f      	movs	r1, #15
 800589c:	f04f 30ff 	mov.w	r0, #4294967295
 80058a0:	f7ff ff8e 	bl	80057c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <SysTick_Config+0x40>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058aa:	4b04      	ldr	r3, [pc, #16]	; (80058bc <SysTick_Config+0x40>)
 80058ac:	2207      	movs	r2, #7
 80058ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	e000e010 	.word	0xe000e010

080058c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff ff29 	bl	8005720 <__NVIC_SetPriorityGrouping>
}
 80058ce:	bf00      	nop
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b086      	sub	sp, #24
 80058da:	af00      	add	r7, sp, #0
 80058dc:	4603      	mov	r3, r0
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	607a      	str	r2, [r7, #4]
 80058e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058e8:	f7ff ff3e 	bl	8005768 <__NVIC_GetPriorityGrouping>
 80058ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	6978      	ldr	r0, [r7, #20]
 80058f4:	f7ff ff8e 	bl	8005814 <NVIC_EncodePriority>
 80058f8:	4602      	mov	r2, r0
 80058fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058fe:	4611      	mov	r1, r2
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff ff5d 	bl	80057c0 <__NVIC_SetPriority>
}
 8005906:	bf00      	nop
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	4603      	mov	r3, r0
 8005916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff ff31 	bl	8005784 <__NVIC_EnableIRQ>
}
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7ff ffa2 	bl	800587c <SysTick_Config>
 8005938:	4603      	mov	r3, r0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005944:	b480      	push	{r7}
 8005946:	b089      	sub	sp, #36	; 0x24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005956:	2300      	movs	r3, #0
 8005958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	e159      	b.n	8005c14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005960:	2201      	movs	r2, #1
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4013      	ands	r3, r2
 8005972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	429a      	cmp	r2, r3
 800597a:	f040 8148 	bne.w	8005c0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b01      	cmp	r3, #1
 8005988:	d005      	beq.n	8005996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005992:	2b02      	cmp	r3, #2
 8005994:	d130      	bne.n	80059f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	2203      	movs	r2, #3
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	43db      	mvns	r3, r3
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	4013      	ands	r3, r2
 80059ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059cc:	2201      	movs	r2, #1
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	43db      	mvns	r3, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4013      	ands	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	f003 0201 	and.w	r2, r3, #1
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f003 0303 	and.w	r3, r3, #3
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d017      	beq.n	8005a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	2203      	movs	r2, #3
 8005a10:	fa02 f303 	lsl.w	r3, r2, r3
 8005a14:	43db      	mvns	r3, r3
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d123      	bne.n	8005a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	08da      	lsrs	r2, r3, #3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3208      	adds	r2, #8
 8005a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	220f      	movs	r2, #15
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	4013      	ands	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	691a      	ldr	r2, [r3, #16]
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	08da      	lsrs	r2, r3, #3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3208      	adds	r2, #8
 8005a82:	69b9      	ldr	r1, [r7, #24]
 8005a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	2203      	movs	r2, #3
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f003 0203 	and.w	r2, r3, #3
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 80a2 	beq.w	8005c0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	4b57      	ldr	r3, [pc, #348]	; (8005c2c <HAL_GPIO_Init+0x2e8>)
 8005ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad2:	4a56      	ldr	r2, [pc, #344]	; (8005c2c <HAL_GPIO_Init+0x2e8>)
 8005ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8005ada:	4b54      	ldr	r3, [pc, #336]	; (8005c2c <HAL_GPIO_Init+0x2e8>)
 8005adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ae6:	4a52      	ldr	r2, [pc, #328]	; (8005c30 <HAL_GPIO_Init+0x2ec>)
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	089b      	lsrs	r3, r3, #2
 8005aec:	3302      	adds	r3, #2
 8005aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	220f      	movs	r2, #15
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	43db      	mvns	r3, r3
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	4013      	ands	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a49      	ldr	r2, [pc, #292]	; (8005c34 <HAL_GPIO_Init+0x2f0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d019      	beq.n	8005b46 <HAL_GPIO_Init+0x202>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a48      	ldr	r2, [pc, #288]	; (8005c38 <HAL_GPIO_Init+0x2f4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d013      	beq.n	8005b42 <HAL_GPIO_Init+0x1fe>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a47      	ldr	r2, [pc, #284]	; (8005c3c <HAL_GPIO_Init+0x2f8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d00d      	beq.n	8005b3e <HAL_GPIO_Init+0x1fa>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a46      	ldr	r2, [pc, #280]	; (8005c40 <HAL_GPIO_Init+0x2fc>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d007      	beq.n	8005b3a <HAL_GPIO_Init+0x1f6>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a45      	ldr	r2, [pc, #276]	; (8005c44 <HAL_GPIO_Init+0x300>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d101      	bne.n	8005b36 <HAL_GPIO_Init+0x1f2>
 8005b32:	2304      	movs	r3, #4
 8005b34:	e008      	b.n	8005b48 <HAL_GPIO_Init+0x204>
 8005b36:	2307      	movs	r3, #7
 8005b38:	e006      	b.n	8005b48 <HAL_GPIO_Init+0x204>
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e004      	b.n	8005b48 <HAL_GPIO_Init+0x204>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e002      	b.n	8005b48 <HAL_GPIO_Init+0x204>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <HAL_GPIO_Init+0x204>
 8005b46:	2300      	movs	r3, #0
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	f002 0203 	and.w	r2, r2, #3
 8005b4e:	0092      	lsls	r2, r2, #2
 8005b50:	4093      	lsls	r3, r2
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b58:	4935      	ldr	r1, [pc, #212]	; (8005c30 <HAL_GPIO_Init+0x2ec>)
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	089b      	lsrs	r3, r3, #2
 8005b5e:	3302      	adds	r3, #2
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b66:	4b38      	ldr	r3, [pc, #224]	; (8005c48 <HAL_GPIO_Init+0x304>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	43db      	mvns	r3, r3
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	4013      	ands	r3, r2
 8005b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b8a:	4a2f      	ldr	r2, [pc, #188]	; (8005c48 <HAL_GPIO_Init+0x304>)
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b90:	4b2d      	ldr	r3, [pc, #180]	; (8005c48 <HAL_GPIO_Init+0x304>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	43db      	mvns	r3, r3
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005bb4:	4a24      	ldr	r2, [pc, #144]	; (8005c48 <HAL_GPIO_Init+0x304>)
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005bba:	4b23      	ldr	r3, [pc, #140]	; (8005c48 <HAL_GPIO_Init+0x304>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005bde:	4a1a      	ldr	r2, [pc, #104]	; (8005c48 <HAL_GPIO_Init+0x304>)
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005be4:	4b18      	ldr	r3, [pc, #96]	; (8005c48 <HAL_GPIO_Init+0x304>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	43db      	mvns	r3, r3
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c08:	4a0f      	ldr	r2, [pc, #60]	; (8005c48 <HAL_GPIO_Init+0x304>)
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	3301      	adds	r3, #1
 8005c12:	61fb      	str	r3, [r7, #28]
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	2b0f      	cmp	r3, #15
 8005c18:	f67f aea2 	bls.w	8005960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	3724      	adds	r7, #36	; 0x24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40023800 	.word	0x40023800
 8005c30:	40013800 	.word	0x40013800
 8005c34:	40020000 	.word	0x40020000
 8005c38:	40020400 	.word	0x40020400
 8005c3c:	40020800 	.word	0x40020800
 8005c40:	40020c00 	.word	0x40020c00
 8005c44:	40021000 	.word	0x40021000
 8005c48:	40013c00 	.word	0x40013c00

08005c4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	460b      	mov	r3, r1
 8005c56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	887b      	ldrh	r3, [r7, #2]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c64:	2301      	movs	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
 8005c68:	e001      	b.n	8005c6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	807b      	strh	r3, [r7, #2]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c8c:	787b      	ldrb	r3, [r7, #1]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c92:	887a      	ldrh	r2, [r7, #2]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c98:	e003      	b.n	8005ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c9a:	887b      	ldrh	r3, [r7, #2]
 8005c9c:	041a      	lsls	r2, r3, #16
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	619a      	str	r2, [r3, #24]
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005cba:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cbc:	695a      	ldr	r2, [r3, #20]
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d006      	beq.n	8005cd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005cc6:	4a05      	ldr	r2, [pc, #20]	; (8005cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cc8:	88fb      	ldrh	r3, [r7, #6]
 8005cca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ccc:	88fb      	ldrh	r3, [r7, #6]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fb fe3e 	bl	8001950 <HAL_GPIO_EXTI_Callback>
  }
}
 8005cd4:	bf00      	nop
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40013c00 	.word	0x40013c00

08005ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e12b      	b.n	8005f4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fd fdfc 	bl	8003904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2224      	movs	r2, #36	; 0x24
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d44:	f001 fd22 	bl	800778c <HAL_RCC_GetPCLK1Freq>
 8005d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	4a81      	ldr	r2, [pc, #516]	; (8005f54 <HAL_I2C_Init+0x274>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d807      	bhi.n	8005d64 <HAL_I2C_Init+0x84>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4a80      	ldr	r2, [pc, #512]	; (8005f58 <HAL_I2C_Init+0x278>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	bf94      	ite	ls
 8005d5c:	2301      	movls	r3, #1
 8005d5e:	2300      	movhi	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	e006      	b.n	8005d72 <HAL_I2C_Init+0x92>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4a7d      	ldr	r2, [pc, #500]	; (8005f5c <HAL_I2C_Init+0x27c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	bf94      	ite	ls
 8005d6c:	2301      	movls	r3, #1
 8005d6e:	2300      	movhi	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e0e7      	b.n	8005f4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4a78      	ldr	r2, [pc, #480]	; (8005f60 <HAL_I2C_Init+0x280>)
 8005d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d82:	0c9b      	lsrs	r3, r3, #18
 8005d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	4a6a      	ldr	r2, [pc, #424]	; (8005f54 <HAL_I2C_Init+0x274>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d802      	bhi.n	8005db4 <HAL_I2C_Init+0xd4>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	3301      	adds	r3, #1
 8005db2:	e009      	b.n	8005dc8 <HAL_I2C_Init+0xe8>
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005dba:	fb02 f303 	mul.w	r3, r2, r3
 8005dbe:	4a69      	ldr	r2, [pc, #420]	; (8005f64 <HAL_I2C_Init+0x284>)
 8005dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc4:	099b      	lsrs	r3, r3, #6
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005dda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	495c      	ldr	r1, [pc, #368]	; (8005f54 <HAL_I2C_Init+0x274>)
 8005de4:	428b      	cmp	r3, r1
 8005de6:	d819      	bhi.n	8005e1c <HAL_I2C_Init+0x13c>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	1e59      	subs	r1, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005df6:	1c59      	adds	r1, r3, #1
 8005df8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005dfc:	400b      	ands	r3, r1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <HAL_I2C_Init+0x138>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1e59      	subs	r1, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e10:	3301      	adds	r3, #1
 8005e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e16:	e051      	b.n	8005ebc <HAL_I2C_Init+0x1dc>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	e04f      	b.n	8005ebc <HAL_I2C_Init+0x1dc>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d111      	bne.n	8005e48 <HAL_I2C_Init+0x168>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	1e58      	subs	r0, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6859      	ldr	r1, [r3, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	440b      	add	r3, r1
 8005e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e36:	3301      	adds	r3, #1
 8005e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	bf0c      	ite	eq
 8005e40:	2301      	moveq	r3, #1
 8005e42:	2300      	movne	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	e012      	b.n	8005e6e <HAL_I2C_Init+0x18e>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	1e58      	subs	r0, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6859      	ldr	r1, [r3, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	440b      	add	r3, r1
 8005e56:	0099      	lsls	r1, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e5e:	3301      	adds	r3, #1
 8005e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	bf0c      	ite	eq
 8005e68:	2301      	moveq	r3, #1
 8005e6a:	2300      	movne	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_I2C_Init+0x196>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e022      	b.n	8005ebc <HAL_I2C_Init+0x1dc>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10e      	bne.n	8005e9c <HAL_I2C_Init+0x1bc>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	1e58      	subs	r0, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6859      	ldr	r1, [r3, #4]
 8005e86:	460b      	mov	r3, r1
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	440b      	add	r3, r1
 8005e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e90:	3301      	adds	r3, #1
 8005e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e9a:	e00f      	b.n	8005ebc <HAL_I2C_Init+0x1dc>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	1e58      	subs	r0, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6859      	ldr	r1, [r3, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	0099      	lsls	r1, r3, #2
 8005eac:	440b      	add	r3, r1
 8005eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	6809      	ldr	r1, [r1, #0]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69da      	ldr	r2, [r3, #28]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6911      	ldr	r1, [r2, #16]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	68d2      	ldr	r2, [r2, #12]
 8005ef6:	4311      	orrs	r1, r2
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695a      	ldr	r2, [r3, #20]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	000186a0 	.word	0x000186a0
 8005f58:	001e847f 	.word	0x001e847f
 8005f5c:	003d08ff 	.word	0x003d08ff
 8005f60:	431bde83 	.word	0x431bde83
 8005f64:	10624dd3 	.word	0x10624dd3

08005f68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	607a      	str	r2, [r7, #4]
 8005f72:	461a      	mov	r2, r3
 8005f74:	460b      	mov	r3, r1
 8005f76:	817b      	strh	r3, [r7, #10]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f7c:	f7fe ffe2 	bl	8004f44 <HAL_GetTick>
 8005f80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b20      	cmp	r3, #32
 8005f8c:	f040 80e0 	bne.w	8006150 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	2319      	movs	r3, #25
 8005f96:	2201      	movs	r2, #1
 8005f98:	4970      	ldr	r1, [pc, #448]	; (800615c <HAL_I2C_Master_Transmit+0x1f4>)
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fde8 	bl	8006b70 <I2C_WaitOnFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e0d3      	b.n	8006152 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_I2C_Master_Transmit+0x50>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e0cc      	b.n	8006152 <HAL_I2C_Master_Transmit+0x1ea>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d007      	beq.n	8005fde <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0201 	orr.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2221      	movs	r2, #33	; 0x21
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2210      	movs	r2, #16
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	893a      	ldrh	r2, [r7, #8]
 800600e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4a50      	ldr	r2, [pc, #320]	; (8006160 <HAL_I2C_Master_Transmit+0x1f8>)
 800601e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006020:	8979      	ldrh	r1, [r7, #10]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	6a3a      	ldr	r2, [r7, #32]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 fbbc 	bl	80067a4 <I2C_MasterRequestWrite>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e08d      	b.n	8006152 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006036:	2300      	movs	r3, #0
 8006038:	613b      	str	r3, [r7, #16]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	613b      	str	r3, [r7, #16]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800604c:	e066      	b.n	800611c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	6a39      	ldr	r1, [r7, #32]
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fe62 	bl	8006d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00d      	beq.n	800607a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	2b04      	cmp	r3, #4
 8006064:	d107      	bne.n	8006076 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006074:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e06b      	b.n	8006152 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	781a      	ldrb	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d11b      	bne.n	80060f0 <HAL_I2C_Master_Transmit+0x188>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d017      	beq.n	80060f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	781a      	ldrb	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060da:	b29b      	uxth	r3, r3
 80060dc:	3b01      	subs	r3, #1
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	6a39      	ldr	r1, [r7, #32]
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fe52 	bl	8006d9e <I2C_WaitOnBTFFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00d      	beq.n	800611c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006104:	2b04      	cmp	r3, #4
 8006106:	d107      	bne.n	8006118 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006116:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e01a      	b.n	8006152 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006120:	2b00      	cmp	r3, #0
 8006122:	d194      	bne.n	800604e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	e000      	b.n	8006152 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006150:	2302      	movs	r3, #2
  }
}
 8006152:	4618      	mov	r0, r3
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	00100002 	.word	0x00100002
 8006160:	ffff0000 	.word	0xffff0000

08006164 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08c      	sub	sp, #48	; 0x30
 8006168:	af02      	add	r7, sp, #8
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	607a      	str	r2, [r7, #4]
 800616e:	461a      	mov	r2, r3
 8006170:	460b      	mov	r3, r1
 8006172:	817b      	strh	r3, [r7, #10]
 8006174:	4613      	mov	r3, r2
 8006176:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006178:	f7fe fee4 	bl	8004f44 <HAL_GetTick>
 800617c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b20      	cmp	r3, #32
 8006188:	f040 820b 	bne.w	80065a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	2319      	movs	r3, #25
 8006192:	2201      	movs	r2, #1
 8006194:	497c      	ldr	r1, [pc, #496]	; (8006388 <HAL_I2C_Master_Receive+0x224>)
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fcea 	bl	8006b70 <I2C_WaitOnFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80061a2:	2302      	movs	r3, #2
 80061a4:	e1fe      	b.n	80065a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d101      	bne.n	80061b4 <HAL_I2C_Master_Receive+0x50>
 80061b0:	2302      	movs	r3, #2
 80061b2:	e1f7      	b.n	80065a4 <HAL_I2C_Master_Receive+0x440>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d007      	beq.n	80061da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0201 	orr.w	r2, r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2222      	movs	r2, #34	; 0x22
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2210      	movs	r2, #16
 80061f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	893a      	ldrh	r2, [r7, #8]
 800620a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4a5c      	ldr	r2, [pc, #368]	; (800638c <HAL_I2C_Master_Receive+0x228>)
 800621a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800621c:	8979      	ldrh	r1, [r7, #10]
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fb40 	bl	80068a8 <I2C_MasterRequestRead>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e1b8      	b.n	80065a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006236:	2b00      	cmp	r3, #0
 8006238:	d113      	bne.n	8006262 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800623a:	2300      	movs	r3, #0
 800623c:	623b      	str	r3, [r7, #32]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	623b      	str	r3, [r7, #32]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	623b      	str	r3, [r7, #32]
 800624e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	e18c      	b.n	800657c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006266:	2b01      	cmp	r3, #1
 8006268:	d11b      	bne.n	80062a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006278:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	61fb      	str	r3, [r7, #28]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	61fb      	str	r3, [r7, #28]
 800628e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	e16c      	b.n	800657c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d11b      	bne.n	80062e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ca:	2300      	movs	r3, #0
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	e14c      	b.n	800657c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f2:	2300      	movs	r3, #0
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006308:	e138      	b.n	800657c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630e:	2b03      	cmp	r3, #3
 8006310:	f200 80f1 	bhi.w	80064f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006318:	2b01      	cmp	r3, #1
 800631a:	d123      	bne.n	8006364 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800631c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800631e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 fd7d 	bl	8006e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e139      	b.n	80065a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691a      	ldr	r2, [r3, #16]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634c:	3b01      	subs	r3, #1
 800634e:	b29a      	uxth	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006358:	b29b      	uxth	r3, r3
 800635a:	3b01      	subs	r3, #1
 800635c:	b29a      	uxth	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006362:	e10b      	b.n	800657c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006368:	2b02      	cmp	r3, #2
 800636a:	d14e      	bne.n	800640a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	2200      	movs	r2, #0
 8006374:	4906      	ldr	r1, [pc, #24]	; (8006390 <HAL_I2C_Master_Receive+0x22c>)
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fbfa 	bl	8006b70 <I2C_WaitOnFlagUntilTimeout>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d008      	beq.n	8006394 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e10e      	b.n	80065a4 <HAL_I2C_Master_Receive+0x440>
 8006386:	bf00      	nop
 8006388:	00100002 	.word	0x00100002
 800638c:	ffff0000 	.word	0xffff0000
 8006390:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691a      	ldr	r2, [r3, #16]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	691a      	ldr	r2, [r3, #16]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006408:	e0b8      	b.n	800657c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	2200      	movs	r2, #0
 8006412:	4966      	ldr	r1, [pc, #408]	; (80065ac <HAL_I2C_Master_Receive+0x448>)
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 fbab 	bl	8006b70 <I2C_WaitOnFlagUntilTimeout>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e0bf      	b.n	80065a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006432:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006450:	3b01      	subs	r3, #1
 8006452:	b29a      	uxth	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b01      	subs	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	2200      	movs	r2, #0
 800646e:	494f      	ldr	r1, [pc, #316]	; (80065ac <HAL_I2C_Master_Receive+0x448>)
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 fb7d 	bl	8006b70 <I2C_WaitOnFlagUntilTimeout>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e091      	b.n	80065a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800648e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	691a      	ldr	r2, [r3, #16]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064f4:	e042      	b.n	800657c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 fc90 	bl	8006e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e04c      	b.n	80065a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006532:	b29b      	uxth	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	f003 0304 	and.w	r3, r3, #4
 8006546:	2b04      	cmp	r3, #4
 8006548:	d118      	bne.n	800657c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006566:	3b01      	subs	r3, #1
 8006568:	b29a      	uxth	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006580:	2b00      	cmp	r3, #0
 8006582:	f47f aec2 	bne.w	800630a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2220      	movs	r2, #32
 800658a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	e000      	b.n	80065a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80065a2:	2302      	movs	r3, #2
  }
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3728      	adds	r7, #40	; 0x28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	00010004 	.word	0x00010004

080065b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	4608      	mov	r0, r1
 80065ba:	4611      	mov	r1, r2
 80065bc:	461a      	mov	r2, r3
 80065be:	4603      	mov	r3, r0
 80065c0:	817b      	strh	r3, [r7, #10]
 80065c2:	460b      	mov	r3, r1
 80065c4:	813b      	strh	r3, [r7, #8]
 80065c6:	4613      	mov	r3, r2
 80065c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065ca:	f7fe fcbb 	bl	8004f44 <HAL_GetTick>
 80065ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b20      	cmp	r3, #32
 80065da:	f040 80d9 	bne.w	8006790 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	2319      	movs	r3, #25
 80065e4:	2201      	movs	r2, #1
 80065e6:	496d      	ldr	r1, [pc, #436]	; (800679c <HAL_I2C_Mem_Write+0x1ec>)
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fac1 	bl	8006b70 <I2C_WaitOnFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80065f4:	2302      	movs	r3, #2
 80065f6:	e0cc      	b.n	8006792 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_I2C_Mem_Write+0x56>
 8006602:	2302      	movs	r3, #2
 8006604:	e0c5      	b.n	8006792 <HAL_I2C_Mem_Write+0x1e2>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b01      	cmp	r3, #1
 800661a:	d007      	beq.n	800662c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0201 	orr.w	r2, r2, #1
 800662a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800663a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2221      	movs	r2, #33	; 0x21
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2240      	movs	r2, #64	; 0x40
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a3a      	ldr	r2, [r7, #32]
 8006656:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800665c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006662:	b29a      	uxth	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4a4d      	ldr	r2, [pc, #308]	; (80067a0 <HAL_I2C_Mem_Write+0x1f0>)
 800666c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800666e:	88f8      	ldrh	r0, [r7, #6]
 8006670:	893a      	ldrh	r2, [r7, #8]
 8006672:	8979      	ldrh	r1, [r7, #10]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	4603      	mov	r3, r0
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 f9e0 	bl	8006a44 <I2C_RequestMemoryWrite>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d052      	beq.n	8006730 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e081      	b.n	8006792 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 fb42 	bl	8006d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00d      	beq.n	80066ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d107      	bne.n	80066b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e06b      	b.n	8006792 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	781a      	ldrb	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d4:	3b01      	subs	r3, #1
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d11b      	bne.n	8006730 <HAL_I2C_Mem_Write+0x180>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d017      	beq.n	8006730 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	781a      	ldrb	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006726:	b29b      	uxth	r3, r3
 8006728:	3b01      	subs	r3, #1
 800672a:	b29a      	uxth	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1aa      	bne.n	800668e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 fb2e 	bl	8006d9e <I2C_WaitOnBTFFlagUntilTimeout>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00d      	beq.n	8006764 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	2b04      	cmp	r3, #4
 800674e:	d107      	bne.n	8006760 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800675e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e016      	b.n	8006792 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	e000      	b.n	8006792 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006790:	2302      	movs	r3, #2
  }
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	00100002 	.word	0x00100002
 80067a0:	ffff0000 	.word	0xffff0000

080067a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af02      	add	r7, sp, #8
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	607a      	str	r2, [r7, #4]
 80067ae:	603b      	str	r3, [r7, #0]
 80067b0:	460b      	mov	r3, r1
 80067b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d006      	beq.n	80067ce <I2C_MasterRequestWrite+0x2a>
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d003      	beq.n	80067ce <I2C_MasterRequestWrite+0x2a>
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067cc:	d108      	bne.n	80067e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	e00b      	b.n	80067f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e4:	2b12      	cmp	r3, #18
 80067e6:	d107      	bne.n	80067f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 f9b3 	bl	8006b70 <I2C_WaitOnFlagUntilTimeout>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00d      	beq.n	800682c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681e:	d103      	bne.n	8006828 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006826:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e035      	b.n	8006898 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006834:	d108      	bne.n	8006848 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006836:	897b      	ldrh	r3, [r7, #10]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	461a      	mov	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006844:	611a      	str	r2, [r3, #16]
 8006846:	e01b      	b.n	8006880 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006848:	897b      	ldrh	r3, [r7, #10]
 800684a:	11db      	asrs	r3, r3, #7
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f003 0306 	and.w	r3, r3, #6
 8006852:	b2db      	uxtb	r3, r3
 8006854:	f063 030f 	orn	r3, r3, #15
 8006858:	b2da      	uxtb	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	490e      	ldr	r1, [pc, #56]	; (80068a0 <I2C_MasterRequestWrite+0xfc>)
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 f9d9 	bl	8006c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e010      	b.n	8006898 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006876:	897b      	ldrh	r3, [r7, #10]
 8006878:	b2da      	uxtb	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	4907      	ldr	r1, [pc, #28]	; (80068a4 <I2C_MasterRequestWrite+0x100>)
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 f9c9 	bl	8006c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e000      	b.n	8006898 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	00010008 	.word	0x00010008
 80068a4:	00010002 	.word	0x00010002

080068a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af02      	add	r7, sp, #8
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	607a      	str	r2, [r7, #4]
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	460b      	mov	r3, r1
 80068b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d006      	beq.n	80068e2 <I2C_MasterRequestRead+0x3a>
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d003      	beq.n	80068e2 <I2C_MasterRequestRead+0x3a>
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068e0:	d108      	bne.n	80068f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e00b      	b.n	800690c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f8:	2b11      	cmp	r3, #17
 80068fa:	d107      	bne.n	800690c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800690a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 f929 	bl	8006b70 <I2C_WaitOnFlagUntilTimeout>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00d      	beq.n	8006940 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006932:	d103      	bne.n	800693c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800693a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e079      	b.n	8006a34 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006948:	d108      	bne.n	800695c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800694a:	897b      	ldrh	r3, [r7, #10]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	f043 0301 	orr.w	r3, r3, #1
 8006952:	b2da      	uxtb	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	611a      	str	r2, [r3, #16]
 800695a:	e05f      	b.n	8006a1c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800695c:	897b      	ldrh	r3, [r7, #10]
 800695e:	11db      	asrs	r3, r3, #7
 8006960:	b2db      	uxtb	r3, r3
 8006962:	f003 0306 	and.w	r3, r3, #6
 8006966:	b2db      	uxtb	r3, r3
 8006968:	f063 030f 	orn	r3, r3, #15
 800696c:	b2da      	uxtb	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	4930      	ldr	r1, [pc, #192]	; (8006a3c <I2C_MasterRequestRead+0x194>)
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 f94f 	bl	8006c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e054      	b.n	8006a34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800698a:	897b      	ldrh	r3, [r7, #10]
 800698c:	b2da      	uxtb	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	4929      	ldr	r1, [pc, #164]	; (8006a40 <I2C_MasterRequestRead+0x198>)
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 f93f 	bl	8006c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e044      	b.n	8006a34 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069aa:	2300      	movs	r3, #0
 80069ac:	613b      	str	r3, [r7, #16]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	613b      	str	r3, [r7, #16]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	613b      	str	r3, [r7, #16]
 80069be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 f8c7 	bl	8006b70 <I2C_WaitOnFlagUntilTimeout>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00d      	beq.n	8006a04 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f6:	d103      	bne.n	8006a00 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e017      	b.n	8006a34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006a04:	897b      	ldrh	r3, [r7, #10]
 8006a06:	11db      	asrs	r3, r3, #7
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	f003 0306 	and.w	r3, r3, #6
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	f063 030e 	orn	r3, r3, #14
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	4907      	ldr	r1, [pc, #28]	; (8006a40 <I2C_MasterRequestRead+0x198>)
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f8fb 	bl	8006c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e000      	b.n	8006a34 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	00010008 	.word	0x00010008
 8006a40:	00010002 	.word	0x00010002

08006a44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	4611      	mov	r1, r2
 8006a50:	461a      	mov	r2, r3
 8006a52:	4603      	mov	r3, r0
 8006a54:	817b      	strh	r3, [r7, #10]
 8006a56:	460b      	mov	r3, r1
 8006a58:	813b      	strh	r3, [r7, #8]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 f878 	bl	8006b70 <I2C_WaitOnFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00d      	beq.n	8006aa2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a94:	d103      	bne.n	8006a9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e05f      	b.n	8006b62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006aa2:	897b      	ldrh	r3, [r7, #10]
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ab0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	6a3a      	ldr	r2, [r7, #32]
 8006ab6:	492d      	ldr	r1, [pc, #180]	; (8006b6c <I2C_RequestMemoryWrite+0x128>)
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f8b0 	bl	8006c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e04c      	b.n	8006b62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae0:	6a39      	ldr	r1, [r7, #32]
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 f91a 	bl	8006d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00d      	beq.n	8006b0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d107      	bne.n	8006b06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e02b      	b.n	8006b62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b0a:	88fb      	ldrh	r3, [r7, #6]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d105      	bne.n	8006b1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b10:	893b      	ldrh	r3, [r7, #8]
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	611a      	str	r2, [r3, #16]
 8006b1a:	e021      	b.n	8006b60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b1c:	893b      	ldrh	r3, [r7, #8]
 8006b1e:	0a1b      	lsrs	r3, r3, #8
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2c:	6a39      	ldr	r1, [r7, #32]
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f8f4 	bl	8006d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00d      	beq.n	8006b56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d107      	bne.n	8006b52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e005      	b.n	8006b62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b56:	893b      	ldrh	r3, [r7, #8]
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	00010002 	.word	0x00010002

08006b70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	603b      	str	r3, [r7, #0]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b80:	e025      	b.n	8006bce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d021      	beq.n	8006bce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b8a:	f7fe f9db 	bl	8004f44 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d302      	bcc.n	8006ba0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d116      	bne.n	8006bce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f043 0220 	orr.w	r2, r3, #32
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e023      	b.n	8006c16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	0c1b      	lsrs	r3, r3, #16
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d10d      	bne.n	8006bf4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	43da      	mvns	r2, r3
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	4013      	ands	r3, r2
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bf0c      	ite	eq
 8006bea:	2301      	moveq	r3, #1
 8006bec:	2300      	movne	r3, #0
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	e00c      	b.n	8006c0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	43da      	mvns	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	bf0c      	ite	eq
 8006c06:	2301      	moveq	r3, #1
 8006c08:	2300      	movne	r3, #0
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d0b6      	beq.n	8006b82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
 8006c2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c2c:	e051      	b.n	8006cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c3c:	d123      	bne.n	8006c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	f043 0204 	orr.w	r2, r3, #4
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e046      	b.n	8006d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8c:	d021      	beq.n	8006cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c8e:	f7fe f959 	bl	8004f44 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d302      	bcc.n	8006ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d116      	bne.n	8006cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	f043 0220 	orr.w	r2, r3, #32
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e020      	b.n	8006d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	0c1b      	lsrs	r3, r3, #16
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d10c      	bne.n	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	43da      	mvns	r2, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bf14      	ite	ne
 8006cee:	2301      	movne	r3, #1
 8006cf0:	2300      	moveq	r3, #0
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	e00b      	b.n	8006d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	43da      	mvns	r2, r3
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	4013      	ands	r3, r2
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	bf14      	ite	ne
 8006d08:	2301      	movne	r3, #1
 8006d0a:	2300      	moveq	r3, #0
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d18d      	bne.n	8006c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d28:	e02d      	b.n	8006d86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 f8ce 	bl	8006ecc <I2C_IsAcknowledgeFailed>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e02d      	b.n	8006d96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d40:	d021      	beq.n	8006d86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d42:	f7fe f8ff 	bl	8004f44 <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d302      	bcc.n	8006d58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d116      	bne.n	8006d86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2220      	movs	r2, #32
 8006d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	f043 0220 	orr.w	r2, r3, #32
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e007      	b.n	8006d96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d90:	2b80      	cmp	r3, #128	; 0x80
 8006d92:	d1ca      	bne.n	8006d2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006daa:	e02d      	b.n	8006e08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 f88d 	bl	8006ecc <I2C_IsAcknowledgeFailed>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e02d      	b.n	8006e18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc2:	d021      	beq.n	8006e08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc4:	f7fe f8be 	bl	8004f44 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d302      	bcc.n	8006dda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d116      	bne.n	8006e08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df4:	f043 0220 	orr.w	r2, r3, #32
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e007      	b.n	8006e18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	f003 0304 	and.w	r3, r3, #4
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d1ca      	bne.n	8006dac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e2c:	e042      	b.n	8006eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	f003 0310 	and.w	r3, r3, #16
 8006e38:	2b10      	cmp	r3, #16
 8006e3a:	d119      	bne.n	8006e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f06f 0210 	mvn.w	r2, #16
 8006e44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e029      	b.n	8006ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e70:	f7fe f868 	bl	8004f44 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d302      	bcc.n	8006e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d116      	bne.n	8006eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea0:	f043 0220 	orr.w	r2, r3, #32
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e007      	b.n	8006ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebe:	2b40      	cmp	r3, #64	; 0x40
 8006ec0:	d1b5      	bne.n	8006e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee2:	d11b      	bne.n	8006f1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006eec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	f043 0204 	orr.w	r2, r3, #4
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
	...

08006f2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e267      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d075      	beq.n	8007036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f4a:	4b88      	ldr	r3, [pc, #544]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f003 030c 	and.w	r3, r3, #12
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	d00c      	beq.n	8006f70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f56:	4b85      	ldr	r3, [pc, #532]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f5e:	2b08      	cmp	r3, #8
 8006f60:	d112      	bne.n	8006f88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f62:	4b82      	ldr	r3, [pc, #520]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f6e:	d10b      	bne.n	8006f88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f70:	4b7e      	ldr	r3, [pc, #504]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d05b      	beq.n	8007034 <HAL_RCC_OscConfig+0x108>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d157      	bne.n	8007034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e242      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f90:	d106      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x74>
 8006f92:	4b76      	ldr	r3, [pc, #472]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a75      	ldr	r2, [pc, #468]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8006f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	e01d      	b.n	8006fdc <HAL_RCC_OscConfig+0xb0>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fa8:	d10c      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x98>
 8006faa:	4b70      	ldr	r3, [pc, #448]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a6f      	ldr	r2, [pc, #444]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8006fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	4b6d      	ldr	r3, [pc, #436]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a6c      	ldr	r2, [pc, #432]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8006fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	e00b      	b.n	8006fdc <HAL_RCC_OscConfig+0xb0>
 8006fc4:	4b69      	ldr	r3, [pc, #420]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a68      	ldr	r2, [pc, #416]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8006fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	4b66      	ldr	r3, [pc, #408]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a65      	ldr	r2, [pc, #404]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8006fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d013      	beq.n	800700c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe4:	f7fd ffae 	bl	8004f44 <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fec:	f7fd ffaa 	bl	8004f44 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b64      	cmp	r3, #100	; 0x64
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e207      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ffe:	4b5b      	ldr	r3, [pc, #364]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0f0      	beq.n	8006fec <HAL_RCC_OscConfig+0xc0>
 800700a:	e014      	b.n	8007036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800700c:	f7fd ff9a 	bl	8004f44 <HAL_GetTick>
 8007010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007012:	e008      	b.n	8007026 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007014:	f7fd ff96 	bl	8004f44 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b64      	cmp	r3, #100	; 0x64
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e1f3      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007026:	4b51      	ldr	r3, [pc, #324]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f0      	bne.n	8007014 <HAL_RCC_OscConfig+0xe8>
 8007032:	e000      	b.n	8007036 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d063      	beq.n	800710a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007042:	4b4a      	ldr	r3, [pc, #296]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 030c 	and.w	r3, r3, #12
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800704e:	4b47      	ldr	r3, [pc, #284]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007056:	2b08      	cmp	r3, #8
 8007058:	d11c      	bne.n	8007094 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800705a:	4b44      	ldr	r3, [pc, #272]	; (800716c <HAL_RCC_OscConfig+0x240>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d116      	bne.n	8007094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007066:	4b41      	ldr	r3, [pc, #260]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d005      	beq.n	800707e <HAL_RCC_OscConfig+0x152>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d001      	beq.n	800707e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e1c7      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800707e:	4b3b      	ldr	r3, [pc, #236]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	4937      	ldr	r1, [pc, #220]	; (800716c <HAL_RCC_OscConfig+0x240>)
 800708e:	4313      	orrs	r3, r2
 8007090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007092:	e03a      	b.n	800710a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d020      	beq.n	80070de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800709c:	4b34      	ldr	r3, [pc, #208]	; (8007170 <HAL_RCC_OscConfig+0x244>)
 800709e:	2201      	movs	r2, #1
 80070a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a2:	f7fd ff4f 	bl	8004f44 <HAL_GetTick>
 80070a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070a8:	e008      	b.n	80070bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070aa:	f7fd ff4b 	bl	8004f44 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d901      	bls.n	80070bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e1a8      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070bc:	4b2b      	ldr	r3, [pc, #172]	; (800716c <HAL_RCC_OscConfig+0x240>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d0f0      	beq.n	80070aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c8:	4b28      	ldr	r3, [pc, #160]	; (800716c <HAL_RCC_OscConfig+0x240>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	4925      	ldr	r1, [pc, #148]	; (800716c <HAL_RCC_OscConfig+0x240>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	600b      	str	r3, [r1, #0]
 80070dc:	e015      	b.n	800710a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070de:	4b24      	ldr	r3, [pc, #144]	; (8007170 <HAL_RCC_OscConfig+0x244>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e4:	f7fd ff2e 	bl	8004f44 <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070ec:	f7fd ff2a 	bl	8004f44 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e187      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070fe:	4b1b      	ldr	r3, [pc, #108]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f0      	bne.n	80070ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0308 	and.w	r3, r3, #8
 8007112:	2b00      	cmp	r3, #0
 8007114:	d036      	beq.n	8007184 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d016      	beq.n	800714c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800711e:	4b15      	ldr	r3, [pc, #84]	; (8007174 <HAL_RCC_OscConfig+0x248>)
 8007120:	2201      	movs	r2, #1
 8007122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007124:	f7fd ff0e 	bl	8004f44 <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800712c:	f7fd ff0a 	bl	8004f44 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e167      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800713e:	4b0b      	ldr	r3, [pc, #44]	; (800716c <HAL_RCC_OscConfig+0x240>)
 8007140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0f0      	beq.n	800712c <HAL_RCC_OscConfig+0x200>
 800714a:	e01b      	b.n	8007184 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800714c:	4b09      	ldr	r3, [pc, #36]	; (8007174 <HAL_RCC_OscConfig+0x248>)
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007152:	f7fd fef7 	bl	8004f44 <HAL_GetTick>
 8007156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007158:	e00e      	b.n	8007178 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800715a:	f7fd fef3 	bl	8004f44 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d907      	bls.n	8007178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e150      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
 800716c:	40023800 	.word	0x40023800
 8007170:	42470000 	.word	0x42470000
 8007174:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007178:	4b88      	ldr	r3, [pc, #544]	; (800739c <HAL_RCC_OscConfig+0x470>)
 800717a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1ea      	bne.n	800715a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 8097 	beq.w	80072c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007192:	2300      	movs	r3, #0
 8007194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007196:	4b81      	ldr	r3, [pc, #516]	; (800739c <HAL_RCC_OscConfig+0x470>)
 8007198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10f      	bne.n	80071c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071a2:	2300      	movs	r3, #0
 80071a4:	60bb      	str	r3, [r7, #8]
 80071a6:	4b7d      	ldr	r3, [pc, #500]	; (800739c <HAL_RCC_OscConfig+0x470>)
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	4a7c      	ldr	r2, [pc, #496]	; (800739c <HAL_RCC_OscConfig+0x470>)
 80071ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b0:	6413      	str	r3, [r2, #64]	; 0x40
 80071b2:	4b7a      	ldr	r3, [pc, #488]	; (800739c <HAL_RCC_OscConfig+0x470>)
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ba:	60bb      	str	r3, [r7, #8]
 80071bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071be:	2301      	movs	r3, #1
 80071c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c2:	4b77      	ldr	r3, [pc, #476]	; (80073a0 <HAL_RCC_OscConfig+0x474>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d118      	bne.n	8007200 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071ce:	4b74      	ldr	r3, [pc, #464]	; (80073a0 <HAL_RCC_OscConfig+0x474>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a73      	ldr	r2, [pc, #460]	; (80073a0 <HAL_RCC_OscConfig+0x474>)
 80071d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071da:	f7fd feb3 	bl	8004f44 <HAL_GetTick>
 80071de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071e0:	e008      	b.n	80071f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071e2:	f7fd feaf 	bl	8004f44 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d901      	bls.n	80071f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e10c      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f4:	4b6a      	ldr	r3, [pc, #424]	; (80073a0 <HAL_RCC_OscConfig+0x474>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0f0      	beq.n	80071e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d106      	bne.n	8007216 <HAL_RCC_OscConfig+0x2ea>
 8007208:	4b64      	ldr	r3, [pc, #400]	; (800739c <HAL_RCC_OscConfig+0x470>)
 800720a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720c:	4a63      	ldr	r2, [pc, #396]	; (800739c <HAL_RCC_OscConfig+0x470>)
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	6713      	str	r3, [r2, #112]	; 0x70
 8007214:	e01c      	b.n	8007250 <HAL_RCC_OscConfig+0x324>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b05      	cmp	r3, #5
 800721c:	d10c      	bne.n	8007238 <HAL_RCC_OscConfig+0x30c>
 800721e:	4b5f      	ldr	r3, [pc, #380]	; (800739c <HAL_RCC_OscConfig+0x470>)
 8007220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007222:	4a5e      	ldr	r2, [pc, #376]	; (800739c <HAL_RCC_OscConfig+0x470>)
 8007224:	f043 0304 	orr.w	r3, r3, #4
 8007228:	6713      	str	r3, [r2, #112]	; 0x70
 800722a:	4b5c      	ldr	r3, [pc, #368]	; (800739c <HAL_RCC_OscConfig+0x470>)
 800722c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722e:	4a5b      	ldr	r2, [pc, #364]	; (800739c <HAL_RCC_OscConfig+0x470>)
 8007230:	f043 0301 	orr.w	r3, r3, #1
 8007234:	6713      	str	r3, [r2, #112]	; 0x70
 8007236:	e00b      	b.n	8007250 <HAL_RCC_OscConfig+0x324>
 8007238:	4b58      	ldr	r3, [pc, #352]	; (800739c <HAL_RCC_OscConfig+0x470>)
 800723a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723c:	4a57      	ldr	r2, [pc, #348]	; (800739c <HAL_RCC_OscConfig+0x470>)
 800723e:	f023 0301 	bic.w	r3, r3, #1
 8007242:	6713      	str	r3, [r2, #112]	; 0x70
 8007244:	4b55      	ldr	r3, [pc, #340]	; (800739c <HAL_RCC_OscConfig+0x470>)
 8007246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007248:	4a54      	ldr	r2, [pc, #336]	; (800739c <HAL_RCC_OscConfig+0x470>)
 800724a:	f023 0304 	bic.w	r3, r3, #4
 800724e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d015      	beq.n	8007284 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007258:	f7fd fe74 	bl	8004f44 <HAL_GetTick>
 800725c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800725e:	e00a      	b.n	8007276 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007260:	f7fd fe70 	bl	8004f44 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	f241 3288 	movw	r2, #5000	; 0x1388
 800726e:	4293      	cmp	r3, r2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e0cb      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007276:	4b49      	ldr	r3, [pc, #292]	; (800739c <HAL_RCC_OscConfig+0x470>)
 8007278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0ee      	beq.n	8007260 <HAL_RCC_OscConfig+0x334>
 8007282:	e014      	b.n	80072ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007284:	f7fd fe5e 	bl	8004f44 <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800728a:	e00a      	b.n	80072a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800728c:	f7fd fe5a 	bl	8004f44 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	f241 3288 	movw	r2, #5000	; 0x1388
 800729a:	4293      	cmp	r3, r2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e0b5      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072a2:	4b3e      	ldr	r3, [pc, #248]	; (800739c <HAL_RCC_OscConfig+0x470>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1ee      	bne.n	800728c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d105      	bne.n	80072c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072b4:	4b39      	ldr	r3, [pc, #228]	; (800739c <HAL_RCC_OscConfig+0x470>)
 80072b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b8:	4a38      	ldr	r2, [pc, #224]	; (800739c <HAL_RCC_OscConfig+0x470>)
 80072ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 80a1 	beq.w	800740c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072ca:	4b34      	ldr	r3, [pc, #208]	; (800739c <HAL_RCC_OscConfig+0x470>)
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 030c 	and.w	r3, r3, #12
 80072d2:	2b08      	cmp	r3, #8
 80072d4:	d05c      	beq.n	8007390 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d141      	bne.n	8007362 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072de:	4b31      	ldr	r3, [pc, #196]	; (80073a4 <HAL_RCC_OscConfig+0x478>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e4:	f7fd fe2e 	bl	8004f44 <HAL_GetTick>
 80072e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072ea:	e008      	b.n	80072fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072ec:	f7fd fe2a 	bl	8004f44 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d901      	bls.n	80072fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e087      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072fe:	4b27      	ldr	r3, [pc, #156]	; (800739c <HAL_RCC_OscConfig+0x470>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1f0      	bne.n	80072ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69da      	ldr	r2, [r3, #28]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	019b      	lsls	r3, r3, #6
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007320:	085b      	lsrs	r3, r3, #1
 8007322:	3b01      	subs	r3, #1
 8007324:	041b      	lsls	r3, r3, #16
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	061b      	lsls	r3, r3, #24
 800732e:	491b      	ldr	r1, [pc, #108]	; (800739c <HAL_RCC_OscConfig+0x470>)
 8007330:	4313      	orrs	r3, r2
 8007332:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007334:	4b1b      	ldr	r3, [pc, #108]	; (80073a4 <HAL_RCC_OscConfig+0x478>)
 8007336:	2201      	movs	r2, #1
 8007338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800733a:	f7fd fe03 	bl	8004f44 <HAL_GetTick>
 800733e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007340:	e008      	b.n	8007354 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007342:	f7fd fdff 	bl	8004f44 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	d901      	bls.n	8007354 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e05c      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007354:	4b11      	ldr	r3, [pc, #68]	; (800739c <HAL_RCC_OscConfig+0x470>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0f0      	beq.n	8007342 <HAL_RCC_OscConfig+0x416>
 8007360:	e054      	b.n	800740c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007362:	4b10      	ldr	r3, [pc, #64]	; (80073a4 <HAL_RCC_OscConfig+0x478>)
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007368:	f7fd fdec 	bl	8004f44 <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007370:	f7fd fde8 	bl	8004f44 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e045      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007382:	4b06      	ldr	r3, [pc, #24]	; (800739c <HAL_RCC_OscConfig+0x470>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1f0      	bne.n	8007370 <HAL_RCC_OscConfig+0x444>
 800738e:	e03d      	b.n	800740c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d107      	bne.n	80073a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e038      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
 800739c:	40023800 	.word	0x40023800
 80073a0:	40007000 	.word	0x40007000
 80073a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073a8:	4b1b      	ldr	r3, [pc, #108]	; (8007418 <HAL_RCC_OscConfig+0x4ec>)
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d028      	beq.n	8007408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d121      	bne.n	8007408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d11a      	bne.n	8007408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073d8:	4013      	ands	r3, r2
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d111      	bne.n	8007408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ee:	085b      	lsrs	r3, r3, #1
 80073f0:	3b01      	subs	r3, #1
 80073f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d107      	bne.n	8007408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007404:	429a      	cmp	r2, r3
 8007406:	d001      	beq.n	800740c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e000      	b.n	800740e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	40023800 	.word	0x40023800

0800741c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e0cc      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007430:	4b68      	ldr	r3, [pc, #416]	; (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0307 	and.w	r3, r3, #7
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d90c      	bls.n	8007458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800743e:	4b65      	ldr	r3, [pc, #404]	; (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007446:	4b63      	ldr	r3, [pc, #396]	; (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0307 	and.w	r3, r3, #7
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	429a      	cmp	r2, r3
 8007452:	d001      	beq.n	8007458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e0b8      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d020      	beq.n	80074a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007470:	4b59      	ldr	r3, [pc, #356]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	4a58      	ldr	r2, [pc, #352]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800747a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007488:	4b53      	ldr	r3, [pc, #332]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	4a52      	ldr	r2, [pc, #328]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 800748e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007494:	4b50      	ldr	r3, [pc, #320]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	494d      	ldr	r1, [pc, #308]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d044      	beq.n	800753c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d107      	bne.n	80074ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ba:	4b47      	ldr	r3, [pc, #284]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d119      	bne.n	80074fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e07f      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d003      	beq.n	80074da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d107      	bne.n	80074ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074da:	4b3f      	ldr	r3, [pc, #252]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d109      	bne.n	80074fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e06f      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ea:	4b3b      	ldr	r3, [pc, #236]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e067      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074fa:	4b37      	ldr	r3, [pc, #220]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f023 0203 	bic.w	r2, r3, #3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	4934      	ldr	r1, [pc, #208]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007508:	4313      	orrs	r3, r2
 800750a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800750c:	f7fd fd1a 	bl	8004f44 <HAL_GetTick>
 8007510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007512:	e00a      	b.n	800752a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007514:	f7fd fd16 	bl	8004f44 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007522:	4293      	cmp	r3, r2
 8007524:	d901      	bls.n	800752a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e04f      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800752a:	4b2b      	ldr	r3, [pc, #172]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f003 020c 	and.w	r2, r3, #12
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	429a      	cmp	r2, r3
 800753a:	d1eb      	bne.n	8007514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800753c:	4b25      	ldr	r3, [pc, #148]	; (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0307 	and.w	r3, r3, #7
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d20c      	bcs.n	8007564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800754a:	4b22      	ldr	r3, [pc, #136]	; (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 800754c:	683a      	ldr	r2, [r7, #0]
 800754e:	b2d2      	uxtb	r2, r2
 8007550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007552:	4b20      	ldr	r3, [pc, #128]	; (80075d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0307 	and.w	r3, r3, #7
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	429a      	cmp	r2, r3
 800755e:	d001      	beq.n	8007564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e032      	b.n	80075ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0304 	and.w	r3, r3, #4
 800756c:	2b00      	cmp	r3, #0
 800756e:	d008      	beq.n	8007582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007570:	4b19      	ldr	r3, [pc, #100]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	4916      	ldr	r1, [pc, #88]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 800757e:	4313      	orrs	r3, r2
 8007580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0308 	and.w	r3, r3, #8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d009      	beq.n	80075a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800758e:	4b12      	ldr	r3, [pc, #72]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	490e      	ldr	r1, [pc, #56]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80075a2:	f000 f821 	bl	80075e8 <HAL_RCC_GetSysClockFreq>
 80075a6:	4602      	mov	r2, r0
 80075a8:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <HAL_RCC_ClockConfig+0x1bc>)
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	091b      	lsrs	r3, r3, #4
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	490a      	ldr	r1, [pc, #40]	; (80075dc <HAL_RCC_ClockConfig+0x1c0>)
 80075b4:	5ccb      	ldrb	r3, [r1, r3]
 80075b6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ba:	4a09      	ldr	r2, [pc, #36]	; (80075e0 <HAL_RCC_ClockConfig+0x1c4>)
 80075bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075be:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <HAL_RCC_ClockConfig+0x1c8>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fd fc7a 	bl	8004ebc <HAL_InitTick>

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	40023c00 	.word	0x40023c00
 80075d8:	40023800 	.word	0x40023800
 80075dc:	0801003c 	.word	0x0801003c
 80075e0:	200008a0 	.word	0x200008a0
 80075e4:	200008c0 	.word	0x200008c0

080075e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075ec:	b090      	sub	sp, #64	; 0x40
 80075ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	637b      	str	r3, [r7, #52]	; 0x34
 80075f4:	2300      	movs	r3, #0
 80075f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075f8:	2300      	movs	r3, #0
 80075fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007600:	4b59      	ldr	r3, [pc, #356]	; (8007768 <HAL_RCC_GetSysClockFreq+0x180>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f003 030c 	and.w	r3, r3, #12
 8007608:	2b08      	cmp	r3, #8
 800760a:	d00d      	beq.n	8007628 <HAL_RCC_GetSysClockFreq+0x40>
 800760c:	2b08      	cmp	r3, #8
 800760e:	f200 80a1 	bhi.w	8007754 <HAL_RCC_GetSysClockFreq+0x16c>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d002      	beq.n	800761c <HAL_RCC_GetSysClockFreq+0x34>
 8007616:	2b04      	cmp	r3, #4
 8007618:	d003      	beq.n	8007622 <HAL_RCC_GetSysClockFreq+0x3a>
 800761a:	e09b      	b.n	8007754 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800761c:	4b53      	ldr	r3, [pc, #332]	; (800776c <HAL_RCC_GetSysClockFreq+0x184>)
 800761e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007620:	e09b      	b.n	800775a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007622:	4b53      	ldr	r3, [pc, #332]	; (8007770 <HAL_RCC_GetSysClockFreq+0x188>)
 8007624:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007626:	e098      	b.n	800775a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007628:	4b4f      	ldr	r3, [pc, #316]	; (8007768 <HAL_RCC_GetSysClockFreq+0x180>)
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007630:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007632:	4b4d      	ldr	r3, [pc, #308]	; (8007768 <HAL_RCC_GetSysClockFreq+0x180>)
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d028      	beq.n	8007690 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800763e:	4b4a      	ldr	r3, [pc, #296]	; (8007768 <HAL_RCC_GetSysClockFreq+0x180>)
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	099b      	lsrs	r3, r3, #6
 8007644:	2200      	movs	r2, #0
 8007646:	623b      	str	r3, [r7, #32]
 8007648:	627a      	str	r2, [r7, #36]	; 0x24
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007650:	2100      	movs	r1, #0
 8007652:	4b47      	ldr	r3, [pc, #284]	; (8007770 <HAL_RCC_GetSysClockFreq+0x188>)
 8007654:	fb03 f201 	mul.w	r2, r3, r1
 8007658:	2300      	movs	r3, #0
 800765a:	fb00 f303 	mul.w	r3, r0, r3
 800765e:	4413      	add	r3, r2
 8007660:	4a43      	ldr	r2, [pc, #268]	; (8007770 <HAL_RCC_GetSysClockFreq+0x188>)
 8007662:	fba0 1202 	umull	r1, r2, r0, r2
 8007666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007668:	460a      	mov	r2, r1
 800766a:	62ba      	str	r2, [r7, #40]	; 0x28
 800766c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800766e:	4413      	add	r3, r2
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007674:	2200      	movs	r2, #0
 8007676:	61bb      	str	r3, [r7, #24]
 8007678:	61fa      	str	r2, [r7, #28]
 800767a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800767e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007682:	f7f9 fac9 	bl	8000c18 <__aeabi_uldivmod>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	4613      	mov	r3, r2
 800768c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800768e:	e053      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007690:	4b35      	ldr	r3, [pc, #212]	; (8007768 <HAL_RCC_GetSysClockFreq+0x180>)
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	099b      	lsrs	r3, r3, #6
 8007696:	2200      	movs	r2, #0
 8007698:	613b      	str	r3, [r7, #16]
 800769a:	617a      	str	r2, [r7, #20]
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80076a2:	f04f 0b00 	mov.w	fp, #0
 80076a6:	4652      	mov	r2, sl
 80076a8:	465b      	mov	r3, fp
 80076aa:	f04f 0000 	mov.w	r0, #0
 80076ae:	f04f 0100 	mov.w	r1, #0
 80076b2:	0159      	lsls	r1, r3, #5
 80076b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076b8:	0150      	lsls	r0, r2, #5
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	ebb2 080a 	subs.w	r8, r2, sl
 80076c2:	eb63 090b 	sbc.w	r9, r3, fp
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	f04f 0300 	mov.w	r3, #0
 80076ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80076d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80076d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80076da:	ebb2 0408 	subs.w	r4, r2, r8
 80076de:	eb63 0509 	sbc.w	r5, r3, r9
 80076e2:	f04f 0200 	mov.w	r2, #0
 80076e6:	f04f 0300 	mov.w	r3, #0
 80076ea:	00eb      	lsls	r3, r5, #3
 80076ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076f0:	00e2      	lsls	r2, r4, #3
 80076f2:	4614      	mov	r4, r2
 80076f4:	461d      	mov	r5, r3
 80076f6:	eb14 030a 	adds.w	r3, r4, sl
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	eb45 030b 	adc.w	r3, r5, fp
 8007700:	607b      	str	r3, [r7, #4]
 8007702:	f04f 0200 	mov.w	r2, #0
 8007706:	f04f 0300 	mov.w	r3, #0
 800770a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800770e:	4629      	mov	r1, r5
 8007710:	028b      	lsls	r3, r1, #10
 8007712:	4621      	mov	r1, r4
 8007714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007718:	4621      	mov	r1, r4
 800771a:	028a      	lsls	r2, r1, #10
 800771c:	4610      	mov	r0, r2
 800771e:	4619      	mov	r1, r3
 8007720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007722:	2200      	movs	r2, #0
 8007724:	60bb      	str	r3, [r7, #8]
 8007726:	60fa      	str	r2, [r7, #12]
 8007728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800772c:	f7f9 fa74 	bl	8000c18 <__aeabi_uldivmod>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4613      	mov	r3, r2
 8007736:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007738:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <HAL_RCC_GetSysClockFreq+0x180>)
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	0c1b      	lsrs	r3, r3, #16
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	3301      	adds	r3, #1
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007748:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800774a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007750:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007752:	e002      	b.n	800775a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007754:	4b05      	ldr	r3, [pc, #20]	; (800776c <HAL_RCC_GetSysClockFreq+0x184>)
 8007756:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800775c:	4618      	mov	r0, r3
 800775e:	3740      	adds	r7, #64	; 0x40
 8007760:	46bd      	mov	sp, r7
 8007762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007766:	bf00      	nop
 8007768:	40023800 	.word	0x40023800
 800776c:	00f42400 	.word	0x00f42400
 8007770:	017d7840 	.word	0x017d7840

08007774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007774:	b480      	push	{r7}
 8007776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007778:	4b03      	ldr	r3, [pc, #12]	; (8007788 <HAL_RCC_GetHCLKFreq+0x14>)
 800777a:	681b      	ldr	r3, [r3, #0]
}
 800777c:	4618      	mov	r0, r3
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	200008a0 	.word	0x200008a0

0800778c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007790:	f7ff fff0 	bl	8007774 <HAL_RCC_GetHCLKFreq>
 8007794:	4602      	mov	r2, r0
 8007796:	4b05      	ldr	r3, [pc, #20]	; (80077ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	0a9b      	lsrs	r3, r3, #10
 800779c:	f003 0307 	and.w	r3, r3, #7
 80077a0:	4903      	ldr	r1, [pc, #12]	; (80077b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077a2:	5ccb      	ldrb	r3, [r1, r3]
 80077a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	40023800 	.word	0x40023800
 80077b0:	0801004c 	.word	0x0801004c

080077b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80077b8:	f7ff ffdc 	bl	8007774 <HAL_RCC_GetHCLKFreq>
 80077bc:	4602      	mov	r2, r0
 80077be:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	0b5b      	lsrs	r3, r3, #13
 80077c4:	f003 0307 	and.w	r3, r3, #7
 80077c8:	4903      	ldr	r1, [pc, #12]	; (80077d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077ca:	5ccb      	ldrb	r3, [r1, r3]
 80077cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	40023800 	.word	0x40023800
 80077d8:	0801004c 	.word	0x0801004c

080077dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d105      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007800:	2b00      	cmp	r3, #0
 8007802:	d038      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007804:	4b68      	ldr	r3, [pc, #416]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800780a:	f7fd fb9b 	bl	8004f44 <HAL_GetTick>
 800780e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007810:	e008      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007812:	f7fd fb97 	bl	8004f44 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	2b02      	cmp	r3, #2
 800781e:	d901      	bls.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e0bd      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007824:	4b61      	ldr	r3, [pc, #388]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1f0      	bne.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	019b      	lsls	r3, r3, #6
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	071b      	lsls	r3, r3, #28
 8007842:	495a      	ldr	r1, [pc, #360]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007844:	4313      	orrs	r3, r2
 8007846:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800784a:	4b57      	ldr	r3, [pc, #348]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800784c:	2201      	movs	r2, #1
 800784e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007850:	f7fd fb78 	bl	8004f44 <HAL_GetTick>
 8007854:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007856:	e008      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007858:	f7fd fb74 	bl	8004f44 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b02      	cmp	r3, #2
 8007864:	d901      	bls.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e09a      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800786a:	4b50      	ldr	r3, [pc, #320]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0f0      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 8083 	beq.w	800798a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007884:	2300      	movs	r3, #0
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	4b48      	ldr	r3, [pc, #288]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800788a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788c:	4a47      	ldr	r2, [pc, #284]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800788e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007892:	6413      	str	r3, [r2, #64]	; 0x40
 8007894:	4b45      	ldr	r3, [pc, #276]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80078a0:	4b43      	ldr	r3, [pc, #268]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a42      	ldr	r2, [pc, #264]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078aa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078ac:	f7fd fb4a 	bl	8004f44 <HAL_GetTick>
 80078b0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80078b2:	e008      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80078b4:	f7fd fb46 	bl	8004f44 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e06c      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80078c6:	4b3a      	ldr	r3, [pc, #232]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0f0      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80078d2:	4b36      	ldr	r3, [pc, #216]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078da:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d02f      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d028      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078f0:	4b2e      	ldr	r3, [pc, #184]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078f8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80078fa:	4b2e      	ldr	r3, [pc, #184]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078fc:	2201      	movs	r2, #1
 80078fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007900:	4b2c      	ldr	r3, [pc, #176]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007902:	2200      	movs	r2, #0
 8007904:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007906:	4a29      	ldr	r2, [pc, #164]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800790c:	4b27      	ldr	r3, [pc, #156]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800790e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b01      	cmp	r3, #1
 8007916:	d114      	bne.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007918:	f7fd fb14 	bl	8004f44 <HAL_GetTick>
 800791c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800791e:	e00a      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007920:	f7fd fb10 	bl	8004f44 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	f241 3288 	movw	r2, #5000	; 0x1388
 800792e:	4293      	cmp	r3, r2
 8007930:	d901      	bls.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e034      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007936:	4b1d      	ldr	r3, [pc, #116]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d0ee      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800794a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800794e:	d10d      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007950:	4b16      	ldr	r3, [pc, #88]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007964:	4911      	ldr	r1, [pc, #68]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007966:	4313      	orrs	r3, r2
 8007968:	608b      	str	r3, [r1, #8]
 800796a:	e005      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800796c:	4b0f      	ldr	r3, [pc, #60]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	4a0e      	ldr	r2, [pc, #56]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007972:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007976:	6093      	str	r3, [r2, #8]
 8007978:	4b0c      	ldr	r3, [pc, #48]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800797a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007984:	4909      	ldr	r1, [pc, #36]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007986:	4313      	orrs	r3, r2
 8007988:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0308 	and.w	r3, r3, #8
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	7d1a      	ldrb	r2, [r3, #20]
 800799a:	4b07      	ldr	r3, [pc, #28]	; (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800799c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	42470068 	.word	0x42470068
 80079ac:	40023800 	.word	0x40023800
 80079b0:	40007000 	.word	0x40007000
 80079b4:	42470e40 	.word	0x42470e40
 80079b8:	424711e0 	.word	0x424711e0

080079bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e066      	b.n	8007aa0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	7f5b      	ldrb	r3, [r3, #29]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d105      	bne.n	80079e8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fc f81c 	bl	8003a20 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2202      	movs	r2, #2
 80079ec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	22ca      	movs	r2, #202	; 0xca
 80079f4:	625a      	str	r2, [r3, #36]	; 0x24
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2253      	movs	r2, #83	; 0x53
 80079fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa45 	bl	8007e8e <RTC_EnterInitMode>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d12c      	bne.n	8007a68 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	6812      	ldr	r2, [r2, #0]
 8007a18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a20:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6899      	ldr	r1, [r3, #8]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	68d2      	ldr	r2, [r2, #12]
 8007a48:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6919      	ldr	r1, [r3, #16]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	041a      	lsls	r2, r3, #16
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fa4c 	bl	8007efc <RTC_ExitInitMode>
 8007a64:	4603      	mov	r3, r0
 8007a66:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d113      	bne.n	8007a96 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a7c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	699a      	ldr	r2, [r3, #24]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	22ff      	movs	r2, #255	; 0xff
 8007a9c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007aa8:	b590      	push	{r4, r7, lr}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	7f1b      	ldrb	r3, [r3, #28]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_RTC_SetTime+0x1c>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e087      	b.n	8007bd4 <HAL_RTC_SetTime+0x12c>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2202      	movs	r2, #2
 8007ace:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d126      	bne.n	8007b24 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d102      	bne.n	8007aea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fa29 	bl	8007f46 <RTC_ByteToBcd2>
 8007af4:	4603      	mov	r3, r0
 8007af6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	785b      	ldrb	r3, [r3, #1]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fa22 	bl	8007f46 <RTC_ByteToBcd2>
 8007b02:	4603      	mov	r3, r0
 8007b04:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007b06:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	789b      	ldrb	r3, [r3, #2]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 fa1a 	bl	8007f46 <RTC_ByteToBcd2>
 8007b12:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b14:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	78db      	ldrb	r3, [r3, #3]
 8007b1c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	617b      	str	r3, [r7, #20]
 8007b22:	e018      	b.n	8007b56 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d102      	bne.n	8007b38 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2200      	movs	r2, #0
 8007b36:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	785b      	ldrb	r3, [r3, #1]
 8007b42:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007b44:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007b4a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	78db      	ldrb	r3, [r3, #3]
 8007b50:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007b52:	4313      	orrs	r3, r2
 8007b54:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	22ca      	movs	r2, #202	; 0xca
 8007b5c:	625a      	str	r2, [r3, #36]	; 0x24
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2253      	movs	r2, #83	; 0x53
 8007b64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 f991 	bl	8007e8e <RTC_EnterInitMode>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007b70:	7cfb      	ldrb	r3, [r7, #19]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d120      	bne.n	8007bb8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007b80:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007b84:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b94:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6899      	ldr	r1, [r3, #8]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 f9a4 	bl	8007efc <RTC_ExitInitMode>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007bb8:	7cfb      	ldrb	r3, [r7, #19]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d102      	bne.n	8007bc4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	22ff      	movs	r2, #255	; 0xff
 8007bca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	771a      	strb	r2, [r3, #28]

  return status;
 8007bd2:	7cfb      	ldrb	r3, [r7, #19]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	371c      	adds	r7, #28
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd90      	pop	{r4, r7, pc}

08007bdc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007c0e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007c12:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	0c1b      	lsrs	r3, r3, #16
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	0a1b      	lsrs	r3, r3, #8
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	0d9b      	lsrs	r3, r3, #22
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d11a      	bne.n	8007c8e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 f98f 	bl	8007f80 <RTC_Bcd2ToByte>
 8007c62:	4603      	mov	r3, r0
 8007c64:	461a      	mov	r2, r3
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	785b      	ldrb	r3, [r3, #1]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 f986 	bl	8007f80 <RTC_Bcd2ToByte>
 8007c74:	4603      	mov	r3, r0
 8007c76:	461a      	mov	r2, r3
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	789b      	ldrb	r3, [r3, #2]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 f97d 	bl	8007f80 <RTC_Bcd2ToByte>
 8007c86:	4603      	mov	r3, r0
 8007c88:	461a      	mov	r2, r3
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007c98:	b590      	push	{r4, r7, lr}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	7f1b      	ldrb	r3, [r3, #28]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d101      	bne.n	8007cb4 <HAL_RTC_SetDate+0x1c>
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	e071      	b.n	8007d98 <HAL_RTC_SetDate+0x100>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10e      	bne.n	8007ce4 <HAL_RTC_SetDate+0x4c>
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	785b      	ldrb	r3, [r3, #1]
 8007cca:	f003 0310 	and.w	r3, r3, #16
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d008      	beq.n	8007ce4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	785b      	ldrb	r3, [r3, #1]
 8007cd6:	f023 0310 	bic.w	r3, r3, #16
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	330a      	adds	r3, #10
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d11c      	bne.n	8007d24 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	78db      	ldrb	r3, [r3, #3]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 f929 	bl	8007f46 <RTC_ByteToBcd2>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	785b      	ldrb	r3, [r3, #1]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 f922 	bl	8007f46 <RTC_ByteToBcd2>
 8007d02:	4603      	mov	r3, r0
 8007d04:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007d06:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	789b      	ldrb	r3, [r3, #2]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 f91a 	bl	8007f46 <RTC_ByteToBcd2>
 8007d12:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007d14:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	e00e      	b.n	8007d42 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	78db      	ldrb	r3, [r3, #3]
 8007d28:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	785b      	ldrb	r3, [r3, #1]
 8007d2e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007d30:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007d36:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	22ca      	movs	r2, #202	; 0xca
 8007d48:	625a      	str	r2, [r3, #36]	; 0x24
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2253      	movs	r2, #83	; 0x53
 8007d50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 f89b 	bl	8007e8e <RTC_EnterInitMode>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007d5c:	7cfb      	ldrb	r3, [r7, #19]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10c      	bne.n	8007d7c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d70:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f8c2 	bl	8007efc <RTC_ExitInitMode>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007d7c:	7cfb      	ldrb	r3, [r7, #19]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d102      	bne.n	8007d88 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2201      	movs	r2, #1
 8007d86:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	22ff      	movs	r2, #255	; 0xff
 8007d8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	771a      	strb	r2, [r3, #28]

  return status;
 8007d96:	7cfb      	ldrb	r3, [r7, #19]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	371c      	adds	r7, #28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd90      	pop	{r4, r7, pc}

08007da0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007dba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007dbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	0c1b      	lsrs	r3, r3, #16
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	0a1b      	lsrs	r3, r3, #8
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f003 031f 	and.w	r3, r3, #31
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	0b5b      	lsrs	r3, r3, #13
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	f003 0307 	and.w	r3, r3, #7
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d11a      	bne.n	8007e34 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	78db      	ldrb	r3, [r3, #3]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 f8bc 	bl	8007f80 <RTC_Bcd2ToByte>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 f8b3 	bl	8007f80 <RTC_Bcd2ToByte>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	789b      	ldrb	r3, [r3, #2]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 f8aa 	bl	8007f80 <RTC_Bcd2ToByte>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	461a      	mov	r2, r3
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b084      	sub	sp, #16
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68da      	ldr	r2, [r3, #12]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e58:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007e5a:	f7fd f873 	bl	8004f44 <HAL_GetTick>
 8007e5e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007e60:	e009      	b.n	8007e76 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e62:	f7fd f86f 	bl	8004f44 <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e70:	d901      	bls.n	8007e76 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e007      	b.n	8007e86 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f003 0320 	and.w	r3, r3, #32
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d0ee      	beq.n	8007e62 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d122      	bne.n	8007ef2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007eba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ebc:	f7fd f842 	bl	8004f44 <HAL_GetTick>
 8007ec0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007ec2:	e00c      	b.n	8007ede <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ec4:	f7fd f83e 	bl	8004f44 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ed2:	d904      	bls.n	8007ede <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2204      	movs	r2, #4
 8007ed8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d102      	bne.n	8007ef2 <RTC_EnterInitMode+0x64>
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d1e8      	bne.n	8007ec4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f16:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f003 0320 	and.w	r3, r3, #32
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10a      	bne.n	8007f3c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff ff89 	bl	8007e3e <HAL_RTC_WaitForSynchro>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d004      	beq.n	8007f3c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2204      	movs	r2, #4
 8007f36:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b085      	sub	sp, #20
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007f54:	e005      	b.n	8007f62 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	3b0a      	subs	r3, #10
 8007f60:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007f62:	79fb      	ldrb	r3, [r7, #7]
 8007f64:	2b09      	cmp	r3, #9
 8007f66:	d8f6      	bhi.n	8007f56 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
 8007f6a:	011b      	lsls	r3, r3, #4
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	b2db      	uxtb	r3, r3
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
 8007f90:	091b      	lsrs	r3, r3, #4
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	461a      	mov	r2, r3
 8007f96:	0092      	lsls	r2, r2, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	f003 030f 	and.w	r3, r3, #15
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
 8007fa8:	4413      	add	r3, r2
 8007faa:	b2db      	uxtb	r3, r3
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e07b      	b.n	80080c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d108      	bne.n	8007fe4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fda:	d009      	beq.n	8007ff0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	61da      	str	r2, [r3, #28]
 8007fe2:	e005      	b.n	8007ff0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d106      	bne.n	8008010 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7fb fd34 	bl	8003a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008026:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008038:	431a      	orrs	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008042:	431a      	orrs	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	431a      	orrs	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	431a      	orrs	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008060:	431a      	orrs	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008074:	ea42 0103 	orr.w	r1, r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	0c1b      	lsrs	r3, r3, #16
 800808e:	f003 0104 	and.w	r1, r3, #4
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	f003 0210 	and.w	r2, r3, #16
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69da      	ldr	r2, [r3, #28]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b088      	sub	sp, #32
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	603b      	str	r3, [r7, #0]
 80080d6:	4613      	mov	r3, r2
 80080d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d101      	bne.n	80080ec <HAL_SPI_Transmit+0x22>
 80080e8:	2302      	movs	r3, #2
 80080ea:	e126      	b.n	800833a <HAL_SPI_Transmit+0x270>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080f4:	f7fc ff26 	bl	8004f44 <HAL_GetTick>
 80080f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80080fa:	88fb      	ldrh	r3, [r7, #6]
 80080fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b01      	cmp	r3, #1
 8008108:	d002      	beq.n	8008110 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800810a:	2302      	movs	r3, #2
 800810c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800810e:	e10b      	b.n	8008328 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <HAL_SPI_Transmit+0x52>
 8008116:	88fb      	ldrh	r3, [r7, #6]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d102      	bne.n	8008122 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008120:	e102      	b.n	8008328 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2203      	movs	r2, #3
 8008126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	88fa      	ldrh	r2, [r7, #6]
 800813a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	88fa      	ldrh	r2, [r7, #6]
 8008140:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008168:	d10f      	bne.n	800818a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008178:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008188:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008194:	2b40      	cmp	r3, #64	; 0x40
 8008196:	d007      	beq.n	80081a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081b0:	d14b      	bne.n	800824a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <HAL_SPI_Transmit+0xf6>
 80081ba:	8afb      	ldrh	r3, [r7, #22]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d13e      	bne.n	800823e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c4:	881a      	ldrh	r2, [r3, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d0:	1c9a      	adds	r2, r3, #2
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081da:	b29b      	uxth	r3, r3
 80081dc:	3b01      	subs	r3, #1
 80081de:	b29a      	uxth	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80081e4:	e02b      	b.n	800823e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f003 0302 	and.w	r3, r3, #2
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d112      	bne.n	800821a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f8:	881a      	ldrh	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008204:	1c9a      	adds	r2, r3, #2
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800820e:	b29b      	uxth	r3, r3
 8008210:	3b01      	subs	r3, #1
 8008212:	b29a      	uxth	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	86da      	strh	r2, [r3, #54]	; 0x36
 8008218:	e011      	b.n	800823e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800821a:	f7fc fe93 	bl	8004f44 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d803      	bhi.n	8008232 <HAL_SPI_Transmit+0x168>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008230:	d102      	bne.n	8008238 <HAL_SPI_Transmit+0x16e>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d102      	bne.n	800823e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800823c:	e074      	b.n	8008328 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008242:	b29b      	uxth	r3, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1ce      	bne.n	80081e6 <HAL_SPI_Transmit+0x11c>
 8008248:	e04c      	b.n	80082e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <HAL_SPI_Transmit+0x18e>
 8008252:	8afb      	ldrh	r3, [r7, #22]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d140      	bne.n	80082da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	330c      	adds	r3, #12
 8008262:	7812      	ldrb	r2, [r2, #0]
 8008264:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008274:	b29b      	uxth	r3, r3
 8008276:	3b01      	subs	r3, #1
 8008278:	b29a      	uxth	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800827e:	e02c      	b.n	80082da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b02      	cmp	r3, #2
 800828c:	d113      	bne.n	80082b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	330c      	adds	r3, #12
 8008298:	7812      	ldrb	r2, [r2, #0]
 800829a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	3b01      	subs	r3, #1
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80082b4:	e011      	b.n	80082da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082b6:	f7fc fe45 	bl	8004f44 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d803      	bhi.n	80082ce <HAL_SPI_Transmit+0x204>
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082cc:	d102      	bne.n	80082d4 <HAL_SPI_Transmit+0x20a>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d102      	bne.n	80082da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80082d8:	e026      	b.n	8008328 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082de:	b29b      	uxth	r3, r3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1cd      	bne.n	8008280 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 fa55 	bl	8008798 <SPI_EndRxTxTransaction>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2220      	movs	r2, #32
 80082f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10a      	bne.n	8008318 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008302:	2300      	movs	r3, #0
 8008304:	613b      	str	r3, [r7, #16]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	613b      	str	r3, [r7, #16]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	613b      	str	r3, [r7, #16]
 8008316:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	77fb      	strb	r3, [r7, #31]
 8008324:	e000      	b.n	8008328 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008326:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008338:	7ffb      	ldrb	r3, [r7, #31]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3720      	adds	r7, #32
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b08c      	sub	sp, #48	; 0x30
 8008346:	af00      	add	r7, sp, #0
 8008348:	60f8      	str	r0, [r7, #12]
 800834a:	60b9      	str	r1, [r7, #8]
 800834c:	607a      	str	r2, [r7, #4]
 800834e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008350:	2301      	movs	r3, #1
 8008352:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008360:	2b01      	cmp	r3, #1
 8008362:	d101      	bne.n	8008368 <HAL_SPI_TransmitReceive+0x26>
 8008364:	2302      	movs	r3, #2
 8008366:	e18a      	b.n	800867e <HAL_SPI_TransmitReceive+0x33c>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008370:	f7fc fde8 	bl	8004f44 <HAL_GetTick>
 8008374:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800837c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008386:	887b      	ldrh	r3, [r7, #2]
 8008388:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800838a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800838e:	2b01      	cmp	r3, #1
 8008390:	d00f      	beq.n	80083b2 <HAL_SPI_TransmitReceive+0x70>
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008398:	d107      	bne.n	80083aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d103      	bne.n	80083aa <HAL_SPI_TransmitReceive+0x68>
 80083a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d003      	beq.n	80083b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80083aa:	2302      	movs	r3, #2
 80083ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083b0:	e15b      	b.n	800866a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d005      	beq.n	80083c4 <HAL_SPI_TransmitReceive+0x82>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d002      	beq.n	80083c4 <HAL_SPI_TransmitReceive+0x82>
 80083be:	887b      	ldrh	r3, [r7, #2]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d103      	bne.n	80083cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083ca:	e14e      	b.n	800866a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b04      	cmp	r3, #4
 80083d6:	d003      	beq.n	80083e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2205      	movs	r2, #5
 80083dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	887a      	ldrh	r2, [r7, #2]
 80083f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	887a      	ldrh	r2, [r7, #2]
 80083f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	887a      	ldrh	r2, [r7, #2]
 8008402:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	887a      	ldrh	r2, [r7, #2]
 8008408:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008420:	2b40      	cmp	r3, #64	; 0x40
 8008422:	d007      	beq.n	8008434 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008432:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800843c:	d178      	bne.n	8008530 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d002      	beq.n	800844c <HAL_SPI_TransmitReceive+0x10a>
 8008446:	8b7b      	ldrh	r3, [r7, #26]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d166      	bne.n	800851a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008450:	881a      	ldrh	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845c:	1c9a      	adds	r2, r3, #2
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008466:	b29b      	uxth	r3, r3
 8008468:	3b01      	subs	r3, #1
 800846a:	b29a      	uxth	r2, r3
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008470:	e053      	b.n	800851a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f003 0302 	and.w	r3, r3, #2
 800847c:	2b02      	cmp	r3, #2
 800847e:	d11b      	bne.n	80084b8 <HAL_SPI_TransmitReceive+0x176>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008484:	b29b      	uxth	r3, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	d016      	beq.n	80084b8 <HAL_SPI_TransmitReceive+0x176>
 800848a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848c:	2b01      	cmp	r3, #1
 800848e:	d113      	bne.n	80084b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008494:	881a      	ldrh	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a0:	1c9a      	adds	r2, r3, #2
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	3b01      	subs	r3, #1
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d119      	bne.n	80084fa <HAL_SPI_TransmitReceive+0x1b8>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d014      	beq.n	80084fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68da      	ldr	r2, [r3, #12]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084da:	b292      	uxth	r2, r2
 80084dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e2:	1c9a      	adds	r2, r3, #2
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084f6:	2301      	movs	r3, #1
 80084f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80084fa:	f7fc fd23 	bl	8004f44 <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008506:	429a      	cmp	r2, r3
 8008508:	d807      	bhi.n	800851a <HAL_SPI_TransmitReceive+0x1d8>
 800850a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008510:	d003      	beq.n	800851a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008518:	e0a7      	b.n	800866a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800851e:	b29b      	uxth	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1a6      	bne.n	8008472 <HAL_SPI_TransmitReceive+0x130>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008528:	b29b      	uxth	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1a1      	bne.n	8008472 <HAL_SPI_TransmitReceive+0x130>
 800852e:	e07c      	b.n	800862a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <HAL_SPI_TransmitReceive+0x1fc>
 8008538:	8b7b      	ldrh	r3, [r7, #26]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d16b      	bne.n	8008616 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	330c      	adds	r3, #12
 8008548:	7812      	ldrb	r2, [r2, #0]
 800854a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800855a:	b29b      	uxth	r3, r3
 800855c:	3b01      	subs	r3, #1
 800855e:	b29a      	uxth	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008564:	e057      	b.n	8008616 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f003 0302 	and.w	r3, r3, #2
 8008570:	2b02      	cmp	r3, #2
 8008572:	d11c      	bne.n	80085ae <HAL_SPI_TransmitReceive+0x26c>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008578:	b29b      	uxth	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d017      	beq.n	80085ae <HAL_SPI_TransmitReceive+0x26c>
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	2b01      	cmp	r3, #1
 8008582:	d114      	bne.n	80085ae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	330c      	adds	r3, #12
 800858e:	7812      	ldrb	r2, [r2, #0]
 8008590:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	3b01      	subs	r3, #1
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f003 0301 	and.w	r3, r3, #1
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d119      	bne.n	80085f0 <HAL_SPI_TransmitReceive+0x2ae>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d014      	beq.n	80085f0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68da      	ldr	r2, [r3, #12]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d0:	b2d2      	uxtb	r2, r2
 80085d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d8:	1c5a      	adds	r2, r3, #1
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	3b01      	subs	r3, #1
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085ec:	2301      	movs	r3, #1
 80085ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085f0:	f7fc fca8 	bl	8004f44 <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d803      	bhi.n	8008608 <HAL_SPI_TransmitReceive+0x2c6>
 8008600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008606:	d102      	bne.n	800860e <HAL_SPI_TransmitReceive+0x2cc>
 8008608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860a:	2b00      	cmp	r3, #0
 800860c:	d103      	bne.n	8008616 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008614:	e029      	b.n	800866a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800861a:	b29b      	uxth	r3, r3
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1a2      	bne.n	8008566 <HAL_SPI_TransmitReceive+0x224>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008624:	b29b      	uxth	r3, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d19d      	bne.n	8008566 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800862a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800862c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 f8b2 	bl	8008798 <SPI_EndRxTxTransaction>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d006      	beq.n	8008648 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2220      	movs	r2, #32
 8008644:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008646:	e010      	b.n	800866a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10b      	bne.n	8008668 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008650:	2300      	movs	r3, #0
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	e000      	b.n	800866a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008668:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800867a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800867e:	4618      	mov	r0, r3
 8008680:	3730      	adds	r7, #48	; 0x30
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
	...

08008688 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b088      	sub	sp, #32
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	603b      	str	r3, [r7, #0]
 8008694:	4613      	mov	r3, r2
 8008696:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008698:	f7fc fc54 	bl	8004f44 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	1a9b      	subs	r3, r3, r2
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	4413      	add	r3, r2
 80086a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086a8:	f7fc fc4c 	bl	8004f44 <HAL_GetTick>
 80086ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086ae:	4b39      	ldr	r3, [pc, #228]	; (8008794 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	015b      	lsls	r3, r3, #5
 80086b4:	0d1b      	lsrs	r3, r3, #20
 80086b6:	69fa      	ldr	r2, [r7, #28]
 80086b8:	fb02 f303 	mul.w	r3, r2, r3
 80086bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086be:	e054      	b.n	800876a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c6:	d050      	beq.n	800876a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086c8:	f7fc fc3c 	bl	8004f44 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d902      	bls.n	80086de <SPI_WaitFlagStateUntilTimeout+0x56>
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d13d      	bne.n	800875a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685a      	ldr	r2, [r3, #4]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80086ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086f6:	d111      	bne.n	800871c <SPI_WaitFlagStateUntilTimeout+0x94>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008700:	d004      	beq.n	800870c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800870a:	d107      	bne.n	800871c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800871a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008724:	d10f      	bne.n	8008746 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008744:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e017      	b.n	800878a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	3b01      	subs	r3, #1
 8008768:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	4013      	ands	r3, r2
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	429a      	cmp	r2, r3
 8008778:	bf0c      	ite	eq
 800877a:	2301      	moveq	r3, #1
 800877c:	2300      	movne	r3, #0
 800877e:	b2db      	uxtb	r3, r3
 8008780:	461a      	mov	r2, r3
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	429a      	cmp	r2, r3
 8008786:	d19b      	bne.n	80086c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3720      	adds	r7, #32
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	200008a0 	.word	0x200008a0

08008798 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b088      	sub	sp, #32
 800879c:	af02      	add	r7, sp, #8
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80087a4:	4b1b      	ldr	r3, [pc, #108]	; (8008814 <SPI_EndRxTxTransaction+0x7c>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a1b      	ldr	r2, [pc, #108]	; (8008818 <SPI_EndRxTxTransaction+0x80>)
 80087aa:	fba2 2303 	umull	r2, r3, r2, r3
 80087ae:	0d5b      	lsrs	r3, r3, #21
 80087b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087b4:	fb02 f303 	mul.w	r3, r2, r3
 80087b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087c2:	d112      	bne.n	80087ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2200      	movs	r2, #0
 80087cc:	2180      	movs	r1, #128	; 0x80
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f7ff ff5a 	bl	8008688 <SPI_WaitFlagStateUntilTimeout>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d016      	beq.n	8008808 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087de:	f043 0220 	orr.w	r2, r3, #32
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e00f      	b.n	800880a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008800:	2b80      	cmp	r3, #128	; 0x80
 8008802:	d0f2      	beq.n	80087ea <SPI_EndRxTxTransaction+0x52>
 8008804:	e000      	b.n	8008808 <SPI_EndRxTxTransaction+0x70>
        break;
 8008806:	bf00      	nop
  }

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	200008a0 	.word	0x200008a0
 8008818:	165e9f81 	.word	0x165e9f81

0800881c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e041      	b.n	80088b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d106      	bne.n	8008848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7fb f9c8 	bl	8003bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	3304      	adds	r3, #4
 8008858:	4619      	mov	r1, r3
 800885a:	4610      	mov	r0, r2
 800885c:	f000 fe52 	bl	8009504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
	...

080088bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d001      	beq.n	80088d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e03c      	b.n	800894e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2202      	movs	r2, #2
 80088d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a1e      	ldr	r2, [pc, #120]	; (800895c <HAL_TIM_Base_Start+0xa0>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d018      	beq.n	8008918 <HAL_TIM_Base_Start+0x5c>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ee:	d013      	beq.n	8008918 <HAL_TIM_Base_Start+0x5c>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a1a      	ldr	r2, [pc, #104]	; (8008960 <HAL_TIM_Base_Start+0xa4>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d00e      	beq.n	8008918 <HAL_TIM_Base_Start+0x5c>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a19      	ldr	r2, [pc, #100]	; (8008964 <HAL_TIM_Base_Start+0xa8>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d009      	beq.n	8008918 <HAL_TIM_Base_Start+0x5c>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a17      	ldr	r2, [pc, #92]	; (8008968 <HAL_TIM_Base_Start+0xac>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d004      	beq.n	8008918 <HAL_TIM_Base_Start+0x5c>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a16      	ldr	r2, [pc, #88]	; (800896c <HAL_TIM_Base_Start+0xb0>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d111      	bne.n	800893c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f003 0307 	and.w	r3, r3, #7
 8008922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2b06      	cmp	r3, #6
 8008928:	d010      	beq.n	800894c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f042 0201 	orr.w	r2, r2, #1
 8008938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800893a:	e007      	b.n	800894c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0201 	orr.w	r2, r2, #1
 800894a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	40010000 	.word	0x40010000
 8008960:	40000400 	.word	0x40000400
 8008964:	40000800 	.word	0x40000800
 8008968:	40000c00 	.word	0x40000c00
 800896c:	40014000 	.word	0x40014000

08008970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b01      	cmp	r3, #1
 8008982:	d001      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e044      	b.n	8008a12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2202      	movs	r2, #2
 800898c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68da      	ldr	r2, [r3, #12]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f042 0201 	orr.w	r2, r2, #1
 800899e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a1e      	ldr	r2, [pc, #120]	; (8008a20 <HAL_TIM_Base_Start_IT+0xb0>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d018      	beq.n	80089dc <HAL_TIM_Base_Start_IT+0x6c>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089b2:	d013      	beq.n	80089dc <HAL_TIM_Base_Start_IT+0x6c>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a1a      	ldr	r2, [pc, #104]	; (8008a24 <HAL_TIM_Base_Start_IT+0xb4>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d00e      	beq.n	80089dc <HAL_TIM_Base_Start_IT+0x6c>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a19      	ldr	r2, [pc, #100]	; (8008a28 <HAL_TIM_Base_Start_IT+0xb8>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d009      	beq.n	80089dc <HAL_TIM_Base_Start_IT+0x6c>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a17      	ldr	r2, [pc, #92]	; (8008a2c <HAL_TIM_Base_Start_IT+0xbc>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d004      	beq.n	80089dc <HAL_TIM_Base_Start_IT+0x6c>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a16      	ldr	r2, [pc, #88]	; (8008a30 <HAL_TIM_Base_Start_IT+0xc0>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d111      	bne.n	8008a00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f003 0307 	and.w	r3, r3, #7
 80089e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2b06      	cmp	r3, #6
 80089ec:	d010      	beq.n	8008a10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f042 0201 	orr.w	r2, r2, #1
 80089fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089fe:	e007      	b.n	8008a10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0201 	orr.w	r2, r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	40010000 	.word	0x40010000
 8008a24:	40000400 	.word	0x40000400
 8008a28:	40000800 	.word	0x40000800
 8008a2c:	40000c00 	.word	0x40000c00
 8008a30:	40014000 	.word	0x40014000

08008a34 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68da      	ldr	r2, [r3, #12]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f022 0201 	bic.w	r2, r2, #1
 8008a4a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6a1a      	ldr	r2, [r3, #32]
 8008a52:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a56:	4013      	ands	r3, r2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10f      	bne.n	8008a7c <HAL_TIM_Base_Stop_IT+0x48>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6a1a      	ldr	r2, [r3, #32]
 8008a62:	f240 4344 	movw	r3, #1092	; 0x444
 8008a66:	4013      	ands	r3, r2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d107      	bne.n	8008a7c <HAL_TIM_Base_Stop_IT+0x48>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0201 	bic.w	r2, r2, #1
 8008a7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b082      	sub	sp, #8
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e041      	b.n	8008b28 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d106      	bne.n	8008abe <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f839 	bl	8008b30 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	3304      	adds	r3, #4
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	f000 fd17 	bl	8009504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d109      	bne.n	8008b6c <HAL_TIM_OC_Start_IT+0x28>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	bf14      	ite	ne
 8008b64:	2301      	movne	r3, #1
 8008b66:	2300      	moveq	r3, #0
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	e022      	b.n	8008bb2 <HAL_TIM_OC_Start_IT+0x6e>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d109      	bne.n	8008b86 <HAL_TIM_OC_Start_IT+0x42>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	bf14      	ite	ne
 8008b7e:	2301      	movne	r3, #1
 8008b80:	2300      	moveq	r3, #0
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	e015      	b.n	8008bb2 <HAL_TIM_OC_Start_IT+0x6e>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	d109      	bne.n	8008ba0 <HAL_TIM_OC_Start_IT+0x5c>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	bf14      	ite	ne
 8008b98:	2301      	movne	r3, #1
 8008b9a:	2300      	moveq	r3, #0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	e008      	b.n	8008bb2 <HAL_TIM_OC_Start_IT+0x6e>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	bf14      	ite	ne
 8008bac:	2301      	movne	r3, #1
 8008bae:	2300      	moveq	r3, #0
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e0b3      	b.n	8008d22 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d104      	bne.n	8008bca <HAL_TIM_OC_Start_IT+0x86>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bc8:	e013      	b.n	8008bf2 <HAL_TIM_OC_Start_IT+0xae>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d104      	bne.n	8008bda <HAL_TIM_OC_Start_IT+0x96>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bd8:	e00b      	b.n	8008bf2 <HAL_TIM_OC_Start_IT+0xae>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d104      	bne.n	8008bea <HAL_TIM_OC_Start_IT+0xa6>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2202      	movs	r2, #2
 8008be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008be8:	e003      	b.n	8008bf2 <HAL_TIM_OC_Start_IT+0xae>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2202      	movs	r2, #2
 8008bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b0c      	cmp	r3, #12
 8008bf6:	d841      	bhi.n	8008c7c <HAL_TIM_OC_Start_IT+0x138>
 8008bf8:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <HAL_TIM_OC_Start_IT+0xbc>)
 8008bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfe:	bf00      	nop
 8008c00:	08008c35 	.word	0x08008c35
 8008c04:	08008c7d 	.word	0x08008c7d
 8008c08:	08008c7d 	.word	0x08008c7d
 8008c0c:	08008c7d 	.word	0x08008c7d
 8008c10:	08008c47 	.word	0x08008c47
 8008c14:	08008c7d 	.word	0x08008c7d
 8008c18:	08008c7d 	.word	0x08008c7d
 8008c1c:	08008c7d 	.word	0x08008c7d
 8008c20:	08008c59 	.word	0x08008c59
 8008c24:	08008c7d 	.word	0x08008c7d
 8008c28:	08008c7d 	.word	0x08008c7d
 8008c2c:	08008c7d 	.word	0x08008c7d
 8008c30:	08008c6b 	.word	0x08008c6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f042 0202 	orr.w	r2, r2, #2
 8008c42:	60da      	str	r2, [r3, #12]
      break;
 8008c44:	e01d      	b.n	8008c82 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68da      	ldr	r2, [r3, #12]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f042 0204 	orr.w	r2, r2, #4
 8008c54:	60da      	str	r2, [r3, #12]
      break;
 8008c56:	e014      	b.n	8008c82 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68da      	ldr	r2, [r3, #12]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f042 0208 	orr.w	r2, r2, #8
 8008c66:	60da      	str	r2, [r3, #12]
      break;
 8008c68:	e00b      	b.n	8008c82 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68da      	ldr	r2, [r3, #12]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f042 0210 	orr.w	r2, r2, #16
 8008c78:	60da      	str	r2, [r3, #12]
      break;
 8008c7a:	e002      	b.n	8008c82 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c80:	bf00      	nop
  }

  if (status == HAL_OK)
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d14b      	bne.n	8008d20 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fedd 	bl	8009a50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a24      	ldr	r2, [pc, #144]	; (8008d2c <HAL_TIM_OC_Start_IT+0x1e8>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d107      	bne.n	8008cb0 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a1d      	ldr	r2, [pc, #116]	; (8008d2c <HAL_TIM_OC_Start_IT+0x1e8>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d018      	beq.n	8008cec <HAL_TIM_OC_Start_IT+0x1a8>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cc2:	d013      	beq.n	8008cec <HAL_TIM_OC_Start_IT+0x1a8>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a19      	ldr	r2, [pc, #100]	; (8008d30 <HAL_TIM_OC_Start_IT+0x1ec>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d00e      	beq.n	8008cec <HAL_TIM_OC_Start_IT+0x1a8>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a18      	ldr	r2, [pc, #96]	; (8008d34 <HAL_TIM_OC_Start_IT+0x1f0>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d009      	beq.n	8008cec <HAL_TIM_OC_Start_IT+0x1a8>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a16      	ldr	r2, [pc, #88]	; (8008d38 <HAL_TIM_OC_Start_IT+0x1f4>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d004      	beq.n	8008cec <HAL_TIM_OC_Start_IT+0x1a8>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a15      	ldr	r2, [pc, #84]	; (8008d3c <HAL_TIM_OC_Start_IT+0x1f8>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d111      	bne.n	8008d10 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	2b06      	cmp	r3, #6
 8008cfc:	d010      	beq.n	8008d20 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f042 0201 	orr.w	r2, r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d0e:	e007      	b.n	8008d20 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0201 	orr.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	40010000 	.word	0x40010000
 8008d30:	40000400 	.word	0x40000400
 8008d34:	40000800 	.word	0x40000800
 8008d38:	40000c00 	.word	0x40000c00
 8008d3c:	40014000 	.word	0x40014000

08008d40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e097      	b.n	8008e84 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d106      	bne.n	8008d6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7fa fedd 	bl	8003b28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2202      	movs	r2, #2
 8008d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	6812      	ldr	r2, [r2, #0]
 8008d80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d84:	f023 0307 	bic.w	r3, r3, #7
 8008d88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3304      	adds	r3, #4
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f000 fbb5 	bl	8009504 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6a1b      	ldr	r3, [r3, #32]
 8008db0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dc2:	f023 0303 	bic.w	r3, r3, #3
 8008dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	689a      	ldr	r2, [r3, #8]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008de0:	f023 030c 	bic.w	r3, r3, #12
 8008de4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	021b      	lsls	r3, r3, #8
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	011a      	lsls	r2, r3, #4
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	031b      	lsls	r3, r3, #12
 8008e10:	4313      	orrs	r3, r2
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008e1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008e26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	011b      	lsls	r3, r3, #4
 8008e32:	4313      	orrs	r3, r2
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e9c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ea4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008eac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008eb4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d110      	bne.n	8008ede <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d102      	bne.n	8008ec8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ec2:	7b7b      	ldrb	r3, [r7, #13]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d001      	beq.n	8008ecc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e089      	b.n	8008fe0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008edc:	e031      	b.n	8008f42 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	d110      	bne.n	8008f06 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ee4:	7bbb      	ldrb	r3, [r7, #14]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d102      	bne.n	8008ef0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008eea:	7b3b      	ldrb	r3, [r7, #12]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d001      	beq.n	8008ef4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e075      	b.n	8008fe0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2202      	movs	r2, #2
 8008f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f04:	e01d      	b.n	8008f42 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d108      	bne.n	8008f1e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d105      	bne.n	8008f1e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f12:	7b7b      	ldrb	r3, [r7, #13]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d102      	bne.n	8008f1e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f18:	7b3b      	ldrb	r3, [r7, #12]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d001      	beq.n	8008f22 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e05e      	b.n	8008fe0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2202      	movs	r2, #2
 8008f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2202      	movs	r2, #2
 8008f2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2202      	movs	r2, #2
 8008f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <HAL_TIM_Encoder_Start_IT+0xc4>
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	2b04      	cmp	r3, #4
 8008f4c:	d010      	beq.n	8008f70 <HAL_TIM_Encoder_Start_IT+0xe4>
 8008f4e:	e01f      	b.n	8008f90 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2201      	movs	r2, #1
 8008f56:	2100      	movs	r1, #0
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 fd79 	bl	8009a50 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f042 0202 	orr.w	r2, r2, #2
 8008f6c:	60da      	str	r2, [r3, #12]
      break;
 8008f6e:	e02e      	b.n	8008fce <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2201      	movs	r2, #1
 8008f76:	2104      	movs	r1, #4
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 fd69 	bl	8009a50 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68da      	ldr	r2, [r3, #12]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f042 0204 	orr.w	r2, r2, #4
 8008f8c:	60da      	str	r2, [r3, #12]
      break;
 8008f8e:	e01e      	b.n	8008fce <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2201      	movs	r2, #1
 8008f96:	2100      	movs	r1, #0
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 fd59 	bl	8009a50 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	2104      	movs	r1, #4
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 fd52 	bl	8009a50 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68da      	ldr	r2, [r3, #12]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f042 0202 	orr.w	r2, r2, #2
 8008fba:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f042 0204 	orr.w	r2, r2, #4
 8008fca:	60da      	str	r2, [r3, #12]
      break;
 8008fcc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f042 0201 	orr.w	r2, r2, #1
 8008fdc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	f003 0302 	and.w	r3, r3, #2
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d122      	bne.n	8009044 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f003 0302 	and.w	r3, r3, #2
 8009008:	2b02      	cmp	r3, #2
 800900a:	d11b      	bne.n	8009044 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f06f 0202 	mvn.w	r2, #2
 8009014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2201      	movs	r2, #1
 800901a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fa4c 	bl	80094c8 <HAL_TIM_IC_CaptureCallback>
 8009030:	e005      	b.n	800903e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7f8 fc30 	bl	8001898 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fa4f 	bl	80094dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	f003 0304 	and.w	r3, r3, #4
 800904e:	2b04      	cmp	r3, #4
 8009050:	d122      	bne.n	8009098 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f003 0304 	and.w	r3, r3, #4
 800905c:	2b04      	cmp	r3, #4
 800905e:	d11b      	bne.n	8009098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f06f 0204 	mvn.w	r2, #4
 8009068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2202      	movs	r2, #2
 800906e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fa22 	bl	80094c8 <HAL_TIM_IC_CaptureCallback>
 8009084:	e005      	b.n	8009092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7f8 fc06 	bl	8001898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fa25 	bl	80094dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	f003 0308 	and.w	r3, r3, #8
 80090a2:	2b08      	cmp	r3, #8
 80090a4:	d122      	bne.n	80090ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	f003 0308 	and.w	r3, r3, #8
 80090b0:	2b08      	cmp	r3, #8
 80090b2:	d11b      	bne.n	80090ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f06f 0208 	mvn.w	r2, #8
 80090bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2204      	movs	r2, #4
 80090c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	f003 0303 	and.w	r3, r3, #3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f9f8 	bl	80094c8 <HAL_TIM_IC_CaptureCallback>
 80090d8:	e005      	b.n	80090e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f7f8 fbdc 	bl	8001898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f9fb 	bl	80094dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	f003 0310 	and.w	r3, r3, #16
 80090f6:	2b10      	cmp	r3, #16
 80090f8:	d122      	bne.n	8009140 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f003 0310 	and.w	r3, r3, #16
 8009104:	2b10      	cmp	r3, #16
 8009106:	d11b      	bne.n	8009140 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f06f 0210 	mvn.w	r2, #16
 8009110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2208      	movs	r2, #8
 8009116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f9ce 	bl	80094c8 <HAL_TIM_IC_CaptureCallback>
 800912c:	e005      	b.n	800913a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7f8 fbb2 	bl	8001898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f9d1 	bl	80094dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b01      	cmp	r3, #1
 800914c:	d10e      	bne.n	800916c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	2b01      	cmp	r3, #1
 800915a:	d107      	bne.n	800916c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f06f 0201 	mvn.w	r2, #1
 8009164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7f8 fb74 	bl	8001854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009176:	2b80      	cmp	r3, #128	; 0x80
 8009178:	d10e      	bne.n	8009198 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009184:	2b80      	cmp	r3, #128	; 0x80
 8009186:	d107      	bne.n	8009198 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fcfa 	bl	8009b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a2:	2b40      	cmp	r3, #64	; 0x40
 80091a4:	d10e      	bne.n	80091c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b0:	2b40      	cmp	r3, #64	; 0x40
 80091b2:	d107      	bne.n	80091c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f996 	bl	80094f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	f003 0320 	and.w	r3, r3, #32
 80091ce:	2b20      	cmp	r3, #32
 80091d0:	d10e      	bne.n	80091f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f003 0320 	and.w	r3, r3, #32
 80091dc:	2b20      	cmp	r3, #32
 80091de:	d107      	bne.n	80091f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f06f 0220 	mvn.w	r2, #32
 80091e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fcc4 	bl	8009b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800920e:	2b01      	cmp	r3, #1
 8009210:	d101      	bne.n	8009216 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009212:	2302      	movs	r3, #2
 8009214:	e048      	b.n	80092a8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2201      	movs	r2, #1
 800921a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b0c      	cmp	r3, #12
 8009222:	d839      	bhi.n	8009298 <HAL_TIM_OC_ConfigChannel+0xa0>
 8009224:	a201      	add	r2, pc, #4	; (adr r2, 800922c <HAL_TIM_OC_ConfigChannel+0x34>)
 8009226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922a:	bf00      	nop
 800922c:	08009261 	.word	0x08009261
 8009230:	08009299 	.word	0x08009299
 8009234:	08009299 	.word	0x08009299
 8009238:	08009299 	.word	0x08009299
 800923c:	0800926f 	.word	0x0800926f
 8009240:	08009299 	.word	0x08009299
 8009244:	08009299 	.word	0x08009299
 8009248:	08009299 	.word	0x08009299
 800924c:	0800927d 	.word	0x0800927d
 8009250:	08009299 	.word	0x08009299
 8009254:	08009299 	.word	0x08009299
 8009258:	08009299 	.word	0x08009299
 800925c:	0800928b 	.word	0x0800928b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68b9      	ldr	r1, [r7, #8]
 8009266:	4618      	mov	r0, r3
 8009268:	f000 f9cc 	bl	8009604 <TIM_OC1_SetConfig>
      break;
 800926c:	e017      	b.n	800929e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68b9      	ldr	r1, [r7, #8]
 8009274:	4618      	mov	r0, r3
 8009276:	f000 fa2b 	bl	80096d0 <TIM_OC2_SetConfig>
      break;
 800927a:	e010      	b.n	800929e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68b9      	ldr	r1, [r7, #8]
 8009282:	4618      	mov	r0, r3
 8009284:	f000 fa90 	bl	80097a8 <TIM_OC3_SetConfig>
      break;
 8009288:	e009      	b.n	800929e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68b9      	ldr	r1, [r7, #8]
 8009290:	4618      	mov	r0, r3
 8009292:	f000 faf3 	bl	800987c <TIM_OC4_SetConfig>
      break;
 8009296:	e002      	b.n	800929e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	75fb      	strb	r3, [r7, #23]
      break;
 800929c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3718      	adds	r7, #24
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d101      	bne.n	80092cc <HAL_TIM_ConfigClockSource+0x1c>
 80092c8:	2302      	movs	r3, #2
 80092ca:	e0b4      	b.n	8009436 <HAL_TIM_ConfigClockSource+0x186>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2202      	movs	r2, #2
 80092d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80092ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009304:	d03e      	beq.n	8009384 <HAL_TIM_ConfigClockSource+0xd4>
 8009306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800930a:	f200 8087 	bhi.w	800941c <HAL_TIM_ConfigClockSource+0x16c>
 800930e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009312:	f000 8086 	beq.w	8009422 <HAL_TIM_ConfigClockSource+0x172>
 8009316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800931a:	d87f      	bhi.n	800941c <HAL_TIM_ConfigClockSource+0x16c>
 800931c:	2b70      	cmp	r3, #112	; 0x70
 800931e:	d01a      	beq.n	8009356 <HAL_TIM_ConfigClockSource+0xa6>
 8009320:	2b70      	cmp	r3, #112	; 0x70
 8009322:	d87b      	bhi.n	800941c <HAL_TIM_ConfigClockSource+0x16c>
 8009324:	2b60      	cmp	r3, #96	; 0x60
 8009326:	d050      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x11a>
 8009328:	2b60      	cmp	r3, #96	; 0x60
 800932a:	d877      	bhi.n	800941c <HAL_TIM_ConfigClockSource+0x16c>
 800932c:	2b50      	cmp	r3, #80	; 0x50
 800932e:	d03c      	beq.n	80093aa <HAL_TIM_ConfigClockSource+0xfa>
 8009330:	2b50      	cmp	r3, #80	; 0x50
 8009332:	d873      	bhi.n	800941c <HAL_TIM_ConfigClockSource+0x16c>
 8009334:	2b40      	cmp	r3, #64	; 0x40
 8009336:	d058      	beq.n	80093ea <HAL_TIM_ConfigClockSource+0x13a>
 8009338:	2b40      	cmp	r3, #64	; 0x40
 800933a:	d86f      	bhi.n	800941c <HAL_TIM_ConfigClockSource+0x16c>
 800933c:	2b30      	cmp	r3, #48	; 0x30
 800933e:	d064      	beq.n	800940a <HAL_TIM_ConfigClockSource+0x15a>
 8009340:	2b30      	cmp	r3, #48	; 0x30
 8009342:	d86b      	bhi.n	800941c <HAL_TIM_ConfigClockSource+0x16c>
 8009344:	2b20      	cmp	r3, #32
 8009346:	d060      	beq.n	800940a <HAL_TIM_ConfigClockSource+0x15a>
 8009348:	2b20      	cmp	r3, #32
 800934a:	d867      	bhi.n	800941c <HAL_TIM_ConfigClockSource+0x16c>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d05c      	beq.n	800940a <HAL_TIM_ConfigClockSource+0x15a>
 8009350:	2b10      	cmp	r3, #16
 8009352:	d05a      	beq.n	800940a <HAL_TIM_ConfigClockSource+0x15a>
 8009354:	e062      	b.n	800941c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6818      	ldr	r0, [r3, #0]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	6899      	ldr	r1, [r3, #8]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	f000 fb53 	bl	8009a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	609a      	str	r2, [r3, #8]
      break;
 8009382:	e04f      	b.n	8009424 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	6899      	ldr	r1, [r3, #8]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f000 fb3c 	bl	8009a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689a      	ldr	r2, [r3, #8]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093a6:	609a      	str	r2, [r3, #8]
      break;
 80093a8:	e03c      	b.n	8009424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6818      	ldr	r0, [r3, #0]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	6859      	ldr	r1, [r3, #4]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	461a      	mov	r2, r3
 80093b8:	f000 fab0 	bl	800991c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2150      	movs	r1, #80	; 0x50
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 fb09 	bl	80099da <TIM_ITRx_SetConfig>
      break;
 80093c8:	e02c      	b.n	8009424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	6859      	ldr	r1, [r3, #4]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	461a      	mov	r2, r3
 80093d8:	f000 facf 	bl	800997a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2160      	movs	r1, #96	; 0x60
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 faf9 	bl	80099da <TIM_ITRx_SetConfig>
      break;
 80093e8:	e01c      	b.n	8009424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6818      	ldr	r0, [r3, #0]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	6859      	ldr	r1, [r3, #4]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	461a      	mov	r2, r3
 80093f8:	f000 fa90 	bl	800991c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2140      	movs	r1, #64	; 0x40
 8009402:	4618      	mov	r0, r3
 8009404:	f000 fae9 	bl	80099da <TIM_ITRx_SetConfig>
      break;
 8009408:	e00c      	b.n	8009424 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4619      	mov	r1, r3
 8009414:	4610      	mov	r0, r2
 8009416:	f000 fae0 	bl	80099da <TIM_ITRx_SetConfig>
      break;
 800941a:	e003      	b.n	8009424 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	73fb      	strb	r3, [r7, #15]
      break;
 8009420:	e000      	b.n	8009424 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009434:	7bfb      	ldrb	r3, [r7, #15]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800944a:	2300      	movs	r3, #0
 800944c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2b0c      	cmp	r3, #12
 8009452:	d831      	bhi.n	80094b8 <HAL_TIM_ReadCapturedValue+0x78>
 8009454:	a201      	add	r2, pc, #4	; (adr r2, 800945c <HAL_TIM_ReadCapturedValue+0x1c>)
 8009456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945a:	bf00      	nop
 800945c:	08009491 	.word	0x08009491
 8009460:	080094b9 	.word	0x080094b9
 8009464:	080094b9 	.word	0x080094b9
 8009468:	080094b9 	.word	0x080094b9
 800946c:	0800949b 	.word	0x0800949b
 8009470:	080094b9 	.word	0x080094b9
 8009474:	080094b9 	.word	0x080094b9
 8009478:	080094b9 	.word	0x080094b9
 800947c:	080094a5 	.word	0x080094a5
 8009480:	080094b9 	.word	0x080094b9
 8009484:	080094b9 	.word	0x080094b9
 8009488:	080094b9 	.word	0x080094b9
 800948c:	080094af 	.word	0x080094af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009496:	60fb      	str	r3, [r7, #12]

      break;
 8009498:	e00f      	b.n	80094ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a0:	60fb      	str	r3, [r7, #12]

      break;
 80094a2:	e00a      	b.n	80094ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094aa:	60fb      	str	r3, [r7, #12]

      break;
 80094ac:	e005      	b.n	80094ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b4:	60fb      	str	r3, [r7, #12]

      break;
 80094b6:	e000      	b.n	80094ba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80094b8:	bf00      	nop
  }

  return tmpreg;
 80094ba:	68fb      	ldr	r3, [r7, #12]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a34      	ldr	r2, [pc, #208]	; (80095e8 <TIM_Base_SetConfig+0xe4>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d00f      	beq.n	800953c <TIM_Base_SetConfig+0x38>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009522:	d00b      	beq.n	800953c <TIM_Base_SetConfig+0x38>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a31      	ldr	r2, [pc, #196]	; (80095ec <TIM_Base_SetConfig+0xe8>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d007      	beq.n	800953c <TIM_Base_SetConfig+0x38>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a30      	ldr	r2, [pc, #192]	; (80095f0 <TIM_Base_SetConfig+0xec>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d003      	beq.n	800953c <TIM_Base_SetConfig+0x38>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a2f      	ldr	r2, [pc, #188]	; (80095f4 <TIM_Base_SetConfig+0xf0>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d108      	bne.n	800954e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	4313      	orrs	r3, r2
 800954c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a25      	ldr	r2, [pc, #148]	; (80095e8 <TIM_Base_SetConfig+0xe4>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d01b      	beq.n	800958e <TIM_Base_SetConfig+0x8a>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800955c:	d017      	beq.n	800958e <TIM_Base_SetConfig+0x8a>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a22      	ldr	r2, [pc, #136]	; (80095ec <TIM_Base_SetConfig+0xe8>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d013      	beq.n	800958e <TIM_Base_SetConfig+0x8a>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a21      	ldr	r2, [pc, #132]	; (80095f0 <TIM_Base_SetConfig+0xec>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d00f      	beq.n	800958e <TIM_Base_SetConfig+0x8a>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a20      	ldr	r2, [pc, #128]	; (80095f4 <TIM_Base_SetConfig+0xf0>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d00b      	beq.n	800958e <TIM_Base_SetConfig+0x8a>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a1f      	ldr	r2, [pc, #124]	; (80095f8 <TIM_Base_SetConfig+0xf4>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d007      	beq.n	800958e <TIM_Base_SetConfig+0x8a>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a1e      	ldr	r2, [pc, #120]	; (80095fc <TIM_Base_SetConfig+0xf8>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d003      	beq.n	800958e <TIM_Base_SetConfig+0x8a>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a1d      	ldr	r2, [pc, #116]	; (8009600 <TIM_Base_SetConfig+0xfc>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d108      	bne.n	80095a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	4313      	orrs	r3, r2
 800959e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	689a      	ldr	r2, [r3, #8]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a08      	ldr	r2, [pc, #32]	; (80095e8 <TIM_Base_SetConfig+0xe4>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d103      	bne.n	80095d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	691a      	ldr	r2, [r3, #16]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	615a      	str	r2, [r3, #20]
}
 80095da:	bf00      	nop
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	40010000 	.word	0x40010000
 80095ec:	40000400 	.word	0x40000400
 80095f0:	40000800 	.word	0x40000800
 80095f4:	40000c00 	.word	0x40000c00
 80095f8:	40014000 	.word	0x40014000
 80095fc:	40014400 	.word	0x40014400
 8009600:	40014800 	.word	0x40014800

08009604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009604:	b480      	push	{r7}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a1b      	ldr	r3, [r3, #32]
 8009612:	f023 0201 	bic.w	r2, r3, #1
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f023 0303 	bic.w	r3, r3, #3
 800963a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	4313      	orrs	r3, r2
 8009644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f023 0302 	bic.w	r3, r3, #2
 800964c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	4313      	orrs	r3, r2
 8009656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a1c      	ldr	r2, [pc, #112]	; (80096cc <TIM_OC1_SetConfig+0xc8>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d10c      	bne.n	800967a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f023 0308 	bic.w	r3, r3, #8
 8009666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	697a      	ldr	r2, [r7, #20]
 800966e:	4313      	orrs	r3, r2
 8009670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f023 0304 	bic.w	r3, r3, #4
 8009678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a13      	ldr	r2, [pc, #76]	; (80096cc <TIM_OC1_SetConfig+0xc8>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d111      	bne.n	80096a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	4313      	orrs	r3, r2
 800969a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	685a      	ldr	r2, [r3, #4]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	697a      	ldr	r2, [r7, #20]
 80096be:	621a      	str	r2, [r3, #32]
}
 80096c0:	bf00      	nop
 80096c2:	371c      	adds	r7, #28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	40010000 	.word	0x40010000

080096d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	f023 0210 	bic.w	r2, r3, #16
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	021b      	lsls	r3, r3, #8
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	4313      	orrs	r3, r2
 8009712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	f023 0320 	bic.w	r3, r3, #32
 800971a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	011b      	lsls	r3, r3, #4
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	4313      	orrs	r3, r2
 8009726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a1e      	ldr	r2, [pc, #120]	; (80097a4 <TIM_OC2_SetConfig+0xd4>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d10d      	bne.n	800974c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	011b      	lsls	r3, r3, #4
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	4313      	orrs	r3, r2
 8009742:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800974a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a15      	ldr	r2, [pc, #84]	; (80097a4 <TIM_OC2_SetConfig+0xd4>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d113      	bne.n	800977c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800975a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	695b      	ldr	r3, [r3, #20]
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	4313      	orrs	r3, r2
 800976e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	4313      	orrs	r3, r2
 800977a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	621a      	str	r2, [r3, #32]
}
 8009796:	bf00      	nop
 8009798:	371c      	adds	r7, #28
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	40010000 	.word	0x40010000

080097a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b087      	sub	sp, #28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	69db      	ldr	r3, [r3, #28]
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f023 0303 	bic.w	r3, r3, #3
 80097de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	021b      	lsls	r3, r3, #8
 80097f8:	697a      	ldr	r2, [r7, #20]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a1d      	ldr	r2, [pc, #116]	; (8009878 <TIM_OC3_SetConfig+0xd0>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d10d      	bne.n	8009822 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800980c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	021b      	lsls	r3, r3, #8
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	4313      	orrs	r3, r2
 8009818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a14      	ldr	r2, [pc, #80]	; (8009878 <TIM_OC3_SetConfig+0xd0>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d113      	bne.n	8009852 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	011b      	lsls	r3, r3, #4
 8009840:	693a      	ldr	r2, [r7, #16]
 8009842:	4313      	orrs	r3, r2
 8009844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	011b      	lsls	r3, r3, #4
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	4313      	orrs	r3, r2
 8009850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	685a      	ldr	r2, [r3, #4]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	621a      	str	r2, [r3, #32]
}
 800986c:	bf00      	nop
 800986e:	371c      	adds	r7, #28
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr
 8009878:	40010000 	.word	0x40010000

0800987c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	69db      	ldr	r3, [r3, #28]
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	021b      	lsls	r3, r3, #8
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	4313      	orrs	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	031b      	lsls	r3, r3, #12
 80098ce:	693a      	ldr	r2, [r7, #16]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a10      	ldr	r2, [pc, #64]	; (8009918 <TIM_OC4_SetConfig+0x9c>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d109      	bne.n	80098f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	019b      	lsls	r3, r3, #6
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	697a      	ldr	r2, [r7, #20]
 80098f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	685a      	ldr	r2, [r3, #4]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	621a      	str	r2, [r3, #32]
}
 800990a:	bf00      	nop
 800990c:	371c      	adds	r7, #28
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	40010000 	.word	0x40010000

0800991c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800991c:	b480      	push	{r7}
 800991e:	b087      	sub	sp, #28
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6a1b      	ldr	r3, [r3, #32]
 800992c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6a1b      	ldr	r3, [r3, #32]
 8009932:	f023 0201 	bic.w	r2, r3, #1
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	699b      	ldr	r3, [r3, #24]
 800993e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	011b      	lsls	r3, r3, #4
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	4313      	orrs	r3, r2
 8009950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	f023 030a 	bic.w	r3, r3, #10
 8009958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	4313      	orrs	r3, r2
 8009960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	621a      	str	r2, [r3, #32]
}
 800996e:	bf00      	nop
 8009970:	371c      	adds	r7, #28
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800997a:	b480      	push	{r7}
 800997c:	b087      	sub	sp, #28
 800997e:	af00      	add	r7, sp, #0
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	60b9      	str	r1, [r7, #8]
 8009984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6a1b      	ldr	r3, [r3, #32]
 800998a:	f023 0210 	bic.w	r2, r3, #16
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6a1b      	ldr	r3, [r3, #32]
 800999c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	031b      	lsls	r3, r3, #12
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	011b      	lsls	r3, r3, #4
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	4313      	orrs	r3, r2
 80099c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	621a      	str	r2, [r3, #32]
}
 80099ce:	bf00      	nop
 80099d0:	371c      	adds	r7, #28
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr

080099da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099da:	b480      	push	{r7}
 80099dc:	b085      	sub	sp, #20
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	f043 0307 	orr.w	r3, r3, #7
 80099fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	609a      	str	r2, [r3, #8]
}
 8009a04:	bf00      	nop
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
 8009a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	021a      	lsls	r2, r3, #8
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	431a      	orrs	r2, r3
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	609a      	str	r2, [r3, #8]
}
 8009a44:	bf00      	nop
 8009a46:	371c      	adds	r7, #28
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	f003 031f 	and.w	r3, r3, #31
 8009a62:	2201      	movs	r2, #1
 8009a64:	fa02 f303 	lsl.w	r3, r2, r3
 8009a68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6a1a      	ldr	r2, [r3, #32]
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	43db      	mvns	r3, r3
 8009a72:	401a      	ands	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6a1a      	ldr	r2, [r3, #32]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	f003 031f 	and.w	r3, r3, #31
 8009a82:	6879      	ldr	r1, [r7, #4]
 8009a84:	fa01 f303 	lsl.w	r3, r1, r3
 8009a88:	431a      	orrs	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	621a      	str	r2, [r3, #32]
}
 8009a8e:	bf00      	nop
 8009a90:	371c      	adds	r7, #28
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
	...

08009a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d101      	bne.n	8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	e050      	b.n	8009b56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a1c      	ldr	r2, [pc, #112]	; (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d018      	beq.n	8009b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b00:	d013      	beq.n	8009b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a18      	ldr	r2, [pc, #96]	; (8009b68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d00e      	beq.n	8009b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a16      	ldr	r2, [pc, #88]	; (8009b6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d009      	beq.n	8009b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a15      	ldr	r2, [pc, #84]	; (8009b70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d004      	beq.n	8009b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a13      	ldr	r2, [pc, #76]	; (8009b74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d10c      	bne.n	8009b44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	40010000 	.word	0x40010000
 8009b68:	40000400 	.word	0x40000400
 8009b6c:	40000800 	.word	0x40000800
 8009b70:	40000c00 	.word	0x40000c00
 8009b74:	40014000 	.word	0x40014000

08009b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d101      	bne.n	8009bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e03f      	b.n	8009c32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d106      	bne.n	8009bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7fa f868 	bl	8003c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2224      	movs	r2, #36	; 0x24
 8009bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68da      	ldr	r2, [r3, #12]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f929 	bl	8009e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	691a      	ldr	r2, [r3, #16]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	695a      	ldr	r2, [r3, #20]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68da      	ldr	r2, [r3, #12]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2220      	movs	r2, #32
 8009c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2220      	movs	r2, #32
 8009c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b08a      	sub	sp, #40	; 0x28
 8009c3e:	af02      	add	r7, sp, #8
 8009c40:	60f8      	str	r0, [r7, #12]
 8009c42:	60b9      	str	r1, [r7, #8]
 8009c44:	603b      	str	r3, [r7, #0]
 8009c46:	4613      	mov	r3, r2
 8009c48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2b20      	cmp	r3, #32
 8009c58:	d17c      	bne.n	8009d54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <HAL_UART_Transmit+0x2c>
 8009c60:	88fb      	ldrh	r3, [r7, #6]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e075      	b.n	8009d56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d101      	bne.n	8009c78 <HAL_UART_Transmit+0x3e>
 8009c74:	2302      	movs	r3, #2
 8009c76:	e06e      	b.n	8009d56 <HAL_UART_Transmit+0x11c>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2221      	movs	r2, #33	; 0x21
 8009c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c8e:	f7fb f959 	bl	8004f44 <HAL_GetTick>
 8009c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	88fa      	ldrh	r2, [r7, #6]
 8009c98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	88fa      	ldrh	r2, [r7, #6]
 8009c9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ca8:	d108      	bne.n	8009cbc <HAL_UART_Transmit+0x82>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d104      	bne.n	8009cbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	61bb      	str	r3, [r7, #24]
 8009cba:	e003      	b.n	8009cc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009ccc:	e02a      	b.n	8009d24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2180      	movs	r1, #128	; 0x80
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f000 f840 	bl	8009d5e <UART_WaitOnFlagUntilTimeout>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d001      	beq.n	8009ce8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e036      	b.n	8009d56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10b      	bne.n	8009d06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	3302      	adds	r3, #2
 8009d02:	61bb      	str	r3, [r7, #24]
 8009d04:	e007      	b.n	8009d16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	781a      	ldrb	r2, [r3, #0]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	3301      	adds	r3, #1
 8009d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1cf      	bne.n	8009cce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2200      	movs	r2, #0
 8009d36:	2140      	movs	r1, #64	; 0x40
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 f810 	bl	8009d5e <UART_WaitOnFlagUntilTimeout>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e006      	b.n	8009d56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	e000      	b.n	8009d56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009d54:	2302      	movs	r3, #2
  }
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3720      	adds	r7, #32
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b090      	sub	sp, #64	; 0x40
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	60f8      	str	r0, [r7, #12]
 8009d66:	60b9      	str	r1, [r7, #8]
 8009d68:	603b      	str	r3, [r7, #0]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d6e:	e050      	b.n	8009e12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d76:	d04c      	beq.n	8009e12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d007      	beq.n	8009d8e <UART_WaitOnFlagUntilTimeout+0x30>
 8009d7e:	f7fb f8e1 	bl	8004f44 <HAL_GetTick>
 8009d82:	4602      	mov	r2, r0
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d241      	bcs.n	8009e12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	330c      	adds	r3, #12
 8009d94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d98:	e853 3f00 	ldrex	r3, [r3]
 8009d9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	330c      	adds	r3, #12
 8009dac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009dae:	637a      	str	r2, [r7, #52]	; 0x34
 8009db0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009db6:	e841 2300 	strex	r3, r2, [r1]
 8009dba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1e5      	bne.n	8009d8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3314      	adds	r3, #20
 8009dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	e853 3f00 	ldrex	r3, [r3]
 8009dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	f023 0301 	bic.w	r3, r3, #1
 8009dd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3314      	adds	r3, #20
 8009de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009de2:	623a      	str	r2, [r7, #32]
 8009de4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de6:	69f9      	ldr	r1, [r7, #28]
 8009de8:	6a3a      	ldr	r2, [r7, #32]
 8009dea:	e841 2300 	strex	r3, r2, [r1]
 8009dee:	61bb      	str	r3, [r7, #24]
   return(result);
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1e5      	bne.n	8009dc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2220      	movs	r2, #32
 8009dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2220      	movs	r2, #32
 8009e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e00f      	b.n	8009e32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	bf0c      	ite	eq
 8009e22:	2301      	moveq	r3, #1
 8009e24:	2300      	movne	r3, #0
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	461a      	mov	r2, r3
 8009e2a:	79fb      	ldrb	r3, [r7, #7]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d09f      	beq.n	8009d70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3740      	adds	r7, #64	; 0x40
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
	...

08009e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e40:	b0c0      	sub	sp, #256	; 0x100
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e58:	68d9      	ldr	r1, [r3, #12]
 8009e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	ea40 0301 	orr.w	r3, r0, r1
 8009e64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e6a:	689a      	ldr	r2, [r3, #8]
 8009e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	431a      	orrs	r2, r3
 8009e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	431a      	orrs	r2, r3
 8009e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e80:	69db      	ldr	r3, [r3, #28]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009e94:	f021 010c 	bic.w	r1, r1, #12
 8009e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ea2:	430b      	orrs	r3, r1
 8009ea4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eb6:	6999      	ldr	r1, [r3, #24]
 8009eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	ea40 0301 	orr.w	r3, r0, r1
 8009ec2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	4b8f      	ldr	r3, [pc, #572]	; (800a108 <UART_SetConfig+0x2cc>)
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d005      	beq.n	8009edc <UART_SetConfig+0xa0>
 8009ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	4b8d      	ldr	r3, [pc, #564]	; (800a10c <UART_SetConfig+0x2d0>)
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d104      	bne.n	8009ee6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009edc:	f7fd fc6a 	bl	80077b4 <HAL_RCC_GetPCLK2Freq>
 8009ee0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009ee4:	e003      	b.n	8009eee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ee6:	f7fd fc51 	bl	800778c <HAL_RCC_GetPCLK1Freq>
 8009eea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ef2:	69db      	ldr	r3, [r3, #28]
 8009ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ef8:	f040 810c 	bne.w	800a114 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f00:	2200      	movs	r2, #0
 8009f02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009f0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009f0e:	4622      	mov	r2, r4
 8009f10:	462b      	mov	r3, r5
 8009f12:	1891      	adds	r1, r2, r2
 8009f14:	65b9      	str	r1, [r7, #88]	; 0x58
 8009f16:	415b      	adcs	r3, r3
 8009f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009f1e:	4621      	mov	r1, r4
 8009f20:	eb12 0801 	adds.w	r8, r2, r1
 8009f24:	4629      	mov	r1, r5
 8009f26:	eb43 0901 	adc.w	r9, r3, r1
 8009f2a:	f04f 0200 	mov.w	r2, #0
 8009f2e:	f04f 0300 	mov.w	r3, #0
 8009f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f3e:	4690      	mov	r8, r2
 8009f40:	4699      	mov	r9, r3
 8009f42:	4623      	mov	r3, r4
 8009f44:	eb18 0303 	adds.w	r3, r8, r3
 8009f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f4c:	462b      	mov	r3, r5
 8009f4e:	eb49 0303 	adc.w	r3, r9, r3
 8009f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009f66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	18db      	adds	r3, r3, r3
 8009f6e:	653b      	str	r3, [r7, #80]	; 0x50
 8009f70:	4613      	mov	r3, r2
 8009f72:	eb42 0303 	adc.w	r3, r2, r3
 8009f76:	657b      	str	r3, [r7, #84]	; 0x54
 8009f78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009f7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009f80:	f7f6 fe4a 	bl	8000c18 <__aeabi_uldivmod>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	4b61      	ldr	r3, [pc, #388]	; (800a110 <UART_SetConfig+0x2d4>)
 8009f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8009f8e:	095b      	lsrs	r3, r3, #5
 8009f90:	011c      	lsls	r4, r3, #4
 8009f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f96:	2200      	movs	r2, #0
 8009f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009fa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009fa4:	4642      	mov	r2, r8
 8009fa6:	464b      	mov	r3, r9
 8009fa8:	1891      	adds	r1, r2, r2
 8009faa:	64b9      	str	r1, [r7, #72]	; 0x48
 8009fac:	415b      	adcs	r3, r3
 8009fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009fb4:	4641      	mov	r1, r8
 8009fb6:	eb12 0a01 	adds.w	sl, r2, r1
 8009fba:	4649      	mov	r1, r9
 8009fbc:	eb43 0b01 	adc.w	fp, r3, r1
 8009fc0:	f04f 0200 	mov.w	r2, #0
 8009fc4:	f04f 0300 	mov.w	r3, #0
 8009fc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009fcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009fd4:	4692      	mov	sl, r2
 8009fd6:	469b      	mov	fp, r3
 8009fd8:	4643      	mov	r3, r8
 8009fda:	eb1a 0303 	adds.w	r3, sl, r3
 8009fde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fe2:	464b      	mov	r3, r9
 8009fe4:	eb4b 0303 	adc.w	r3, fp, r3
 8009fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ff8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009ffc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a000:	460b      	mov	r3, r1
 800a002:	18db      	adds	r3, r3, r3
 800a004:	643b      	str	r3, [r7, #64]	; 0x40
 800a006:	4613      	mov	r3, r2
 800a008:	eb42 0303 	adc.w	r3, r2, r3
 800a00c:	647b      	str	r3, [r7, #68]	; 0x44
 800a00e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a012:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a016:	f7f6 fdff 	bl	8000c18 <__aeabi_uldivmod>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4611      	mov	r1, r2
 800a020:	4b3b      	ldr	r3, [pc, #236]	; (800a110 <UART_SetConfig+0x2d4>)
 800a022:	fba3 2301 	umull	r2, r3, r3, r1
 800a026:	095b      	lsrs	r3, r3, #5
 800a028:	2264      	movs	r2, #100	; 0x64
 800a02a:	fb02 f303 	mul.w	r3, r2, r3
 800a02e:	1acb      	subs	r3, r1, r3
 800a030:	00db      	lsls	r3, r3, #3
 800a032:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a036:	4b36      	ldr	r3, [pc, #216]	; (800a110 <UART_SetConfig+0x2d4>)
 800a038:	fba3 2302 	umull	r2, r3, r3, r2
 800a03c:	095b      	lsrs	r3, r3, #5
 800a03e:	005b      	lsls	r3, r3, #1
 800a040:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a044:	441c      	add	r4, r3
 800a046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a04a:	2200      	movs	r2, #0
 800a04c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a050:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a054:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a058:	4642      	mov	r2, r8
 800a05a:	464b      	mov	r3, r9
 800a05c:	1891      	adds	r1, r2, r2
 800a05e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a060:	415b      	adcs	r3, r3
 800a062:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a064:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a068:	4641      	mov	r1, r8
 800a06a:	1851      	adds	r1, r2, r1
 800a06c:	6339      	str	r1, [r7, #48]	; 0x30
 800a06e:	4649      	mov	r1, r9
 800a070:	414b      	adcs	r3, r1
 800a072:	637b      	str	r3, [r7, #52]	; 0x34
 800a074:	f04f 0200 	mov.w	r2, #0
 800a078:	f04f 0300 	mov.w	r3, #0
 800a07c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a080:	4659      	mov	r1, fp
 800a082:	00cb      	lsls	r3, r1, #3
 800a084:	4651      	mov	r1, sl
 800a086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a08a:	4651      	mov	r1, sl
 800a08c:	00ca      	lsls	r2, r1, #3
 800a08e:	4610      	mov	r0, r2
 800a090:	4619      	mov	r1, r3
 800a092:	4603      	mov	r3, r0
 800a094:	4642      	mov	r2, r8
 800a096:	189b      	adds	r3, r3, r2
 800a098:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a09c:	464b      	mov	r3, r9
 800a09e:	460a      	mov	r2, r1
 800a0a0:	eb42 0303 	adc.w	r3, r2, r3
 800a0a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a0b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a0b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a0bc:	460b      	mov	r3, r1
 800a0be:	18db      	adds	r3, r3, r3
 800a0c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	eb42 0303 	adc.w	r3, r2, r3
 800a0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a0d2:	f7f6 fda1 	bl	8000c18 <__aeabi_uldivmod>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	4b0d      	ldr	r3, [pc, #52]	; (800a110 <UART_SetConfig+0x2d4>)
 800a0dc:	fba3 1302 	umull	r1, r3, r3, r2
 800a0e0:	095b      	lsrs	r3, r3, #5
 800a0e2:	2164      	movs	r1, #100	; 0x64
 800a0e4:	fb01 f303 	mul.w	r3, r1, r3
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	00db      	lsls	r3, r3, #3
 800a0ec:	3332      	adds	r3, #50	; 0x32
 800a0ee:	4a08      	ldr	r2, [pc, #32]	; (800a110 <UART_SetConfig+0x2d4>)
 800a0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f4:	095b      	lsrs	r3, r3, #5
 800a0f6:	f003 0207 	and.w	r2, r3, #7
 800a0fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4422      	add	r2, r4
 800a102:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a104:	e106      	b.n	800a314 <UART_SetConfig+0x4d8>
 800a106:	bf00      	nop
 800a108:	40011000 	.word	0x40011000
 800a10c:	40011400 	.word	0x40011400
 800a110:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a118:	2200      	movs	r2, #0
 800a11a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a11e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a122:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a126:	4642      	mov	r2, r8
 800a128:	464b      	mov	r3, r9
 800a12a:	1891      	adds	r1, r2, r2
 800a12c:	6239      	str	r1, [r7, #32]
 800a12e:	415b      	adcs	r3, r3
 800a130:	627b      	str	r3, [r7, #36]	; 0x24
 800a132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a136:	4641      	mov	r1, r8
 800a138:	1854      	adds	r4, r2, r1
 800a13a:	4649      	mov	r1, r9
 800a13c:	eb43 0501 	adc.w	r5, r3, r1
 800a140:	f04f 0200 	mov.w	r2, #0
 800a144:	f04f 0300 	mov.w	r3, #0
 800a148:	00eb      	lsls	r3, r5, #3
 800a14a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a14e:	00e2      	lsls	r2, r4, #3
 800a150:	4614      	mov	r4, r2
 800a152:	461d      	mov	r5, r3
 800a154:	4643      	mov	r3, r8
 800a156:	18e3      	adds	r3, r4, r3
 800a158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a15c:	464b      	mov	r3, r9
 800a15e:	eb45 0303 	adc.w	r3, r5, r3
 800a162:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a172:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a176:	f04f 0200 	mov.w	r2, #0
 800a17a:	f04f 0300 	mov.w	r3, #0
 800a17e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a182:	4629      	mov	r1, r5
 800a184:	008b      	lsls	r3, r1, #2
 800a186:	4621      	mov	r1, r4
 800a188:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a18c:	4621      	mov	r1, r4
 800a18e:	008a      	lsls	r2, r1, #2
 800a190:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a194:	f7f6 fd40 	bl	8000c18 <__aeabi_uldivmod>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4b60      	ldr	r3, [pc, #384]	; (800a320 <UART_SetConfig+0x4e4>)
 800a19e:	fba3 2302 	umull	r2, r3, r3, r2
 800a1a2:	095b      	lsrs	r3, r3, #5
 800a1a4:	011c      	lsls	r4, r3, #4
 800a1a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a1b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a1b8:	4642      	mov	r2, r8
 800a1ba:	464b      	mov	r3, r9
 800a1bc:	1891      	adds	r1, r2, r2
 800a1be:	61b9      	str	r1, [r7, #24]
 800a1c0:	415b      	adcs	r3, r3
 800a1c2:	61fb      	str	r3, [r7, #28]
 800a1c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a1c8:	4641      	mov	r1, r8
 800a1ca:	1851      	adds	r1, r2, r1
 800a1cc:	6139      	str	r1, [r7, #16]
 800a1ce:	4649      	mov	r1, r9
 800a1d0:	414b      	adcs	r3, r1
 800a1d2:	617b      	str	r3, [r7, #20]
 800a1d4:	f04f 0200 	mov.w	r2, #0
 800a1d8:	f04f 0300 	mov.w	r3, #0
 800a1dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a1e0:	4659      	mov	r1, fp
 800a1e2:	00cb      	lsls	r3, r1, #3
 800a1e4:	4651      	mov	r1, sl
 800a1e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1ea:	4651      	mov	r1, sl
 800a1ec:	00ca      	lsls	r2, r1, #3
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	4642      	mov	r2, r8
 800a1f6:	189b      	adds	r3, r3, r2
 800a1f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1fc:	464b      	mov	r3, r9
 800a1fe:	460a      	mov	r2, r1
 800a200:	eb42 0303 	adc.w	r3, r2, r3
 800a204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	67bb      	str	r3, [r7, #120]	; 0x78
 800a212:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a214:	f04f 0200 	mov.w	r2, #0
 800a218:	f04f 0300 	mov.w	r3, #0
 800a21c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a220:	4649      	mov	r1, r9
 800a222:	008b      	lsls	r3, r1, #2
 800a224:	4641      	mov	r1, r8
 800a226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a22a:	4641      	mov	r1, r8
 800a22c:	008a      	lsls	r2, r1, #2
 800a22e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a232:	f7f6 fcf1 	bl	8000c18 <__aeabi_uldivmod>
 800a236:	4602      	mov	r2, r0
 800a238:	460b      	mov	r3, r1
 800a23a:	4611      	mov	r1, r2
 800a23c:	4b38      	ldr	r3, [pc, #224]	; (800a320 <UART_SetConfig+0x4e4>)
 800a23e:	fba3 2301 	umull	r2, r3, r3, r1
 800a242:	095b      	lsrs	r3, r3, #5
 800a244:	2264      	movs	r2, #100	; 0x64
 800a246:	fb02 f303 	mul.w	r3, r2, r3
 800a24a:	1acb      	subs	r3, r1, r3
 800a24c:	011b      	lsls	r3, r3, #4
 800a24e:	3332      	adds	r3, #50	; 0x32
 800a250:	4a33      	ldr	r2, [pc, #204]	; (800a320 <UART_SetConfig+0x4e4>)
 800a252:	fba2 2303 	umull	r2, r3, r2, r3
 800a256:	095b      	lsrs	r3, r3, #5
 800a258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a25c:	441c      	add	r4, r3
 800a25e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a262:	2200      	movs	r2, #0
 800a264:	673b      	str	r3, [r7, #112]	; 0x70
 800a266:	677a      	str	r2, [r7, #116]	; 0x74
 800a268:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a26c:	4642      	mov	r2, r8
 800a26e:	464b      	mov	r3, r9
 800a270:	1891      	adds	r1, r2, r2
 800a272:	60b9      	str	r1, [r7, #8]
 800a274:	415b      	adcs	r3, r3
 800a276:	60fb      	str	r3, [r7, #12]
 800a278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a27c:	4641      	mov	r1, r8
 800a27e:	1851      	adds	r1, r2, r1
 800a280:	6039      	str	r1, [r7, #0]
 800a282:	4649      	mov	r1, r9
 800a284:	414b      	adcs	r3, r1
 800a286:	607b      	str	r3, [r7, #4]
 800a288:	f04f 0200 	mov.w	r2, #0
 800a28c:	f04f 0300 	mov.w	r3, #0
 800a290:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a294:	4659      	mov	r1, fp
 800a296:	00cb      	lsls	r3, r1, #3
 800a298:	4651      	mov	r1, sl
 800a29a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a29e:	4651      	mov	r1, sl
 800a2a0:	00ca      	lsls	r2, r1, #3
 800a2a2:	4610      	mov	r0, r2
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	4642      	mov	r2, r8
 800a2aa:	189b      	adds	r3, r3, r2
 800a2ac:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2ae:	464b      	mov	r3, r9
 800a2b0:	460a      	mov	r2, r1
 800a2b2:	eb42 0303 	adc.w	r3, r2, r3
 800a2b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	663b      	str	r3, [r7, #96]	; 0x60
 800a2c2:	667a      	str	r2, [r7, #100]	; 0x64
 800a2c4:	f04f 0200 	mov.w	r2, #0
 800a2c8:	f04f 0300 	mov.w	r3, #0
 800a2cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a2d0:	4649      	mov	r1, r9
 800a2d2:	008b      	lsls	r3, r1, #2
 800a2d4:	4641      	mov	r1, r8
 800a2d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2da:	4641      	mov	r1, r8
 800a2dc:	008a      	lsls	r2, r1, #2
 800a2de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a2e2:	f7f6 fc99 	bl	8000c18 <__aeabi_uldivmod>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	4b0d      	ldr	r3, [pc, #52]	; (800a320 <UART_SetConfig+0x4e4>)
 800a2ec:	fba3 1302 	umull	r1, r3, r3, r2
 800a2f0:	095b      	lsrs	r3, r3, #5
 800a2f2:	2164      	movs	r1, #100	; 0x64
 800a2f4:	fb01 f303 	mul.w	r3, r1, r3
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	011b      	lsls	r3, r3, #4
 800a2fc:	3332      	adds	r3, #50	; 0x32
 800a2fe:	4a08      	ldr	r2, [pc, #32]	; (800a320 <UART_SetConfig+0x4e4>)
 800a300:	fba2 2303 	umull	r2, r3, r2, r3
 800a304:	095b      	lsrs	r3, r3, #5
 800a306:	f003 020f 	and.w	r2, r3, #15
 800a30a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4422      	add	r2, r4
 800a312:	609a      	str	r2, [r3, #8]
}
 800a314:	bf00      	nop
 800a316:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a31a:	46bd      	mov	sp, r7
 800a31c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a320:	51eb851f 	.word	0x51eb851f

0800a324 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a328:	4904      	ldr	r1, [pc, #16]	; (800a33c <MX_FATFS_Init+0x18>)
 800a32a:	4805      	ldr	r0, [pc, #20]	; (800a340 <MX_FATFS_Init+0x1c>)
 800a32c:	f002 fb64 	bl	800c9f8 <FATFS_LinkDriver>
 800a330:	4603      	mov	r3, r0
 800a332:	461a      	mov	r2, r3
 800a334:	4b03      	ldr	r3, [pc, #12]	; (800a344 <MX_FATFS_Init+0x20>)
 800a336:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a338:	bf00      	nop
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	20019d90 	.word	0x20019d90
 800a340:	200008c8 	.word	0x200008c8
 800a344:	20019d8c 	.word	0x20019d8c

0800a348 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a348:	b480      	push	{r7}
 800a34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a34c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a34e:	4618      	mov	r0, r3
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	4603      	mov	r3, r0
 800a360:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800a362:	79fb      	ldrb	r3, [r7, #7]
 800a364:	4618      	mov	r0, r3
 800a366:	f7f9 ffcf 	bl	8004308 <USER_SPI_initialize>
 800a36a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	4603      	mov	r3, r0
 800a37c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800a37e:	79fb      	ldrb	r3, [r7, #7]
 800a380:	4618      	mov	r0, r3
 800a382:	f7fa f8ad 	bl	80044e0 <USER_SPI_status>
 800a386:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	60b9      	str	r1, [r7, #8]
 800a398:	607a      	str	r2, [r7, #4]
 800a39a:	603b      	str	r3, [r7, #0]
 800a39c:	4603      	mov	r3, r0
 800a39e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800a3a0:	7bf8      	ldrb	r0, [r7, #15]
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	68b9      	ldr	r1, [r7, #8]
 800a3a8:	f7fa f8b0 	bl	800450c <USER_SPI_read>
 800a3ac:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3710      	adds	r7, #16
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b084      	sub	sp, #16
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	603b      	str	r3, [r7, #0]
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800a3c6:	7bf8      	ldrb	r0, [r7, #15]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	68b9      	ldr	r1, [r7, #8]
 800a3ce:	f7fa f903 	bl	80045d8 <USER_SPI_write>
 800a3d2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	603a      	str	r2, [r7, #0]
 800a3e6:	71fb      	strb	r3, [r7, #7]
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800a3ec:	79b9      	ldrb	r1, [r7, #6]
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fa f96c 	bl	80046d0 <USER_SPI_ioctl>
 800a3f8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
	...

0800a404 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	4603      	mov	r3, r0
 800a40c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a40e:	79fb      	ldrb	r3, [r7, #7]
 800a410:	4a08      	ldr	r2, [pc, #32]	; (800a434 <disk_status+0x30>)
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	79fa      	ldrb	r2, [r7, #7]
 800a41c:	4905      	ldr	r1, [pc, #20]	; (800a434 <disk_status+0x30>)
 800a41e:	440a      	add	r2, r1
 800a420:	7a12      	ldrb	r2, [r2, #8]
 800a422:	4610      	mov	r0, r2
 800a424:	4798      	blx	r3
 800a426:	4603      	mov	r3, r0
 800a428:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20019dbc 	.word	0x20019dbc

0800a438 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	4603      	mov	r3, r0
 800a440:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a442:	2300      	movs	r3, #0
 800a444:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a446:	79fb      	ldrb	r3, [r7, #7]
 800a448:	4a0d      	ldr	r2, [pc, #52]	; (800a480 <disk_initialize+0x48>)
 800a44a:	5cd3      	ldrb	r3, [r2, r3]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d111      	bne.n	800a474 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a450:	79fb      	ldrb	r3, [r7, #7]
 800a452:	4a0b      	ldr	r2, [pc, #44]	; (800a480 <disk_initialize+0x48>)
 800a454:	2101      	movs	r1, #1
 800a456:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a458:	79fb      	ldrb	r3, [r7, #7]
 800a45a:	4a09      	ldr	r2, [pc, #36]	; (800a480 <disk_initialize+0x48>)
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	4413      	add	r3, r2
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	79fa      	ldrb	r2, [r7, #7]
 800a466:	4906      	ldr	r1, [pc, #24]	; (800a480 <disk_initialize+0x48>)
 800a468:	440a      	add	r2, r1
 800a46a:	7a12      	ldrb	r2, [r2, #8]
 800a46c:	4610      	mov	r0, r2
 800a46e:	4798      	blx	r3
 800a470:	4603      	mov	r3, r0
 800a472:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a474:	7bfb      	ldrb	r3, [r7, #15]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	20019dbc 	.word	0x20019dbc

0800a484 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a484:	b590      	push	{r4, r7, lr}
 800a486:	b087      	sub	sp, #28
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60b9      	str	r1, [r7, #8]
 800a48c:	607a      	str	r2, [r7, #4]
 800a48e:	603b      	str	r3, [r7, #0]
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a494:	7bfb      	ldrb	r3, [r7, #15]
 800a496:	4a0a      	ldr	r2, [pc, #40]	; (800a4c0 <disk_read+0x3c>)
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	4413      	add	r3, r2
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	689c      	ldr	r4, [r3, #8]
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
 800a4a2:	4a07      	ldr	r2, [pc, #28]	; (800a4c0 <disk_read+0x3c>)
 800a4a4:	4413      	add	r3, r2
 800a4a6:	7a18      	ldrb	r0, [r3, #8]
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	68b9      	ldr	r1, [r7, #8]
 800a4ae:	47a0      	blx	r4
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	371c      	adds	r7, #28
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd90      	pop	{r4, r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	20019dbc 	.word	0x20019dbc

0800a4c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a4c4:	b590      	push	{r4, r7, lr}
 800a4c6:	b087      	sub	sp, #28
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60b9      	str	r1, [r7, #8]
 800a4cc:	607a      	str	r2, [r7, #4]
 800a4ce:	603b      	str	r3, [r7, #0]
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
 800a4d6:	4a0a      	ldr	r2, [pc, #40]	; (800a500 <disk_write+0x3c>)
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4413      	add	r3, r2
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	68dc      	ldr	r4, [r3, #12]
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
 800a4e2:	4a07      	ldr	r2, [pc, #28]	; (800a500 <disk_write+0x3c>)
 800a4e4:	4413      	add	r3, r2
 800a4e6:	7a18      	ldrb	r0, [r3, #8]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	68b9      	ldr	r1, [r7, #8]
 800a4ee:	47a0      	blx	r4
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	371c      	adds	r7, #28
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd90      	pop	{r4, r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20019dbc 	.word	0x20019dbc

0800a504 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	4603      	mov	r3, r0
 800a50c:	603a      	str	r2, [r7, #0]
 800a50e:	71fb      	strb	r3, [r7, #7]
 800a510:	460b      	mov	r3, r1
 800a512:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a514:	79fb      	ldrb	r3, [r7, #7]
 800a516:	4a09      	ldr	r2, [pc, #36]	; (800a53c <disk_ioctl+0x38>)
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4413      	add	r3, r2
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	79fa      	ldrb	r2, [r7, #7]
 800a522:	4906      	ldr	r1, [pc, #24]	; (800a53c <disk_ioctl+0x38>)
 800a524:	440a      	add	r2, r1
 800a526:	7a10      	ldrb	r0, [r2, #8]
 800a528:	79b9      	ldrb	r1, [r7, #6]
 800a52a:	683a      	ldr	r2, [r7, #0]
 800a52c:	4798      	blx	r3
 800a52e:	4603      	mov	r3, r0
 800a530:	73fb      	strb	r3, [r7, #15]
  return res;
 800a532:	7bfb      	ldrb	r3, [r7, #15]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	20019dbc 	.word	0x20019dbc

0800a540 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	3301      	adds	r3, #1
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a550:	89fb      	ldrh	r3, [r7, #14]
 800a552:	021b      	lsls	r3, r3, #8
 800a554:	b21a      	sxth	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	b21b      	sxth	r3, r3
 800a55c:	4313      	orrs	r3, r2
 800a55e:	b21b      	sxth	r3, r3
 800a560:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a562:	89fb      	ldrh	r3, [r7, #14]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	3303      	adds	r3, #3
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	021b      	lsls	r3, r3, #8
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	3202      	adds	r2, #2
 800a588:	7812      	ldrb	r2, [r2, #0]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	021b      	lsls	r3, r3, #8
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	3201      	adds	r2, #1
 800a596:	7812      	ldrb	r2, [r2, #0]
 800a598:	4313      	orrs	r3, r2
 800a59a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	021b      	lsls	r3, r3, #8
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	7812      	ldrb	r2, [r2, #0]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	60fb      	str	r3, [r7, #12]
	return rv;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b083      	sub	sp, #12
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	460b      	mov	r3, r1
 800a5c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	1c5a      	adds	r2, r3, #1
 800a5c6:	607a      	str	r2, [r7, #4]
 800a5c8:	887a      	ldrh	r2, [r7, #2]
 800a5ca:	b2d2      	uxtb	r2, r2
 800a5cc:	701a      	strb	r2, [r3, #0]
 800a5ce:	887b      	ldrh	r3, [r7, #2]
 800a5d0:	0a1b      	lsrs	r3, r3, #8
 800a5d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	1c5a      	adds	r2, r3, #1
 800a5d8:	607a      	str	r2, [r7, #4]
 800a5da:	887a      	ldrh	r2, [r7, #2]
 800a5dc:	b2d2      	uxtb	r2, r2
 800a5de:	701a      	strb	r2, [r3, #0]
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	1c5a      	adds	r2, r3, #1
 800a5fa:	607a      	str	r2, [r7, #4]
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	b2d2      	uxtb	r2, r2
 800a600:	701a      	strb	r2, [r3, #0]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	0a1b      	lsrs	r3, r3, #8
 800a606:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	1c5a      	adds	r2, r3, #1
 800a60c:	607a      	str	r2, [r7, #4]
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	b2d2      	uxtb	r2, r2
 800a612:	701a      	strb	r2, [r3, #0]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	0a1b      	lsrs	r3, r3, #8
 800a618:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	1c5a      	adds	r2, r3, #1
 800a61e:	607a      	str	r2, [r7, #4]
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	701a      	strb	r2, [r3, #0]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	0a1b      	lsrs	r3, r3, #8
 800a62a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	1c5a      	adds	r2, r3, #1
 800a630:	607a      	str	r2, [r7, #4]
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	b2d2      	uxtb	r2, r2
 800a636:	701a      	strb	r2, [r3, #0]
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a644:	b480      	push	{r7}
 800a646:	b087      	sub	sp, #28
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00d      	beq.n	800a67a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	1c53      	adds	r3, r2, #1
 800a662:	613b      	str	r3, [r7, #16]
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	1c59      	adds	r1, r3, #1
 800a668:	6179      	str	r1, [r7, #20]
 800a66a:	7812      	ldrb	r2, [r2, #0]
 800a66c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	3b01      	subs	r3, #1
 800a672:	607b      	str	r3, [r7, #4]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1f1      	bne.n	800a65e <mem_cpy+0x1a>
	}
}
 800a67a:	bf00      	nop
 800a67c:	371c      	adds	r7, #28
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a686:	b480      	push	{r7}
 800a688:	b087      	sub	sp, #28
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	60f8      	str	r0, [r7, #12]
 800a68e:	60b9      	str	r1, [r7, #8]
 800a690:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	1c5a      	adds	r2, r3, #1
 800a69a:	617a      	str	r2, [r7, #20]
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	b2d2      	uxtb	r2, r2
 800a6a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	607b      	str	r3, [r7, #4]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1f3      	bne.n	800a696 <mem_set+0x10>
}
 800a6ae:	bf00      	nop
 800a6b0:	bf00      	nop
 800a6b2:	371c      	adds	r7, #28
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a6bc:	b480      	push	{r7}
 800a6be:	b089      	sub	sp, #36	; 0x24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	61fb      	str	r3, [r7, #28]
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	1c5a      	adds	r2, r3, #1
 800a6d8:	61fa      	str	r2, [r7, #28]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	61ba      	str	r2, [r7, #24]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	1acb      	subs	r3, r1, r3
 800a6e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	607b      	str	r3, [r7, #4]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d002      	beq.n	800a6fc <mem_cmp+0x40>
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d0eb      	beq.n	800a6d4 <mem_cmp+0x18>

	return r;
 800a6fc:	697b      	ldr	r3, [r7, #20]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3724      	adds	r7, #36	; 0x24
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a70a:	b480      	push	{r7}
 800a70c:	b083      	sub	sp, #12
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a714:	e002      	b.n	800a71c <chk_chr+0x12>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	3301      	adds	r3, #1
 800a71a:	607b      	str	r3, [r7, #4]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d005      	beq.n	800a730 <chk_chr+0x26>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	461a      	mov	r2, r3
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d1f2      	bne.n	800a716 <chk_chr+0xc>
	return *str;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	781b      	ldrb	r3, [r3, #0]
}
 800a734:	4618      	mov	r0, r3
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a74a:	2300      	movs	r3, #0
 800a74c:	60bb      	str	r3, [r7, #8]
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	60fb      	str	r3, [r7, #12]
 800a752:	e029      	b.n	800a7a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a754:	4a27      	ldr	r2, [pc, #156]	; (800a7f4 <chk_lock+0xb4>)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	011b      	lsls	r3, r3, #4
 800a75a:	4413      	add	r3, r2
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d01d      	beq.n	800a79e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a762:	4a24      	ldr	r2, [pc, #144]	; (800a7f4 <chk_lock+0xb4>)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	011b      	lsls	r3, r3, #4
 800a768:	4413      	add	r3, r2
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	429a      	cmp	r2, r3
 800a772:	d116      	bne.n	800a7a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a774:	4a1f      	ldr	r2, [pc, #124]	; (800a7f4 <chk_lock+0xb4>)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	011b      	lsls	r3, r3, #4
 800a77a:	4413      	add	r3, r2
 800a77c:	3304      	adds	r3, #4
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a784:	429a      	cmp	r2, r3
 800a786:	d10c      	bne.n	800a7a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a788:	4a1a      	ldr	r2, [pc, #104]	; (800a7f4 <chk_lock+0xb4>)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	011b      	lsls	r3, r3, #4
 800a78e:	4413      	add	r3, r2
 800a790:	3308      	adds	r3, #8
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a798:	429a      	cmp	r2, r3
 800a79a:	d102      	bne.n	800a7a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a79c:	e007      	b.n	800a7ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	60fb      	str	r3, [r7, #12]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d9d2      	bls.n	800a754 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d109      	bne.n	800a7c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d102      	bne.n	800a7c0 <chk_lock+0x80>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	d101      	bne.n	800a7c4 <chk_lock+0x84>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	e010      	b.n	800a7e6 <chk_lock+0xa6>
 800a7c4:	2312      	movs	r3, #18
 800a7c6:	e00e      	b.n	800a7e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d108      	bne.n	800a7e0 <chk_lock+0xa0>
 800a7ce:	4a09      	ldr	r2, [pc, #36]	; (800a7f4 <chk_lock+0xb4>)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	011b      	lsls	r3, r3, #4
 800a7d4:	4413      	add	r3, r2
 800a7d6:	330c      	adds	r3, #12
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7de:	d101      	bne.n	800a7e4 <chk_lock+0xa4>
 800a7e0:	2310      	movs	r3, #16
 800a7e2:	e000      	b.n	800a7e6 <chk_lock+0xa6>
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3714      	adds	r7, #20
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	20019d9c 	.word	0x20019d9c

0800a7f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a7fe:	2300      	movs	r3, #0
 800a800:	607b      	str	r3, [r7, #4]
 800a802:	e002      	b.n	800a80a <enq_lock+0x12>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	3301      	adds	r3, #1
 800a808:	607b      	str	r3, [r7, #4]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d806      	bhi.n	800a81e <enq_lock+0x26>
 800a810:	4a09      	ldr	r2, [pc, #36]	; (800a838 <enq_lock+0x40>)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	011b      	lsls	r3, r3, #4
 800a816:	4413      	add	r3, r2
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1f2      	bne.n	800a804 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2b02      	cmp	r3, #2
 800a822:	bf14      	ite	ne
 800a824:	2301      	movne	r3, #1
 800a826:	2300      	moveq	r3, #0
 800a828:	b2db      	uxtb	r3, r3
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	20019d9c 	.word	0x20019d9c

0800a83c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a846:	2300      	movs	r3, #0
 800a848:	60fb      	str	r3, [r7, #12]
 800a84a:	e01f      	b.n	800a88c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a84c:	4a41      	ldr	r2, [pc, #260]	; (800a954 <inc_lock+0x118>)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	011b      	lsls	r3, r3, #4
 800a852:	4413      	add	r3, r2
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d113      	bne.n	800a886 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a85e:	4a3d      	ldr	r2, [pc, #244]	; (800a954 <inc_lock+0x118>)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	011b      	lsls	r3, r3, #4
 800a864:	4413      	add	r3, r2
 800a866:	3304      	adds	r3, #4
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a86e:	429a      	cmp	r2, r3
 800a870:	d109      	bne.n	800a886 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a872:	4a38      	ldr	r2, [pc, #224]	; (800a954 <inc_lock+0x118>)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	011b      	lsls	r3, r3, #4
 800a878:	4413      	add	r3, r2
 800a87a:	3308      	adds	r3, #8
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a882:	429a      	cmp	r2, r3
 800a884:	d006      	beq.n	800a894 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3301      	adds	r3, #1
 800a88a:	60fb      	str	r3, [r7, #12]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d9dc      	bls.n	800a84c <inc_lock+0x10>
 800a892:	e000      	b.n	800a896 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a894:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d132      	bne.n	800a902 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a89c:	2300      	movs	r3, #0
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	e002      	b.n	800a8a8 <inc_lock+0x6c>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d806      	bhi.n	800a8bc <inc_lock+0x80>
 800a8ae:	4a29      	ldr	r2, [pc, #164]	; (800a954 <inc_lock+0x118>)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	011b      	lsls	r3, r3, #4
 800a8b4:	4413      	add	r3, r2
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1f2      	bne.n	800a8a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d101      	bne.n	800a8c6 <inc_lock+0x8a>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	e040      	b.n	800a948 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	4922      	ldr	r1, [pc, #136]	; (800a954 <inc_lock+0x118>)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	011b      	lsls	r3, r3, #4
 800a8d0:	440b      	add	r3, r1
 800a8d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	689a      	ldr	r2, [r3, #8]
 800a8d8:	491e      	ldr	r1, [pc, #120]	; (800a954 <inc_lock+0x118>)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	011b      	lsls	r3, r3, #4
 800a8de:	440b      	add	r3, r1
 800a8e0:	3304      	adds	r3, #4
 800a8e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	695a      	ldr	r2, [r3, #20]
 800a8e8:	491a      	ldr	r1, [pc, #104]	; (800a954 <inc_lock+0x118>)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	011b      	lsls	r3, r3, #4
 800a8ee:	440b      	add	r3, r1
 800a8f0:	3308      	adds	r3, #8
 800a8f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a8f4:	4a17      	ldr	r2, [pc, #92]	; (800a954 <inc_lock+0x118>)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	011b      	lsls	r3, r3, #4
 800a8fa:	4413      	add	r3, r2
 800a8fc:	330c      	adds	r3, #12
 800a8fe:	2200      	movs	r2, #0
 800a900:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d009      	beq.n	800a91c <inc_lock+0xe0>
 800a908:	4a12      	ldr	r2, [pc, #72]	; (800a954 <inc_lock+0x118>)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	011b      	lsls	r3, r3, #4
 800a90e:	4413      	add	r3, r2
 800a910:	330c      	adds	r3, #12
 800a912:	881b      	ldrh	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <inc_lock+0xe0>
 800a918:	2300      	movs	r3, #0
 800a91a:	e015      	b.n	800a948 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d108      	bne.n	800a934 <inc_lock+0xf8>
 800a922:	4a0c      	ldr	r2, [pc, #48]	; (800a954 <inc_lock+0x118>)
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	011b      	lsls	r3, r3, #4
 800a928:	4413      	add	r3, r2
 800a92a:	330c      	adds	r3, #12
 800a92c:	881b      	ldrh	r3, [r3, #0]
 800a92e:	3301      	adds	r3, #1
 800a930:	b29a      	uxth	r2, r3
 800a932:	e001      	b.n	800a938 <inc_lock+0xfc>
 800a934:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a938:	4906      	ldr	r1, [pc, #24]	; (800a954 <inc_lock+0x118>)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	011b      	lsls	r3, r3, #4
 800a93e:	440b      	add	r3, r1
 800a940:	330c      	adds	r3, #12
 800a942:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	3301      	adds	r3, #1
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3714      	adds	r7, #20
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	20019d9c 	.word	0x20019d9c

0800a958 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	3b01      	subs	r3, #1
 800a964:	607b      	str	r3, [r7, #4]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d825      	bhi.n	800a9b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800a96c:	4a17      	ldr	r2, [pc, #92]	; (800a9cc <dec_lock+0x74>)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	011b      	lsls	r3, r3, #4
 800a972:	4413      	add	r3, r2
 800a974:	330c      	adds	r3, #12
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a97a:	89fb      	ldrh	r3, [r7, #14]
 800a97c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a980:	d101      	bne.n	800a986 <dec_lock+0x2e>
 800a982:	2300      	movs	r3, #0
 800a984:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a986:	89fb      	ldrh	r3, [r7, #14]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <dec_lock+0x3a>
 800a98c:	89fb      	ldrh	r3, [r7, #14]
 800a98e:	3b01      	subs	r3, #1
 800a990:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a992:	4a0e      	ldr	r2, [pc, #56]	; (800a9cc <dec_lock+0x74>)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	011b      	lsls	r3, r3, #4
 800a998:	4413      	add	r3, r2
 800a99a:	330c      	adds	r3, #12
 800a99c:	89fa      	ldrh	r2, [r7, #14]
 800a99e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a9a0:	89fb      	ldrh	r3, [r7, #14]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d105      	bne.n	800a9b2 <dec_lock+0x5a>
 800a9a6:	4a09      	ldr	r2, [pc, #36]	; (800a9cc <dec_lock+0x74>)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	011b      	lsls	r3, r3, #4
 800a9ac:	4413      	add	r3, r2
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	737b      	strb	r3, [r7, #13]
 800a9b6:	e001      	b.n	800a9bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a9bc:	7b7b      	ldrb	r3, [r7, #13]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	20019d9c 	.word	0x20019d9c

0800a9d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a9d8:	2300      	movs	r3, #0
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	e010      	b.n	800aa00 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a9de:	4a0d      	ldr	r2, [pc, #52]	; (800aa14 <clear_lock+0x44>)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	011b      	lsls	r3, r3, #4
 800a9e4:	4413      	add	r3, r2
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d105      	bne.n	800a9fa <clear_lock+0x2a>
 800a9ee:	4a09      	ldr	r2, [pc, #36]	; (800aa14 <clear_lock+0x44>)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	011b      	lsls	r3, r3, #4
 800a9f4:	4413      	add	r3, r2
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	60fb      	str	r3, [r7, #12]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d9eb      	bls.n	800a9de <clear_lock+0xe>
	}
}
 800aa06:	bf00      	nop
 800aa08:	bf00      	nop
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	20019d9c 	.word	0x20019d9c

0800aa18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b086      	sub	sp, #24
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	78db      	ldrb	r3, [r3, #3]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d034      	beq.n	800aa96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	7858      	ldrb	r0, [r3, #1]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	697a      	ldr	r2, [r7, #20]
 800aa40:	f7ff fd40 	bl	800a4c4 <disk_write>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d002      	beq.n	800aa50 <sync_window+0x38>
			res = FR_DISK_ERR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	73fb      	strb	r3, [r7, #15]
 800aa4e:	e022      	b.n	800aa96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	1ad2      	subs	r2, r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d217      	bcs.n	800aa96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	789b      	ldrb	r3, [r3, #2]
 800aa6a:	613b      	str	r3, [r7, #16]
 800aa6c:	e010      	b.n	800aa90 <sync_window+0x78>
					wsect += fs->fsize;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	4413      	add	r3, r2
 800aa76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	7858      	ldrb	r0, [r3, #1]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa82:	2301      	movs	r3, #1
 800aa84:	697a      	ldr	r2, [r7, #20]
 800aa86:	f7ff fd1d 	bl	800a4c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	613b      	str	r3, [r7, #16]
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d8eb      	bhi.n	800aa6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3718      	adds	r7, #24
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d01b      	beq.n	800aaf0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7ff ffad 	bl	800aa18 <sync_window>
 800aabe:	4603      	mov	r3, r0
 800aac0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aac2:	7bfb      	ldrb	r3, [r7, #15]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d113      	bne.n	800aaf0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	7858      	ldrb	r0, [r3, #1]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aad2:	2301      	movs	r3, #1
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	f7ff fcd5 	bl	800a484 <disk_read>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d004      	beq.n	800aaea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800aae0:	f04f 33ff 	mov.w	r3, #4294967295
 800aae4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	683a      	ldr	r2, [r7, #0]
 800aaee:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
	...

0800aafc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff ff87 	bl	800aa18 <sync_window>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ab0e:	7bfb      	ldrb	r3, [r7, #15]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d158      	bne.n	800abc6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	2b03      	cmp	r3, #3
 800ab1a:	d148      	bne.n	800abae <sync_fs+0xb2>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	791b      	ldrb	r3, [r3, #4]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d144      	bne.n	800abae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	3330      	adds	r3, #48	; 0x30
 800ab28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7ff fda9 	bl	800a686 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	3330      	adds	r3, #48	; 0x30
 800ab38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ab3c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7ff fd38 	bl	800a5b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	3330      	adds	r3, #48	; 0x30
 800ab4a:	4921      	ldr	r1, [pc, #132]	; (800abd0 <sync_fs+0xd4>)
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7ff fd4d 	bl	800a5ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	3330      	adds	r3, #48	; 0x30
 800ab56:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ab5a:	491e      	ldr	r1, [pc, #120]	; (800abd4 <sync_fs+0xd8>)
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7ff fd45 	bl	800a5ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	3330      	adds	r3, #48	; 0x30
 800ab66:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	4610      	mov	r0, r2
 800ab72:	f7ff fd3b 	bl	800a5ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	3330      	adds	r3, #48	; 0x30
 800ab7a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	4619      	mov	r1, r3
 800ab84:	4610      	mov	r0, r2
 800ab86:	f7ff fd31 	bl	800a5ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	69db      	ldr	r3, [r3, #28]
 800ab8e:	1c5a      	adds	r2, r3, #1
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	7858      	ldrb	r0, [r3, #1]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba2:	2301      	movs	r3, #1
 800aba4:	f7ff fc8e 	bl	800a4c4 <disk_write>
			fs->fsi_flag = 0;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	785b      	ldrb	r3, [r3, #1]
 800abb2:	2200      	movs	r2, #0
 800abb4:	2100      	movs	r1, #0
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7ff fca4 	bl	800a504 <disk_ioctl>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <sync_fs+0xca>
 800abc2:	2301      	movs	r3, #1
 800abc4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	41615252 	.word	0x41615252
 800abd4:	61417272 	.word	0x61417272

0800abd8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	3b02      	subs	r3, #2
 800abe6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	695b      	ldr	r3, [r3, #20]
 800abec:	3b02      	subs	r3, #2
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d301      	bcc.n	800abf8 <clust2sect+0x20>
 800abf4:	2300      	movs	r3, #0
 800abf6:	e008      	b.n	800ac0a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	895b      	ldrh	r3, [r3, #10]
 800abfc:	461a      	mov	r2, r3
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	fb03 f202 	mul.w	r2, r3, r2
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac08:	4413      	add	r3, r2
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	370c      	adds	r7, #12
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr

0800ac16 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b086      	sub	sp, #24
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d904      	bls.n	800ac36 <get_fat+0x20>
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	695b      	ldr	r3, [r3, #20]
 800ac30:	683a      	ldr	r2, [r7, #0]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d302      	bcc.n	800ac3c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ac36:	2301      	movs	r3, #1
 800ac38:	617b      	str	r3, [r7, #20]
 800ac3a:	e08f      	b.n	800ad5c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ac3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac40:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	d062      	beq.n	800ad10 <get_fat+0xfa>
 800ac4a:	2b03      	cmp	r3, #3
 800ac4c:	dc7c      	bgt.n	800ad48 <get_fat+0x132>
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d002      	beq.n	800ac58 <get_fat+0x42>
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d042      	beq.n	800acdc <get_fat+0xc6>
 800ac56:	e077      	b.n	800ad48 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	60fb      	str	r3, [r7, #12]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	085b      	lsrs	r3, r3, #1
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	4413      	add	r3, r2
 800ac64:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	6a1a      	ldr	r2, [r3, #32]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	0a5b      	lsrs	r3, r3, #9
 800ac6e:	4413      	add	r3, r2
 800ac70:	4619      	mov	r1, r3
 800ac72:	6938      	ldr	r0, [r7, #16]
 800ac74:	f7ff ff14 	bl	800aaa0 <move_window>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d167      	bne.n	800ad4e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	1c5a      	adds	r2, r3, #1
 800ac82:	60fa      	str	r2, [r7, #12]
 800ac84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac88:	693a      	ldr	r2, [r7, #16]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac90:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	6a1a      	ldr	r2, [r3, #32]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	0a5b      	lsrs	r3, r3, #9
 800ac9a:	4413      	add	r3, r2
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6938      	ldr	r0, [r7, #16]
 800aca0:	f7ff fefe 	bl	800aaa0 <move_window>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d153      	bne.n	800ad52 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acb0:	693a      	ldr	r2, [r7, #16]
 800acb2:	4413      	add	r3, r2
 800acb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800acb8:	021b      	lsls	r3, r3, #8
 800acba:	461a      	mov	r2, r3
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	f003 0301 	and.w	r3, r3, #1
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <get_fat+0xbc>
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	091b      	lsrs	r3, r3, #4
 800acd0:	e002      	b.n	800acd8 <get_fat+0xc2>
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acd8:	617b      	str	r3, [r7, #20]
			break;
 800acda:	e03f      	b.n	800ad5c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	6a1a      	ldr	r2, [r3, #32]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	0a1b      	lsrs	r3, r3, #8
 800ace4:	4413      	add	r3, r2
 800ace6:	4619      	mov	r1, r3
 800ace8:	6938      	ldr	r0, [r7, #16]
 800acea:	f7ff fed9 	bl	800aaa0 <move_window>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d130      	bne.n	800ad56 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	005b      	lsls	r3, r3, #1
 800acfe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ad02:	4413      	add	r3, r2
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff fc1b 	bl	800a540 <ld_word>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	617b      	str	r3, [r7, #20]
			break;
 800ad0e:	e025      	b.n	800ad5c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	6a1a      	ldr	r2, [r3, #32]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	09db      	lsrs	r3, r3, #7
 800ad18:	4413      	add	r3, r2
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	6938      	ldr	r0, [r7, #16]
 800ad1e:	f7ff febf 	bl	800aaa0 <move_window>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d118      	bne.n	800ad5a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ad36:	4413      	add	r3, r2
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7ff fc19 	bl	800a570 <ld_dword>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ad44:	617b      	str	r3, [r7, #20]
			break;
 800ad46:	e009      	b.n	800ad5c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ad48:	2301      	movs	r3, #1
 800ad4a:	617b      	str	r3, [r7, #20]
 800ad4c:	e006      	b.n	800ad5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad4e:	bf00      	nop
 800ad50:	e004      	b.n	800ad5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad52:	bf00      	nop
 800ad54:	e002      	b.n	800ad5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ad56:	bf00      	nop
 800ad58:	e000      	b.n	800ad5c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad5a:	bf00      	nop
		}
	}

	return val;
 800ad5c:	697b      	ldr	r3, [r7, #20]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3718      	adds	r7, #24
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ad66:	b590      	push	{r4, r7, lr}
 800ad68:	b089      	sub	sp, #36	; 0x24
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	60f8      	str	r0, [r7, #12]
 800ad6e:	60b9      	str	r1, [r7, #8]
 800ad70:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ad72:	2302      	movs	r3, #2
 800ad74:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	f240 80d9 	bls.w	800af30 <put_fat+0x1ca>
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	695b      	ldr	r3, [r3, #20]
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	f080 80d3 	bcs.w	800af30 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	2b03      	cmp	r3, #3
 800ad90:	f000 8096 	beq.w	800aec0 <put_fat+0x15a>
 800ad94:	2b03      	cmp	r3, #3
 800ad96:	f300 80cb 	bgt.w	800af30 <put_fat+0x1ca>
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d002      	beq.n	800ada4 <put_fat+0x3e>
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	d06e      	beq.n	800ae80 <put_fat+0x11a>
 800ada2:	e0c5      	b.n	800af30 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	61bb      	str	r3, [r7, #24]
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	085b      	lsrs	r3, r3, #1
 800adac:	69ba      	ldr	r2, [r7, #24]
 800adae:	4413      	add	r3, r2
 800adb0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6a1a      	ldr	r2, [r3, #32]
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	0a5b      	lsrs	r3, r3, #9
 800adba:	4413      	add	r3, r2
 800adbc:	4619      	mov	r1, r3
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f7ff fe6e 	bl	800aaa0 <move_window>
 800adc4:	4603      	mov	r3, r0
 800adc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800adc8:	7ffb      	ldrb	r3, [r7, #31]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f040 80a9 	bne.w	800af22 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	1c59      	adds	r1, r3, #1
 800adda:	61b9      	str	r1, [r7, #24]
 800addc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ade0:	4413      	add	r3, r2
 800ade2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	f003 0301 	and.w	r3, r3, #1
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00d      	beq.n	800ae0a <put_fat+0xa4>
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	b25b      	sxtb	r3, r3
 800adf4:	f003 030f 	and.w	r3, r3, #15
 800adf8:	b25a      	sxtb	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	011b      	lsls	r3, r3, #4
 800ae00:	b25b      	sxtb	r3, r3
 800ae02:	4313      	orrs	r3, r2
 800ae04:	b25b      	sxtb	r3, r3
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	e001      	b.n	800ae0e <put_fat+0xa8>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	697a      	ldr	r2, [r7, #20]
 800ae10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2201      	movs	r2, #1
 800ae16:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6a1a      	ldr	r2, [r3, #32]
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	0a5b      	lsrs	r3, r3, #9
 800ae20:	4413      	add	r3, r2
 800ae22:	4619      	mov	r1, r3
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f7ff fe3b 	bl	800aaa0 <move_window>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae2e:	7ffb      	ldrb	r3, [r7, #31]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d178      	bne.n	800af26 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae40:	4413      	add	r3, r2
 800ae42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	f003 0301 	and.w	r3, r3, #1
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <put_fat+0xf0>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	091b      	lsrs	r3, r3, #4
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	e00e      	b.n	800ae74 <put_fat+0x10e>
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	b25b      	sxtb	r3, r3
 800ae5c:	f023 030f 	bic.w	r3, r3, #15
 800ae60:	b25a      	sxtb	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	0a1b      	lsrs	r3, r3, #8
 800ae66:	b25b      	sxtb	r3, r3
 800ae68:	f003 030f 	and.w	r3, r3, #15
 800ae6c:	b25b      	sxtb	r3, r3
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	b25b      	sxtb	r3, r3
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	70da      	strb	r2, [r3, #3]
			break;
 800ae7e:	e057      	b.n	800af30 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6a1a      	ldr	r2, [r3, #32]
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	0a1b      	lsrs	r3, r3, #8
 800ae88:	4413      	add	r3, r2
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f7ff fe07 	bl	800aaa0 <move_window>
 800ae92:	4603      	mov	r3, r0
 800ae94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae96:	7ffb      	ldrb	r3, [r7, #31]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d146      	bne.n	800af2a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	005b      	lsls	r3, r3, #1
 800aea6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800aeaa:	4413      	add	r3, r2
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	b292      	uxth	r2, r2
 800aeb0:	4611      	mov	r1, r2
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7ff fb7f 	bl	800a5b6 <st_word>
			fs->wflag = 1;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2201      	movs	r2, #1
 800aebc:	70da      	strb	r2, [r3, #3]
			break;
 800aebe:	e037      	b.n	800af30 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6a1a      	ldr	r2, [r3, #32]
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	09db      	lsrs	r3, r3, #7
 800aec8:	4413      	add	r3, r2
 800aeca:	4619      	mov	r1, r3
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f7ff fde7 	bl	800aaa0 <move_window>
 800aed2:	4603      	mov	r3, r0
 800aed4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aed6:	7ffb      	ldrb	r3, [r7, #31]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d128      	bne.n	800af2e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800aef0:	4413      	add	r3, r2
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7ff fb3c 	bl	800a570 <ld_dword>
 800aef8:	4603      	mov	r3, r0
 800aefa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aefe:	4323      	orrs	r3, r4
 800af00:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800af10:	4413      	add	r3, r2
 800af12:	6879      	ldr	r1, [r7, #4]
 800af14:	4618      	mov	r0, r3
 800af16:	f7ff fb69 	bl	800a5ec <st_dword>
			fs->wflag = 1;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2201      	movs	r2, #1
 800af1e:	70da      	strb	r2, [r3, #3]
			break;
 800af20:	e006      	b.n	800af30 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800af22:	bf00      	nop
 800af24:	e004      	b.n	800af30 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800af26:	bf00      	nop
 800af28:	e002      	b.n	800af30 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800af2a:	bf00      	nop
 800af2c:	e000      	b.n	800af30 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800af2e:	bf00      	nop
		}
	}
	return res;
 800af30:	7ffb      	ldrb	r3, [r7, #31]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3724      	adds	r7, #36	; 0x24
 800af36:	46bd      	mov	sp, r7
 800af38:	bd90      	pop	{r4, r7, pc}

0800af3a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b088      	sub	sp, #32
 800af3e:	af00      	add	r7, sp, #0
 800af40:	60f8      	str	r0, [r7, #12]
 800af42:	60b9      	str	r1, [r7, #8]
 800af44:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d904      	bls.n	800af60 <remove_chain+0x26>
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d301      	bcc.n	800af64 <remove_chain+0x2a>
 800af60:	2302      	movs	r3, #2
 800af62:	e04b      	b.n	800affc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00c      	beq.n	800af84 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800af6a:	f04f 32ff 	mov.w	r2, #4294967295
 800af6e:	6879      	ldr	r1, [r7, #4]
 800af70:	69b8      	ldr	r0, [r7, #24]
 800af72:	f7ff fef8 	bl	800ad66 <put_fat>
 800af76:	4603      	mov	r3, r0
 800af78:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800af7a:	7ffb      	ldrb	r3, [r7, #31]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <remove_chain+0x4a>
 800af80:	7ffb      	ldrb	r3, [r7, #31]
 800af82:	e03b      	b.n	800affc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800af84:	68b9      	ldr	r1, [r7, #8]
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f7ff fe45 	bl	800ac16 <get_fat>
 800af8c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d031      	beq.n	800aff8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d101      	bne.n	800af9e <remove_chain+0x64>
 800af9a:	2302      	movs	r3, #2
 800af9c:	e02e      	b.n	800affc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa4:	d101      	bne.n	800afaa <remove_chain+0x70>
 800afa6:	2301      	movs	r3, #1
 800afa8:	e028      	b.n	800affc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800afaa:	2200      	movs	r2, #0
 800afac:	68b9      	ldr	r1, [r7, #8]
 800afae:	69b8      	ldr	r0, [r7, #24]
 800afb0:	f7ff fed9 	bl	800ad66 <put_fat>
 800afb4:	4603      	mov	r3, r0
 800afb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800afb8:	7ffb      	ldrb	r3, [r7, #31]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d001      	beq.n	800afc2 <remove_chain+0x88>
 800afbe:	7ffb      	ldrb	r3, [r7, #31]
 800afc0:	e01c      	b.n	800affc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	691a      	ldr	r2, [r3, #16]
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	3b02      	subs	r3, #2
 800afcc:	429a      	cmp	r2, r3
 800afce:	d20b      	bcs.n	800afe8 <remove_chain+0xae>
			fs->free_clst++;
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	691b      	ldr	r3, [r3, #16]
 800afd4:	1c5a      	adds	r2, r3, #1
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	791b      	ldrb	r3, [r3, #4]
 800afde:	f043 0301 	orr.w	r3, r3, #1
 800afe2:	b2da      	uxtb	r2, r3
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	695b      	ldr	r3, [r3, #20]
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d3c6      	bcc.n	800af84 <remove_chain+0x4a>
 800aff6:	e000      	b.n	800affa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800aff8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	3720      	adds	r7, #32
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b088      	sub	sp, #32
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10d      	bne.n	800b036 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d004      	beq.n	800b030 <create_chain+0x2c>
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	69ba      	ldr	r2, [r7, #24]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d31b      	bcc.n	800b068 <create_chain+0x64>
 800b030:	2301      	movs	r3, #1
 800b032:	61bb      	str	r3, [r7, #24]
 800b034:	e018      	b.n	800b068 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7ff fdec 	bl	800ac16 <get_fat>
 800b03e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2b01      	cmp	r3, #1
 800b044:	d801      	bhi.n	800b04a <create_chain+0x46>
 800b046:	2301      	movs	r3, #1
 800b048:	e070      	b.n	800b12c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b050:	d101      	bne.n	800b056 <create_chain+0x52>
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	e06a      	b.n	800b12c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d201      	bcs.n	800b064 <create_chain+0x60>
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	e063      	b.n	800b12c <create_chain+0x128>
		scl = clst;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	3301      	adds	r3, #1
 800b070:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	69fa      	ldr	r2, [r7, #28]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d307      	bcc.n	800b08c <create_chain+0x88>
				ncl = 2;
 800b07c:	2302      	movs	r3, #2
 800b07e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b080:	69fa      	ldr	r2, [r7, #28]
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	429a      	cmp	r2, r3
 800b086:	d901      	bls.n	800b08c <create_chain+0x88>
 800b088:	2300      	movs	r3, #0
 800b08a:	e04f      	b.n	800b12c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b08c:	69f9      	ldr	r1, [r7, #28]
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7ff fdc1 	bl	800ac16 <get_fat>
 800b094:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00e      	beq.n	800b0ba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d003      	beq.n	800b0aa <create_chain+0xa6>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a8:	d101      	bne.n	800b0ae <create_chain+0xaa>
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	e03e      	b.n	800b12c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b0ae:	69fa      	ldr	r2, [r7, #28]
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d1da      	bne.n	800b06c <create_chain+0x68>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	e038      	b.n	800b12c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b0ba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c0:	69f9      	ldr	r1, [r7, #28]
 800b0c2:	6938      	ldr	r0, [r7, #16]
 800b0c4:	f7ff fe4f 	bl	800ad66 <put_fat>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b0cc:	7dfb      	ldrb	r3, [r7, #23]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d109      	bne.n	800b0e6 <create_chain+0xe2>
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d006      	beq.n	800b0e6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b0d8:	69fa      	ldr	r2, [r7, #28]
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6938      	ldr	r0, [r7, #16]
 800b0de:	f7ff fe42 	bl	800ad66 <put_fat>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b0e6:	7dfb      	ldrb	r3, [r7, #23]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d116      	bne.n	800b11a <create_chain+0x116>
		fs->last_clst = ncl;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	69fa      	ldr	r2, [r7, #28]
 800b0f0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	691a      	ldr	r2, [r3, #16]
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	3b02      	subs	r3, #2
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d804      	bhi.n	800b10a <create_chain+0x106>
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	1e5a      	subs	r2, r3, #1
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	791b      	ldrb	r3, [r3, #4]
 800b10e:	f043 0301 	orr.w	r3, r3, #1
 800b112:	b2da      	uxtb	r2, r3
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	711a      	strb	r2, [r3, #4]
 800b118:	e007      	b.n	800b12a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b11a:	7dfb      	ldrb	r3, [r7, #23]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d102      	bne.n	800b126 <create_chain+0x122>
 800b120:	f04f 33ff 	mov.w	r3, #4294967295
 800b124:	e000      	b.n	800b128 <create_chain+0x124>
 800b126:	2301      	movs	r3, #1
 800b128:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b12a:	69fb      	ldr	r3, [r7, #28]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3720      	adds	r7, #32
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b134:	b480      	push	{r7}
 800b136:	b087      	sub	sp, #28
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b148:	3304      	adds	r3, #4
 800b14a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	0a5b      	lsrs	r3, r3, #9
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	8952      	ldrh	r2, [r2, #10]
 800b154:	fbb3 f3f2 	udiv	r3, r3, r2
 800b158:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	1d1a      	adds	r2, r3, #4
 800b15e:	613a      	str	r2, [r7, #16]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d101      	bne.n	800b16e <clmt_clust+0x3a>
 800b16a:	2300      	movs	r3, #0
 800b16c:	e010      	b.n	800b190 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b16e:	697a      	ldr	r2, [r7, #20]
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	429a      	cmp	r2, r3
 800b174:	d307      	bcc.n	800b186 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b176:	697a      	ldr	r2, [r7, #20]
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	617b      	str	r3, [r7, #20]
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	3304      	adds	r3, #4
 800b182:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b184:	e7e9      	b.n	800b15a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b186:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	4413      	add	r3, r2
}
 800b190:	4618      	mov	r0, r3
 800b192:	371c      	adds	r7, #28
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1b2:	d204      	bcs.n	800b1be <dir_sdi+0x22>
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	f003 031f 	and.w	r3, r3, #31
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d001      	beq.n	800b1c2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b1be:	2302      	movs	r3, #2
 800b1c0:	e063      	b.n	800b28a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	683a      	ldr	r2, [r7, #0]
 800b1c6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d106      	bne.n	800b1e2 <dir_sdi+0x46>
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d902      	bls.n	800b1e2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d10c      	bne.n	800b202 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	095b      	lsrs	r3, r3, #5
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	8912      	ldrh	r2, [r2, #8]
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d301      	bcc.n	800b1f8 <dir_sdi+0x5c>
 800b1f4:	2302      	movs	r3, #2
 800b1f6:	e048      	b.n	800b28a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	61da      	str	r2, [r3, #28]
 800b200:	e029      	b.n	800b256 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	895b      	ldrh	r3, [r3, #10]
 800b206:	025b      	lsls	r3, r3, #9
 800b208:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b20a:	e019      	b.n	800b240 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6979      	ldr	r1, [r7, #20]
 800b210:	4618      	mov	r0, r3
 800b212:	f7ff fd00 	bl	800ac16 <get_fat>
 800b216:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b21e:	d101      	bne.n	800b224 <dir_sdi+0x88>
 800b220:	2301      	movs	r3, #1
 800b222:	e032      	b.n	800b28a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	2b01      	cmp	r3, #1
 800b228:	d904      	bls.n	800b234 <dir_sdi+0x98>
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	697a      	ldr	r2, [r7, #20]
 800b230:	429a      	cmp	r2, r3
 800b232:	d301      	bcc.n	800b238 <dir_sdi+0x9c>
 800b234:	2302      	movs	r3, #2
 800b236:	e028      	b.n	800b28a <dir_sdi+0xee>
			ofs -= csz;
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	1ad3      	subs	r3, r2, r3
 800b23e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	429a      	cmp	r2, r3
 800b246:	d2e1      	bcs.n	800b20c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b248:	6979      	ldr	r1, [r7, #20]
 800b24a:	6938      	ldr	r0, [r7, #16]
 800b24c:	f7ff fcc4 	bl	800abd8 <clust2sect>
 800b250:	4602      	mov	r2, r0
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	697a      	ldr	r2, [r7, #20]
 800b25a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	69db      	ldr	r3, [r3, #28]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d101      	bne.n	800b268 <dir_sdi+0xcc>
 800b264:	2302      	movs	r3, #2
 800b266:	e010      	b.n	800b28a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	69da      	ldr	r2, [r3, #28]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	0a5b      	lsrs	r3, r3, #9
 800b270:	441a      	add	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b282:	441a      	add	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3718      	adds	r7, #24
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b292:	b580      	push	{r7, lr}
 800b294:	b086      	sub	sp, #24
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	695b      	ldr	r3, [r3, #20]
 800b2a6:	3320      	adds	r3, #32
 800b2a8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <dir_next+0x28>
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2b8:	d301      	bcc.n	800b2be <dir_next+0x2c>
 800b2ba:	2304      	movs	r3, #4
 800b2bc:	e0aa      	b.n	800b414 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f040 8098 	bne.w	800b3fa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	1c5a      	adds	r2, r3, #1
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	699b      	ldr	r3, [r3, #24]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d10b      	bne.n	800b2f4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	095b      	lsrs	r3, r3, #5
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	8912      	ldrh	r2, [r2, #8]
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	f0c0 8088 	bcc.w	800b3fa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	61da      	str	r2, [r3, #28]
 800b2f0:	2304      	movs	r3, #4
 800b2f2:	e08f      	b.n	800b414 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	0a5b      	lsrs	r3, r3, #9
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	8952      	ldrh	r2, [r2, #10]
 800b2fc:	3a01      	subs	r2, #1
 800b2fe:	4013      	ands	r3, r2
 800b300:	2b00      	cmp	r3, #0
 800b302:	d17a      	bne.n	800b3fa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	4619      	mov	r1, r3
 800b30c:	4610      	mov	r0, r2
 800b30e:	f7ff fc82 	bl	800ac16 <get_fat>
 800b312:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d801      	bhi.n	800b31e <dir_next+0x8c>
 800b31a:	2302      	movs	r3, #2
 800b31c:	e07a      	b.n	800b414 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b324:	d101      	bne.n	800b32a <dir_next+0x98>
 800b326:	2301      	movs	r3, #1
 800b328:	e074      	b.n	800b414 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	695b      	ldr	r3, [r3, #20]
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	429a      	cmp	r2, r3
 800b332:	d358      	bcc.n	800b3e6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d104      	bne.n	800b344 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	61da      	str	r2, [r3, #28]
 800b340:	2304      	movs	r3, #4
 800b342:	e067      	b.n	800b414 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	4619      	mov	r1, r3
 800b34c:	4610      	mov	r0, r2
 800b34e:	f7ff fe59 	bl	800b004 <create_chain>
 800b352:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d101      	bne.n	800b35e <dir_next+0xcc>
 800b35a:	2307      	movs	r3, #7
 800b35c:	e05a      	b.n	800b414 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	2b01      	cmp	r3, #1
 800b362:	d101      	bne.n	800b368 <dir_next+0xd6>
 800b364:	2302      	movs	r3, #2
 800b366:	e055      	b.n	800b414 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36e:	d101      	bne.n	800b374 <dir_next+0xe2>
 800b370:	2301      	movs	r3, #1
 800b372:	e04f      	b.n	800b414 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f7ff fb4f 	bl	800aa18 <sync_window>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <dir_next+0xf2>
 800b380:	2301      	movs	r3, #1
 800b382:	e047      	b.n	800b414 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	3330      	adds	r3, #48	; 0x30
 800b388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b38c:	2100      	movs	r1, #0
 800b38e:	4618      	mov	r0, r3
 800b390:	f7ff f979 	bl	800a686 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b394:	2300      	movs	r3, #0
 800b396:	613b      	str	r3, [r7, #16]
 800b398:	6979      	ldr	r1, [r7, #20]
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f7ff fc1c 	bl	800abd8 <clust2sect>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	62da      	str	r2, [r3, #44]	; 0x2c
 800b3a6:	e012      	b.n	800b3ce <dir_next+0x13c>
						fs->wflag = 1;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f7ff fb32 	bl	800aa18 <sync_window>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d001      	beq.n	800b3be <dir_next+0x12c>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e02a      	b.n	800b414 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	613b      	str	r3, [r7, #16]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c8:	1c5a      	adds	r2, r3, #1
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	62da      	str	r2, [r3, #44]	; 0x2c
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	895b      	ldrh	r3, [r3, #10]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d3e6      	bcc.n	800b3a8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	1ad2      	subs	r2, r2, r3
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	697a      	ldr	r2, [r7, #20]
 800b3ea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b3ec:	6979      	ldr	r1, [r7, #20]
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f7ff fbf2 	bl	800abd8 <clust2sect>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b40c:	441a      	add	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b412:	2300      	movs	r3, #0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3718      	adds	r7, #24
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b42c:	2100      	movs	r1, #0
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7ff feb4 	bl	800b19c <dir_sdi>
 800b434:	4603      	mov	r3, r0
 800b436:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b438:	7dfb      	ldrb	r3, [r7, #23]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d12b      	bne.n	800b496 <dir_alloc+0x7a>
		n = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	69db      	ldr	r3, [r3, #28]
 800b446:	4619      	mov	r1, r3
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f7ff fb29 	bl	800aaa0 <move_window>
 800b44e:	4603      	mov	r3, r0
 800b450:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b452:	7dfb      	ldrb	r3, [r7, #23]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d11d      	bne.n	800b494 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6a1b      	ldr	r3, [r3, #32]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	2be5      	cmp	r3, #229	; 0xe5
 800b460:	d004      	beq.n	800b46c <dir_alloc+0x50>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a1b      	ldr	r3, [r3, #32]
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d107      	bne.n	800b47c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	3301      	adds	r3, #1
 800b470:	613b      	str	r3, [r7, #16]
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	429a      	cmp	r2, r3
 800b478:	d102      	bne.n	800b480 <dir_alloc+0x64>
 800b47a:	e00c      	b.n	800b496 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b47c:	2300      	movs	r3, #0
 800b47e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b480:	2101      	movs	r1, #1
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7ff ff05 	bl	800b292 <dir_next>
 800b488:	4603      	mov	r3, r0
 800b48a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b48c:	7dfb      	ldrb	r3, [r7, #23]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d0d7      	beq.n	800b442 <dir_alloc+0x26>
 800b492:	e000      	b.n	800b496 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b494:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b496:	7dfb      	ldrb	r3, [r7, #23]
 800b498:	2b04      	cmp	r3, #4
 800b49a:	d101      	bne.n	800b4a0 <dir_alloc+0x84>
 800b49c:	2307      	movs	r3, #7
 800b49e:	75fb      	strb	r3, [r7, #23]
	return res;
 800b4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3718      	adds	r7, #24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b084      	sub	sp, #16
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	331a      	adds	r3, #26
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff f841 	bl	800a540 <ld_word>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	2b03      	cmp	r3, #3
 800b4c8:	d109      	bne.n	800b4de <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	3314      	adds	r3, #20
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7ff f836 	bl	800a540 <ld_word>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	041b      	lsls	r3, r3, #16
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b4de:	68fb      	ldr	r3, [r7, #12]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	331a      	adds	r3, #26
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	b292      	uxth	r2, r2
 800b4fc:	4611      	mov	r1, r2
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7ff f859 	bl	800a5b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b03      	cmp	r3, #3
 800b50a:	d109      	bne.n	800b520 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	f103 0214 	add.w	r2, r3, #20
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	0c1b      	lsrs	r3, r3, #16
 800b516:	b29b      	uxth	r3, r3
 800b518:	4619      	mov	r1, r3
 800b51a:	4610      	mov	r0, r2
 800b51c:	f7ff f84b 	bl	800a5b6 <st_word>
	}
}
 800b520:	bf00      	nop
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b536:	2100      	movs	r1, #0
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff fe2f 	bl	800b19c <dir_sdi>
 800b53e:	4603      	mov	r3, r0
 800b540:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d001      	beq.n	800b54c <dir_find+0x24>
 800b548:	7dfb      	ldrb	r3, [r7, #23]
 800b54a:	e03e      	b.n	800b5ca <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	69db      	ldr	r3, [r3, #28]
 800b550:	4619      	mov	r1, r3
 800b552:	6938      	ldr	r0, [r7, #16]
 800b554:	f7ff faa4 	bl	800aaa0 <move_window>
 800b558:	4603      	mov	r3, r0
 800b55a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b55c:	7dfb      	ldrb	r3, [r7, #23]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d12f      	bne.n	800b5c2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a1b      	ldr	r3, [r3, #32]
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b56a:	7bfb      	ldrb	r3, [r7, #15]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d102      	bne.n	800b576 <dir_find+0x4e>
 800b570:	2304      	movs	r3, #4
 800b572:	75fb      	strb	r3, [r7, #23]
 800b574:	e028      	b.n	800b5c8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	330b      	adds	r3, #11
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b582:	b2da      	uxtb	r2, r3
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6a1b      	ldr	r3, [r3, #32]
 800b58c:	330b      	adds	r3, #11
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	f003 0308 	and.w	r3, r3, #8
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10a      	bne.n	800b5ae <dir_find+0x86>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6a18      	ldr	r0, [r3, #32]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	3324      	adds	r3, #36	; 0x24
 800b5a0:	220b      	movs	r2, #11
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	f7ff f88a 	bl	800a6bc <mem_cmp>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00b      	beq.n	800b5c6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f7ff fe6e 	bl	800b292 <dir_next>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b5ba:	7dfb      	ldrb	r3, [r7, #23]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d0c5      	beq.n	800b54c <dir_find+0x24>
 800b5c0:	e002      	b.n	800b5c8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b5c2:	bf00      	nop
 800b5c4:	e000      	b.n	800b5c8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b5c6:	bf00      	nop

	return res;
 800b5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3718      	adds	r7, #24
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b084      	sub	sp, #16
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b5e0:	2101      	movs	r1, #1
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f7ff ff1a 	bl	800b41c <dir_alloc>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d11c      	bne.n	800b62c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	69db      	ldr	r3, [r3, #28]
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	68b8      	ldr	r0, [r7, #8]
 800b5fa:	f7ff fa51 	bl	800aaa0 <move_window>
 800b5fe:	4603      	mov	r3, r0
 800b600:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b602:	7bfb      	ldrb	r3, [r7, #15]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d111      	bne.n	800b62c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a1b      	ldr	r3, [r3, #32]
 800b60c:	2220      	movs	r2, #32
 800b60e:	2100      	movs	r1, #0
 800b610:	4618      	mov	r0, r3
 800b612:	f7ff f838 	bl	800a686 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a18      	ldr	r0, [r3, #32]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	3324      	adds	r3, #36	; 0x24
 800b61e:	220b      	movs	r2, #11
 800b620:	4619      	mov	r1, r3
 800b622:	f7ff f80f 	bl	800a644 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	2201      	movs	r2, #1
 800b62a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
	...

0800b638 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b088      	sub	sp, #32
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	60fb      	str	r3, [r7, #12]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	3324      	adds	r3, #36	; 0x24
 800b64c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b64e:	220b      	movs	r2, #11
 800b650:	2120      	movs	r1, #32
 800b652:	68b8      	ldr	r0, [r7, #8]
 800b654:	f7ff f817 	bl	800a686 <mem_set>
	si = i = 0; ni = 8;
 800b658:	2300      	movs	r3, #0
 800b65a:	613b      	str	r3, [r7, #16]
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	61fb      	str	r3, [r7, #28]
 800b660:	2308      	movs	r3, #8
 800b662:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	1c5a      	adds	r2, r3, #1
 800b668:	61fa      	str	r2, [r7, #28]
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	4413      	add	r3, r2
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b672:	7efb      	ldrb	r3, [r7, #27]
 800b674:	2b20      	cmp	r3, #32
 800b676:	d94e      	bls.n	800b716 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b678:	7efb      	ldrb	r3, [r7, #27]
 800b67a:	2b2f      	cmp	r3, #47	; 0x2f
 800b67c:	d006      	beq.n	800b68c <create_name+0x54>
 800b67e:	7efb      	ldrb	r3, [r7, #27]
 800b680:	2b5c      	cmp	r3, #92	; 0x5c
 800b682:	d110      	bne.n	800b6a6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b684:	e002      	b.n	800b68c <create_name+0x54>
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	3301      	adds	r3, #1
 800b68a:	61fb      	str	r3, [r7, #28]
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	4413      	add	r3, r2
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	2b2f      	cmp	r3, #47	; 0x2f
 800b696:	d0f6      	beq.n	800b686 <create_name+0x4e>
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	4413      	add	r3, r2
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	2b5c      	cmp	r3, #92	; 0x5c
 800b6a2:	d0f0      	beq.n	800b686 <create_name+0x4e>
			break;
 800b6a4:	e038      	b.n	800b718 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b6a6:	7efb      	ldrb	r3, [r7, #27]
 800b6a8:	2b2e      	cmp	r3, #46	; 0x2e
 800b6aa:	d003      	beq.n	800b6b4 <create_name+0x7c>
 800b6ac:	693a      	ldr	r2, [r7, #16]
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d30c      	bcc.n	800b6ce <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	2b0b      	cmp	r3, #11
 800b6b8:	d002      	beq.n	800b6c0 <create_name+0x88>
 800b6ba:	7efb      	ldrb	r3, [r7, #27]
 800b6bc:	2b2e      	cmp	r3, #46	; 0x2e
 800b6be:	d001      	beq.n	800b6c4 <create_name+0x8c>
 800b6c0:	2306      	movs	r3, #6
 800b6c2:	e044      	b.n	800b74e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b6c4:	2308      	movs	r3, #8
 800b6c6:	613b      	str	r3, [r7, #16]
 800b6c8:	230b      	movs	r3, #11
 800b6ca:	617b      	str	r3, [r7, #20]
			continue;
 800b6cc:	e022      	b.n	800b714 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b6ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	da04      	bge.n	800b6e0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b6d6:	7efb      	ldrb	r3, [r7, #27]
 800b6d8:	3b80      	subs	r3, #128	; 0x80
 800b6da:	4a1f      	ldr	r2, [pc, #124]	; (800b758 <create_name+0x120>)
 800b6dc:	5cd3      	ldrb	r3, [r2, r3]
 800b6de:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b6e0:	7efb      	ldrb	r3, [r7, #27]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	481d      	ldr	r0, [pc, #116]	; (800b75c <create_name+0x124>)
 800b6e6:	f7ff f810 	bl	800a70a <chk_chr>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d001      	beq.n	800b6f4 <create_name+0xbc>
 800b6f0:	2306      	movs	r3, #6
 800b6f2:	e02c      	b.n	800b74e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b6f4:	7efb      	ldrb	r3, [r7, #27]
 800b6f6:	2b60      	cmp	r3, #96	; 0x60
 800b6f8:	d905      	bls.n	800b706 <create_name+0xce>
 800b6fa:	7efb      	ldrb	r3, [r7, #27]
 800b6fc:	2b7a      	cmp	r3, #122	; 0x7a
 800b6fe:	d802      	bhi.n	800b706 <create_name+0xce>
 800b700:	7efb      	ldrb	r3, [r7, #27]
 800b702:	3b20      	subs	r3, #32
 800b704:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	1c5a      	adds	r2, r3, #1
 800b70a:	613a      	str	r2, [r7, #16]
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	4413      	add	r3, r2
 800b710:	7efa      	ldrb	r2, [r7, #27]
 800b712:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b714:	e7a6      	b.n	800b664 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b716:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	441a      	add	r2, r3
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d101      	bne.n	800b72c <create_name+0xf4>
 800b728:	2306      	movs	r3, #6
 800b72a:	e010      	b.n	800b74e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	2be5      	cmp	r3, #229	; 0xe5
 800b732:	d102      	bne.n	800b73a <create_name+0x102>
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	2205      	movs	r2, #5
 800b738:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b73a:	7efb      	ldrb	r3, [r7, #27]
 800b73c:	2b20      	cmp	r3, #32
 800b73e:	d801      	bhi.n	800b744 <create_name+0x10c>
 800b740:	2204      	movs	r2, #4
 800b742:	e000      	b.n	800b746 <create_name+0x10e>
 800b744:	2200      	movs	r2, #0
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	330b      	adds	r3, #11
 800b74a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b74c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3720      	adds	r7, #32
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	08011b0c 	.word	0x08011b0c
 800b75c:	0800ffe8 	.word	0x0800ffe8

0800b760 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b774:	e002      	b.n	800b77c <follow_path+0x1c>
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	3301      	adds	r3, #1
 800b77a:	603b      	str	r3, [r7, #0]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	2b2f      	cmp	r3, #47	; 0x2f
 800b782:	d0f8      	beq.n	800b776 <follow_path+0x16>
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	2b5c      	cmp	r3, #92	; 0x5c
 800b78a:	d0f4      	beq.n	800b776 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	2200      	movs	r2, #0
 800b790:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	2b1f      	cmp	r3, #31
 800b798:	d80a      	bhi.n	800b7b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2280      	movs	r2, #128	; 0x80
 800b79e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7ff fcf9 	bl	800b19c <dir_sdi>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	75fb      	strb	r3, [r7, #23]
 800b7ae:	e043      	b.n	800b838 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b7b0:	463b      	mov	r3, r7
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7ff ff3f 	bl	800b638 <create_name>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b7be:	7dfb      	ldrb	r3, [r7, #23]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d134      	bne.n	800b82e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f7ff feaf 	bl	800b528 <dir_find>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b7d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b7d6:	7dfb      	ldrb	r3, [r7, #23]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00a      	beq.n	800b7f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b7dc:	7dfb      	ldrb	r3, [r7, #23]
 800b7de:	2b04      	cmp	r3, #4
 800b7e0:	d127      	bne.n	800b832 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b7e2:	7afb      	ldrb	r3, [r7, #11]
 800b7e4:	f003 0304 	and.w	r3, r3, #4
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d122      	bne.n	800b832 <follow_path+0xd2>
 800b7ec:	2305      	movs	r3, #5
 800b7ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b7f0:	e01f      	b.n	800b832 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b7f2:	7afb      	ldrb	r3, [r7, #11]
 800b7f4:	f003 0304 	and.w	r3, r3, #4
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d11c      	bne.n	800b836 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	799b      	ldrb	r3, [r3, #6]
 800b800:	f003 0310 	and.w	r3, r3, #16
 800b804:	2b00      	cmp	r3, #0
 800b806:	d102      	bne.n	800b80e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b808:	2305      	movs	r3, #5
 800b80a:	75fb      	strb	r3, [r7, #23]
 800b80c:	e014      	b.n	800b838 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	695b      	ldr	r3, [r3, #20]
 800b818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b81c:	4413      	add	r3, r2
 800b81e:	4619      	mov	r1, r3
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f7ff fe42 	bl	800b4aa <ld_clust>
 800b826:	4602      	mov	r2, r0
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b82c:	e7c0      	b.n	800b7b0 <follow_path+0x50>
			if (res != FR_OK) break;
 800b82e:	bf00      	nop
 800b830:	e002      	b.n	800b838 <follow_path+0xd8>
				break;
 800b832:	bf00      	nop
 800b834:	e000      	b.n	800b838 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b836:	bf00      	nop
			}
		}
	}

	return res;
 800b838:	7dfb      	ldrb	r3, [r7, #23]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b842:	b480      	push	{r7}
 800b844:	b087      	sub	sp, #28
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b84a:	f04f 33ff 	mov.w	r3, #4294967295
 800b84e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d031      	beq.n	800b8bc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	617b      	str	r3, [r7, #20]
 800b85e:	e002      	b.n	800b866 <get_ldnumber+0x24>
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	3301      	adds	r3, #1
 800b864:	617b      	str	r3, [r7, #20]
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	2b20      	cmp	r3, #32
 800b86c:	d903      	bls.n	800b876 <get_ldnumber+0x34>
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	2b3a      	cmp	r3, #58	; 0x3a
 800b874:	d1f4      	bne.n	800b860 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	2b3a      	cmp	r3, #58	; 0x3a
 800b87c:	d11c      	bne.n	800b8b8 <get_ldnumber+0x76>
			tp = *path;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	1c5a      	adds	r2, r3, #1
 800b888:	60fa      	str	r2, [r7, #12]
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	3b30      	subs	r3, #48	; 0x30
 800b88e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	2b09      	cmp	r3, #9
 800b894:	d80e      	bhi.n	800b8b4 <get_ldnumber+0x72>
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d10a      	bne.n	800b8b4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d107      	bne.n	800b8b4 <get_ldnumber+0x72>
					vol = (int)i;
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	617b      	str	r3, [r7, #20]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	697a      	ldr	r2, [r7, #20]
 800b8b2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	e002      	b.n	800b8be <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b8bc:	693b      	ldr	r3, [r7, #16]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	371c      	adds	r7, #28
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr
	...

0800b8cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	70da      	strb	r2, [r3, #3]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f7ff f8da 	bl	800aaa0 <move_window>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d001      	beq.n	800b8f6 <check_fs+0x2a>
 800b8f2:	2304      	movs	r3, #4
 800b8f4:	e038      	b.n	800b968 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	3330      	adds	r3, #48	; 0x30
 800b8fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fe fe1e 	bl	800a540 <ld_word>
 800b904:	4603      	mov	r3, r0
 800b906:	461a      	mov	r2, r3
 800b908:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d001      	beq.n	800b914 <check_fs+0x48>
 800b910:	2303      	movs	r3, #3
 800b912:	e029      	b.n	800b968 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b91a:	2be9      	cmp	r3, #233	; 0xe9
 800b91c:	d009      	beq.n	800b932 <check_fs+0x66>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b924:	2beb      	cmp	r3, #235	; 0xeb
 800b926:	d11e      	bne.n	800b966 <check_fs+0x9a>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b92e:	2b90      	cmp	r3, #144	; 0x90
 800b930:	d119      	bne.n	800b966 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	3330      	adds	r3, #48	; 0x30
 800b936:	3336      	adds	r3, #54	; 0x36
 800b938:	4618      	mov	r0, r3
 800b93a:	f7fe fe19 	bl	800a570 <ld_dword>
 800b93e:	4603      	mov	r3, r0
 800b940:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b944:	4a0a      	ldr	r2, [pc, #40]	; (800b970 <check_fs+0xa4>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d101      	bne.n	800b94e <check_fs+0x82>
 800b94a:	2300      	movs	r3, #0
 800b94c:	e00c      	b.n	800b968 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	3330      	adds	r3, #48	; 0x30
 800b952:	3352      	adds	r3, #82	; 0x52
 800b954:	4618      	mov	r0, r3
 800b956:	f7fe fe0b 	bl	800a570 <ld_dword>
 800b95a:	4603      	mov	r3, r0
 800b95c:	4a05      	ldr	r2, [pc, #20]	; (800b974 <check_fs+0xa8>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d101      	bne.n	800b966 <check_fs+0x9a>
 800b962:	2300      	movs	r3, #0
 800b964:	e000      	b.n	800b968 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b966:	2302      	movs	r3, #2
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	00544146 	.word	0x00544146
 800b974:	33544146 	.word	0x33544146

0800b978 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b096      	sub	sp, #88	; 0x58
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	4613      	mov	r3, r2
 800b984:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	2200      	movs	r2, #0
 800b98a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f7ff ff58 	bl	800b842 <get_ldnumber>
 800b992:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b996:	2b00      	cmp	r3, #0
 800b998:	da01      	bge.n	800b99e <find_volume+0x26>
 800b99a:	230b      	movs	r3, #11
 800b99c:	e22d      	b.n	800bdfa <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b99e:	4aa1      	ldr	r2, [pc, #644]	; (800bc24 <find_volume+0x2ac>)
 800b9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d101      	bne.n	800b9b2 <find_volume+0x3a>
 800b9ae:	230c      	movs	r3, #12
 800b9b0:	e223      	b.n	800bdfa <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	f023 0301 	bic.w	r3, r3, #1
 800b9be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d01a      	beq.n	800b9fe <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ca:	785b      	ldrb	r3, [r3, #1]
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7fe fd19 	bl	800a404 <disk_status>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b9d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d10c      	bne.n	800b9fe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b9e4:	79fb      	ldrb	r3, [r7, #7]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d007      	beq.n	800b9fa <find_volume+0x82>
 800b9ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b9ee:	f003 0304 	and.w	r3, r3, #4
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d001      	beq.n	800b9fa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b9f6:	230a      	movs	r3, #10
 800b9f8:	e1ff      	b.n	800bdfa <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	e1fd      	b.n	800bdfa <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba00:	2200      	movs	r2, #0
 800ba02:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ba04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba06:	b2da      	uxtb	r2, r3
 800ba08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0e:	785b      	ldrb	r3, [r3, #1]
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fe fd11 	bl	800a438 <disk_initialize>
 800ba16:	4603      	mov	r3, r0
 800ba18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ba1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba20:	f003 0301 	and.w	r3, r3, #1
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d001      	beq.n	800ba2c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ba28:	2303      	movs	r3, #3
 800ba2a:	e1e6      	b.n	800bdfa <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ba2c:	79fb      	ldrb	r3, [r7, #7]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d007      	beq.n	800ba42 <find_volume+0xca>
 800ba32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba36:	f003 0304 	and.w	r3, r3, #4
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ba3e:	230a      	movs	r3, #10
 800ba40:	e1db      	b.n	800bdfa <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ba42:	2300      	movs	r3, #0
 800ba44:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ba46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba4a:	f7ff ff3f 	bl	800b8cc <check_fs>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ba54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d149      	bne.n	800baf0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	643b      	str	r3, [r7, #64]	; 0x40
 800ba60:	e01e      	b.n	800baa0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ba62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba6a:	011b      	lsls	r3, r3, #4
 800ba6c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ba70:	4413      	add	r3, r2
 800ba72:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ba74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba76:	3304      	adds	r3, #4
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d006      	beq.n	800ba8c <find_volume+0x114>
 800ba7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba80:	3308      	adds	r3, #8
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7fe fd74 	bl	800a570 <ld_dword>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	e000      	b.n	800ba8e <find_volume+0x116>
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	3358      	adds	r3, #88	; 0x58
 800ba94:	443b      	add	r3, r7
 800ba96:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ba9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	643b      	str	r3, [r7, #64]	; 0x40
 800baa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baa2:	2b03      	cmp	r3, #3
 800baa4:	d9dd      	bls.n	800ba62 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800baa6:	2300      	movs	r3, #0
 800baa8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800baaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baac:	2b00      	cmp	r3, #0
 800baae:	d002      	beq.n	800bab6 <find_volume+0x13e>
 800bab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bab2:	3b01      	subs	r3, #1
 800bab4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	3358      	adds	r3, #88	; 0x58
 800babc:	443b      	add	r3, r7
 800babe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bac2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d005      	beq.n	800bad6 <find_volume+0x15e>
 800baca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bacc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bace:	f7ff fefd 	bl	800b8cc <check_fs>
 800bad2:	4603      	mov	r3, r0
 800bad4:	e000      	b.n	800bad8 <find_volume+0x160>
 800bad6:	2303      	movs	r3, #3
 800bad8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800badc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d905      	bls.n	800baf0 <find_volume+0x178>
 800bae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bae6:	3301      	adds	r3, #1
 800bae8:	643b      	str	r3, [r7, #64]	; 0x40
 800baea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baec:	2b03      	cmp	r3, #3
 800baee:	d9e2      	bls.n	800bab6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800baf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800baf4:	2b04      	cmp	r3, #4
 800baf6:	d101      	bne.n	800bafc <find_volume+0x184>
 800baf8:	2301      	movs	r3, #1
 800bafa:	e17e      	b.n	800bdfa <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bafc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d901      	bls.n	800bb08 <find_volume+0x190>
 800bb04:	230d      	movs	r3, #13
 800bb06:	e178      	b.n	800bdfa <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0a:	3330      	adds	r3, #48	; 0x30
 800bb0c:	330b      	adds	r3, #11
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fe fd16 	bl	800a540 <ld_word>
 800bb14:	4603      	mov	r3, r0
 800bb16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb1a:	d001      	beq.n	800bb20 <find_volume+0x1a8>
 800bb1c:	230d      	movs	r3, #13
 800bb1e:	e16c      	b.n	800bdfa <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb22:	3330      	adds	r3, #48	; 0x30
 800bb24:	3316      	adds	r3, #22
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fe fd0a 	bl	800a540 <ld_word>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bb30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d106      	bne.n	800bb44 <find_volume+0x1cc>
 800bb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb38:	3330      	adds	r3, #48	; 0x30
 800bb3a:	3324      	adds	r3, #36	; 0x24
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7fe fd17 	bl	800a570 <ld_dword>
 800bb42:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb48:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800bb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb52:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb56:	789b      	ldrb	r3, [r3, #2]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d005      	beq.n	800bb68 <find_volume+0x1f0>
 800bb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5e:	789b      	ldrb	r3, [r3, #2]
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d001      	beq.n	800bb68 <find_volume+0x1f0>
 800bb64:	230d      	movs	r3, #13
 800bb66:	e148      	b.n	800bdfa <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6a:	789b      	ldrb	r3, [r3, #2]
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb70:	fb02 f303 	mul.w	r3, r2, r3
 800bb74:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb7c:	b29a      	uxth	r2, r3
 800bb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb80:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb84:	895b      	ldrh	r3, [r3, #10]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d008      	beq.n	800bb9c <find_volume+0x224>
 800bb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8c:	895b      	ldrh	r3, [r3, #10]
 800bb8e:	461a      	mov	r2, r3
 800bb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb92:	895b      	ldrh	r3, [r3, #10]
 800bb94:	3b01      	subs	r3, #1
 800bb96:	4013      	ands	r3, r2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d001      	beq.n	800bba0 <find_volume+0x228>
 800bb9c:	230d      	movs	r3, #13
 800bb9e:	e12c      	b.n	800bdfa <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba2:	3330      	adds	r3, #48	; 0x30
 800bba4:	3311      	adds	r3, #17
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fe fcca 	bl	800a540 <ld_word>
 800bbac:	4603      	mov	r3, r0
 800bbae:	461a      	mov	r2, r3
 800bbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb6:	891b      	ldrh	r3, [r3, #8]
 800bbb8:	f003 030f 	and.w	r3, r3, #15
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <find_volume+0x24e>
 800bbc2:	230d      	movs	r3, #13
 800bbc4:	e119      	b.n	800bdfa <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc8:	3330      	adds	r3, #48	; 0x30
 800bbca:	3313      	adds	r3, #19
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fe fcb7 	bl	800a540 <ld_word>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bbd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d106      	bne.n	800bbea <find_volume+0x272>
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbde:	3330      	adds	r3, #48	; 0x30
 800bbe0:	3320      	adds	r3, #32
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe fcc4 	bl	800a570 <ld_dword>
 800bbe8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbec:	3330      	adds	r3, #48	; 0x30
 800bbee:	330e      	adds	r3, #14
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7fe fca5 	bl	800a540 <ld_word>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bbfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d101      	bne.n	800bc04 <find_volume+0x28c>
 800bc00:	230d      	movs	r3, #13
 800bc02:	e0fa      	b.n	800bdfa <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bc04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bc06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc08:	4413      	add	r3, r2
 800bc0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc0c:	8912      	ldrh	r2, [r2, #8]
 800bc0e:	0912      	lsrs	r2, r2, #4
 800bc10:	b292      	uxth	r2, r2
 800bc12:	4413      	add	r3, r2
 800bc14:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bc16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d204      	bcs.n	800bc28 <find_volume+0x2b0>
 800bc1e:	230d      	movs	r3, #13
 800bc20:	e0eb      	b.n	800bdfa <find_volume+0x482>
 800bc22:	bf00      	nop
 800bc24:	20019d94 	.word	0x20019d94
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bc28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2c:	1ad3      	subs	r3, r2, r3
 800bc2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc30:	8952      	ldrh	r2, [r2, #10]
 800bc32:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc36:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <find_volume+0x2ca>
 800bc3e:	230d      	movs	r3, #13
 800bc40:	e0db      	b.n	800bdfa <find_volume+0x482>
		fmt = FS_FAT32;
 800bc42:	2303      	movs	r3, #3
 800bc44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d802      	bhi.n	800bc58 <find_volume+0x2e0>
 800bc52:	2302      	movs	r3, #2
 800bc54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d802      	bhi.n	800bc68 <find_volume+0x2f0>
 800bc62:	2301      	movs	r3, #1
 800bc64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6a:	1c9a      	adds	r2, r3, #2
 800bc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800bc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc74:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bc76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bc78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc7a:	441a      	add	r2, r3
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800bc80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc84:	441a      	add	r2, r3
 800bc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc88:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800bc8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc8e:	2b03      	cmp	r3, #3
 800bc90:	d11e      	bne.n	800bcd0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc94:	3330      	adds	r3, #48	; 0x30
 800bc96:	332a      	adds	r3, #42	; 0x2a
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7fe fc51 	bl	800a540 <ld_word>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <find_volume+0x330>
 800bca4:	230d      	movs	r3, #13
 800bca6:	e0a8      	b.n	800bdfa <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcaa:	891b      	ldrh	r3, [r3, #8]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <find_volume+0x33c>
 800bcb0:	230d      	movs	r3, #13
 800bcb2:	e0a2      	b.n	800bdfa <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb6:	3330      	adds	r3, #48	; 0x30
 800bcb8:	332c      	adds	r3, #44	; 0x2c
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7fe fc58 	bl	800a570 <ld_dword>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc8:	695b      	ldr	r3, [r3, #20]
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	647b      	str	r3, [r7, #68]	; 0x44
 800bcce:	e01f      	b.n	800bd10 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd2:	891b      	ldrh	r3, [r3, #8]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d101      	bne.n	800bcdc <find_volume+0x364>
 800bcd8:	230d      	movs	r3, #13
 800bcda:	e08e      	b.n	800bdfa <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcde:	6a1a      	ldr	r2, [r3, #32]
 800bce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce2:	441a      	add	r2, r3
 800bce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bcec:	2b02      	cmp	r3, #2
 800bcee:	d103      	bne.n	800bcf8 <find_volume+0x380>
 800bcf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf2:	695b      	ldr	r3, [r3, #20]
 800bcf4:	005b      	lsls	r3, r3, #1
 800bcf6:	e00a      	b.n	800bd0e <find_volume+0x396>
 800bcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfa:	695a      	ldr	r2, [r3, #20]
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	005b      	lsls	r3, r3, #1
 800bd00:	4413      	add	r3, r2
 800bd02:	085a      	lsrs	r2, r3, #1
 800bd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	f003 0301 	and.w	r3, r3, #1
 800bd0c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bd0e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd12:	699a      	ldr	r2, [r3, #24]
 800bd14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd16:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bd1a:	0a5b      	lsrs	r3, r3, #9
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d201      	bcs.n	800bd24 <find_volume+0x3ac>
 800bd20:	230d      	movs	r3, #13
 800bd22:	e06a      	b.n	800bdfa <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd26:	f04f 32ff 	mov.w	r2, #4294967295
 800bd2a:	611a      	str	r2, [r3, #16]
 800bd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2e:	691a      	ldr	r2, [r3, #16]
 800bd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd32:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800bd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd36:	2280      	movs	r2, #128	; 0x80
 800bd38:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bd3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd3e:	2b03      	cmp	r3, #3
 800bd40:	d149      	bne.n	800bdd6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd44:	3330      	adds	r3, #48	; 0x30
 800bd46:	3330      	adds	r3, #48	; 0x30
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7fe fbf9 	bl	800a540 <ld_word>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d140      	bne.n	800bdd6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bd54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd56:	3301      	adds	r3, #1
 800bd58:	4619      	mov	r1, r3
 800bd5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd5c:	f7fe fea0 	bl	800aaa0 <move_window>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d137      	bne.n	800bdd6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800bd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd68:	2200      	movs	r2, #0
 800bd6a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6e:	3330      	adds	r3, #48	; 0x30
 800bd70:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fe fbe3 	bl	800a540 <ld_word>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d127      	bne.n	800bdd6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd88:	3330      	adds	r3, #48	; 0x30
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fe fbf0 	bl	800a570 <ld_dword>
 800bd90:	4603      	mov	r3, r0
 800bd92:	4a1c      	ldr	r2, [pc, #112]	; (800be04 <find_volume+0x48c>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d11e      	bne.n	800bdd6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9a:	3330      	adds	r3, #48	; 0x30
 800bd9c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fe fbe5 	bl	800a570 <ld_dword>
 800bda6:	4603      	mov	r3, r0
 800bda8:	4a17      	ldr	r2, [pc, #92]	; (800be08 <find_volume+0x490>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d113      	bne.n	800bdd6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb0:	3330      	adds	r3, #48	; 0x30
 800bdb2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fe fbda 	bl	800a570 <ld_dword>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc4:	3330      	adds	r3, #48	; 0x30
 800bdc6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe fbd0 	bl	800a570 <ld_dword>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bddc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bdde:	4b0b      	ldr	r3, [pc, #44]	; (800be0c <find_volume+0x494>)
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	3301      	adds	r3, #1
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	4b09      	ldr	r3, [pc, #36]	; (800be0c <find_volume+0x494>)
 800bde8:	801a      	strh	r2, [r3, #0]
 800bdea:	4b08      	ldr	r3, [pc, #32]	; (800be0c <find_volume+0x494>)
 800bdec:	881a      	ldrh	r2, [r3, #0]
 800bdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bdf2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bdf4:	f7fe fdec 	bl	800a9d0 <clear_lock>
#endif
	return FR_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3758      	adds	r7, #88	; 0x58
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	41615252 	.word	0x41615252
 800be08:	61417272 	.word	0x61417272
 800be0c:	20019d98 	.word	0x20019d98

0800be10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800be1a:	2309      	movs	r3, #9
 800be1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d01c      	beq.n	800be5e <validate+0x4e>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d018      	beq.n	800be5e <validate+0x4e>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d013      	beq.n	800be5e <validate+0x4e>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	889a      	ldrh	r2, [r3, #4]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	88db      	ldrh	r3, [r3, #6]
 800be40:	429a      	cmp	r2, r3
 800be42:	d10c      	bne.n	800be5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	785b      	ldrb	r3, [r3, #1]
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7fe fada 	bl	800a404 <disk_status>
 800be50:	4603      	mov	r3, r0
 800be52:	f003 0301 	and.w	r3, r3, #1
 800be56:	2b00      	cmp	r3, #0
 800be58:	d101      	bne.n	800be5e <validate+0x4e>
			res = FR_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800be5e:	7bfb      	ldrb	r3, [r7, #15]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d102      	bne.n	800be6a <validate+0x5a>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	e000      	b.n	800be6c <validate+0x5c>
 800be6a:	2300      	movs	r3, #0
 800be6c:	683a      	ldr	r2, [r7, #0]
 800be6e:	6013      	str	r3, [r2, #0]
	return res;
 800be70:	7bfb      	ldrb	r3, [r7, #15]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
	...

0800be7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b088      	sub	sp, #32
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	4613      	mov	r3, r2
 800be88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800be8e:	f107 0310 	add.w	r3, r7, #16
 800be92:	4618      	mov	r0, r3
 800be94:	f7ff fcd5 	bl	800b842 <get_ldnumber>
 800be98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	da01      	bge.n	800bea4 <f_mount+0x28>
 800bea0:	230b      	movs	r3, #11
 800bea2:	e02b      	b.n	800befc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bea4:	4a17      	ldr	r2, [pc, #92]	; (800bf04 <f_mount+0x88>)
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d005      	beq.n	800bec0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800beb4:	69b8      	ldr	r0, [r7, #24]
 800beb6:	f7fe fd8b 	bl	800a9d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	2200      	movs	r2, #0
 800bebe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d002      	beq.n	800becc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	490d      	ldr	r1, [pc, #52]	; (800bf04 <f_mount+0x88>)
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d002      	beq.n	800bee2 <f_mount+0x66>
 800bedc:	79fb      	ldrb	r3, [r7, #7]
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d001      	beq.n	800bee6 <f_mount+0x6a>
 800bee2:	2300      	movs	r3, #0
 800bee4:	e00a      	b.n	800befc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bee6:	f107 010c 	add.w	r1, r7, #12
 800beea:	f107 0308 	add.w	r3, r7, #8
 800beee:	2200      	movs	r2, #0
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7ff fd41 	bl	800b978 <find_volume>
 800bef6:	4603      	mov	r3, r0
 800bef8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800befa:	7dfb      	ldrb	r3, [r7, #23]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3720      	adds	r7, #32
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	20019d94 	.word	0x20019d94

0800bf08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b098      	sub	sp, #96	; 0x60
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	4613      	mov	r3, r2
 800bf14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d101      	bne.n	800bf20 <f_open+0x18>
 800bf1c:	2309      	movs	r3, #9
 800bf1e:	e1ad      	b.n	800c27c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bf20:	79fb      	ldrb	r3, [r7, #7]
 800bf22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bf28:	79fa      	ldrb	r2, [r7, #7]
 800bf2a:	f107 0110 	add.w	r1, r7, #16
 800bf2e:	f107 0308 	add.w	r3, r7, #8
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7ff fd20 	bl	800b978 <find_volume>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800bf3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f040 8191 	bne.w	800c26a <f_open+0x362>
		dj.obj.fs = fs;
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	f107 0314 	add.w	r3, r7, #20
 800bf52:	4611      	mov	r1, r2
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7ff fc03 	bl	800b760 <follow_path>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bf60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d11a      	bne.n	800bf9e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bf68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bf6c:	b25b      	sxtb	r3, r3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	da03      	bge.n	800bf7a <f_open+0x72>
				res = FR_INVALID_NAME;
 800bf72:	2306      	movs	r3, #6
 800bf74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bf78:	e011      	b.n	800bf9e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bf7a:	79fb      	ldrb	r3, [r7, #7]
 800bf7c:	f023 0301 	bic.w	r3, r3, #1
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	bf14      	ite	ne
 800bf84:	2301      	movne	r3, #1
 800bf86:	2300      	moveq	r3, #0
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	f107 0314 	add.w	r3, r7, #20
 800bf90:	4611      	mov	r1, r2
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fe fbd4 	bl	800a740 <chk_lock>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bf9e:	79fb      	ldrb	r3, [r7, #7]
 800bfa0:	f003 031c 	and.w	r3, r3, #28
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d07f      	beq.n	800c0a8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bfa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d017      	beq.n	800bfe0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bfb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfb4:	2b04      	cmp	r3, #4
 800bfb6:	d10e      	bne.n	800bfd6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bfb8:	f7fe fc1e 	bl	800a7f8 <enq_lock>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d006      	beq.n	800bfd0 <f_open+0xc8>
 800bfc2:	f107 0314 	add.w	r3, r7, #20
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7ff fb03 	bl	800b5d2 <dir_register>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	e000      	b.n	800bfd2 <f_open+0xca>
 800bfd0:	2312      	movs	r3, #18
 800bfd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bfd6:	79fb      	ldrb	r3, [r7, #7]
 800bfd8:	f043 0308 	orr.w	r3, r3, #8
 800bfdc:	71fb      	strb	r3, [r7, #7]
 800bfde:	e010      	b.n	800c002 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bfe0:	7ebb      	ldrb	r3, [r7, #26]
 800bfe2:	f003 0311 	and.w	r3, r3, #17
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d003      	beq.n	800bff2 <f_open+0xea>
					res = FR_DENIED;
 800bfea:	2307      	movs	r3, #7
 800bfec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bff0:	e007      	b.n	800c002 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bff2:	79fb      	ldrb	r3, [r7, #7]
 800bff4:	f003 0304 	and.w	r3, r3, #4
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d002      	beq.n	800c002 <f_open+0xfa>
 800bffc:	2308      	movs	r3, #8
 800bffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c002:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c006:	2b00      	cmp	r3, #0
 800c008:	d168      	bne.n	800c0dc <f_open+0x1d4>
 800c00a:	79fb      	ldrb	r3, [r7, #7]
 800c00c:	f003 0308 	and.w	r3, r3, #8
 800c010:	2b00      	cmp	r3, #0
 800c012:	d063      	beq.n	800c0dc <f_open+0x1d4>
				dw = GET_FATTIME();
 800c014:	f7fe f998 	bl	800a348 <get_fattime>
 800c018:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c01c:	330e      	adds	r3, #14
 800c01e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c020:	4618      	mov	r0, r3
 800c022:	f7fe fae3 	bl	800a5ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c028:	3316      	adds	r3, #22
 800c02a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fe fadd 	bl	800a5ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c034:	330b      	adds	r3, #11
 800c036:	2220      	movs	r2, #32
 800c038:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c03e:	4611      	mov	r1, r2
 800c040:	4618      	mov	r0, r3
 800c042:	f7ff fa32 	bl	800b4aa <ld_clust>
 800c046:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c04c:	2200      	movs	r2, #0
 800c04e:	4618      	mov	r0, r3
 800c050:	f7ff fa4a 	bl	800b4e8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c056:	331c      	adds	r3, #28
 800c058:	2100      	movs	r1, #0
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fe fac6 	bl	800a5ec <st_dword>
					fs->wflag = 1;
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	2201      	movs	r2, #1
 800c064:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d037      	beq.n	800c0dc <f_open+0x1d4>
						dw = fs->winsect;
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c070:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c072:	f107 0314 	add.w	r3, r7, #20
 800c076:	2200      	movs	r2, #0
 800c078:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fe ff5d 	bl	800af3a <remove_chain>
 800c080:	4603      	mov	r3, r0
 800c082:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d126      	bne.n	800c0dc <f_open+0x1d4>
							res = move_window(fs, dw);
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe fd04 	bl	800aaa0 <move_window>
 800c098:	4603      	mov	r3, r0
 800c09a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0a2:	3a01      	subs	r2, #1
 800c0a4:	60da      	str	r2, [r3, #12]
 800c0a6:	e019      	b.n	800c0dc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c0a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d115      	bne.n	800c0dc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c0b0:	7ebb      	ldrb	r3, [r7, #26]
 800c0b2:	f003 0310 	and.w	r3, r3, #16
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d003      	beq.n	800c0c2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c0ba:	2304      	movs	r3, #4
 800c0bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c0c0:	e00c      	b.n	800c0dc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c0c2:	79fb      	ldrb	r3, [r7, #7]
 800c0c4:	f003 0302 	and.w	r3, r3, #2
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d007      	beq.n	800c0dc <f_open+0x1d4>
 800c0cc:	7ebb      	ldrb	r3, [r7, #26]
 800c0ce:	f003 0301 	and.w	r3, r3, #1
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d002      	beq.n	800c0dc <f_open+0x1d4>
						res = FR_DENIED;
 800c0d6:	2307      	movs	r3, #7
 800c0d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c0dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d128      	bne.n	800c136 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c0e4:	79fb      	ldrb	r3, [r7, #7]
 800c0e6:	f003 0308 	and.w	r3, r3, #8
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d003      	beq.n	800c0f6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c0ee:	79fb      	ldrb	r3, [r7, #7]
 800c0f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0f4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c0fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c104:	79fb      	ldrb	r3, [r7, #7]
 800c106:	f023 0301 	bic.w	r3, r3, #1
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	bf14      	ite	ne
 800c10e:	2301      	movne	r3, #1
 800c110:	2300      	moveq	r3, #0
 800c112:	b2db      	uxtb	r3, r3
 800c114:	461a      	mov	r2, r3
 800c116:	f107 0314 	add.w	r3, r7, #20
 800c11a:	4611      	mov	r1, r2
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fe fb8d 	bl	800a83c <inc_lock>
 800c122:	4602      	mov	r2, r0
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d102      	bne.n	800c136 <f_open+0x22e>
 800c130:	2302      	movs	r3, #2
 800c132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f040 8095 	bne.w	800c26a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c144:	4611      	mov	r1, r2
 800c146:	4618      	mov	r0, r3
 800c148:	f7ff f9af 	bl	800b4aa <ld_clust>
 800c14c:	4602      	mov	r2, r0
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c154:	331c      	adds	r3, #28
 800c156:	4618      	mov	r0, r3
 800c158:	f7fe fa0a 	bl	800a570 <ld_dword>
 800c15c:	4602      	mov	r2, r0
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2200      	movs	r2, #0
 800c166:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c168:	693a      	ldr	r2, [r7, #16]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	88da      	ldrh	r2, [r3, #6]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	79fa      	ldrb	r2, [r7, #7]
 800c17a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2200      	movs	r2, #0
 800c186:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2200      	movs	r2, #0
 800c18c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	3330      	adds	r3, #48	; 0x30
 800c192:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c196:	2100      	movs	r1, #0
 800c198:	4618      	mov	r0, r3
 800c19a:	f7fe fa74 	bl	800a686 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c19e:	79fb      	ldrb	r3, [r7, #7]
 800c1a0:	f003 0320 	and.w	r3, r3, #32
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d060      	beq.n	800c26a <f_open+0x362>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d05c      	beq.n	800c26a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	68da      	ldr	r2, [r3, #12]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	895b      	ldrh	r3, [r3, #10]
 800c1bc:	025b      	lsls	r3, r3, #9
 800c1be:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	657b      	str	r3, [r7, #84]	; 0x54
 800c1cc:	e016      	b.n	800c1fc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fe fd1f 	bl	800ac16 <get_fat>
 800c1d8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c1da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d802      	bhi.n	800c1e6 <f_open+0x2de>
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c1e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ec:	d102      	bne.n	800c1f4 <f_open+0x2ec>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c1f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c1f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	657b      	str	r3, [r7, #84]	; 0x54
 800c1fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c200:	2b00      	cmp	r3, #0
 800c202:	d103      	bne.n	800c20c <f_open+0x304>
 800c204:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c208:	429a      	cmp	r2, r3
 800c20a:	d8e0      	bhi.n	800c1ce <f_open+0x2c6>
				}
				fp->clust = clst;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c210:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c212:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c216:	2b00      	cmp	r3, #0
 800c218:	d127      	bne.n	800c26a <f_open+0x362>
 800c21a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c21c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c220:	2b00      	cmp	r3, #0
 800c222:	d022      	beq.n	800c26a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c228:	4618      	mov	r0, r3
 800c22a:	f7fe fcd5 	bl	800abd8 <clust2sect>
 800c22e:	6478      	str	r0, [r7, #68]	; 0x44
 800c230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c232:	2b00      	cmp	r3, #0
 800c234:	d103      	bne.n	800c23e <f_open+0x336>
						res = FR_INT_ERR;
 800c236:	2302      	movs	r3, #2
 800c238:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c23c:	e015      	b.n	800c26a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c23e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c240:	0a5a      	lsrs	r2, r3, #9
 800c242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c244:	441a      	add	r2, r3
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	7858      	ldrb	r0, [r3, #1]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6a1a      	ldr	r2, [r3, #32]
 800c258:	2301      	movs	r3, #1
 800c25a:	f7fe f913 	bl	800a484 <disk_read>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d002      	beq.n	800c26a <f_open+0x362>
 800c264:	2301      	movs	r3, #1
 800c266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c26a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d002      	beq.n	800c278 <f_open+0x370>
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2200      	movs	r2, #0
 800c276:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3760      	adds	r7, #96	; 0x60
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b08c      	sub	sp, #48	; 0x30
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	2200      	movs	r2, #0
 800c29a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f107 0210 	add.w	r2, r7, #16
 800c2a2:	4611      	mov	r1, r2
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7ff fdb3 	bl	800be10 <validate>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c2b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d107      	bne.n	800c2c8 <f_write+0x44>
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	7d5b      	ldrb	r3, [r3, #21]
 800c2bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c2c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d002      	beq.n	800c2ce <f_write+0x4a>
 800c2c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2cc:	e14b      	b.n	800c566 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	7d1b      	ldrb	r3, [r3, #20]
 800c2d2:	f003 0302 	and.w	r3, r3, #2
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <f_write+0x5a>
 800c2da:	2307      	movs	r3, #7
 800c2dc:	e143      	b.n	800c566 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	699a      	ldr	r2, [r3, #24]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	441a      	add	r2, r3
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	699b      	ldr	r3, [r3, #24]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	f080 812d 	bcs.w	800c54a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	699b      	ldr	r3, [r3, #24]
 800c2f4:	43db      	mvns	r3, r3
 800c2f6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c2f8:	e127      	b.n	800c54a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	699b      	ldr	r3, [r3, #24]
 800c2fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c302:	2b00      	cmp	r3, #0
 800c304:	f040 80e3 	bne.w	800c4ce <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	699b      	ldr	r3, [r3, #24]
 800c30c:	0a5b      	lsrs	r3, r3, #9
 800c30e:	693a      	ldr	r2, [r7, #16]
 800c310:	8952      	ldrh	r2, [r2, #10]
 800c312:	3a01      	subs	r2, #1
 800c314:	4013      	ands	r3, r2
 800c316:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d143      	bne.n	800c3a6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	699b      	ldr	r3, [r3, #24]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10c      	bne.n	800c340 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d11a      	bne.n	800c368 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2100      	movs	r1, #0
 800c336:	4618      	mov	r0, r3
 800c338:	f7fe fe64 	bl	800b004 <create_chain>
 800c33c:	62b8      	str	r0, [r7, #40]	; 0x28
 800c33e:	e013      	b.n	800c368 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c344:	2b00      	cmp	r3, #0
 800c346:	d007      	beq.n	800c358 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	699b      	ldr	r3, [r3, #24]
 800c34c:	4619      	mov	r1, r3
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f7fe fef0 	bl	800b134 <clmt_clust>
 800c354:	62b8      	str	r0, [r7, #40]	; 0x28
 800c356:	e007      	b.n	800c368 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	69db      	ldr	r3, [r3, #28]
 800c35e:	4619      	mov	r1, r3
 800c360:	4610      	mov	r0, r2
 800c362:	f7fe fe4f 	bl	800b004 <create_chain>
 800c366:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 80f2 	beq.w	800c554 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c372:	2b01      	cmp	r3, #1
 800c374:	d104      	bne.n	800c380 <f_write+0xfc>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2202      	movs	r2, #2
 800c37a:	755a      	strb	r2, [r3, #21]
 800c37c:	2302      	movs	r3, #2
 800c37e:	e0f2      	b.n	800c566 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c386:	d104      	bne.n	800c392 <f_write+0x10e>
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2201      	movs	r2, #1
 800c38c:	755a      	strb	r2, [r3, #21]
 800c38e:	2301      	movs	r3, #1
 800c390:	e0e9      	b.n	800c566 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c396:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d102      	bne.n	800c3a6 <f_write+0x122>
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3a4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	7d1b      	ldrb	r3, [r3, #20]
 800c3aa:	b25b      	sxtb	r3, r3
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	da18      	bge.n	800c3e2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	7858      	ldrb	r0, [r3, #1]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6a1a      	ldr	r2, [r3, #32]
 800c3be:	2301      	movs	r3, #1
 800c3c0:	f7fe f880 	bl	800a4c4 <disk_write>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d004      	beq.n	800c3d4 <f_write+0x150>
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	755a      	strb	r2, [r3, #21]
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e0c8      	b.n	800c566 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	7d1b      	ldrb	r3, [r3, #20]
 800c3d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3dc:	b2da      	uxtb	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c3e2:	693a      	ldr	r2, [r7, #16]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	69db      	ldr	r3, [r3, #28]
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	4610      	mov	r0, r2
 800c3ec:	f7fe fbf4 	bl	800abd8 <clust2sect>
 800c3f0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d104      	bne.n	800c402 <f_write+0x17e>
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2202      	movs	r2, #2
 800c3fc:	755a      	strb	r2, [r3, #21]
 800c3fe:	2302      	movs	r3, #2
 800c400:	e0b1      	b.n	800c566 <f_write+0x2e2>
			sect += csect;
 800c402:	697a      	ldr	r2, [r7, #20]
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	4413      	add	r3, r2
 800c408:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	0a5b      	lsrs	r3, r3, #9
 800c40e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c410:	6a3b      	ldr	r3, [r7, #32]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d03c      	beq.n	800c490 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c416:	69ba      	ldr	r2, [r7, #24]
 800c418:	6a3b      	ldr	r3, [r7, #32]
 800c41a:	4413      	add	r3, r2
 800c41c:	693a      	ldr	r2, [r7, #16]
 800c41e:	8952      	ldrh	r2, [r2, #10]
 800c420:	4293      	cmp	r3, r2
 800c422:	d905      	bls.n	800c430 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	895b      	ldrh	r3, [r3, #10]
 800c428:	461a      	mov	r2, r3
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	7858      	ldrb	r0, [r3, #1]
 800c434:	6a3b      	ldr	r3, [r7, #32]
 800c436:	697a      	ldr	r2, [r7, #20]
 800c438:	69f9      	ldr	r1, [r7, #28]
 800c43a:	f7fe f843 	bl	800a4c4 <disk_write>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d004      	beq.n	800c44e <f_write+0x1ca>
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2201      	movs	r2, #1
 800c448:	755a      	strb	r2, [r3, #21]
 800c44a:	2301      	movs	r3, #1
 800c44c:	e08b      	b.n	800c566 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6a1a      	ldr	r2, [r3, #32]
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	1ad3      	subs	r3, r2, r3
 800c456:	6a3a      	ldr	r2, [r7, #32]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d915      	bls.n	800c488 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6a1a      	ldr	r2, [r3, #32]
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	1ad3      	subs	r3, r2, r3
 800c46a:	025b      	lsls	r3, r3, #9
 800c46c:	69fa      	ldr	r2, [r7, #28]
 800c46e:	4413      	add	r3, r2
 800c470:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c474:	4619      	mov	r1, r3
 800c476:	f7fe f8e5 	bl	800a644 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	7d1b      	ldrb	r3, [r3, #20]
 800c47e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c482:	b2da      	uxtb	r2, r3
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c488:	6a3b      	ldr	r3, [r7, #32]
 800c48a:	025b      	lsls	r3, r3, #9
 800c48c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c48e:	e03f      	b.n	800c510 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	6a1b      	ldr	r3, [r3, #32]
 800c494:	697a      	ldr	r2, [r7, #20]
 800c496:	429a      	cmp	r2, r3
 800c498:	d016      	beq.n	800c4c8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	699a      	ldr	r2, [r3, #24]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d210      	bcs.n	800c4c8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	7858      	ldrb	r0, [r3, #1]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	697a      	ldr	r2, [r7, #20]
 800c4b4:	f7fd ffe6 	bl	800a484 <disk_read>
 800c4b8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d004      	beq.n	800c4c8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	755a      	strb	r2, [r3, #21]
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	e04e      	b.n	800c566 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	697a      	ldr	r2, [r7, #20]
 800c4cc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	699b      	ldr	r3, [r3, #24]
 800c4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4d6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c4da:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c4dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d901      	bls.n	800c4e8 <f_write+0x264>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	699b      	ldr	r3, [r3, #24]
 800c4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4f6:	4413      	add	r3, r2
 800c4f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4fa:	69f9      	ldr	r1, [r7, #28]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7fe f8a1 	bl	800a644 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	7d1b      	ldrb	r3, [r3, #20]
 800c506:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c50a:	b2da      	uxtb	r2, r3
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c510:	69fa      	ldr	r2, [r7, #28]
 800c512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c514:	4413      	add	r3, r2
 800c516:	61fb      	str	r3, [r7, #28]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	699a      	ldr	r2, [r3, #24]
 800c51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51e:	441a      	add	r2, r3
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	619a      	str	r2, [r3, #24]
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	68da      	ldr	r2, [r3, #12]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	699b      	ldr	r3, [r3, #24]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	bf38      	it	cc
 800c530:	461a      	movcc	r2, r3
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	60da      	str	r2, [r3, #12]
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53c:	441a      	add	r2, r3
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	601a      	str	r2, [r3, #0]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	f47f aed4 	bne.w	800c2fa <f_write+0x76>
 800c552:	e000      	b.n	800c556 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c554:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	7d1b      	ldrb	r3, [r3, #20]
 800c55a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c55e:	b2da      	uxtb	r2, r3
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3730      	adds	r7, #48	; 0x30
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b086      	sub	sp, #24
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f107 0208 	add.w	r2, r7, #8
 800c57c:	4611      	mov	r1, r2
 800c57e:	4618      	mov	r0, r3
 800c580:	f7ff fc46 	bl	800be10 <validate>
 800c584:	4603      	mov	r3, r0
 800c586:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c588:	7dfb      	ldrb	r3, [r7, #23]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d168      	bne.n	800c660 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	7d1b      	ldrb	r3, [r3, #20]
 800c592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c596:	2b00      	cmp	r3, #0
 800c598:	d062      	beq.n	800c660 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	7d1b      	ldrb	r3, [r3, #20]
 800c59e:	b25b      	sxtb	r3, r3
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	da15      	bge.n	800c5d0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	7858      	ldrb	r0, [r3, #1]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a1a      	ldr	r2, [r3, #32]
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	f7fd ff86 	bl	800a4c4 <disk_write>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d001      	beq.n	800c5c2 <f_sync+0x54>
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e04f      	b.n	800c662 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	7d1b      	ldrb	r3, [r3, #20]
 800c5c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5ca:	b2da      	uxtb	r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c5d0:	f7fd feba 	bl	800a348 <get_fattime>
 800c5d4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c5d6:	68ba      	ldr	r2, [r7, #8]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5dc:	4619      	mov	r1, r3
 800c5de:	4610      	mov	r0, r2
 800c5e0:	f7fe fa5e 	bl	800aaa0 <move_window>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c5e8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d138      	bne.n	800c660 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	330b      	adds	r3, #11
 800c5f8:	781a      	ldrb	r2, [r3, #0]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	330b      	adds	r3, #11
 800c5fe:	f042 0220 	orr.w	r2, r2, #32
 800c602:	b2d2      	uxtb	r2, r2
 800c604:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6818      	ldr	r0, [r3, #0]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	461a      	mov	r2, r3
 800c610:	68f9      	ldr	r1, [r7, #12]
 800c612:	f7fe ff69 	bl	800b4e8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f103 021c 	add.w	r2, r3, #28
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	4619      	mov	r1, r3
 800c622:	4610      	mov	r0, r2
 800c624:	f7fd ffe2 	bl	800a5ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	3316      	adds	r3, #22
 800c62c:	6939      	ldr	r1, [r7, #16]
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fd ffdc 	bl	800a5ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	3312      	adds	r3, #18
 800c638:	2100      	movs	r1, #0
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7fd ffbb 	bl	800a5b6 <st_word>
					fs->wflag = 1;
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	2201      	movs	r2, #1
 800c644:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	4618      	mov	r0, r3
 800c64a:	f7fe fa57 	bl	800aafc <sync_fs>
 800c64e:	4603      	mov	r3, r0
 800c650:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	7d1b      	ldrb	r3, [r3, #20]
 800c656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c65a:	b2da      	uxtb	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c660:	7dfb      	ldrb	r3, [r7, #23]
}
 800c662:	4618      	mov	r0, r3
 800c664:	3718      	adds	r7, #24
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b084      	sub	sp, #16
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7ff ff7b 	bl	800c56e <f_sync>
 800c678:	4603      	mov	r3, r0
 800c67a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c67c:	7bfb      	ldrb	r3, [r7, #15]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d118      	bne.n	800c6b4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f107 0208 	add.w	r2, r7, #8
 800c688:	4611      	mov	r1, r2
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7ff fbc0 	bl	800be10 <validate>
 800c690:	4603      	mov	r3, r0
 800c692:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c694:	7bfb      	ldrb	r3, [r7, #15]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d10c      	bne.n	800c6b4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	691b      	ldr	r3, [r3, #16]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7fe f95a 	bl	800a958 <dec_lock>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c6a8:	7bfb      	ldrb	r3, [r7, #15]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d102      	bne.n	800c6b4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}

0800c6be <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b092      	sub	sp, #72	; 0x48
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	60f8      	str	r0, [r7, #12]
 800c6c6:	60b9      	str	r1, [r7, #8]
 800c6c8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c6ca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c6ce:	f107 030c 	add.w	r3, r7, #12
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7ff f94f 	bl	800b978 <find_volume>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800c6e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f040 8099 	bne.w	800c81c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c6ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f2:	691a      	ldr	r2, [r3, #16]
 800c6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f6:	695b      	ldr	r3, [r3, #20]
 800c6f8:	3b02      	subs	r3, #2
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d804      	bhi.n	800c708 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c700:	691a      	ldr	r2, [r3, #16]
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	601a      	str	r2, [r3, #0]
 800c706:	e089      	b.n	800c81c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c708:	2300      	movs	r3, #0
 800c70a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d128      	bne.n	800c766 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c714:	2302      	movs	r3, #2
 800c716:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800c71c:	f107 0314 	add.w	r3, r7, #20
 800c720:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c722:	4618      	mov	r0, r3
 800c724:	f7fe fa77 	bl	800ac16 <get_fat>
 800c728:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c730:	d103      	bne.n	800c73a <f_getfree+0x7c>
 800c732:	2301      	movs	r3, #1
 800c734:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c738:	e063      	b.n	800c802 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d103      	bne.n	800c748 <f_getfree+0x8a>
 800c740:	2302      	movs	r3, #2
 800c742:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c746:	e05c      	b.n	800c802 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800c748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d102      	bne.n	800c754 <f_getfree+0x96>
 800c74e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c750:	3301      	adds	r3, #1
 800c752:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800c754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c756:	3301      	adds	r3, #1
 800c758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75c:	695b      	ldr	r3, [r3, #20]
 800c75e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c760:	429a      	cmp	r2, r3
 800c762:	d3db      	bcc.n	800c71c <f_getfree+0x5e>
 800c764:	e04d      	b.n	800c802 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c768:	695b      	ldr	r3, [r3, #20]
 800c76a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76e:	6a1b      	ldr	r3, [r3, #32]
 800c770:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800c772:	2300      	movs	r3, #0
 800c774:	637b      	str	r3, [r7, #52]	; 0x34
 800c776:	2300      	movs	r3, #0
 800c778:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800c77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d113      	bne.n	800c7a8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800c780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c784:	1c5a      	adds	r2, r3, #1
 800c786:	63ba      	str	r2, [r7, #56]	; 0x38
 800c788:	4619      	mov	r1, r3
 800c78a:	f7fe f989 	bl	800aaa0 <move_window>
 800c78e:	4603      	mov	r3, r0
 800c790:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800c794:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d131      	bne.n	800c800 <f_getfree+0x142>
							p = fs->win;
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	3330      	adds	r3, #48	; 0x30
 800c7a0:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800c7a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7a6:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	2b02      	cmp	r3, #2
 800c7ae:	d10f      	bne.n	800c7d0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800c7b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7b2:	f7fd fec5 	bl	800a540 <ld_word>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d102      	bne.n	800c7c2 <f_getfree+0x104>
 800c7bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7be:	3301      	adds	r3, #1
 800c7c0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	3302      	adds	r3, #2
 800c7c6:	633b      	str	r3, [r7, #48]	; 0x30
 800c7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ca:	3b02      	subs	r3, #2
 800c7cc:	637b      	str	r3, [r7, #52]	; 0x34
 800c7ce:	e010      	b.n	800c7f2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c7d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7d2:	f7fd fecd 	bl	800a570 <ld_dword>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d102      	bne.n	800c7e6 <f_getfree+0x128>
 800c7e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	633b      	str	r3, [r7, #48]	; 0x30
 800c7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ee:	3b04      	subs	r3, #4
 800c7f0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800c7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d1bd      	bne.n	800c77a <f_getfree+0xbc>
 800c7fe:	e000      	b.n	800c802 <f_getfree+0x144>
							if (res != FR_OK) break;
 800c800:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c806:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c80c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c810:	791a      	ldrb	r2, [r3, #4]
 800c812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c814:	f042 0201 	orr.w	r2, r2, #1
 800c818:	b2d2      	uxtb	r2, r2
 800c81a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c81c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c820:	4618      	mov	r0, r3
 800c822:	3748      	adds	r7, #72	; 0x48
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	460b      	mov	r3, r1
 800c832:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c834:	78fb      	ldrb	r3, [r7, #3]
 800c836:	2b0a      	cmp	r3, #10
 800c838:	d103      	bne.n	800c842 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c83a:	210d      	movs	r1, #13
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7ff fff3 	bl	800c828 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	db25      	blt.n	800c89a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	1c5a      	adds	r2, r3, #1
 800c852:	60fa      	str	r2, [r7, #12]
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	4413      	add	r3, r2
 800c858:	78fa      	ldrb	r2, [r7, #3]
 800c85a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2b3c      	cmp	r3, #60	; 0x3c
 800c860:	dd12      	ble.n	800c888 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6818      	ldr	r0, [r3, #0]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f103 010c 	add.w	r1, r3, #12
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	f107 0308 	add.w	r3, r7, #8
 800c872:	f7ff fd07 	bl	800c284 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d101      	bne.n	800c882 <putc_bfd+0x5a>
 800c87e:	2300      	movs	r3, #0
 800c880:	e001      	b.n	800c886 <putc_bfd+0x5e>
 800c882:	f04f 33ff 	mov.w	r3, #4294967295
 800c886:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	1c5a      	adds	r2, r3, #1
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	609a      	str	r2, [r3, #8]
 800c898:	e000      	b.n	800c89c <putc_bfd+0x74>
	if (i < 0) return;
 800c89a:	bf00      	nop
}
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b084      	sub	sp, #16
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	db16      	blt.n	800c8e0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6818      	ldr	r0, [r3, #0]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f103 010c 	add.w	r1, r3, #12
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	f107 030c 	add.w	r3, r7, #12
 800c8c6:	f7ff fcdd 	bl	800c284 <f_write>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d107      	bne.n	800c8e0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d102      	bne.n	800c8e0 <putc_flush+0x3e>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	e001      	b.n	800c8e4 <putc_flush+0x42>
	return EOF;
 800c8e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	683a      	ldr	r2, [r7, #0]
 800c8fa:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	605a      	str	r2, [r3, #4]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	685a      	ldr	r2, [r3, #4]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	609a      	str	r2, [r3, #8]
}
 800c90a:	bf00      	nop
 800c90c:	370c      	adds	r7, #12
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr

0800c916 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b096      	sub	sp, #88	; 0x58
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c920:	f107 030c 	add.w	r3, r7, #12
 800c924:	6839      	ldr	r1, [r7, #0]
 800c926:	4618      	mov	r0, r3
 800c928:	f7ff ffe0 	bl	800c8ec <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c92c:	e009      	b.n	800c942 <f_puts+0x2c>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	1c5a      	adds	r2, r3, #1
 800c932:	607a      	str	r2, [r7, #4]
 800c934:	781a      	ldrb	r2, [r3, #0]
 800c936:	f107 030c 	add.w	r3, r7, #12
 800c93a:	4611      	mov	r1, r2
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7ff ff73 	bl	800c828 <putc_bfd>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1f1      	bne.n	800c92e <f_puts+0x18>
	return putc_flush(&pb);
 800c94a:	f107 030c 	add.w	r3, r7, #12
 800c94e:	4618      	mov	r0, r3
 800c950:	f7ff ffa7 	bl	800c8a2 <putc_flush>
 800c954:	4603      	mov	r3, r0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3758      	adds	r7, #88	; 0x58
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
	...

0800c960 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c960:	b480      	push	{r7}
 800c962:	b087      	sub	sp, #28
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	4613      	mov	r3, r2
 800c96c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c96e:	2301      	movs	r3, #1
 800c970:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c972:	2300      	movs	r3, #0
 800c974:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c976:	4b1f      	ldr	r3, [pc, #124]	; (800c9f4 <FATFS_LinkDriverEx+0x94>)
 800c978:	7a5b      	ldrb	r3, [r3, #9]
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d131      	bne.n	800c9e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c980:	4b1c      	ldr	r3, [pc, #112]	; (800c9f4 <FATFS_LinkDriverEx+0x94>)
 800c982:	7a5b      	ldrb	r3, [r3, #9]
 800c984:	b2db      	uxtb	r3, r3
 800c986:	461a      	mov	r2, r3
 800c988:	4b1a      	ldr	r3, [pc, #104]	; (800c9f4 <FATFS_LinkDriverEx+0x94>)
 800c98a:	2100      	movs	r1, #0
 800c98c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c98e:	4b19      	ldr	r3, [pc, #100]	; (800c9f4 <FATFS_LinkDriverEx+0x94>)
 800c990:	7a5b      	ldrb	r3, [r3, #9]
 800c992:	b2db      	uxtb	r3, r3
 800c994:	4a17      	ldr	r2, [pc, #92]	; (800c9f4 <FATFS_LinkDriverEx+0x94>)
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	4413      	add	r3, r2
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c99e:	4b15      	ldr	r3, [pc, #84]	; (800c9f4 <FATFS_LinkDriverEx+0x94>)
 800c9a0:	7a5b      	ldrb	r3, [r3, #9]
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	4b13      	ldr	r3, [pc, #76]	; (800c9f4 <FATFS_LinkDriverEx+0x94>)
 800c9a8:	4413      	add	r3, r2
 800c9aa:	79fa      	ldrb	r2, [r7, #7]
 800c9ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c9ae:	4b11      	ldr	r3, [pc, #68]	; (800c9f4 <FATFS_LinkDriverEx+0x94>)
 800c9b0:	7a5b      	ldrb	r3, [r3, #9]
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	1c5a      	adds	r2, r3, #1
 800c9b6:	b2d1      	uxtb	r1, r2
 800c9b8:	4a0e      	ldr	r2, [pc, #56]	; (800c9f4 <FATFS_LinkDriverEx+0x94>)
 800c9ba:	7251      	strb	r1, [r2, #9]
 800c9bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c9be:	7dbb      	ldrb	r3, [r7, #22]
 800c9c0:	3330      	adds	r3, #48	; 0x30
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	223a      	movs	r2, #58	; 0x3a
 800c9ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	3302      	adds	r3, #2
 800c9d4:	222f      	movs	r2, #47	; 0x2f
 800c9d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	3303      	adds	r3, #3
 800c9dc:	2200      	movs	r2, #0
 800c9de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c9e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	371c      	adds	r7, #28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	20019dbc 	.word	0x20019dbc

0800c9f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ca02:	2200      	movs	r2, #0
 800ca04:	6839      	ldr	r1, [r7, #0]
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f7ff ffaa 	bl	800c960 <FATFS_LinkDriverEx>
 800ca0c:	4603      	mov	r3, r0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <__cvt>:
 800ca16:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca1a:	ec55 4b10 	vmov	r4, r5, d0
 800ca1e:	2d00      	cmp	r5, #0
 800ca20:	460e      	mov	r6, r1
 800ca22:	4619      	mov	r1, r3
 800ca24:	462b      	mov	r3, r5
 800ca26:	bfbb      	ittet	lt
 800ca28:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ca2c:	461d      	movlt	r5, r3
 800ca2e:	2300      	movge	r3, #0
 800ca30:	232d      	movlt	r3, #45	; 0x2d
 800ca32:	700b      	strb	r3, [r1, #0]
 800ca34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca36:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ca3a:	4691      	mov	r9, r2
 800ca3c:	f023 0820 	bic.w	r8, r3, #32
 800ca40:	bfbc      	itt	lt
 800ca42:	4622      	movlt	r2, r4
 800ca44:	4614      	movlt	r4, r2
 800ca46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca4a:	d005      	beq.n	800ca58 <__cvt+0x42>
 800ca4c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ca50:	d100      	bne.n	800ca54 <__cvt+0x3e>
 800ca52:	3601      	adds	r6, #1
 800ca54:	2102      	movs	r1, #2
 800ca56:	e000      	b.n	800ca5a <__cvt+0x44>
 800ca58:	2103      	movs	r1, #3
 800ca5a:	ab03      	add	r3, sp, #12
 800ca5c:	9301      	str	r3, [sp, #4]
 800ca5e:	ab02      	add	r3, sp, #8
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	ec45 4b10 	vmov	d0, r4, r5
 800ca66:	4653      	mov	r3, sl
 800ca68:	4632      	mov	r2, r6
 800ca6a:	f000 ffdd 	bl	800da28 <_dtoa_r>
 800ca6e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ca72:	4607      	mov	r7, r0
 800ca74:	d102      	bne.n	800ca7c <__cvt+0x66>
 800ca76:	f019 0f01 	tst.w	r9, #1
 800ca7a:	d022      	beq.n	800cac2 <__cvt+0xac>
 800ca7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca80:	eb07 0906 	add.w	r9, r7, r6
 800ca84:	d110      	bne.n	800caa8 <__cvt+0x92>
 800ca86:	783b      	ldrb	r3, [r7, #0]
 800ca88:	2b30      	cmp	r3, #48	; 0x30
 800ca8a:	d10a      	bne.n	800caa2 <__cvt+0x8c>
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	2300      	movs	r3, #0
 800ca90:	4620      	mov	r0, r4
 800ca92:	4629      	mov	r1, r5
 800ca94:	f7f4 f830 	bl	8000af8 <__aeabi_dcmpeq>
 800ca98:	b918      	cbnz	r0, 800caa2 <__cvt+0x8c>
 800ca9a:	f1c6 0601 	rsb	r6, r6, #1
 800ca9e:	f8ca 6000 	str.w	r6, [sl]
 800caa2:	f8da 3000 	ldr.w	r3, [sl]
 800caa6:	4499      	add	r9, r3
 800caa8:	2200      	movs	r2, #0
 800caaa:	2300      	movs	r3, #0
 800caac:	4620      	mov	r0, r4
 800caae:	4629      	mov	r1, r5
 800cab0:	f7f4 f822 	bl	8000af8 <__aeabi_dcmpeq>
 800cab4:	b108      	cbz	r0, 800caba <__cvt+0xa4>
 800cab6:	f8cd 900c 	str.w	r9, [sp, #12]
 800caba:	2230      	movs	r2, #48	; 0x30
 800cabc:	9b03      	ldr	r3, [sp, #12]
 800cabe:	454b      	cmp	r3, r9
 800cac0:	d307      	bcc.n	800cad2 <__cvt+0xbc>
 800cac2:	9b03      	ldr	r3, [sp, #12]
 800cac4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cac6:	1bdb      	subs	r3, r3, r7
 800cac8:	4638      	mov	r0, r7
 800caca:	6013      	str	r3, [r2, #0]
 800cacc:	b004      	add	sp, #16
 800cace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad2:	1c59      	adds	r1, r3, #1
 800cad4:	9103      	str	r1, [sp, #12]
 800cad6:	701a      	strb	r2, [r3, #0]
 800cad8:	e7f0      	b.n	800cabc <__cvt+0xa6>

0800cada <__exponent>:
 800cada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cadc:	4603      	mov	r3, r0
 800cade:	2900      	cmp	r1, #0
 800cae0:	bfb8      	it	lt
 800cae2:	4249      	neglt	r1, r1
 800cae4:	f803 2b02 	strb.w	r2, [r3], #2
 800cae8:	bfb4      	ite	lt
 800caea:	222d      	movlt	r2, #45	; 0x2d
 800caec:	222b      	movge	r2, #43	; 0x2b
 800caee:	2909      	cmp	r1, #9
 800caf0:	7042      	strb	r2, [r0, #1]
 800caf2:	dd2a      	ble.n	800cb4a <__exponent+0x70>
 800caf4:	f10d 0207 	add.w	r2, sp, #7
 800caf8:	4617      	mov	r7, r2
 800cafa:	260a      	movs	r6, #10
 800cafc:	4694      	mov	ip, r2
 800cafe:	fb91 f5f6 	sdiv	r5, r1, r6
 800cb02:	fb06 1415 	mls	r4, r6, r5, r1
 800cb06:	3430      	adds	r4, #48	; 0x30
 800cb08:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cb0c:	460c      	mov	r4, r1
 800cb0e:	2c63      	cmp	r4, #99	; 0x63
 800cb10:	f102 32ff 	add.w	r2, r2, #4294967295
 800cb14:	4629      	mov	r1, r5
 800cb16:	dcf1      	bgt.n	800cafc <__exponent+0x22>
 800cb18:	3130      	adds	r1, #48	; 0x30
 800cb1a:	f1ac 0402 	sub.w	r4, ip, #2
 800cb1e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cb22:	1c41      	adds	r1, r0, #1
 800cb24:	4622      	mov	r2, r4
 800cb26:	42ba      	cmp	r2, r7
 800cb28:	d30a      	bcc.n	800cb40 <__exponent+0x66>
 800cb2a:	f10d 0209 	add.w	r2, sp, #9
 800cb2e:	eba2 020c 	sub.w	r2, r2, ip
 800cb32:	42bc      	cmp	r4, r7
 800cb34:	bf88      	it	hi
 800cb36:	2200      	movhi	r2, #0
 800cb38:	4413      	add	r3, r2
 800cb3a:	1a18      	subs	r0, r3, r0
 800cb3c:	b003      	add	sp, #12
 800cb3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb40:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cb44:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cb48:	e7ed      	b.n	800cb26 <__exponent+0x4c>
 800cb4a:	2330      	movs	r3, #48	; 0x30
 800cb4c:	3130      	adds	r1, #48	; 0x30
 800cb4e:	7083      	strb	r3, [r0, #2]
 800cb50:	70c1      	strb	r1, [r0, #3]
 800cb52:	1d03      	adds	r3, r0, #4
 800cb54:	e7f1      	b.n	800cb3a <__exponent+0x60>
	...

0800cb58 <_printf_float>:
 800cb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5c:	ed2d 8b02 	vpush	{d8}
 800cb60:	b08d      	sub	sp, #52	; 0x34
 800cb62:	460c      	mov	r4, r1
 800cb64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cb68:	4616      	mov	r6, r2
 800cb6a:	461f      	mov	r7, r3
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	f000 fe4b 	bl	800d808 <_localeconv_r>
 800cb72:	f8d0 a000 	ldr.w	sl, [r0]
 800cb76:	4650      	mov	r0, sl
 800cb78:	f7f3 fb92 	bl	80002a0 <strlen>
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	930a      	str	r3, [sp, #40]	; 0x28
 800cb80:	6823      	ldr	r3, [r4, #0]
 800cb82:	9305      	str	r3, [sp, #20]
 800cb84:	f8d8 3000 	ldr.w	r3, [r8]
 800cb88:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cb8c:	3307      	adds	r3, #7
 800cb8e:	f023 0307 	bic.w	r3, r3, #7
 800cb92:	f103 0208 	add.w	r2, r3, #8
 800cb96:	f8c8 2000 	str.w	r2, [r8]
 800cb9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cba2:	9307      	str	r3, [sp, #28]
 800cba4:	f8cd 8018 	str.w	r8, [sp, #24]
 800cba8:	ee08 0a10 	vmov	s16, r0
 800cbac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cbb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbb4:	4b9e      	ldr	r3, [pc, #632]	; (800ce30 <_printf_float+0x2d8>)
 800cbb6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbba:	f7f3 ffcf 	bl	8000b5c <__aeabi_dcmpun>
 800cbbe:	bb88      	cbnz	r0, 800cc24 <_printf_float+0xcc>
 800cbc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbc4:	4b9a      	ldr	r3, [pc, #616]	; (800ce30 <_printf_float+0x2d8>)
 800cbc6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbca:	f7f3 ffa9 	bl	8000b20 <__aeabi_dcmple>
 800cbce:	bb48      	cbnz	r0, 800cc24 <_printf_float+0xcc>
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	4640      	mov	r0, r8
 800cbd6:	4649      	mov	r1, r9
 800cbd8:	f7f3 ff98 	bl	8000b0c <__aeabi_dcmplt>
 800cbdc:	b110      	cbz	r0, 800cbe4 <_printf_float+0x8c>
 800cbde:	232d      	movs	r3, #45	; 0x2d
 800cbe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbe4:	4a93      	ldr	r2, [pc, #588]	; (800ce34 <_printf_float+0x2dc>)
 800cbe6:	4b94      	ldr	r3, [pc, #592]	; (800ce38 <_printf_float+0x2e0>)
 800cbe8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cbec:	bf94      	ite	ls
 800cbee:	4690      	movls	r8, r2
 800cbf0:	4698      	movhi	r8, r3
 800cbf2:	2303      	movs	r3, #3
 800cbf4:	6123      	str	r3, [r4, #16]
 800cbf6:	9b05      	ldr	r3, [sp, #20]
 800cbf8:	f023 0304 	bic.w	r3, r3, #4
 800cbfc:	6023      	str	r3, [r4, #0]
 800cbfe:	f04f 0900 	mov.w	r9, #0
 800cc02:	9700      	str	r7, [sp, #0]
 800cc04:	4633      	mov	r3, r6
 800cc06:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc08:	4621      	mov	r1, r4
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	f000 f9da 	bl	800cfc4 <_printf_common>
 800cc10:	3001      	adds	r0, #1
 800cc12:	f040 8090 	bne.w	800cd36 <_printf_float+0x1de>
 800cc16:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1a:	b00d      	add	sp, #52	; 0x34
 800cc1c:	ecbd 8b02 	vpop	{d8}
 800cc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc24:	4642      	mov	r2, r8
 800cc26:	464b      	mov	r3, r9
 800cc28:	4640      	mov	r0, r8
 800cc2a:	4649      	mov	r1, r9
 800cc2c:	f7f3 ff96 	bl	8000b5c <__aeabi_dcmpun>
 800cc30:	b140      	cbz	r0, 800cc44 <_printf_float+0xec>
 800cc32:	464b      	mov	r3, r9
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	bfbc      	itt	lt
 800cc38:	232d      	movlt	r3, #45	; 0x2d
 800cc3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cc3e:	4a7f      	ldr	r2, [pc, #508]	; (800ce3c <_printf_float+0x2e4>)
 800cc40:	4b7f      	ldr	r3, [pc, #508]	; (800ce40 <_printf_float+0x2e8>)
 800cc42:	e7d1      	b.n	800cbe8 <_printf_float+0x90>
 800cc44:	6863      	ldr	r3, [r4, #4]
 800cc46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cc4a:	9206      	str	r2, [sp, #24]
 800cc4c:	1c5a      	adds	r2, r3, #1
 800cc4e:	d13f      	bne.n	800ccd0 <_printf_float+0x178>
 800cc50:	2306      	movs	r3, #6
 800cc52:	6063      	str	r3, [r4, #4]
 800cc54:	9b05      	ldr	r3, [sp, #20]
 800cc56:	6861      	ldr	r1, [r4, #4]
 800cc58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	9303      	str	r3, [sp, #12]
 800cc60:	ab0a      	add	r3, sp, #40	; 0x28
 800cc62:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cc66:	ab09      	add	r3, sp, #36	; 0x24
 800cc68:	ec49 8b10 	vmov	d0, r8, r9
 800cc6c:	9300      	str	r3, [sp, #0]
 800cc6e:	6022      	str	r2, [r4, #0]
 800cc70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cc74:	4628      	mov	r0, r5
 800cc76:	f7ff fece 	bl	800ca16 <__cvt>
 800cc7a:	9b06      	ldr	r3, [sp, #24]
 800cc7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc7e:	2b47      	cmp	r3, #71	; 0x47
 800cc80:	4680      	mov	r8, r0
 800cc82:	d108      	bne.n	800cc96 <_printf_float+0x13e>
 800cc84:	1cc8      	adds	r0, r1, #3
 800cc86:	db02      	blt.n	800cc8e <_printf_float+0x136>
 800cc88:	6863      	ldr	r3, [r4, #4]
 800cc8a:	4299      	cmp	r1, r3
 800cc8c:	dd41      	ble.n	800cd12 <_printf_float+0x1ba>
 800cc8e:	f1ab 0302 	sub.w	r3, fp, #2
 800cc92:	fa5f fb83 	uxtb.w	fp, r3
 800cc96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc9a:	d820      	bhi.n	800ccde <_printf_float+0x186>
 800cc9c:	3901      	subs	r1, #1
 800cc9e:	465a      	mov	r2, fp
 800cca0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cca4:	9109      	str	r1, [sp, #36]	; 0x24
 800cca6:	f7ff ff18 	bl	800cada <__exponent>
 800ccaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccac:	1813      	adds	r3, r2, r0
 800ccae:	2a01      	cmp	r2, #1
 800ccb0:	4681      	mov	r9, r0
 800ccb2:	6123      	str	r3, [r4, #16]
 800ccb4:	dc02      	bgt.n	800ccbc <_printf_float+0x164>
 800ccb6:	6822      	ldr	r2, [r4, #0]
 800ccb8:	07d2      	lsls	r2, r2, #31
 800ccba:	d501      	bpl.n	800ccc0 <_printf_float+0x168>
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	6123      	str	r3, [r4, #16]
 800ccc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d09c      	beq.n	800cc02 <_printf_float+0xaa>
 800ccc8:	232d      	movs	r3, #45	; 0x2d
 800ccca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccce:	e798      	b.n	800cc02 <_printf_float+0xaa>
 800ccd0:	9a06      	ldr	r2, [sp, #24]
 800ccd2:	2a47      	cmp	r2, #71	; 0x47
 800ccd4:	d1be      	bne.n	800cc54 <_printf_float+0xfc>
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d1bc      	bne.n	800cc54 <_printf_float+0xfc>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e7b9      	b.n	800cc52 <_printf_float+0xfa>
 800ccde:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cce2:	d118      	bne.n	800cd16 <_printf_float+0x1be>
 800cce4:	2900      	cmp	r1, #0
 800cce6:	6863      	ldr	r3, [r4, #4]
 800cce8:	dd0b      	ble.n	800cd02 <_printf_float+0x1aa>
 800ccea:	6121      	str	r1, [r4, #16]
 800ccec:	b913      	cbnz	r3, 800ccf4 <_printf_float+0x19c>
 800ccee:	6822      	ldr	r2, [r4, #0]
 800ccf0:	07d0      	lsls	r0, r2, #31
 800ccf2:	d502      	bpl.n	800ccfa <_printf_float+0x1a2>
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	440b      	add	r3, r1
 800ccf8:	6123      	str	r3, [r4, #16]
 800ccfa:	65a1      	str	r1, [r4, #88]	; 0x58
 800ccfc:	f04f 0900 	mov.w	r9, #0
 800cd00:	e7de      	b.n	800ccc0 <_printf_float+0x168>
 800cd02:	b913      	cbnz	r3, 800cd0a <_printf_float+0x1b2>
 800cd04:	6822      	ldr	r2, [r4, #0]
 800cd06:	07d2      	lsls	r2, r2, #31
 800cd08:	d501      	bpl.n	800cd0e <_printf_float+0x1b6>
 800cd0a:	3302      	adds	r3, #2
 800cd0c:	e7f4      	b.n	800ccf8 <_printf_float+0x1a0>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e7f2      	b.n	800ccf8 <_printf_float+0x1a0>
 800cd12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cd16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd18:	4299      	cmp	r1, r3
 800cd1a:	db05      	blt.n	800cd28 <_printf_float+0x1d0>
 800cd1c:	6823      	ldr	r3, [r4, #0]
 800cd1e:	6121      	str	r1, [r4, #16]
 800cd20:	07d8      	lsls	r0, r3, #31
 800cd22:	d5ea      	bpl.n	800ccfa <_printf_float+0x1a2>
 800cd24:	1c4b      	adds	r3, r1, #1
 800cd26:	e7e7      	b.n	800ccf8 <_printf_float+0x1a0>
 800cd28:	2900      	cmp	r1, #0
 800cd2a:	bfd4      	ite	le
 800cd2c:	f1c1 0202 	rsble	r2, r1, #2
 800cd30:	2201      	movgt	r2, #1
 800cd32:	4413      	add	r3, r2
 800cd34:	e7e0      	b.n	800ccf8 <_printf_float+0x1a0>
 800cd36:	6823      	ldr	r3, [r4, #0]
 800cd38:	055a      	lsls	r2, r3, #21
 800cd3a:	d407      	bmi.n	800cd4c <_printf_float+0x1f4>
 800cd3c:	6923      	ldr	r3, [r4, #16]
 800cd3e:	4642      	mov	r2, r8
 800cd40:	4631      	mov	r1, r6
 800cd42:	4628      	mov	r0, r5
 800cd44:	47b8      	blx	r7
 800cd46:	3001      	adds	r0, #1
 800cd48:	d12c      	bne.n	800cda4 <_printf_float+0x24c>
 800cd4a:	e764      	b.n	800cc16 <_printf_float+0xbe>
 800cd4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd50:	f240 80e0 	bls.w	800cf14 <_printf_float+0x3bc>
 800cd54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd58:	2200      	movs	r2, #0
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	f7f3 fecc 	bl	8000af8 <__aeabi_dcmpeq>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	d034      	beq.n	800cdce <_printf_float+0x276>
 800cd64:	4a37      	ldr	r2, [pc, #220]	; (800ce44 <_printf_float+0x2ec>)
 800cd66:	2301      	movs	r3, #1
 800cd68:	4631      	mov	r1, r6
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	47b8      	blx	r7
 800cd6e:	3001      	adds	r0, #1
 800cd70:	f43f af51 	beq.w	800cc16 <_printf_float+0xbe>
 800cd74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	db02      	blt.n	800cd82 <_printf_float+0x22a>
 800cd7c:	6823      	ldr	r3, [r4, #0]
 800cd7e:	07d8      	lsls	r0, r3, #31
 800cd80:	d510      	bpl.n	800cda4 <_printf_float+0x24c>
 800cd82:	ee18 3a10 	vmov	r3, s16
 800cd86:	4652      	mov	r2, sl
 800cd88:	4631      	mov	r1, r6
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	47b8      	blx	r7
 800cd8e:	3001      	adds	r0, #1
 800cd90:	f43f af41 	beq.w	800cc16 <_printf_float+0xbe>
 800cd94:	f04f 0800 	mov.w	r8, #0
 800cd98:	f104 091a 	add.w	r9, r4, #26
 800cd9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	4543      	cmp	r3, r8
 800cda2:	dc09      	bgt.n	800cdb8 <_printf_float+0x260>
 800cda4:	6823      	ldr	r3, [r4, #0]
 800cda6:	079b      	lsls	r3, r3, #30
 800cda8:	f100 8107 	bmi.w	800cfba <_printf_float+0x462>
 800cdac:	68e0      	ldr	r0, [r4, #12]
 800cdae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdb0:	4298      	cmp	r0, r3
 800cdb2:	bfb8      	it	lt
 800cdb4:	4618      	movlt	r0, r3
 800cdb6:	e730      	b.n	800cc1a <_printf_float+0xc2>
 800cdb8:	2301      	movs	r3, #1
 800cdba:	464a      	mov	r2, r9
 800cdbc:	4631      	mov	r1, r6
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	47b8      	blx	r7
 800cdc2:	3001      	adds	r0, #1
 800cdc4:	f43f af27 	beq.w	800cc16 <_printf_float+0xbe>
 800cdc8:	f108 0801 	add.w	r8, r8, #1
 800cdcc:	e7e6      	b.n	800cd9c <_printf_float+0x244>
 800cdce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	dc39      	bgt.n	800ce48 <_printf_float+0x2f0>
 800cdd4:	4a1b      	ldr	r2, [pc, #108]	; (800ce44 <_printf_float+0x2ec>)
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	4631      	mov	r1, r6
 800cdda:	4628      	mov	r0, r5
 800cddc:	47b8      	blx	r7
 800cdde:	3001      	adds	r0, #1
 800cde0:	f43f af19 	beq.w	800cc16 <_printf_float+0xbe>
 800cde4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cde8:	4313      	orrs	r3, r2
 800cdea:	d102      	bne.n	800cdf2 <_printf_float+0x29a>
 800cdec:	6823      	ldr	r3, [r4, #0]
 800cdee:	07d9      	lsls	r1, r3, #31
 800cdf0:	d5d8      	bpl.n	800cda4 <_printf_float+0x24c>
 800cdf2:	ee18 3a10 	vmov	r3, s16
 800cdf6:	4652      	mov	r2, sl
 800cdf8:	4631      	mov	r1, r6
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	47b8      	blx	r7
 800cdfe:	3001      	adds	r0, #1
 800ce00:	f43f af09 	beq.w	800cc16 <_printf_float+0xbe>
 800ce04:	f04f 0900 	mov.w	r9, #0
 800ce08:	f104 0a1a 	add.w	sl, r4, #26
 800ce0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce0e:	425b      	negs	r3, r3
 800ce10:	454b      	cmp	r3, r9
 800ce12:	dc01      	bgt.n	800ce18 <_printf_float+0x2c0>
 800ce14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce16:	e792      	b.n	800cd3e <_printf_float+0x1e6>
 800ce18:	2301      	movs	r3, #1
 800ce1a:	4652      	mov	r2, sl
 800ce1c:	4631      	mov	r1, r6
 800ce1e:	4628      	mov	r0, r5
 800ce20:	47b8      	blx	r7
 800ce22:	3001      	adds	r0, #1
 800ce24:	f43f aef7 	beq.w	800cc16 <_printf_float+0xbe>
 800ce28:	f109 0901 	add.w	r9, r9, #1
 800ce2c:	e7ee      	b.n	800ce0c <_printf_float+0x2b4>
 800ce2e:	bf00      	nop
 800ce30:	7fefffff 	.word	0x7fefffff
 800ce34:	08011b8c 	.word	0x08011b8c
 800ce38:	08011b90 	.word	0x08011b90
 800ce3c:	08011b94 	.word	0x08011b94
 800ce40:	08011b98 	.word	0x08011b98
 800ce44:	08011b9c 	.word	0x08011b9c
 800ce48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	bfa8      	it	ge
 800ce50:	461a      	movge	r2, r3
 800ce52:	2a00      	cmp	r2, #0
 800ce54:	4691      	mov	r9, r2
 800ce56:	dc37      	bgt.n	800cec8 <_printf_float+0x370>
 800ce58:	f04f 0b00 	mov.w	fp, #0
 800ce5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce60:	f104 021a 	add.w	r2, r4, #26
 800ce64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce66:	9305      	str	r3, [sp, #20]
 800ce68:	eba3 0309 	sub.w	r3, r3, r9
 800ce6c:	455b      	cmp	r3, fp
 800ce6e:	dc33      	bgt.n	800ced8 <_printf_float+0x380>
 800ce70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce74:	429a      	cmp	r2, r3
 800ce76:	db3b      	blt.n	800cef0 <_printf_float+0x398>
 800ce78:	6823      	ldr	r3, [r4, #0]
 800ce7a:	07da      	lsls	r2, r3, #31
 800ce7c:	d438      	bmi.n	800cef0 <_printf_float+0x398>
 800ce7e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ce82:	eba2 0903 	sub.w	r9, r2, r3
 800ce86:	9b05      	ldr	r3, [sp, #20]
 800ce88:	1ad2      	subs	r2, r2, r3
 800ce8a:	4591      	cmp	r9, r2
 800ce8c:	bfa8      	it	ge
 800ce8e:	4691      	movge	r9, r2
 800ce90:	f1b9 0f00 	cmp.w	r9, #0
 800ce94:	dc35      	bgt.n	800cf02 <_printf_float+0x3aa>
 800ce96:	f04f 0800 	mov.w	r8, #0
 800ce9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce9e:	f104 0a1a 	add.w	sl, r4, #26
 800cea2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cea6:	1a9b      	subs	r3, r3, r2
 800cea8:	eba3 0309 	sub.w	r3, r3, r9
 800ceac:	4543      	cmp	r3, r8
 800ceae:	f77f af79 	ble.w	800cda4 <_printf_float+0x24c>
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	4652      	mov	r2, sl
 800ceb6:	4631      	mov	r1, r6
 800ceb8:	4628      	mov	r0, r5
 800ceba:	47b8      	blx	r7
 800cebc:	3001      	adds	r0, #1
 800cebe:	f43f aeaa 	beq.w	800cc16 <_printf_float+0xbe>
 800cec2:	f108 0801 	add.w	r8, r8, #1
 800cec6:	e7ec      	b.n	800cea2 <_printf_float+0x34a>
 800cec8:	4613      	mov	r3, r2
 800ceca:	4631      	mov	r1, r6
 800cecc:	4642      	mov	r2, r8
 800cece:	4628      	mov	r0, r5
 800ced0:	47b8      	blx	r7
 800ced2:	3001      	adds	r0, #1
 800ced4:	d1c0      	bne.n	800ce58 <_printf_float+0x300>
 800ced6:	e69e      	b.n	800cc16 <_printf_float+0xbe>
 800ced8:	2301      	movs	r3, #1
 800ceda:	4631      	mov	r1, r6
 800cedc:	4628      	mov	r0, r5
 800cede:	9205      	str	r2, [sp, #20]
 800cee0:	47b8      	blx	r7
 800cee2:	3001      	adds	r0, #1
 800cee4:	f43f ae97 	beq.w	800cc16 <_printf_float+0xbe>
 800cee8:	9a05      	ldr	r2, [sp, #20]
 800ceea:	f10b 0b01 	add.w	fp, fp, #1
 800ceee:	e7b9      	b.n	800ce64 <_printf_float+0x30c>
 800cef0:	ee18 3a10 	vmov	r3, s16
 800cef4:	4652      	mov	r2, sl
 800cef6:	4631      	mov	r1, r6
 800cef8:	4628      	mov	r0, r5
 800cefa:	47b8      	blx	r7
 800cefc:	3001      	adds	r0, #1
 800cefe:	d1be      	bne.n	800ce7e <_printf_float+0x326>
 800cf00:	e689      	b.n	800cc16 <_printf_float+0xbe>
 800cf02:	9a05      	ldr	r2, [sp, #20]
 800cf04:	464b      	mov	r3, r9
 800cf06:	4442      	add	r2, r8
 800cf08:	4631      	mov	r1, r6
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	47b8      	blx	r7
 800cf0e:	3001      	adds	r0, #1
 800cf10:	d1c1      	bne.n	800ce96 <_printf_float+0x33e>
 800cf12:	e680      	b.n	800cc16 <_printf_float+0xbe>
 800cf14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf16:	2a01      	cmp	r2, #1
 800cf18:	dc01      	bgt.n	800cf1e <_printf_float+0x3c6>
 800cf1a:	07db      	lsls	r3, r3, #31
 800cf1c:	d53a      	bpl.n	800cf94 <_printf_float+0x43c>
 800cf1e:	2301      	movs	r3, #1
 800cf20:	4642      	mov	r2, r8
 800cf22:	4631      	mov	r1, r6
 800cf24:	4628      	mov	r0, r5
 800cf26:	47b8      	blx	r7
 800cf28:	3001      	adds	r0, #1
 800cf2a:	f43f ae74 	beq.w	800cc16 <_printf_float+0xbe>
 800cf2e:	ee18 3a10 	vmov	r3, s16
 800cf32:	4652      	mov	r2, sl
 800cf34:	4631      	mov	r1, r6
 800cf36:	4628      	mov	r0, r5
 800cf38:	47b8      	blx	r7
 800cf3a:	3001      	adds	r0, #1
 800cf3c:	f43f ae6b 	beq.w	800cc16 <_printf_float+0xbe>
 800cf40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf44:	2200      	movs	r2, #0
 800cf46:	2300      	movs	r3, #0
 800cf48:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cf4c:	f7f3 fdd4 	bl	8000af8 <__aeabi_dcmpeq>
 800cf50:	b9d8      	cbnz	r0, 800cf8a <_printf_float+0x432>
 800cf52:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cf56:	f108 0201 	add.w	r2, r8, #1
 800cf5a:	4631      	mov	r1, r6
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	47b8      	blx	r7
 800cf60:	3001      	adds	r0, #1
 800cf62:	d10e      	bne.n	800cf82 <_printf_float+0x42a>
 800cf64:	e657      	b.n	800cc16 <_printf_float+0xbe>
 800cf66:	2301      	movs	r3, #1
 800cf68:	4652      	mov	r2, sl
 800cf6a:	4631      	mov	r1, r6
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	47b8      	blx	r7
 800cf70:	3001      	adds	r0, #1
 800cf72:	f43f ae50 	beq.w	800cc16 <_printf_float+0xbe>
 800cf76:	f108 0801 	add.w	r8, r8, #1
 800cf7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf7c:	3b01      	subs	r3, #1
 800cf7e:	4543      	cmp	r3, r8
 800cf80:	dcf1      	bgt.n	800cf66 <_printf_float+0x40e>
 800cf82:	464b      	mov	r3, r9
 800cf84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cf88:	e6da      	b.n	800cd40 <_printf_float+0x1e8>
 800cf8a:	f04f 0800 	mov.w	r8, #0
 800cf8e:	f104 0a1a 	add.w	sl, r4, #26
 800cf92:	e7f2      	b.n	800cf7a <_printf_float+0x422>
 800cf94:	2301      	movs	r3, #1
 800cf96:	4642      	mov	r2, r8
 800cf98:	e7df      	b.n	800cf5a <_printf_float+0x402>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	464a      	mov	r2, r9
 800cf9e:	4631      	mov	r1, r6
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	47b8      	blx	r7
 800cfa4:	3001      	adds	r0, #1
 800cfa6:	f43f ae36 	beq.w	800cc16 <_printf_float+0xbe>
 800cfaa:	f108 0801 	add.w	r8, r8, #1
 800cfae:	68e3      	ldr	r3, [r4, #12]
 800cfb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfb2:	1a5b      	subs	r3, r3, r1
 800cfb4:	4543      	cmp	r3, r8
 800cfb6:	dcf0      	bgt.n	800cf9a <_printf_float+0x442>
 800cfb8:	e6f8      	b.n	800cdac <_printf_float+0x254>
 800cfba:	f04f 0800 	mov.w	r8, #0
 800cfbe:	f104 0919 	add.w	r9, r4, #25
 800cfc2:	e7f4      	b.n	800cfae <_printf_float+0x456>

0800cfc4 <_printf_common>:
 800cfc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc8:	4616      	mov	r6, r2
 800cfca:	4699      	mov	r9, r3
 800cfcc:	688a      	ldr	r2, [r1, #8]
 800cfce:	690b      	ldr	r3, [r1, #16]
 800cfd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	bfb8      	it	lt
 800cfd8:	4613      	movlt	r3, r2
 800cfda:	6033      	str	r3, [r6, #0]
 800cfdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cfe0:	4607      	mov	r7, r0
 800cfe2:	460c      	mov	r4, r1
 800cfe4:	b10a      	cbz	r2, 800cfea <_printf_common+0x26>
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	6033      	str	r3, [r6, #0]
 800cfea:	6823      	ldr	r3, [r4, #0]
 800cfec:	0699      	lsls	r1, r3, #26
 800cfee:	bf42      	ittt	mi
 800cff0:	6833      	ldrmi	r3, [r6, #0]
 800cff2:	3302      	addmi	r3, #2
 800cff4:	6033      	strmi	r3, [r6, #0]
 800cff6:	6825      	ldr	r5, [r4, #0]
 800cff8:	f015 0506 	ands.w	r5, r5, #6
 800cffc:	d106      	bne.n	800d00c <_printf_common+0x48>
 800cffe:	f104 0a19 	add.w	sl, r4, #25
 800d002:	68e3      	ldr	r3, [r4, #12]
 800d004:	6832      	ldr	r2, [r6, #0]
 800d006:	1a9b      	subs	r3, r3, r2
 800d008:	42ab      	cmp	r3, r5
 800d00a:	dc26      	bgt.n	800d05a <_printf_common+0x96>
 800d00c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d010:	1e13      	subs	r3, r2, #0
 800d012:	6822      	ldr	r2, [r4, #0]
 800d014:	bf18      	it	ne
 800d016:	2301      	movne	r3, #1
 800d018:	0692      	lsls	r2, r2, #26
 800d01a:	d42b      	bmi.n	800d074 <_printf_common+0xb0>
 800d01c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d020:	4649      	mov	r1, r9
 800d022:	4638      	mov	r0, r7
 800d024:	47c0      	blx	r8
 800d026:	3001      	adds	r0, #1
 800d028:	d01e      	beq.n	800d068 <_printf_common+0xa4>
 800d02a:	6823      	ldr	r3, [r4, #0]
 800d02c:	6922      	ldr	r2, [r4, #16]
 800d02e:	f003 0306 	and.w	r3, r3, #6
 800d032:	2b04      	cmp	r3, #4
 800d034:	bf02      	ittt	eq
 800d036:	68e5      	ldreq	r5, [r4, #12]
 800d038:	6833      	ldreq	r3, [r6, #0]
 800d03a:	1aed      	subeq	r5, r5, r3
 800d03c:	68a3      	ldr	r3, [r4, #8]
 800d03e:	bf0c      	ite	eq
 800d040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d044:	2500      	movne	r5, #0
 800d046:	4293      	cmp	r3, r2
 800d048:	bfc4      	itt	gt
 800d04a:	1a9b      	subgt	r3, r3, r2
 800d04c:	18ed      	addgt	r5, r5, r3
 800d04e:	2600      	movs	r6, #0
 800d050:	341a      	adds	r4, #26
 800d052:	42b5      	cmp	r5, r6
 800d054:	d11a      	bne.n	800d08c <_printf_common+0xc8>
 800d056:	2000      	movs	r0, #0
 800d058:	e008      	b.n	800d06c <_printf_common+0xa8>
 800d05a:	2301      	movs	r3, #1
 800d05c:	4652      	mov	r2, sl
 800d05e:	4649      	mov	r1, r9
 800d060:	4638      	mov	r0, r7
 800d062:	47c0      	blx	r8
 800d064:	3001      	adds	r0, #1
 800d066:	d103      	bne.n	800d070 <_printf_common+0xac>
 800d068:	f04f 30ff 	mov.w	r0, #4294967295
 800d06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d070:	3501      	adds	r5, #1
 800d072:	e7c6      	b.n	800d002 <_printf_common+0x3e>
 800d074:	18e1      	adds	r1, r4, r3
 800d076:	1c5a      	adds	r2, r3, #1
 800d078:	2030      	movs	r0, #48	; 0x30
 800d07a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d07e:	4422      	add	r2, r4
 800d080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d088:	3302      	adds	r3, #2
 800d08a:	e7c7      	b.n	800d01c <_printf_common+0x58>
 800d08c:	2301      	movs	r3, #1
 800d08e:	4622      	mov	r2, r4
 800d090:	4649      	mov	r1, r9
 800d092:	4638      	mov	r0, r7
 800d094:	47c0      	blx	r8
 800d096:	3001      	adds	r0, #1
 800d098:	d0e6      	beq.n	800d068 <_printf_common+0xa4>
 800d09a:	3601      	adds	r6, #1
 800d09c:	e7d9      	b.n	800d052 <_printf_common+0x8e>
	...

0800d0a0 <_printf_i>:
 800d0a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a4:	7e0f      	ldrb	r7, [r1, #24]
 800d0a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0a8:	2f78      	cmp	r7, #120	; 0x78
 800d0aa:	4691      	mov	r9, r2
 800d0ac:	4680      	mov	r8, r0
 800d0ae:	460c      	mov	r4, r1
 800d0b0:	469a      	mov	sl, r3
 800d0b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d0b6:	d807      	bhi.n	800d0c8 <_printf_i+0x28>
 800d0b8:	2f62      	cmp	r7, #98	; 0x62
 800d0ba:	d80a      	bhi.n	800d0d2 <_printf_i+0x32>
 800d0bc:	2f00      	cmp	r7, #0
 800d0be:	f000 80d4 	beq.w	800d26a <_printf_i+0x1ca>
 800d0c2:	2f58      	cmp	r7, #88	; 0x58
 800d0c4:	f000 80c0 	beq.w	800d248 <_printf_i+0x1a8>
 800d0c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d0d0:	e03a      	b.n	800d148 <_printf_i+0xa8>
 800d0d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d0d6:	2b15      	cmp	r3, #21
 800d0d8:	d8f6      	bhi.n	800d0c8 <_printf_i+0x28>
 800d0da:	a101      	add	r1, pc, #4	; (adr r1, 800d0e0 <_printf_i+0x40>)
 800d0dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0e0:	0800d139 	.word	0x0800d139
 800d0e4:	0800d14d 	.word	0x0800d14d
 800d0e8:	0800d0c9 	.word	0x0800d0c9
 800d0ec:	0800d0c9 	.word	0x0800d0c9
 800d0f0:	0800d0c9 	.word	0x0800d0c9
 800d0f4:	0800d0c9 	.word	0x0800d0c9
 800d0f8:	0800d14d 	.word	0x0800d14d
 800d0fc:	0800d0c9 	.word	0x0800d0c9
 800d100:	0800d0c9 	.word	0x0800d0c9
 800d104:	0800d0c9 	.word	0x0800d0c9
 800d108:	0800d0c9 	.word	0x0800d0c9
 800d10c:	0800d251 	.word	0x0800d251
 800d110:	0800d179 	.word	0x0800d179
 800d114:	0800d20b 	.word	0x0800d20b
 800d118:	0800d0c9 	.word	0x0800d0c9
 800d11c:	0800d0c9 	.word	0x0800d0c9
 800d120:	0800d273 	.word	0x0800d273
 800d124:	0800d0c9 	.word	0x0800d0c9
 800d128:	0800d179 	.word	0x0800d179
 800d12c:	0800d0c9 	.word	0x0800d0c9
 800d130:	0800d0c9 	.word	0x0800d0c9
 800d134:	0800d213 	.word	0x0800d213
 800d138:	682b      	ldr	r3, [r5, #0]
 800d13a:	1d1a      	adds	r2, r3, #4
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	602a      	str	r2, [r5, #0]
 800d140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d148:	2301      	movs	r3, #1
 800d14a:	e09f      	b.n	800d28c <_printf_i+0x1ec>
 800d14c:	6820      	ldr	r0, [r4, #0]
 800d14e:	682b      	ldr	r3, [r5, #0]
 800d150:	0607      	lsls	r7, r0, #24
 800d152:	f103 0104 	add.w	r1, r3, #4
 800d156:	6029      	str	r1, [r5, #0]
 800d158:	d501      	bpl.n	800d15e <_printf_i+0xbe>
 800d15a:	681e      	ldr	r6, [r3, #0]
 800d15c:	e003      	b.n	800d166 <_printf_i+0xc6>
 800d15e:	0646      	lsls	r6, r0, #25
 800d160:	d5fb      	bpl.n	800d15a <_printf_i+0xba>
 800d162:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d166:	2e00      	cmp	r6, #0
 800d168:	da03      	bge.n	800d172 <_printf_i+0xd2>
 800d16a:	232d      	movs	r3, #45	; 0x2d
 800d16c:	4276      	negs	r6, r6
 800d16e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d172:	485a      	ldr	r0, [pc, #360]	; (800d2dc <_printf_i+0x23c>)
 800d174:	230a      	movs	r3, #10
 800d176:	e012      	b.n	800d19e <_printf_i+0xfe>
 800d178:	682b      	ldr	r3, [r5, #0]
 800d17a:	6820      	ldr	r0, [r4, #0]
 800d17c:	1d19      	adds	r1, r3, #4
 800d17e:	6029      	str	r1, [r5, #0]
 800d180:	0605      	lsls	r5, r0, #24
 800d182:	d501      	bpl.n	800d188 <_printf_i+0xe8>
 800d184:	681e      	ldr	r6, [r3, #0]
 800d186:	e002      	b.n	800d18e <_printf_i+0xee>
 800d188:	0641      	lsls	r1, r0, #25
 800d18a:	d5fb      	bpl.n	800d184 <_printf_i+0xe4>
 800d18c:	881e      	ldrh	r6, [r3, #0]
 800d18e:	4853      	ldr	r0, [pc, #332]	; (800d2dc <_printf_i+0x23c>)
 800d190:	2f6f      	cmp	r7, #111	; 0x6f
 800d192:	bf0c      	ite	eq
 800d194:	2308      	moveq	r3, #8
 800d196:	230a      	movne	r3, #10
 800d198:	2100      	movs	r1, #0
 800d19a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d19e:	6865      	ldr	r5, [r4, #4]
 800d1a0:	60a5      	str	r5, [r4, #8]
 800d1a2:	2d00      	cmp	r5, #0
 800d1a4:	bfa2      	ittt	ge
 800d1a6:	6821      	ldrge	r1, [r4, #0]
 800d1a8:	f021 0104 	bicge.w	r1, r1, #4
 800d1ac:	6021      	strge	r1, [r4, #0]
 800d1ae:	b90e      	cbnz	r6, 800d1b4 <_printf_i+0x114>
 800d1b0:	2d00      	cmp	r5, #0
 800d1b2:	d04b      	beq.n	800d24c <_printf_i+0x1ac>
 800d1b4:	4615      	mov	r5, r2
 800d1b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d1ba:	fb03 6711 	mls	r7, r3, r1, r6
 800d1be:	5dc7      	ldrb	r7, [r0, r7]
 800d1c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d1c4:	4637      	mov	r7, r6
 800d1c6:	42bb      	cmp	r3, r7
 800d1c8:	460e      	mov	r6, r1
 800d1ca:	d9f4      	bls.n	800d1b6 <_printf_i+0x116>
 800d1cc:	2b08      	cmp	r3, #8
 800d1ce:	d10b      	bne.n	800d1e8 <_printf_i+0x148>
 800d1d0:	6823      	ldr	r3, [r4, #0]
 800d1d2:	07de      	lsls	r6, r3, #31
 800d1d4:	d508      	bpl.n	800d1e8 <_printf_i+0x148>
 800d1d6:	6923      	ldr	r3, [r4, #16]
 800d1d8:	6861      	ldr	r1, [r4, #4]
 800d1da:	4299      	cmp	r1, r3
 800d1dc:	bfde      	ittt	le
 800d1de:	2330      	movle	r3, #48	; 0x30
 800d1e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d1e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d1e8:	1b52      	subs	r2, r2, r5
 800d1ea:	6122      	str	r2, [r4, #16]
 800d1ec:	f8cd a000 	str.w	sl, [sp]
 800d1f0:	464b      	mov	r3, r9
 800d1f2:	aa03      	add	r2, sp, #12
 800d1f4:	4621      	mov	r1, r4
 800d1f6:	4640      	mov	r0, r8
 800d1f8:	f7ff fee4 	bl	800cfc4 <_printf_common>
 800d1fc:	3001      	adds	r0, #1
 800d1fe:	d14a      	bne.n	800d296 <_printf_i+0x1f6>
 800d200:	f04f 30ff 	mov.w	r0, #4294967295
 800d204:	b004      	add	sp, #16
 800d206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d20a:	6823      	ldr	r3, [r4, #0]
 800d20c:	f043 0320 	orr.w	r3, r3, #32
 800d210:	6023      	str	r3, [r4, #0]
 800d212:	4833      	ldr	r0, [pc, #204]	; (800d2e0 <_printf_i+0x240>)
 800d214:	2778      	movs	r7, #120	; 0x78
 800d216:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d21a:	6823      	ldr	r3, [r4, #0]
 800d21c:	6829      	ldr	r1, [r5, #0]
 800d21e:	061f      	lsls	r7, r3, #24
 800d220:	f851 6b04 	ldr.w	r6, [r1], #4
 800d224:	d402      	bmi.n	800d22c <_printf_i+0x18c>
 800d226:	065f      	lsls	r7, r3, #25
 800d228:	bf48      	it	mi
 800d22a:	b2b6      	uxthmi	r6, r6
 800d22c:	07df      	lsls	r7, r3, #31
 800d22e:	bf48      	it	mi
 800d230:	f043 0320 	orrmi.w	r3, r3, #32
 800d234:	6029      	str	r1, [r5, #0]
 800d236:	bf48      	it	mi
 800d238:	6023      	strmi	r3, [r4, #0]
 800d23a:	b91e      	cbnz	r6, 800d244 <_printf_i+0x1a4>
 800d23c:	6823      	ldr	r3, [r4, #0]
 800d23e:	f023 0320 	bic.w	r3, r3, #32
 800d242:	6023      	str	r3, [r4, #0]
 800d244:	2310      	movs	r3, #16
 800d246:	e7a7      	b.n	800d198 <_printf_i+0xf8>
 800d248:	4824      	ldr	r0, [pc, #144]	; (800d2dc <_printf_i+0x23c>)
 800d24a:	e7e4      	b.n	800d216 <_printf_i+0x176>
 800d24c:	4615      	mov	r5, r2
 800d24e:	e7bd      	b.n	800d1cc <_printf_i+0x12c>
 800d250:	682b      	ldr	r3, [r5, #0]
 800d252:	6826      	ldr	r6, [r4, #0]
 800d254:	6961      	ldr	r1, [r4, #20]
 800d256:	1d18      	adds	r0, r3, #4
 800d258:	6028      	str	r0, [r5, #0]
 800d25a:	0635      	lsls	r5, r6, #24
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	d501      	bpl.n	800d264 <_printf_i+0x1c4>
 800d260:	6019      	str	r1, [r3, #0]
 800d262:	e002      	b.n	800d26a <_printf_i+0x1ca>
 800d264:	0670      	lsls	r0, r6, #25
 800d266:	d5fb      	bpl.n	800d260 <_printf_i+0x1c0>
 800d268:	8019      	strh	r1, [r3, #0]
 800d26a:	2300      	movs	r3, #0
 800d26c:	6123      	str	r3, [r4, #16]
 800d26e:	4615      	mov	r5, r2
 800d270:	e7bc      	b.n	800d1ec <_printf_i+0x14c>
 800d272:	682b      	ldr	r3, [r5, #0]
 800d274:	1d1a      	adds	r2, r3, #4
 800d276:	602a      	str	r2, [r5, #0]
 800d278:	681d      	ldr	r5, [r3, #0]
 800d27a:	6862      	ldr	r2, [r4, #4]
 800d27c:	2100      	movs	r1, #0
 800d27e:	4628      	mov	r0, r5
 800d280:	f7f2 ffbe 	bl	8000200 <memchr>
 800d284:	b108      	cbz	r0, 800d28a <_printf_i+0x1ea>
 800d286:	1b40      	subs	r0, r0, r5
 800d288:	6060      	str	r0, [r4, #4]
 800d28a:	6863      	ldr	r3, [r4, #4]
 800d28c:	6123      	str	r3, [r4, #16]
 800d28e:	2300      	movs	r3, #0
 800d290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d294:	e7aa      	b.n	800d1ec <_printf_i+0x14c>
 800d296:	6923      	ldr	r3, [r4, #16]
 800d298:	462a      	mov	r2, r5
 800d29a:	4649      	mov	r1, r9
 800d29c:	4640      	mov	r0, r8
 800d29e:	47d0      	blx	sl
 800d2a0:	3001      	adds	r0, #1
 800d2a2:	d0ad      	beq.n	800d200 <_printf_i+0x160>
 800d2a4:	6823      	ldr	r3, [r4, #0]
 800d2a6:	079b      	lsls	r3, r3, #30
 800d2a8:	d413      	bmi.n	800d2d2 <_printf_i+0x232>
 800d2aa:	68e0      	ldr	r0, [r4, #12]
 800d2ac:	9b03      	ldr	r3, [sp, #12]
 800d2ae:	4298      	cmp	r0, r3
 800d2b0:	bfb8      	it	lt
 800d2b2:	4618      	movlt	r0, r3
 800d2b4:	e7a6      	b.n	800d204 <_printf_i+0x164>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	4632      	mov	r2, r6
 800d2ba:	4649      	mov	r1, r9
 800d2bc:	4640      	mov	r0, r8
 800d2be:	47d0      	blx	sl
 800d2c0:	3001      	adds	r0, #1
 800d2c2:	d09d      	beq.n	800d200 <_printf_i+0x160>
 800d2c4:	3501      	adds	r5, #1
 800d2c6:	68e3      	ldr	r3, [r4, #12]
 800d2c8:	9903      	ldr	r1, [sp, #12]
 800d2ca:	1a5b      	subs	r3, r3, r1
 800d2cc:	42ab      	cmp	r3, r5
 800d2ce:	dcf2      	bgt.n	800d2b6 <_printf_i+0x216>
 800d2d0:	e7eb      	b.n	800d2aa <_printf_i+0x20a>
 800d2d2:	2500      	movs	r5, #0
 800d2d4:	f104 0619 	add.w	r6, r4, #25
 800d2d8:	e7f5      	b.n	800d2c6 <_printf_i+0x226>
 800d2da:	bf00      	nop
 800d2dc:	08011b9e 	.word	0x08011b9e
 800d2e0:	08011baf 	.word	0x08011baf

0800d2e4 <std>:
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	b510      	push	{r4, lr}
 800d2e8:	4604      	mov	r4, r0
 800d2ea:	e9c0 3300 	strd	r3, r3, [r0]
 800d2ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2f2:	6083      	str	r3, [r0, #8]
 800d2f4:	8181      	strh	r1, [r0, #12]
 800d2f6:	6643      	str	r3, [r0, #100]	; 0x64
 800d2f8:	81c2      	strh	r2, [r0, #14]
 800d2fa:	6183      	str	r3, [r0, #24]
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	2208      	movs	r2, #8
 800d300:	305c      	adds	r0, #92	; 0x5c
 800d302:	f000 fa53 	bl	800d7ac <memset>
 800d306:	4b0d      	ldr	r3, [pc, #52]	; (800d33c <std+0x58>)
 800d308:	6263      	str	r3, [r4, #36]	; 0x24
 800d30a:	4b0d      	ldr	r3, [pc, #52]	; (800d340 <std+0x5c>)
 800d30c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d30e:	4b0d      	ldr	r3, [pc, #52]	; (800d344 <std+0x60>)
 800d310:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d312:	4b0d      	ldr	r3, [pc, #52]	; (800d348 <std+0x64>)
 800d314:	6323      	str	r3, [r4, #48]	; 0x30
 800d316:	4b0d      	ldr	r3, [pc, #52]	; (800d34c <std+0x68>)
 800d318:	6224      	str	r4, [r4, #32]
 800d31a:	429c      	cmp	r4, r3
 800d31c:	d006      	beq.n	800d32c <std+0x48>
 800d31e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d322:	4294      	cmp	r4, r2
 800d324:	d002      	beq.n	800d32c <std+0x48>
 800d326:	33d0      	adds	r3, #208	; 0xd0
 800d328:	429c      	cmp	r4, r3
 800d32a:	d105      	bne.n	800d338 <std+0x54>
 800d32c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d334:	f000 badc 	b.w	800d8f0 <__retarget_lock_init_recursive>
 800d338:	bd10      	pop	{r4, pc}
 800d33a:	bf00      	nop
 800d33c:	0800d5c9 	.word	0x0800d5c9
 800d340:	0800d5eb 	.word	0x0800d5eb
 800d344:	0800d623 	.word	0x0800d623
 800d348:	0800d647 	.word	0x0800d647
 800d34c:	20019dc8 	.word	0x20019dc8

0800d350 <stdio_exit_handler>:
 800d350:	4a02      	ldr	r2, [pc, #8]	; (800d35c <stdio_exit_handler+0xc>)
 800d352:	4903      	ldr	r1, [pc, #12]	; (800d360 <stdio_exit_handler+0x10>)
 800d354:	4803      	ldr	r0, [pc, #12]	; (800d364 <stdio_exit_handler+0x14>)
 800d356:	f000 b869 	b.w	800d42c <_fwalk_sglue>
 800d35a:	bf00      	nop
 800d35c:	200008dc 	.word	0x200008dc
 800d360:	0800f2c1 	.word	0x0800f2c1
 800d364:	200008e8 	.word	0x200008e8

0800d368 <cleanup_stdio>:
 800d368:	6841      	ldr	r1, [r0, #4]
 800d36a:	4b0c      	ldr	r3, [pc, #48]	; (800d39c <cleanup_stdio+0x34>)
 800d36c:	4299      	cmp	r1, r3
 800d36e:	b510      	push	{r4, lr}
 800d370:	4604      	mov	r4, r0
 800d372:	d001      	beq.n	800d378 <cleanup_stdio+0x10>
 800d374:	f001 ffa4 	bl	800f2c0 <_fflush_r>
 800d378:	68a1      	ldr	r1, [r4, #8]
 800d37a:	4b09      	ldr	r3, [pc, #36]	; (800d3a0 <cleanup_stdio+0x38>)
 800d37c:	4299      	cmp	r1, r3
 800d37e:	d002      	beq.n	800d386 <cleanup_stdio+0x1e>
 800d380:	4620      	mov	r0, r4
 800d382:	f001 ff9d 	bl	800f2c0 <_fflush_r>
 800d386:	68e1      	ldr	r1, [r4, #12]
 800d388:	4b06      	ldr	r3, [pc, #24]	; (800d3a4 <cleanup_stdio+0x3c>)
 800d38a:	4299      	cmp	r1, r3
 800d38c:	d004      	beq.n	800d398 <cleanup_stdio+0x30>
 800d38e:	4620      	mov	r0, r4
 800d390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d394:	f001 bf94 	b.w	800f2c0 <_fflush_r>
 800d398:	bd10      	pop	{r4, pc}
 800d39a:	bf00      	nop
 800d39c:	20019dc8 	.word	0x20019dc8
 800d3a0:	20019e30 	.word	0x20019e30
 800d3a4:	20019e98 	.word	0x20019e98

0800d3a8 <global_stdio_init.part.0>:
 800d3a8:	b510      	push	{r4, lr}
 800d3aa:	4b0b      	ldr	r3, [pc, #44]	; (800d3d8 <global_stdio_init.part.0+0x30>)
 800d3ac:	4c0b      	ldr	r4, [pc, #44]	; (800d3dc <global_stdio_init.part.0+0x34>)
 800d3ae:	4a0c      	ldr	r2, [pc, #48]	; (800d3e0 <global_stdio_init.part.0+0x38>)
 800d3b0:	601a      	str	r2, [r3, #0]
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	2104      	movs	r1, #4
 800d3b8:	f7ff ff94 	bl	800d2e4 <std>
 800d3bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	2109      	movs	r1, #9
 800d3c4:	f7ff ff8e 	bl	800d2e4 <std>
 800d3c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d3cc:	2202      	movs	r2, #2
 800d3ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3d2:	2112      	movs	r1, #18
 800d3d4:	f7ff bf86 	b.w	800d2e4 <std>
 800d3d8:	20019f00 	.word	0x20019f00
 800d3dc:	20019dc8 	.word	0x20019dc8
 800d3e0:	0800d351 	.word	0x0800d351

0800d3e4 <__sfp_lock_acquire>:
 800d3e4:	4801      	ldr	r0, [pc, #4]	; (800d3ec <__sfp_lock_acquire+0x8>)
 800d3e6:	f000 ba84 	b.w	800d8f2 <__retarget_lock_acquire_recursive>
 800d3ea:	bf00      	nop
 800d3ec:	20019f09 	.word	0x20019f09

0800d3f0 <__sfp_lock_release>:
 800d3f0:	4801      	ldr	r0, [pc, #4]	; (800d3f8 <__sfp_lock_release+0x8>)
 800d3f2:	f000 ba7f 	b.w	800d8f4 <__retarget_lock_release_recursive>
 800d3f6:	bf00      	nop
 800d3f8:	20019f09 	.word	0x20019f09

0800d3fc <__sinit>:
 800d3fc:	b510      	push	{r4, lr}
 800d3fe:	4604      	mov	r4, r0
 800d400:	f7ff fff0 	bl	800d3e4 <__sfp_lock_acquire>
 800d404:	6a23      	ldr	r3, [r4, #32]
 800d406:	b11b      	cbz	r3, 800d410 <__sinit+0x14>
 800d408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d40c:	f7ff bff0 	b.w	800d3f0 <__sfp_lock_release>
 800d410:	4b04      	ldr	r3, [pc, #16]	; (800d424 <__sinit+0x28>)
 800d412:	6223      	str	r3, [r4, #32]
 800d414:	4b04      	ldr	r3, [pc, #16]	; (800d428 <__sinit+0x2c>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1f5      	bne.n	800d408 <__sinit+0xc>
 800d41c:	f7ff ffc4 	bl	800d3a8 <global_stdio_init.part.0>
 800d420:	e7f2      	b.n	800d408 <__sinit+0xc>
 800d422:	bf00      	nop
 800d424:	0800d369 	.word	0x0800d369
 800d428:	20019f00 	.word	0x20019f00

0800d42c <_fwalk_sglue>:
 800d42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d430:	4607      	mov	r7, r0
 800d432:	4688      	mov	r8, r1
 800d434:	4614      	mov	r4, r2
 800d436:	2600      	movs	r6, #0
 800d438:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d43c:	f1b9 0901 	subs.w	r9, r9, #1
 800d440:	d505      	bpl.n	800d44e <_fwalk_sglue+0x22>
 800d442:	6824      	ldr	r4, [r4, #0]
 800d444:	2c00      	cmp	r4, #0
 800d446:	d1f7      	bne.n	800d438 <_fwalk_sglue+0xc>
 800d448:	4630      	mov	r0, r6
 800d44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d44e:	89ab      	ldrh	r3, [r5, #12]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d907      	bls.n	800d464 <_fwalk_sglue+0x38>
 800d454:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d458:	3301      	adds	r3, #1
 800d45a:	d003      	beq.n	800d464 <_fwalk_sglue+0x38>
 800d45c:	4629      	mov	r1, r5
 800d45e:	4638      	mov	r0, r7
 800d460:	47c0      	blx	r8
 800d462:	4306      	orrs	r6, r0
 800d464:	3568      	adds	r5, #104	; 0x68
 800d466:	e7e9      	b.n	800d43c <_fwalk_sglue+0x10>

0800d468 <_puts_r>:
 800d468:	6a03      	ldr	r3, [r0, #32]
 800d46a:	b570      	push	{r4, r5, r6, lr}
 800d46c:	6884      	ldr	r4, [r0, #8]
 800d46e:	4605      	mov	r5, r0
 800d470:	460e      	mov	r6, r1
 800d472:	b90b      	cbnz	r3, 800d478 <_puts_r+0x10>
 800d474:	f7ff ffc2 	bl	800d3fc <__sinit>
 800d478:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d47a:	07db      	lsls	r3, r3, #31
 800d47c:	d405      	bmi.n	800d48a <_puts_r+0x22>
 800d47e:	89a3      	ldrh	r3, [r4, #12]
 800d480:	0598      	lsls	r0, r3, #22
 800d482:	d402      	bmi.n	800d48a <_puts_r+0x22>
 800d484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d486:	f000 fa34 	bl	800d8f2 <__retarget_lock_acquire_recursive>
 800d48a:	89a3      	ldrh	r3, [r4, #12]
 800d48c:	0719      	lsls	r1, r3, #28
 800d48e:	d513      	bpl.n	800d4b8 <_puts_r+0x50>
 800d490:	6923      	ldr	r3, [r4, #16]
 800d492:	b18b      	cbz	r3, 800d4b8 <_puts_r+0x50>
 800d494:	3e01      	subs	r6, #1
 800d496:	68a3      	ldr	r3, [r4, #8]
 800d498:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d49c:	3b01      	subs	r3, #1
 800d49e:	60a3      	str	r3, [r4, #8]
 800d4a0:	b9e9      	cbnz	r1, 800d4de <_puts_r+0x76>
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	da2e      	bge.n	800d504 <_puts_r+0x9c>
 800d4a6:	4622      	mov	r2, r4
 800d4a8:	210a      	movs	r1, #10
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	f000 f8cf 	bl	800d64e <__swbuf_r>
 800d4b0:	3001      	adds	r0, #1
 800d4b2:	d007      	beq.n	800d4c4 <_puts_r+0x5c>
 800d4b4:	250a      	movs	r5, #10
 800d4b6:	e007      	b.n	800d4c8 <_puts_r+0x60>
 800d4b8:	4621      	mov	r1, r4
 800d4ba:	4628      	mov	r0, r5
 800d4bc:	f000 f904 	bl	800d6c8 <__swsetup_r>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d0e7      	beq.n	800d494 <_puts_r+0x2c>
 800d4c4:	f04f 35ff 	mov.w	r5, #4294967295
 800d4c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4ca:	07da      	lsls	r2, r3, #31
 800d4cc:	d405      	bmi.n	800d4da <_puts_r+0x72>
 800d4ce:	89a3      	ldrh	r3, [r4, #12]
 800d4d0:	059b      	lsls	r3, r3, #22
 800d4d2:	d402      	bmi.n	800d4da <_puts_r+0x72>
 800d4d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4d6:	f000 fa0d 	bl	800d8f4 <__retarget_lock_release_recursive>
 800d4da:	4628      	mov	r0, r5
 800d4dc:	bd70      	pop	{r4, r5, r6, pc}
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	da04      	bge.n	800d4ec <_puts_r+0x84>
 800d4e2:	69a2      	ldr	r2, [r4, #24]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	dc06      	bgt.n	800d4f6 <_puts_r+0x8e>
 800d4e8:	290a      	cmp	r1, #10
 800d4ea:	d004      	beq.n	800d4f6 <_puts_r+0x8e>
 800d4ec:	6823      	ldr	r3, [r4, #0]
 800d4ee:	1c5a      	adds	r2, r3, #1
 800d4f0:	6022      	str	r2, [r4, #0]
 800d4f2:	7019      	strb	r1, [r3, #0]
 800d4f4:	e7cf      	b.n	800d496 <_puts_r+0x2e>
 800d4f6:	4622      	mov	r2, r4
 800d4f8:	4628      	mov	r0, r5
 800d4fa:	f000 f8a8 	bl	800d64e <__swbuf_r>
 800d4fe:	3001      	adds	r0, #1
 800d500:	d1c9      	bne.n	800d496 <_puts_r+0x2e>
 800d502:	e7df      	b.n	800d4c4 <_puts_r+0x5c>
 800d504:	6823      	ldr	r3, [r4, #0]
 800d506:	250a      	movs	r5, #10
 800d508:	1c5a      	adds	r2, r3, #1
 800d50a:	6022      	str	r2, [r4, #0]
 800d50c:	701d      	strb	r5, [r3, #0]
 800d50e:	e7db      	b.n	800d4c8 <_puts_r+0x60>

0800d510 <puts>:
 800d510:	4b02      	ldr	r3, [pc, #8]	; (800d51c <puts+0xc>)
 800d512:	4601      	mov	r1, r0
 800d514:	6818      	ldr	r0, [r3, #0]
 800d516:	f7ff bfa7 	b.w	800d468 <_puts_r>
 800d51a:	bf00      	nop
 800d51c:	20000934 	.word	0x20000934

0800d520 <sniprintf>:
 800d520:	b40c      	push	{r2, r3}
 800d522:	b530      	push	{r4, r5, lr}
 800d524:	4b17      	ldr	r3, [pc, #92]	; (800d584 <sniprintf+0x64>)
 800d526:	1e0c      	subs	r4, r1, #0
 800d528:	681d      	ldr	r5, [r3, #0]
 800d52a:	b09d      	sub	sp, #116	; 0x74
 800d52c:	da08      	bge.n	800d540 <sniprintf+0x20>
 800d52e:	238b      	movs	r3, #139	; 0x8b
 800d530:	602b      	str	r3, [r5, #0]
 800d532:	f04f 30ff 	mov.w	r0, #4294967295
 800d536:	b01d      	add	sp, #116	; 0x74
 800d538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d53c:	b002      	add	sp, #8
 800d53e:	4770      	bx	lr
 800d540:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d544:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d548:	bf14      	ite	ne
 800d54a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d54e:	4623      	moveq	r3, r4
 800d550:	9304      	str	r3, [sp, #16]
 800d552:	9307      	str	r3, [sp, #28]
 800d554:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d558:	9002      	str	r0, [sp, #8]
 800d55a:	9006      	str	r0, [sp, #24]
 800d55c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d560:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d562:	ab21      	add	r3, sp, #132	; 0x84
 800d564:	a902      	add	r1, sp, #8
 800d566:	4628      	mov	r0, r5
 800d568:	9301      	str	r3, [sp, #4]
 800d56a:	f001 fd25 	bl	800efb8 <_svfiprintf_r>
 800d56e:	1c43      	adds	r3, r0, #1
 800d570:	bfbc      	itt	lt
 800d572:	238b      	movlt	r3, #139	; 0x8b
 800d574:	602b      	strlt	r3, [r5, #0]
 800d576:	2c00      	cmp	r4, #0
 800d578:	d0dd      	beq.n	800d536 <sniprintf+0x16>
 800d57a:	9b02      	ldr	r3, [sp, #8]
 800d57c:	2200      	movs	r2, #0
 800d57e:	701a      	strb	r2, [r3, #0]
 800d580:	e7d9      	b.n	800d536 <sniprintf+0x16>
 800d582:	bf00      	nop
 800d584:	20000934 	.word	0x20000934

0800d588 <siprintf>:
 800d588:	b40e      	push	{r1, r2, r3}
 800d58a:	b500      	push	{lr}
 800d58c:	b09c      	sub	sp, #112	; 0x70
 800d58e:	ab1d      	add	r3, sp, #116	; 0x74
 800d590:	9002      	str	r0, [sp, #8]
 800d592:	9006      	str	r0, [sp, #24]
 800d594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d598:	4809      	ldr	r0, [pc, #36]	; (800d5c0 <siprintf+0x38>)
 800d59a:	9107      	str	r1, [sp, #28]
 800d59c:	9104      	str	r1, [sp, #16]
 800d59e:	4909      	ldr	r1, [pc, #36]	; (800d5c4 <siprintf+0x3c>)
 800d5a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5a4:	9105      	str	r1, [sp, #20]
 800d5a6:	6800      	ldr	r0, [r0, #0]
 800d5a8:	9301      	str	r3, [sp, #4]
 800d5aa:	a902      	add	r1, sp, #8
 800d5ac:	f001 fd04 	bl	800efb8 <_svfiprintf_r>
 800d5b0:	9b02      	ldr	r3, [sp, #8]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	701a      	strb	r2, [r3, #0]
 800d5b6:	b01c      	add	sp, #112	; 0x70
 800d5b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5bc:	b003      	add	sp, #12
 800d5be:	4770      	bx	lr
 800d5c0:	20000934 	.word	0x20000934
 800d5c4:	ffff0208 	.word	0xffff0208

0800d5c8 <__sread>:
 800d5c8:	b510      	push	{r4, lr}
 800d5ca:	460c      	mov	r4, r1
 800d5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5d0:	f000 f940 	bl	800d854 <_read_r>
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	bfab      	itete	ge
 800d5d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5da:	89a3      	ldrhlt	r3, [r4, #12]
 800d5dc:	181b      	addge	r3, r3, r0
 800d5de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5e2:	bfac      	ite	ge
 800d5e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5e6:	81a3      	strhlt	r3, [r4, #12]
 800d5e8:	bd10      	pop	{r4, pc}

0800d5ea <__swrite>:
 800d5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ee:	461f      	mov	r7, r3
 800d5f0:	898b      	ldrh	r3, [r1, #12]
 800d5f2:	05db      	lsls	r3, r3, #23
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	4616      	mov	r6, r2
 800d5fa:	d505      	bpl.n	800d608 <__swrite+0x1e>
 800d5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d600:	2302      	movs	r3, #2
 800d602:	2200      	movs	r2, #0
 800d604:	f000 f914 	bl	800d830 <_lseek_r>
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d60e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d612:	81a3      	strh	r3, [r4, #12]
 800d614:	4632      	mov	r2, r6
 800d616:	463b      	mov	r3, r7
 800d618:	4628      	mov	r0, r5
 800d61a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d61e:	f000 b92b 	b.w	800d878 <_write_r>

0800d622 <__sseek>:
 800d622:	b510      	push	{r4, lr}
 800d624:	460c      	mov	r4, r1
 800d626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d62a:	f000 f901 	bl	800d830 <_lseek_r>
 800d62e:	1c43      	adds	r3, r0, #1
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	bf15      	itete	ne
 800d634:	6560      	strne	r0, [r4, #84]	; 0x54
 800d636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d63a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d63e:	81a3      	strheq	r3, [r4, #12]
 800d640:	bf18      	it	ne
 800d642:	81a3      	strhne	r3, [r4, #12]
 800d644:	bd10      	pop	{r4, pc}

0800d646 <__sclose>:
 800d646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d64a:	f000 b8e1 	b.w	800d810 <_close_r>

0800d64e <__swbuf_r>:
 800d64e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d650:	460e      	mov	r6, r1
 800d652:	4614      	mov	r4, r2
 800d654:	4605      	mov	r5, r0
 800d656:	b118      	cbz	r0, 800d660 <__swbuf_r+0x12>
 800d658:	6a03      	ldr	r3, [r0, #32]
 800d65a:	b90b      	cbnz	r3, 800d660 <__swbuf_r+0x12>
 800d65c:	f7ff fece 	bl	800d3fc <__sinit>
 800d660:	69a3      	ldr	r3, [r4, #24]
 800d662:	60a3      	str	r3, [r4, #8]
 800d664:	89a3      	ldrh	r3, [r4, #12]
 800d666:	071a      	lsls	r2, r3, #28
 800d668:	d525      	bpl.n	800d6b6 <__swbuf_r+0x68>
 800d66a:	6923      	ldr	r3, [r4, #16]
 800d66c:	b31b      	cbz	r3, 800d6b6 <__swbuf_r+0x68>
 800d66e:	6823      	ldr	r3, [r4, #0]
 800d670:	6922      	ldr	r2, [r4, #16]
 800d672:	1a98      	subs	r0, r3, r2
 800d674:	6963      	ldr	r3, [r4, #20]
 800d676:	b2f6      	uxtb	r6, r6
 800d678:	4283      	cmp	r3, r0
 800d67a:	4637      	mov	r7, r6
 800d67c:	dc04      	bgt.n	800d688 <__swbuf_r+0x3a>
 800d67e:	4621      	mov	r1, r4
 800d680:	4628      	mov	r0, r5
 800d682:	f001 fe1d 	bl	800f2c0 <_fflush_r>
 800d686:	b9e0      	cbnz	r0, 800d6c2 <__swbuf_r+0x74>
 800d688:	68a3      	ldr	r3, [r4, #8]
 800d68a:	3b01      	subs	r3, #1
 800d68c:	60a3      	str	r3, [r4, #8]
 800d68e:	6823      	ldr	r3, [r4, #0]
 800d690:	1c5a      	adds	r2, r3, #1
 800d692:	6022      	str	r2, [r4, #0]
 800d694:	701e      	strb	r6, [r3, #0]
 800d696:	6962      	ldr	r2, [r4, #20]
 800d698:	1c43      	adds	r3, r0, #1
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d004      	beq.n	800d6a8 <__swbuf_r+0x5a>
 800d69e:	89a3      	ldrh	r3, [r4, #12]
 800d6a0:	07db      	lsls	r3, r3, #31
 800d6a2:	d506      	bpl.n	800d6b2 <__swbuf_r+0x64>
 800d6a4:	2e0a      	cmp	r6, #10
 800d6a6:	d104      	bne.n	800d6b2 <__swbuf_r+0x64>
 800d6a8:	4621      	mov	r1, r4
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	f001 fe08 	bl	800f2c0 <_fflush_r>
 800d6b0:	b938      	cbnz	r0, 800d6c2 <__swbuf_r+0x74>
 800d6b2:	4638      	mov	r0, r7
 800d6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6b6:	4621      	mov	r1, r4
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	f000 f805 	bl	800d6c8 <__swsetup_r>
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	d0d5      	beq.n	800d66e <__swbuf_r+0x20>
 800d6c2:	f04f 37ff 	mov.w	r7, #4294967295
 800d6c6:	e7f4      	b.n	800d6b2 <__swbuf_r+0x64>

0800d6c8 <__swsetup_r>:
 800d6c8:	b538      	push	{r3, r4, r5, lr}
 800d6ca:	4b2a      	ldr	r3, [pc, #168]	; (800d774 <__swsetup_r+0xac>)
 800d6cc:	4605      	mov	r5, r0
 800d6ce:	6818      	ldr	r0, [r3, #0]
 800d6d0:	460c      	mov	r4, r1
 800d6d2:	b118      	cbz	r0, 800d6dc <__swsetup_r+0x14>
 800d6d4:	6a03      	ldr	r3, [r0, #32]
 800d6d6:	b90b      	cbnz	r3, 800d6dc <__swsetup_r+0x14>
 800d6d8:	f7ff fe90 	bl	800d3fc <__sinit>
 800d6dc:	89a3      	ldrh	r3, [r4, #12]
 800d6de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6e2:	0718      	lsls	r0, r3, #28
 800d6e4:	d422      	bmi.n	800d72c <__swsetup_r+0x64>
 800d6e6:	06d9      	lsls	r1, r3, #27
 800d6e8:	d407      	bmi.n	800d6fa <__swsetup_r+0x32>
 800d6ea:	2309      	movs	r3, #9
 800d6ec:	602b      	str	r3, [r5, #0]
 800d6ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d6f2:	81a3      	strh	r3, [r4, #12]
 800d6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f8:	e034      	b.n	800d764 <__swsetup_r+0x9c>
 800d6fa:	0758      	lsls	r0, r3, #29
 800d6fc:	d512      	bpl.n	800d724 <__swsetup_r+0x5c>
 800d6fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d700:	b141      	cbz	r1, 800d714 <__swsetup_r+0x4c>
 800d702:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d706:	4299      	cmp	r1, r3
 800d708:	d002      	beq.n	800d710 <__swsetup_r+0x48>
 800d70a:	4628      	mov	r0, r5
 800d70c:	f000 ff7e 	bl	800e60c <_free_r>
 800d710:	2300      	movs	r3, #0
 800d712:	6363      	str	r3, [r4, #52]	; 0x34
 800d714:	89a3      	ldrh	r3, [r4, #12]
 800d716:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d71a:	81a3      	strh	r3, [r4, #12]
 800d71c:	2300      	movs	r3, #0
 800d71e:	6063      	str	r3, [r4, #4]
 800d720:	6923      	ldr	r3, [r4, #16]
 800d722:	6023      	str	r3, [r4, #0]
 800d724:	89a3      	ldrh	r3, [r4, #12]
 800d726:	f043 0308 	orr.w	r3, r3, #8
 800d72a:	81a3      	strh	r3, [r4, #12]
 800d72c:	6923      	ldr	r3, [r4, #16]
 800d72e:	b94b      	cbnz	r3, 800d744 <__swsetup_r+0x7c>
 800d730:	89a3      	ldrh	r3, [r4, #12]
 800d732:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d73a:	d003      	beq.n	800d744 <__swsetup_r+0x7c>
 800d73c:	4621      	mov	r1, r4
 800d73e:	4628      	mov	r0, r5
 800d740:	f001 fe0c 	bl	800f35c <__smakebuf_r>
 800d744:	89a0      	ldrh	r0, [r4, #12]
 800d746:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d74a:	f010 0301 	ands.w	r3, r0, #1
 800d74e:	d00a      	beq.n	800d766 <__swsetup_r+0x9e>
 800d750:	2300      	movs	r3, #0
 800d752:	60a3      	str	r3, [r4, #8]
 800d754:	6963      	ldr	r3, [r4, #20]
 800d756:	425b      	negs	r3, r3
 800d758:	61a3      	str	r3, [r4, #24]
 800d75a:	6923      	ldr	r3, [r4, #16]
 800d75c:	b943      	cbnz	r3, 800d770 <__swsetup_r+0xa8>
 800d75e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d762:	d1c4      	bne.n	800d6ee <__swsetup_r+0x26>
 800d764:	bd38      	pop	{r3, r4, r5, pc}
 800d766:	0781      	lsls	r1, r0, #30
 800d768:	bf58      	it	pl
 800d76a:	6963      	ldrpl	r3, [r4, #20]
 800d76c:	60a3      	str	r3, [r4, #8]
 800d76e:	e7f4      	b.n	800d75a <__swsetup_r+0x92>
 800d770:	2000      	movs	r0, #0
 800d772:	e7f7      	b.n	800d764 <__swsetup_r+0x9c>
 800d774:	20000934 	.word	0x20000934

0800d778 <memmove>:
 800d778:	4288      	cmp	r0, r1
 800d77a:	b510      	push	{r4, lr}
 800d77c:	eb01 0402 	add.w	r4, r1, r2
 800d780:	d902      	bls.n	800d788 <memmove+0x10>
 800d782:	4284      	cmp	r4, r0
 800d784:	4623      	mov	r3, r4
 800d786:	d807      	bhi.n	800d798 <memmove+0x20>
 800d788:	1e43      	subs	r3, r0, #1
 800d78a:	42a1      	cmp	r1, r4
 800d78c:	d008      	beq.n	800d7a0 <memmove+0x28>
 800d78e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d792:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d796:	e7f8      	b.n	800d78a <memmove+0x12>
 800d798:	4402      	add	r2, r0
 800d79a:	4601      	mov	r1, r0
 800d79c:	428a      	cmp	r2, r1
 800d79e:	d100      	bne.n	800d7a2 <memmove+0x2a>
 800d7a0:	bd10      	pop	{r4, pc}
 800d7a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7aa:	e7f7      	b.n	800d79c <memmove+0x24>

0800d7ac <memset>:
 800d7ac:	4402      	add	r2, r0
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d100      	bne.n	800d7b6 <memset+0xa>
 800d7b4:	4770      	bx	lr
 800d7b6:	f803 1b01 	strb.w	r1, [r3], #1
 800d7ba:	e7f9      	b.n	800d7b0 <memset+0x4>

0800d7bc <strncat>:
 800d7bc:	b530      	push	{r4, r5, lr}
 800d7be:	4604      	mov	r4, r0
 800d7c0:	7825      	ldrb	r5, [r4, #0]
 800d7c2:	4623      	mov	r3, r4
 800d7c4:	3401      	adds	r4, #1
 800d7c6:	2d00      	cmp	r5, #0
 800d7c8:	d1fa      	bne.n	800d7c0 <strncat+0x4>
 800d7ca:	3a01      	subs	r2, #1
 800d7cc:	d304      	bcc.n	800d7d8 <strncat+0x1c>
 800d7ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7d2:	f803 4b01 	strb.w	r4, [r3], #1
 800d7d6:	b904      	cbnz	r4, 800d7da <strncat+0x1e>
 800d7d8:	bd30      	pop	{r4, r5, pc}
 800d7da:	2a00      	cmp	r2, #0
 800d7dc:	d1f5      	bne.n	800d7ca <strncat+0xe>
 800d7de:	701a      	strb	r2, [r3, #0]
 800d7e0:	e7f3      	b.n	800d7ca <strncat+0xe>

0800d7e2 <strncpy>:
 800d7e2:	b510      	push	{r4, lr}
 800d7e4:	3901      	subs	r1, #1
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	b132      	cbz	r2, 800d7f8 <strncpy+0x16>
 800d7ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d7ee:	f803 4b01 	strb.w	r4, [r3], #1
 800d7f2:	3a01      	subs	r2, #1
 800d7f4:	2c00      	cmp	r4, #0
 800d7f6:	d1f7      	bne.n	800d7e8 <strncpy+0x6>
 800d7f8:	441a      	add	r2, r3
 800d7fa:	2100      	movs	r1, #0
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d100      	bne.n	800d802 <strncpy+0x20>
 800d800:	bd10      	pop	{r4, pc}
 800d802:	f803 1b01 	strb.w	r1, [r3], #1
 800d806:	e7f9      	b.n	800d7fc <strncpy+0x1a>

0800d808 <_localeconv_r>:
 800d808:	4800      	ldr	r0, [pc, #0]	; (800d80c <_localeconv_r+0x4>)
 800d80a:	4770      	bx	lr
 800d80c:	20000a28 	.word	0x20000a28

0800d810 <_close_r>:
 800d810:	b538      	push	{r3, r4, r5, lr}
 800d812:	4d06      	ldr	r5, [pc, #24]	; (800d82c <_close_r+0x1c>)
 800d814:	2300      	movs	r3, #0
 800d816:	4604      	mov	r4, r0
 800d818:	4608      	mov	r0, r1
 800d81a:	602b      	str	r3, [r5, #0]
 800d81c:	f7f6 fb71 	bl	8003f02 <_close>
 800d820:	1c43      	adds	r3, r0, #1
 800d822:	d102      	bne.n	800d82a <_close_r+0x1a>
 800d824:	682b      	ldr	r3, [r5, #0]
 800d826:	b103      	cbz	r3, 800d82a <_close_r+0x1a>
 800d828:	6023      	str	r3, [r4, #0]
 800d82a:	bd38      	pop	{r3, r4, r5, pc}
 800d82c:	20019f04 	.word	0x20019f04

0800d830 <_lseek_r>:
 800d830:	b538      	push	{r3, r4, r5, lr}
 800d832:	4d07      	ldr	r5, [pc, #28]	; (800d850 <_lseek_r+0x20>)
 800d834:	4604      	mov	r4, r0
 800d836:	4608      	mov	r0, r1
 800d838:	4611      	mov	r1, r2
 800d83a:	2200      	movs	r2, #0
 800d83c:	602a      	str	r2, [r5, #0]
 800d83e:	461a      	mov	r2, r3
 800d840:	f7f6 fb86 	bl	8003f50 <_lseek>
 800d844:	1c43      	adds	r3, r0, #1
 800d846:	d102      	bne.n	800d84e <_lseek_r+0x1e>
 800d848:	682b      	ldr	r3, [r5, #0]
 800d84a:	b103      	cbz	r3, 800d84e <_lseek_r+0x1e>
 800d84c:	6023      	str	r3, [r4, #0]
 800d84e:	bd38      	pop	{r3, r4, r5, pc}
 800d850:	20019f04 	.word	0x20019f04

0800d854 <_read_r>:
 800d854:	b538      	push	{r3, r4, r5, lr}
 800d856:	4d07      	ldr	r5, [pc, #28]	; (800d874 <_read_r+0x20>)
 800d858:	4604      	mov	r4, r0
 800d85a:	4608      	mov	r0, r1
 800d85c:	4611      	mov	r1, r2
 800d85e:	2200      	movs	r2, #0
 800d860:	602a      	str	r2, [r5, #0]
 800d862:	461a      	mov	r2, r3
 800d864:	f7f6 fb14 	bl	8003e90 <_read>
 800d868:	1c43      	adds	r3, r0, #1
 800d86a:	d102      	bne.n	800d872 <_read_r+0x1e>
 800d86c:	682b      	ldr	r3, [r5, #0]
 800d86e:	b103      	cbz	r3, 800d872 <_read_r+0x1e>
 800d870:	6023      	str	r3, [r4, #0]
 800d872:	bd38      	pop	{r3, r4, r5, pc}
 800d874:	20019f04 	.word	0x20019f04

0800d878 <_write_r>:
 800d878:	b538      	push	{r3, r4, r5, lr}
 800d87a:	4d07      	ldr	r5, [pc, #28]	; (800d898 <_write_r+0x20>)
 800d87c:	4604      	mov	r4, r0
 800d87e:	4608      	mov	r0, r1
 800d880:	4611      	mov	r1, r2
 800d882:	2200      	movs	r2, #0
 800d884:	602a      	str	r2, [r5, #0]
 800d886:	461a      	mov	r2, r3
 800d888:	f7f6 fb1f 	bl	8003eca <_write>
 800d88c:	1c43      	adds	r3, r0, #1
 800d88e:	d102      	bne.n	800d896 <_write_r+0x1e>
 800d890:	682b      	ldr	r3, [r5, #0]
 800d892:	b103      	cbz	r3, 800d896 <_write_r+0x1e>
 800d894:	6023      	str	r3, [r4, #0]
 800d896:	bd38      	pop	{r3, r4, r5, pc}
 800d898:	20019f04 	.word	0x20019f04

0800d89c <__errno>:
 800d89c:	4b01      	ldr	r3, [pc, #4]	; (800d8a4 <__errno+0x8>)
 800d89e:	6818      	ldr	r0, [r3, #0]
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	20000934 	.word	0x20000934

0800d8a8 <__libc_init_array>:
 800d8a8:	b570      	push	{r4, r5, r6, lr}
 800d8aa:	4d0d      	ldr	r5, [pc, #52]	; (800d8e0 <__libc_init_array+0x38>)
 800d8ac:	4c0d      	ldr	r4, [pc, #52]	; (800d8e4 <__libc_init_array+0x3c>)
 800d8ae:	1b64      	subs	r4, r4, r5
 800d8b0:	10a4      	asrs	r4, r4, #2
 800d8b2:	2600      	movs	r6, #0
 800d8b4:	42a6      	cmp	r6, r4
 800d8b6:	d109      	bne.n	800d8cc <__libc_init_array+0x24>
 800d8b8:	4d0b      	ldr	r5, [pc, #44]	; (800d8e8 <__libc_init_array+0x40>)
 800d8ba:	4c0c      	ldr	r4, [pc, #48]	; (800d8ec <__libc_init_array+0x44>)
 800d8bc:	f001 ffe6 	bl	800f88c <_init>
 800d8c0:	1b64      	subs	r4, r4, r5
 800d8c2:	10a4      	asrs	r4, r4, #2
 800d8c4:	2600      	movs	r6, #0
 800d8c6:	42a6      	cmp	r6, r4
 800d8c8:	d105      	bne.n	800d8d6 <__libc_init_array+0x2e>
 800d8ca:	bd70      	pop	{r4, r5, r6, pc}
 800d8cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8d0:	4798      	blx	r3
 800d8d2:	3601      	adds	r6, #1
 800d8d4:	e7ee      	b.n	800d8b4 <__libc_init_array+0xc>
 800d8d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8da:	4798      	blx	r3
 800d8dc:	3601      	adds	r6, #1
 800d8de:	e7f2      	b.n	800d8c6 <__libc_init_array+0x1e>
 800d8e0:	08011f04 	.word	0x08011f04
 800d8e4:	08011f04 	.word	0x08011f04
 800d8e8:	08011f04 	.word	0x08011f04
 800d8ec:	08011f08 	.word	0x08011f08

0800d8f0 <__retarget_lock_init_recursive>:
 800d8f0:	4770      	bx	lr

0800d8f2 <__retarget_lock_acquire_recursive>:
 800d8f2:	4770      	bx	lr

0800d8f4 <__retarget_lock_release_recursive>:
 800d8f4:	4770      	bx	lr

0800d8f6 <memcpy>:
 800d8f6:	440a      	add	r2, r1
 800d8f8:	4291      	cmp	r1, r2
 800d8fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8fe:	d100      	bne.n	800d902 <memcpy+0xc>
 800d900:	4770      	bx	lr
 800d902:	b510      	push	{r4, lr}
 800d904:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d908:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d90c:	4291      	cmp	r1, r2
 800d90e:	d1f9      	bne.n	800d904 <memcpy+0xe>
 800d910:	bd10      	pop	{r4, pc}

0800d912 <quorem>:
 800d912:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d916:	6903      	ldr	r3, [r0, #16]
 800d918:	690c      	ldr	r4, [r1, #16]
 800d91a:	42a3      	cmp	r3, r4
 800d91c:	4607      	mov	r7, r0
 800d91e:	db7e      	blt.n	800da1e <quorem+0x10c>
 800d920:	3c01      	subs	r4, #1
 800d922:	f101 0814 	add.w	r8, r1, #20
 800d926:	f100 0514 	add.w	r5, r0, #20
 800d92a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d92e:	9301      	str	r3, [sp, #4]
 800d930:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d934:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d938:	3301      	adds	r3, #1
 800d93a:	429a      	cmp	r2, r3
 800d93c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d940:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d944:	fbb2 f6f3 	udiv	r6, r2, r3
 800d948:	d331      	bcc.n	800d9ae <quorem+0x9c>
 800d94a:	f04f 0e00 	mov.w	lr, #0
 800d94e:	4640      	mov	r0, r8
 800d950:	46ac      	mov	ip, r5
 800d952:	46f2      	mov	sl, lr
 800d954:	f850 2b04 	ldr.w	r2, [r0], #4
 800d958:	b293      	uxth	r3, r2
 800d95a:	fb06 e303 	mla	r3, r6, r3, lr
 800d95e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d962:	0c1a      	lsrs	r2, r3, #16
 800d964:	b29b      	uxth	r3, r3
 800d966:	ebaa 0303 	sub.w	r3, sl, r3
 800d96a:	f8dc a000 	ldr.w	sl, [ip]
 800d96e:	fa13 f38a 	uxtah	r3, r3, sl
 800d972:	fb06 220e 	mla	r2, r6, lr, r2
 800d976:	9300      	str	r3, [sp, #0]
 800d978:	9b00      	ldr	r3, [sp, #0]
 800d97a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d97e:	b292      	uxth	r2, r2
 800d980:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d984:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d988:	f8bd 3000 	ldrh.w	r3, [sp]
 800d98c:	4581      	cmp	r9, r0
 800d98e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d992:	f84c 3b04 	str.w	r3, [ip], #4
 800d996:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d99a:	d2db      	bcs.n	800d954 <quorem+0x42>
 800d99c:	f855 300b 	ldr.w	r3, [r5, fp]
 800d9a0:	b92b      	cbnz	r3, 800d9ae <quorem+0x9c>
 800d9a2:	9b01      	ldr	r3, [sp, #4]
 800d9a4:	3b04      	subs	r3, #4
 800d9a6:	429d      	cmp	r5, r3
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	d32c      	bcc.n	800da06 <quorem+0xf4>
 800d9ac:	613c      	str	r4, [r7, #16]
 800d9ae:	4638      	mov	r0, r7
 800d9b0:	f001 f9a8 	bl	800ed04 <__mcmp>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	db22      	blt.n	800d9fe <quorem+0xec>
 800d9b8:	3601      	adds	r6, #1
 800d9ba:	4629      	mov	r1, r5
 800d9bc:	2000      	movs	r0, #0
 800d9be:	f858 2b04 	ldr.w	r2, [r8], #4
 800d9c2:	f8d1 c000 	ldr.w	ip, [r1]
 800d9c6:	b293      	uxth	r3, r2
 800d9c8:	1ac3      	subs	r3, r0, r3
 800d9ca:	0c12      	lsrs	r2, r2, #16
 800d9cc:	fa13 f38c 	uxtah	r3, r3, ip
 800d9d0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d9d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9de:	45c1      	cmp	r9, r8
 800d9e0:	f841 3b04 	str.w	r3, [r1], #4
 800d9e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d9e8:	d2e9      	bcs.n	800d9be <quorem+0xac>
 800d9ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9f2:	b922      	cbnz	r2, 800d9fe <quorem+0xec>
 800d9f4:	3b04      	subs	r3, #4
 800d9f6:	429d      	cmp	r5, r3
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	d30a      	bcc.n	800da12 <quorem+0x100>
 800d9fc:	613c      	str	r4, [r7, #16]
 800d9fe:	4630      	mov	r0, r6
 800da00:	b003      	add	sp, #12
 800da02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da06:	6812      	ldr	r2, [r2, #0]
 800da08:	3b04      	subs	r3, #4
 800da0a:	2a00      	cmp	r2, #0
 800da0c:	d1ce      	bne.n	800d9ac <quorem+0x9a>
 800da0e:	3c01      	subs	r4, #1
 800da10:	e7c9      	b.n	800d9a6 <quorem+0x94>
 800da12:	6812      	ldr	r2, [r2, #0]
 800da14:	3b04      	subs	r3, #4
 800da16:	2a00      	cmp	r2, #0
 800da18:	d1f0      	bne.n	800d9fc <quorem+0xea>
 800da1a:	3c01      	subs	r4, #1
 800da1c:	e7eb      	b.n	800d9f6 <quorem+0xe4>
 800da1e:	2000      	movs	r0, #0
 800da20:	e7ee      	b.n	800da00 <quorem+0xee>
 800da22:	0000      	movs	r0, r0
 800da24:	0000      	movs	r0, r0
	...

0800da28 <_dtoa_r>:
 800da28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da2c:	ed2d 8b04 	vpush	{d8-d9}
 800da30:	69c5      	ldr	r5, [r0, #28]
 800da32:	b093      	sub	sp, #76	; 0x4c
 800da34:	ed8d 0b02 	vstr	d0, [sp, #8]
 800da38:	ec57 6b10 	vmov	r6, r7, d0
 800da3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800da40:	9107      	str	r1, [sp, #28]
 800da42:	4604      	mov	r4, r0
 800da44:	920a      	str	r2, [sp, #40]	; 0x28
 800da46:	930d      	str	r3, [sp, #52]	; 0x34
 800da48:	b975      	cbnz	r5, 800da68 <_dtoa_r+0x40>
 800da4a:	2010      	movs	r0, #16
 800da4c:	f000 fe2a 	bl	800e6a4 <malloc>
 800da50:	4602      	mov	r2, r0
 800da52:	61e0      	str	r0, [r4, #28]
 800da54:	b920      	cbnz	r0, 800da60 <_dtoa_r+0x38>
 800da56:	4bae      	ldr	r3, [pc, #696]	; (800dd10 <_dtoa_r+0x2e8>)
 800da58:	21ef      	movs	r1, #239	; 0xef
 800da5a:	48ae      	ldr	r0, [pc, #696]	; (800dd14 <_dtoa_r+0x2ec>)
 800da5c:	f001 fcec 	bl	800f438 <__assert_func>
 800da60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800da64:	6005      	str	r5, [r0, #0]
 800da66:	60c5      	str	r5, [r0, #12]
 800da68:	69e3      	ldr	r3, [r4, #28]
 800da6a:	6819      	ldr	r1, [r3, #0]
 800da6c:	b151      	cbz	r1, 800da84 <_dtoa_r+0x5c>
 800da6e:	685a      	ldr	r2, [r3, #4]
 800da70:	604a      	str	r2, [r1, #4]
 800da72:	2301      	movs	r3, #1
 800da74:	4093      	lsls	r3, r2
 800da76:	608b      	str	r3, [r1, #8]
 800da78:	4620      	mov	r0, r4
 800da7a:	f000 ff07 	bl	800e88c <_Bfree>
 800da7e:	69e3      	ldr	r3, [r4, #28]
 800da80:	2200      	movs	r2, #0
 800da82:	601a      	str	r2, [r3, #0]
 800da84:	1e3b      	subs	r3, r7, #0
 800da86:	bfbb      	ittet	lt
 800da88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800da8c:	9303      	strlt	r3, [sp, #12]
 800da8e:	2300      	movge	r3, #0
 800da90:	2201      	movlt	r2, #1
 800da92:	bfac      	ite	ge
 800da94:	f8c8 3000 	strge.w	r3, [r8]
 800da98:	f8c8 2000 	strlt.w	r2, [r8]
 800da9c:	4b9e      	ldr	r3, [pc, #632]	; (800dd18 <_dtoa_r+0x2f0>)
 800da9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800daa2:	ea33 0308 	bics.w	r3, r3, r8
 800daa6:	d11b      	bne.n	800dae0 <_dtoa_r+0xb8>
 800daa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800daaa:	f242 730f 	movw	r3, #9999	; 0x270f
 800daae:	6013      	str	r3, [r2, #0]
 800dab0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dab4:	4333      	orrs	r3, r6
 800dab6:	f000 8593 	beq.w	800e5e0 <_dtoa_r+0xbb8>
 800daba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dabc:	b963      	cbnz	r3, 800dad8 <_dtoa_r+0xb0>
 800dabe:	4b97      	ldr	r3, [pc, #604]	; (800dd1c <_dtoa_r+0x2f4>)
 800dac0:	e027      	b.n	800db12 <_dtoa_r+0xea>
 800dac2:	4b97      	ldr	r3, [pc, #604]	; (800dd20 <_dtoa_r+0x2f8>)
 800dac4:	9300      	str	r3, [sp, #0]
 800dac6:	3308      	adds	r3, #8
 800dac8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800daca:	6013      	str	r3, [r2, #0]
 800dacc:	9800      	ldr	r0, [sp, #0]
 800dace:	b013      	add	sp, #76	; 0x4c
 800dad0:	ecbd 8b04 	vpop	{d8-d9}
 800dad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dad8:	4b90      	ldr	r3, [pc, #576]	; (800dd1c <_dtoa_r+0x2f4>)
 800dada:	9300      	str	r3, [sp, #0]
 800dadc:	3303      	adds	r3, #3
 800dade:	e7f3      	b.n	800dac8 <_dtoa_r+0xa0>
 800dae0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dae4:	2200      	movs	r2, #0
 800dae6:	ec51 0b17 	vmov	r0, r1, d7
 800daea:	eeb0 8a47 	vmov.f32	s16, s14
 800daee:	eef0 8a67 	vmov.f32	s17, s15
 800daf2:	2300      	movs	r3, #0
 800daf4:	f7f3 f800 	bl	8000af8 <__aeabi_dcmpeq>
 800daf8:	4681      	mov	r9, r0
 800dafa:	b160      	cbz	r0, 800db16 <_dtoa_r+0xee>
 800dafc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dafe:	2301      	movs	r3, #1
 800db00:	6013      	str	r3, [r2, #0]
 800db02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db04:	2b00      	cmp	r3, #0
 800db06:	f000 8568 	beq.w	800e5da <_dtoa_r+0xbb2>
 800db0a:	4b86      	ldr	r3, [pc, #536]	; (800dd24 <_dtoa_r+0x2fc>)
 800db0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db0e:	6013      	str	r3, [r2, #0]
 800db10:	3b01      	subs	r3, #1
 800db12:	9300      	str	r3, [sp, #0]
 800db14:	e7da      	b.n	800dacc <_dtoa_r+0xa4>
 800db16:	aa10      	add	r2, sp, #64	; 0x40
 800db18:	a911      	add	r1, sp, #68	; 0x44
 800db1a:	4620      	mov	r0, r4
 800db1c:	eeb0 0a48 	vmov.f32	s0, s16
 800db20:	eef0 0a68 	vmov.f32	s1, s17
 800db24:	f001 f994 	bl	800ee50 <__d2b>
 800db28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800db2c:	4682      	mov	sl, r0
 800db2e:	2d00      	cmp	r5, #0
 800db30:	d07f      	beq.n	800dc32 <_dtoa_r+0x20a>
 800db32:	ee18 3a90 	vmov	r3, s17
 800db36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800db3e:	ec51 0b18 	vmov	r0, r1, d8
 800db42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800db46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800db4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800db4e:	4619      	mov	r1, r3
 800db50:	2200      	movs	r2, #0
 800db52:	4b75      	ldr	r3, [pc, #468]	; (800dd28 <_dtoa_r+0x300>)
 800db54:	f7f2 fbb0 	bl	80002b8 <__aeabi_dsub>
 800db58:	a367      	add	r3, pc, #412	; (adr r3, 800dcf8 <_dtoa_r+0x2d0>)
 800db5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5e:	f7f2 fd63 	bl	8000628 <__aeabi_dmul>
 800db62:	a367      	add	r3, pc, #412	; (adr r3, 800dd00 <_dtoa_r+0x2d8>)
 800db64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db68:	f7f2 fba8 	bl	80002bc <__adddf3>
 800db6c:	4606      	mov	r6, r0
 800db6e:	4628      	mov	r0, r5
 800db70:	460f      	mov	r7, r1
 800db72:	f7f2 fcef 	bl	8000554 <__aeabi_i2d>
 800db76:	a364      	add	r3, pc, #400	; (adr r3, 800dd08 <_dtoa_r+0x2e0>)
 800db78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7c:	f7f2 fd54 	bl	8000628 <__aeabi_dmul>
 800db80:	4602      	mov	r2, r0
 800db82:	460b      	mov	r3, r1
 800db84:	4630      	mov	r0, r6
 800db86:	4639      	mov	r1, r7
 800db88:	f7f2 fb98 	bl	80002bc <__adddf3>
 800db8c:	4606      	mov	r6, r0
 800db8e:	460f      	mov	r7, r1
 800db90:	f7f2 fffa 	bl	8000b88 <__aeabi_d2iz>
 800db94:	2200      	movs	r2, #0
 800db96:	4683      	mov	fp, r0
 800db98:	2300      	movs	r3, #0
 800db9a:	4630      	mov	r0, r6
 800db9c:	4639      	mov	r1, r7
 800db9e:	f7f2 ffb5 	bl	8000b0c <__aeabi_dcmplt>
 800dba2:	b148      	cbz	r0, 800dbb8 <_dtoa_r+0x190>
 800dba4:	4658      	mov	r0, fp
 800dba6:	f7f2 fcd5 	bl	8000554 <__aeabi_i2d>
 800dbaa:	4632      	mov	r2, r6
 800dbac:	463b      	mov	r3, r7
 800dbae:	f7f2 ffa3 	bl	8000af8 <__aeabi_dcmpeq>
 800dbb2:	b908      	cbnz	r0, 800dbb8 <_dtoa_r+0x190>
 800dbb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dbb8:	f1bb 0f16 	cmp.w	fp, #22
 800dbbc:	d857      	bhi.n	800dc6e <_dtoa_r+0x246>
 800dbbe:	4b5b      	ldr	r3, [pc, #364]	; (800dd2c <_dtoa_r+0x304>)
 800dbc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	ec51 0b18 	vmov	r0, r1, d8
 800dbcc:	f7f2 ff9e 	bl	8000b0c <__aeabi_dcmplt>
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d04e      	beq.n	800dc72 <_dtoa_r+0x24a>
 800dbd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dbd8:	2300      	movs	r3, #0
 800dbda:	930c      	str	r3, [sp, #48]	; 0x30
 800dbdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbde:	1b5b      	subs	r3, r3, r5
 800dbe0:	1e5a      	subs	r2, r3, #1
 800dbe2:	bf45      	ittet	mi
 800dbe4:	f1c3 0301 	rsbmi	r3, r3, #1
 800dbe8:	9305      	strmi	r3, [sp, #20]
 800dbea:	2300      	movpl	r3, #0
 800dbec:	2300      	movmi	r3, #0
 800dbee:	9206      	str	r2, [sp, #24]
 800dbf0:	bf54      	ite	pl
 800dbf2:	9305      	strpl	r3, [sp, #20]
 800dbf4:	9306      	strmi	r3, [sp, #24]
 800dbf6:	f1bb 0f00 	cmp.w	fp, #0
 800dbfa:	db3c      	blt.n	800dc76 <_dtoa_r+0x24e>
 800dbfc:	9b06      	ldr	r3, [sp, #24]
 800dbfe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800dc02:	445b      	add	r3, fp
 800dc04:	9306      	str	r3, [sp, #24]
 800dc06:	2300      	movs	r3, #0
 800dc08:	9308      	str	r3, [sp, #32]
 800dc0a:	9b07      	ldr	r3, [sp, #28]
 800dc0c:	2b09      	cmp	r3, #9
 800dc0e:	d868      	bhi.n	800dce2 <_dtoa_r+0x2ba>
 800dc10:	2b05      	cmp	r3, #5
 800dc12:	bfc4      	itt	gt
 800dc14:	3b04      	subgt	r3, #4
 800dc16:	9307      	strgt	r3, [sp, #28]
 800dc18:	9b07      	ldr	r3, [sp, #28]
 800dc1a:	f1a3 0302 	sub.w	r3, r3, #2
 800dc1e:	bfcc      	ite	gt
 800dc20:	2500      	movgt	r5, #0
 800dc22:	2501      	movle	r5, #1
 800dc24:	2b03      	cmp	r3, #3
 800dc26:	f200 8085 	bhi.w	800dd34 <_dtoa_r+0x30c>
 800dc2a:	e8df f003 	tbb	[pc, r3]
 800dc2e:	3b2e      	.short	0x3b2e
 800dc30:	5839      	.short	0x5839
 800dc32:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dc36:	441d      	add	r5, r3
 800dc38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dc3c:	2b20      	cmp	r3, #32
 800dc3e:	bfc1      	itttt	gt
 800dc40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dc44:	fa08 f803 	lslgt.w	r8, r8, r3
 800dc48:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800dc4c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dc50:	bfd6      	itet	le
 800dc52:	f1c3 0320 	rsble	r3, r3, #32
 800dc56:	ea48 0003 	orrgt.w	r0, r8, r3
 800dc5a:	fa06 f003 	lslle.w	r0, r6, r3
 800dc5e:	f7f2 fc69 	bl	8000534 <__aeabi_ui2d>
 800dc62:	2201      	movs	r2, #1
 800dc64:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800dc68:	3d01      	subs	r5, #1
 800dc6a:	920e      	str	r2, [sp, #56]	; 0x38
 800dc6c:	e76f      	b.n	800db4e <_dtoa_r+0x126>
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e7b3      	b.n	800dbda <_dtoa_r+0x1b2>
 800dc72:	900c      	str	r0, [sp, #48]	; 0x30
 800dc74:	e7b2      	b.n	800dbdc <_dtoa_r+0x1b4>
 800dc76:	9b05      	ldr	r3, [sp, #20]
 800dc78:	eba3 030b 	sub.w	r3, r3, fp
 800dc7c:	9305      	str	r3, [sp, #20]
 800dc7e:	f1cb 0300 	rsb	r3, fp, #0
 800dc82:	9308      	str	r3, [sp, #32]
 800dc84:	2300      	movs	r3, #0
 800dc86:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc88:	e7bf      	b.n	800dc0a <_dtoa_r+0x1e2>
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	dc52      	bgt.n	800dd3a <_dtoa_r+0x312>
 800dc94:	2301      	movs	r3, #1
 800dc96:	9301      	str	r3, [sp, #4]
 800dc98:	9304      	str	r3, [sp, #16]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	920a      	str	r2, [sp, #40]	; 0x28
 800dc9e:	e00b      	b.n	800dcb8 <_dtoa_r+0x290>
 800dca0:	2301      	movs	r3, #1
 800dca2:	e7f3      	b.n	800dc8c <_dtoa_r+0x264>
 800dca4:	2300      	movs	r3, #0
 800dca6:	9309      	str	r3, [sp, #36]	; 0x24
 800dca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcaa:	445b      	add	r3, fp
 800dcac:	9301      	str	r3, [sp, #4]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	9304      	str	r3, [sp, #16]
 800dcb4:	bfb8      	it	lt
 800dcb6:	2301      	movlt	r3, #1
 800dcb8:	69e0      	ldr	r0, [r4, #28]
 800dcba:	2100      	movs	r1, #0
 800dcbc:	2204      	movs	r2, #4
 800dcbe:	f102 0614 	add.w	r6, r2, #20
 800dcc2:	429e      	cmp	r6, r3
 800dcc4:	d93d      	bls.n	800dd42 <_dtoa_r+0x31a>
 800dcc6:	6041      	str	r1, [r0, #4]
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f000 fd9f 	bl	800e80c <_Balloc>
 800dcce:	9000      	str	r0, [sp, #0]
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	d139      	bne.n	800dd48 <_dtoa_r+0x320>
 800dcd4:	4b16      	ldr	r3, [pc, #88]	; (800dd30 <_dtoa_r+0x308>)
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	f240 11af 	movw	r1, #431	; 0x1af
 800dcdc:	e6bd      	b.n	800da5a <_dtoa_r+0x32>
 800dcde:	2301      	movs	r3, #1
 800dce0:	e7e1      	b.n	800dca6 <_dtoa_r+0x27e>
 800dce2:	2501      	movs	r5, #1
 800dce4:	2300      	movs	r3, #0
 800dce6:	9307      	str	r3, [sp, #28]
 800dce8:	9509      	str	r5, [sp, #36]	; 0x24
 800dcea:	f04f 33ff 	mov.w	r3, #4294967295
 800dcee:	9301      	str	r3, [sp, #4]
 800dcf0:	9304      	str	r3, [sp, #16]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	2312      	movs	r3, #18
 800dcf6:	e7d1      	b.n	800dc9c <_dtoa_r+0x274>
 800dcf8:	636f4361 	.word	0x636f4361
 800dcfc:	3fd287a7 	.word	0x3fd287a7
 800dd00:	8b60c8b3 	.word	0x8b60c8b3
 800dd04:	3fc68a28 	.word	0x3fc68a28
 800dd08:	509f79fb 	.word	0x509f79fb
 800dd0c:	3fd34413 	.word	0x3fd34413
 800dd10:	08011bcd 	.word	0x08011bcd
 800dd14:	08011be4 	.word	0x08011be4
 800dd18:	7ff00000 	.word	0x7ff00000
 800dd1c:	08011bc9 	.word	0x08011bc9
 800dd20:	08011bc0 	.word	0x08011bc0
 800dd24:	08011b9d 	.word	0x08011b9d
 800dd28:	3ff80000 	.word	0x3ff80000
 800dd2c:	08011cd0 	.word	0x08011cd0
 800dd30:	08011c3c 	.word	0x08011c3c
 800dd34:	2301      	movs	r3, #1
 800dd36:	9309      	str	r3, [sp, #36]	; 0x24
 800dd38:	e7d7      	b.n	800dcea <_dtoa_r+0x2c2>
 800dd3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd3c:	9301      	str	r3, [sp, #4]
 800dd3e:	9304      	str	r3, [sp, #16]
 800dd40:	e7ba      	b.n	800dcb8 <_dtoa_r+0x290>
 800dd42:	3101      	adds	r1, #1
 800dd44:	0052      	lsls	r2, r2, #1
 800dd46:	e7ba      	b.n	800dcbe <_dtoa_r+0x296>
 800dd48:	69e3      	ldr	r3, [r4, #28]
 800dd4a:	9a00      	ldr	r2, [sp, #0]
 800dd4c:	601a      	str	r2, [r3, #0]
 800dd4e:	9b04      	ldr	r3, [sp, #16]
 800dd50:	2b0e      	cmp	r3, #14
 800dd52:	f200 80a8 	bhi.w	800dea6 <_dtoa_r+0x47e>
 800dd56:	2d00      	cmp	r5, #0
 800dd58:	f000 80a5 	beq.w	800dea6 <_dtoa_r+0x47e>
 800dd5c:	f1bb 0f00 	cmp.w	fp, #0
 800dd60:	dd38      	ble.n	800ddd4 <_dtoa_r+0x3ac>
 800dd62:	4bc0      	ldr	r3, [pc, #768]	; (800e064 <_dtoa_r+0x63c>)
 800dd64:	f00b 020f 	and.w	r2, fp, #15
 800dd68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dd70:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dd74:	ea4f 182b 	mov.w	r8, fp, asr #4
 800dd78:	d019      	beq.n	800ddae <_dtoa_r+0x386>
 800dd7a:	4bbb      	ldr	r3, [pc, #748]	; (800e068 <_dtoa_r+0x640>)
 800dd7c:	ec51 0b18 	vmov	r0, r1, d8
 800dd80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dd84:	f7f2 fd7a 	bl	800087c <__aeabi_ddiv>
 800dd88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd8c:	f008 080f 	and.w	r8, r8, #15
 800dd90:	2503      	movs	r5, #3
 800dd92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e068 <_dtoa_r+0x640>
 800dd96:	f1b8 0f00 	cmp.w	r8, #0
 800dd9a:	d10a      	bne.n	800ddb2 <_dtoa_r+0x38a>
 800dd9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dda0:	4632      	mov	r2, r6
 800dda2:	463b      	mov	r3, r7
 800dda4:	f7f2 fd6a 	bl	800087c <__aeabi_ddiv>
 800dda8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddac:	e02b      	b.n	800de06 <_dtoa_r+0x3de>
 800ddae:	2502      	movs	r5, #2
 800ddb0:	e7ef      	b.n	800dd92 <_dtoa_r+0x36a>
 800ddb2:	f018 0f01 	tst.w	r8, #1
 800ddb6:	d008      	beq.n	800ddca <_dtoa_r+0x3a2>
 800ddb8:	4630      	mov	r0, r6
 800ddba:	4639      	mov	r1, r7
 800ddbc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ddc0:	f7f2 fc32 	bl	8000628 <__aeabi_dmul>
 800ddc4:	3501      	adds	r5, #1
 800ddc6:	4606      	mov	r6, r0
 800ddc8:	460f      	mov	r7, r1
 800ddca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ddce:	f109 0908 	add.w	r9, r9, #8
 800ddd2:	e7e0      	b.n	800dd96 <_dtoa_r+0x36e>
 800ddd4:	f000 809f 	beq.w	800df16 <_dtoa_r+0x4ee>
 800ddd8:	f1cb 0600 	rsb	r6, fp, #0
 800dddc:	4ba1      	ldr	r3, [pc, #644]	; (800e064 <_dtoa_r+0x63c>)
 800ddde:	4fa2      	ldr	r7, [pc, #648]	; (800e068 <_dtoa_r+0x640>)
 800dde0:	f006 020f 	and.w	r2, r6, #15
 800dde4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddec:	ec51 0b18 	vmov	r0, r1, d8
 800ddf0:	f7f2 fc1a 	bl	8000628 <__aeabi_dmul>
 800ddf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddf8:	1136      	asrs	r6, r6, #4
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	2502      	movs	r5, #2
 800ddfe:	2e00      	cmp	r6, #0
 800de00:	d17e      	bne.n	800df00 <_dtoa_r+0x4d8>
 800de02:	2b00      	cmp	r3, #0
 800de04:	d1d0      	bne.n	800dda8 <_dtoa_r+0x380>
 800de06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	f000 8084 	beq.w	800df1a <_dtoa_r+0x4f2>
 800de12:	4b96      	ldr	r3, [pc, #600]	; (800e06c <_dtoa_r+0x644>)
 800de14:	2200      	movs	r2, #0
 800de16:	4640      	mov	r0, r8
 800de18:	4649      	mov	r1, r9
 800de1a:	f7f2 fe77 	bl	8000b0c <__aeabi_dcmplt>
 800de1e:	2800      	cmp	r0, #0
 800de20:	d07b      	beq.n	800df1a <_dtoa_r+0x4f2>
 800de22:	9b04      	ldr	r3, [sp, #16]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d078      	beq.n	800df1a <_dtoa_r+0x4f2>
 800de28:	9b01      	ldr	r3, [sp, #4]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	dd39      	ble.n	800dea2 <_dtoa_r+0x47a>
 800de2e:	4b90      	ldr	r3, [pc, #576]	; (800e070 <_dtoa_r+0x648>)
 800de30:	2200      	movs	r2, #0
 800de32:	4640      	mov	r0, r8
 800de34:	4649      	mov	r1, r9
 800de36:	f7f2 fbf7 	bl	8000628 <__aeabi_dmul>
 800de3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de3e:	9e01      	ldr	r6, [sp, #4]
 800de40:	f10b 37ff 	add.w	r7, fp, #4294967295
 800de44:	3501      	adds	r5, #1
 800de46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800de4a:	4628      	mov	r0, r5
 800de4c:	f7f2 fb82 	bl	8000554 <__aeabi_i2d>
 800de50:	4642      	mov	r2, r8
 800de52:	464b      	mov	r3, r9
 800de54:	f7f2 fbe8 	bl	8000628 <__aeabi_dmul>
 800de58:	4b86      	ldr	r3, [pc, #536]	; (800e074 <_dtoa_r+0x64c>)
 800de5a:	2200      	movs	r2, #0
 800de5c:	f7f2 fa2e 	bl	80002bc <__adddf3>
 800de60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800de64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de68:	9303      	str	r3, [sp, #12]
 800de6a:	2e00      	cmp	r6, #0
 800de6c:	d158      	bne.n	800df20 <_dtoa_r+0x4f8>
 800de6e:	4b82      	ldr	r3, [pc, #520]	; (800e078 <_dtoa_r+0x650>)
 800de70:	2200      	movs	r2, #0
 800de72:	4640      	mov	r0, r8
 800de74:	4649      	mov	r1, r9
 800de76:	f7f2 fa1f 	bl	80002b8 <__aeabi_dsub>
 800de7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de7e:	4680      	mov	r8, r0
 800de80:	4689      	mov	r9, r1
 800de82:	f7f2 fe61 	bl	8000b48 <__aeabi_dcmpgt>
 800de86:	2800      	cmp	r0, #0
 800de88:	f040 8296 	bne.w	800e3b8 <_dtoa_r+0x990>
 800de8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800de90:	4640      	mov	r0, r8
 800de92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de96:	4649      	mov	r1, r9
 800de98:	f7f2 fe38 	bl	8000b0c <__aeabi_dcmplt>
 800de9c:	2800      	cmp	r0, #0
 800de9e:	f040 8289 	bne.w	800e3b4 <_dtoa_r+0x98c>
 800dea2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dea6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f2c0 814e 	blt.w	800e14a <_dtoa_r+0x722>
 800deae:	f1bb 0f0e 	cmp.w	fp, #14
 800deb2:	f300 814a 	bgt.w	800e14a <_dtoa_r+0x722>
 800deb6:	4b6b      	ldr	r3, [pc, #428]	; (800e064 <_dtoa_r+0x63c>)
 800deb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800debc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	f280 80dc 	bge.w	800e080 <_dtoa_r+0x658>
 800dec8:	9b04      	ldr	r3, [sp, #16]
 800deca:	2b00      	cmp	r3, #0
 800decc:	f300 80d8 	bgt.w	800e080 <_dtoa_r+0x658>
 800ded0:	f040 826f 	bne.w	800e3b2 <_dtoa_r+0x98a>
 800ded4:	4b68      	ldr	r3, [pc, #416]	; (800e078 <_dtoa_r+0x650>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	4640      	mov	r0, r8
 800deda:	4649      	mov	r1, r9
 800dedc:	f7f2 fba4 	bl	8000628 <__aeabi_dmul>
 800dee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dee4:	f7f2 fe26 	bl	8000b34 <__aeabi_dcmpge>
 800dee8:	9e04      	ldr	r6, [sp, #16]
 800deea:	4637      	mov	r7, r6
 800deec:	2800      	cmp	r0, #0
 800deee:	f040 8245 	bne.w	800e37c <_dtoa_r+0x954>
 800def2:	9d00      	ldr	r5, [sp, #0]
 800def4:	2331      	movs	r3, #49	; 0x31
 800def6:	f805 3b01 	strb.w	r3, [r5], #1
 800defa:	f10b 0b01 	add.w	fp, fp, #1
 800defe:	e241      	b.n	800e384 <_dtoa_r+0x95c>
 800df00:	07f2      	lsls	r2, r6, #31
 800df02:	d505      	bpl.n	800df10 <_dtoa_r+0x4e8>
 800df04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df08:	f7f2 fb8e 	bl	8000628 <__aeabi_dmul>
 800df0c:	3501      	adds	r5, #1
 800df0e:	2301      	movs	r3, #1
 800df10:	1076      	asrs	r6, r6, #1
 800df12:	3708      	adds	r7, #8
 800df14:	e773      	b.n	800ddfe <_dtoa_r+0x3d6>
 800df16:	2502      	movs	r5, #2
 800df18:	e775      	b.n	800de06 <_dtoa_r+0x3de>
 800df1a:	9e04      	ldr	r6, [sp, #16]
 800df1c:	465f      	mov	r7, fp
 800df1e:	e792      	b.n	800de46 <_dtoa_r+0x41e>
 800df20:	9900      	ldr	r1, [sp, #0]
 800df22:	4b50      	ldr	r3, [pc, #320]	; (800e064 <_dtoa_r+0x63c>)
 800df24:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df28:	4431      	add	r1, r6
 800df2a:	9102      	str	r1, [sp, #8]
 800df2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df2e:	eeb0 9a47 	vmov.f32	s18, s14
 800df32:	eef0 9a67 	vmov.f32	s19, s15
 800df36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800df3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800df3e:	2900      	cmp	r1, #0
 800df40:	d044      	beq.n	800dfcc <_dtoa_r+0x5a4>
 800df42:	494e      	ldr	r1, [pc, #312]	; (800e07c <_dtoa_r+0x654>)
 800df44:	2000      	movs	r0, #0
 800df46:	f7f2 fc99 	bl	800087c <__aeabi_ddiv>
 800df4a:	ec53 2b19 	vmov	r2, r3, d9
 800df4e:	f7f2 f9b3 	bl	80002b8 <__aeabi_dsub>
 800df52:	9d00      	ldr	r5, [sp, #0]
 800df54:	ec41 0b19 	vmov	d9, r0, r1
 800df58:	4649      	mov	r1, r9
 800df5a:	4640      	mov	r0, r8
 800df5c:	f7f2 fe14 	bl	8000b88 <__aeabi_d2iz>
 800df60:	4606      	mov	r6, r0
 800df62:	f7f2 faf7 	bl	8000554 <__aeabi_i2d>
 800df66:	4602      	mov	r2, r0
 800df68:	460b      	mov	r3, r1
 800df6a:	4640      	mov	r0, r8
 800df6c:	4649      	mov	r1, r9
 800df6e:	f7f2 f9a3 	bl	80002b8 <__aeabi_dsub>
 800df72:	3630      	adds	r6, #48	; 0x30
 800df74:	f805 6b01 	strb.w	r6, [r5], #1
 800df78:	ec53 2b19 	vmov	r2, r3, d9
 800df7c:	4680      	mov	r8, r0
 800df7e:	4689      	mov	r9, r1
 800df80:	f7f2 fdc4 	bl	8000b0c <__aeabi_dcmplt>
 800df84:	2800      	cmp	r0, #0
 800df86:	d164      	bne.n	800e052 <_dtoa_r+0x62a>
 800df88:	4642      	mov	r2, r8
 800df8a:	464b      	mov	r3, r9
 800df8c:	4937      	ldr	r1, [pc, #220]	; (800e06c <_dtoa_r+0x644>)
 800df8e:	2000      	movs	r0, #0
 800df90:	f7f2 f992 	bl	80002b8 <__aeabi_dsub>
 800df94:	ec53 2b19 	vmov	r2, r3, d9
 800df98:	f7f2 fdb8 	bl	8000b0c <__aeabi_dcmplt>
 800df9c:	2800      	cmp	r0, #0
 800df9e:	f040 80b6 	bne.w	800e10e <_dtoa_r+0x6e6>
 800dfa2:	9b02      	ldr	r3, [sp, #8]
 800dfa4:	429d      	cmp	r5, r3
 800dfa6:	f43f af7c 	beq.w	800dea2 <_dtoa_r+0x47a>
 800dfaa:	4b31      	ldr	r3, [pc, #196]	; (800e070 <_dtoa_r+0x648>)
 800dfac:	ec51 0b19 	vmov	r0, r1, d9
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f7f2 fb39 	bl	8000628 <__aeabi_dmul>
 800dfb6:	4b2e      	ldr	r3, [pc, #184]	; (800e070 <_dtoa_r+0x648>)
 800dfb8:	ec41 0b19 	vmov	d9, r0, r1
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	4640      	mov	r0, r8
 800dfc0:	4649      	mov	r1, r9
 800dfc2:	f7f2 fb31 	bl	8000628 <__aeabi_dmul>
 800dfc6:	4680      	mov	r8, r0
 800dfc8:	4689      	mov	r9, r1
 800dfca:	e7c5      	b.n	800df58 <_dtoa_r+0x530>
 800dfcc:	ec51 0b17 	vmov	r0, r1, d7
 800dfd0:	f7f2 fb2a 	bl	8000628 <__aeabi_dmul>
 800dfd4:	9b02      	ldr	r3, [sp, #8]
 800dfd6:	9d00      	ldr	r5, [sp, #0]
 800dfd8:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfda:	ec41 0b19 	vmov	d9, r0, r1
 800dfde:	4649      	mov	r1, r9
 800dfe0:	4640      	mov	r0, r8
 800dfe2:	f7f2 fdd1 	bl	8000b88 <__aeabi_d2iz>
 800dfe6:	4606      	mov	r6, r0
 800dfe8:	f7f2 fab4 	bl	8000554 <__aeabi_i2d>
 800dfec:	3630      	adds	r6, #48	; 0x30
 800dfee:	4602      	mov	r2, r0
 800dff0:	460b      	mov	r3, r1
 800dff2:	4640      	mov	r0, r8
 800dff4:	4649      	mov	r1, r9
 800dff6:	f7f2 f95f 	bl	80002b8 <__aeabi_dsub>
 800dffa:	f805 6b01 	strb.w	r6, [r5], #1
 800dffe:	9b02      	ldr	r3, [sp, #8]
 800e000:	429d      	cmp	r5, r3
 800e002:	4680      	mov	r8, r0
 800e004:	4689      	mov	r9, r1
 800e006:	f04f 0200 	mov.w	r2, #0
 800e00a:	d124      	bne.n	800e056 <_dtoa_r+0x62e>
 800e00c:	4b1b      	ldr	r3, [pc, #108]	; (800e07c <_dtoa_r+0x654>)
 800e00e:	ec51 0b19 	vmov	r0, r1, d9
 800e012:	f7f2 f953 	bl	80002bc <__adddf3>
 800e016:	4602      	mov	r2, r0
 800e018:	460b      	mov	r3, r1
 800e01a:	4640      	mov	r0, r8
 800e01c:	4649      	mov	r1, r9
 800e01e:	f7f2 fd93 	bl	8000b48 <__aeabi_dcmpgt>
 800e022:	2800      	cmp	r0, #0
 800e024:	d173      	bne.n	800e10e <_dtoa_r+0x6e6>
 800e026:	ec53 2b19 	vmov	r2, r3, d9
 800e02a:	4914      	ldr	r1, [pc, #80]	; (800e07c <_dtoa_r+0x654>)
 800e02c:	2000      	movs	r0, #0
 800e02e:	f7f2 f943 	bl	80002b8 <__aeabi_dsub>
 800e032:	4602      	mov	r2, r0
 800e034:	460b      	mov	r3, r1
 800e036:	4640      	mov	r0, r8
 800e038:	4649      	mov	r1, r9
 800e03a:	f7f2 fd67 	bl	8000b0c <__aeabi_dcmplt>
 800e03e:	2800      	cmp	r0, #0
 800e040:	f43f af2f 	beq.w	800dea2 <_dtoa_r+0x47a>
 800e044:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e046:	1e6b      	subs	r3, r5, #1
 800e048:	930f      	str	r3, [sp, #60]	; 0x3c
 800e04a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e04e:	2b30      	cmp	r3, #48	; 0x30
 800e050:	d0f8      	beq.n	800e044 <_dtoa_r+0x61c>
 800e052:	46bb      	mov	fp, r7
 800e054:	e04a      	b.n	800e0ec <_dtoa_r+0x6c4>
 800e056:	4b06      	ldr	r3, [pc, #24]	; (800e070 <_dtoa_r+0x648>)
 800e058:	f7f2 fae6 	bl	8000628 <__aeabi_dmul>
 800e05c:	4680      	mov	r8, r0
 800e05e:	4689      	mov	r9, r1
 800e060:	e7bd      	b.n	800dfde <_dtoa_r+0x5b6>
 800e062:	bf00      	nop
 800e064:	08011cd0 	.word	0x08011cd0
 800e068:	08011ca8 	.word	0x08011ca8
 800e06c:	3ff00000 	.word	0x3ff00000
 800e070:	40240000 	.word	0x40240000
 800e074:	401c0000 	.word	0x401c0000
 800e078:	40140000 	.word	0x40140000
 800e07c:	3fe00000 	.word	0x3fe00000
 800e080:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e084:	9d00      	ldr	r5, [sp, #0]
 800e086:	4642      	mov	r2, r8
 800e088:	464b      	mov	r3, r9
 800e08a:	4630      	mov	r0, r6
 800e08c:	4639      	mov	r1, r7
 800e08e:	f7f2 fbf5 	bl	800087c <__aeabi_ddiv>
 800e092:	f7f2 fd79 	bl	8000b88 <__aeabi_d2iz>
 800e096:	9001      	str	r0, [sp, #4]
 800e098:	f7f2 fa5c 	bl	8000554 <__aeabi_i2d>
 800e09c:	4642      	mov	r2, r8
 800e09e:	464b      	mov	r3, r9
 800e0a0:	f7f2 fac2 	bl	8000628 <__aeabi_dmul>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	4639      	mov	r1, r7
 800e0ac:	f7f2 f904 	bl	80002b8 <__aeabi_dsub>
 800e0b0:	9e01      	ldr	r6, [sp, #4]
 800e0b2:	9f04      	ldr	r7, [sp, #16]
 800e0b4:	3630      	adds	r6, #48	; 0x30
 800e0b6:	f805 6b01 	strb.w	r6, [r5], #1
 800e0ba:	9e00      	ldr	r6, [sp, #0]
 800e0bc:	1bae      	subs	r6, r5, r6
 800e0be:	42b7      	cmp	r7, r6
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	d134      	bne.n	800e130 <_dtoa_r+0x708>
 800e0c6:	f7f2 f8f9 	bl	80002bc <__adddf3>
 800e0ca:	4642      	mov	r2, r8
 800e0cc:	464b      	mov	r3, r9
 800e0ce:	4606      	mov	r6, r0
 800e0d0:	460f      	mov	r7, r1
 800e0d2:	f7f2 fd39 	bl	8000b48 <__aeabi_dcmpgt>
 800e0d6:	b9c8      	cbnz	r0, 800e10c <_dtoa_r+0x6e4>
 800e0d8:	4642      	mov	r2, r8
 800e0da:	464b      	mov	r3, r9
 800e0dc:	4630      	mov	r0, r6
 800e0de:	4639      	mov	r1, r7
 800e0e0:	f7f2 fd0a 	bl	8000af8 <__aeabi_dcmpeq>
 800e0e4:	b110      	cbz	r0, 800e0ec <_dtoa_r+0x6c4>
 800e0e6:	9b01      	ldr	r3, [sp, #4]
 800e0e8:	07db      	lsls	r3, r3, #31
 800e0ea:	d40f      	bmi.n	800e10c <_dtoa_r+0x6e4>
 800e0ec:	4651      	mov	r1, sl
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f000 fbcc 	bl	800e88c <_Bfree>
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e0f8:	702b      	strb	r3, [r5, #0]
 800e0fa:	f10b 0301 	add.w	r3, fp, #1
 800e0fe:	6013      	str	r3, [r2, #0]
 800e100:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e102:	2b00      	cmp	r3, #0
 800e104:	f43f ace2 	beq.w	800dacc <_dtoa_r+0xa4>
 800e108:	601d      	str	r5, [r3, #0]
 800e10a:	e4df      	b.n	800dacc <_dtoa_r+0xa4>
 800e10c:	465f      	mov	r7, fp
 800e10e:	462b      	mov	r3, r5
 800e110:	461d      	mov	r5, r3
 800e112:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e116:	2a39      	cmp	r2, #57	; 0x39
 800e118:	d106      	bne.n	800e128 <_dtoa_r+0x700>
 800e11a:	9a00      	ldr	r2, [sp, #0]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d1f7      	bne.n	800e110 <_dtoa_r+0x6e8>
 800e120:	9900      	ldr	r1, [sp, #0]
 800e122:	2230      	movs	r2, #48	; 0x30
 800e124:	3701      	adds	r7, #1
 800e126:	700a      	strb	r2, [r1, #0]
 800e128:	781a      	ldrb	r2, [r3, #0]
 800e12a:	3201      	adds	r2, #1
 800e12c:	701a      	strb	r2, [r3, #0]
 800e12e:	e790      	b.n	800e052 <_dtoa_r+0x62a>
 800e130:	4ba3      	ldr	r3, [pc, #652]	; (800e3c0 <_dtoa_r+0x998>)
 800e132:	2200      	movs	r2, #0
 800e134:	f7f2 fa78 	bl	8000628 <__aeabi_dmul>
 800e138:	2200      	movs	r2, #0
 800e13a:	2300      	movs	r3, #0
 800e13c:	4606      	mov	r6, r0
 800e13e:	460f      	mov	r7, r1
 800e140:	f7f2 fcda 	bl	8000af8 <__aeabi_dcmpeq>
 800e144:	2800      	cmp	r0, #0
 800e146:	d09e      	beq.n	800e086 <_dtoa_r+0x65e>
 800e148:	e7d0      	b.n	800e0ec <_dtoa_r+0x6c4>
 800e14a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e14c:	2a00      	cmp	r2, #0
 800e14e:	f000 80ca 	beq.w	800e2e6 <_dtoa_r+0x8be>
 800e152:	9a07      	ldr	r2, [sp, #28]
 800e154:	2a01      	cmp	r2, #1
 800e156:	f300 80ad 	bgt.w	800e2b4 <_dtoa_r+0x88c>
 800e15a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e15c:	2a00      	cmp	r2, #0
 800e15e:	f000 80a5 	beq.w	800e2ac <_dtoa_r+0x884>
 800e162:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e166:	9e08      	ldr	r6, [sp, #32]
 800e168:	9d05      	ldr	r5, [sp, #20]
 800e16a:	9a05      	ldr	r2, [sp, #20]
 800e16c:	441a      	add	r2, r3
 800e16e:	9205      	str	r2, [sp, #20]
 800e170:	9a06      	ldr	r2, [sp, #24]
 800e172:	2101      	movs	r1, #1
 800e174:	441a      	add	r2, r3
 800e176:	4620      	mov	r0, r4
 800e178:	9206      	str	r2, [sp, #24]
 800e17a:	f000 fc3d 	bl	800e9f8 <__i2b>
 800e17e:	4607      	mov	r7, r0
 800e180:	b165      	cbz	r5, 800e19c <_dtoa_r+0x774>
 800e182:	9b06      	ldr	r3, [sp, #24]
 800e184:	2b00      	cmp	r3, #0
 800e186:	dd09      	ble.n	800e19c <_dtoa_r+0x774>
 800e188:	42ab      	cmp	r3, r5
 800e18a:	9a05      	ldr	r2, [sp, #20]
 800e18c:	bfa8      	it	ge
 800e18e:	462b      	movge	r3, r5
 800e190:	1ad2      	subs	r2, r2, r3
 800e192:	9205      	str	r2, [sp, #20]
 800e194:	9a06      	ldr	r2, [sp, #24]
 800e196:	1aed      	subs	r5, r5, r3
 800e198:	1ad3      	subs	r3, r2, r3
 800e19a:	9306      	str	r3, [sp, #24]
 800e19c:	9b08      	ldr	r3, [sp, #32]
 800e19e:	b1f3      	cbz	r3, 800e1de <_dtoa_r+0x7b6>
 800e1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	f000 80a3 	beq.w	800e2ee <_dtoa_r+0x8c6>
 800e1a8:	2e00      	cmp	r6, #0
 800e1aa:	dd10      	ble.n	800e1ce <_dtoa_r+0x7a6>
 800e1ac:	4639      	mov	r1, r7
 800e1ae:	4632      	mov	r2, r6
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	f000 fce1 	bl	800eb78 <__pow5mult>
 800e1b6:	4652      	mov	r2, sl
 800e1b8:	4601      	mov	r1, r0
 800e1ba:	4607      	mov	r7, r0
 800e1bc:	4620      	mov	r0, r4
 800e1be:	f000 fc31 	bl	800ea24 <__multiply>
 800e1c2:	4651      	mov	r1, sl
 800e1c4:	4680      	mov	r8, r0
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f000 fb60 	bl	800e88c <_Bfree>
 800e1cc:	46c2      	mov	sl, r8
 800e1ce:	9b08      	ldr	r3, [sp, #32]
 800e1d0:	1b9a      	subs	r2, r3, r6
 800e1d2:	d004      	beq.n	800e1de <_dtoa_r+0x7b6>
 800e1d4:	4651      	mov	r1, sl
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	f000 fcce 	bl	800eb78 <__pow5mult>
 800e1dc:	4682      	mov	sl, r0
 800e1de:	2101      	movs	r1, #1
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	f000 fc09 	bl	800e9f8 <__i2b>
 800e1e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	4606      	mov	r6, r0
 800e1ec:	f340 8081 	ble.w	800e2f2 <_dtoa_r+0x8ca>
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	4601      	mov	r1, r0
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f000 fcbf 	bl	800eb78 <__pow5mult>
 800e1fa:	9b07      	ldr	r3, [sp, #28]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	4606      	mov	r6, r0
 800e200:	dd7a      	ble.n	800e2f8 <_dtoa_r+0x8d0>
 800e202:	f04f 0800 	mov.w	r8, #0
 800e206:	6933      	ldr	r3, [r6, #16]
 800e208:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e20c:	6918      	ldr	r0, [r3, #16]
 800e20e:	f000 fba5 	bl	800e95c <__hi0bits>
 800e212:	f1c0 0020 	rsb	r0, r0, #32
 800e216:	9b06      	ldr	r3, [sp, #24]
 800e218:	4418      	add	r0, r3
 800e21a:	f010 001f 	ands.w	r0, r0, #31
 800e21e:	f000 8094 	beq.w	800e34a <_dtoa_r+0x922>
 800e222:	f1c0 0320 	rsb	r3, r0, #32
 800e226:	2b04      	cmp	r3, #4
 800e228:	f340 8085 	ble.w	800e336 <_dtoa_r+0x90e>
 800e22c:	9b05      	ldr	r3, [sp, #20]
 800e22e:	f1c0 001c 	rsb	r0, r0, #28
 800e232:	4403      	add	r3, r0
 800e234:	9305      	str	r3, [sp, #20]
 800e236:	9b06      	ldr	r3, [sp, #24]
 800e238:	4403      	add	r3, r0
 800e23a:	4405      	add	r5, r0
 800e23c:	9306      	str	r3, [sp, #24]
 800e23e:	9b05      	ldr	r3, [sp, #20]
 800e240:	2b00      	cmp	r3, #0
 800e242:	dd05      	ble.n	800e250 <_dtoa_r+0x828>
 800e244:	4651      	mov	r1, sl
 800e246:	461a      	mov	r2, r3
 800e248:	4620      	mov	r0, r4
 800e24a:	f000 fcef 	bl	800ec2c <__lshift>
 800e24e:	4682      	mov	sl, r0
 800e250:	9b06      	ldr	r3, [sp, #24]
 800e252:	2b00      	cmp	r3, #0
 800e254:	dd05      	ble.n	800e262 <_dtoa_r+0x83a>
 800e256:	4631      	mov	r1, r6
 800e258:	461a      	mov	r2, r3
 800e25a:	4620      	mov	r0, r4
 800e25c:	f000 fce6 	bl	800ec2c <__lshift>
 800e260:	4606      	mov	r6, r0
 800e262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e264:	2b00      	cmp	r3, #0
 800e266:	d072      	beq.n	800e34e <_dtoa_r+0x926>
 800e268:	4631      	mov	r1, r6
 800e26a:	4650      	mov	r0, sl
 800e26c:	f000 fd4a 	bl	800ed04 <__mcmp>
 800e270:	2800      	cmp	r0, #0
 800e272:	da6c      	bge.n	800e34e <_dtoa_r+0x926>
 800e274:	2300      	movs	r3, #0
 800e276:	4651      	mov	r1, sl
 800e278:	220a      	movs	r2, #10
 800e27a:	4620      	mov	r0, r4
 800e27c:	f000 fb28 	bl	800e8d0 <__multadd>
 800e280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e282:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e286:	4682      	mov	sl, r0
 800e288:	2b00      	cmp	r3, #0
 800e28a:	f000 81b0 	beq.w	800e5ee <_dtoa_r+0xbc6>
 800e28e:	2300      	movs	r3, #0
 800e290:	4639      	mov	r1, r7
 800e292:	220a      	movs	r2, #10
 800e294:	4620      	mov	r0, r4
 800e296:	f000 fb1b 	bl	800e8d0 <__multadd>
 800e29a:	9b01      	ldr	r3, [sp, #4]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	4607      	mov	r7, r0
 800e2a0:	f300 8096 	bgt.w	800e3d0 <_dtoa_r+0x9a8>
 800e2a4:	9b07      	ldr	r3, [sp, #28]
 800e2a6:	2b02      	cmp	r3, #2
 800e2a8:	dc59      	bgt.n	800e35e <_dtoa_r+0x936>
 800e2aa:	e091      	b.n	800e3d0 <_dtoa_r+0x9a8>
 800e2ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e2ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e2b2:	e758      	b.n	800e166 <_dtoa_r+0x73e>
 800e2b4:	9b04      	ldr	r3, [sp, #16]
 800e2b6:	1e5e      	subs	r6, r3, #1
 800e2b8:	9b08      	ldr	r3, [sp, #32]
 800e2ba:	42b3      	cmp	r3, r6
 800e2bc:	bfbf      	itttt	lt
 800e2be:	9b08      	ldrlt	r3, [sp, #32]
 800e2c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e2c2:	9608      	strlt	r6, [sp, #32]
 800e2c4:	1af3      	sublt	r3, r6, r3
 800e2c6:	bfb4      	ite	lt
 800e2c8:	18d2      	addlt	r2, r2, r3
 800e2ca:	1b9e      	subge	r6, r3, r6
 800e2cc:	9b04      	ldr	r3, [sp, #16]
 800e2ce:	bfbc      	itt	lt
 800e2d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e2d2:	2600      	movlt	r6, #0
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	bfb7      	itett	lt
 800e2d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e2dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e2e0:	1a9d      	sublt	r5, r3, r2
 800e2e2:	2300      	movlt	r3, #0
 800e2e4:	e741      	b.n	800e16a <_dtoa_r+0x742>
 800e2e6:	9e08      	ldr	r6, [sp, #32]
 800e2e8:	9d05      	ldr	r5, [sp, #20]
 800e2ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e2ec:	e748      	b.n	800e180 <_dtoa_r+0x758>
 800e2ee:	9a08      	ldr	r2, [sp, #32]
 800e2f0:	e770      	b.n	800e1d4 <_dtoa_r+0x7ac>
 800e2f2:	9b07      	ldr	r3, [sp, #28]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	dc19      	bgt.n	800e32c <_dtoa_r+0x904>
 800e2f8:	9b02      	ldr	r3, [sp, #8]
 800e2fa:	b9bb      	cbnz	r3, 800e32c <_dtoa_r+0x904>
 800e2fc:	9b03      	ldr	r3, [sp, #12]
 800e2fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e302:	b99b      	cbnz	r3, 800e32c <_dtoa_r+0x904>
 800e304:	9b03      	ldr	r3, [sp, #12]
 800e306:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e30a:	0d1b      	lsrs	r3, r3, #20
 800e30c:	051b      	lsls	r3, r3, #20
 800e30e:	b183      	cbz	r3, 800e332 <_dtoa_r+0x90a>
 800e310:	9b05      	ldr	r3, [sp, #20]
 800e312:	3301      	adds	r3, #1
 800e314:	9305      	str	r3, [sp, #20]
 800e316:	9b06      	ldr	r3, [sp, #24]
 800e318:	3301      	adds	r3, #1
 800e31a:	9306      	str	r3, [sp, #24]
 800e31c:	f04f 0801 	mov.w	r8, #1
 800e320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e322:	2b00      	cmp	r3, #0
 800e324:	f47f af6f 	bne.w	800e206 <_dtoa_r+0x7de>
 800e328:	2001      	movs	r0, #1
 800e32a:	e774      	b.n	800e216 <_dtoa_r+0x7ee>
 800e32c:	f04f 0800 	mov.w	r8, #0
 800e330:	e7f6      	b.n	800e320 <_dtoa_r+0x8f8>
 800e332:	4698      	mov	r8, r3
 800e334:	e7f4      	b.n	800e320 <_dtoa_r+0x8f8>
 800e336:	d082      	beq.n	800e23e <_dtoa_r+0x816>
 800e338:	9a05      	ldr	r2, [sp, #20]
 800e33a:	331c      	adds	r3, #28
 800e33c:	441a      	add	r2, r3
 800e33e:	9205      	str	r2, [sp, #20]
 800e340:	9a06      	ldr	r2, [sp, #24]
 800e342:	441a      	add	r2, r3
 800e344:	441d      	add	r5, r3
 800e346:	9206      	str	r2, [sp, #24]
 800e348:	e779      	b.n	800e23e <_dtoa_r+0x816>
 800e34a:	4603      	mov	r3, r0
 800e34c:	e7f4      	b.n	800e338 <_dtoa_r+0x910>
 800e34e:	9b04      	ldr	r3, [sp, #16]
 800e350:	2b00      	cmp	r3, #0
 800e352:	dc37      	bgt.n	800e3c4 <_dtoa_r+0x99c>
 800e354:	9b07      	ldr	r3, [sp, #28]
 800e356:	2b02      	cmp	r3, #2
 800e358:	dd34      	ble.n	800e3c4 <_dtoa_r+0x99c>
 800e35a:	9b04      	ldr	r3, [sp, #16]
 800e35c:	9301      	str	r3, [sp, #4]
 800e35e:	9b01      	ldr	r3, [sp, #4]
 800e360:	b963      	cbnz	r3, 800e37c <_dtoa_r+0x954>
 800e362:	4631      	mov	r1, r6
 800e364:	2205      	movs	r2, #5
 800e366:	4620      	mov	r0, r4
 800e368:	f000 fab2 	bl	800e8d0 <__multadd>
 800e36c:	4601      	mov	r1, r0
 800e36e:	4606      	mov	r6, r0
 800e370:	4650      	mov	r0, sl
 800e372:	f000 fcc7 	bl	800ed04 <__mcmp>
 800e376:	2800      	cmp	r0, #0
 800e378:	f73f adbb 	bgt.w	800def2 <_dtoa_r+0x4ca>
 800e37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e37e:	9d00      	ldr	r5, [sp, #0]
 800e380:	ea6f 0b03 	mvn.w	fp, r3
 800e384:	f04f 0800 	mov.w	r8, #0
 800e388:	4631      	mov	r1, r6
 800e38a:	4620      	mov	r0, r4
 800e38c:	f000 fa7e 	bl	800e88c <_Bfree>
 800e390:	2f00      	cmp	r7, #0
 800e392:	f43f aeab 	beq.w	800e0ec <_dtoa_r+0x6c4>
 800e396:	f1b8 0f00 	cmp.w	r8, #0
 800e39a:	d005      	beq.n	800e3a8 <_dtoa_r+0x980>
 800e39c:	45b8      	cmp	r8, r7
 800e39e:	d003      	beq.n	800e3a8 <_dtoa_r+0x980>
 800e3a0:	4641      	mov	r1, r8
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f000 fa72 	bl	800e88c <_Bfree>
 800e3a8:	4639      	mov	r1, r7
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	f000 fa6e 	bl	800e88c <_Bfree>
 800e3b0:	e69c      	b.n	800e0ec <_dtoa_r+0x6c4>
 800e3b2:	2600      	movs	r6, #0
 800e3b4:	4637      	mov	r7, r6
 800e3b6:	e7e1      	b.n	800e37c <_dtoa_r+0x954>
 800e3b8:	46bb      	mov	fp, r7
 800e3ba:	4637      	mov	r7, r6
 800e3bc:	e599      	b.n	800def2 <_dtoa_r+0x4ca>
 800e3be:	bf00      	nop
 800e3c0:	40240000 	.word	0x40240000
 800e3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f000 80c8 	beq.w	800e55c <_dtoa_r+0xb34>
 800e3cc:	9b04      	ldr	r3, [sp, #16]
 800e3ce:	9301      	str	r3, [sp, #4]
 800e3d0:	2d00      	cmp	r5, #0
 800e3d2:	dd05      	ble.n	800e3e0 <_dtoa_r+0x9b8>
 800e3d4:	4639      	mov	r1, r7
 800e3d6:	462a      	mov	r2, r5
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f000 fc27 	bl	800ec2c <__lshift>
 800e3de:	4607      	mov	r7, r0
 800e3e0:	f1b8 0f00 	cmp.w	r8, #0
 800e3e4:	d05b      	beq.n	800e49e <_dtoa_r+0xa76>
 800e3e6:	6879      	ldr	r1, [r7, #4]
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	f000 fa0f 	bl	800e80c <_Balloc>
 800e3ee:	4605      	mov	r5, r0
 800e3f0:	b928      	cbnz	r0, 800e3fe <_dtoa_r+0x9d6>
 800e3f2:	4b83      	ldr	r3, [pc, #524]	; (800e600 <_dtoa_r+0xbd8>)
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e3fa:	f7ff bb2e 	b.w	800da5a <_dtoa_r+0x32>
 800e3fe:	693a      	ldr	r2, [r7, #16]
 800e400:	3202      	adds	r2, #2
 800e402:	0092      	lsls	r2, r2, #2
 800e404:	f107 010c 	add.w	r1, r7, #12
 800e408:	300c      	adds	r0, #12
 800e40a:	f7ff fa74 	bl	800d8f6 <memcpy>
 800e40e:	2201      	movs	r2, #1
 800e410:	4629      	mov	r1, r5
 800e412:	4620      	mov	r0, r4
 800e414:	f000 fc0a 	bl	800ec2c <__lshift>
 800e418:	9b00      	ldr	r3, [sp, #0]
 800e41a:	3301      	adds	r3, #1
 800e41c:	9304      	str	r3, [sp, #16]
 800e41e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e422:	4413      	add	r3, r2
 800e424:	9308      	str	r3, [sp, #32]
 800e426:	9b02      	ldr	r3, [sp, #8]
 800e428:	f003 0301 	and.w	r3, r3, #1
 800e42c:	46b8      	mov	r8, r7
 800e42e:	9306      	str	r3, [sp, #24]
 800e430:	4607      	mov	r7, r0
 800e432:	9b04      	ldr	r3, [sp, #16]
 800e434:	4631      	mov	r1, r6
 800e436:	3b01      	subs	r3, #1
 800e438:	4650      	mov	r0, sl
 800e43a:	9301      	str	r3, [sp, #4]
 800e43c:	f7ff fa69 	bl	800d912 <quorem>
 800e440:	4641      	mov	r1, r8
 800e442:	9002      	str	r0, [sp, #8]
 800e444:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e448:	4650      	mov	r0, sl
 800e44a:	f000 fc5b 	bl	800ed04 <__mcmp>
 800e44e:	463a      	mov	r2, r7
 800e450:	9005      	str	r0, [sp, #20]
 800e452:	4631      	mov	r1, r6
 800e454:	4620      	mov	r0, r4
 800e456:	f000 fc71 	bl	800ed3c <__mdiff>
 800e45a:	68c2      	ldr	r2, [r0, #12]
 800e45c:	4605      	mov	r5, r0
 800e45e:	bb02      	cbnz	r2, 800e4a2 <_dtoa_r+0xa7a>
 800e460:	4601      	mov	r1, r0
 800e462:	4650      	mov	r0, sl
 800e464:	f000 fc4e 	bl	800ed04 <__mcmp>
 800e468:	4602      	mov	r2, r0
 800e46a:	4629      	mov	r1, r5
 800e46c:	4620      	mov	r0, r4
 800e46e:	9209      	str	r2, [sp, #36]	; 0x24
 800e470:	f000 fa0c 	bl	800e88c <_Bfree>
 800e474:	9b07      	ldr	r3, [sp, #28]
 800e476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e478:	9d04      	ldr	r5, [sp, #16]
 800e47a:	ea43 0102 	orr.w	r1, r3, r2
 800e47e:	9b06      	ldr	r3, [sp, #24]
 800e480:	4319      	orrs	r1, r3
 800e482:	d110      	bne.n	800e4a6 <_dtoa_r+0xa7e>
 800e484:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e488:	d029      	beq.n	800e4de <_dtoa_r+0xab6>
 800e48a:	9b05      	ldr	r3, [sp, #20]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	dd02      	ble.n	800e496 <_dtoa_r+0xa6e>
 800e490:	9b02      	ldr	r3, [sp, #8]
 800e492:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e496:	9b01      	ldr	r3, [sp, #4]
 800e498:	f883 9000 	strb.w	r9, [r3]
 800e49c:	e774      	b.n	800e388 <_dtoa_r+0x960>
 800e49e:	4638      	mov	r0, r7
 800e4a0:	e7ba      	b.n	800e418 <_dtoa_r+0x9f0>
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	e7e1      	b.n	800e46a <_dtoa_r+0xa42>
 800e4a6:	9b05      	ldr	r3, [sp, #20]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	db04      	blt.n	800e4b6 <_dtoa_r+0xa8e>
 800e4ac:	9907      	ldr	r1, [sp, #28]
 800e4ae:	430b      	orrs	r3, r1
 800e4b0:	9906      	ldr	r1, [sp, #24]
 800e4b2:	430b      	orrs	r3, r1
 800e4b4:	d120      	bne.n	800e4f8 <_dtoa_r+0xad0>
 800e4b6:	2a00      	cmp	r2, #0
 800e4b8:	dded      	ble.n	800e496 <_dtoa_r+0xa6e>
 800e4ba:	4651      	mov	r1, sl
 800e4bc:	2201      	movs	r2, #1
 800e4be:	4620      	mov	r0, r4
 800e4c0:	f000 fbb4 	bl	800ec2c <__lshift>
 800e4c4:	4631      	mov	r1, r6
 800e4c6:	4682      	mov	sl, r0
 800e4c8:	f000 fc1c 	bl	800ed04 <__mcmp>
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	dc03      	bgt.n	800e4d8 <_dtoa_r+0xab0>
 800e4d0:	d1e1      	bne.n	800e496 <_dtoa_r+0xa6e>
 800e4d2:	f019 0f01 	tst.w	r9, #1
 800e4d6:	d0de      	beq.n	800e496 <_dtoa_r+0xa6e>
 800e4d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e4dc:	d1d8      	bne.n	800e490 <_dtoa_r+0xa68>
 800e4de:	9a01      	ldr	r2, [sp, #4]
 800e4e0:	2339      	movs	r3, #57	; 0x39
 800e4e2:	7013      	strb	r3, [r2, #0]
 800e4e4:	462b      	mov	r3, r5
 800e4e6:	461d      	mov	r5, r3
 800e4e8:	3b01      	subs	r3, #1
 800e4ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e4ee:	2a39      	cmp	r2, #57	; 0x39
 800e4f0:	d06c      	beq.n	800e5cc <_dtoa_r+0xba4>
 800e4f2:	3201      	adds	r2, #1
 800e4f4:	701a      	strb	r2, [r3, #0]
 800e4f6:	e747      	b.n	800e388 <_dtoa_r+0x960>
 800e4f8:	2a00      	cmp	r2, #0
 800e4fa:	dd07      	ble.n	800e50c <_dtoa_r+0xae4>
 800e4fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e500:	d0ed      	beq.n	800e4de <_dtoa_r+0xab6>
 800e502:	9a01      	ldr	r2, [sp, #4]
 800e504:	f109 0301 	add.w	r3, r9, #1
 800e508:	7013      	strb	r3, [r2, #0]
 800e50a:	e73d      	b.n	800e388 <_dtoa_r+0x960>
 800e50c:	9b04      	ldr	r3, [sp, #16]
 800e50e:	9a08      	ldr	r2, [sp, #32]
 800e510:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e514:	4293      	cmp	r3, r2
 800e516:	d043      	beq.n	800e5a0 <_dtoa_r+0xb78>
 800e518:	4651      	mov	r1, sl
 800e51a:	2300      	movs	r3, #0
 800e51c:	220a      	movs	r2, #10
 800e51e:	4620      	mov	r0, r4
 800e520:	f000 f9d6 	bl	800e8d0 <__multadd>
 800e524:	45b8      	cmp	r8, r7
 800e526:	4682      	mov	sl, r0
 800e528:	f04f 0300 	mov.w	r3, #0
 800e52c:	f04f 020a 	mov.w	r2, #10
 800e530:	4641      	mov	r1, r8
 800e532:	4620      	mov	r0, r4
 800e534:	d107      	bne.n	800e546 <_dtoa_r+0xb1e>
 800e536:	f000 f9cb 	bl	800e8d0 <__multadd>
 800e53a:	4680      	mov	r8, r0
 800e53c:	4607      	mov	r7, r0
 800e53e:	9b04      	ldr	r3, [sp, #16]
 800e540:	3301      	adds	r3, #1
 800e542:	9304      	str	r3, [sp, #16]
 800e544:	e775      	b.n	800e432 <_dtoa_r+0xa0a>
 800e546:	f000 f9c3 	bl	800e8d0 <__multadd>
 800e54a:	4639      	mov	r1, r7
 800e54c:	4680      	mov	r8, r0
 800e54e:	2300      	movs	r3, #0
 800e550:	220a      	movs	r2, #10
 800e552:	4620      	mov	r0, r4
 800e554:	f000 f9bc 	bl	800e8d0 <__multadd>
 800e558:	4607      	mov	r7, r0
 800e55a:	e7f0      	b.n	800e53e <_dtoa_r+0xb16>
 800e55c:	9b04      	ldr	r3, [sp, #16]
 800e55e:	9301      	str	r3, [sp, #4]
 800e560:	9d00      	ldr	r5, [sp, #0]
 800e562:	4631      	mov	r1, r6
 800e564:	4650      	mov	r0, sl
 800e566:	f7ff f9d4 	bl	800d912 <quorem>
 800e56a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e56e:	9b00      	ldr	r3, [sp, #0]
 800e570:	f805 9b01 	strb.w	r9, [r5], #1
 800e574:	1aea      	subs	r2, r5, r3
 800e576:	9b01      	ldr	r3, [sp, #4]
 800e578:	4293      	cmp	r3, r2
 800e57a:	dd07      	ble.n	800e58c <_dtoa_r+0xb64>
 800e57c:	4651      	mov	r1, sl
 800e57e:	2300      	movs	r3, #0
 800e580:	220a      	movs	r2, #10
 800e582:	4620      	mov	r0, r4
 800e584:	f000 f9a4 	bl	800e8d0 <__multadd>
 800e588:	4682      	mov	sl, r0
 800e58a:	e7ea      	b.n	800e562 <_dtoa_r+0xb3a>
 800e58c:	9b01      	ldr	r3, [sp, #4]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	bfc8      	it	gt
 800e592:	461d      	movgt	r5, r3
 800e594:	9b00      	ldr	r3, [sp, #0]
 800e596:	bfd8      	it	le
 800e598:	2501      	movle	r5, #1
 800e59a:	441d      	add	r5, r3
 800e59c:	f04f 0800 	mov.w	r8, #0
 800e5a0:	4651      	mov	r1, sl
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	f000 fb41 	bl	800ec2c <__lshift>
 800e5aa:	4631      	mov	r1, r6
 800e5ac:	4682      	mov	sl, r0
 800e5ae:	f000 fba9 	bl	800ed04 <__mcmp>
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	dc96      	bgt.n	800e4e4 <_dtoa_r+0xabc>
 800e5b6:	d102      	bne.n	800e5be <_dtoa_r+0xb96>
 800e5b8:	f019 0f01 	tst.w	r9, #1
 800e5bc:	d192      	bne.n	800e4e4 <_dtoa_r+0xabc>
 800e5be:	462b      	mov	r3, r5
 800e5c0:	461d      	mov	r5, r3
 800e5c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5c6:	2a30      	cmp	r2, #48	; 0x30
 800e5c8:	d0fa      	beq.n	800e5c0 <_dtoa_r+0xb98>
 800e5ca:	e6dd      	b.n	800e388 <_dtoa_r+0x960>
 800e5cc:	9a00      	ldr	r2, [sp, #0]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d189      	bne.n	800e4e6 <_dtoa_r+0xabe>
 800e5d2:	f10b 0b01 	add.w	fp, fp, #1
 800e5d6:	2331      	movs	r3, #49	; 0x31
 800e5d8:	e796      	b.n	800e508 <_dtoa_r+0xae0>
 800e5da:	4b0a      	ldr	r3, [pc, #40]	; (800e604 <_dtoa_r+0xbdc>)
 800e5dc:	f7ff ba99 	b.w	800db12 <_dtoa_r+0xea>
 800e5e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f47f aa6d 	bne.w	800dac2 <_dtoa_r+0x9a>
 800e5e8:	4b07      	ldr	r3, [pc, #28]	; (800e608 <_dtoa_r+0xbe0>)
 800e5ea:	f7ff ba92 	b.w	800db12 <_dtoa_r+0xea>
 800e5ee:	9b01      	ldr	r3, [sp, #4]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	dcb5      	bgt.n	800e560 <_dtoa_r+0xb38>
 800e5f4:	9b07      	ldr	r3, [sp, #28]
 800e5f6:	2b02      	cmp	r3, #2
 800e5f8:	f73f aeb1 	bgt.w	800e35e <_dtoa_r+0x936>
 800e5fc:	e7b0      	b.n	800e560 <_dtoa_r+0xb38>
 800e5fe:	bf00      	nop
 800e600:	08011c3c 	.word	0x08011c3c
 800e604:	08011b9c 	.word	0x08011b9c
 800e608:	08011bc0 	.word	0x08011bc0

0800e60c <_free_r>:
 800e60c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e60e:	2900      	cmp	r1, #0
 800e610:	d044      	beq.n	800e69c <_free_r+0x90>
 800e612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e616:	9001      	str	r0, [sp, #4]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	f1a1 0404 	sub.w	r4, r1, #4
 800e61e:	bfb8      	it	lt
 800e620:	18e4      	addlt	r4, r4, r3
 800e622:	f000 f8e7 	bl	800e7f4 <__malloc_lock>
 800e626:	4a1e      	ldr	r2, [pc, #120]	; (800e6a0 <_free_r+0x94>)
 800e628:	9801      	ldr	r0, [sp, #4]
 800e62a:	6813      	ldr	r3, [r2, #0]
 800e62c:	b933      	cbnz	r3, 800e63c <_free_r+0x30>
 800e62e:	6063      	str	r3, [r4, #4]
 800e630:	6014      	str	r4, [r2, #0]
 800e632:	b003      	add	sp, #12
 800e634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e638:	f000 b8e2 	b.w	800e800 <__malloc_unlock>
 800e63c:	42a3      	cmp	r3, r4
 800e63e:	d908      	bls.n	800e652 <_free_r+0x46>
 800e640:	6825      	ldr	r5, [r4, #0]
 800e642:	1961      	adds	r1, r4, r5
 800e644:	428b      	cmp	r3, r1
 800e646:	bf01      	itttt	eq
 800e648:	6819      	ldreq	r1, [r3, #0]
 800e64a:	685b      	ldreq	r3, [r3, #4]
 800e64c:	1949      	addeq	r1, r1, r5
 800e64e:	6021      	streq	r1, [r4, #0]
 800e650:	e7ed      	b.n	800e62e <_free_r+0x22>
 800e652:	461a      	mov	r2, r3
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	b10b      	cbz	r3, 800e65c <_free_r+0x50>
 800e658:	42a3      	cmp	r3, r4
 800e65a:	d9fa      	bls.n	800e652 <_free_r+0x46>
 800e65c:	6811      	ldr	r1, [r2, #0]
 800e65e:	1855      	adds	r5, r2, r1
 800e660:	42a5      	cmp	r5, r4
 800e662:	d10b      	bne.n	800e67c <_free_r+0x70>
 800e664:	6824      	ldr	r4, [r4, #0]
 800e666:	4421      	add	r1, r4
 800e668:	1854      	adds	r4, r2, r1
 800e66a:	42a3      	cmp	r3, r4
 800e66c:	6011      	str	r1, [r2, #0]
 800e66e:	d1e0      	bne.n	800e632 <_free_r+0x26>
 800e670:	681c      	ldr	r4, [r3, #0]
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	6053      	str	r3, [r2, #4]
 800e676:	440c      	add	r4, r1
 800e678:	6014      	str	r4, [r2, #0]
 800e67a:	e7da      	b.n	800e632 <_free_r+0x26>
 800e67c:	d902      	bls.n	800e684 <_free_r+0x78>
 800e67e:	230c      	movs	r3, #12
 800e680:	6003      	str	r3, [r0, #0]
 800e682:	e7d6      	b.n	800e632 <_free_r+0x26>
 800e684:	6825      	ldr	r5, [r4, #0]
 800e686:	1961      	adds	r1, r4, r5
 800e688:	428b      	cmp	r3, r1
 800e68a:	bf04      	itt	eq
 800e68c:	6819      	ldreq	r1, [r3, #0]
 800e68e:	685b      	ldreq	r3, [r3, #4]
 800e690:	6063      	str	r3, [r4, #4]
 800e692:	bf04      	itt	eq
 800e694:	1949      	addeq	r1, r1, r5
 800e696:	6021      	streq	r1, [r4, #0]
 800e698:	6054      	str	r4, [r2, #4]
 800e69a:	e7ca      	b.n	800e632 <_free_r+0x26>
 800e69c:	b003      	add	sp, #12
 800e69e:	bd30      	pop	{r4, r5, pc}
 800e6a0:	20019f0c 	.word	0x20019f0c

0800e6a4 <malloc>:
 800e6a4:	4b02      	ldr	r3, [pc, #8]	; (800e6b0 <malloc+0xc>)
 800e6a6:	4601      	mov	r1, r0
 800e6a8:	6818      	ldr	r0, [r3, #0]
 800e6aa:	f000 b823 	b.w	800e6f4 <_malloc_r>
 800e6ae:	bf00      	nop
 800e6b0:	20000934 	.word	0x20000934

0800e6b4 <sbrk_aligned>:
 800e6b4:	b570      	push	{r4, r5, r6, lr}
 800e6b6:	4e0e      	ldr	r6, [pc, #56]	; (800e6f0 <sbrk_aligned+0x3c>)
 800e6b8:	460c      	mov	r4, r1
 800e6ba:	6831      	ldr	r1, [r6, #0]
 800e6bc:	4605      	mov	r5, r0
 800e6be:	b911      	cbnz	r1, 800e6c6 <sbrk_aligned+0x12>
 800e6c0:	f000 feaa 	bl	800f418 <_sbrk_r>
 800e6c4:	6030      	str	r0, [r6, #0]
 800e6c6:	4621      	mov	r1, r4
 800e6c8:	4628      	mov	r0, r5
 800e6ca:	f000 fea5 	bl	800f418 <_sbrk_r>
 800e6ce:	1c43      	adds	r3, r0, #1
 800e6d0:	d00a      	beq.n	800e6e8 <sbrk_aligned+0x34>
 800e6d2:	1cc4      	adds	r4, r0, #3
 800e6d4:	f024 0403 	bic.w	r4, r4, #3
 800e6d8:	42a0      	cmp	r0, r4
 800e6da:	d007      	beq.n	800e6ec <sbrk_aligned+0x38>
 800e6dc:	1a21      	subs	r1, r4, r0
 800e6de:	4628      	mov	r0, r5
 800e6e0:	f000 fe9a 	bl	800f418 <_sbrk_r>
 800e6e4:	3001      	adds	r0, #1
 800e6e6:	d101      	bne.n	800e6ec <sbrk_aligned+0x38>
 800e6e8:	f04f 34ff 	mov.w	r4, #4294967295
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	bd70      	pop	{r4, r5, r6, pc}
 800e6f0:	20019f10 	.word	0x20019f10

0800e6f4 <_malloc_r>:
 800e6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6f8:	1ccd      	adds	r5, r1, #3
 800e6fa:	f025 0503 	bic.w	r5, r5, #3
 800e6fe:	3508      	adds	r5, #8
 800e700:	2d0c      	cmp	r5, #12
 800e702:	bf38      	it	cc
 800e704:	250c      	movcc	r5, #12
 800e706:	2d00      	cmp	r5, #0
 800e708:	4607      	mov	r7, r0
 800e70a:	db01      	blt.n	800e710 <_malloc_r+0x1c>
 800e70c:	42a9      	cmp	r1, r5
 800e70e:	d905      	bls.n	800e71c <_malloc_r+0x28>
 800e710:	230c      	movs	r3, #12
 800e712:	603b      	str	r3, [r7, #0]
 800e714:	2600      	movs	r6, #0
 800e716:	4630      	mov	r0, r6
 800e718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e71c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e7f0 <_malloc_r+0xfc>
 800e720:	f000 f868 	bl	800e7f4 <__malloc_lock>
 800e724:	f8d8 3000 	ldr.w	r3, [r8]
 800e728:	461c      	mov	r4, r3
 800e72a:	bb5c      	cbnz	r4, 800e784 <_malloc_r+0x90>
 800e72c:	4629      	mov	r1, r5
 800e72e:	4638      	mov	r0, r7
 800e730:	f7ff ffc0 	bl	800e6b4 <sbrk_aligned>
 800e734:	1c43      	adds	r3, r0, #1
 800e736:	4604      	mov	r4, r0
 800e738:	d155      	bne.n	800e7e6 <_malloc_r+0xf2>
 800e73a:	f8d8 4000 	ldr.w	r4, [r8]
 800e73e:	4626      	mov	r6, r4
 800e740:	2e00      	cmp	r6, #0
 800e742:	d145      	bne.n	800e7d0 <_malloc_r+0xdc>
 800e744:	2c00      	cmp	r4, #0
 800e746:	d048      	beq.n	800e7da <_malloc_r+0xe6>
 800e748:	6823      	ldr	r3, [r4, #0]
 800e74a:	4631      	mov	r1, r6
 800e74c:	4638      	mov	r0, r7
 800e74e:	eb04 0903 	add.w	r9, r4, r3
 800e752:	f000 fe61 	bl	800f418 <_sbrk_r>
 800e756:	4581      	cmp	r9, r0
 800e758:	d13f      	bne.n	800e7da <_malloc_r+0xe6>
 800e75a:	6821      	ldr	r1, [r4, #0]
 800e75c:	1a6d      	subs	r5, r5, r1
 800e75e:	4629      	mov	r1, r5
 800e760:	4638      	mov	r0, r7
 800e762:	f7ff ffa7 	bl	800e6b4 <sbrk_aligned>
 800e766:	3001      	adds	r0, #1
 800e768:	d037      	beq.n	800e7da <_malloc_r+0xe6>
 800e76a:	6823      	ldr	r3, [r4, #0]
 800e76c:	442b      	add	r3, r5
 800e76e:	6023      	str	r3, [r4, #0]
 800e770:	f8d8 3000 	ldr.w	r3, [r8]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d038      	beq.n	800e7ea <_malloc_r+0xf6>
 800e778:	685a      	ldr	r2, [r3, #4]
 800e77a:	42a2      	cmp	r2, r4
 800e77c:	d12b      	bne.n	800e7d6 <_malloc_r+0xe2>
 800e77e:	2200      	movs	r2, #0
 800e780:	605a      	str	r2, [r3, #4]
 800e782:	e00f      	b.n	800e7a4 <_malloc_r+0xb0>
 800e784:	6822      	ldr	r2, [r4, #0]
 800e786:	1b52      	subs	r2, r2, r5
 800e788:	d41f      	bmi.n	800e7ca <_malloc_r+0xd6>
 800e78a:	2a0b      	cmp	r2, #11
 800e78c:	d917      	bls.n	800e7be <_malloc_r+0xca>
 800e78e:	1961      	adds	r1, r4, r5
 800e790:	42a3      	cmp	r3, r4
 800e792:	6025      	str	r5, [r4, #0]
 800e794:	bf18      	it	ne
 800e796:	6059      	strne	r1, [r3, #4]
 800e798:	6863      	ldr	r3, [r4, #4]
 800e79a:	bf08      	it	eq
 800e79c:	f8c8 1000 	streq.w	r1, [r8]
 800e7a0:	5162      	str	r2, [r4, r5]
 800e7a2:	604b      	str	r3, [r1, #4]
 800e7a4:	4638      	mov	r0, r7
 800e7a6:	f104 060b 	add.w	r6, r4, #11
 800e7aa:	f000 f829 	bl	800e800 <__malloc_unlock>
 800e7ae:	f026 0607 	bic.w	r6, r6, #7
 800e7b2:	1d23      	adds	r3, r4, #4
 800e7b4:	1af2      	subs	r2, r6, r3
 800e7b6:	d0ae      	beq.n	800e716 <_malloc_r+0x22>
 800e7b8:	1b9b      	subs	r3, r3, r6
 800e7ba:	50a3      	str	r3, [r4, r2]
 800e7bc:	e7ab      	b.n	800e716 <_malloc_r+0x22>
 800e7be:	42a3      	cmp	r3, r4
 800e7c0:	6862      	ldr	r2, [r4, #4]
 800e7c2:	d1dd      	bne.n	800e780 <_malloc_r+0x8c>
 800e7c4:	f8c8 2000 	str.w	r2, [r8]
 800e7c8:	e7ec      	b.n	800e7a4 <_malloc_r+0xb0>
 800e7ca:	4623      	mov	r3, r4
 800e7cc:	6864      	ldr	r4, [r4, #4]
 800e7ce:	e7ac      	b.n	800e72a <_malloc_r+0x36>
 800e7d0:	4634      	mov	r4, r6
 800e7d2:	6876      	ldr	r6, [r6, #4]
 800e7d4:	e7b4      	b.n	800e740 <_malloc_r+0x4c>
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	e7cc      	b.n	800e774 <_malloc_r+0x80>
 800e7da:	230c      	movs	r3, #12
 800e7dc:	603b      	str	r3, [r7, #0]
 800e7de:	4638      	mov	r0, r7
 800e7e0:	f000 f80e 	bl	800e800 <__malloc_unlock>
 800e7e4:	e797      	b.n	800e716 <_malloc_r+0x22>
 800e7e6:	6025      	str	r5, [r4, #0]
 800e7e8:	e7dc      	b.n	800e7a4 <_malloc_r+0xb0>
 800e7ea:	605b      	str	r3, [r3, #4]
 800e7ec:	deff      	udf	#255	; 0xff
 800e7ee:	bf00      	nop
 800e7f0:	20019f0c 	.word	0x20019f0c

0800e7f4 <__malloc_lock>:
 800e7f4:	4801      	ldr	r0, [pc, #4]	; (800e7fc <__malloc_lock+0x8>)
 800e7f6:	f7ff b87c 	b.w	800d8f2 <__retarget_lock_acquire_recursive>
 800e7fa:	bf00      	nop
 800e7fc:	20019f08 	.word	0x20019f08

0800e800 <__malloc_unlock>:
 800e800:	4801      	ldr	r0, [pc, #4]	; (800e808 <__malloc_unlock+0x8>)
 800e802:	f7ff b877 	b.w	800d8f4 <__retarget_lock_release_recursive>
 800e806:	bf00      	nop
 800e808:	20019f08 	.word	0x20019f08

0800e80c <_Balloc>:
 800e80c:	b570      	push	{r4, r5, r6, lr}
 800e80e:	69c6      	ldr	r6, [r0, #28]
 800e810:	4604      	mov	r4, r0
 800e812:	460d      	mov	r5, r1
 800e814:	b976      	cbnz	r6, 800e834 <_Balloc+0x28>
 800e816:	2010      	movs	r0, #16
 800e818:	f7ff ff44 	bl	800e6a4 <malloc>
 800e81c:	4602      	mov	r2, r0
 800e81e:	61e0      	str	r0, [r4, #28]
 800e820:	b920      	cbnz	r0, 800e82c <_Balloc+0x20>
 800e822:	4b18      	ldr	r3, [pc, #96]	; (800e884 <_Balloc+0x78>)
 800e824:	4818      	ldr	r0, [pc, #96]	; (800e888 <_Balloc+0x7c>)
 800e826:	216b      	movs	r1, #107	; 0x6b
 800e828:	f000 fe06 	bl	800f438 <__assert_func>
 800e82c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e830:	6006      	str	r6, [r0, #0]
 800e832:	60c6      	str	r6, [r0, #12]
 800e834:	69e6      	ldr	r6, [r4, #28]
 800e836:	68f3      	ldr	r3, [r6, #12]
 800e838:	b183      	cbz	r3, 800e85c <_Balloc+0x50>
 800e83a:	69e3      	ldr	r3, [r4, #28]
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e842:	b9b8      	cbnz	r0, 800e874 <_Balloc+0x68>
 800e844:	2101      	movs	r1, #1
 800e846:	fa01 f605 	lsl.w	r6, r1, r5
 800e84a:	1d72      	adds	r2, r6, #5
 800e84c:	0092      	lsls	r2, r2, #2
 800e84e:	4620      	mov	r0, r4
 800e850:	f000 fe10 	bl	800f474 <_calloc_r>
 800e854:	b160      	cbz	r0, 800e870 <_Balloc+0x64>
 800e856:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e85a:	e00e      	b.n	800e87a <_Balloc+0x6e>
 800e85c:	2221      	movs	r2, #33	; 0x21
 800e85e:	2104      	movs	r1, #4
 800e860:	4620      	mov	r0, r4
 800e862:	f000 fe07 	bl	800f474 <_calloc_r>
 800e866:	69e3      	ldr	r3, [r4, #28]
 800e868:	60f0      	str	r0, [r6, #12]
 800e86a:	68db      	ldr	r3, [r3, #12]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d1e4      	bne.n	800e83a <_Balloc+0x2e>
 800e870:	2000      	movs	r0, #0
 800e872:	bd70      	pop	{r4, r5, r6, pc}
 800e874:	6802      	ldr	r2, [r0, #0]
 800e876:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e87a:	2300      	movs	r3, #0
 800e87c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e880:	e7f7      	b.n	800e872 <_Balloc+0x66>
 800e882:	bf00      	nop
 800e884:	08011bcd 	.word	0x08011bcd
 800e888:	08011c4d 	.word	0x08011c4d

0800e88c <_Bfree>:
 800e88c:	b570      	push	{r4, r5, r6, lr}
 800e88e:	69c6      	ldr	r6, [r0, #28]
 800e890:	4605      	mov	r5, r0
 800e892:	460c      	mov	r4, r1
 800e894:	b976      	cbnz	r6, 800e8b4 <_Bfree+0x28>
 800e896:	2010      	movs	r0, #16
 800e898:	f7ff ff04 	bl	800e6a4 <malloc>
 800e89c:	4602      	mov	r2, r0
 800e89e:	61e8      	str	r0, [r5, #28]
 800e8a0:	b920      	cbnz	r0, 800e8ac <_Bfree+0x20>
 800e8a2:	4b09      	ldr	r3, [pc, #36]	; (800e8c8 <_Bfree+0x3c>)
 800e8a4:	4809      	ldr	r0, [pc, #36]	; (800e8cc <_Bfree+0x40>)
 800e8a6:	218f      	movs	r1, #143	; 0x8f
 800e8a8:	f000 fdc6 	bl	800f438 <__assert_func>
 800e8ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8b0:	6006      	str	r6, [r0, #0]
 800e8b2:	60c6      	str	r6, [r0, #12]
 800e8b4:	b13c      	cbz	r4, 800e8c6 <_Bfree+0x3a>
 800e8b6:	69eb      	ldr	r3, [r5, #28]
 800e8b8:	6862      	ldr	r2, [r4, #4]
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8c0:	6021      	str	r1, [r4, #0]
 800e8c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e8c6:	bd70      	pop	{r4, r5, r6, pc}
 800e8c8:	08011bcd 	.word	0x08011bcd
 800e8cc:	08011c4d 	.word	0x08011c4d

0800e8d0 <__multadd>:
 800e8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d4:	690d      	ldr	r5, [r1, #16]
 800e8d6:	4607      	mov	r7, r0
 800e8d8:	460c      	mov	r4, r1
 800e8da:	461e      	mov	r6, r3
 800e8dc:	f101 0c14 	add.w	ip, r1, #20
 800e8e0:	2000      	movs	r0, #0
 800e8e2:	f8dc 3000 	ldr.w	r3, [ip]
 800e8e6:	b299      	uxth	r1, r3
 800e8e8:	fb02 6101 	mla	r1, r2, r1, r6
 800e8ec:	0c1e      	lsrs	r6, r3, #16
 800e8ee:	0c0b      	lsrs	r3, r1, #16
 800e8f0:	fb02 3306 	mla	r3, r2, r6, r3
 800e8f4:	b289      	uxth	r1, r1
 800e8f6:	3001      	adds	r0, #1
 800e8f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e8fc:	4285      	cmp	r5, r0
 800e8fe:	f84c 1b04 	str.w	r1, [ip], #4
 800e902:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e906:	dcec      	bgt.n	800e8e2 <__multadd+0x12>
 800e908:	b30e      	cbz	r6, 800e94e <__multadd+0x7e>
 800e90a:	68a3      	ldr	r3, [r4, #8]
 800e90c:	42ab      	cmp	r3, r5
 800e90e:	dc19      	bgt.n	800e944 <__multadd+0x74>
 800e910:	6861      	ldr	r1, [r4, #4]
 800e912:	4638      	mov	r0, r7
 800e914:	3101      	adds	r1, #1
 800e916:	f7ff ff79 	bl	800e80c <_Balloc>
 800e91a:	4680      	mov	r8, r0
 800e91c:	b928      	cbnz	r0, 800e92a <__multadd+0x5a>
 800e91e:	4602      	mov	r2, r0
 800e920:	4b0c      	ldr	r3, [pc, #48]	; (800e954 <__multadd+0x84>)
 800e922:	480d      	ldr	r0, [pc, #52]	; (800e958 <__multadd+0x88>)
 800e924:	21ba      	movs	r1, #186	; 0xba
 800e926:	f000 fd87 	bl	800f438 <__assert_func>
 800e92a:	6922      	ldr	r2, [r4, #16]
 800e92c:	3202      	adds	r2, #2
 800e92e:	f104 010c 	add.w	r1, r4, #12
 800e932:	0092      	lsls	r2, r2, #2
 800e934:	300c      	adds	r0, #12
 800e936:	f7fe ffde 	bl	800d8f6 <memcpy>
 800e93a:	4621      	mov	r1, r4
 800e93c:	4638      	mov	r0, r7
 800e93e:	f7ff ffa5 	bl	800e88c <_Bfree>
 800e942:	4644      	mov	r4, r8
 800e944:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e948:	3501      	adds	r5, #1
 800e94a:	615e      	str	r6, [r3, #20]
 800e94c:	6125      	str	r5, [r4, #16]
 800e94e:	4620      	mov	r0, r4
 800e950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e954:	08011c3c 	.word	0x08011c3c
 800e958:	08011c4d 	.word	0x08011c4d

0800e95c <__hi0bits>:
 800e95c:	0c03      	lsrs	r3, r0, #16
 800e95e:	041b      	lsls	r3, r3, #16
 800e960:	b9d3      	cbnz	r3, 800e998 <__hi0bits+0x3c>
 800e962:	0400      	lsls	r0, r0, #16
 800e964:	2310      	movs	r3, #16
 800e966:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e96a:	bf04      	itt	eq
 800e96c:	0200      	lsleq	r0, r0, #8
 800e96e:	3308      	addeq	r3, #8
 800e970:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e974:	bf04      	itt	eq
 800e976:	0100      	lsleq	r0, r0, #4
 800e978:	3304      	addeq	r3, #4
 800e97a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e97e:	bf04      	itt	eq
 800e980:	0080      	lsleq	r0, r0, #2
 800e982:	3302      	addeq	r3, #2
 800e984:	2800      	cmp	r0, #0
 800e986:	db05      	blt.n	800e994 <__hi0bits+0x38>
 800e988:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e98c:	f103 0301 	add.w	r3, r3, #1
 800e990:	bf08      	it	eq
 800e992:	2320      	moveq	r3, #32
 800e994:	4618      	mov	r0, r3
 800e996:	4770      	bx	lr
 800e998:	2300      	movs	r3, #0
 800e99a:	e7e4      	b.n	800e966 <__hi0bits+0xa>

0800e99c <__lo0bits>:
 800e99c:	6803      	ldr	r3, [r0, #0]
 800e99e:	f013 0207 	ands.w	r2, r3, #7
 800e9a2:	d00c      	beq.n	800e9be <__lo0bits+0x22>
 800e9a4:	07d9      	lsls	r1, r3, #31
 800e9a6:	d422      	bmi.n	800e9ee <__lo0bits+0x52>
 800e9a8:	079a      	lsls	r2, r3, #30
 800e9aa:	bf49      	itett	mi
 800e9ac:	085b      	lsrmi	r3, r3, #1
 800e9ae:	089b      	lsrpl	r3, r3, #2
 800e9b0:	6003      	strmi	r3, [r0, #0]
 800e9b2:	2201      	movmi	r2, #1
 800e9b4:	bf5c      	itt	pl
 800e9b6:	6003      	strpl	r3, [r0, #0]
 800e9b8:	2202      	movpl	r2, #2
 800e9ba:	4610      	mov	r0, r2
 800e9bc:	4770      	bx	lr
 800e9be:	b299      	uxth	r1, r3
 800e9c0:	b909      	cbnz	r1, 800e9c6 <__lo0bits+0x2a>
 800e9c2:	0c1b      	lsrs	r3, r3, #16
 800e9c4:	2210      	movs	r2, #16
 800e9c6:	b2d9      	uxtb	r1, r3
 800e9c8:	b909      	cbnz	r1, 800e9ce <__lo0bits+0x32>
 800e9ca:	3208      	adds	r2, #8
 800e9cc:	0a1b      	lsrs	r3, r3, #8
 800e9ce:	0719      	lsls	r1, r3, #28
 800e9d0:	bf04      	itt	eq
 800e9d2:	091b      	lsreq	r3, r3, #4
 800e9d4:	3204      	addeq	r2, #4
 800e9d6:	0799      	lsls	r1, r3, #30
 800e9d8:	bf04      	itt	eq
 800e9da:	089b      	lsreq	r3, r3, #2
 800e9dc:	3202      	addeq	r2, #2
 800e9de:	07d9      	lsls	r1, r3, #31
 800e9e0:	d403      	bmi.n	800e9ea <__lo0bits+0x4e>
 800e9e2:	085b      	lsrs	r3, r3, #1
 800e9e4:	f102 0201 	add.w	r2, r2, #1
 800e9e8:	d003      	beq.n	800e9f2 <__lo0bits+0x56>
 800e9ea:	6003      	str	r3, [r0, #0]
 800e9ec:	e7e5      	b.n	800e9ba <__lo0bits+0x1e>
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	e7e3      	b.n	800e9ba <__lo0bits+0x1e>
 800e9f2:	2220      	movs	r2, #32
 800e9f4:	e7e1      	b.n	800e9ba <__lo0bits+0x1e>
	...

0800e9f8 <__i2b>:
 800e9f8:	b510      	push	{r4, lr}
 800e9fa:	460c      	mov	r4, r1
 800e9fc:	2101      	movs	r1, #1
 800e9fe:	f7ff ff05 	bl	800e80c <_Balloc>
 800ea02:	4602      	mov	r2, r0
 800ea04:	b928      	cbnz	r0, 800ea12 <__i2b+0x1a>
 800ea06:	4b05      	ldr	r3, [pc, #20]	; (800ea1c <__i2b+0x24>)
 800ea08:	4805      	ldr	r0, [pc, #20]	; (800ea20 <__i2b+0x28>)
 800ea0a:	f240 1145 	movw	r1, #325	; 0x145
 800ea0e:	f000 fd13 	bl	800f438 <__assert_func>
 800ea12:	2301      	movs	r3, #1
 800ea14:	6144      	str	r4, [r0, #20]
 800ea16:	6103      	str	r3, [r0, #16]
 800ea18:	bd10      	pop	{r4, pc}
 800ea1a:	bf00      	nop
 800ea1c:	08011c3c 	.word	0x08011c3c
 800ea20:	08011c4d 	.word	0x08011c4d

0800ea24 <__multiply>:
 800ea24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea28:	4691      	mov	r9, r2
 800ea2a:	690a      	ldr	r2, [r1, #16]
 800ea2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	bfb8      	it	lt
 800ea34:	460b      	movlt	r3, r1
 800ea36:	460c      	mov	r4, r1
 800ea38:	bfbc      	itt	lt
 800ea3a:	464c      	movlt	r4, r9
 800ea3c:	4699      	movlt	r9, r3
 800ea3e:	6927      	ldr	r7, [r4, #16]
 800ea40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea44:	68a3      	ldr	r3, [r4, #8]
 800ea46:	6861      	ldr	r1, [r4, #4]
 800ea48:	eb07 060a 	add.w	r6, r7, sl
 800ea4c:	42b3      	cmp	r3, r6
 800ea4e:	b085      	sub	sp, #20
 800ea50:	bfb8      	it	lt
 800ea52:	3101      	addlt	r1, #1
 800ea54:	f7ff feda 	bl	800e80c <_Balloc>
 800ea58:	b930      	cbnz	r0, 800ea68 <__multiply+0x44>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	4b44      	ldr	r3, [pc, #272]	; (800eb70 <__multiply+0x14c>)
 800ea5e:	4845      	ldr	r0, [pc, #276]	; (800eb74 <__multiply+0x150>)
 800ea60:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ea64:	f000 fce8 	bl	800f438 <__assert_func>
 800ea68:	f100 0514 	add.w	r5, r0, #20
 800ea6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea70:	462b      	mov	r3, r5
 800ea72:	2200      	movs	r2, #0
 800ea74:	4543      	cmp	r3, r8
 800ea76:	d321      	bcc.n	800eabc <__multiply+0x98>
 800ea78:	f104 0314 	add.w	r3, r4, #20
 800ea7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ea80:	f109 0314 	add.w	r3, r9, #20
 800ea84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ea88:	9202      	str	r2, [sp, #8]
 800ea8a:	1b3a      	subs	r2, r7, r4
 800ea8c:	3a15      	subs	r2, #21
 800ea8e:	f022 0203 	bic.w	r2, r2, #3
 800ea92:	3204      	adds	r2, #4
 800ea94:	f104 0115 	add.w	r1, r4, #21
 800ea98:	428f      	cmp	r7, r1
 800ea9a:	bf38      	it	cc
 800ea9c:	2204      	movcc	r2, #4
 800ea9e:	9201      	str	r2, [sp, #4]
 800eaa0:	9a02      	ldr	r2, [sp, #8]
 800eaa2:	9303      	str	r3, [sp, #12]
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d80c      	bhi.n	800eac2 <__multiply+0x9e>
 800eaa8:	2e00      	cmp	r6, #0
 800eaaa:	dd03      	ble.n	800eab4 <__multiply+0x90>
 800eaac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d05b      	beq.n	800eb6c <__multiply+0x148>
 800eab4:	6106      	str	r6, [r0, #16]
 800eab6:	b005      	add	sp, #20
 800eab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eabc:	f843 2b04 	str.w	r2, [r3], #4
 800eac0:	e7d8      	b.n	800ea74 <__multiply+0x50>
 800eac2:	f8b3 a000 	ldrh.w	sl, [r3]
 800eac6:	f1ba 0f00 	cmp.w	sl, #0
 800eaca:	d024      	beq.n	800eb16 <__multiply+0xf2>
 800eacc:	f104 0e14 	add.w	lr, r4, #20
 800ead0:	46a9      	mov	r9, r5
 800ead2:	f04f 0c00 	mov.w	ip, #0
 800ead6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eada:	f8d9 1000 	ldr.w	r1, [r9]
 800eade:	fa1f fb82 	uxth.w	fp, r2
 800eae2:	b289      	uxth	r1, r1
 800eae4:	fb0a 110b 	mla	r1, sl, fp, r1
 800eae8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800eaec:	f8d9 2000 	ldr.w	r2, [r9]
 800eaf0:	4461      	add	r1, ip
 800eaf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eaf6:	fb0a c20b 	mla	r2, sl, fp, ip
 800eafa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eafe:	b289      	uxth	r1, r1
 800eb00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eb04:	4577      	cmp	r7, lr
 800eb06:	f849 1b04 	str.w	r1, [r9], #4
 800eb0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eb0e:	d8e2      	bhi.n	800ead6 <__multiply+0xb2>
 800eb10:	9a01      	ldr	r2, [sp, #4]
 800eb12:	f845 c002 	str.w	ip, [r5, r2]
 800eb16:	9a03      	ldr	r2, [sp, #12]
 800eb18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eb1c:	3304      	adds	r3, #4
 800eb1e:	f1b9 0f00 	cmp.w	r9, #0
 800eb22:	d021      	beq.n	800eb68 <__multiply+0x144>
 800eb24:	6829      	ldr	r1, [r5, #0]
 800eb26:	f104 0c14 	add.w	ip, r4, #20
 800eb2a:	46ae      	mov	lr, r5
 800eb2c:	f04f 0a00 	mov.w	sl, #0
 800eb30:	f8bc b000 	ldrh.w	fp, [ip]
 800eb34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eb38:	fb09 220b 	mla	r2, r9, fp, r2
 800eb3c:	4452      	add	r2, sl
 800eb3e:	b289      	uxth	r1, r1
 800eb40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eb44:	f84e 1b04 	str.w	r1, [lr], #4
 800eb48:	f85c 1b04 	ldr.w	r1, [ip], #4
 800eb4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb50:	f8be 1000 	ldrh.w	r1, [lr]
 800eb54:	fb09 110a 	mla	r1, r9, sl, r1
 800eb58:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800eb5c:	4567      	cmp	r7, ip
 800eb5e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb62:	d8e5      	bhi.n	800eb30 <__multiply+0x10c>
 800eb64:	9a01      	ldr	r2, [sp, #4]
 800eb66:	50a9      	str	r1, [r5, r2]
 800eb68:	3504      	adds	r5, #4
 800eb6a:	e799      	b.n	800eaa0 <__multiply+0x7c>
 800eb6c:	3e01      	subs	r6, #1
 800eb6e:	e79b      	b.n	800eaa8 <__multiply+0x84>
 800eb70:	08011c3c 	.word	0x08011c3c
 800eb74:	08011c4d 	.word	0x08011c4d

0800eb78 <__pow5mult>:
 800eb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb7c:	4615      	mov	r5, r2
 800eb7e:	f012 0203 	ands.w	r2, r2, #3
 800eb82:	4606      	mov	r6, r0
 800eb84:	460f      	mov	r7, r1
 800eb86:	d007      	beq.n	800eb98 <__pow5mult+0x20>
 800eb88:	4c25      	ldr	r4, [pc, #148]	; (800ec20 <__pow5mult+0xa8>)
 800eb8a:	3a01      	subs	r2, #1
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb92:	f7ff fe9d 	bl	800e8d0 <__multadd>
 800eb96:	4607      	mov	r7, r0
 800eb98:	10ad      	asrs	r5, r5, #2
 800eb9a:	d03d      	beq.n	800ec18 <__pow5mult+0xa0>
 800eb9c:	69f4      	ldr	r4, [r6, #28]
 800eb9e:	b97c      	cbnz	r4, 800ebc0 <__pow5mult+0x48>
 800eba0:	2010      	movs	r0, #16
 800eba2:	f7ff fd7f 	bl	800e6a4 <malloc>
 800eba6:	4602      	mov	r2, r0
 800eba8:	61f0      	str	r0, [r6, #28]
 800ebaa:	b928      	cbnz	r0, 800ebb8 <__pow5mult+0x40>
 800ebac:	4b1d      	ldr	r3, [pc, #116]	; (800ec24 <__pow5mult+0xac>)
 800ebae:	481e      	ldr	r0, [pc, #120]	; (800ec28 <__pow5mult+0xb0>)
 800ebb0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ebb4:	f000 fc40 	bl	800f438 <__assert_func>
 800ebb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ebbc:	6004      	str	r4, [r0, #0]
 800ebbe:	60c4      	str	r4, [r0, #12]
 800ebc0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ebc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebc8:	b94c      	cbnz	r4, 800ebde <__pow5mult+0x66>
 800ebca:	f240 2171 	movw	r1, #625	; 0x271
 800ebce:	4630      	mov	r0, r6
 800ebd0:	f7ff ff12 	bl	800e9f8 <__i2b>
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ebda:	4604      	mov	r4, r0
 800ebdc:	6003      	str	r3, [r0, #0]
 800ebde:	f04f 0900 	mov.w	r9, #0
 800ebe2:	07eb      	lsls	r3, r5, #31
 800ebe4:	d50a      	bpl.n	800ebfc <__pow5mult+0x84>
 800ebe6:	4639      	mov	r1, r7
 800ebe8:	4622      	mov	r2, r4
 800ebea:	4630      	mov	r0, r6
 800ebec:	f7ff ff1a 	bl	800ea24 <__multiply>
 800ebf0:	4639      	mov	r1, r7
 800ebf2:	4680      	mov	r8, r0
 800ebf4:	4630      	mov	r0, r6
 800ebf6:	f7ff fe49 	bl	800e88c <_Bfree>
 800ebfa:	4647      	mov	r7, r8
 800ebfc:	106d      	asrs	r5, r5, #1
 800ebfe:	d00b      	beq.n	800ec18 <__pow5mult+0xa0>
 800ec00:	6820      	ldr	r0, [r4, #0]
 800ec02:	b938      	cbnz	r0, 800ec14 <__pow5mult+0x9c>
 800ec04:	4622      	mov	r2, r4
 800ec06:	4621      	mov	r1, r4
 800ec08:	4630      	mov	r0, r6
 800ec0a:	f7ff ff0b 	bl	800ea24 <__multiply>
 800ec0e:	6020      	str	r0, [r4, #0]
 800ec10:	f8c0 9000 	str.w	r9, [r0]
 800ec14:	4604      	mov	r4, r0
 800ec16:	e7e4      	b.n	800ebe2 <__pow5mult+0x6a>
 800ec18:	4638      	mov	r0, r7
 800ec1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec1e:	bf00      	nop
 800ec20:	08011d98 	.word	0x08011d98
 800ec24:	08011bcd 	.word	0x08011bcd
 800ec28:	08011c4d 	.word	0x08011c4d

0800ec2c <__lshift>:
 800ec2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec30:	460c      	mov	r4, r1
 800ec32:	6849      	ldr	r1, [r1, #4]
 800ec34:	6923      	ldr	r3, [r4, #16]
 800ec36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec3a:	68a3      	ldr	r3, [r4, #8]
 800ec3c:	4607      	mov	r7, r0
 800ec3e:	4691      	mov	r9, r2
 800ec40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec44:	f108 0601 	add.w	r6, r8, #1
 800ec48:	42b3      	cmp	r3, r6
 800ec4a:	db0b      	blt.n	800ec64 <__lshift+0x38>
 800ec4c:	4638      	mov	r0, r7
 800ec4e:	f7ff fddd 	bl	800e80c <_Balloc>
 800ec52:	4605      	mov	r5, r0
 800ec54:	b948      	cbnz	r0, 800ec6a <__lshift+0x3e>
 800ec56:	4602      	mov	r2, r0
 800ec58:	4b28      	ldr	r3, [pc, #160]	; (800ecfc <__lshift+0xd0>)
 800ec5a:	4829      	ldr	r0, [pc, #164]	; (800ed00 <__lshift+0xd4>)
 800ec5c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ec60:	f000 fbea 	bl	800f438 <__assert_func>
 800ec64:	3101      	adds	r1, #1
 800ec66:	005b      	lsls	r3, r3, #1
 800ec68:	e7ee      	b.n	800ec48 <__lshift+0x1c>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	f100 0114 	add.w	r1, r0, #20
 800ec70:	f100 0210 	add.w	r2, r0, #16
 800ec74:	4618      	mov	r0, r3
 800ec76:	4553      	cmp	r3, sl
 800ec78:	db33      	blt.n	800ece2 <__lshift+0xb6>
 800ec7a:	6920      	ldr	r0, [r4, #16]
 800ec7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec80:	f104 0314 	add.w	r3, r4, #20
 800ec84:	f019 091f 	ands.w	r9, r9, #31
 800ec88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ec90:	d02b      	beq.n	800ecea <__lshift+0xbe>
 800ec92:	f1c9 0e20 	rsb	lr, r9, #32
 800ec96:	468a      	mov	sl, r1
 800ec98:	2200      	movs	r2, #0
 800ec9a:	6818      	ldr	r0, [r3, #0]
 800ec9c:	fa00 f009 	lsl.w	r0, r0, r9
 800eca0:	4310      	orrs	r0, r2
 800eca2:	f84a 0b04 	str.w	r0, [sl], #4
 800eca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecaa:	459c      	cmp	ip, r3
 800ecac:	fa22 f20e 	lsr.w	r2, r2, lr
 800ecb0:	d8f3      	bhi.n	800ec9a <__lshift+0x6e>
 800ecb2:	ebac 0304 	sub.w	r3, ip, r4
 800ecb6:	3b15      	subs	r3, #21
 800ecb8:	f023 0303 	bic.w	r3, r3, #3
 800ecbc:	3304      	adds	r3, #4
 800ecbe:	f104 0015 	add.w	r0, r4, #21
 800ecc2:	4584      	cmp	ip, r0
 800ecc4:	bf38      	it	cc
 800ecc6:	2304      	movcc	r3, #4
 800ecc8:	50ca      	str	r2, [r1, r3]
 800ecca:	b10a      	cbz	r2, 800ecd0 <__lshift+0xa4>
 800eccc:	f108 0602 	add.w	r6, r8, #2
 800ecd0:	3e01      	subs	r6, #1
 800ecd2:	4638      	mov	r0, r7
 800ecd4:	612e      	str	r6, [r5, #16]
 800ecd6:	4621      	mov	r1, r4
 800ecd8:	f7ff fdd8 	bl	800e88c <_Bfree>
 800ecdc:	4628      	mov	r0, r5
 800ecde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ece2:	f842 0f04 	str.w	r0, [r2, #4]!
 800ece6:	3301      	adds	r3, #1
 800ece8:	e7c5      	b.n	800ec76 <__lshift+0x4a>
 800ecea:	3904      	subs	r1, #4
 800ecec:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecf0:	f841 2f04 	str.w	r2, [r1, #4]!
 800ecf4:	459c      	cmp	ip, r3
 800ecf6:	d8f9      	bhi.n	800ecec <__lshift+0xc0>
 800ecf8:	e7ea      	b.n	800ecd0 <__lshift+0xa4>
 800ecfa:	bf00      	nop
 800ecfc:	08011c3c 	.word	0x08011c3c
 800ed00:	08011c4d 	.word	0x08011c4d

0800ed04 <__mcmp>:
 800ed04:	b530      	push	{r4, r5, lr}
 800ed06:	6902      	ldr	r2, [r0, #16]
 800ed08:	690c      	ldr	r4, [r1, #16]
 800ed0a:	1b12      	subs	r2, r2, r4
 800ed0c:	d10e      	bne.n	800ed2c <__mcmp+0x28>
 800ed0e:	f100 0314 	add.w	r3, r0, #20
 800ed12:	3114      	adds	r1, #20
 800ed14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ed18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ed1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ed20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ed24:	42a5      	cmp	r5, r4
 800ed26:	d003      	beq.n	800ed30 <__mcmp+0x2c>
 800ed28:	d305      	bcc.n	800ed36 <__mcmp+0x32>
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	4610      	mov	r0, r2
 800ed2e:	bd30      	pop	{r4, r5, pc}
 800ed30:	4283      	cmp	r3, r0
 800ed32:	d3f3      	bcc.n	800ed1c <__mcmp+0x18>
 800ed34:	e7fa      	b.n	800ed2c <__mcmp+0x28>
 800ed36:	f04f 32ff 	mov.w	r2, #4294967295
 800ed3a:	e7f7      	b.n	800ed2c <__mcmp+0x28>

0800ed3c <__mdiff>:
 800ed3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed40:	460c      	mov	r4, r1
 800ed42:	4606      	mov	r6, r0
 800ed44:	4611      	mov	r1, r2
 800ed46:	4620      	mov	r0, r4
 800ed48:	4690      	mov	r8, r2
 800ed4a:	f7ff ffdb 	bl	800ed04 <__mcmp>
 800ed4e:	1e05      	subs	r5, r0, #0
 800ed50:	d110      	bne.n	800ed74 <__mdiff+0x38>
 800ed52:	4629      	mov	r1, r5
 800ed54:	4630      	mov	r0, r6
 800ed56:	f7ff fd59 	bl	800e80c <_Balloc>
 800ed5a:	b930      	cbnz	r0, 800ed6a <__mdiff+0x2e>
 800ed5c:	4b3a      	ldr	r3, [pc, #232]	; (800ee48 <__mdiff+0x10c>)
 800ed5e:	4602      	mov	r2, r0
 800ed60:	f240 2137 	movw	r1, #567	; 0x237
 800ed64:	4839      	ldr	r0, [pc, #228]	; (800ee4c <__mdiff+0x110>)
 800ed66:	f000 fb67 	bl	800f438 <__assert_func>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed74:	bfa4      	itt	ge
 800ed76:	4643      	movge	r3, r8
 800ed78:	46a0      	movge	r8, r4
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ed80:	bfa6      	itte	ge
 800ed82:	461c      	movge	r4, r3
 800ed84:	2500      	movge	r5, #0
 800ed86:	2501      	movlt	r5, #1
 800ed88:	f7ff fd40 	bl	800e80c <_Balloc>
 800ed8c:	b920      	cbnz	r0, 800ed98 <__mdiff+0x5c>
 800ed8e:	4b2e      	ldr	r3, [pc, #184]	; (800ee48 <__mdiff+0x10c>)
 800ed90:	4602      	mov	r2, r0
 800ed92:	f240 2145 	movw	r1, #581	; 0x245
 800ed96:	e7e5      	b.n	800ed64 <__mdiff+0x28>
 800ed98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ed9c:	6926      	ldr	r6, [r4, #16]
 800ed9e:	60c5      	str	r5, [r0, #12]
 800eda0:	f104 0914 	add.w	r9, r4, #20
 800eda4:	f108 0514 	add.w	r5, r8, #20
 800eda8:	f100 0e14 	add.w	lr, r0, #20
 800edac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800edb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800edb4:	f108 0210 	add.w	r2, r8, #16
 800edb8:	46f2      	mov	sl, lr
 800edba:	2100      	movs	r1, #0
 800edbc:	f859 3b04 	ldr.w	r3, [r9], #4
 800edc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800edc4:	fa11 f88b 	uxtah	r8, r1, fp
 800edc8:	b299      	uxth	r1, r3
 800edca:	0c1b      	lsrs	r3, r3, #16
 800edcc:	eba8 0801 	sub.w	r8, r8, r1
 800edd0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800edd4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800edd8:	fa1f f888 	uxth.w	r8, r8
 800eddc:	1419      	asrs	r1, r3, #16
 800edde:	454e      	cmp	r6, r9
 800ede0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ede4:	f84a 3b04 	str.w	r3, [sl], #4
 800ede8:	d8e8      	bhi.n	800edbc <__mdiff+0x80>
 800edea:	1b33      	subs	r3, r6, r4
 800edec:	3b15      	subs	r3, #21
 800edee:	f023 0303 	bic.w	r3, r3, #3
 800edf2:	3304      	adds	r3, #4
 800edf4:	3415      	adds	r4, #21
 800edf6:	42a6      	cmp	r6, r4
 800edf8:	bf38      	it	cc
 800edfa:	2304      	movcc	r3, #4
 800edfc:	441d      	add	r5, r3
 800edfe:	4473      	add	r3, lr
 800ee00:	469e      	mov	lr, r3
 800ee02:	462e      	mov	r6, r5
 800ee04:	4566      	cmp	r6, ip
 800ee06:	d30e      	bcc.n	800ee26 <__mdiff+0xea>
 800ee08:	f10c 0203 	add.w	r2, ip, #3
 800ee0c:	1b52      	subs	r2, r2, r5
 800ee0e:	f022 0203 	bic.w	r2, r2, #3
 800ee12:	3d03      	subs	r5, #3
 800ee14:	45ac      	cmp	ip, r5
 800ee16:	bf38      	it	cc
 800ee18:	2200      	movcc	r2, #0
 800ee1a:	4413      	add	r3, r2
 800ee1c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ee20:	b17a      	cbz	r2, 800ee42 <__mdiff+0x106>
 800ee22:	6107      	str	r7, [r0, #16]
 800ee24:	e7a4      	b.n	800ed70 <__mdiff+0x34>
 800ee26:	f856 8b04 	ldr.w	r8, [r6], #4
 800ee2a:	fa11 f288 	uxtah	r2, r1, r8
 800ee2e:	1414      	asrs	r4, r2, #16
 800ee30:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ee34:	b292      	uxth	r2, r2
 800ee36:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ee3a:	f84e 2b04 	str.w	r2, [lr], #4
 800ee3e:	1421      	asrs	r1, r4, #16
 800ee40:	e7e0      	b.n	800ee04 <__mdiff+0xc8>
 800ee42:	3f01      	subs	r7, #1
 800ee44:	e7ea      	b.n	800ee1c <__mdiff+0xe0>
 800ee46:	bf00      	nop
 800ee48:	08011c3c 	.word	0x08011c3c
 800ee4c:	08011c4d 	.word	0x08011c4d

0800ee50 <__d2b>:
 800ee50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee54:	460f      	mov	r7, r1
 800ee56:	2101      	movs	r1, #1
 800ee58:	ec59 8b10 	vmov	r8, r9, d0
 800ee5c:	4616      	mov	r6, r2
 800ee5e:	f7ff fcd5 	bl	800e80c <_Balloc>
 800ee62:	4604      	mov	r4, r0
 800ee64:	b930      	cbnz	r0, 800ee74 <__d2b+0x24>
 800ee66:	4602      	mov	r2, r0
 800ee68:	4b24      	ldr	r3, [pc, #144]	; (800eefc <__d2b+0xac>)
 800ee6a:	4825      	ldr	r0, [pc, #148]	; (800ef00 <__d2b+0xb0>)
 800ee6c:	f240 310f 	movw	r1, #783	; 0x30f
 800ee70:	f000 fae2 	bl	800f438 <__assert_func>
 800ee74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ee78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee7c:	bb2d      	cbnz	r5, 800eeca <__d2b+0x7a>
 800ee7e:	9301      	str	r3, [sp, #4]
 800ee80:	f1b8 0300 	subs.w	r3, r8, #0
 800ee84:	d026      	beq.n	800eed4 <__d2b+0x84>
 800ee86:	4668      	mov	r0, sp
 800ee88:	9300      	str	r3, [sp, #0]
 800ee8a:	f7ff fd87 	bl	800e99c <__lo0bits>
 800ee8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ee92:	b1e8      	cbz	r0, 800eed0 <__d2b+0x80>
 800ee94:	f1c0 0320 	rsb	r3, r0, #32
 800ee98:	fa02 f303 	lsl.w	r3, r2, r3
 800ee9c:	430b      	orrs	r3, r1
 800ee9e:	40c2      	lsrs	r2, r0
 800eea0:	6163      	str	r3, [r4, #20]
 800eea2:	9201      	str	r2, [sp, #4]
 800eea4:	9b01      	ldr	r3, [sp, #4]
 800eea6:	61a3      	str	r3, [r4, #24]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	bf14      	ite	ne
 800eeac:	2202      	movne	r2, #2
 800eeae:	2201      	moveq	r2, #1
 800eeb0:	6122      	str	r2, [r4, #16]
 800eeb2:	b1bd      	cbz	r5, 800eee4 <__d2b+0x94>
 800eeb4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eeb8:	4405      	add	r5, r0
 800eeba:	603d      	str	r5, [r7, #0]
 800eebc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eec0:	6030      	str	r0, [r6, #0]
 800eec2:	4620      	mov	r0, r4
 800eec4:	b003      	add	sp, #12
 800eec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eeca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eece:	e7d6      	b.n	800ee7e <__d2b+0x2e>
 800eed0:	6161      	str	r1, [r4, #20]
 800eed2:	e7e7      	b.n	800eea4 <__d2b+0x54>
 800eed4:	a801      	add	r0, sp, #4
 800eed6:	f7ff fd61 	bl	800e99c <__lo0bits>
 800eeda:	9b01      	ldr	r3, [sp, #4]
 800eedc:	6163      	str	r3, [r4, #20]
 800eede:	3020      	adds	r0, #32
 800eee0:	2201      	movs	r2, #1
 800eee2:	e7e5      	b.n	800eeb0 <__d2b+0x60>
 800eee4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eee8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eeec:	6038      	str	r0, [r7, #0]
 800eeee:	6918      	ldr	r0, [r3, #16]
 800eef0:	f7ff fd34 	bl	800e95c <__hi0bits>
 800eef4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eef8:	e7e2      	b.n	800eec0 <__d2b+0x70>
 800eefa:	bf00      	nop
 800eefc:	08011c3c 	.word	0x08011c3c
 800ef00:	08011c4d 	.word	0x08011c4d

0800ef04 <__ssputs_r>:
 800ef04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef08:	688e      	ldr	r6, [r1, #8]
 800ef0a:	461f      	mov	r7, r3
 800ef0c:	42be      	cmp	r6, r7
 800ef0e:	680b      	ldr	r3, [r1, #0]
 800ef10:	4682      	mov	sl, r0
 800ef12:	460c      	mov	r4, r1
 800ef14:	4690      	mov	r8, r2
 800ef16:	d82c      	bhi.n	800ef72 <__ssputs_r+0x6e>
 800ef18:	898a      	ldrh	r2, [r1, #12]
 800ef1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef1e:	d026      	beq.n	800ef6e <__ssputs_r+0x6a>
 800ef20:	6965      	ldr	r5, [r4, #20]
 800ef22:	6909      	ldr	r1, [r1, #16]
 800ef24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef28:	eba3 0901 	sub.w	r9, r3, r1
 800ef2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef30:	1c7b      	adds	r3, r7, #1
 800ef32:	444b      	add	r3, r9
 800ef34:	106d      	asrs	r5, r5, #1
 800ef36:	429d      	cmp	r5, r3
 800ef38:	bf38      	it	cc
 800ef3a:	461d      	movcc	r5, r3
 800ef3c:	0553      	lsls	r3, r2, #21
 800ef3e:	d527      	bpl.n	800ef90 <__ssputs_r+0x8c>
 800ef40:	4629      	mov	r1, r5
 800ef42:	f7ff fbd7 	bl	800e6f4 <_malloc_r>
 800ef46:	4606      	mov	r6, r0
 800ef48:	b360      	cbz	r0, 800efa4 <__ssputs_r+0xa0>
 800ef4a:	6921      	ldr	r1, [r4, #16]
 800ef4c:	464a      	mov	r2, r9
 800ef4e:	f7fe fcd2 	bl	800d8f6 <memcpy>
 800ef52:	89a3      	ldrh	r3, [r4, #12]
 800ef54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ef58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef5c:	81a3      	strh	r3, [r4, #12]
 800ef5e:	6126      	str	r6, [r4, #16]
 800ef60:	6165      	str	r5, [r4, #20]
 800ef62:	444e      	add	r6, r9
 800ef64:	eba5 0509 	sub.w	r5, r5, r9
 800ef68:	6026      	str	r6, [r4, #0]
 800ef6a:	60a5      	str	r5, [r4, #8]
 800ef6c:	463e      	mov	r6, r7
 800ef6e:	42be      	cmp	r6, r7
 800ef70:	d900      	bls.n	800ef74 <__ssputs_r+0x70>
 800ef72:	463e      	mov	r6, r7
 800ef74:	6820      	ldr	r0, [r4, #0]
 800ef76:	4632      	mov	r2, r6
 800ef78:	4641      	mov	r1, r8
 800ef7a:	f7fe fbfd 	bl	800d778 <memmove>
 800ef7e:	68a3      	ldr	r3, [r4, #8]
 800ef80:	1b9b      	subs	r3, r3, r6
 800ef82:	60a3      	str	r3, [r4, #8]
 800ef84:	6823      	ldr	r3, [r4, #0]
 800ef86:	4433      	add	r3, r6
 800ef88:	6023      	str	r3, [r4, #0]
 800ef8a:	2000      	movs	r0, #0
 800ef8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef90:	462a      	mov	r2, r5
 800ef92:	f000 fa97 	bl	800f4c4 <_realloc_r>
 800ef96:	4606      	mov	r6, r0
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	d1e0      	bne.n	800ef5e <__ssputs_r+0x5a>
 800ef9c:	6921      	ldr	r1, [r4, #16]
 800ef9e:	4650      	mov	r0, sl
 800efa0:	f7ff fb34 	bl	800e60c <_free_r>
 800efa4:	230c      	movs	r3, #12
 800efa6:	f8ca 3000 	str.w	r3, [sl]
 800efaa:	89a3      	ldrh	r3, [r4, #12]
 800efac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efb0:	81a3      	strh	r3, [r4, #12]
 800efb2:	f04f 30ff 	mov.w	r0, #4294967295
 800efb6:	e7e9      	b.n	800ef8c <__ssputs_r+0x88>

0800efb8 <_svfiprintf_r>:
 800efb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efbc:	4698      	mov	r8, r3
 800efbe:	898b      	ldrh	r3, [r1, #12]
 800efc0:	061b      	lsls	r3, r3, #24
 800efc2:	b09d      	sub	sp, #116	; 0x74
 800efc4:	4607      	mov	r7, r0
 800efc6:	460d      	mov	r5, r1
 800efc8:	4614      	mov	r4, r2
 800efca:	d50e      	bpl.n	800efea <_svfiprintf_r+0x32>
 800efcc:	690b      	ldr	r3, [r1, #16]
 800efce:	b963      	cbnz	r3, 800efea <_svfiprintf_r+0x32>
 800efd0:	2140      	movs	r1, #64	; 0x40
 800efd2:	f7ff fb8f 	bl	800e6f4 <_malloc_r>
 800efd6:	6028      	str	r0, [r5, #0]
 800efd8:	6128      	str	r0, [r5, #16]
 800efda:	b920      	cbnz	r0, 800efe6 <_svfiprintf_r+0x2e>
 800efdc:	230c      	movs	r3, #12
 800efde:	603b      	str	r3, [r7, #0]
 800efe0:	f04f 30ff 	mov.w	r0, #4294967295
 800efe4:	e0d0      	b.n	800f188 <_svfiprintf_r+0x1d0>
 800efe6:	2340      	movs	r3, #64	; 0x40
 800efe8:	616b      	str	r3, [r5, #20]
 800efea:	2300      	movs	r3, #0
 800efec:	9309      	str	r3, [sp, #36]	; 0x24
 800efee:	2320      	movs	r3, #32
 800eff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eff4:	f8cd 800c 	str.w	r8, [sp, #12]
 800eff8:	2330      	movs	r3, #48	; 0x30
 800effa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f1a0 <_svfiprintf_r+0x1e8>
 800effe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f002:	f04f 0901 	mov.w	r9, #1
 800f006:	4623      	mov	r3, r4
 800f008:	469a      	mov	sl, r3
 800f00a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f00e:	b10a      	cbz	r2, 800f014 <_svfiprintf_r+0x5c>
 800f010:	2a25      	cmp	r2, #37	; 0x25
 800f012:	d1f9      	bne.n	800f008 <_svfiprintf_r+0x50>
 800f014:	ebba 0b04 	subs.w	fp, sl, r4
 800f018:	d00b      	beq.n	800f032 <_svfiprintf_r+0x7a>
 800f01a:	465b      	mov	r3, fp
 800f01c:	4622      	mov	r2, r4
 800f01e:	4629      	mov	r1, r5
 800f020:	4638      	mov	r0, r7
 800f022:	f7ff ff6f 	bl	800ef04 <__ssputs_r>
 800f026:	3001      	adds	r0, #1
 800f028:	f000 80a9 	beq.w	800f17e <_svfiprintf_r+0x1c6>
 800f02c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f02e:	445a      	add	r2, fp
 800f030:	9209      	str	r2, [sp, #36]	; 0x24
 800f032:	f89a 3000 	ldrb.w	r3, [sl]
 800f036:	2b00      	cmp	r3, #0
 800f038:	f000 80a1 	beq.w	800f17e <_svfiprintf_r+0x1c6>
 800f03c:	2300      	movs	r3, #0
 800f03e:	f04f 32ff 	mov.w	r2, #4294967295
 800f042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f046:	f10a 0a01 	add.w	sl, sl, #1
 800f04a:	9304      	str	r3, [sp, #16]
 800f04c:	9307      	str	r3, [sp, #28]
 800f04e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f052:	931a      	str	r3, [sp, #104]	; 0x68
 800f054:	4654      	mov	r4, sl
 800f056:	2205      	movs	r2, #5
 800f058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f05c:	4850      	ldr	r0, [pc, #320]	; (800f1a0 <_svfiprintf_r+0x1e8>)
 800f05e:	f7f1 f8cf 	bl	8000200 <memchr>
 800f062:	9a04      	ldr	r2, [sp, #16]
 800f064:	b9d8      	cbnz	r0, 800f09e <_svfiprintf_r+0xe6>
 800f066:	06d0      	lsls	r0, r2, #27
 800f068:	bf44      	itt	mi
 800f06a:	2320      	movmi	r3, #32
 800f06c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f070:	0711      	lsls	r1, r2, #28
 800f072:	bf44      	itt	mi
 800f074:	232b      	movmi	r3, #43	; 0x2b
 800f076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f07a:	f89a 3000 	ldrb.w	r3, [sl]
 800f07e:	2b2a      	cmp	r3, #42	; 0x2a
 800f080:	d015      	beq.n	800f0ae <_svfiprintf_r+0xf6>
 800f082:	9a07      	ldr	r2, [sp, #28]
 800f084:	4654      	mov	r4, sl
 800f086:	2000      	movs	r0, #0
 800f088:	f04f 0c0a 	mov.w	ip, #10
 800f08c:	4621      	mov	r1, r4
 800f08e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f092:	3b30      	subs	r3, #48	; 0x30
 800f094:	2b09      	cmp	r3, #9
 800f096:	d94d      	bls.n	800f134 <_svfiprintf_r+0x17c>
 800f098:	b1b0      	cbz	r0, 800f0c8 <_svfiprintf_r+0x110>
 800f09a:	9207      	str	r2, [sp, #28]
 800f09c:	e014      	b.n	800f0c8 <_svfiprintf_r+0x110>
 800f09e:	eba0 0308 	sub.w	r3, r0, r8
 800f0a2:	fa09 f303 	lsl.w	r3, r9, r3
 800f0a6:	4313      	orrs	r3, r2
 800f0a8:	9304      	str	r3, [sp, #16]
 800f0aa:	46a2      	mov	sl, r4
 800f0ac:	e7d2      	b.n	800f054 <_svfiprintf_r+0x9c>
 800f0ae:	9b03      	ldr	r3, [sp, #12]
 800f0b0:	1d19      	adds	r1, r3, #4
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	9103      	str	r1, [sp, #12]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	bfbb      	ittet	lt
 800f0ba:	425b      	neglt	r3, r3
 800f0bc:	f042 0202 	orrlt.w	r2, r2, #2
 800f0c0:	9307      	strge	r3, [sp, #28]
 800f0c2:	9307      	strlt	r3, [sp, #28]
 800f0c4:	bfb8      	it	lt
 800f0c6:	9204      	strlt	r2, [sp, #16]
 800f0c8:	7823      	ldrb	r3, [r4, #0]
 800f0ca:	2b2e      	cmp	r3, #46	; 0x2e
 800f0cc:	d10c      	bne.n	800f0e8 <_svfiprintf_r+0x130>
 800f0ce:	7863      	ldrb	r3, [r4, #1]
 800f0d0:	2b2a      	cmp	r3, #42	; 0x2a
 800f0d2:	d134      	bne.n	800f13e <_svfiprintf_r+0x186>
 800f0d4:	9b03      	ldr	r3, [sp, #12]
 800f0d6:	1d1a      	adds	r2, r3, #4
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	9203      	str	r2, [sp, #12]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	bfb8      	it	lt
 800f0e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f0e4:	3402      	adds	r4, #2
 800f0e6:	9305      	str	r3, [sp, #20]
 800f0e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f1b0 <_svfiprintf_r+0x1f8>
 800f0ec:	7821      	ldrb	r1, [r4, #0]
 800f0ee:	2203      	movs	r2, #3
 800f0f0:	4650      	mov	r0, sl
 800f0f2:	f7f1 f885 	bl	8000200 <memchr>
 800f0f6:	b138      	cbz	r0, 800f108 <_svfiprintf_r+0x150>
 800f0f8:	9b04      	ldr	r3, [sp, #16]
 800f0fa:	eba0 000a 	sub.w	r0, r0, sl
 800f0fe:	2240      	movs	r2, #64	; 0x40
 800f100:	4082      	lsls	r2, r0
 800f102:	4313      	orrs	r3, r2
 800f104:	3401      	adds	r4, #1
 800f106:	9304      	str	r3, [sp, #16]
 800f108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f10c:	4825      	ldr	r0, [pc, #148]	; (800f1a4 <_svfiprintf_r+0x1ec>)
 800f10e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f112:	2206      	movs	r2, #6
 800f114:	f7f1 f874 	bl	8000200 <memchr>
 800f118:	2800      	cmp	r0, #0
 800f11a:	d038      	beq.n	800f18e <_svfiprintf_r+0x1d6>
 800f11c:	4b22      	ldr	r3, [pc, #136]	; (800f1a8 <_svfiprintf_r+0x1f0>)
 800f11e:	bb1b      	cbnz	r3, 800f168 <_svfiprintf_r+0x1b0>
 800f120:	9b03      	ldr	r3, [sp, #12]
 800f122:	3307      	adds	r3, #7
 800f124:	f023 0307 	bic.w	r3, r3, #7
 800f128:	3308      	adds	r3, #8
 800f12a:	9303      	str	r3, [sp, #12]
 800f12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f12e:	4433      	add	r3, r6
 800f130:	9309      	str	r3, [sp, #36]	; 0x24
 800f132:	e768      	b.n	800f006 <_svfiprintf_r+0x4e>
 800f134:	fb0c 3202 	mla	r2, ip, r2, r3
 800f138:	460c      	mov	r4, r1
 800f13a:	2001      	movs	r0, #1
 800f13c:	e7a6      	b.n	800f08c <_svfiprintf_r+0xd4>
 800f13e:	2300      	movs	r3, #0
 800f140:	3401      	adds	r4, #1
 800f142:	9305      	str	r3, [sp, #20]
 800f144:	4619      	mov	r1, r3
 800f146:	f04f 0c0a 	mov.w	ip, #10
 800f14a:	4620      	mov	r0, r4
 800f14c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f150:	3a30      	subs	r2, #48	; 0x30
 800f152:	2a09      	cmp	r2, #9
 800f154:	d903      	bls.n	800f15e <_svfiprintf_r+0x1a6>
 800f156:	2b00      	cmp	r3, #0
 800f158:	d0c6      	beq.n	800f0e8 <_svfiprintf_r+0x130>
 800f15a:	9105      	str	r1, [sp, #20]
 800f15c:	e7c4      	b.n	800f0e8 <_svfiprintf_r+0x130>
 800f15e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f162:	4604      	mov	r4, r0
 800f164:	2301      	movs	r3, #1
 800f166:	e7f0      	b.n	800f14a <_svfiprintf_r+0x192>
 800f168:	ab03      	add	r3, sp, #12
 800f16a:	9300      	str	r3, [sp, #0]
 800f16c:	462a      	mov	r2, r5
 800f16e:	4b0f      	ldr	r3, [pc, #60]	; (800f1ac <_svfiprintf_r+0x1f4>)
 800f170:	a904      	add	r1, sp, #16
 800f172:	4638      	mov	r0, r7
 800f174:	f7fd fcf0 	bl	800cb58 <_printf_float>
 800f178:	1c42      	adds	r2, r0, #1
 800f17a:	4606      	mov	r6, r0
 800f17c:	d1d6      	bne.n	800f12c <_svfiprintf_r+0x174>
 800f17e:	89ab      	ldrh	r3, [r5, #12]
 800f180:	065b      	lsls	r3, r3, #25
 800f182:	f53f af2d 	bmi.w	800efe0 <_svfiprintf_r+0x28>
 800f186:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f188:	b01d      	add	sp, #116	; 0x74
 800f18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f18e:	ab03      	add	r3, sp, #12
 800f190:	9300      	str	r3, [sp, #0]
 800f192:	462a      	mov	r2, r5
 800f194:	4b05      	ldr	r3, [pc, #20]	; (800f1ac <_svfiprintf_r+0x1f4>)
 800f196:	a904      	add	r1, sp, #16
 800f198:	4638      	mov	r0, r7
 800f19a:	f7fd ff81 	bl	800d0a0 <_printf_i>
 800f19e:	e7eb      	b.n	800f178 <_svfiprintf_r+0x1c0>
 800f1a0:	08011da4 	.word	0x08011da4
 800f1a4:	08011dae 	.word	0x08011dae
 800f1a8:	0800cb59 	.word	0x0800cb59
 800f1ac:	0800ef05 	.word	0x0800ef05
 800f1b0:	08011daa 	.word	0x08011daa

0800f1b4 <__sflush_r>:
 800f1b4:	898a      	ldrh	r2, [r1, #12]
 800f1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ba:	4605      	mov	r5, r0
 800f1bc:	0710      	lsls	r0, r2, #28
 800f1be:	460c      	mov	r4, r1
 800f1c0:	d458      	bmi.n	800f274 <__sflush_r+0xc0>
 800f1c2:	684b      	ldr	r3, [r1, #4]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	dc05      	bgt.n	800f1d4 <__sflush_r+0x20>
 800f1c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	dc02      	bgt.n	800f1d4 <__sflush_r+0x20>
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1d6:	2e00      	cmp	r6, #0
 800f1d8:	d0f9      	beq.n	800f1ce <__sflush_r+0x1a>
 800f1da:	2300      	movs	r3, #0
 800f1dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1e0:	682f      	ldr	r7, [r5, #0]
 800f1e2:	6a21      	ldr	r1, [r4, #32]
 800f1e4:	602b      	str	r3, [r5, #0]
 800f1e6:	d032      	beq.n	800f24e <__sflush_r+0x9a>
 800f1e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1ea:	89a3      	ldrh	r3, [r4, #12]
 800f1ec:	075a      	lsls	r2, r3, #29
 800f1ee:	d505      	bpl.n	800f1fc <__sflush_r+0x48>
 800f1f0:	6863      	ldr	r3, [r4, #4]
 800f1f2:	1ac0      	subs	r0, r0, r3
 800f1f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1f6:	b10b      	cbz	r3, 800f1fc <__sflush_r+0x48>
 800f1f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1fa:	1ac0      	subs	r0, r0, r3
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	4602      	mov	r2, r0
 800f200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f202:	6a21      	ldr	r1, [r4, #32]
 800f204:	4628      	mov	r0, r5
 800f206:	47b0      	blx	r6
 800f208:	1c43      	adds	r3, r0, #1
 800f20a:	89a3      	ldrh	r3, [r4, #12]
 800f20c:	d106      	bne.n	800f21c <__sflush_r+0x68>
 800f20e:	6829      	ldr	r1, [r5, #0]
 800f210:	291d      	cmp	r1, #29
 800f212:	d82b      	bhi.n	800f26c <__sflush_r+0xb8>
 800f214:	4a29      	ldr	r2, [pc, #164]	; (800f2bc <__sflush_r+0x108>)
 800f216:	410a      	asrs	r2, r1
 800f218:	07d6      	lsls	r6, r2, #31
 800f21a:	d427      	bmi.n	800f26c <__sflush_r+0xb8>
 800f21c:	2200      	movs	r2, #0
 800f21e:	6062      	str	r2, [r4, #4]
 800f220:	04d9      	lsls	r1, r3, #19
 800f222:	6922      	ldr	r2, [r4, #16]
 800f224:	6022      	str	r2, [r4, #0]
 800f226:	d504      	bpl.n	800f232 <__sflush_r+0x7e>
 800f228:	1c42      	adds	r2, r0, #1
 800f22a:	d101      	bne.n	800f230 <__sflush_r+0x7c>
 800f22c:	682b      	ldr	r3, [r5, #0]
 800f22e:	b903      	cbnz	r3, 800f232 <__sflush_r+0x7e>
 800f230:	6560      	str	r0, [r4, #84]	; 0x54
 800f232:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f234:	602f      	str	r7, [r5, #0]
 800f236:	2900      	cmp	r1, #0
 800f238:	d0c9      	beq.n	800f1ce <__sflush_r+0x1a>
 800f23a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f23e:	4299      	cmp	r1, r3
 800f240:	d002      	beq.n	800f248 <__sflush_r+0x94>
 800f242:	4628      	mov	r0, r5
 800f244:	f7ff f9e2 	bl	800e60c <_free_r>
 800f248:	2000      	movs	r0, #0
 800f24a:	6360      	str	r0, [r4, #52]	; 0x34
 800f24c:	e7c0      	b.n	800f1d0 <__sflush_r+0x1c>
 800f24e:	2301      	movs	r3, #1
 800f250:	4628      	mov	r0, r5
 800f252:	47b0      	blx	r6
 800f254:	1c41      	adds	r1, r0, #1
 800f256:	d1c8      	bne.n	800f1ea <__sflush_r+0x36>
 800f258:	682b      	ldr	r3, [r5, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d0c5      	beq.n	800f1ea <__sflush_r+0x36>
 800f25e:	2b1d      	cmp	r3, #29
 800f260:	d001      	beq.n	800f266 <__sflush_r+0xb2>
 800f262:	2b16      	cmp	r3, #22
 800f264:	d101      	bne.n	800f26a <__sflush_r+0xb6>
 800f266:	602f      	str	r7, [r5, #0]
 800f268:	e7b1      	b.n	800f1ce <__sflush_r+0x1a>
 800f26a:	89a3      	ldrh	r3, [r4, #12]
 800f26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f270:	81a3      	strh	r3, [r4, #12]
 800f272:	e7ad      	b.n	800f1d0 <__sflush_r+0x1c>
 800f274:	690f      	ldr	r7, [r1, #16]
 800f276:	2f00      	cmp	r7, #0
 800f278:	d0a9      	beq.n	800f1ce <__sflush_r+0x1a>
 800f27a:	0793      	lsls	r3, r2, #30
 800f27c:	680e      	ldr	r6, [r1, #0]
 800f27e:	bf08      	it	eq
 800f280:	694b      	ldreq	r3, [r1, #20]
 800f282:	600f      	str	r7, [r1, #0]
 800f284:	bf18      	it	ne
 800f286:	2300      	movne	r3, #0
 800f288:	eba6 0807 	sub.w	r8, r6, r7
 800f28c:	608b      	str	r3, [r1, #8]
 800f28e:	f1b8 0f00 	cmp.w	r8, #0
 800f292:	dd9c      	ble.n	800f1ce <__sflush_r+0x1a>
 800f294:	6a21      	ldr	r1, [r4, #32]
 800f296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f298:	4643      	mov	r3, r8
 800f29a:	463a      	mov	r2, r7
 800f29c:	4628      	mov	r0, r5
 800f29e:	47b0      	blx	r6
 800f2a0:	2800      	cmp	r0, #0
 800f2a2:	dc06      	bgt.n	800f2b2 <__sflush_r+0xfe>
 800f2a4:	89a3      	ldrh	r3, [r4, #12]
 800f2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2aa:	81a3      	strh	r3, [r4, #12]
 800f2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b0:	e78e      	b.n	800f1d0 <__sflush_r+0x1c>
 800f2b2:	4407      	add	r7, r0
 800f2b4:	eba8 0800 	sub.w	r8, r8, r0
 800f2b8:	e7e9      	b.n	800f28e <__sflush_r+0xda>
 800f2ba:	bf00      	nop
 800f2bc:	dfbffffe 	.word	0xdfbffffe

0800f2c0 <_fflush_r>:
 800f2c0:	b538      	push	{r3, r4, r5, lr}
 800f2c2:	690b      	ldr	r3, [r1, #16]
 800f2c4:	4605      	mov	r5, r0
 800f2c6:	460c      	mov	r4, r1
 800f2c8:	b913      	cbnz	r3, 800f2d0 <_fflush_r+0x10>
 800f2ca:	2500      	movs	r5, #0
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	bd38      	pop	{r3, r4, r5, pc}
 800f2d0:	b118      	cbz	r0, 800f2da <_fflush_r+0x1a>
 800f2d2:	6a03      	ldr	r3, [r0, #32]
 800f2d4:	b90b      	cbnz	r3, 800f2da <_fflush_r+0x1a>
 800f2d6:	f7fe f891 	bl	800d3fc <__sinit>
 800f2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d0f3      	beq.n	800f2ca <_fflush_r+0xa>
 800f2e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2e4:	07d0      	lsls	r0, r2, #31
 800f2e6:	d404      	bmi.n	800f2f2 <_fflush_r+0x32>
 800f2e8:	0599      	lsls	r1, r3, #22
 800f2ea:	d402      	bmi.n	800f2f2 <_fflush_r+0x32>
 800f2ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2ee:	f7fe fb00 	bl	800d8f2 <__retarget_lock_acquire_recursive>
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	4621      	mov	r1, r4
 800f2f6:	f7ff ff5d 	bl	800f1b4 <__sflush_r>
 800f2fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2fc:	07da      	lsls	r2, r3, #31
 800f2fe:	4605      	mov	r5, r0
 800f300:	d4e4      	bmi.n	800f2cc <_fflush_r+0xc>
 800f302:	89a3      	ldrh	r3, [r4, #12]
 800f304:	059b      	lsls	r3, r3, #22
 800f306:	d4e1      	bmi.n	800f2cc <_fflush_r+0xc>
 800f308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f30a:	f7fe faf3 	bl	800d8f4 <__retarget_lock_release_recursive>
 800f30e:	e7dd      	b.n	800f2cc <_fflush_r+0xc>

0800f310 <__swhatbuf_r>:
 800f310:	b570      	push	{r4, r5, r6, lr}
 800f312:	460c      	mov	r4, r1
 800f314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f318:	2900      	cmp	r1, #0
 800f31a:	b096      	sub	sp, #88	; 0x58
 800f31c:	4615      	mov	r5, r2
 800f31e:	461e      	mov	r6, r3
 800f320:	da0d      	bge.n	800f33e <__swhatbuf_r+0x2e>
 800f322:	89a3      	ldrh	r3, [r4, #12]
 800f324:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f328:	f04f 0100 	mov.w	r1, #0
 800f32c:	bf0c      	ite	eq
 800f32e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f332:	2340      	movne	r3, #64	; 0x40
 800f334:	2000      	movs	r0, #0
 800f336:	6031      	str	r1, [r6, #0]
 800f338:	602b      	str	r3, [r5, #0]
 800f33a:	b016      	add	sp, #88	; 0x58
 800f33c:	bd70      	pop	{r4, r5, r6, pc}
 800f33e:	466a      	mov	r2, sp
 800f340:	f000 f848 	bl	800f3d4 <_fstat_r>
 800f344:	2800      	cmp	r0, #0
 800f346:	dbec      	blt.n	800f322 <__swhatbuf_r+0x12>
 800f348:	9901      	ldr	r1, [sp, #4]
 800f34a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f34e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f352:	4259      	negs	r1, r3
 800f354:	4159      	adcs	r1, r3
 800f356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f35a:	e7eb      	b.n	800f334 <__swhatbuf_r+0x24>

0800f35c <__smakebuf_r>:
 800f35c:	898b      	ldrh	r3, [r1, #12]
 800f35e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f360:	079d      	lsls	r5, r3, #30
 800f362:	4606      	mov	r6, r0
 800f364:	460c      	mov	r4, r1
 800f366:	d507      	bpl.n	800f378 <__smakebuf_r+0x1c>
 800f368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f36c:	6023      	str	r3, [r4, #0]
 800f36e:	6123      	str	r3, [r4, #16]
 800f370:	2301      	movs	r3, #1
 800f372:	6163      	str	r3, [r4, #20]
 800f374:	b002      	add	sp, #8
 800f376:	bd70      	pop	{r4, r5, r6, pc}
 800f378:	ab01      	add	r3, sp, #4
 800f37a:	466a      	mov	r2, sp
 800f37c:	f7ff ffc8 	bl	800f310 <__swhatbuf_r>
 800f380:	9900      	ldr	r1, [sp, #0]
 800f382:	4605      	mov	r5, r0
 800f384:	4630      	mov	r0, r6
 800f386:	f7ff f9b5 	bl	800e6f4 <_malloc_r>
 800f38a:	b948      	cbnz	r0, 800f3a0 <__smakebuf_r+0x44>
 800f38c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f390:	059a      	lsls	r2, r3, #22
 800f392:	d4ef      	bmi.n	800f374 <__smakebuf_r+0x18>
 800f394:	f023 0303 	bic.w	r3, r3, #3
 800f398:	f043 0302 	orr.w	r3, r3, #2
 800f39c:	81a3      	strh	r3, [r4, #12]
 800f39e:	e7e3      	b.n	800f368 <__smakebuf_r+0xc>
 800f3a0:	89a3      	ldrh	r3, [r4, #12]
 800f3a2:	6020      	str	r0, [r4, #0]
 800f3a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3a8:	81a3      	strh	r3, [r4, #12]
 800f3aa:	9b00      	ldr	r3, [sp, #0]
 800f3ac:	6163      	str	r3, [r4, #20]
 800f3ae:	9b01      	ldr	r3, [sp, #4]
 800f3b0:	6120      	str	r0, [r4, #16]
 800f3b2:	b15b      	cbz	r3, 800f3cc <__smakebuf_r+0x70>
 800f3b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	f000 f81d 	bl	800f3f8 <_isatty_r>
 800f3be:	b128      	cbz	r0, 800f3cc <__smakebuf_r+0x70>
 800f3c0:	89a3      	ldrh	r3, [r4, #12]
 800f3c2:	f023 0303 	bic.w	r3, r3, #3
 800f3c6:	f043 0301 	orr.w	r3, r3, #1
 800f3ca:	81a3      	strh	r3, [r4, #12]
 800f3cc:	89a3      	ldrh	r3, [r4, #12]
 800f3ce:	431d      	orrs	r5, r3
 800f3d0:	81a5      	strh	r5, [r4, #12]
 800f3d2:	e7cf      	b.n	800f374 <__smakebuf_r+0x18>

0800f3d4 <_fstat_r>:
 800f3d4:	b538      	push	{r3, r4, r5, lr}
 800f3d6:	4d07      	ldr	r5, [pc, #28]	; (800f3f4 <_fstat_r+0x20>)
 800f3d8:	2300      	movs	r3, #0
 800f3da:	4604      	mov	r4, r0
 800f3dc:	4608      	mov	r0, r1
 800f3de:	4611      	mov	r1, r2
 800f3e0:	602b      	str	r3, [r5, #0]
 800f3e2:	f7f4 fd9a 	bl	8003f1a <_fstat>
 800f3e6:	1c43      	adds	r3, r0, #1
 800f3e8:	d102      	bne.n	800f3f0 <_fstat_r+0x1c>
 800f3ea:	682b      	ldr	r3, [r5, #0]
 800f3ec:	b103      	cbz	r3, 800f3f0 <_fstat_r+0x1c>
 800f3ee:	6023      	str	r3, [r4, #0]
 800f3f0:	bd38      	pop	{r3, r4, r5, pc}
 800f3f2:	bf00      	nop
 800f3f4:	20019f04 	.word	0x20019f04

0800f3f8 <_isatty_r>:
 800f3f8:	b538      	push	{r3, r4, r5, lr}
 800f3fa:	4d06      	ldr	r5, [pc, #24]	; (800f414 <_isatty_r+0x1c>)
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	4604      	mov	r4, r0
 800f400:	4608      	mov	r0, r1
 800f402:	602b      	str	r3, [r5, #0]
 800f404:	f7f4 fd99 	bl	8003f3a <_isatty>
 800f408:	1c43      	adds	r3, r0, #1
 800f40a:	d102      	bne.n	800f412 <_isatty_r+0x1a>
 800f40c:	682b      	ldr	r3, [r5, #0]
 800f40e:	b103      	cbz	r3, 800f412 <_isatty_r+0x1a>
 800f410:	6023      	str	r3, [r4, #0]
 800f412:	bd38      	pop	{r3, r4, r5, pc}
 800f414:	20019f04 	.word	0x20019f04

0800f418 <_sbrk_r>:
 800f418:	b538      	push	{r3, r4, r5, lr}
 800f41a:	4d06      	ldr	r5, [pc, #24]	; (800f434 <_sbrk_r+0x1c>)
 800f41c:	2300      	movs	r3, #0
 800f41e:	4604      	mov	r4, r0
 800f420:	4608      	mov	r0, r1
 800f422:	602b      	str	r3, [r5, #0]
 800f424:	f7f4 fda2 	bl	8003f6c <_sbrk>
 800f428:	1c43      	adds	r3, r0, #1
 800f42a:	d102      	bne.n	800f432 <_sbrk_r+0x1a>
 800f42c:	682b      	ldr	r3, [r5, #0]
 800f42e:	b103      	cbz	r3, 800f432 <_sbrk_r+0x1a>
 800f430:	6023      	str	r3, [r4, #0]
 800f432:	bd38      	pop	{r3, r4, r5, pc}
 800f434:	20019f04 	.word	0x20019f04

0800f438 <__assert_func>:
 800f438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f43a:	4614      	mov	r4, r2
 800f43c:	461a      	mov	r2, r3
 800f43e:	4b09      	ldr	r3, [pc, #36]	; (800f464 <__assert_func+0x2c>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	4605      	mov	r5, r0
 800f444:	68d8      	ldr	r0, [r3, #12]
 800f446:	b14c      	cbz	r4, 800f45c <__assert_func+0x24>
 800f448:	4b07      	ldr	r3, [pc, #28]	; (800f468 <__assert_func+0x30>)
 800f44a:	9100      	str	r1, [sp, #0]
 800f44c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f450:	4906      	ldr	r1, [pc, #24]	; (800f46c <__assert_func+0x34>)
 800f452:	462b      	mov	r3, r5
 800f454:	f000 f872 	bl	800f53c <fiprintf>
 800f458:	f000 f882 	bl	800f560 <abort>
 800f45c:	4b04      	ldr	r3, [pc, #16]	; (800f470 <__assert_func+0x38>)
 800f45e:	461c      	mov	r4, r3
 800f460:	e7f3      	b.n	800f44a <__assert_func+0x12>
 800f462:	bf00      	nop
 800f464:	20000934 	.word	0x20000934
 800f468:	08011dbf 	.word	0x08011dbf
 800f46c:	08011dcc 	.word	0x08011dcc
 800f470:	08011dfa 	.word	0x08011dfa

0800f474 <_calloc_r>:
 800f474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f476:	fba1 2402 	umull	r2, r4, r1, r2
 800f47a:	b94c      	cbnz	r4, 800f490 <_calloc_r+0x1c>
 800f47c:	4611      	mov	r1, r2
 800f47e:	9201      	str	r2, [sp, #4]
 800f480:	f7ff f938 	bl	800e6f4 <_malloc_r>
 800f484:	9a01      	ldr	r2, [sp, #4]
 800f486:	4605      	mov	r5, r0
 800f488:	b930      	cbnz	r0, 800f498 <_calloc_r+0x24>
 800f48a:	4628      	mov	r0, r5
 800f48c:	b003      	add	sp, #12
 800f48e:	bd30      	pop	{r4, r5, pc}
 800f490:	220c      	movs	r2, #12
 800f492:	6002      	str	r2, [r0, #0]
 800f494:	2500      	movs	r5, #0
 800f496:	e7f8      	b.n	800f48a <_calloc_r+0x16>
 800f498:	4621      	mov	r1, r4
 800f49a:	f7fe f987 	bl	800d7ac <memset>
 800f49e:	e7f4      	b.n	800f48a <_calloc_r+0x16>

0800f4a0 <__ascii_mbtowc>:
 800f4a0:	b082      	sub	sp, #8
 800f4a2:	b901      	cbnz	r1, 800f4a6 <__ascii_mbtowc+0x6>
 800f4a4:	a901      	add	r1, sp, #4
 800f4a6:	b142      	cbz	r2, 800f4ba <__ascii_mbtowc+0x1a>
 800f4a8:	b14b      	cbz	r3, 800f4be <__ascii_mbtowc+0x1e>
 800f4aa:	7813      	ldrb	r3, [r2, #0]
 800f4ac:	600b      	str	r3, [r1, #0]
 800f4ae:	7812      	ldrb	r2, [r2, #0]
 800f4b0:	1e10      	subs	r0, r2, #0
 800f4b2:	bf18      	it	ne
 800f4b4:	2001      	movne	r0, #1
 800f4b6:	b002      	add	sp, #8
 800f4b8:	4770      	bx	lr
 800f4ba:	4610      	mov	r0, r2
 800f4bc:	e7fb      	b.n	800f4b6 <__ascii_mbtowc+0x16>
 800f4be:	f06f 0001 	mvn.w	r0, #1
 800f4c2:	e7f8      	b.n	800f4b6 <__ascii_mbtowc+0x16>

0800f4c4 <_realloc_r>:
 800f4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4c8:	4680      	mov	r8, r0
 800f4ca:	4614      	mov	r4, r2
 800f4cc:	460e      	mov	r6, r1
 800f4ce:	b921      	cbnz	r1, 800f4da <_realloc_r+0x16>
 800f4d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d4:	4611      	mov	r1, r2
 800f4d6:	f7ff b90d 	b.w	800e6f4 <_malloc_r>
 800f4da:	b92a      	cbnz	r2, 800f4e8 <_realloc_r+0x24>
 800f4dc:	f7ff f896 	bl	800e60c <_free_r>
 800f4e0:	4625      	mov	r5, r4
 800f4e2:	4628      	mov	r0, r5
 800f4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e8:	f000 f841 	bl	800f56e <_malloc_usable_size_r>
 800f4ec:	4284      	cmp	r4, r0
 800f4ee:	4607      	mov	r7, r0
 800f4f0:	d802      	bhi.n	800f4f8 <_realloc_r+0x34>
 800f4f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f4f6:	d812      	bhi.n	800f51e <_realloc_r+0x5a>
 800f4f8:	4621      	mov	r1, r4
 800f4fa:	4640      	mov	r0, r8
 800f4fc:	f7ff f8fa 	bl	800e6f4 <_malloc_r>
 800f500:	4605      	mov	r5, r0
 800f502:	2800      	cmp	r0, #0
 800f504:	d0ed      	beq.n	800f4e2 <_realloc_r+0x1e>
 800f506:	42bc      	cmp	r4, r7
 800f508:	4622      	mov	r2, r4
 800f50a:	4631      	mov	r1, r6
 800f50c:	bf28      	it	cs
 800f50e:	463a      	movcs	r2, r7
 800f510:	f7fe f9f1 	bl	800d8f6 <memcpy>
 800f514:	4631      	mov	r1, r6
 800f516:	4640      	mov	r0, r8
 800f518:	f7ff f878 	bl	800e60c <_free_r>
 800f51c:	e7e1      	b.n	800f4e2 <_realloc_r+0x1e>
 800f51e:	4635      	mov	r5, r6
 800f520:	e7df      	b.n	800f4e2 <_realloc_r+0x1e>

0800f522 <__ascii_wctomb>:
 800f522:	b149      	cbz	r1, 800f538 <__ascii_wctomb+0x16>
 800f524:	2aff      	cmp	r2, #255	; 0xff
 800f526:	bf85      	ittet	hi
 800f528:	238a      	movhi	r3, #138	; 0x8a
 800f52a:	6003      	strhi	r3, [r0, #0]
 800f52c:	700a      	strbls	r2, [r1, #0]
 800f52e:	f04f 30ff 	movhi.w	r0, #4294967295
 800f532:	bf98      	it	ls
 800f534:	2001      	movls	r0, #1
 800f536:	4770      	bx	lr
 800f538:	4608      	mov	r0, r1
 800f53a:	4770      	bx	lr

0800f53c <fiprintf>:
 800f53c:	b40e      	push	{r1, r2, r3}
 800f53e:	b503      	push	{r0, r1, lr}
 800f540:	4601      	mov	r1, r0
 800f542:	ab03      	add	r3, sp, #12
 800f544:	4805      	ldr	r0, [pc, #20]	; (800f55c <fiprintf+0x20>)
 800f546:	f853 2b04 	ldr.w	r2, [r3], #4
 800f54a:	6800      	ldr	r0, [r0, #0]
 800f54c:	9301      	str	r3, [sp, #4]
 800f54e:	f000 f83f 	bl	800f5d0 <_vfiprintf_r>
 800f552:	b002      	add	sp, #8
 800f554:	f85d eb04 	ldr.w	lr, [sp], #4
 800f558:	b003      	add	sp, #12
 800f55a:	4770      	bx	lr
 800f55c:	20000934 	.word	0x20000934

0800f560 <abort>:
 800f560:	b508      	push	{r3, lr}
 800f562:	2006      	movs	r0, #6
 800f564:	f000 f976 	bl	800f854 <raise>
 800f568:	2001      	movs	r0, #1
 800f56a:	f7f4 fc87 	bl	8003e7c <_exit>

0800f56e <_malloc_usable_size_r>:
 800f56e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f572:	1f18      	subs	r0, r3, #4
 800f574:	2b00      	cmp	r3, #0
 800f576:	bfbc      	itt	lt
 800f578:	580b      	ldrlt	r3, [r1, r0]
 800f57a:	18c0      	addlt	r0, r0, r3
 800f57c:	4770      	bx	lr

0800f57e <__sfputc_r>:
 800f57e:	6893      	ldr	r3, [r2, #8]
 800f580:	3b01      	subs	r3, #1
 800f582:	2b00      	cmp	r3, #0
 800f584:	b410      	push	{r4}
 800f586:	6093      	str	r3, [r2, #8]
 800f588:	da08      	bge.n	800f59c <__sfputc_r+0x1e>
 800f58a:	6994      	ldr	r4, [r2, #24]
 800f58c:	42a3      	cmp	r3, r4
 800f58e:	db01      	blt.n	800f594 <__sfputc_r+0x16>
 800f590:	290a      	cmp	r1, #10
 800f592:	d103      	bne.n	800f59c <__sfputc_r+0x1e>
 800f594:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f598:	f7fe b859 	b.w	800d64e <__swbuf_r>
 800f59c:	6813      	ldr	r3, [r2, #0]
 800f59e:	1c58      	adds	r0, r3, #1
 800f5a0:	6010      	str	r0, [r2, #0]
 800f5a2:	7019      	strb	r1, [r3, #0]
 800f5a4:	4608      	mov	r0, r1
 800f5a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5aa:	4770      	bx	lr

0800f5ac <__sfputs_r>:
 800f5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ae:	4606      	mov	r6, r0
 800f5b0:	460f      	mov	r7, r1
 800f5b2:	4614      	mov	r4, r2
 800f5b4:	18d5      	adds	r5, r2, r3
 800f5b6:	42ac      	cmp	r4, r5
 800f5b8:	d101      	bne.n	800f5be <__sfputs_r+0x12>
 800f5ba:	2000      	movs	r0, #0
 800f5bc:	e007      	b.n	800f5ce <__sfputs_r+0x22>
 800f5be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5c2:	463a      	mov	r2, r7
 800f5c4:	4630      	mov	r0, r6
 800f5c6:	f7ff ffda 	bl	800f57e <__sfputc_r>
 800f5ca:	1c43      	adds	r3, r0, #1
 800f5cc:	d1f3      	bne.n	800f5b6 <__sfputs_r+0xa>
 800f5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f5d0 <_vfiprintf_r>:
 800f5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d4:	460d      	mov	r5, r1
 800f5d6:	b09d      	sub	sp, #116	; 0x74
 800f5d8:	4614      	mov	r4, r2
 800f5da:	4698      	mov	r8, r3
 800f5dc:	4606      	mov	r6, r0
 800f5de:	b118      	cbz	r0, 800f5e8 <_vfiprintf_r+0x18>
 800f5e0:	6a03      	ldr	r3, [r0, #32]
 800f5e2:	b90b      	cbnz	r3, 800f5e8 <_vfiprintf_r+0x18>
 800f5e4:	f7fd ff0a 	bl	800d3fc <__sinit>
 800f5e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5ea:	07d9      	lsls	r1, r3, #31
 800f5ec:	d405      	bmi.n	800f5fa <_vfiprintf_r+0x2a>
 800f5ee:	89ab      	ldrh	r3, [r5, #12]
 800f5f0:	059a      	lsls	r2, r3, #22
 800f5f2:	d402      	bmi.n	800f5fa <_vfiprintf_r+0x2a>
 800f5f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5f6:	f7fe f97c 	bl	800d8f2 <__retarget_lock_acquire_recursive>
 800f5fa:	89ab      	ldrh	r3, [r5, #12]
 800f5fc:	071b      	lsls	r3, r3, #28
 800f5fe:	d501      	bpl.n	800f604 <_vfiprintf_r+0x34>
 800f600:	692b      	ldr	r3, [r5, #16]
 800f602:	b99b      	cbnz	r3, 800f62c <_vfiprintf_r+0x5c>
 800f604:	4629      	mov	r1, r5
 800f606:	4630      	mov	r0, r6
 800f608:	f7fe f85e 	bl	800d6c8 <__swsetup_r>
 800f60c:	b170      	cbz	r0, 800f62c <_vfiprintf_r+0x5c>
 800f60e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f610:	07dc      	lsls	r4, r3, #31
 800f612:	d504      	bpl.n	800f61e <_vfiprintf_r+0x4e>
 800f614:	f04f 30ff 	mov.w	r0, #4294967295
 800f618:	b01d      	add	sp, #116	; 0x74
 800f61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61e:	89ab      	ldrh	r3, [r5, #12]
 800f620:	0598      	lsls	r0, r3, #22
 800f622:	d4f7      	bmi.n	800f614 <_vfiprintf_r+0x44>
 800f624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f626:	f7fe f965 	bl	800d8f4 <__retarget_lock_release_recursive>
 800f62a:	e7f3      	b.n	800f614 <_vfiprintf_r+0x44>
 800f62c:	2300      	movs	r3, #0
 800f62e:	9309      	str	r3, [sp, #36]	; 0x24
 800f630:	2320      	movs	r3, #32
 800f632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f636:	f8cd 800c 	str.w	r8, [sp, #12]
 800f63a:	2330      	movs	r3, #48	; 0x30
 800f63c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f7f0 <_vfiprintf_r+0x220>
 800f640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f644:	f04f 0901 	mov.w	r9, #1
 800f648:	4623      	mov	r3, r4
 800f64a:	469a      	mov	sl, r3
 800f64c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f650:	b10a      	cbz	r2, 800f656 <_vfiprintf_r+0x86>
 800f652:	2a25      	cmp	r2, #37	; 0x25
 800f654:	d1f9      	bne.n	800f64a <_vfiprintf_r+0x7a>
 800f656:	ebba 0b04 	subs.w	fp, sl, r4
 800f65a:	d00b      	beq.n	800f674 <_vfiprintf_r+0xa4>
 800f65c:	465b      	mov	r3, fp
 800f65e:	4622      	mov	r2, r4
 800f660:	4629      	mov	r1, r5
 800f662:	4630      	mov	r0, r6
 800f664:	f7ff ffa2 	bl	800f5ac <__sfputs_r>
 800f668:	3001      	adds	r0, #1
 800f66a:	f000 80a9 	beq.w	800f7c0 <_vfiprintf_r+0x1f0>
 800f66e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f670:	445a      	add	r2, fp
 800f672:	9209      	str	r2, [sp, #36]	; 0x24
 800f674:	f89a 3000 	ldrb.w	r3, [sl]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	f000 80a1 	beq.w	800f7c0 <_vfiprintf_r+0x1f0>
 800f67e:	2300      	movs	r3, #0
 800f680:	f04f 32ff 	mov.w	r2, #4294967295
 800f684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f688:	f10a 0a01 	add.w	sl, sl, #1
 800f68c:	9304      	str	r3, [sp, #16]
 800f68e:	9307      	str	r3, [sp, #28]
 800f690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f694:	931a      	str	r3, [sp, #104]	; 0x68
 800f696:	4654      	mov	r4, sl
 800f698:	2205      	movs	r2, #5
 800f69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f69e:	4854      	ldr	r0, [pc, #336]	; (800f7f0 <_vfiprintf_r+0x220>)
 800f6a0:	f7f0 fdae 	bl	8000200 <memchr>
 800f6a4:	9a04      	ldr	r2, [sp, #16]
 800f6a6:	b9d8      	cbnz	r0, 800f6e0 <_vfiprintf_r+0x110>
 800f6a8:	06d1      	lsls	r1, r2, #27
 800f6aa:	bf44      	itt	mi
 800f6ac:	2320      	movmi	r3, #32
 800f6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6b2:	0713      	lsls	r3, r2, #28
 800f6b4:	bf44      	itt	mi
 800f6b6:	232b      	movmi	r3, #43	; 0x2b
 800f6b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6bc:	f89a 3000 	ldrb.w	r3, [sl]
 800f6c0:	2b2a      	cmp	r3, #42	; 0x2a
 800f6c2:	d015      	beq.n	800f6f0 <_vfiprintf_r+0x120>
 800f6c4:	9a07      	ldr	r2, [sp, #28]
 800f6c6:	4654      	mov	r4, sl
 800f6c8:	2000      	movs	r0, #0
 800f6ca:	f04f 0c0a 	mov.w	ip, #10
 800f6ce:	4621      	mov	r1, r4
 800f6d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6d4:	3b30      	subs	r3, #48	; 0x30
 800f6d6:	2b09      	cmp	r3, #9
 800f6d8:	d94d      	bls.n	800f776 <_vfiprintf_r+0x1a6>
 800f6da:	b1b0      	cbz	r0, 800f70a <_vfiprintf_r+0x13a>
 800f6dc:	9207      	str	r2, [sp, #28]
 800f6de:	e014      	b.n	800f70a <_vfiprintf_r+0x13a>
 800f6e0:	eba0 0308 	sub.w	r3, r0, r8
 800f6e4:	fa09 f303 	lsl.w	r3, r9, r3
 800f6e8:	4313      	orrs	r3, r2
 800f6ea:	9304      	str	r3, [sp, #16]
 800f6ec:	46a2      	mov	sl, r4
 800f6ee:	e7d2      	b.n	800f696 <_vfiprintf_r+0xc6>
 800f6f0:	9b03      	ldr	r3, [sp, #12]
 800f6f2:	1d19      	adds	r1, r3, #4
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	9103      	str	r1, [sp, #12]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	bfbb      	ittet	lt
 800f6fc:	425b      	neglt	r3, r3
 800f6fe:	f042 0202 	orrlt.w	r2, r2, #2
 800f702:	9307      	strge	r3, [sp, #28]
 800f704:	9307      	strlt	r3, [sp, #28]
 800f706:	bfb8      	it	lt
 800f708:	9204      	strlt	r2, [sp, #16]
 800f70a:	7823      	ldrb	r3, [r4, #0]
 800f70c:	2b2e      	cmp	r3, #46	; 0x2e
 800f70e:	d10c      	bne.n	800f72a <_vfiprintf_r+0x15a>
 800f710:	7863      	ldrb	r3, [r4, #1]
 800f712:	2b2a      	cmp	r3, #42	; 0x2a
 800f714:	d134      	bne.n	800f780 <_vfiprintf_r+0x1b0>
 800f716:	9b03      	ldr	r3, [sp, #12]
 800f718:	1d1a      	adds	r2, r3, #4
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	9203      	str	r2, [sp, #12]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	bfb8      	it	lt
 800f722:	f04f 33ff 	movlt.w	r3, #4294967295
 800f726:	3402      	adds	r4, #2
 800f728:	9305      	str	r3, [sp, #20]
 800f72a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f800 <_vfiprintf_r+0x230>
 800f72e:	7821      	ldrb	r1, [r4, #0]
 800f730:	2203      	movs	r2, #3
 800f732:	4650      	mov	r0, sl
 800f734:	f7f0 fd64 	bl	8000200 <memchr>
 800f738:	b138      	cbz	r0, 800f74a <_vfiprintf_r+0x17a>
 800f73a:	9b04      	ldr	r3, [sp, #16]
 800f73c:	eba0 000a 	sub.w	r0, r0, sl
 800f740:	2240      	movs	r2, #64	; 0x40
 800f742:	4082      	lsls	r2, r0
 800f744:	4313      	orrs	r3, r2
 800f746:	3401      	adds	r4, #1
 800f748:	9304      	str	r3, [sp, #16]
 800f74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f74e:	4829      	ldr	r0, [pc, #164]	; (800f7f4 <_vfiprintf_r+0x224>)
 800f750:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f754:	2206      	movs	r2, #6
 800f756:	f7f0 fd53 	bl	8000200 <memchr>
 800f75a:	2800      	cmp	r0, #0
 800f75c:	d03f      	beq.n	800f7de <_vfiprintf_r+0x20e>
 800f75e:	4b26      	ldr	r3, [pc, #152]	; (800f7f8 <_vfiprintf_r+0x228>)
 800f760:	bb1b      	cbnz	r3, 800f7aa <_vfiprintf_r+0x1da>
 800f762:	9b03      	ldr	r3, [sp, #12]
 800f764:	3307      	adds	r3, #7
 800f766:	f023 0307 	bic.w	r3, r3, #7
 800f76a:	3308      	adds	r3, #8
 800f76c:	9303      	str	r3, [sp, #12]
 800f76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f770:	443b      	add	r3, r7
 800f772:	9309      	str	r3, [sp, #36]	; 0x24
 800f774:	e768      	b.n	800f648 <_vfiprintf_r+0x78>
 800f776:	fb0c 3202 	mla	r2, ip, r2, r3
 800f77a:	460c      	mov	r4, r1
 800f77c:	2001      	movs	r0, #1
 800f77e:	e7a6      	b.n	800f6ce <_vfiprintf_r+0xfe>
 800f780:	2300      	movs	r3, #0
 800f782:	3401      	adds	r4, #1
 800f784:	9305      	str	r3, [sp, #20]
 800f786:	4619      	mov	r1, r3
 800f788:	f04f 0c0a 	mov.w	ip, #10
 800f78c:	4620      	mov	r0, r4
 800f78e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f792:	3a30      	subs	r2, #48	; 0x30
 800f794:	2a09      	cmp	r2, #9
 800f796:	d903      	bls.n	800f7a0 <_vfiprintf_r+0x1d0>
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d0c6      	beq.n	800f72a <_vfiprintf_r+0x15a>
 800f79c:	9105      	str	r1, [sp, #20]
 800f79e:	e7c4      	b.n	800f72a <_vfiprintf_r+0x15a>
 800f7a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	e7f0      	b.n	800f78c <_vfiprintf_r+0x1bc>
 800f7aa:	ab03      	add	r3, sp, #12
 800f7ac:	9300      	str	r3, [sp, #0]
 800f7ae:	462a      	mov	r2, r5
 800f7b0:	4b12      	ldr	r3, [pc, #72]	; (800f7fc <_vfiprintf_r+0x22c>)
 800f7b2:	a904      	add	r1, sp, #16
 800f7b4:	4630      	mov	r0, r6
 800f7b6:	f7fd f9cf 	bl	800cb58 <_printf_float>
 800f7ba:	4607      	mov	r7, r0
 800f7bc:	1c78      	adds	r0, r7, #1
 800f7be:	d1d6      	bne.n	800f76e <_vfiprintf_r+0x19e>
 800f7c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7c2:	07d9      	lsls	r1, r3, #31
 800f7c4:	d405      	bmi.n	800f7d2 <_vfiprintf_r+0x202>
 800f7c6:	89ab      	ldrh	r3, [r5, #12]
 800f7c8:	059a      	lsls	r2, r3, #22
 800f7ca:	d402      	bmi.n	800f7d2 <_vfiprintf_r+0x202>
 800f7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7ce:	f7fe f891 	bl	800d8f4 <__retarget_lock_release_recursive>
 800f7d2:	89ab      	ldrh	r3, [r5, #12]
 800f7d4:	065b      	lsls	r3, r3, #25
 800f7d6:	f53f af1d 	bmi.w	800f614 <_vfiprintf_r+0x44>
 800f7da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7dc:	e71c      	b.n	800f618 <_vfiprintf_r+0x48>
 800f7de:	ab03      	add	r3, sp, #12
 800f7e0:	9300      	str	r3, [sp, #0]
 800f7e2:	462a      	mov	r2, r5
 800f7e4:	4b05      	ldr	r3, [pc, #20]	; (800f7fc <_vfiprintf_r+0x22c>)
 800f7e6:	a904      	add	r1, sp, #16
 800f7e8:	4630      	mov	r0, r6
 800f7ea:	f7fd fc59 	bl	800d0a0 <_printf_i>
 800f7ee:	e7e4      	b.n	800f7ba <_vfiprintf_r+0x1ea>
 800f7f0:	08011da4 	.word	0x08011da4
 800f7f4:	08011dae 	.word	0x08011dae
 800f7f8:	0800cb59 	.word	0x0800cb59
 800f7fc:	0800f5ad 	.word	0x0800f5ad
 800f800:	08011daa 	.word	0x08011daa

0800f804 <_raise_r>:
 800f804:	291f      	cmp	r1, #31
 800f806:	b538      	push	{r3, r4, r5, lr}
 800f808:	4604      	mov	r4, r0
 800f80a:	460d      	mov	r5, r1
 800f80c:	d904      	bls.n	800f818 <_raise_r+0x14>
 800f80e:	2316      	movs	r3, #22
 800f810:	6003      	str	r3, [r0, #0]
 800f812:	f04f 30ff 	mov.w	r0, #4294967295
 800f816:	bd38      	pop	{r3, r4, r5, pc}
 800f818:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f81a:	b112      	cbz	r2, 800f822 <_raise_r+0x1e>
 800f81c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f820:	b94b      	cbnz	r3, 800f836 <_raise_r+0x32>
 800f822:	4620      	mov	r0, r4
 800f824:	f000 f830 	bl	800f888 <_getpid_r>
 800f828:	462a      	mov	r2, r5
 800f82a:	4601      	mov	r1, r0
 800f82c:	4620      	mov	r0, r4
 800f82e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f832:	f000 b817 	b.w	800f864 <_kill_r>
 800f836:	2b01      	cmp	r3, #1
 800f838:	d00a      	beq.n	800f850 <_raise_r+0x4c>
 800f83a:	1c59      	adds	r1, r3, #1
 800f83c:	d103      	bne.n	800f846 <_raise_r+0x42>
 800f83e:	2316      	movs	r3, #22
 800f840:	6003      	str	r3, [r0, #0]
 800f842:	2001      	movs	r0, #1
 800f844:	e7e7      	b.n	800f816 <_raise_r+0x12>
 800f846:	2400      	movs	r4, #0
 800f848:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f84c:	4628      	mov	r0, r5
 800f84e:	4798      	blx	r3
 800f850:	2000      	movs	r0, #0
 800f852:	e7e0      	b.n	800f816 <_raise_r+0x12>

0800f854 <raise>:
 800f854:	4b02      	ldr	r3, [pc, #8]	; (800f860 <raise+0xc>)
 800f856:	4601      	mov	r1, r0
 800f858:	6818      	ldr	r0, [r3, #0]
 800f85a:	f7ff bfd3 	b.w	800f804 <_raise_r>
 800f85e:	bf00      	nop
 800f860:	20000934 	.word	0x20000934

0800f864 <_kill_r>:
 800f864:	b538      	push	{r3, r4, r5, lr}
 800f866:	4d07      	ldr	r5, [pc, #28]	; (800f884 <_kill_r+0x20>)
 800f868:	2300      	movs	r3, #0
 800f86a:	4604      	mov	r4, r0
 800f86c:	4608      	mov	r0, r1
 800f86e:	4611      	mov	r1, r2
 800f870:	602b      	str	r3, [r5, #0]
 800f872:	f7f4 faf3 	bl	8003e5c <_kill>
 800f876:	1c43      	adds	r3, r0, #1
 800f878:	d102      	bne.n	800f880 <_kill_r+0x1c>
 800f87a:	682b      	ldr	r3, [r5, #0]
 800f87c:	b103      	cbz	r3, 800f880 <_kill_r+0x1c>
 800f87e:	6023      	str	r3, [r4, #0]
 800f880:	bd38      	pop	{r3, r4, r5, pc}
 800f882:	bf00      	nop
 800f884:	20019f04 	.word	0x20019f04

0800f888 <_getpid_r>:
 800f888:	f7f4 bae0 	b.w	8003e4c <_getpid>

0800f88c <_init>:
 800f88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f88e:	bf00      	nop
 800f890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f892:	bc08      	pop	{r3}
 800f894:	469e      	mov	lr, r3
 800f896:	4770      	bx	lr

0800f898 <_fini>:
 800f898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f89a:	bf00      	nop
 800f89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f89e:	bc08      	pop	{r3}
 800f8a0:	469e      	mov	lr, r3
 800f8a2:	4770      	bx	lr
